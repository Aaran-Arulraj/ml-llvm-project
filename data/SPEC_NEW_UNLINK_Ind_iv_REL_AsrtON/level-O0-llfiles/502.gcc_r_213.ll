; ModuleID = 'sched-rgn.c'
source_filename = "sched-rgn.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.region = type { i32, i32, i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.candidate = type { i8, i8, i32, %struct.bblst, %struct.bblst }
%struct.bblst = type { %struct.basic_block_def**, i32 }
%struct.haifa_sched_info = type { void ()*, i32 (%struct.rtx_def*)*, i32 ()*, i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*)*, i8* (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*)*, i8 (%struct.rtx_def*)*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i8, i32, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, i32 }
%struct.VEC_haifa_insn_data_def_heap = type { %struct.VEC_haifa_insn_data_def_base }
%struct.VEC_haifa_insn_data_def_base = type { i32, i32, [1 x %struct._haifa_insn_data] }
%struct._haifa_insn_data = type { i32, i32, i32, i32, i32, i16, i8, i8, i32, i32, i32, %struct.basic_block_def*, %struct.rtx_def*, %struct.reg_pressure_data*, i32*, %struct.reg_use_data*, %struct.reg_set_data*, i32 }
%struct.reg_pressure_data = type { i32 }
%struct.reg_use_data = type { i32, %struct.rtx_def*, %struct.reg_use_data*, %struct.reg_use_data* }
%struct.reg_set_data = type { i32, %struct.rtx_def*, %struct.reg_set_data* }
%struct.deps = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, %struct.deps_reg*, %struct.bitmap_head_def, %struct.bitmap_head_def, i32, i8 }
%struct.deps_reg = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.common_sched_info_def = type { void (i32, i32, i32)*, void (%struct.basic_block_def*, %struct.basic_block_def*)*, i32 (%struct.basic_block_def*)*, i32 (%struct.rtx_def*)*, i32 }
%struct.sched_deps_info_def = type { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)*, void (%struct.rtx_def*)*, void ()*, void (%struct.rtx_def*)*, void ()*, void (%struct.rtx_def*)*, void ()*, void (i32)*, void (i32)*, void (i32)*, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, i8 }
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct._dep_link = type { %struct._dep_node*, %struct._dep_link*, %struct._dep_link** }
%struct._dep_node = type { %struct._dep_link, %struct._dep, %struct._dep_link }
%struct._dep = type { %struct.rtx_def*, %struct.rtx_def*, i32, i32 }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.gcov_ctr_summary = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct.spec_info_def = type { i32, %struct._IO_FILE*, i32, i32, i32 }
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%union.gimple_statement_d = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_haifa_deps_insn_data_def_heap = type { %struct.VEC_haifa_deps_insn_data_def_base }
%struct.VEC_haifa_deps_insn_data_def_base = type { i32, i32, [1 x %struct._haifa_deps_insn_data] }
%struct._haifa_deps_insn_data = type { i32, i32, %struct._deps_list*, %struct._deps_list*, %struct._deps_list*, %struct._deps_list*, %struct._deps_list*, i8 }
%struct._deps_list = type { %struct._dep_link*, i32 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct._sd_iterator = type { i32, %struct.rtx_def*, %struct._dep_link**, i8 }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.edgelst = type { %struct.edge_def**, i32 }
%struct.sbitmap_iterator = type { i64*, i32, i32, i32, i64 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }

@nr_regions = dso_local global i32 0, align 4, !dbg !0
@rgn_table = dso_local global %struct.region* null, align 8, !dbg !2201
@rgn_bb_table = dso_local global i32* null, align 8, !dbg !2203
@block_to_bb = dso_local global i32* null, align 8, !dbg !2205
@containing_rgn = dso_local global i32* null, align 8, !dbg !2207
@ebb_head = dso_local global i32* null, align 8, !dbg !2209
@sched_dump = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [40 x i8] c"\0A;;   ------------ REGIONS ----------\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c";;\09rgn %d nr_blocks %d:\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c";;\09bb/block: \00", align 1
@current_blocks = common dso_local global i32 0, align 4, !dbg !2249
@.str.3 = private unnamed_addr constant [8 x i8] c" %d/%d \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.5 = private unnamed_addr constant [42 x i8] c"\0A;;   ------------ REGION %d ----------\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"digraph Region_%d {\0A\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.8 = private unnamed_addr constant [11 x i8] c"\09%d -> %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"wt\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.11 = private unnamed_addr constant [12 x i8] c"sched-rgn.c\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@sched_verbose = external dso_local global i32, align 4
@.str.13 = private unnamed_addr constant [38 x i8] c";; Region extension iterations: %d%s\0A\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"... failed\00", align 1
@.str.15 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@candidate_table = internal global %struct.candidate* null, align 8, !dbg !2251
@.str.16 = private unnamed_addr constant [29 x i8] c"src b %d bb %d speculative \0A\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"split path: \00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.19 = private unnamed_addr constant [14 x i8] c"update path: \00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c" src %d equivalent\0A\00", align 1
@.str.21 = private unnamed_addr constant [53 x i8] c"----------- candidate table: target: b=%d bb=%d ---\0A\00", align 1
@current_nr_blocks = common dso_local global i32 0, align 4, !dbg !2247
@rgn_sched_info = internal global %struct.haifa_sched_info zeroinitializer, align 8, !dbg !2342
@.str.22 = private unnamed_addr constant [57 x i8] c";;   --------------- forward dependences: ------------ \0A\00", align 1
@.str.23 = private unnamed_addr constant [46 x i8] c"\0A;;   --- Region Dependences --- b %d bb %d \0A\00", align 1
@.str.24 = private unnamed_addr constant [29 x i8] c";;   %7s%6s%6s%6s%6s%6s%14s\0A\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"insn\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"code\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"bb\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"dep\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"prio\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"cost\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c"reservation\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"----\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c"---\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"-----------\00", align 1
@.str.36 = private unnamed_addr constant [10 x i8] c";;   %6d \00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@note_insn_name = external dso_local constant [13 x i8*], align 16
@.str.38 = private unnamed_addr constant [7 x i8] c" {%s}\0A\00", align 1
@rtx_name = external dso_local constant [139 x i8*], align 16
@.str.39 = private unnamed_addr constant [29 x i8] c";;   %s%5d%6d%6d%6d%6d%6d   \00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.41 = private unnamed_addr constant [2 x i8] c" \00", align 1
@sched_emulate_haifa_p = external dso_local global i32, align 4
@h_i_d = external dso_local global %struct.VEC_haifa_insn_data_def_heap*, align 8
@.str.42 = private unnamed_addr constant [8 x i8] c"nothing\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"\09: \00", align 1
@.str.44 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@current_sched_info = external dso_local global %struct.haifa_sched_info*, align 8
@rgn_n_insns = internal global i32 0, align 4, !dbg !2395
@min_spec_prob = internal global i32 0, align 4, !dbg !2245
@nr_inter = internal global i32 0, align 4, !dbg !2241
@nr_spec = internal global i32 0, align 4, !dbg !2243
@flag_schedule_interblock = external dso_local global i32, align 4
@reload_completed = external dso_local global i32, align 4
@.str.45 = private unnamed_addr constant [56 x i8] c"\0A;; Procedure interblock/speculative motions == %d/%d \0A\00", align 1
@bb_deps = internal global %struct.deps* null, align 8, !dbg !2393
@sched_max_luid = external dso_local global i32, align 4
@insn_referenced = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2391
@prob = internal global i32* null, align 8, !dbg !2268
@dom = internal global %struct.simple_bitmap_def** null, align 8, !dbg !2255
@rgn_nr_edges = internal global i32 0, align 4, !dbg !2270
@rgn_edges = internal global %struct.edge_def** null, align 8, !dbg !2272
@pot_split = internal global %struct.simple_bitmap_def** null, align 8, !dbg !2274
@ancestor_edges = internal global %struct.simple_bitmap_def** null, align 8, !dbg !2278
@rgn_common_sched_info = internal global %struct.common_sched_info_def zeroinitializer, align 8, !dbg !2282
@haifa_common_sched_info = external dso_local constant %struct.common_sched_info_def, align 8
@common_sched_info = external dso_local global %struct.common_sched_info_def*, align 8
@rgn_sched_deps_info = internal global %struct.sched_deps_info_def zeroinitializer, align 8, !dbg !2303
@rgn_const_sched_deps_info = internal constant %struct.sched_deps_info_def { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)* @compute_jump_reg_dependencies, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (i32)* null, void (i32)* null, void (i32)* null, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)* null, void (%struct.rtx_def*, i32)* null, i8 0 }, align 8, !dbg !2433
@rgn_const_sel_sched_deps_info = internal constant %struct.sched_deps_info_def { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)* @compute_jump_reg_dependencies, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (i32)* null, void (i32)* null, void (i32)* null, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)* null, void (%struct.rtx_def*, i32)* null, i8 0 }, align 8, !dbg !2436
@sched_deps_info = external dso_local global %struct.sched_deps_info_def*, align 8
@rgn_const_sched_info = internal constant %struct.haifa_sched_info { void ()* @init_ready_list, i32 (%struct.rtx_def*)* @can_schedule_ready_p, i32 ()* @schedule_more_p, i32 (%struct.rtx_def*, i32)* @new_ready, i32 (%struct.rtx_def*, %struct.rtx_def*)* @rgn_rank, i8* (%struct.rtx_def*, i32)* @rgn_print_insn, i32 (%struct.rtx_def*, %struct.rtx_def*)* @contributes_to_priority, i8 (%struct.rtx_def*)* @rgn_insn_finishes_block_p, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* null, i8 0, i32 0, void (%struct.rtx_def*, i32)* @rgn_add_remove_insn, void (%struct.rtx_def*, %struct.rtx_def*)* @begin_schedule_ready, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)* @advance_target_bb, i32 4 }, align 8, !dbg !2438
@not_in_df = internal global %struct.bitmap_head_def zeroinitializer, align 8, !dbg !2280
@.str.46 = private unnamed_addr constant [7 x i8] c"sched1\00", align 1
@pass_sched = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i8 ()* @gate_handle_sched, i32 ()* @rest_of_handle_sched, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 145, i32 0, i32 0, i32 0, i32 0, i32 132107 } }, align 8, !dbg !2211
@.str.47 = private unnamed_addr constant [7 x i8] c"sched2\00", align 1
@pass_sched2 = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), i8 ()* @gate_handle_sched2, i32 ()* @rest_of_handle_sched2, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 159, i32 0, i32 0, i32 0, i32 0, i32 132107 } }, align 8, !dbg !2239
@target_bb = common dso_local global i32 0, align 4, !dbg !2253
@.str.48 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.49 = private unnamed_addr constant [59 x i8] c";; Region extension statistics: size %d: was %d + %d more\0A\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@sd_iterator_start.null_link = internal global %struct._dep_link* null, align 8, !dbg !2397
@x_rtl = external dso_local global %struct.rtl_data, align 8
@profile_info = external dso_local global %struct.gcov_ctr_summary*, align 8
@flag_branch_probabilities = external dso_local global i32, align 4
@flag_sel_sched_pipelining = external dso_local global i32, align 4
@targetm = external dso_local global %struct.gcc_target, align 8
@sched_luids = external dso_local global %struct.VEC_int_heap*, align 8
@h_d_i_d = external dso_local global %struct.VEC_haifa_deps_insn_data_def_heap*, align 8
@regclass_map = external dso_local constant [53 x i32], align 16
@.str.50 = private unnamed_addr constant [27 x i8] c";;  bb_prob(%d, %d) = %3d\0A\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@target_n_insns = internal global i32 0, align 4, !dbg !2441
@sched_target_n_insns = internal global i32 0, align 4, !dbg !2443
@sched_n_insns = internal global i32 0, align 4, !dbg !2445
@bblst_last = internal global i32 0, align 4, !dbg !2447
@bblst_size = internal global i32 0, align 4, !dbg !2449
@bblst_table = internal global %struct.basic_block_def** null, align 8, !dbg !2451
@edgelst_last = internal global i32 0, align 4, !dbg !2453
@edgelst_table = internal global %struct.edge_def** null, align 8, !dbg !2455
@flag_schedule_speculative = external dso_local global i32, align 4
@global_regs = external dso_local global [53 x i8], align 16
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@curr_state = external dso_local global i8*, align 8
@spec_info = external dso_local global %struct.spec_info_def*, align 8
@flag_schedule_speculative_load = external dso_local global i32, align 4
@flag_schedule_speculative_load_dangerous = external dso_local global i32, align 4
@rgn_print_insn.tmp = internal global [80 x i8] zeroinitializer, align 16, !dbg !2457
@.str.51 = private unnamed_addr constant [11 x i8] c"b%3d: i%4d\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"%d/b%d\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@sched_pressure_p = external dso_local global i8, align 1
@haifa_recovery_bb_ever_added_p = external dso_local global i8, align 1
@flag_schedule_insns = external dso_local global i32, align 4
@flag_selective_scheduling = external dso_local global i32, align 4
@optimize = external dso_local global i32, align 4
@flag_schedule_insns_after_reload = external dso_local global i32, align 4
@flag_selective_scheduling2 = external dso_local global i32, align 4
@flag_sched2_use_superblocks = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_regions() #0 !dbg !2467 {
entry:
  %rgn = alloca i32, align 4
  %bb = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn, metadata !2468, metadata !DIExpression()), !dbg !2469
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !2470, metadata !DIExpression()), !dbg !2471
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !2472
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0)), !dbg !2473
  store i32 0, i32* %rgn, align 4, !dbg !2474
  br label %for.cond, !dbg !2476

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %rgn, align 4, !dbg !2477
  %2 = load i32, i32* @nr_regions, align 4, !dbg !2479
  %cmp = icmp slt i32 %1, %2, !dbg !2480
  br i1 %cmp, label %for.body, label %for.end17, !dbg !2481

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !2482
  %4 = load i32, i32* %rgn, align 4, !dbg !2484
  %5 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2485
  %6 = load i32, i32* %rgn, align 4, !dbg !2486
  %idxprom = sext i32 %6 to i64, !dbg !2485
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %5, i64 %idxprom, !dbg !2485
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 0, !dbg !2487
  %7 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !2487
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i32 %4, i32 %7), !dbg !2488
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !2489
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)), !dbg !2490
  %9 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2491
  %10 = load i32, i32* %rgn, align 4, !dbg !2491
  %idxprom3 = sext i32 %10 to i64, !dbg !2491
  %arrayidx4 = getelementptr inbounds %struct.region, %struct.region* %9, i64 %idxprom3, !dbg !2491
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx4, i32 0, i32 1, !dbg !2491
  %11 = load i32, i32* %rgn_blocks, align 4, !dbg !2491
  store i32 %11, i32* @current_blocks, align 4, !dbg !2492
  store i32 0, i32* %bb, align 4, !dbg !2493
  br label %for.cond5, !dbg !2495

for.cond5:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %bb, align 4, !dbg !2496
  %13 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2498
  %14 = load i32, i32* %rgn, align 4, !dbg !2499
  %idxprom6 = sext i32 %14 to i64, !dbg !2498
  %arrayidx7 = getelementptr inbounds %struct.region, %struct.region* %13, i64 %idxprom6, !dbg !2498
  %rgn_nr_blocks8 = getelementptr inbounds %struct.region, %struct.region* %arrayidx7, i32 0, i32 0, !dbg !2500
  %15 = load i32, i32* %rgn_nr_blocks8, align 4, !dbg !2500
  %cmp9 = icmp slt i32 %12, %15, !dbg !2501
  br i1 %cmp9, label %for.body10, label %for.end, !dbg !2502

for.body10:                                       ; preds = %for.cond5
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !2503
  %17 = load i32, i32* %bb, align 4, !dbg !2504
  %18 = load i32*, i32** @rgn_bb_table, align 8, !dbg !2505
  %19 = load i32, i32* @current_blocks, align 4, !dbg !2506
  %20 = load i32, i32* %bb, align 4, !dbg !2507
  %add = add nsw i32 %19, %20, !dbg !2508
  %idxprom11 = sext i32 %add to i64, !dbg !2505
  %arrayidx12 = getelementptr inbounds i32, i32* %18, i64 %idxprom11, !dbg !2505
  %21 = load i32, i32* %arrayidx12, align 4, !dbg !2505
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i32 %17, i32 %21), !dbg !2509
  br label %for.inc, !dbg !2509

for.inc:                                          ; preds = %for.body10
  %22 = load i32, i32* %bb, align 4, !dbg !2510
  %inc = add nsw i32 %22, 1, !dbg !2510
  store i32 %inc, i32* %bb, align 4, !dbg !2510
  br label %for.cond5, !dbg !2511, !llvm.loop !2512

for.end:                                          ; preds = %for.cond5
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !2514
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)), !dbg !2515
  br label %for.inc15, !dbg !2516

for.inc15:                                        ; preds = %for.end
  %24 = load i32, i32* %rgn, align 4, !dbg !2517
  %inc16 = add nsw i32 %24, 1, !dbg !2517
  store i32 %inc16, i32* %rgn, align 4, !dbg !2517
  br label %for.cond, !dbg !2518, !llvm.loop !2519

for.end17:                                        ; preds = %for.cond
  ret void, !dbg !2521
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_region(i32 %rgn) #0 !dbg !2522 {
entry:
  %rgn.addr = alloca i32, align 4
  %bb = alloca i32, align 4
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !2523, metadata !DIExpression()), !dbg !2524
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !2525, metadata !DIExpression()), !dbg !2526
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2527
  %1 = load i32, i32* %rgn.addr, align 4, !dbg !2528
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 %1), !dbg !2529
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2530
  %3 = load i32, i32* %rgn.addr, align 4, !dbg !2531
  %4 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2532
  %5 = load i32, i32* %rgn.addr, align 4, !dbg !2533
  %idxprom = sext i32 %5 to i64, !dbg !2532
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %4, i64 %idxprom, !dbg !2532
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 0, !dbg !2534
  %6 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !2534
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i32 %3, i32 %6), !dbg !2535
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2536
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)), !dbg !2537
  %8 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2538
  %9 = load i32, i32* %rgn.addr, align 4, !dbg !2538
  %idxprom3 = sext i32 %9 to i64, !dbg !2538
  %arrayidx4 = getelementptr inbounds %struct.region, %struct.region* %8, i64 %idxprom3, !dbg !2538
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx4, i32 0, i32 1, !dbg !2538
  %10 = load i32, i32* %rgn_blocks, align 4, !dbg !2538
  store i32 %10, i32* @current_blocks, align 4, !dbg !2539
  store i32 0, i32* %bb, align 4, !dbg !2540
  br label %for.cond, !dbg !2542

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32, i32* %bb, align 4, !dbg !2543
  %12 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2545
  %13 = load i32, i32* %rgn.addr, align 4, !dbg !2546
  %idxprom5 = sext i32 %13 to i64, !dbg !2545
  %arrayidx6 = getelementptr inbounds %struct.region, %struct.region* %12, i64 %idxprom5, !dbg !2545
  %rgn_nr_blocks7 = getelementptr inbounds %struct.region, %struct.region* %arrayidx6, i32 0, i32 0, !dbg !2547
  %14 = load i32, i32* %rgn_nr_blocks7, align 4, !dbg !2547
  %cmp = icmp slt i32 %11, %14, !dbg !2548
  br i1 %cmp, label %for.body, label %for.end, !dbg !2549

for.body:                                         ; preds = %for.cond
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2550
  %16 = load i32, i32* %bb, align 4, !dbg !2551
  %17 = load i32*, i32** @rgn_bb_table, align 8, !dbg !2552
  %18 = load i32, i32* @current_blocks, align 4, !dbg !2553
  %19 = load i32, i32* %bb, align 4, !dbg !2554
  %add = add nsw i32 %18, %19, !dbg !2555
  %idxprom8 = sext i32 %add to i64, !dbg !2552
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i64 %idxprom8, !dbg !2552
  %20 = load i32, i32* %arrayidx9, align 4, !dbg !2552
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i32 %16, i32 %20), !dbg !2556
  br label %for.inc, !dbg !2556

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %bb, align 4, !dbg !2557
  %inc = add nsw i32 %21, 1, !dbg !2557
  store i32 %inc, i32* %bb, align 4, !dbg !2557
  br label %for.cond, !dbg !2558, !llvm.loop !2559

for.end:                                          ; preds = %for.cond
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2561
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)), !dbg !2562
  store i32 0, i32* %bb, align 4, !dbg !2563
  br label %for.cond12, !dbg !2565

for.cond12:                                       ; preds = %for.inc22, %for.end
  %23 = load i32, i32* %bb, align 4, !dbg !2566
  %24 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2568
  %25 = load i32, i32* %rgn.addr, align 4, !dbg !2569
  %idxprom13 = sext i32 %25 to i64, !dbg !2568
  %arrayidx14 = getelementptr inbounds %struct.region, %struct.region* %24, i64 %idxprom13, !dbg !2568
  %rgn_nr_blocks15 = getelementptr inbounds %struct.region, %struct.region* %arrayidx14, i32 0, i32 0, !dbg !2570
  %26 = load i32, i32* %rgn_nr_blocks15, align 4, !dbg !2570
  %cmp16 = icmp slt i32 %23, %26, !dbg !2571
  br i1 %cmp16, label %for.body17, label %for.end24, !dbg !2572

for.body17:                                       ; preds = %for.cond12
  %27 = load i32*, i32** @rgn_bb_table, align 8, !dbg !2573
  %28 = load i32, i32* @current_blocks, align 4, !dbg !2575
  %29 = load i32, i32* %bb, align 4, !dbg !2576
  %add18 = add nsw i32 %28, %29, !dbg !2577
  %idxprom19 = sext i32 %add18 to i64, !dbg !2573
  %arrayidx20 = getelementptr inbounds i32, i32* %27, i64 %idxprom19, !dbg !2573
  %30 = load i32, i32* %arrayidx20, align 4, !dbg !2573
  call void @debug_bb_n_slim(i32 %30), !dbg !2578
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2579
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !2580
  br label %for.inc22, !dbg !2581

for.inc22:                                        ; preds = %for.body17
  %32 = load i32, i32* %bb, align 4, !dbg !2582
  %inc23 = add nsw i32 %32, 1, !dbg !2582
  store i32 %inc23, i32* %bb, align 4, !dbg !2582
  br label %for.cond12, !dbg !2583, !llvm.loop !2584

for.end24:                                        ; preds = %for.cond12
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2586
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !2587
  ret void, !dbg !2588
}

declare dso_local void @debug_bb_n_slim(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_region_dot(%struct._IO_FILE* %f, i32 %rgn) #0 !dbg !2589 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %rgn.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %src_bb_num = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !2643, metadata !DIExpression()), !dbg !2644
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !2645, metadata !DIExpression()), !dbg !2646
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2647, metadata !DIExpression()), !dbg !2648
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2649
  %1 = load i32, i32* %rgn.addr, align 4, !dbg !2650
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 %1), !dbg !2651
  %2 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2652
  %3 = load i32, i32* %rgn.addr, align 4, !dbg !2652
  %idxprom = sext i32 %3 to i64, !dbg !2652
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %2, i64 %idxprom, !dbg !2652
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 1, !dbg !2652
  %4 = load i32, i32* %rgn_blocks, align 4, !dbg !2652
  store i32 %4, i32* @current_blocks, align 4, !dbg !2653
  store i32 0, i32* %i, align 4, !dbg !2654
  br label %for.cond, !dbg !2656

for.cond:                                         ; preds = %for.inc19, %entry
  %5 = load i32, i32* %i, align 4, !dbg !2657
  %6 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2659
  %7 = load i32, i32* %rgn.addr, align 4, !dbg !2660
  %idxprom1 = sext i32 %7 to i64, !dbg !2659
  %arrayidx2 = getelementptr inbounds %struct.region, %struct.region* %6, i64 %idxprom1, !dbg !2659
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx2, i32 0, i32 0, !dbg !2661
  %8 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !2661
  %cmp = icmp slt i32 %5, %8, !dbg !2662
  br i1 %cmp, label %for.body, label %for.end20, !dbg !2663

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2664, metadata !DIExpression()), !dbg !2666
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2667, metadata !DIExpression()), !dbg !2668
  call void @llvm.dbg.declare(metadata i32* %src_bb_num, metadata !2669, metadata !DIExpression()), !dbg !2670
  %9 = load i32*, i32** @rgn_bb_table, align 8, !dbg !2671
  %10 = load i32, i32* @current_blocks, align 4, !dbg !2672
  %11 = load i32, i32* %i, align 4, !dbg !2673
  %add = add nsw i32 %10, %11, !dbg !2674
  %idxprom3 = sext i32 %add to i64, !dbg !2671
  %arrayidx4 = getelementptr inbounds i32, i32* %9, i64 %idxprom3, !dbg !2671
  %12 = load i32, i32* %arrayidx4, align 4, !dbg !2671
  store i32 %12, i32* %src_bb_num, align 4, !dbg !2670
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2675, metadata !DIExpression()), !dbg !2676
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2677
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !2677
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2677
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2677
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 2, !dbg !2677
  %15 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !2677
  %tobool = icmp ne %struct.VEC_basic_block_gc* %15, null, !dbg !2677
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2677

cond.true:                                        ; preds = %for.body
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2677
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !2677
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !2677
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !2677
  %x_basic_block_info7 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 2, !dbg !2677
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info7, align 8, !dbg !2677
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %18, i32 0, i32 0, !dbg !2677
  br label %cond.end, !dbg !2677

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !2677

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2677
  %19 = load i32, i32* %src_bb_num, align 4, !dbg !2677
  %call8 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %19), !dbg !2677
  store %struct.basic_block_def* %call8, %struct.basic_block_def** %bb, align 8, !dbg !2676
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2678
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 1, !dbg !2678
  %call9 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2678
  %21 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2678
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 0, !dbg !2678
  %23 = extractvalue { i32, %struct.VEC_edge_gc** } %call9, 0, !dbg !2678
  store i32 %23, i32* %22, align 8, !dbg !2678
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 1, !dbg !2678
  %25 = extractvalue { i32, %struct.VEC_edge_gc** } %call9, 1, !dbg !2678
  store %struct.VEC_edge_gc** %25, %struct.VEC_edge_gc*** %24, align 8, !dbg !2678
  %26 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2678
  %27 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2678
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !2678
  br label %for.cond10, !dbg !2678

for.cond10:                                       ; preds = %for.inc, %cond.end
  %28 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2680
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 0, !dbg !2680
  %30 = load i32, i32* %29, align 8, !dbg !2680
  %31 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 1, !dbg !2680
  %32 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %31, align 8, !dbg !2680
  %call11 = call zeroext i8 @ei_cond(i32 %30, %struct.VEC_edge_gc** %32, %struct.edge_def** %e), !dbg !2680
  %tobool12 = icmp ne i8 %call11, 0, !dbg !2678
  br i1 %tobool12, label %for.body13, label %for.end, !dbg !2678

for.body13:                                       ; preds = %for.cond10
  %33 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2682
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 1, !dbg !2684
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2684
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 9, !dbg !2685
  %35 = load i32, i32* %index, align 8, !dbg !2685
  %36 = load i32, i32* %rgn.addr, align 4, !dbg !2686
  %call14 = call zeroext i8 @bb_in_region_p(i32 %35, i32 %36), !dbg !2687
  %tobool15 = icmp ne i8 %call14, 0, !dbg !2687
  br i1 %tobool15, label %if.then, label %if.end, !dbg !2688

if.then:                                          ; preds = %for.body13
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2689
  %38 = load i32, i32* %src_bb_num, align 4, !dbg !2690
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2691
  %dest16 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 1, !dbg !2692
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %dest16, align 8, !dbg !2692
  %index17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 9, !dbg !2693
  %41 = load i32, i32* %index17, align 8, !dbg !2693
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 %38, i32 %41), !dbg !2694
  br label %if.end, !dbg !2694

if.end:                                           ; preds = %if.then, %for.body13
  br label %for.inc, !dbg !2695

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2680
  br label %for.cond10, !dbg !2680, !llvm.loop !2696

for.end:                                          ; preds = %for.cond10
  br label %for.inc19, !dbg !2698

for.inc19:                                        ; preds = %for.end
  %42 = load i32, i32* %i, align 4, !dbg !2699
  %inc = add nsw i32 %42, 1, !dbg !2699
  store i32 %inc, i32* %i, align 4, !dbg !2699
  br label %for.cond, !dbg !2700, !llvm.loop !2701

for.end20:                                        ; preds = %for.cond
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2703
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0)), !dbg !2704
  ret void, !dbg !2705
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !2706 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !2711, metadata !DIExpression()), !dbg !2712
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2713, metadata !DIExpression()), !dbg !2712
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2712
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !2712
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2712

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2712
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2712
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !2712
  %3 = load i32, i32* %num, align 8, !dbg !2712
  %cmp = icmp ult i32 %1, %3, !dbg !2712
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2714
  %land.ext = zext i1 %4 to i32, !dbg !2712
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2712
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !2712
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2712
  %idxprom = zext i32 %6 to i64, !dbg !2712
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !2712
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2712
  ret %struct.basic_block_def* %7, !dbg !2712
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !2715 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !2718, metadata !DIExpression()), !dbg !2719
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !2720, metadata !DIExpression()), !dbg !2721
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !2722
  store i32 0, i32* %index, align 8, !dbg !2723
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !2724
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !2725
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !2726
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !2727
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !2727
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !2727
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !2728 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2731, metadata !DIExpression()), !dbg !2732
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !2733, metadata !DIExpression()), !dbg !2734
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2735
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2735
  %5 = load i32, i32* %4, align 8, !dbg !2735
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2735
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2735
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2735
  %tobool = icmp ne i8 %call, 0, !dbg !2735
  br i1 %tobool, label %if.else, label %if.then, !dbg !2737

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2738
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2738
  %10 = load i32, i32* %9, align 8, !dbg !2738
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2738
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !2738
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !2738
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2740
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !2741
  store i8 1, i8* %retval, align 1, !dbg !2742
  br label %return, !dbg !2742

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2743
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !2745
  store i8 0, i8* %retval, align 1, !dbg !2746
  br label %return, !dbg !2746

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !2747
  ret i8 %15, !dbg !2747
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bb_in_region_p(i32 %bb_index, i32 %rgn) #0 !dbg !2748 {
entry:
  %retval = alloca i8, align 1
  %bb_index.addr = alloca i32, align 4
  %rgn.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %bb_index, i32* %bb_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_index.addr, metadata !2751, metadata !DIExpression()), !dbg !2752
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !2753, metadata !DIExpression()), !dbg !2754
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2755, metadata !DIExpression()), !dbg !2756
  store i32 0, i32* %i, align 4, !dbg !2757
  br label %for.cond, !dbg !2759

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2760
  %1 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !2762
  %2 = load i32, i32* %rgn.addr, align 4, !dbg !2763
  %idxprom = sext i32 %2 to i64, !dbg !2762
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %1, i64 %idxprom, !dbg !2762
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 0, !dbg !2764
  %3 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !2764
  %cmp = icmp slt i32 %0, %3, !dbg !2765
  br i1 %cmp, label %for.body, label %for.end, !dbg !2766

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** @rgn_bb_table, align 8, !dbg !2767
  %5 = load i32, i32* @current_blocks, align 4, !dbg !2769
  %6 = load i32, i32* %i, align 4, !dbg !2770
  %add = add nsw i32 %5, %6, !dbg !2771
  %idxprom1 = sext i32 %add to i64, !dbg !2767
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i64 %idxprom1, !dbg !2767
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !2767
  %8 = load i32, i32* %bb_index.addr, align 4, !dbg !2772
  %cmp3 = icmp eq i32 %7, %8, !dbg !2773
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2774

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !2775
  br label %return, !dbg !2775

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !2772

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !2776
  %inc = add nsw i32 %9, 1, !dbg !2776
  store i32 %inc, i32* %i, align 4, !dbg !2776
  br label %for.cond, !dbg !2777, !llvm.loop !2778

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !2780
  br label %return, !dbg !2780

return:                                           ; preds = %for.end, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !2781
  ret i8 %10, !dbg !2781
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !2782 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !2785, metadata !DIExpression()), !dbg !2786
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2787
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !2787
  %1 = load i32, i32* %index, align 8, !dbg !2787
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2787
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !2787
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2787
  %5 = load i32, i32* %4, align 8, !dbg !2787
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2787
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2787
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2787
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !2787
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2787

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2787
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !2787
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !2787
  %11 = load i32, i32* %10, align 8, !dbg !2787
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !2787
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !2787
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !2787
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !2787
  br label %cond.end, !dbg !2787

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2787

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2787
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2787
  %cmp = icmp ult i32 %1, %call2, !dbg !2787
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !2787

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.48, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !2787
  br label %cond.end5, !dbg !2787

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2787

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !2787
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2788
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !2789
  %15 = load i32, i32* %index7, align 8, !dbg !2790
  %inc = add i32 %15, 1, !dbg !2790
  store i32 %inc, i32* %index7, align 8, !dbg !2790
  ret void, !dbg !2791
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_region_dot_file(i8* %fname, i32 %rgn) #0 !dbg !2792 {
entry:
  %fname.addr = alloca i8*, align 8
  %rgn.addr = alloca i32, align 4
  %f = alloca %struct._IO_FILE*, align 8
  store i8* %fname, i8** %fname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fname.addr, metadata !2795, metadata !DIExpression()), !dbg !2796
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !2797, metadata !DIExpression()), !dbg !2798
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f, metadata !2799, metadata !DIExpression()), !dbg !2800
  %0 = load i8*, i8** %fname.addr, align 8, !dbg !2801
  %call = call %struct._IO_FILE* @fopen_unlocked(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0)), !dbg !2801
  store %struct._IO_FILE* %call, %struct._IO_FILE** %f, align 8, !dbg !2800
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8, !dbg !2802
  %2 = load i32, i32* %rgn.addr, align 4, !dbg !2803
  call void @dump_region_dot(%struct._IO_FILE* %1, i32 %2), !dbg !2804
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8, !dbg !2805
  %call1 = call i32 @fclose(%struct._IO_FILE* %3), !dbg !2806
  ret void, !dbg !2807
}

declare dso_local %struct._IO_FILE* @fopen_unlocked(i8*, i8*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @extend_rgns(i32* %degree, i32* %idxp, %struct.simple_bitmap_def* %header, i32* %loop_hdr) #0 !dbg !2808 {
entry:
  %degree.addr = alloca i32*, align 8
  %idxp.addr = alloca i32*, align 8
  %header.addr = alloca %struct.simple_bitmap_def*, align 8
  %loop_hdr.addr = alloca i32*, align 8
  %order = alloca i32*, align 8
  %i = alloca i32, align 4
  %rescan = alloca i32, align 4
  %idx = alloca i32, align 4
  %iter = alloca i32, align 4
  %max_iter = alloca i32, align 4
  %max_hdr = alloca i32*, align 8
  %nblocks = alloca i32, align 4
  %bbn = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %bbn28 = alloca i32, align 4
  %hdr = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %predn = alloca i32, align 4
  %s1 = alloca i32*, align 8
  %s1_sz = alloca i32, align 4
  %bbn124 = alloca i32, align 4
  %e132 = alloca %struct.edge_def*, align 8
  %ei133 = alloca %struct.edge_iterator, align 8
  %num_bbs = alloca i32, align 4
  %j = alloca i32, align 4
  %num_insns = alloca i32, align 4
  %large = alloca i32, align 4
  %tmp153 = alloca %struct.edge_iterator, align 8
  %succn = alloca i32, align 4
  %succn220 = alloca i32, align 4
  %tmp271 = alloca %struct.edge_iterator, align 8
  %s2 = alloca i32*, align 8
  %s2_sz = alloca i32, align 4
  store i32* %degree, i32** %degree.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %degree.addr, metadata !2811, metadata !DIExpression()), !dbg !2812
  store i32* %idxp, i32** %idxp.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %idxp.addr, metadata !2813, metadata !DIExpression()), !dbg !2814
  store %struct.simple_bitmap_def* %header, %struct.simple_bitmap_def** %header.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %header.addr, metadata !2815, metadata !DIExpression()), !dbg !2816
  store i32* %loop_hdr, i32** %loop_hdr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %loop_hdr.addr, metadata !2817, metadata !DIExpression()), !dbg !2818
  call void @llvm.dbg.declare(metadata i32** %order, metadata !2819, metadata !DIExpression()), !dbg !2820
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2821, metadata !DIExpression()), !dbg !2822
  call void @llvm.dbg.declare(metadata i32* %rescan, metadata !2823, metadata !DIExpression()), !dbg !2824
  store i32 0, i32* %rescan, align 4, !dbg !2824
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !2825, metadata !DIExpression()), !dbg !2826
  %0 = load i32*, i32** %idxp.addr, align 8, !dbg !2827
  %1 = load i32, i32* %0, align 4, !dbg !2828
  store i32 %1, i32* %idx, align 4, !dbg !2826
  call void @llvm.dbg.declare(metadata i32* %iter, metadata !2829, metadata !DIExpression()), !dbg !2830
  store i32 0, i32* %iter, align 4, !dbg !2830
  call void @llvm.dbg.declare(metadata i32* %max_iter, metadata !2831, metadata !DIExpression()), !dbg !2832
  call void @llvm.dbg.declare(metadata i32** %max_hdr, metadata !2833, metadata !DIExpression()), !dbg !2834
  call void @llvm.dbg.declare(metadata i32* %nblocks, metadata !2835, metadata !DIExpression()), !dbg !2836
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2837
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !2837
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2837
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2837
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 3, !dbg !2837
  %4 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2837
  %sub = sub nsw i32 %4, 2, !dbg !2838
  store i32 %sub, i32* %nblocks, align 4, !dbg !2836
  %5 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !2839
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %5, i64 82, !dbg !2839
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !2839
  %6 = load i32, i32* %value, align 8, !dbg !2839
  store i32 %6, i32* %max_iter, align 4, !dbg !2840
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2841
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !2841
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2841
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2841
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 5, !dbg !2841
  %9 = load i32, i32* %x_last_basic_block, align 8, !dbg !2841
  %conv = sext i32 %9 to i64, !dbg !2841
  %mul = mul i64 4, %conv, !dbg !2841
  %call = call i8* @xmalloc(i64 %mul), !dbg !2841
  %10 = bitcast i8* %call to i32*, !dbg !2841
  store i32* %10, i32** %max_hdr, align 8, !dbg !2842
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2843
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !2843
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !2843
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !2843
  %x_last_basic_block5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 5, !dbg !2843
  %13 = load i32, i32* %x_last_basic_block5, align 8, !dbg !2843
  %conv6 = sext i32 %13 to i64, !dbg !2843
  %mul7 = mul i64 4, %conv6, !dbg !2843
  %call8 = call i8* @xmalloc(i64 %mul7), !dbg !2843
  %14 = bitcast i8* %call8 to i32*, !dbg !2843
  store i32* %14, i32** %order, align 8, !dbg !2844
  %15 = load i32*, i32** %order, align 8, !dbg !2845
  %call9 = call i32 @post_order_compute(i32* %15, i8 zeroext 0, i8 zeroext 0), !dbg !2846
  %16 = load i32, i32* %nblocks, align 4, !dbg !2847
  %sub10 = sub nsw i32 %16, 1, !dbg !2849
  store i32 %sub10, i32* %i, align 4, !dbg !2850
  br label %for.cond, !dbg !2851

for.cond:                                         ; preds = %for.inc, %entry
  %17 = load i32, i32* %i, align 4, !dbg !2852
  %cmp = icmp sge i32 %17, 0, !dbg !2854
  br i1 %cmp, label %for.body, label %for.end, !dbg !2855

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %bbn, metadata !2856, metadata !DIExpression()), !dbg !2858
  %18 = load i32*, i32** %order, align 8, !dbg !2859
  %19 = load i32, i32* %i, align 4, !dbg !2860
  %idxprom = sext i32 %19 to i64, !dbg !2859
  %arrayidx12 = getelementptr inbounds i32, i32* %18, i64 %idxprom, !dbg !2859
  %20 = load i32, i32* %arrayidx12, align 4, !dbg !2859
  store i32 %20, i32* %bbn, align 4, !dbg !2858
  %21 = load i32*, i32** %degree.addr, align 8, !dbg !2861
  %22 = load i32, i32* %bbn, align 4, !dbg !2863
  %idxprom13 = sext i32 %22 to i64, !dbg !2861
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i64 %idxprom13, !dbg !2861
  %23 = load i32, i32* %arrayidx14, align 4, !dbg !2861
  %cmp15 = icmp sge i32 %23, 0, !dbg !2864
  br i1 %cmp15, label %if.then, label %if.else, !dbg !2865

if.then:                                          ; preds = %for.body
  %24 = load i32, i32* %bbn, align 4, !dbg !2866
  %25 = load i32*, i32** %max_hdr, align 8, !dbg !2868
  %26 = load i32, i32* %bbn, align 4, !dbg !2869
  %idxprom17 = sext i32 %26 to i64, !dbg !2868
  %arrayidx18 = getelementptr inbounds i32, i32* %25, i64 %idxprom17, !dbg !2868
  store i32 %24, i32* %arrayidx18, align 4, !dbg !2870
  store i32 1, i32* %rescan, align 4, !dbg !2871
  br label %if.end, !dbg !2872

if.else:                                          ; preds = %for.body
  %27 = load i32*, i32** %max_hdr, align 8, !dbg !2873
  %28 = load i32, i32* %bbn, align 4, !dbg !2874
  %idxprom19 = sext i32 %28 to i64, !dbg !2873
  %arrayidx20 = getelementptr inbounds i32, i32* %27, i64 %idxprom19, !dbg !2873
  store i32 -1, i32* %arrayidx20, align 4, !dbg !2875
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !2876

for.inc:                                          ; preds = %if.end
  %29 = load i32, i32* %i, align 4, !dbg !2877
  %dec = add nsw i32 %29, -1, !dbg !2877
  store i32 %dec, i32* %i, align 4, !dbg !2877
  br label %for.cond, !dbg !2878, !llvm.loop !2879

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !2881

while.cond:                                       ; preds = %for.end99, %for.end
  %30 = load i32, i32* %rescan, align 4, !dbg !2882
  %tobool = icmp ne i32 %30, 0, !dbg !2882
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2883

land.rhs:                                         ; preds = %while.cond
  %31 = load i32, i32* %iter, align 4, !dbg !2884
  %32 = load i32, i32* %max_iter, align 4, !dbg !2885
  %cmp21 = icmp slt i32 %31, %32, !dbg !2886
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %33 = phi i1 [ false, %while.cond ], [ %cmp21, %land.rhs ], !dbg !2887
  br i1 %33, label %while.body, label %while.end, !dbg !2881

while.body:                                       ; preds = %land.end
  store i32 0, i32* %rescan, align 4, !dbg !2888
  %34 = load i32, i32* %nblocks, align 4, !dbg !2890
  %sub23 = sub nsw i32 %34, 1, !dbg !2892
  store i32 %sub23, i32* %i, align 4, !dbg !2893
  br label %for.cond24, !dbg !2894

for.cond24:                                       ; preds = %for.inc97, %while.body
  %35 = load i32, i32* %i, align 4, !dbg !2895
  %cmp25 = icmp sge i32 %35, 0, !dbg !2897
  br i1 %cmp25, label %for.body27, label %for.end99, !dbg !2898

for.body27:                                       ; preds = %for.cond24
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2899, metadata !DIExpression()), !dbg !2901
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2902, metadata !DIExpression()), !dbg !2903
  call void @llvm.dbg.declare(metadata i32* %bbn28, metadata !2904, metadata !DIExpression()), !dbg !2905
  %36 = load i32*, i32** %order, align 8, !dbg !2906
  %37 = load i32, i32* %i, align 4, !dbg !2907
  %idxprom29 = sext i32 %37 to i64, !dbg !2906
  %arrayidx30 = getelementptr inbounds i32, i32* %36, i64 %idxprom29, !dbg !2906
  %38 = load i32, i32* %arrayidx30, align 4, !dbg !2906
  store i32 %38, i32* %bbn28, align 4, !dbg !2905
  %39 = load i32*, i32** %max_hdr, align 8, !dbg !2908
  %40 = load i32, i32* %bbn28, align 4, !dbg !2910
  %idxprom31 = sext i32 %40 to i64, !dbg !2908
  %arrayidx32 = getelementptr inbounds i32, i32* %39, i64 %idxprom31, !dbg !2908
  %41 = load i32, i32* %arrayidx32, align 4, !dbg !2908
  %cmp33 = icmp ne i32 %41, -1, !dbg !2911
  br i1 %cmp33, label %land.lhs.true, label %if.end96, !dbg !2912

land.lhs.true:                                    ; preds = %for.body27
  %42 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header.addr, align 8, !dbg !2913
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %42, i32 0, i32 3, !dbg !2913
  %43 = load i32, i32* %bbn28, align 4, !dbg !2913
  %div = udiv i32 %43, 64, !dbg !2913
  %idxprom35 = zext i32 %div to i64, !dbg !2913
  %arrayidx36 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom35, !dbg !2913
  %44 = load i64, i64* %arrayidx36, align 8, !dbg !2913
  %45 = load i32, i32* %bbn28, align 4, !dbg !2913
  %rem = urem i32 %45, 64, !dbg !2913
  %sh_prom = zext i32 %rem to i64, !dbg !2913
  %shr = lshr i64 %44, %sh_prom, !dbg !2913
  %and = and i64 %shr, 1, !dbg !2913
  %tobool37 = icmp ne i64 %and, 0, !dbg !2913
  br i1 %tobool37, label %if.end96, label %if.then38, !dbg !2914

if.then38:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %hdr, metadata !2915, metadata !DIExpression()), !dbg !2917
  store i32 -1, i32* %hdr, align 4, !dbg !2917
  %46 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2918
  %add.ptr39 = getelementptr inbounds %struct.function, %struct.function* %46, i64 0, !dbg !2918
  %cfg40 = getelementptr inbounds %struct.function, %struct.function* %add.ptr39, i32 0, i32 1, !dbg !2918
  %47 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg40, align 8, !dbg !2918
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %47, i32 0, i32 2, !dbg !2918
  %48 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !2918
  %tobool41 = icmp ne %struct.VEC_basic_block_gc* %48, null, !dbg !2918
  br i1 %tobool41, label %cond.true, label %cond.false, !dbg !2918

cond.true:                                        ; preds = %if.then38
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2918
  %add.ptr42 = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, !dbg !2918
  %cfg43 = getelementptr inbounds %struct.function, %struct.function* %add.ptr42, i32 0, i32 1, !dbg !2918
  %50 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg43, align 8, !dbg !2918
  %x_basic_block_info44 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %50, i32 0, i32 2, !dbg !2918
  %51 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info44, align 8, !dbg !2918
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %51, i32 0, i32 0, !dbg !2918
  br label %cond.end, !dbg !2918

cond.false:                                       ; preds = %if.then38
  br label %cond.end, !dbg !2918

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2918
  %52 = load i32, i32* %bbn28, align 4, !dbg !2918
  %call45 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %52), !dbg !2918
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call45, i32 0, i32 0, !dbg !2918
  %call46 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !2918
  %53 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2918
  %54 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %53, i32 0, i32 0, !dbg !2918
  %55 = extractvalue { i32, %struct.VEC_edge_gc** } %call46, 0, !dbg !2918
  store i32 %55, i32* %54, align 8, !dbg !2918
  %56 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %53, i32 0, i32 1, !dbg !2918
  %57 = extractvalue { i32, %struct.VEC_edge_gc** } %call46, 1, !dbg !2918
  store %struct.VEC_edge_gc** %57, %struct.VEC_edge_gc*** %56, align 8, !dbg !2918
  %58 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2918
  %59 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2918
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 16, i1 false), !dbg !2918
  br label %for.cond47, !dbg !2918

for.cond47:                                       ; preds = %for.inc81, %cond.end
  %60 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2920
  %61 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 0, !dbg !2920
  %62 = load i32, i32* %61, align 8, !dbg !2920
  %63 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 1, !dbg !2920
  %64 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %63, align 8, !dbg !2920
  %call48 = call zeroext i8 @ei_cond(i32 %62, %struct.VEC_edge_gc** %64, %struct.edge_def** %e), !dbg !2920
  %tobool49 = icmp ne i8 %call48, 0, !dbg !2918
  br i1 %tobool49, label %for.body50, label %for.end82, !dbg !2918

for.body50:                                       ; preds = %for.cond47
  call void @llvm.dbg.declare(metadata i32* %predn, metadata !2922, metadata !DIExpression()), !dbg !2924
  %65 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2925
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %65, i32 0, i32 0, !dbg !2926
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2926
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 9, !dbg !2927
  %67 = load i32, i32* %index, align 8, !dbg !2927
  store i32 %67, i32* %predn, align 4, !dbg !2924
  %68 = load i32, i32* %predn, align 4, !dbg !2928
  %cmp51 = icmp ne i32 %68, 0, !dbg !2930
  br i1 %cmp51, label %land.lhs.true53, label %if.else79, !dbg !2931

land.lhs.true53:                                  ; preds = %for.body50
  %69 = load i32*, i32** %max_hdr, align 8, !dbg !2932
  %70 = load i32, i32* %predn, align 4, !dbg !2933
  %idxprom54 = sext i32 %70 to i64, !dbg !2932
  %arrayidx55 = getelementptr inbounds i32, i32* %69, i64 %idxprom54, !dbg !2932
  %71 = load i32, i32* %arrayidx55, align 4, !dbg !2932
  %cmp56 = icmp ne i32 %71, -1, !dbg !2934
  br i1 %cmp56, label %land.lhs.true58, label %if.else79, !dbg !2935

land.lhs.true58:                                  ; preds = %land.lhs.true53
  %72 = load i32*, i32** %loop_hdr.addr, align 8, !dbg !2936
  %73 = load i32, i32* %bbn28, align 4, !dbg !2937
  %idxprom59 = sext i32 %73 to i64, !dbg !2936
  %arrayidx60 = getelementptr inbounds i32, i32* %72, i64 %idxprom59, !dbg !2936
  %74 = load i32, i32* %arrayidx60, align 4, !dbg !2936
  %75 = load i32*, i32** %loop_hdr.addr, align 8, !dbg !2938
  %76 = load i32, i32* %predn, align 4, !dbg !2939
  %idxprom61 = sext i32 %76 to i64, !dbg !2938
  %arrayidx62 = getelementptr inbounds i32, i32* %75, i64 %idxprom61, !dbg !2938
  %77 = load i32, i32* %arrayidx62, align 4, !dbg !2938
  %cmp63 = icmp eq i32 %74, %77, !dbg !2940
  br i1 %cmp63, label %if.then65, label %if.else79, !dbg !2941

if.then65:                                        ; preds = %land.lhs.true58
  %78 = load i32, i32* %hdr, align 4, !dbg !2942
  %cmp66 = icmp eq i32 %78, -1, !dbg !2945
  br i1 %cmp66, label %if.then68, label %if.else71, !dbg !2946

if.then68:                                        ; preds = %if.then65
  %79 = load i32*, i32** %max_hdr, align 8, !dbg !2947
  %80 = load i32, i32* %predn, align 4, !dbg !2948
  %idxprom69 = sext i32 %80 to i64, !dbg !2947
  %arrayidx70 = getelementptr inbounds i32, i32* %79, i64 %idxprom69, !dbg !2947
  %81 = load i32, i32* %arrayidx70, align 4, !dbg !2947
  store i32 %81, i32* %hdr, align 4, !dbg !2949
  br label %if.end78, !dbg !2950

if.else71:                                        ; preds = %if.then65
  %82 = load i32, i32* %hdr, align 4, !dbg !2951
  %83 = load i32*, i32** %max_hdr, align 8, !dbg !2953
  %84 = load i32, i32* %predn, align 4, !dbg !2954
  %idxprom72 = sext i32 %84 to i64, !dbg !2953
  %arrayidx73 = getelementptr inbounds i32, i32* %83, i64 %idxprom72, !dbg !2953
  %85 = load i32, i32* %arrayidx73, align 4, !dbg !2953
  %cmp74 = icmp ne i32 %82, %85, !dbg !2955
  br i1 %cmp74, label %if.then76, label %if.end77, !dbg !2956

if.then76:                                        ; preds = %if.else71
  %86 = load i32, i32* %bbn28, align 4, !dbg !2957
  store i32 %86, i32* %hdr, align 4, !dbg !2959
  br label %for.end82, !dbg !2960

if.end77:                                         ; preds = %if.else71
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.then68
  br label %if.end80, !dbg !2961

if.else79:                                        ; preds = %land.lhs.true58, %land.lhs.true53, %for.body50
  %87 = load i32, i32* %bbn28, align 4, !dbg !2962
  store i32 %87, i32* %hdr, align 4, !dbg !2964
  br label %for.end82, !dbg !2965

if.end80:                                         ; preds = %if.end78
  br label %for.inc81, !dbg !2966

for.inc81:                                        ; preds = %if.end80
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2920
  br label %for.cond47, !dbg !2920, !llvm.loop !2967

for.end82:                                        ; preds = %if.else79, %if.then76, %for.cond47
  %88 = load i32, i32* %hdr, align 4, !dbg !2969
  %89 = load i32, i32* %bbn28, align 4, !dbg !2971
  %cmp83 = icmp eq i32 %88, %89, !dbg !2972
  br i1 %cmp83, label %if.then85, label %if.else86, !dbg !2973

if.then85:                                        ; preds = %for.end82
  %90 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header.addr, align 8, !dbg !2974
  %91 = load i32, i32* %bbn28, align 4, !dbg !2976
  call void @SET_BIT(%struct.simple_bitmap_def* %90, i32 %91), !dbg !2977
  store i32 1, i32* %rescan, align 4, !dbg !2978
  br label %if.end93, !dbg !2979

if.else86:                                        ; preds = %for.end82
  %92 = load i32, i32* %hdr, align 4, !dbg !2980
  %cmp87 = icmp ne i32 %92, -1, !dbg !2980
  br i1 %cmp87, label %cond.false90, label %cond.true89, !dbg !2980

cond.true89:                                      ; preds = %if.else86
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 1243, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !2980
  br label %cond.end91, !dbg !2980

cond.false90:                                     ; preds = %if.else86
  br label %cond.end91, !dbg !2980

cond.end91:                                       ; preds = %cond.false90, %cond.true89
  %cond92 = phi i32 [ 0, %cond.true89 ], [ 0, %cond.false90 ], !dbg !2980
  br label %if.end93

if.end93:                                         ; preds = %cond.end91, %if.then85
  %93 = load i32, i32* %hdr, align 4, !dbg !2981
  %94 = load i32*, i32** %max_hdr, align 8, !dbg !2982
  %95 = load i32, i32* %bbn28, align 4, !dbg !2983
  %idxprom94 = sext i32 %95 to i64, !dbg !2982
  %arrayidx95 = getelementptr inbounds i32, i32* %94, i64 %idxprom94, !dbg !2982
  store i32 %93, i32* %arrayidx95, align 4, !dbg !2984
  br label %if.end96, !dbg !2985

if.end96:                                         ; preds = %if.end93, %land.lhs.true, %for.body27
  br label %for.inc97, !dbg !2986

for.inc97:                                        ; preds = %if.end96
  %96 = load i32, i32* %i, align 4, !dbg !2987
  %dec98 = add nsw i32 %96, -1, !dbg !2987
  store i32 %dec98, i32* %i, align 4, !dbg !2987
  br label %for.cond24, !dbg !2988, !llvm.loop !2989

for.end99:                                        ; preds = %for.cond24
  %97 = load i32, i32* %iter, align 4, !dbg !2991
  %inc = add nsw i32 %97, 1, !dbg !2991
  store i32 %inc, i32* %iter, align 4, !dbg !2991
  br label %while.cond, !dbg !2881, !llvm.loop !2992

while.end:                                        ; preds = %land.end
  %98 = load i32, i32* @sched_verbose, align 4, !dbg !2994
  %tobool100 = icmp ne i32 %98, 0, !dbg !2994
  br i1 %tobool100, label %land.lhs.true101, label %if.end108, !dbg !2996

land.lhs.true101:                                 ; preds = %while.end
  %99 = load i32, i32* %iter, align 4, !dbg !2997
  %cmp102 = icmp ne i32 %99, 0, !dbg !2998
  br i1 %cmp102, label %if.then104, label %if.end108, !dbg !2999

if.then104:                                       ; preds = %land.lhs.true101
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3000
  %101 = load i32, i32* %iter, align 4, !dbg !3001
  %102 = load i32, i32* %rescan, align 4, !dbg !3002
  %tobool105 = icmp ne i32 %102, 0, !dbg !3002
  %103 = zext i1 %tobool105 to i64, !dbg !3002
  %cond106 = select i1 %tobool105, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.15, i64 0, i64 0), !dbg !3002
  %call107 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %100, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i64 0, i64 0), i32 %101, i8* %cond106), !dbg !3003
  br label %if.end108, !dbg !3003

if.end108:                                        ; preds = %if.then104, %land.lhs.true101, %while.end
  %104 = load i32, i32* %rescan, align 4, !dbg !3004
  %tobool109 = icmp ne i32 %104, 0, !dbg !3004
  br i1 %tobool109, label %if.end326, label %land.lhs.true110, !dbg !3006

land.lhs.true110:                                 ; preds = %if.end108
  %105 = load i32, i32* %iter, align 4, !dbg !3007
  %cmp111 = icmp ne i32 %105, 0, !dbg !3008
  br i1 %cmp111, label %if.then113, label %if.end326, !dbg !3009

if.then113:                                       ; preds = %land.lhs.true110
  call void @llvm.dbg.declare(metadata i32** %s1, metadata !3010, metadata !DIExpression()), !dbg !3012
  store i32* null, i32** %s1, align 8, !dbg !3012
  call void @llvm.dbg.declare(metadata i32* %s1_sz, metadata !3013, metadata !DIExpression()), !dbg !3014
  store i32 0, i32* %s1_sz, align 4, !dbg !3014
  %106 = load i32, i32* @sched_verbose, align 4, !dbg !3015
  %cmp114 = icmp sge i32 %106, 6, !dbg !3017
  br i1 %cmp114, label %if.then116, label %if.end118, !dbg !3018

if.then116:                                       ; preds = %if.then113
  %call117 = call i32 @gather_region_statistics(i32** %s1), !dbg !3019
  store i32 %call117, i32* %s1_sz, align 4, !dbg !3020
  br label %if.end118, !dbg !3021

if.end118:                                        ; preds = %if.then116, %if.then113
  %107 = load i32, i32* %nblocks, align 4, !dbg !3022
  %sub119 = sub nsw i32 %107, 1, !dbg !3024
  store i32 %sub119, i32* %i, align 4, !dbg !3025
  br label %for.cond120, !dbg !3026

for.cond120:                                      ; preds = %for.inc318, %if.end118
  %108 = load i32, i32* %i, align 4, !dbg !3027
  %cmp121 = icmp sge i32 %108, 0, !dbg !3029
  br i1 %cmp121, label %for.body123, label %for.end320, !dbg !3030

for.body123:                                      ; preds = %for.cond120
  call void @llvm.dbg.declare(metadata i32* %bbn124, metadata !3031, metadata !DIExpression()), !dbg !3033
  %109 = load i32*, i32** %order, align 8, !dbg !3034
  %110 = load i32, i32* %i, align 4, !dbg !3035
  %idxprom125 = sext i32 %110 to i64, !dbg !3034
  %arrayidx126 = getelementptr inbounds i32, i32* %109, i64 %idxprom125, !dbg !3034
  %111 = load i32, i32* %arrayidx126, align 4, !dbg !3034
  store i32 %111, i32* %bbn124, align 4, !dbg !3033
  %112 = load i32*, i32** %max_hdr, align 8, !dbg !3036
  %113 = load i32, i32* %bbn124, align 4, !dbg !3038
  %idxprom127 = sext i32 %113 to i64, !dbg !3036
  %arrayidx128 = getelementptr inbounds i32, i32* %112, i64 %idxprom127, !dbg !3036
  %114 = load i32, i32* %arrayidx128, align 4, !dbg !3036
  %115 = load i32, i32* %bbn124, align 4, !dbg !3039
  %cmp129 = icmp eq i32 %114, %115, !dbg !3040
  br i1 %cmp129, label %if.then131, label %if.end317, !dbg !3041

if.then131:                                       ; preds = %for.body123
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e132, metadata !3042, metadata !DIExpression()), !dbg !3044
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei133, metadata !3045, metadata !DIExpression()), !dbg !3046
  call void @llvm.dbg.declare(metadata i32* %num_bbs, metadata !3047, metadata !DIExpression()), !dbg !3048
  store i32 0, i32* %num_bbs, align 4, !dbg !3048
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3049, metadata !DIExpression()), !dbg !3050
  call void @llvm.dbg.declare(metadata i32* %num_insns, metadata !3051, metadata !DIExpression()), !dbg !3052
  store i32 0, i32* %num_insns, align 4, !dbg !3052
  call void @llvm.dbg.declare(metadata i32* %large, metadata !3053, metadata !DIExpression()), !dbg !3054
  %116 = load i32, i32* %bbn124, align 4, !dbg !3055
  %call134 = call zeroext i8 @too_large(i32 %116, i32* %num_bbs, i32* %num_insns), !dbg !3056
  %conv135 = zext i8 %call134 to i32, !dbg !3056
  store i32 %conv135, i32* %large, align 4, !dbg !3057
  %117 = load i32*, i32** %degree.addr, align 8, !dbg !3058
  %118 = load i32, i32* %bbn124, align 4, !dbg !3059
  %idxprom136 = sext i32 %118 to i64, !dbg !3058
  %arrayidx137 = getelementptr inbounds i32, i32* %117, i64 %idxprom136, !dbg !3058
  store i32 -1, i32* %arrayidx137, align 4, !dbg !3060
  %119 = load i32, i32* %bbn124, align 4, !dbg !3061
  %120 = load i32*, i32** @rgn_bb_table, align 8, !dbg !3062
  %121 = load i32, i32* %idx, align 4, !dbg !3063
  %idxprom138 = sext i32 %121 to i64, !dbg !3062
  %arrayidx139 = getelementptr inbounds i32, i32* %120, i64 %idxprom138, !dbg !3062
  store i32 %119, i32* %arrayidx139, align 4, !dbg !3064
  %122 = load i32, i32* %idx, align 4, !dbg !3065
  %inc140 = add nsw i32 %122, 1, !dbg !3065
  store i32 %inc140, i32* %idx, align 4, !dbg !3065
  %123 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3066
  %124 = load i32, i32* @nr_regions, align 4, !dbg !3066
  %idxprom141 = sext i32 %124 to i64, !dbg !3066
  %arrayidx142 = getelementptr inbounds %struct.region, %struct.region* %123, i64 %idxprom141, !dbg !3066
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx142, i32 0, i32 1, !dbg !3066
  store i32 %122, i32* %rgn_blocks, align 4, !dbg !3067
  %125 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3068
  %126 = load i32, i32* @nr_regions, align 4, !dbg !3068
  %idxprom143 = sext i32 %126 to i64, !dbg !3068
  %arrayidx144 = getelementptr inbounds %struct.region, %struct.region* %125, i64 %idxprom143, !dbg !3068
  %dont_calc_deps = getelementptr inbounds %struct.region, %struct.region* %arrayidx144, i32 0, i32 2, !dbg !3068
  %bf.load = load i8, i8* %dont_calc_deps, align 4, !dbg !3069
  %bf.clear = and i8 %bf.load, -2, !dbg !3069
  store i8 %bf.clear, i8* %dont_calc_deps, align 4, !dbg !3069
  %127 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3070
  %128 = load i32, i32* @nr_regions, align 4, !dbg !3070
  %idxprom145 = sext i32 %128 to i64, !dbg !3070
  %arrayidx146 = getelementptr inbounds %struct.region, %struct.region* %127, i64 %idxprom145, !dbg !3070
  %has_real_ebb = getelementptr inbounds %struct.region, %struct.region* %arrayidx146, i32 0, i32 2, !dbg !3070
  %bf.load147 = load i8, i8* %has_real_ebb, align 4, !dbg !3071
  %bf.clear148 = and i8 %bf.load147, -3, !dbg !3071
  store i8 %bf.clear148, i8* %has_real_ebb, align 4, !dbg !3071
  %129 = load i32, i32* @nr_regions, align 4, !dbg !3072
  %130 = load i32*, i32** @containing_rgn, align 8, !dbg !3073
  %131 = load i32, i32* %bbn124, align 4, !dbg !3073
  %idxprom149 = sext i32 %131 to i64, !dbg !3073
  %arrayidx150 = getelementptr inbounds i32, i32* %130, i64 %idxprom149, !dbg !3073
  store i32 %129, i32* %arrayidx150, align 4, !dbg !3074
  %132 = load i32*, i32** @block_to_bb, align 8, !dbg !3075
  %133 = load i32, i32* %bbn124, align 4, !dbg !3075
  %idxprom151 = sext i32 %133 to i64, !dbg !3075
  %arrayidx152 = getelementptr inbounds i32, i32* %132, i64 %idxprom151, !dbg !3075
  store i32 0, i32* %arrayidx152, align 4, !dbg !3076
  %134 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3077
  %add.ptr154 = getelementptr inbounds %struct.function, %struct.function* %134, i64 0, !dbg !3077
  %cfg155 = getelementptr inbounds %struct.function, %struct.function* %add.ptr154, i32 0, i32 1, !dbg !3077
  %135 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg155, align 8, !dbg !3077
  %x_basic_block_info156 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %135, i32 0, i32 2, !dbg !3077
  %136 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info156, align 8, !dbg !3077
  %tobool157 = icmp ne %struct.VEC_basic_block_gc* %136, null, !dbg !3077
  br i1 %tobool157, label %cond.true158, label %cond.false163, !dbg !3077

cond.true158:                                     ; preds = %if.then131
  %137 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3077
  %add.ptr159 = getelementptr inbounds %struct.function, %struct.function* %137, i64 0, !dbg !3077
  %cfg160 = getelementptr inbounds %struct.function, %struct.function* %add.ptr159, i32 0, i32 1, !dbg !3077
  %138 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg160, align 8, !dbg !3077
  %x_basic_block_info161 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %138, i32 0, i32 2, !dbg !3077
  %139 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info161, align 8, !dbg !3077
  %base162 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %139, i32 0, i32 0, !dbg !3077
  br label %cond.end164, !dbg !3077

cond.false163:                                    ; preds = %if.then131
  br label %cond.end164, !dbg !3077

cond.end164:                                      ; preds = %cond.false163, %cond.true158
  %cond165 = phi %struct.VEC_basic_block_base* [ %base162, %cond.true158 ], [ null, %cond.false163 ], !dbg !3077
  %140 = load i32, i32* %bbn124, align 4, !dbg !3077
  %call166 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond165, i32 %140), !dbg !3077
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call166, i32 0, i32 1, !dbg !3077
  %call167 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3077
  %141 = bitcast %struct.edge_iterator* %tmp153 to { i32, %struct.VEC_edge_gc** }*, !dbg !3077
  %142 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %141, i32 0, i32 0, !dbg !3077
  %143 = extractvalue { i32, %struct.VEC_edge_gc** } %call167, 0, !dbg !3077
  store i32 %143, i32* %142, align 8, !dbg !3077
  %144 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %141, i32 0, i32 1, !dbg !3077
  %145 = extractvalue { i32, %struct.VEC_edge_gc** } %call167, 1, !dbg !3077
  store %struct.VEC_edge_gc** %145, %struct.VEC_edge_gc*** %144, align 8, !dbg !3077
  %146 = bitcast %struct.edge_iterator* %ei133 to i8*, !dbg !3077
  %147 = bitcast %struct.edge_iterator* %tmp153 to i8*, !dbg !3077
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* align 8 %147, i64 16, i1 false), !dbg !3077
  br label %for.cond168, !dbg !3077

for.cond168:                                      ; preds = %for.inc183, %cond.end164
  %148 = bitcast %struct.edge_iterator* %ei133 to { i32, %struct.VEC_edge_gc** }*, !dbg !3079
  %149 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %148, i32 0, i32 0, !dbg !3079
  %150 = load i32, i32* %149, align 8, !dbg !3079
  %151 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %148, i32 0, i32 1, !dbg !3079
  %152 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %151, align 8, !dbg !3079
  %call169 = call zeroext i8 @ei_cond(i32 %150, %struct.VEC_edge_gc** %152, %struct.edge_def** %e132), !dbg !3079
  %tobool170 = icmp ne i8 %call169, 0, !dbg !3077
  br i1 %tobool170, label %for.body171, label %for.end184, !dbg !3077

for.body171:                                      ; preds = %for.cond168
  %153 = load %struct.edge_def*, %struct.edge_def** %e132, align 8, !dbg !3081
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %153, i32 0, i32 1, !dbg !3083
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3083
  %155 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3084
  %add.ptr172 = getelementptr inbounds %struct.function, %struct.function* %155, i64 0, !dbg !3084
  %cfg173 = getelementptr inbounds %struct.function, %struct.function* %add.ptr172, i32 0, i32 1, !dbg !3084
  %156 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg173, align 8, !dbg !3084
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %156, i32 0, i32 1, !dbg !3084
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3084
  %cmp174 = icmp ne %struct.basic_block_def* %154, %157, !dbg !3085
  br i1 %cmp174, label %if.then176, label %if.end182, !dbg !3086

if.then176:                                       ; preds = %for.body171
  %158 = load i32*, i32** %degree.addr, align 8, !dbg !3087
  %159 = load %struct.edge_def*, %struct.edge_def** %e132, align 8, !dbg !3088
  %dest177 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %159, i32 0, i32 1, !dbg !3089
  %160 = load %struct.basic_block_def*, %struct.basic_block_def** %dest177, align 8, !dbg !3089
  %index178 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %160, i32 0, i32 9, !dbg !3090
  %161 = load i32, i32* %index178, align 8, !dbg !3090
  %idxprom179 = sext i32 %161 to i64, !dbg !3087
  %arrayidx180 = getelementptr inbounds i32, i32* %158, i64 %idxprom179, !dbg !3087
  %162 = load i32, i32* %arrayidx180, align 4, !dbg !3091
  %dec181 = add nsw i32 %162, -1, !dbg !3091
  store i32 %dec181, i32* %arrayidx180, align 4, !dbg !3091
  br label %if.end182, !dbg !3087

if.end182:                                        ; preds = %if.then176, %for.body171
  br label %for.inc183, !dbg !3084

for.inc183:                                       ; preds = %if.end182
  call void @ei_next(%struct.edge_iterator* %ei133), !dbg !3079
  br label %for.cond168, !dbg !3079, !llvm.loop !3092

for.end184:                                       ; preds = %for.cond168
  %163 = load i32, i32* %large, align 4, !dbg !3094
  %tobool185 = icmp ne i32 %163, 0, !dbg !3094
  br i1 %tobool185, label %if.end208, label %if.then186, !dbg !3096

if.then186:                                       ; preds = %for.end184
  %164 = load i32, i32* %i, align 4, !dbg !3097
  %sub187 = sub nsw i32 %164, 1, !dbg !3099
  store i32 %sub187, i32* %j, align 4, !dbg !3100
  br label %for.cond188, !dbg !3101

for.cond188:                                      ; preds = %for.inc205, %if.then186
  %165 = load i32, i32* %j, align 4, !dbg !3102
  %cmp189 = icmp sge i32 %165, 0, !dbg !3104
  br i1 %cmp189, label %for.body191, label %for.end207, !dbg !3105

for.body191:                                      ; preds = %for.cond188
  call void @llvm.dbg.declare(metadata i32* %succn, metadata !3106, metadata !DIExpression()), !dbg !3108
  %166 = load i32*, i32** %order, align 8, !dbg !3109
  %167 = load i32, i32* %j, align 4, !dbg !3110
  %idxprom192 = sext i32 %167 to i64, !dbg !3109
  %arrayidx193 = getelementptr inbounds i32, i32* %166, i64 %idxprom192, !dbg !3109
  %168 = load i32, i32* %arrayidx193, align 4, !dbg !3109
  store i32 %168, i32* %succn, align 4, !dbg !3108
  %169 = load i32*, i32** %max_hdr, align 8, !dbg !3111
  %170 = load i32, i32* %succn, align 4, !dbg !3113
  %idxprom194 = sext i32 %170 to i64, !dbg !3111
  %arrayidx195 = getelementptr inbounds i32, i32* %169, i64 %idxprom194, !dbg !3111
  %171 = load i32, i32* %arrayidx195, align 4, !dbg !3111
  %172 = load i32, i32* %bbn124, align 4, !dbg !3114
  %cmp196 = icmp eq i32 %171, %172, !dbg !3115
  br i1 %cmp196, label %if.then198, label %if.end204, !dbg !3116

if.then198:                                       ; preds = %for.body191
  %173 = load i32, i32* %succn, align 4, !dbg !3117
  %call199 = call zeroext i8 @too_large(i32 %173, i32* %num_bbs, i32* %num_insns), !dbg !3120
  %conv200 = zext i8 %call199 to i32, !dbg !3120
  store i32 %conv200, i32* %large, align 4, !dbg !3121
  %tobool201 = icmp ne i32 %conv200, 0, !dbg !3121
  br i1 %tobool201, label %if.then202, label %if.end203, !dbg !3122

if.then202:                                       ; preds = %if.then198
  br label %for.end207, !dbg !3123

if.end203:                                        ; preds = %if.then198
  br label %if.end204, !dbg !3124

if.end204:                                        ; preds = %if.end203, %for.body191
  br label %for.inc205, !dbg !3125

for.inc205:                                       ; preds = %if.end204
  %174 = load i32, i32* %j, align 4, !dbg !3126
  %dec206 = add nsw i32 %174, -1, !dbg !3126
  store i32 %dec206, i32* %j, align 4, !dbg !3126
  br label %for.cond188, !dbg !3127, !llvm.loop !3128

for.end207:                                       ; preds = %if.then202, %for.cond188
  br label %if.end208, !dbg !3129

if.end208:                                        ; preds = %for.end207, %for.end184
  %175 = load i32, i32* %large, align 4, !dbg !3130
  %tobool209 = icmp ne i32 %175, 0, !dbg !3130
  br i1 %tobool209, label %if.then210, label %if.end214, !dbg !3132

if.then210:                                       ; preds = %if.end208
  %176 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3133
  %177 = load i32, i32* @nr_regions, align 4, !dbg !3133
  %idxprom211 = sext i32 %177 to i64, !dbg !3133
  %arrayidx212 = getelementptr inbounds %struct.region, %struct.region* %176, i64 %idxprom211, !dbg !3133
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx212, i32 0, i32 0, !dbg !3133
  store i32 1, i32* %rgn_nr_blocks, align 4, !dbg !3135
  %178 = load i32, i32* @nr_regions, align 4, !dbg !3136
  %inc213 = add nsw i32 %178, 1, !dbg !3136
  store i32 %inc213, i32* @nr_regions, align 4, !dbg !3136
  br label %if.end214, !dbg !3137

if.end214:                                        ; preds = %if.then210, %if.end208
  store i32 1, i32* %num_bbs, align 4, !dbg !3138
  %179 = load i32, i32* %i, align 4, !dbg !3139
  %sub215 = sub nsw i32 %179, 1, !dbg !3141
  store i32 %sub215, i32* %j, align 4, !dbg !3142
  br label %for.cond216, !dbg !3143

for.cond216:                                      ; preds = %for.inc307, %if.end214
  %180 = load i32, i32* %j, align 4, !dbg !3144
  %cmp217 = icmp sge i32 %180, 0, !dbg !3146
  br i1 %cmp217, label %for.body219, label %for.end309, !dbg !3147

for.body219:                                      ; preds = %for.cond216
  call void @llvm.dbg.declare(metadata i32* %succn220, metadata !3148, metadata !DIExpression()), !dbg !3150
  %181 = load i32*, i32** %order, align 8, !dbg !3151
  %182 = load i32, i32* %j, align 4, !dbg !3152
  %idxprom221 = sext i32 %182 to i64, !dbg !3151
  %arrayidx222 = getelementptr inbounds i32, i32* %181, i64 %idxprom221, !dbg !3151
  %183 = load i32, i32* %arrayidx222, align 4, !dbg !3151
  store i32 %183, i32* %succn220, align 4, !dbg !3150
  %184 = load i32*, i32** %max_hdr, align 8, !dbg !3153
  %185 = load i32, i32* %succn220, align 4, !dbg !3155
  %idxprom223 = sext i32 %185 to i64, !dbg !3153
  %arrayidx224 = getelementptr inbounds i32, i32* %184, i64 %idxprom223, !dbg !3153
  %186 = load i32, i32* %arrayidx224, align 4, !dbg !3153
  %187 = load i32, i32* %bbn124, align 4, !dbg !3156
  %cmp225 = icmp eq i32 %186, %187, !dbg !3157
  br i1 %cmp225, label %if.then227, label %if.end306, !dbg !3158

if.then227:                                       ; preds = %for.body219
  %188 = load i32*, i32** %degree.addr, align 8, !dbg !3159
  %189 = load i32, i32* %succn220, align 4, !dbg !3159
  %idxprom228 = sext i32 %189 to i64, !dbg !3159
  %arrayidx229 = getelementptr inbounds i32, i32* %188, i64 %idxprom228, !dbg !3159
  %190 = load i32, i32* %arrayidx229, align 4, !dbg !3159
  %cmp230 = icmp eq i32 %190, 0, !dbg !3159
  br i1 %cmp230, label %cond.false233, label %cond.true232, !dbg !3159

cond.true232:                                     ; preds = %if.then227
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 1346, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !3159
  br label %cond.end234, !dbg !3159

cond.false233:                                    ; preds = %if.then227
  br label %cond.end234, !dbg !3159

cond.end234:                                      ; preds = %cond.false233, %cond.true232
  %cond235 = phi i32 [ 0, %cond.true232 ], [ 0, %cond.false233 ], !dbg !3159
  %191 = load i32*, i32** %degree.addr, align 8, !dbg !3161
  %192 = load i32, i32* %succn220, align 4, !dbg !3162
  %idxprom236 = sext i32 %192 to i64, !dbg !3161
  %arrayidx237 = getelementptr inbounds i32, i32* %191, i64 %idxprom236, !dbg !3161
  store i32 -1, i32* %arrayidx237, align 4, !dbg !3163
  %193 = load i32, i32* %succn220, align 4, !dbg !3164
  %194 = load i32*, i32** @rgn_bb_table, align 8, !dbg !3165
  %195 = load i32, i32* %idx, align 4, !dbg !3166
  %idxprom238 = sext i32 %195 to i64, !dbg !3165
  %arrayidx239 = getelementptr inbounds i32, i32* %194, i64 %idxprom238, !dbg !3165
  store i32 %193, i32* %arrayidx239, align 4, !dbg !3167
  %196 = load i32, i32* %large, align 4, !dbg !3168
  %tobool240 = icmp ne i32 %196, 0, !dbg !3168
  br i1 %tobool240, label %cond.true241, label %cond.false242, !dbg !3168

cond.true241:                                     ; preds = %cond.end234
  br label %cond.end244, !dbg !3168

cond.false242:                                    ; preds = %cond.end234
  %197 = load i32, i32* %num_bbs, align 4, !dbg !3169
  %inc243 = add nsw i32 %197, 1, !dbg !3169
  store i32 %inc243, i32* %num_bbs, align 4, !dbg !3169
  br label %cond.end244, !dbg !3168

cond.end244:                                      ; preds = %cond.false242, %cond.true241
  %cond245 = phi i32 [ 0, %cond.true241 ], [ %197, %cond.false242 ], !dbg !3168
  %198 = load i32*, i32** @block_to_bb, align 8, !dbg !3170
  %199 = load i32, i32* %succn220, align 4, !dbg !3170
  %idxprom246 = sext i32 %199 to i64, !dbg !3170
  %arrayidx247 = getelementptr inbounds i32, i32* %198, i64 %idxprom246, !dbg !3170
  store i32 %cond245, i32* %arrayidx247, align 4, !dbg !3171
  %200 = load i32, i32* @nr_regions, align 4, !dbg !3172
  %201 = load i32*, i32** @containing_rgn, align 8, !dbg !3173
  %202 = load i32, i32* %succn220, align 4, !dbg !3173
  %idxprom248 = sext i32 %202 to i64, !dbg !3173
  %arrayidx249 = getelementptr inbounds i32, i32* %201, i64 %idxprom248, !dbg !3173
  store i32 %200, i32* %arrayidx249, align 4, !dbg !3174
  %203 = load i32, i32* %large, align 4, !dbg !3175
  %tobool250 = icmp ne i32 %203, 0, !dbg !3175
  br i1 %tobool250, label %if.then251, label %if.end269, !dbg !3177

if.then251:                                       ; preds = %cond.end244
  %204 = load i32, i32* %idx, align 4, !dbg !3178
  %205 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3180
  %206 = load i32, i32* @nr_regions, align 4, !dbg !3180
  %idxprom252 = sext i32 %206 to i64, !dbg !3180
  %arrayidx253 = getelementptr inbounds %struct.region, %struct.region* %205, i64 %idxprom252, !dbg !3180
  %rgn_blocks254 = getelementptr inbounds %struct.region, %struct.region* %arrayidx253, i32 0, i32 1, !dbg !3180
  store i32 %204, i32* %rgn_blocks254, align 4, !dbg !3181
  %207 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3182
  %208 = load i32, i32* @nr_regions, align 4, !dbg !3182
  %idxprom255 = sext i32 %208 to i64, !dbg !3182
  %arrayidx256 = getelementptr inbounds %struct.region, %struct.region* %207, i64 %idxprom255, !dbg !3182
  %rgn_nr_blocks257 = getelementptr inbounds %struct.region, %struct.region* %arrayidx256, i32 0, i32 0, !dbg !3182
  store i32 1, i32* %rgn_nr_blocks257, align 4, !dbg !3183
  %209 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3184
  %210 = load i32, i32* @nr_regions, align 4, !dbg !3184
  %idxprom258 = sext i32 %210 to i64, !dbg !3184
  %arrayidx259 = getelementptr inbounds %struct.region, %struct.region* %209, i64 %idxprom258, !dbg !3184
  %dont_calc_deps260 = getelementptr inbounds %struct.region, %struct.region* %arrayidx259, i32 0, i32 2, !dbg !3184
  %bf.load261 = load i8, i8* %dont_calc_deps260, align 4, !dbg !3185
  %bf.clear262 = and i8 %bf.load261, -2, !dbg !3185
  store i8 %bf.clear262, i8* %dont_calc_deps260, align 4, !dbg !3185
  %211 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3186
  %212 = load i32, i32* @nr_regions, align 4, !dbg !3186
  %idxprom263 = sext i32 %212 to i64, !dbg !3186
  %arrayidx264 = getelementptr inbounds %struct.region, %struct.region* %211, i64 %idxprom263, !dbg !3186
  %has_real_ebb265 = getelementptr inbounds %struct.region, %struct.region* %arrayidx264, i32 0, i32 2, !dbg !3186
  %bf.load266 = load i8, i8* %has_real_ebb265, align 4, !dbg !3187
  %bf.clear267 = and i8 %bf.load266, -3, !dbg !3187
  store i8 %bf.clear267, i8* %has_real_ebb265, align 4, !dbg !3187
  %213 = load i32, i32* @nr_regions, align 4, !dbg !3188
  %inc268 = add nsw i32 %213, 1, !dbg !3188
  store i32 %inc268, i32* @nr_regions, align 4, !dbg !3188
  br label %if.end269, !dbg !3189

if.end269:                                        ; preds = %if.then251, %cond.end244
  %214 = load i32, i32* %idx, align 4, !dbg !3190
  %inc270 = add nsw i32 %214, 1, !dbg !3190
  store i32 %inc270, i32* %idx, align 4, !dbg !3190
  %215 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3191
  %add.ptr272 = getelementptr inbounds %struct.function, %struct.function* %215, i64 0, !dbg !3191
  %cfg273 = getelementptr inbounds %struct.function, %struct.function* %add.ptr272, i32 0, i32 1, !dbg !3191
  %216 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg273, align 8, !dbg !3191
  %x_basic_block_info274 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %216, i32 0, i32 2, !dbg !3191
  %217 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info274, align 8, !dbg !3191
  %tobool275 = icmp ne %struct.VEC_basic_block_gc* %217, null, !dbg !3191
  br i1 %tobool275, label %cond.true276, label %cond.false281, !dbg !3191

cond.true276:                                     ; preds = %if.end269
  %218 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3191
  %add.ptr277 = getelementptr inbounds %struct.function, %struct.function* %218, i64 0, !dbg !3191
  %cfg278 = getelementptr inbounds %struct.function, %struct.function* %add.ptr277, i32 0, i32 1, !dbg !3191
  %219 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg278, align 8, !dbg !3191
  %x_basic_block_info279 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %219, i32 0, i32 2, !dbg !3191
  %220 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info279, align 8, !dbg !3191
  %base280 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %220, i32 0, i32 0, !dbg !3191
  br label %cond.end282, !dbg !3191

cond.false281:                                    ; preds = %if.end269
  br label %cond.end282, !dbg !3191

cond.end282:                                      ; preds = %cond.false281, %cond.true276
  %cond283 = phi %struct.VEC_basic_block_base* [ %base280, %cond.true276 ], [ null, %cond.false281 ], !dbg !3191
  %221 = load i32, i32* %succn220, align 4, !dbg !3191
  %call284 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond283, i32 %221), !dbg !3191
  %succs285 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call284, i32 0, i32 1, !dbg !3191
  %call286 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs285), !dbg !3191
  %222 = bitcast %struct.edge_iterator* %tmp271 to { i32, %struct.VEC_edge_gc** }*, !dbg !3191
  %223 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %222, i32 0, i32 0, !dbg !3191
  %224 = extractvalue { i32, %struct.VEC_edge_gc** } %call286, 0, !dbg !3191
  store i32 %224, i32* %223, align 8, !dbg !3191
  %225 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %222, i32 0, i32 1, !dbg !3191
  %226 = extractvalue { i32, %struct.VEC_edge_gc** } %call286, 1, !dbg !3191
  store %struct.VEC_edge_gc** %226, %struct.VEC_edge_gc*** %225, align 8, !dbg !3191
  %227 = bitcast %struct.edge_iterator* %ei133 to i8*, !dbg !3191
  %228 = bitcast %struct.edge_iterator* %tmp271 to i8*, !dbg !3191
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %227, i8* align 8 %228, i64 16, i1 false), !dbg !3191
  br label %for.cond287, !dbg !3191

for.cond287:                                      ; preds = %for.inc304, %cond.end282
  %229 = bitcast %struct.edge_iterator* %ei133 to { i32, %struct.VEC_edge_gc** }*, !dbg !3193
  %230 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %229, i32 0, i32 0, !dbg !3193
  %231 = load i32, i32* %230, align 8, !dbg !3193
  %232 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %229, i32 0, i32 1, !dbg !3193
  %233 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %232, align 8, !dbg !3193
  %call288 = call zeroext i8 @ei_cond(i32 %231, %struct.VEC_edge_gc** %233, %struct.edge_def** %e132), !dbg !3193
  %tobool289 = icmp ne i8 %call288, 0, !dbg !3191
  br i1 %tobool289, label %for.body290, label %for.end305, !dbg !3191

for.body290:                                      ; preds = %for.cond287
  %234 = load %struct.edge_def*, %struct.edge_def** %e132, align 8, !dbg !3195
  %dest291 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %234, i32 0, i32 1, !dbg !3197
  %235 = load %struct.basic_block_def*, %struct.basic_block_def** %dest291, align 8, !dbg !3197
  %236 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3198
  %add.ptr292 = getelementptr inbounds %struct.function, %struct.function* %236, i64 0, !dbg !3198
  %cfg293 = getelementptr inbounds %struct.function, %struct.function* %add.ptr292, i32 0, i32 1, !dbg !3198
  %237 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg293, align 8, !dbg !3198
  %x_exit_block_ptr294 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %237, i32 0, i32 1, !dbg !3198
  %238 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr294, align 8, !dbg !3198
  %cmp295 = icmp ne %struct.basic_block_def* %235, %238, !dbg !3199
  br i1 %cmp295, label %if.then297, label %if.end303, !dbg !3200

if.then297:                                       ; preds = %for.body290
  %239 = load i32*, i32** %degree.addr, align 8, !dbg !3201
  %240 = load %struct.edge_def*, %struct.edge_def** %e132, align 8, !dbg !3202
  %dest298 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %240, i32 0, i32 1, !dbg !3203
  %241 = load %struct.basic_block_def*, %struct.basic_block_def** %dest298, align 8, !dbg !3203
  %index299 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %241, i32 0, i32 9, !dbg !3204
  %242 = load i32, i32* %index299, align 8, !dbg !3204
  %idxprom300 = sext i32 %242 to i64, !dbg !3201
  %arrayidx301 = getelementptr inbounds i32, i32* %239, i64 %idxprom300, !dbg !3201
  %243 = load i32, i32* %arrayidx301, align 4, !dbg !3205
  %dec302 = add nsw i32 %243, -1, !dbg !3205
  store i32 %dec302, i32* %arrayidx301, align 4, !dbg !3205
  br label %if.end303, !dbg !3201

if.end303:                                        ; preds = %if.then297, %for.body290
  br label %for.inc304, !dbg !3198

for.inc304:                                       ; preds = %if.end303
  call void @ei_next(%struct.edge_iterator* %ei133), !dbg !3193
  br label %for.cond287, !dbg !3193, !llvm.loop !3206

for.end305:                                       ; preds = %for.cond287
  br label %if.end306, !dbg !3208

if.end306:                                        ; preds = %for.end305, %for.body219
  br label %for.inc307, !dbg !3209

for.inc307:                                       ; preds = %if.end306
  %244 = load i32, i32* %j, align 4, !dbg !3210
  %dec308 = add nsw i32 %244, -1, !dbg !3210
  store i32 %dec308, i32* %j, align 4, !dbg !3210
  br label %for.cond216, !dbg !3211, !llvm.loop !3212

for.end309:                                       ; preds = %for.cond216
  %245 = load i32, i32* %large, align 4, !dbg !3214
  %tobool310 = icmp ne i32 %245, 0, !dbg !3214
  br i1 %tobool310, label %if.end316, label %if.then311, !dbg !3216

if.then311:                                       ; preds = %for.end309
  %246 = load i32, i32* %num_bbs, align 4, !dbg !3217
  %247 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3219
  %248 = load i32, i32* @nr_regions, align 4, !dbg !3219
  %idxprom312 = sext i32 %248 to i64, !dbg !3219
  %arrayidx313 = getelementptr inbounds %struct.region, %struct.region* %247, i64 %idxprom312, !dbg !3219
  %rgn_nr_blocks314 = getelementptr inbounds %struct.region, %struct.region* %arrayidx313, i32 0, i32 0, !dbg !3219
  store i32 %246, i32* %rgn_nr_blocks314, align 4, !dbg !3220
  %249 = load i32, i32* @nr_regions, align 4, !dbg !3221
  %inc315 = add nsw i32 %249, 1, !dbg !3221
  store i32 %inc315, i32* @nr_regions, align 4, !dbg !3221
  br label %if.end316, !dbg !3222

if.end316:                                        ; preds = %if.then311, %for.end309
  br label %if.end317, !dbg !3223

if.end317:                                        ; preds = %if.end316, %for.body123
  br label %for.inc318, !dbg !3224

for.inc318:                                       ; preds = %if.end317
  %250 = load i32, i32* %i, align 4, !dbg !3225
  %dec319 = add nsw i32 %250, -1, !dbg !3225
  store i32 %dec319, i32* %i, align 4, !dbg !3225
  br label %for.cond120, !dbg !3226, !llvm.loop !3227

for.end320:                                       ; preds = %for.cond120
  %251 = load i32, i32* @sched_verbose, align 4, !dbg !3229
  %cmp321 = icmp sge i32 %251, 6, !dbg !3231
  br i1 %cmp321, label %if.then323, label %if.end325, !dbg !3232

if.then323:                                       ; preds = %for.end320
  call void @llvm.dbg.declare(metadata i32** %s2, metadata !3233, metadata !DIExpression()), !dbg !3235
  call void @llvm.dbg.declare(metadata i32* %s2_sz, metadata !3236, metadata !DIExpression()), !dbg !3237
  %call324 = call i32 @gather_region_statistics(i32** %s2), !dbg !3238
  store i32 %call324, i32* %s2_sz, align 4, !dbg !3239
  %252 = load i32*, i32** %s1, align 8, !dbg !3240
  %253 = load i32, i32* %s1_sz, align 4, !dbg !3241
  %254 = load i32*, i32** %s2, align 8, !dbg !3242
  %255 = load i32, i32* %s2_sz, align 4, !dbg !3243
  call void @print_region_statistics(i32* %252, i32 %253, i32* %254, i32 %255), !dbg !3244
  %256 = load i32*, i32** %s1, align 8, !dbg !3245
  %257 = bitcast i32* %256 to i8*, !dbg !3245
  call void @free(i8* %257), !dbg !3246
  %258 = load i32*, i32** %s2, align 8, !dbg !3247
  %259 = bitcast i32* %258 to i8*, !dbg !3247
  call void @free(i8* %259), !dbg !3248
  br label %if.end325, !dbg !3249

if.end325:                                        ; preds = %if.then323, %for.end320
  br label %if.end326, !dbg !3250

if.end326:                                        ; preds = %if.end325, %land.lhs.true110, %if.end108
  %260 = load i32*, i32** %order, align 8, !dbg !3251
  %261 = bitcast i32* %260 to i8*, !dbg !3251
  call void @free(i8* %261), !dbg !3252
  %262 = load i32*, i32** %max_hdr, align 8, !dbg !3253
  %263 = bitcast i32* %262 to i8*, !dbg !3253
  call void @free(i8* %263), !dbg !3254
  %264 = load i32, i32* %idx, align 4, !dbg !3255
  %265 = load i32*, i32** %idxp.addr, align 8, !dbg !3256
  store i32 %264, i32* %265, align 4, !dbg !3257
  ret void, !dbg !3258
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i32 @post_order_compute(i32*, i8 zeroext, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !3259 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !3262, metadata !DIExpression()), !dbg !3263
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !3264, metadata !DIExpression()), !dbg !3265
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3266
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !3268
  %1 = load i8*, i8** %popcount, align 8, !dbg !3268
  %tobool = icmp ne i8* %1, null, !dbg !3266
  br i1 %tobool, label %if.then, label %if.end7, !dbg !3269

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !3270, metadata !DIExpression()), !dbg !3272
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3273
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !3273
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !3273
  %div = udiv i32 %3, 64, !dbg !3273
  %idxprom = zext i32 %div to i64, !dbg !3273
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !3273
  %4 = load i64, i64* %arrayidx, align 8, !dbg !3273
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !3273
  %rem = urem i32 %5, 64, !dbg !3273
  %sh_prom = zext i32 %rem to i64, !dbg !3273
  %shr = lshr i64 %4, %sh_prom, !dbg !3273
  %and = and i64 %shr, 1, !dbg !3273
  %conv = trunc i64 %and to i8, !dbg !3273
  store i8 %conv, i8* %oldbit, align 1, !dbg !3274
  %6 = load i8, i8* %oldbit, align 1, !dbg !3275
  %tobool1 = icmp ne i8 %6, 0, !dbg !3275
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !3277

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3278
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !3279
  %8 = load i8*, i8** %popcount3, align 8, !dbg !3279
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !3280
  %div4 = udiv i32 %9, 64, !dbg !3281
  %idxprom5 = zext i32 %div4 to i64, !dbg !3278
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !3278
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !3282
  %inc = add i8 %10, 1, !dbg !3282
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !3282
  br label %if.end, !dbg !3278

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !3283

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !3284
  %rem8 = urem i32 %11, 64, !dbg !3285
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !3286
  %shl = shl i64 1, %sh_prom9, !dbg !3286
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3287
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !3288
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !3289
  %div11 = udiv i32 %13, 64, !dbg !3290
  %idxprom12 = zext i32 %div11 to i64, !dbg !3287
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !3287
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !3291
  %or = or i64 %14, %shl, !dbg !3291
  store i64 %or, i64* %arrayidx13, align 8, !dbg !3291
  ret void, !dbg !3292
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gather_region_statistics(i32** %rsp) #0 !dbg !3293 {
entry:
  %rsp.addr = alloca i32**, align 8
  %i = alloca i32, align 4
  %a = alloca i32*, align 8
  %a_sz = alloca i32, align 4
  %nr_blocks = alloca i32, align 4
  store i32** %rsp, i32*** %rsp.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %rsp.addr, metadata !3297, metadata !DIExpression()), !dbg !3298
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3299, metadata !DIExpression()), !dbg !3300
  call void @llvm.dbg.declare(metadata i32** %a, metadata !3301, metadata !DIExpression()), !dbg !3302
  store i32* null, i32** %a, align 8, !dbg !3302
  call void @llvm.dbg.declare(metadata i32* %a_sz, metadata !3303, metadata !DIExpression()), !dbg !3304
  store i32 0, i32* %a_sz, align 4, !dbg !3304
  store i32 0, i32* %i, align 4, !dbg !3305
  br label %for.cond, !dbg !3307

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3308
  %1 = load i32, i32* @nr_regions, align 4, !dbg !3310
  %cmp = icmp slt i32 %0, %1, !dbg !3311
  br i1 %cmp, label %for.body, label %for.end, !dbg !3312

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %nr_blocks, metadata !3313, metadata !DIExpression()), !dbg !3315
  %2 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !3316
  %3 = load i32, i32* %i, align 4, !dbg !3316
  %idxprom = sext i32 %3 to i64, !dbg !3316
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %2, i64 %idxprom, !dbg !3316
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 0, !dbg !3316
  %4 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !3316
  store i32 %4, i32* %nr_blocks, align 4, !dbg !3315
  %5 = load i32, i32* %nr_blocks, align 4, !dbg !3317
  %cmp1 = icmp sge i32 %5, 1, !dbg !3317
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !3317

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 1100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !3317
  br label %cond.end, !dbg !3317

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3317

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3317
  %6 = load i32, i32* %nr_blocks, align 4, !dbg !3318
  %7 = load i32, i32* %a_sz, align 4, !dbg !3320
  %cmp2 = icmp sgt i32 %6, %7, !dbg !3321
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3322

if.then:                                          ; preds = %cond.end
  %8 = load i32*, i32** %a, align 8, !dbg !3323
  %9 = bitcast i32* %8 to i8*, !dbg !3323
  %10 = load i32, i32* %nr_blocks, align 4, !dbg !3323
  %conv = sext i32 %10 to i64, !dbg !3323
  %mul = mul i64 4, %conv, !dbg !3323
  %call = call i8* @xrealloc(i8* %9, i64 %mul), !dbg !3323
  %11 = bitcast i8* %call to i32*, !dbg !3323
  store i32* %11, i32** %a, align 8, !dbg !3325
  br label %do.body, !dbg !3326

do.body:                                          ; preds = %do.cond, %if.then
  %12 = load i32*, i32** %a, align 8, !dbg !3327
  %13 = load i32, i32* %a_sz, align 4, !dbg !3328
  %inc = add nsw i32 %13, 1, !dbg !3328
  store i32 %inc, i32* %a_sz, align 4, !dbg !3328
  %idxprom3 = sext i32 %13 to i64, !dbg !3327
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i64 %idxprom3, !dbg !3327
  store i32 0, i32* %arrayidx4, align 4, !dbg !3329
  br label %do.cond, !dbg !3327

do.cond:                                          ; preds = %do.body
  %14 = load i32, i32* %a_sz, align 4, !dbg !3330
  %15 = load i32, i32* %nr_blocks, align 4, !dbg !3331
  %cmp5 = icmp ne i32 %14, %15, !dbg !3332
  br i1 %cmp5, label %do.body, label %do.end, !dbg !3327, !llvm.loop !3333

do.end:                                           ; preds = %do.cond
  br label %if.end, !dbg !3335

if.end:                                           ; preds = %do.end, %cond.end
  %16 = load i32*, i32** %a, align 8, !dbg !3336
  %17 = load i32, i32* %nr_blocks, align 4, !dbg !3337
  %sub = sub nsw i32 %17, 1, !dbg !3338
  %idxprom7 = sext i32 %sub to i64, !dbg !3336
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i64 %idxprom7, !dbg !3336
  %18 = load i32, i32* %arrayidx8, align 4, !dbg !3339
  %inc9 = add nsw i32 %18, 1, !dbg !3339
  store i32 %inc9, i32* %arrayidx8, align 4, !dbg !3339
  br label %for.inc, !dbg !3340

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4, !dbg !3341
  %inc10 = add nsw i32 %19, 1, !dbg !3341
  store i32 %inc10, i32* %i, align 4, !dbg !3341
  br label %for.cond, !dbg !3342, !llvm.loop !3343

for.end:                                          ; preds = %for.cond
  %20 = load i32*, i32** %a, align 8, !dbg !3345
  %21 = load i32**, i32*** %rsp.addr, align 8, !dbg !3346
  store i32* %20, i32** %21, align 8, !dbg !3347
  %22 = load i32, i32* %a_sz, align 4, !dbg !3348
  ret i32 %22, !dbg !3349
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @too_large(i32 %block, i32* %num_bbs, i32* %num_insns) #0 !dbg !3350 {
entry:
  %block.addr = alloca i32, align 4
  %num_bbs.addr = alloca i32*, align 8
  %num_insns.addr = alloca i32*, align 8
  store i32 %block, i32* %block.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block.addr, metadata !3353, metadata !DIExpression()), !dbg !3354
  store i32* %num_bbs, i32** %num_bbs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_bbs.addr, metadata !3355, metadata !DIExpression()), !dbg !3356
  store i32* %num_insns, i32** %num_insns.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_insns.addr, metadata !3357, metadata !DIExpression()), !dbg !3358
  %0 = load i32*, i32** %num_bbs.addr, align 8, !dbg !3359
  %1 = load i32, i32* %0, align 4, !dbg !3360
  %inc = add nsw i32 %1, 1, !dbg !3360
  store i32 %inc, i32* %0, align 4, !dbg !3360
  %2 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !3361
  %estimate_number_of_insns = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %2, i32 0, i32 2, !dbg !3362
  %3 = load i32 (%struct.basic_block_def*)*, i32 (%struct.basic_block_def*)** %estimate_number_of_insns, align 8, !dbg !3362
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3363
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3363
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3363
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3363
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 2, !dbg !3363
  %6 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !3363
  %tobool = icmp ne %struct.VEC_basic_block_gc* %6, null, !dbg !3363
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3363

cond.true:                                        ; preds = %entry
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3363
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3363
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3363
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3363
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 2, !dbg !3363
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !3363
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %9, i32 0, i32 0, !dbg !3363
  br label %cond.end, !dbg !3363

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3363

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3363
  %10 = load i32, i32* %block.addr, align 4, !dbg !3363
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %10), !dbg !3363
  %call4 = call i32 %3(%struct.basic_block_def* %call), !dbg !3361
  %11 = load i32*, i32** %num_insns.addr, align 8, !dbg !3364
  %12 = load i32, i32* %11, align 4, !dbg !3365
  %add = add nsw i32 %12, %call4, !dbg !3365
  store i32 %add, i32* %11, align 4, !dbg !3365
  %13 = load i32*, i32** %num_bbs.addr, align 8, !dbg !3366
  %14 = load i32, i32* %13, align 4, !dbg !3367
  %15 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3368
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %15, i64 77, !dbg !3368
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3368
  %16 = load i32, i32* %value, align 8, !dbg !3368
  %cmp = icmp sgt i32 %14, %16, !dbg !3369
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !3370

lor.rhs:                                          ; preds = %cond.end
  %17 = load i32*, i32** %num_insns.addr, align 8, !dbg !3371
  %18 = load i32, i32* %17, align 4, !dbg !3372
  %19 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3373
  %arrayidx5 = getelementptr inbounds %struct.param_info, %struct.param_info* %19, i64 78, !dbg !3373
  %value6 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx5, i32 0, i32 1, !dbg !3373
  %20 = load i32, i32* %value6, align 8, !dbg !3373
  %cmp7 = icmp sgt i32 %18, %20, !dbg !3374
  br label %lor.end, !dbg !3370

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %21 = phi i1 [ true, %cond.end ], [ %cmp7, %lor.rhs ]
  %lor.ext = zext i1 %21 to i32, !dbg !3370
  %conv = trunc i32 %lor.ext to i8, !dbg !3375
  ret i8 %conv, !dbg !3376
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_region_statistics(i32* %s1, i32 %s1_sz, i32* %s2, i32 %s2_sz) #0 !dbg !3377 {
entry:
  %s1.addr = alloca i32*, align 8
  %s1_sz.addr = alloca i32, align 4
  %s2.addr = alloca i32*, align 8
  %s2_sz.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %n1 = alloca i32, align 4
  %n2 = alloca i32, align 4
  store i32* %s1, i32** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %s1.addr, metadata !3380, metadata !DIExpression()), !dbg !3381
  store i32 %s1_sz, i32* %s1_sz.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s1_sz.addr, metadata !3382, metadata !DIExpression()), !dbg !3383
  store i32* %s2, i32** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %s2.addr, metadata !3384, metadata !DIExpression()), !dbg !3385
  store i32 %s2_sz, i32* %s2_sz.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s2_sz.addr, metadata !3386, metadata !DIExpression()), !dbg !3387
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3388, metadata !DIExpression()), !dbg !3389
  store i32 1, i32* %i, align 4, !dbg !3390
  br label %for.cond, !dbg !3392

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3393
  %1 = load i32, i32* %s2_sz.addr, align 4, !dbg !3395
  %cmp = icmp slt i32 %0, %1, !dbg !3396
  br i1 %cmp, label %for.body, label %for.end, !dbg !3397

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %n1, metadata !3398, metadata !DIExpression()), !dbg !3400
  call void @llvm.dbg.declare(metadata i32* %n2, metadata !3401, metadata !DIExpression()), !dbg !3402
  %2 = load i32*, i32** %s2.addr, align 8, !dbg !3403
  %3 = load i32, i32* %i, align 4, !dbg !3404
  %idxprom = sext i32 %3 to i64, !dbg !3403
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !3403
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3403
  store i32 %4, i32* %n2, align 4, !dbg !3405
  %5 = load i32, i32* %n2, align 4, !dbg !3406
  %cmp1 = icmp eq i32 %5, 0, !dbg !3408
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3409

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !3410

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !3411
  %7 = load i32, i32* %s1_sz.addr, align 4, !dbg !3413
  %cmp2 = icmp sge i32 %6, %7, !dbg !3414
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !3415

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %n1, align 4, !dbg !3416
  br label %if.end6, !dbg !3417

if.else:                                          ; preds = %if.end
  %8 = load i32*, i32** %s1.addr, align 8, !dbg !3418
  %9 = load i32, i32* %i, align 4, !dbg !3419
  %idxprom4 = sext i32 %9 to i64, !dbg !3418
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i64 %idxprom4, !dbg !3418
  %10 = load i32, i32* %arrayidx5, align 4, !dbg !3418
  store i32 %10, i32* %n1, align 4, !dbg !3420
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3421
  %12 = load i32, i32* %i, align 4, !dbg !3422
  %add = add nsw i32 %12, 1, !dbg !3423
  %13 = load i32, i32* %n1, align 4, !dbg !3424
  %14 = load i32, i32* %n2, align 4, !dbg !3425
  %15 = load i32, i32* %n1, align 4, !dbg !3426
  %sub = sub nsw i32 %14, %15, !dbg !3427
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.49, i64 0, i64 0), i32 %add, i32 %13, i32 %sub), !dbg !3428
  br label %for.inc, !dbg !3429

for.inc:                                          ; preds = %if.end6, %if.then
  %16 = load i32, i32* %i, align 4, !dbg !3430
  %inc = add nsw i32 %16, 1, !dbg !3430
  store i32 %inc, i32* %i, align 4, !dbg !3430
  br label %for.cond, !dbg !3431, !llvm.loop !3432

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3434
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_candidate(i32 %i) #0 !dbg !3435 {
entry:
  %i.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca i32, align 4
  %b26 = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3436, metadata !DIExpression()), !dbg !3437
  %0 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !3438
  %1 = load i32, i32* %i.addr, align 4, !dbg !3440
  %idxprom = sext i32 %1 to i64, !dbg !3438
  %arrayidx = getelementptr inbounds %struct.candidate, %struct.candidate* %0, i64 %idxprom, !dbg !3438
  %is_valid = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx, i32 0, i32 0, !dbg !3441
  %2 = load i8, i8* %is_valid, align 8, !dbg !3441
  %tobool = icmp ne i8 %2, 0, !dbg !3438
  br i1 %tobool, label %if.end, label %if.then, !dbg !3442

if.then:                                          ; preds = %entry
  br label %if.end44, !dbg !3443

if.end:                                           ; preds = %entry
  %3 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !3444
  %4 = load i32, i32* %i.addr, align 4, !dbg !3446
  %idxprom1 = sext i32 %4 to i64, !dbg !3444
  %arrayidx2 = getelementptr inbounds %struct.candidate, %struct.candidate* %3, i64 %idxprom1, !dbg !3444
  %is_speculative = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx2, i32 0, i32 1, !dbg !3447
  %5 = load i8, i8* %is_speculative, align 1, !dbg !3447
  %tobool3 = icmp ne i8 %5, 0, !dbg !3444
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !3448

if.then4:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3449, metadata !DIExpression()), !dbg !3451
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3452
  %7 = load i32*, i32** @rgn_bb_table, align 8, !dbg !3453
  %8 = load i32*, i32** @ebb_head, align 8, !dbg !3453
  %9 = load i32, i32* %i.addr, align 4, !dbg !3453
  %idxprom5 = sext i32 %9 to i64, !dbg !3453
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i64 %idxprom5, !dbg !3453
  %10 = load i32, i32* %arrayidx6, align 4, !dbg !3453
  %idxprom7 = sext i32 %10 to i64, !dbg !3453
  %arrayidx8 = getelementptr inbounds i32, i32* %7, i64 %idxprom7, !dbg !3453
  %11 = load i32, i32* %arrayidx8, align 4, !dbg !3453
  %12 = load i32, i32* %i.addr, align 4, !dbg !3454
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i64 0, i64 0), i32 %11, i32 %12), !dbg !3455
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3456
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i64 0, i64 0)), !dbg !3457
  store i32 0, i32* %j, align 4, !dbg !3458
  br label %for.cond, !dbg !3460

for.cond:                                         ; preds = %for.inc, %if.then4
  %14 = load i32, i32* %j, align 4, !dbg !3461
  %15 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !3463
  %16 = load i32, i32* %i.addr, align 4, !dbg !3464
  %idxprom10 = sext i32 %16 to i64, !dbg !3463
  %arrayidx11 = getelementptr inbounds %struct.candidate, %struct.candidate* %15, i64 %idxprom10, !dbg !3463
  %split_bbs = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx11, i32 0, i32 3, !dbg !3465
  %nr_members = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs, i32 0, i32 1, !dbg !3466
  %17 = load i32, i32* %nr_members, align 8, !dbg !3466
  %cmp = icmp slt i32 %14, %17, !dbg !3467
  br i1 %cmp, label %for.body, label %for.end, !dbg !3468

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %b, metadata !3469, metadata !DIExpression()), !dbg !3471
  %18 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !3472
  %19 = load i32, i32* %i.addr, align 4, !dbg !3473
  %idxprom12 = sext i32 %19 to i64, !dbg !3472
  %arrayidx13 = getelementptr inbounds %struct.candidate, %struct.candidate* %18, i64 %idxprom12, !dbg !3472
  %split_bbs14 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx13, i32 0, i32 3, !dbg !3474
  %first_member = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs14, i32 0, i32 0, !dbg !3475
  %20 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_member, align 8, !dbg !3475
  %21 = load i32, i32* %j, align 4, !dbg !3476
  %idxprom15 = sext i32 %21 to i64, !dbg !3472
  %arrayidx16 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %20, i64 %idxprom15, !dbg !3472
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx16, align 8, !dbg !3472
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 9, !dbg !3477
  %23 = load i32, i32* %index, align 8, !dbg !3477
  store i32 %23, i32* %b, align 4, !dbg !3471
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3478
  %25 = load i32, i32* %b, align 4, !dbg !3479
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), i32 %25), !dbg !3480
  br label %for.inc, !dbg !3481

for.inc:                                          ; preds = %for.body
  %26 = load i32, i32* %j, align 4, !dbg !3482
  %inc = add nsw i32 %26, 1, !dbg !3482
  store i32 %inc, i32* %j, align 4, !dbg !3482
  br label %for.cond, !dbg !3483, !llvm.loop !3484

for.end:                                          ; preds = %for.cond
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3486
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !3487
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3488
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0)), !dbg !3489
  store i32 0, i32* %j, align 4, !dbg !3490
  br label %for.cond20, !dbg !3492

for.cond20:                                       ; preds = %for.inc35, %for.end
  %29 = load i32, i32* %j, align 4, !dbg !3493
  %30 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !3495
  %31 = load i32, i32* %i.addr, align 4, !dbg !3496
  %idxprom21 = sext i32 %31 to i64, !dbg !3495
  %arrayidx22 = getelementptr inbounds %struct.candidate, %struct.candidate* %30, i64 %idxprom21, !dbg !3495
  %update_bbs = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx22, i32 0, i32 4, !dbg !3497
  %nr_members23 = getelementptr inbounds %struct.bblst, %struct.bblst* %update_bbs, i32 0, i32 1, !dbg !3498
  %32 = load i32, i32* %nr_members23, align 8, !dbg !3498
  %cmp24 = icmp slt i32 %29, %32, !dbg !3499
  br i1 %cmp24, label %for.body25, label %for.end37, !dbg !3500

for.body25:                                       ; preds = %for.cond20
  call void @llvm.dbg.declare(metadata i32* %b26, metadata !3501, metadata !DIExpression()), !dbg !3503
  %33 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !3504
  %34 = load i32, i32* %i.addr, align 4, !dbg !3505
  %idxprom27 = sext i32 %34 to i64, !dbg !3504
  %arrayidx28 = getelementptr inbounds %struct.candidate, %struct.candidate* %33, i64 %idxprom27, !dbg !3504
  %update_bbs29 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx28, i32 0, i32 4, !dbg !3506
  %first_member30 = getelementptr inbounds %struct.bblst, %struct.bblst* %update_bbs29, i32 0, i32 0, !dbg !3507
  %35 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_member30, align 8, !dbg !3507
  %36 = load i32, i32* %j, align 4, !dbg !3508
  %idxprom31 = sext i32 %36 to i64, !dbg !3504
  %arrayidx32 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %35, i64 %idxprom31, !dbg !3504
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx32, align 8, !dbg !3504
  %index33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 9, !dbg !3509
  %38 = load i32, i32* %index33, align 8, !dbg !3509
  store i32 %38, i32* %b26, align 4, !dbg !3503
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3510
  %40 = load i32, i32* %b26, align 4, !dbg !3511
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), i32 %40), !dbg !3512
  br label %for.inc35, !dbg !3513

for.inc35:                                        ; preds = %for.body25
  %41 = load i32, i32* %j, align 4, !dbg !3514
  %inc36 = add nsw i32 %41, 1, !dbg !3514
  store i32 %inc36, i32* %j, align 4, !dbg !3514
  br label %for.cond20, !dbg !3515, !llvm.loop !3516

for.end37:                                        ; preds = %for.cond20
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3518
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !3519
  br label %if.end44, !dbg !3520

if.else:                                          ; preds = %if.end
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3521
  %44 = load i32*, i32** @rgn_bb_table, align 8, !dbg !3523
  %45 = load i32*, i32** @ebb_head, align 8, !dbg !3523
  %46 = load i32, i32* %i.addr, align 4, !dbg !3523
  %idxprom39 = sext i32 %46 to i64, !dbg !3523
  %arrayidx40 = getelementptr inbounds i32, i32* %45, i64 %idxprom39, !dbg !3523
  %47 = load i32, i32* %arrayidx40, align 4, !dbg !3523
  %idxprom41 = sext i32 %47 to i64, !dbg !3523
  %arrayidx42 = getelementptr inbounds i32, i32* %44, i64 %idxprom41, !dbg !3523
  %48 = load i32, i32* %arrayidx42, align 4, !dbg !3523
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0), i32 %48), !dbg !3524
  br label %if.end44

if.end44:                                         ; preds = %if.then, %if.else, %for.end37
  ret void, !dbg !3525
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_candidates(i32 %trg) #0 !dbg !3526 {
entry:
  %trg.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %trg, i32* %trg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %trg.addr, metadata !3527, metadata !DIExpression()), !dbg !3528
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3529, metadata !DIExpression()), !dbg !3530
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3531
  %1 = load i32*, i32** @rgn_bb_table, align 8, !dbg !3532
  %2 = load i32*, i32** @ebb_head, align 8, !dbg !3532
  %3 = load i32, i32* %trg.addr, align 4, !dbg !3532
  %idxprom = sext i32 %3 to i64, !dbg !3532
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !3532
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3532
  %idxprom1 = sext i32 %4 to i64, !dbg !3532
  %arrayidx2 = getelementptr inbounds i32, i32* %1, i64 %idxprom1, !dbg !3532
  %5 = load i32, i32* %arrayidx2, align 4, !dbg !3532
  %6 = load i32, i32* %trg.addr, align 4, !dbg !3533
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.21, i64 0, i64 0), i32 %5, i32 %6), !dbg !3534
  %7 = load i32, i32* %trg.addr, align 4, !dbg !3535
  %add = add nsw i32 %7, 1, !dbg !3537
  store i32 %add, i32* %i, align 4, !dbg !3538
  br label %for.cond, !dbg !3539

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4, !dbg !3540
  %9 = load i32, i32* @current_nr_blocks, align 4, !dbg !3542
  %cmp = icmp slt i32 %8, %9, !dbg !3543
  br i1 %cmp, label %for.body, label %for.end, !dbg !3544

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4, !dbg !3545
  call void @debug_candidate(i32 %10), !dbg !3546
  br label %for.inc, !dbg !3546

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !3547
  %inc = add nsw i32 %11, 1, !dbg !3547
  store i32 %inc, i32* %i, align 4, !dbg !3547
  br label %for.cond, !dbg !3548, !llvm.loop !3549

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3551
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @contributes_to_priority(%struct.rtx_def* %next, %struct.rtx_def* %insn) #0 !dbg !3552 {
entry:
  %next.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %next, %struct.rtx_def** %next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next.addr, metadata !3553, metadata !DIExpression()), !dbg !3554
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3555, metadata !DIExpression()), !dbg !3556
  %0 = load i32*, i32** @block_to_bb, align 8, !dbg !3557
  %1 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !3557
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !3557
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3557
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !3557
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !3557
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !3557
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !3557
  %3 = load i32, i32* %index, align 8, !dbg !3557
  %add = add nsw i32 %3, 0, !dbg !3557
  %idxprom = sext i32 %add to i64, !dbg !3557
  %arrayidx1 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !3557
  %4 = load i32, i32* %arrayidx1, align 4, !dbg !3557
  %5 = load i32*, i32** @block_to_bb, align 8, !dbg !3558
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3558
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !3558
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !3558
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 3, !dbg !3558
  %rt_bb5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.basic_block_def**, !dbg !3558
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb5, align 8, !dbg !3558
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !3558
  %8 = load i32, i32* %index6, align 8, !dbg !3558
  %add7 = add nsw i32 %8, 0, !dbg !3558
  %idxprom8 = sext i32 %add7 to i64, !dbg !3558
  %arrayidx9 = getelementptr inbounds i32, i32* %5, i64 %idxprom8, !dbg !3558
  %9 = load i32, i32* %arrayidx9, align 4, !dbg !3558
  %cmp = icmp eq i32 %4, %9, !dbg !3559
  %conv = zext i1 %cmp to i32, !dbg !3559
  ret i32 %conv, !dbg !3560
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_rgn_sched_max_insns_priority() #0 !dbg !3561 {
entry:
  %0 = load i32, i32* getelementptr inbounds (%struct.haifa_sched_info, %struct.haifa_sched_info* @rgn_sched_info, i32 0, i32 13), align 4, !dbg !3562
  ret i32 %0, !dbg !3563
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @deps_join(%struct.deps* %succ_deps, %struct.deps* %pred_deps) #0 !dbg !3564 {
entry:
  %succ_deps.addr = alloca %struct.deps*, align 8
  %pred_deps.addr = alloca %struct.deps*, align 8
  %reg = alloca i32, align 4
  %rsi = alloca %struct.bitmap_iterator, align 8
  %pred_rl = alloca %struct.deps_reg*, align 8
  %succ_rl = alloca %struct.deps_reg*, align 8
  store %struct.deps* %succ_deps, %struct.deps** %succ_deps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %succ_deps.addr, metadata !3567, metadata !DIExpression()), !dbg !3568
  store %struct.deps* %pred_deps, %struct.deps** %pred_deps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %pred_deps.addr, metadata !3569, metadata !DIExpression()), !dbg !3570
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !3571, metadata !DIExpression()), !dbg !3572
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %rsi, metadata !3573, metadata !DIExpression()), !dbg !3582
  %0 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3583
  %reg_last_in_use = getelementptr inbounds %struct.deps, %struct.deps* %0, i32 0, i32 15, !dbg !3583
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %rsi, %struct.bitmap_head_def* %reg_last_in_use, i32 0, i32* %reg), !dbg !3583
  br label %for.cond, !dbg !3583

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %rsi, i32* %reg), !dbg !3585
  %tobool = icmp ne i8 %call, 0, !dbg !3583
  br i1 %tobool, label %for.body, label %for.end, !dbg !3583

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.deps_reg** %pred_rl, metadata !3587, metadata !DIExpression()), !dbg !3589
  %1 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3590
  %reg_last = getelementptr inbounds %struct.deps, %struct.deps* %1, i32 0, i32 14, !dbg !3591
  %2 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !3591
  %3 = load i32, i32* %reg, align 4, !dbg !3592
  %idxprom = zext i32 %3 to i64, !dbg !3590
  %arrayidx = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %2, i64 %idxprom, !dbg !3590
  store %struct.deps_reg* %arrayidx, %struct.deps_reg** %pred_rl, align 8, !dbg !3589
  call void @llvm.dbg.declare(metadata %struct.deps_reg** %succ_rl, metadata !3593, metadata !DIExpression()), !dbg !3594
  %4 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3595
  %reg_last1 = getelementptr inbounds %struct.deps, %struct.deps* %4, i32 0, i32 14, !dbg !3596
  %5 = load %struct.deps_reg*, %struct.deps_reg** %reg_last1, align 8, !dbg !3596
  %6 = load i32, i32* %reg, align 4, !dbg !3597
  %idxprom2 = zext i32 %6 to i64, !dbg !3595
  %arrayidx3 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %5, i64 %idxprom2, !dbg !3595
  store %struct.deps_reg* %arrayidx3, %struct.deps_reg** %succ_rl, align 8, !dbg !3594
  %7 = load %struct.deps_reg*, %struct.deps_reg** %pred_rl, align 8, !dbg !3598
  %uses = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %7, i32 0, i32 0, !dbg !3599
  %8 = load %struct.rtx_def*, %struct.rtx_def** %uses, align 8, !dbg !3599
  %9 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3600
  %uses4 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %9, i32 0, i32 0, !dbg !3601
  %10 = load %struct.rtx_def*, %struct.rtx_def** %uses4, align 8, !dbg !3601
  %call5 = call %struct.rtx_def* @concat_INSN_LIST(%struct.rtx_def* %8, %struct.rtx_def* %10), !dbg !3602
  %11 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3603
  %uses6 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %11, i32 0, i32 0, !dbg !3604
  store %struct.rtx_def* %call5, %struct.rtx_def** %uses6, align 8, !dbg !3605
  %12 = load %struct.deps_reg*, %struct.deps_reg** %pred_rl, align 8, !dbg !3606
  %sets = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %12, i32 0, i32 1, !dbg !3607
  %13 = load %struct.rtx_def*, %struct.rtx_def** %sets, align 8, !dbg !3607
  %14 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3608
  %sets7 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %14, i32 0, i32 1, !dbg !3609
  %15 = load %struct.rtx_def*, %struct.rtx_def** %sets7, align 8, !dbg !3609
  %call8 = call %struct.rtx_def* @concat_INSN_LIST(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !3610
  %16 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3611
  %sets9 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %16, i32 0, i32 1, !dbg !3612
  store %struct.rtx_def* %call8, %struct.rtx_def** %sets9, align 8, !dbg !3613
  %17 = load %struct.deps_reg*, %struct.deps_reg** %pred_rl, align 8, !dbg !3614
  %implicit_sets = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %17, i32 0, i32 2, !dbg !3615
  %18 = load %struct.rtx_def*, %struct.rtx_def** %implicit_sets, align 8, !dbg !3615
  %19 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3616
  %implicit_sets10 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %19, i32 0, i32 2, !dbg !3617
  %20 = load %struct.rtx_def*, %struct.rtx_def** %implicit_sets10, align 8, !dbg !3617
  %call11 = call %struct.rtx_def* @concat_INSN_LIST(%struct.rtx_def* %18, %struct.rtx_def* %20), !dbg !3618
  %21 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3619
  %implicit_sets12 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %21, i32 0, i32 2, !dbg !3620
  store %struct.rtx_def* %call11, %struct.rtx_def** %implicit_sets12, align 8, !dbg !3621
  %22 = load %struct.deps_reg*, %struct.deps_reg** %pred_rl, align 8, !dbg !3622
  %clobbers = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %22, i32 0, i32 3, !dbg !3623
  %23 = load %struct.rtx_def*, %struct.rtx_def** %clobbers, align 8, !dbg !3623
  %24 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3624
  %clobbers13 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %24, i32 0, i32 3, !dbg !3625
  %25 = load %struct.rtx_def*, %struct.rtx_def** %clobbers13, align 8, !dbg !3625
  %call14 = call %struct.rtx_def* @concat_INSN_LIST(%struct.rtx_def* %23, %struct.rtx_def* %25), !dbg !3626
  %26 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3627
  %clobbers15 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %26, i32 0, i32 3, !dbg !3628
  store %struct.rtx_def* %call14, %struct.rtx_def** %clobbers15, align 8, !dbg !3629
  %27 = load %struct.deps_reg*, %struct.deps_reg** %pred_rl, align 8, !dbg !3630
  %uses_length = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %27, i32 0, i32 4, !dbg !3631
  %28 = load i32, i32* %uses_length, align 8, !dbg !3631
  %29 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3632
  %uses_length16 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %29, i32 0, i32 4, !dbg !3633
  %30 = load i32, i32* %uses_length16, align 8, !dbg !3634
  %add = add nsw i32 %30, %28, !dbg !3634
  store i32 %add, i32* %uses_length16, align 8, !dbg !3634
  %31 = load %struct.deps_reg*, %struct.deps_reg** %pred_rl, align 8, !dbg !3635
  %clobbers_length = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %31, i32 0, i32 5, !dbg !3636
  %32 = load i32, i32* %clobbers_length, align 4, !dbg !3636
  %33 = load %struct.deps_reg*, %struct.deps_reg** %succ_rl, align 8, !dbg !3637
  %clobbers_length17 = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %33, i32 0, i32 5, !dbg !3638
  %34 = load i32, i32* %clobbers_length17, align 4, !dbg !3639
  %add18 = add nsw i32 %34, %32, !dbg !3639
  store i32 %add18, i32* %clobbers_length17, align 4, !dbg !3639
  br label %for.inc, !dbg !3640

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %rsi, i32* %reg), !dbg !3585
  br label %for.cond, !dbg !3585, !llvm.loop !3641

for.end:                                          ; preds = %for.cond
  %35 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3643
  %reg_last_in_use19 = getelementptr inbounds %struct.deps, %struct.deps* %35, i32 0, i32 15, !dbg !3643
  %36 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3643
  %reg_last_in_use20 = getelementptr inbounds %struct.deps, %struct.deps* %36, i32 0, i32 15, !dbg !3643
  %call21 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %reg_last_in_use19, %struct.bitmap_head_def* %reg_last_in_use20), !dbg !3643
  %37 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3644
  %pending_read_insns = getelementptr inbounds %struct.deps, %struct.deps* %37, i32 0, i32 0, !dbg !3645
  %38 = load %struct.rtx_def*, %struct.rtx_def** %pending_read_insns, align 8, !dbg !3645
  %39 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3646
  %pending_read_mems = getelementptr inbounds %struct.deps, %struct.deps* %39, i32 0, i32 1, !dbg !3647
  %40 = load %struct.rtx_def*, %struct.rtx_def** %pending_read_mems, align 8, !dbg !3647
  %41 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3648
  %pending_read_insns22 = getelementptr inbounds %struct.deps, %struct.deps* %41, i32 0, i32 0, !dbg !3649
  %42 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3650
  %pending_read_mems23 = getelementptr inbounds %struct.deps, %struct.deps* %42, i32 0, i32 1, !dbg !3651
  call void @concat_insn_mem_list(%struct.rtx_def* %38, %struct.rtx_def* %40, %struct.rtx_def** %pending_read_insns22, %struct.rtx_def** %pending_read_mems23), !dbg !3652
  %43 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3653
  %pending_write_insns = getelementptr inbounds %struct.deps, %struct.deps* %43, i32 0, i32 2, !dbg !3654
  %44 = load %struct.rtx_def*, %struct.rtx_def** %pending_write_insns, align 8, !dbg !3654
  %45 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3655
  %pending_write_mems = getelementptr inbounds %struct.deps, %struct.deps* %45, i32 0, i32 3, !dbg !3656
  %46 = load %struct.rtx_def*, %struct.rtx_def** %pending_write_mems, align 8, !dbg !3656
  %47 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3657
  %pending_write_insns24 = getelementptr inbounds %struct.deps, %struct.deps* %47, i32 0, i32 2, !dbg !3658
  %48 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3659
  %pending_write_mems25 = getelementptr inbounds %struct.deps, %struct.deps* %48, i32 0, i32 3, !dbg !3660
  call void @concat_insn_mem_list(%struct.rtx_def* %44, %struct.rtx_def* %46, %struct.rtx_def** %pending_write_insns24, %struct.rtx_def** %pending_write_mems25), !dbg !3661
  %49 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3662
  %last_pending_memory_flush = getelementptr inbounds %struct.deps, %struct.deps* %49, i32 0, i32 7, !dbg !3663
  %50 = load %struct.rtx_def*, %struct.rtx_def** %last_pending_memory_flush, align 8, !dbg !3663
  %51 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3664
  %last_pending_memory_flush26 = getelementptr inbounds %struct.deps, %struct.deps* %51, i32 0, i32 7, !dbg !3665
  %52 = load %struct.rtx_def*, %struct.rtx_def** %last_pending_memory_flush26, align 8, !dbg !3665
  %call27 = call %struct.rtx_def* @concat_INSN_LIST(%struct.rtx_def* %50, %struct.rtx_def* %52), !dbg !3666
  %53 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3667
  %last_pending_memory_flush28 = getelementptr inbounds %struct.deps, %struct.deps* %53, i32 0, i32 7, !dbg !3668
  store %struct.rtx_def* %call27, %struct.rtx_def** %last_pending_memory_flush28, align 8, !dbg !3669
  %54 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3670
  %pending_read_list_length = getelementptr inbounds %struct.deps, %struct.deps* %54, i32 0, i32 4, !dbg !3671
  %55 = load i32, i32* %pending_read_list_length, align 8, !dbg !3671
  %56 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3672
  %pending_read_list_length29 = getelementptr inbounds %struct.deps, %struct.deps* %56, i32 0, i32 4, !dbg !3673
  %57 = load i32, i32* %pending_read_list_length29, align 8, !dbg !3674
  %add30 = add nsw i32 %57, %55, !dbg !3674
  store i32 %add30, i32* %pending_read_list_length29, align 8, !dbg !3674
  %58 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3675
  %pending_write_list_length = getelementptr inbounds %struct.deps, %struct.deps* %58, i32 0, i32 5, !dbg !3676
  %59 = load i32, i32* %pending_write_list_length, align 4, !dbg !3676
  %60 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3677
  %pending_write_list_length31 = getelementptr inbounds %struct.deps, %struct.deps* %60, i32 0, i32 5, !dbg !3678
  %61 = load i32, i32* %pending_write_list_length31, align 4, !dbg !3679
  %add32 = add nsw i32 %61, %59, !dbg !3679
  store i32 %add32, i32* %pending_write_list_length31, align 4, !dbg !3679
  %62 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3680
  %pending_flush_length = getelementptr inbounds %struct.deps, %struct.deps* %62, i32 0, i32 6, !dbg !3681
  %63 = load i32, i32* %pending_flush_length, align 8, !dbg !3681
  %64 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3682
  %pending_flush_length33 = getelementptr inbounds %struct.deps, %struct.deps* %64, i32 0, i32 6, !dbg !3683
  %65 = load i32, i32* %pending_flush_length33, align 8, !dbg !3684
  %add34 = add nsw i32 %65, %63, !dbg !3684
  store i32 %add34, i32* %pending_flush_length33, align 8, !dbg !3684
  %66 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3685
  %last_function_call = getelementptr inbounds %struct.deps, %struct.deps* %66, i32 0, i32 8, !dbg !3686
  %67 = load %struct.rtx_def*, %struct.rtx_def** %last_function_call, align 8, !dbg !3686
  %68 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3687
  %last_function_call35 = getelementptr inbounds %struct.deps, %struct.deps* %68, i32 0, i32 8, !dbg !3688
  %69 = load %struct.rtx_def*, %struct.rtx_def** %last_function_call35, align 8, !dbg !3688
  %call36 = call %struct.rtx_def* @concat_INSN_LIST(%struct.rtx_def* %67, %struct.rtx_def* %69), !dbg !3689
  %70 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3690
  %last_function_call37 = getelementptr inbounds %struct.deps, %struct.deps* %70, i32 0, i32 8, !dbg !3691
  store %struct.rtx_def* %call36, %struct.rtx_def** %last_function_call37, align 8, !dbg !3692
  %71 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3693
  %last_function_call_may_noreturn = getelementptr inbounds %struct.deps, %struct.deps* %71, i32 0, i32 9, !dbg !3694
  %72 = load %struct.rtx_def*, %struct.rtx_def** %last_function_call_may_noreturn, align 8, !dbg !3694
  %73 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3695
  %last_function_call_may_noreturn38 = getelementptr inbounds %struct.deps, %struct.deps* %73, i32 0, i32 9, !dbg !3696
  %74 = load %struct.rtx_def*, %struct.rtx_def** %last_function_call_may_noreturn38, align 8, !dbg !3696
  %call39 = call %struct.rtx_def* @concat_INSN_LIST(%struct.rtx_def* %72, %struct.rtx_def* %74), !dbg !3697
  %75 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3698
  %last_function_call_may_noreturn40 = getelementptr inbounds %struct.deps, %struct.deps* %75, i32 0, i32 9, !dbg !3699
  store %struct.rtx_def* %call39, %struct.rtx_def** %last_function_call_may_noreturn40, align 8, !dbg !3700
  %76 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !3701
  %sched_before_next_call = getelementptr inbounds %struct.deps, %struct.deps* %76, i32 0, i32 10, !dbg !3702
  %77 = load %struct.rtx_def*, %struct.rtx_def** %sched_before_next_call, align 8, !dbg !3702
  %78 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3703
  %sched_before_next_call41 = getelementptr inbounds %struct.deps, %struct.deps* %78, i32 0, i32 10, !dbg !3704
  %79 = load %struct.rtx_def*, %struct.rtx_def** %sched_before_next_call41, align 8, !dbg !3704
  %call42 = call %struct.rtx_def* @concat_INSN_LIST(%struct.rtx_def* %77, %struct.rtx_def* %79), !dbg !3705
  %80 = load %struct.deps*, %struct.deps** %succ_deps.addr, align 8, !dbg !3706
  %sched_before_next_call43 = getelementptr inbounds %struct.deps, %struct.deps* %80, i32 0, i32 10, !dbg !3707
  store %struct.rtx_def* %call42, %struct.rtx_def** %sched_before_next_call43, align 8, !dbg !3708
  ret void, !dbg !3709
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !3710 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3718, metadata !DIExpression()), !dbg !3719
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !3720, metadata !DIExpression()), !dbg !3721
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !3722, metadata !DIExpression()), !dbg !3723
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3724, metadata !DIExpression()), !dbg !3725
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !3726
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !3727
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3727
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3728
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !3729
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !3730
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3731
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !3732
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !3733
  br label %while.body, !dbg !3734

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3735
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !3738
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !3738
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !3735
  br i1 %tobool, label %if.end, label %if.then, !dbg !3739

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3740
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !3742
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !3743
  br label %while.end, !dbg !3744

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3745
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !3747
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !3747
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !3748
  %9 = load i32, i32* %indx, align 8, !dbg !3748
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !3749
  %div = udiv i32 %10, 128, !dbg !3750
  %cmp = icmp uge i32 %9, %div, !dbg !3751
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !3752

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !3753

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3754
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !3755
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !3755
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !3756
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !3756
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3757
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !3758
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !3759
  br label %while.body, !dbg !3734, !llvm.loop !3760

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3762
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !3764
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !3764
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !3765
  %17 = load i32, i32* %indx9, align 8, !dbg !3765
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !3766
  %div10 = udiv i32 %18, 128, !dbg !3767
  %cmp11 = icmp ne i32 %17, %div10, !dbg !3768
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !3769

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3770
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !3771
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !3771
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !3772
  %21 = load i32, i32* %indx14, align 8, !dbg !3772
  %mul = mul i32 %21, 128, !dbg !3773
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !3774
  br label %if.end15, !dbg !3775

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !3776
  %div16 = udiv i32 %22, 64, !dbg !3777
  %rem = urem i32 %div16, 2, !dbg !3778
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3779
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !3780
  store i32 %rem, i32* %word_no, align 8, !dbg !3781
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3782
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !3783
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !3783
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !3784
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3785
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !3786
  %27 = load i32, i32* %word_no18, align 8, !dbg !3786
  %idxprom = zext i32 %27 to i64, !dbg !3782
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !3782
  %28 = load i64, i64* %arrayidx, align 8, !dbg !3782
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3787
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !3788
  store i64 %28, i64* %bits19, align 8, !dbg !3789
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !3790
  %rem20 = urem i32 %30, 64, !dbg !3791
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3792
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !3793
  %32 = load i64, i64* %bits21, align 8, !dbg !3794
  %sh_prom = zext i32 %rem20 to i64, !dbg !3794
  %shr = lshr i64 %32, %sh_prom, !dbg !3794
  store i64 %shr, i64* %bits21, align 8, !dbg !3794
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3795
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !3796
  %34 = load i64, i64* %bits22, align 8, !dbg !3796
  %tobool23 = icmp ne i64 %34, 0, !dbg !3797
  %lnot = xor i1 %tobool23, true, !dbg !3797
  %lnot.ext = zext i1 %lnot to i32, !dbg !3797
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !3798
  %add = add i32 %35, %lnot.ext, !dbg !3798
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !3798
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !3799
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !3800
  store i32 %36, i32* %37, align 4, !dbg !3801
  ret void, !dbg !3802
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !3803 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3806, metadata !DIExpression()), !dbg !3807
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3808, metadata !DIExpression()), !dbg !3809
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3810
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !3812
  %1 = load i64, i64* %bits, align 8, !dbg !3812
  %tobool = icmp ne i64 %1, 0, !dbg !3810
  br i1 %tobool, label %if.then, label %if.end, !dbg !3813

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !3814

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !3815), !dbg !3817
  br label %while.cond, !dbg !3818

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3819
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !3820
  %3 = load i64, i64* %bits1, align 8, !dbg !3820
  %and = and i64 %3, 1, !dbg !3821
  %tobool2 = icmp ne i64 %and, 0, !dbg !3822
  %lnot = xor i1 %tobool2, true, !dbg !3822
  br i1 %lnot, label %while.body, label %while.end, !dbg !3818

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3823
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !3825
  %5 = load i64, i64* %bits3, align 8, !dbg !3826
  %shr = lshr i64 %5, 1, !dbg !3826
  store i64 %shr, i64* %bits3, align 8, !dbg !3826
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !3827
  %7 = load i32, i32* %6, align 4, !dbg !3828
  %add = add i32 %7, 1, !dbg !3828
  store i32 %add, i32* %6, align 4, !dbg !3828
  br label %while.cond, !dbg !3818, !llvm.loop !3829

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !3831
  br label %return, !dbg !3831

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !3832
  %9 = load i32, i32* %8, align 4, !dbg !3833
  %add4 = add i32 %9, 64, !dbg !3834
  %sub = sub i32 %add4, 1, !dbg !3835
  %div = udiv i32 %sub, 64, !dbg !3836
  %mul = mul i32 %div, 64, !dbg !3837
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !3838
  store i32 %mul, i32* %10, align 4, !dbg !3839
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3840
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !3841
  %12 = load i32, i32* %word_no, align 8, !dbg !3842
  %inc = add i32 %12, 1, !dbg !3842
  store i32 %inc, i32* %word_no, align 8, !dbg !3842
  br label %while.body6, !dbg !3843

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !3844

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3846
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !3847
  %14 = load i32, i32* %word_no8, align 8, !dbg !3847
  %cmp = icmp ne i32 %14, 2, !dbg !3848
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !3844

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3849
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !3851
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !3851
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !3852
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3853
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !3854
  %18 = load i32, i32* %word_no11, align 8, !dbg !3854
  %idxprom = zext i32 %18 to i64, !dbg !3849
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !3849
  %19 = load i64, i64* %arrayidx, align 8, !dbg !3849
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3855
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !3856
  store i64 %19, i64* %bits12, align 8, !dbg !3857
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3858
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !3860
  %22 = load i64, i64* %bits13, align 8, !dbg !3860
  %tobool14 = icmp ne i64 %22, 0, !dbg !3858
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !3861

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !3862

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !3863
  %24 = load i32, i32* %23, align 4, !dbg !3864
  %add17 = add i32 %24, 64, !dbg !3864
  store i32 %add17, i32* %23, align 4, !dbg !3864
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3865
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !3866
  %26 = load i32, i32* %word_no18, align 8, !dbg !3867
  %inc19 = add i32 %26, 1, !dbg !3867
  store i32 %inc19, i32* %word_no18, align 8, !dbg !3867
  br label %while.cond7, !dbg !3844, !llvm.loop !3868

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3870
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !3871
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !3871
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !3872
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !3872
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3873
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !3874
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !3875
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3876
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !3878
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !3878
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !3876
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3879

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !3880
  br label %return, !dbg !3880

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3881
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !3882
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !3882
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !3883
  %35 = load i32, i32* %indx, align 8, !dbg !3883
  %mul28 = mul i32 %35, 128, !dbg !3884
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !3885
  store i32 %mul28, i32* %36, align 4, !dbg !3886
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3887
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !3888
  store i32 0, i32* %word_no29, align 8, !dbg !3889
  br label %while.body6, !dbg !3843, !llvm.loop !3890

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !3892
  ret i8 %38, !dbg !3892
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @concat_INSN_LIST(%struct.rtx_def* %copy, %struct.rtx_def* %old) #0 !dbg !3893 {
entry:
  %copy.addr = alloca %struct.rtx_def*, align 8
  %old.addr = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %copy, %struct.rtx_def** %copy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %copy.addr, metadata !3896, metadata !DIExpression()), !dbg !3897
  store %struct.rtx_def* %old, %struct.rtx_def** %old.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old.addr, metadata !3898, metadata !DIExpression()), !dbg !3899
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !3900, metadata !DIExpression()), !dbg !3901
  %0 = load %struct.rtx_def*, %struct.rtx_def** %old.addr, align 8, !dbg !3902
  store %struct.rtx_def* %0, %struct.rtx_def** %new_rtx, align 8, !dbg !3901
  br label %for.cond, !dbg !3903

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %copy.addr, align 8, !dbg !3904
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !3907
  br i1 %tobool, label %for.body, label %for.end, !dbg !3907

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %copy.addr, align 8, !dbg !3908
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !3908
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3908
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3908
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3908
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3908
  %4 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !3909
  %call = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %3, %struct.rtx_def* %4), !dbg !3910
  store %struct.rtx_def* %call, %struct.rtx_def** %new_rtx, align 8, !dbg !3911
  br label %for.inc, !dbg !3912

for.inc:                                          ; preds = %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %copy.addr, align 8, !dbg !3913
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !3913
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !3913
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !3913
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !3913
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !3913
  store %struct.rtx_def* %6, %struct.rtx_def** %copy.addr, align 8, !dbg !3914
  br label %for.cond, !dbg !3915, !llvm.loop !3916

for.end:                                          ; preds = %for.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !3918
  ret %struct.rtx_def* %7, !dbg !3919
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !3920 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3923, metadata !DIExpression()), !dbg !3924
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3925, metadata !DIExpression()), !dbg !3926
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3927
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !3928
  %1 = load i64, i64* %bits, align 8, !dbg !3929
  %shr = lshr i64 %1, 1, !dbg !3929
  store i64 %shr, i64* %bits, align 8, !dbg !3929
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !3930
  %3 = load i32, i32* %2, align 4, !dbg !3931
  %add = add i32 %3, 1, !dbg !3931
  store i32 %add, i32* %2, align 4, !dbg !3931
  ret void, !dbg !3932
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @concat_insn_mem_list(%struct.rtx_def* %copy_insns, %struct.rtx_def* %copy_mems, %struct.rtx_def** %old_insns_p, %struct.rtx_def** %old_mems_p) #0 !dbg !3933 {
entry:
  %copy_insns.addr = alloca %struct.rtx_def*, align 8
  %copy_mems.addr = alloca %struct.rtx_def*, align 8
  %old_insns_p.addr = alloca %struct.rtx_def**, align 8
  %old_mems_p.addr = alloca %struct.rtx_def**, align 8
  %new_insns = alloca %struct.rtx_def*, align 8
  %new_mems = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %copy_insns, %struct.rtx_def** %copy_insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %copy_insns.addr, metadata !3937, metadata !DIExpression()), !dbg !3938
  store %struct.rtx_def* %copy_mems, %struct.rtx_def** %copy_mems.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %copy_mems.addr, metadata !3939, metadata !DIExpression()), !dbg !3940
  store %struct.rtx_def** %old_insns_p, %struct.rtx_def*** %old_insns_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %old_insns_p.addr, metadata !3941, metadata !DIExpression()), !dbg !3942
  store %struct.rtx_def** %old_mems_p, %struct.rtx_def*** %old_mems_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %old_mems_p.addr, metadata !3943, metadata !DIExpression()), !dbg !3944
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_insns, metadata !3945, metadata !DIExpression()), !dbg !3946
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %old_insns_p.addr, align 8, !dbg !3947
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !3948
  store %struct.rtx_def* %1, %struct.rtx_def** %new_insns, align 8, !dbg !3946
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_mems, metadata !3949, metadata !DIExpression()), !dbg !3950
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %old_mems_p.addr, align 8, !dbg !3951
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8, !dbg !3952
  store %struct.rtx_def* %3, %struct.rtx_def** %new_mems, align 8, !dbg !3950
  br label %while.cond, !dbg !3953

while.cond:                                       ; preds = %while.body, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %copy_insns.addr, align 8, !dbg !3954
  %tobool = icmp ne %struct.rtx_def* %4, null, !dbg !3953
  br i1 %tobool, label %while.body, label %while.end, !dbg !3953

while.body:                                       ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %copy_insns.addr, align 8, !dbg !3955
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !3955
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3955
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3955
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3955
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3955
  %7 = load %struct.rtx_def*, %struct.rtx_def** %new_insns, align 8, !dbg !3957
  %call = call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %6, %struct.rtx_def* %7), !dbg !3958
  store %struct.rtx_def* %call, %struct.rtx_def** %new_insns, align 8, !dbg !3959
  %8 = load %struct.rtx_def*, %struct.rtx_def** %copy_mems.addr, align 8, !dbg !3960
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !3960
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !3960
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !3960
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !3960
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !3960
  %10 = load %struct.rtx_def*, %struct.rtx_def** %new_mems, align 8, !dbg !3961
  %call5 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 0, %struct.rtx_def* %9, %struct.rtx_def* %10), !dbg !3962
  store %struct.rtx_def* %call5, %struct.rtx_def** %new_mems, align 8, !dbg !3963
  %11 = load %struct.rtx_def*, %struct.rtx_def** %copy_insns.addr, align 8, !dbg !3964
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !3964
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !3964
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !3964
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !3964
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !3964
  store %struct.rtx_def* %12, %struct.rtx_def** %copy_insns.addr, align 8, !dbg !3965
  %13 = load %struct.rtx_def*, %struct.rtx_def** %copy_mems.addr, align 8, !dbg !3966
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !3966
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !3966
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 1, !dbg !3966
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !3966
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !3966
  store %struct.rtx_def* %14, %struct.rtx_def** %copy_mems.addr, align 8, !dbg !3967
  br label %while.cond, !dbg !3953, !llvm.loop !3968

while.end:                                        ; preds = %while.cond
  %15 = load %struct.rtx_def*, %struct.rtx_def** %new_insns, align 8, !dbg !3970
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %old_insns_p.addr, align 8, !dbg !3971
  store %struct.rtx_def* %15, %struct.rtx_def** %16, align 8, !dbg !3972
  %17 = load %struct.rtx_def*, %struct.rtx_def** %new_mems, align 8, !dbg !3973
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %old_mems_p.addr, align 8, !dbg !3974
  store %struct.rtx_def* %17, %struct.rtx_def** %18, align 8, !dbg !3975
  ret void, !dbg !3976
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_rgn_dependencies(i32 %from_bb) #0 !dbg !3977 {
entry:
  %from_bb.addr = alloca i32, align 4
  %bb = alloca i32, align 4
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  store i32 %from_bb, i32* %from_bb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from_bb.addr, metadata !3978, metadata !DIExpression()), !dbg !3979
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !3980, metadata !DIExpression()), !dbg !3981
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !3982
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.22, i64 0, i64 0)), !dbg !3983
  %1 = load i32, i32* %from_bb.addr, align 4, !dbg !3984
  store i32 %1, i32* %bb, align 4, !dbg !3986
  br label %for.cond, !dbg !3987

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %bb, align 4, !dbg !3988
  %3 = load i32, i32* @current_nr_blocks, align 4, !dbg !3990
  %cmp = icmp slt i32 %2, %3, !dbg !3991
  br i1 %cmp, label %for.body, label %for.end, !dbg !3992

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !3993, metadata !DIExpression()), !dbg !3995
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !3996, metadata !DIExpression()), !dbg !3997
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3998
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3998
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3998
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3998
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 2, !dbg !3998
  %6 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !3998
  %tobool = icmp ne %struct.VEC_basic_block_gc* %6, null, !dbg !3998
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3998

cond.true:                                        ; preds = %for.body
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3998
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3998
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3998
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3998
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 2, !dbg !3998
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !3998
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %9, i32 0, i32 0, !dbg !3998
  br label %cond.end, !dbg !3998

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3998

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3998
  %10 = load i32*, i32** @rgn_bb_table, align 8, !dbg !3998
  %11 = load i32*, i32** @ebb_head, align 8, !dbg !3998
  %12 = load i32, i32* %bb, align 4, !dbg !3998
  %idxprom = sext i32 %12 to i64, !dbg !3998
  %arrayidx = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !3998
  %13 = load i32, i32* %arrayidx, align 4, !dbg !3998
  %idxprom4 = sext i32 %13 to i64, !dbg !3998
  %arrayidx5 = getelementptr inbounds i32, i32* %10, i64 %idxprom4, !dbg !3998
  %14 = load i32, i32* %arrayidx5, align 4, !dbg !3998
  %call6 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %14), !dbg !3998
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3999
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !3999
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !3999
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !3999
  %x_basic_block_info9 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 2, !dbg !3999
  %17 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info9, align 8, !dbg !3999
  %tobool10 = icmp ne %struct.VEC_basic_block_gc* %17, null, !dbg !3999
  br i1 %tobool10, label %cond.true11, label %cond.false16, !dbg !3999

cond.true11:                                      ; preds = %cond.end
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3999
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !3999
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !3999
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !3999
  %x_basic_block_info14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 2, !dbg !3999
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info14, align 8, !dbg !3999
  %base15 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %20, i32 0, i32 0, !dbg !3999
  br label %cond.end17, !dbg !3999

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17, !dbg !3999

cond.end17:                                       ; preds = %cond.false16, %cond.true11
  %cond18 = phi %struct.VEC_basic_block_base* [ %base15, %cond.true11 ], [ null, %cond.false16 ], !dbg !3999
  %21 = load i32*, i32** @rgn_bb_table, align 8, !dbg !3999
  %22 = load i32*, i32** @ebb_head, align 8, !dbg !3999
  %23 = load i32, i32* %bb, align 4, !dbg !3999
  %add = add nsw i32 %23, 1, !dbg !3999
  %idxprom19 = sext i32 %add to i64, !dbg !3999
  %arrayidx20 = getelementptr inbounds i32, i32* %22, i64 %idxprom19, !dbg !3999
  %24 = load i32, i32* %arrayidx20, align 4, !dbg !3999
  %sub = sub nsw i32 %24, 1, !dbg !3999
  %idxprom21 = sext i32 %sub to i64, !dbg !3999
  %arrayidx22 = getelementptr inbounds i32, i32* %21, i64 %idxprom21, !dbg !3999
  %25 = load i32, i32* %arrayidx22, align 4, !dbg !3999
  %call23 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond18, i32 %25), !dbg !3999
  call void @get_ebb_head_tail(%struct.basic_block_def* %call6, %struct.basic_block_def* %call23, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !4000
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4001
  %27 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4002
  %28 = load i32*, i32** @ebb_head, align 8, !dbg !4002
  %29 = load i32, i32* %bb, align 4, !dbg !4002
  %idxprom24 = sext i32 %29 to i64, !dbg !4002
  %arrayidx25 = getelementptr inbounds i32, i32* %28, i64 %idxprom24, !dbg !4002
  %30 = load i32, i32* %arrayidx25, align 4, !dbg !4002
  %idxprom26 = sext i32 %30 to i64, !dbg !4002
  %arrayidx27 = getelementptr inbounds i32, i32* %27, i64 %idxprom26, !dbg !4002
  %31 = load i32, i32* %arrayidx27, align 4, !dbg !4002
  %32 = load i32, i32* %bb, align 4, !dbg !4003
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.23, i64 0, i64 0), i32 %31, i32 %32), !dbg !4004
  %33 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4005
  %34 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4006
  call void @debug_dependencies(%struct.rtx_def* %33, %struct.rtx_def* %34), !dbg !4007
  br label %for.inc, !dbg !4008

for.inc:                                          ; preds = %cond.end17
  %35 = load i32, i32* %bb, align 4, !dbg !4009
  %inc = add nsw i32 %35, 1, !dbg !4009
  store i32 %inc, i32* %bb, align 4, !dbg !4009
  br label %for.cond, !dbg !4010, !llvm.loop !4011

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4013
}

declare dso_local void @get_ebb_head_tail(%struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def**, %struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_dependencies(%struct.rtx_def* %head, %struct.rtx_def* %tail) #0 !dbg !4014 {
entry:
  %head.addr = alloca %struct.rtx_def*, align 8
  %tail.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next_tail = alloca %struct.rtx_def*, align 8
  %n = alloca i32, align 4
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !4015, metadata !DIExpression()), !dbg !4016
  store %struct.rtx_def* %tail, %struct.rtx_def** %tail.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail.addr, metadata !4017, metadata !DIExpression()), !dbg !4018
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4019, metadata !DIExpression()), !dbg !4020
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next_tail, metadata !4021, metadata !DIExpression()), !dbg !4022
  %0 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !4023
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4023
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4023
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4023
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4023
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4023
  store %struct.rtx_def* %1, %struct.rtx_def** %next_tail, align 8, !dbg !4022
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4024
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0)), !dbg !4025
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4026
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i64 0, i64 0)), !dbg !4027
  %4 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !4028
  store %struct.rtx_def* %4, %struct.rtx_def** %insn, align 8, !dbg !4030
  br label %for.cond, !dbg !4031

for.cond:                                         ; preds = %for.inc116, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4032
  %6 = load %struct.rtx_def*, %struct.rtx_def** %next_tail, align 8, !dbg !4034
  %cmp = icmp ne %struct.rtx_def* %5, %6, !dbg !4035
  br i1 %cmp, label %for.body, label %for.end121, !dbg !4036

for.body:                                         ; preds = %for.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4037
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4037
  %bf.load = load i32, i32* %8, align 8, !dbg !4037
  %bf.clear = and i32 %bf.load, 65535, !dbg !4037
  %cmp2 = icmp eq i32 %bf.clear, 8, !dbg !4037
  br i1 %cmp2, label %if.end33, label %lor.lhs.false, !dbg !4037

lor.lhs.false:                                    ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4037
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4037
  %bf.load3 = load i32, i32* %10, align 8, !dbg !4037
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !4037
  %cmp5 = icmp eq i32 %bf.clear4, 7, !dbg !4037
  br i1 %cmp5, label %if.end33, label %lor.lhs.false6, !dbg !4037

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4037
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !4037
  %bf.load7 = load i32, i32* %12, align 8, !dbg !4037
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !4037
  %cmp9 = icmp eq i32 %bf.clear8, 9, !dbg !4037
  br i1 %cmp9, label %if.end33, label %lor.lhs.false10, !dbg !4037

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4037
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !4037
  %bf.load11 = load i32, i32* %14, align 8, !dbg !4037
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !4037
  %cmp13 = icmp eq i32 %bf.clear12, 10, !dbg !4037
  br i1 %cmp13, label %if.end33, label %if.then, !dbg !4040

if.then:                                          ; preds = %lor.lhs.false10
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4041, metadata !DIExpression()), !dbg !4043
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4044
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4045
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !4045
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !4045
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !4045
  %rt_int = bitcast %union.rtunion_def* %arrayidx16 to i32*, !dbg !4045
  %17 = load i32, i32* %rt_int, align 8, !dbg !4045
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i64 0, i64 0), i32 %17), !dbg !4046
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4047
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !4047
  %bf.load18 = load i32, i32* %19, align 8, !dbg !4047
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !4047
  %cmp20 = icmp eq i32 %bf.clear19, 13, !dbg !4047
  br i1 %cmp20, label %if.then21, label %if.else, !dbg !4049

if.then21:                                        ; preds = %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4050
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4050
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !4050
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 5, !dbg !4050
  %rt_int25 = bitcast %union.rtunion_def* %arrayidx24 to i32*, !dbg !4050
  %21 = load i32, i32* %rt_int25, align 8, !dbg !4050
  store i32 %21, i32* %n, align 4, !dbg !4052
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4053
  %23 = load i32, i32* %n, align 4, !dbg !4054
  %idxprom = sext i32 %23 to i64, !dbg !4054
  %arrayidx26 = getelementptr inbounds [13 x i8*], [13 x i8*]* @note_insn_name, i64 0, i64 %idxprom, !dbg !4054
  %24 = load i8*, i8** %arrayidx26, align 8, !dbg !4054
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i8* %24), !dbg !4055
  br label %if.end, !dbg !4056

if.else:                                          ; preds = %if.then
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4057
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4058
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !4058
  %bf.load28 = load i32, i32* %27, align 8, !dbg !4058
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !4058
  %idxprom30 = sext i32 %bf.clear29 to i64, !dbg !4058
  %arrayidx31 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_name, i64 0, i64 %idxprom30, !dbg !4058
  %28 = load i8*, i8** %arrayidx31, align 8, !dbg !4058
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38, i64 0, i64 0), i8* %28), !dbg !4059
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then21
  br label %for.inc116, !dbg !4060

if.end33:                                         ; preds = %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false, %for.body
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4061
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4062
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !4062
  %bf.load34 = load i32, i32* %31, align 8, !dbg !4062
  %bf.lshr = lshr i32 %bf.load34, 28, !dbg !4062
  %bf.clear35 = and i32 %bf.lshr, 1, !dbg !4062
  %tobool = icmp ne i32 %bf.clear35, 0, !dbg !4062
  %32 = zext i1 %tobool to i64, !dbg !4062
  %cond = select i1 %tobool, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i64 0, i64 0), !dbg !4062
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4063
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4063
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !4063
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !4063
  %rt_int39 = bitcast %union.rtunion_def* %arrayidx38 to i32*, !dbg !4063
  %34 = load i32, i32* %rt_int39, align 8, !dbg !4063
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4064
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !4064
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !4064
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 6, !dbg !4064
  %rt_int43 = bitcast %union.rtunion_def* %arrayidx42 to i32*, !dbg !4064
  %36 = load i32, i32* %rt_int43, align 8, !dbg !4064
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4065
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !4065
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !4065
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 3, !dbg !4065
  %rt_bb = bitcast %union.rtunion_def* %arrayidx46 to %struct.basic_block_def**, !dbg !4065
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4065
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 9, !dbg !4065
  %39 = load i32, i32* %index, align 8, !dbg !4065
  %add = add nsw i32 %39, 0, !dbg !4065
  %40 = load i32, i32* @sched_emulate_haifa_p, align 4, !dbg !4066
  %tobool47 = icmp ne i32 %40, 0, !dbg !4066
  br i1 %tobool47, label %cond.true, label %cond.false, !dbg !4066

cond.true:                                        ; preds = %if.end33
  br label %cond.end, !dbg !4066

cond.false:                                       ; preds = %if.end33
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4067
  %call48 = call i32 @sd_lists_size(%struct.rtx_def* %41, i32 3), !dbg !4068
  br label %cond.end, !dbg !4066

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond49 = phi i32 [ -1, %cond.true ], [ %call48, %cond.false ], !dbg !4066
  %call50 = call zeroext i8 @sel_sched_p(), !dbg !4069
  %conv = zext i8 %call50 to i32, !dbg !4069
  %tobool51 = icmp ne i32 %conv, 0, !dbg !4069
  br i1 %tobool51, label %cond.true52, label %cond.false68, !dbg !4069

cond.true52:                                      ; preds = %cond.end
  %42 = load i32, i32* @sched_emulate_haifa_p, align 4, !dbg !4070
  %tobool53 = icmp ne i32 %42, 0, !dbg !4070
  br i1 %tobool53, label %cond.true54, label %cond.false55, !dbg !4070

cond.true54:                                      ; preds = %cond.true52
  br label %cond.end66, !dbg !4070

cond.false55:                                     ; preds = %cond.true52
  %43 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4071
  %tobool56 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %43, null, !dbg !4071
  br i1 %tobool56, label %cond.true57, label %cond.false58, !dbg !4071

cond.true57:                                      ; preds = %cond.false55
  %44 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4071
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %44, i32 0, i32 0, !dbg !4071
  br label %cond.end59, !dbg !4071

cond.false58:                                     ; preds = %cond.false55
  br label %cond.end59, !dbg !4071

cond.end59:                                       ; preds = %cond.false58, %cond.true57
  %cond60 = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true57 ], [ null, %cond.false58 ], !dbg !4071
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4071
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !4071
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !4071
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 0, !dbg !4071
  %rt_int64 = bitcast %union.rtunion_def* %arrayidx63 to i32*, !dbg !4071
  %46 = load i32, i32* %rt_int64, align 8, !dbg !4071
  %call65 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond60, i32 %46), !dbg !4071
  %priority = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call65, i32 0, i32 1, !dbg !4071
  %47 = load i32, i32* %priority, align 4, !dbg !4071
  br label %cond.end66, !dbg !4070

cond.end66:                                       ; preds = %cond.end59, %cond.true54
  %cond67 = phi i32 [ -1, %cond.true54 ], [ %47, %cond.end59 ], !dbg !4070
  br label %cond.end81, !dbg !4069

cond.false68:                                     ; preds = %cond.end
  %48 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4072
  %tobool69 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %48, null, !dbg !4072
  br i1 %tobool69, label %cond.true70, label %cond.false72, !dbg !4072

cond.true70:                                      ; preds = %cond.false68
  %49 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !4072
  %base71 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %49, i32 0, i32 0, !dbg !4072
  br label %cond.end73, !dbg !4072

cond.false72:                                     ; preds = %cond.false68
  br label %cond.end73, !dbg !4072

cond.end73:                                       ; preds = %cond.false72, %cond.true70
  %cond74 = phi %struct.VEC_haifa_insn_data_def_base* [ %base71, %cond.true70 ], [ null, %cond.false72 ], !dbg !4072
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4072
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !4072
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !4072
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 0, !dbg !4072
  %rt_int78 = bitcast %union.rtunion_def* %arrayidx77 to i32*, !dbg !4072
  %51 = load i32, i32* %rt_int78, align 8, !dbg !4072
  %call79 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond74, i32 %51), !dbg !4072
  %priority80 = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call79, i32 0, i32 1, !dbg !4072
  %52 = load i32, i32* %priority80, align 4, !dbg !4072
  br label %cond.end81, !dbg !4069

cond.end81:                                       ; preds = %cond.end73, %cond.end66
  %cond82 = phi i32 [ %cond67, %cond.end66 ], [ %52, %cond.end73 ], !dbg !4069
  %call83 = call zeroext i8 @sel_sched_p(), !dbg !4073
  %conv84 = zext i8 %call83 to i32, !dbg !4073
  %tobool85 = icmp ne i32 %conv84, 0, !dbg !4073
  br i1 %tobool85, label %cond.true86, label %cond.false93, !dbg !4073

cond.true86:                                      ; preds = %cond.end81
  %53 = load i32, i32* @sched_emulate_haifa_p, align 4, !dbg !4074
  %tobool87 = icmp ne i32 %53, 0, !dbg !4074
  br i1 %tobool87, label %cond.true88, label %cond.false89, !dbg !4074

cond.true88:                                      ; preds = %cond.true86
  br label %cond.end91, !dbg !4074

cond.false89:                                     ; preds = %cond.true86
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4075
  %call90 = call i32 @insn_cost(%struct.rtx_def* %54), !dbg !4076
  br label %cond.end91, !dbg !4074

cond.end91:                                       ; preds = %cond.false89, %cond.true88
  %cond92 = phi i32 [ -1, %cond.true88 ], [ %call90, %cond.false89 ], !dbg !4074
  br label %cond.end95, !dbg !4073

cond.false93:                                     ; preds = %cond.end81
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4077
  %call94 = call i32 @insn_cost(%struct.rtx_def* %55), !dbg !4078
  br label %cond.end95, !dbg !4073

cond.end95:                                       ; preds = %cond.false93, %cond.end91
  %cond96 = phi i32 [ %cond92, %cond.end91 ], [ %call94, %cond.false93 ], !dbg !4073
  %call97 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.39, i64 0, i64 0), i8* %cond, i32 %34, i32 %36, i32 %add, i32 %cond49, i32 %cond82, i32 %cond96), !dbg !4079
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4080
  %call98 = call i32 @recog_memoized(%struct.rtx_def* %56), !dbg !4082
  %cmp99 = icmp slt i32 %call98, 0, !dbg !4083
  br i1 %cmp99, label %if.then101, label %if.else103, !dbg !4084

if.then101:                                       ; preds = %cond.end95
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4085
  %call102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0)), !dbg !4086
  br label %if.end104, !dbg !4086

if.else103:                                       ; preds = %cond.end95
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4087
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4088
  call void @print_reservation(%struct._IO_FILE* %58, %struct.rtx_def* %59), !dbg !4089
  br label %if.end104

if.end104:                                        ; preds = %if.else103, %if.then101
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4090
  %call105 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i64 0, i64 0)), !dbg !4091
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !4092, metadata !DIExpression()), !dbg !4094
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !4095, metadata !DIExpression()), !dbg !4099
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4100
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %61, i32 4), !dbg !4100
  %62 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !4100
  %63 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !4100
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 32, i1 false), !dbg !4100
  br label %for.cond106, !dbg !4100

for.cond106:                                      ; preds = %for.inc, %if.end104
  %call107 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !4102
  %tobool108 = icmp ne i8 %call107, 0, !dbg !4100
  br i1 %tobool108, label %for.body109, label %for.end, !dbg !4100

for.body109:                                      ; preds = %for.cond106
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4104
  %65 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !4105
  %con = getelementptr inbounds %struct._dep, %struct._dep* %65, i32 0, i32 1, !dbg !4105
  %66 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !4105
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !4105
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !4105
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 0, !dbg !4105
  %rt_int113 = bitcast %union.rtunion_def* %arrayidx112 to i32*, !dbg !4105
  %67 = load i32, i32* %rt_int113, align 8, !dbg !4105
  %call114 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i64 0, i64 0), i32 %67), !dbg !4106
  br label %for.inc, !dbg !4106

for.inc:                                          ; preds = %for.body109
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !4102
  br label %for.cond106, !dbg !4102, !llvm.loop !4107

for.end:                                          ; preds = %for.cond106
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4109
  %call115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !4110
  br label %for.inc116, !dbg !4111

for.inc116:                                       ; preds = %for.end, %if.end
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4112
  %u117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !4112
  %fld118 = bitcast %union.u* %u117 to [1 x %union.rtunion_def]*, !dbg !4112
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i64 0, i64 2, !dbg !4112
  %rt_rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**, !dbg !4112
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx120, align 8, !dbg !4112
  store %struct.rtx_def* %70, %struct.rtx_def** %insn, align 8, !dbg !4113
  br label %for.cond, !dbg !4114, !llvm.loop !4115

for.end121:                                       ; preds = %for.cond
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4117
  %call122 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !4118
  ret void, !dbg !4119
}

declare dso_local i32 @sd_lists_size(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sel_sched_p() #0 !dbg !4120 {
entry:
  %0 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !4121
  %sched_pass_id = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %0, i32 0, i32 4, !dbg !4122
  %1 = load i32, i32* %sched_pass_id, align 8, !dbg !4122
  %cmp = icmp eq i32 %1, 4, !dbg !4123
  %conv = zext i1 %cmp to i32, !dbg !4123
  %conv1 = trunc i32 %conv to i8, !dbg !4121
  ret i8 %conv1, !dbg !4124
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %vec_, i32 %ix_) #0 !dbg !4125 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_haifa_insn_data_def_base* %vec_, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_base** %vec_.addr, metadata !4180, metadata !DIExpression()), !dbg !4181
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4182, metadata !DIExpression()), !dbg !4181
  %0 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !4181
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_base* %0, null, !dbg !4181
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4181

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4181
  %2 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !4181
  %num = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %2, i32 0, i32 0, !dbg !4181
  %3 = load i32, i32* %num, align 8, !dbg !4181
  %cmp = icmp ult i32 %1, %3, !dbg !4181
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4183
  %land.ext = zext i1 %4 to i32, !dbg !4181
  %5 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !4181
  %vec = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %5, i32 0, i32 2, !dbg !4181
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4181
  %idxprom = zext i32 %6 to i64, !dbg !4181
  %arrayidx = getelementptr inbounds [1 x %struct._haifa_insn_data], [1 x %struct._haifa_insn_data]* %vec, i64 0, i64 %idxprom, !dbg !4181
  ret %struct._haifa_insn_data* %arrayidx, !dbg !4181
}

declare dso_local i32 @insn_cost(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @recog_memoized(%struct.rtx_def* %insn) #0 !dbg !4184 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4186, metadata !DIExpression()), !dbg !4187
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4188
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4188
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4188
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !4188
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4188
  %1 = load i32, i32* %rt_int, align 8, !dbg !4188
  %cmp = icmp slt i32 %1, 0, !dbg !4190
  br i1 %cmp, label %if.then, label %if.end, !dbg !4191

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4192
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4192
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !4192
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !4192
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !4192
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4192
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4193
  %call = call i32 @recog(%struct.rtx_def* %3, %struct.rtx_def* %4, i32* null), !dbg !4194
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4195
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4195
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !4195
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !4195
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !4195
  store i32 %call, i32* %rt_int7, align 8, !dbg !4196
  br label %if.end, !dbg !4195

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4197
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4197
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !4197
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 6, !dbg !4197
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !4197
  %7 = load i32, i32* %rt_int11, align 8, !dbg !4197
  ret i32 %7, !dbg !4198
}

declare dso_local void @print_reservation(%struct._IO_FILE*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sd_iterator_start(%struct._sd_iterator* noalias sret %agg.result, %struct.rtx_def* %insn, i32 %types) #0 !dbg !2399 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %types.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4199, metadata !DIExpression()), !dbg !4200
  store i32 %types, i32* %types.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %types.addr, metadata !4201, metadata !DIExpression()), !dbg !4202
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %agg.result, metadata !4203, metadata !DIExpression()), !dbg !4204
  %0 = load i32, i32* %types.addr, align 4, !dbg !4205
  %types1 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %agg.result, i32 0, i32 0, !dbg !4206
  store i32 %0, i32* %types1, align 8, !dbg !4207
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4208
  %insn2 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %agg.result, i32 0, i32 1, !dbg !4209
  store %struct.rtx_def* %1, %struct.rtx_def** %insn2, align 8, !dbg !4210
  %linkp = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %agg.result, i32 0, i32 2, !dbg !4211
  store %struct._dep_link** @sd_iterator_start.null_link, %struct._dep_link*** %linkp, align 8, !dbg !4212
  %resolved_p = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %agg.result, i32 0, i32 3, !dbg !4213
  store i8 0, i8* %resolved_p, align 8, !dbg !4214
  ret void, !dbg !4215
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %it_ptr, %struct._dep** %dep_ptr) #0 !dbg !4216 {
entry:
  %retval = alloca i8, align 1
  %it_ptr.addr = alloca %struct._sd_iterator*, align 8
  %dep_ptr.addr = alloca %struct._dep**, align 8
  %link = alloca %struct._dep_link*, align 8
  %types = alloca i32, align 4
  %list = alloca %struct._deps_list*, align 8
  store %struct._sd_iterator* %it_ptr, %struct._sd_iterator** %it_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._sd_iterator** %it_ptr.addr, metadata !4221, metadata !DIExpression()), !dbg !4222
  store %struct._dep** %dep_ptr, %struct._dep*** %dep_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._dep*** %dep_ptr.addr, metadata !4223, metadata !DIExpression()), !dbg !4224
  call void @llvm.dbg.declare(metadata %struct._dep_link** %link, metadata !4225, metadata !DIExpression()), !dbg !4226
  %0 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !4227
  %linkp = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %0, i32 0, i32 2, !dbg !4228
  %1 = load %struct._dep_link**, %struct._dep_link*** %linkp, align 8, !dbg !4228
  %2 = load %struct._dep_link*, %struct._dep_link** %1, align 8, !dbg !4229
  store %struct._dep_link* %2, %struct._dep_link** %link, align 8, !dbg !4226
  %3 = load %struct._dep_link*, %struct._dep_link** %link, align 8, !dbg !4230
  %cmp = icmp ne %struct._dep_link* %3, null, !dbg !4232
  br i1 %cmp, label %if.then, label %if.else, !dbg !4233

if.then:                                          ; preds = %entry
  %4 = load %struct._dep_link*, %struct._dep_link** %link, align 8, !dbg !4234
  %node = getelementptr inbounds %struct._dep_link, %struct._dep_link* %4, i32 0, i32 0, !dbg !4234
  %5 = load %struct._dep_node*, %struct._dep_node** %node, align 8, !dbg !4234
  %dep = getelementptr inbounds %struct._dep_node, %struct._dep_node* %5, i32 0, i32 1, !dbg !4234
  %6 = load %struct._dep**, %struct._dep*** %dep_ptr.addr, align 8, !dbg !4236
  store %struct._dep* %dep, %struct._dep** %6, align 8, !dbg !4237
  store i8 1, i8* %retval, align 1, !dbg !4238
  br label %return, !dbg !4238

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %types, metadata !4239, metadata !DIExpression()), !dbg !4241
  %7 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !4242
  %types1 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %7, i32 0, i32 0, !dbg !4243
  %8 = load i32, i32* %types1, align 8, !dbg !4243
  store i32 %8, i32* %types, align 4, !dbg !4241
  %9 = load i32, i32* %types, align 4, !dbg !4244
  %cmp2 = icmp ne i32 %9, 0, !dbg !4246
  br i1 %cmp2, label %if.then3, label %if.end7, !dbg !4247

if.then3:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct._deps_list** %list, metadata !4248, metadata !DIExpression()), !dbg !4256
  %10 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !4257
  %insn = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %10, i32 0, i32 1, !dbg !4258
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4258
  %12 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !4259
  %types4 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %12, i32 0, i32 0, !dbg !4260
  %13 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !4261
  %resolved_p = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %13, i32 0, i32 3, !dbg !4262
  call void @sd_next_list(%struct.rtx_def* %11, i32* %types4, %struct._deps_list** %list, i8* %resolved_p), !dbg !4263
  %14 = load %struct._deps_list*, %struct._deps_list** %list, align 8, !dbg !4264
  %first = getelementptr inbounds %struct._deps_list, %struct._deps_list* %14, i32 0, i32 0, !dbg !4264
  %15 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !4265
  %linkp5 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %15, i32 0, i32 2, !dbg !4266
  store %struct._dep_link** %first, %struct._dep_link*** %linkp5, align 8, !dbg !4267
  %16 = load %struct._deps_list*, %struct._deps_list** %list, align 8, !dbg !4268
  %tobool = icmp ne %struct._deps_list* %16, null, !dbg !4268
  br i1 %tobool, label %if.then6, label %if.end, !dbg !4270

if.then6:                                         ; preds = %if.then3
  %17 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !4271
  %18 = load %struct._dep**, %struct._dep*** %dep_ptr.addr, align 8, !dbg !4272
  %call = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %17, %struct._dep** %18), !dbg !4273
  store i8 %call, i8* %retval, align 1, !dbg !4274
  br label %return, !dbg !4274

if.end:                                           ; preds = %if.then3
  br label %if.end7, !dbg !4275

if.end7:                                          ; preds = %if.end, %if.else
  %19 = load %struct._dep**, %struct._dep*** %dep_ptr.addr, align 8, !dbg !4276
  store %struct._dep* null, %struct._dep** %19, align 8, !dbg !4277
  store i8 0, i8* %retval, align 1, !dbg !4278
  br label %return, !dbg !4278

return:                                           ; preds = %if.end7, %if.then6, %if.then
  %20 = load i8, i8* %retval, align 1, !dbg !4279
  ret i8 %20, !dbg !4279
}

; Function Attrs: noinline nounwind uwtable
define internal void @sd_iterator_next(%struct._sd_iterator* %it_ptr) #0 !dbg !4280 {
entry:
  %it_ptr.addr = alloca %struct._sd_iterator*, align 8
  store %struct._sd_iterator* %it_ptr, %struct._sd_iterator** %it_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._sd_iterator** %it_ptr.addr, metadata !4283, metadata !DIExpression()), !dbg !4284
  %0 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !4285
  %linkp = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %0, i32 0, i32 2, !dbg !4285
  %1 = load %struct._dep_link**, %struct._dep_link*** %linkp, align 8, !dbg !4285
  %2 = load %struct._dep_link*, %struct._dep_link** %1, align 8, !dbg !4285
  %next = getelementptr inbounds %struct._dep_link, %struct._dep_link* %2, i32 0, i32 1, !dbg !4285
  %3 = load %struct._sd_iterator*, %struct._sd_iterator** %it_ptr.addr, align 8, !dbg !4286
  %linkp1 = getelementptr inbounds %struct._sd_iterator, %struct._sd_iterator* %3, i32 0, i32 2, !dbg !4287
  store %struct._dep_link** %next, %struct._dep_link*** %linkp1, align 8, !dbg !4288
  ret void, !dbg !4289
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sched_is_disabled_for_current_region_p() #0 !dbg !4290 {
entry:
  %retval = alloca i8, align 1
  %bb = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !4291, metadata !DIExpression()), !dbg !4292
  store i32 0, i32* %bb, align 4, !dbg !4293
  br label %for.cond, !dbg !4295

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %bb, align 4, !dbg !4296
  %1 = load i32, i32* @current_nr_blocks, align 4, !dbg !4298
  %cmp = icmp slt i32 %0, %1, !dbg !4299
  br i1 %cmp, label %for.body, label %for.end, !dbg !4300

for.body:                                         ; preds = %for.cond
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4301
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4301
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4301
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4301
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 2, !dbg !4301
  %4 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4301
  %tobool = icmp ne %struct.VEC_basic_block_gc* %4, null, !dbg !4301
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4301

cond.true:                                        ; preds = %for.body
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4301
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4301
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4301
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4301
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 2, !dbg !4301
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !4301
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %7, i32 0, i32 0, !dbg !4301
  br label %cond.end, !dbg !4301

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4301

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4301
  %8 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4301
  %9 = load i32*, i32** @ebb_head, align 8, !dbg !4301
  %10 = load i32, i32* %bb, align 4, !dbg !4301
  %idxprom = sext i32 %10 to i64, !dbg !4301
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !4301
  %11 = load i32, i32* %arrayidx, align 4, !dbg !4301
  %idxprom4 = sext i32 %11 to i64, !dbg !4301
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i64 %idxprom4, !dbg !4301
  %12 = load i32, i32* %arrayidx5, align 4, !dbg !4301
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %12), !dbg !4301
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 13, !dbg !4303
  %13 = load i32, i32* %flags, align 8, !dbg !4303
  %and = and i32 %13, 16, !dbg !4304
  %tobool6 = icmp ne i32 %and, 0, !dbg !4304
  br i1 %tobool6, label %if.end, label %if.then, !dbg !4305

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !4306
  br label %return, !dbg !4306

if.end:                                           ; preds = %cond.end
  br label %for.inc, !dbg !4307

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %bb, align 4, !dbg !4308
  %inc = add nsw i32 %14, 1, !dbg !4308
  store i32 %inc, i32* %bb, align 4, !dbg !4308
  br label %for.cond, !dbg !4309, !llvm.loop !4310

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4312
  br label %return, !dbg !4312

return:                                           ; preds = %for.end, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !4313
  ret i8 %15, !dbg !4313
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_rgn_deps() #0 !dbg !4314 {
entry:
  %bb = alloca i32, align 4
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !4315, metadata !DIExpression()), !dbg !4316
  store i32 0, i32* %bb, align 4, !dbg !4317
  br label %for.cond, !dbg !4319

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %bb, align 4, !dbg !4320
  %1 = load i32, i32* @current_nr_blocks, align 4, !dbg !4322
  %cmp = icmp slt i32 %0, %1, !dbg !4323
  br i1 %cmp, label %for.body, label %for.end, !dbg !4324

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !4325, metadata !DIExpression()), !dbg !4327
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !4328, metadata !DIExpression()), !dbg !4329
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4330
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4330
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4330
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4330
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 2, !dbg !4330
  %4 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4330
  %tobool = icmp ne %struct.VEC_basic_block_gc* %4, null, !dbg !4330
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4330

cond.true:                                        ; preds = %for.body
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4330
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4330
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4330
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4330
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 2, !dbg !4330
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !4330
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %7, i32 0, i32 0, !dbg !4330
  br label %cond.end, !dbg !4330

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4330

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4330
  %8 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4330
  %9 = load i32*, i32** @ebb_head, align 8, !dbg !4330
  %10 = load i32, i32* %bb, align 4, !dbg !4330
  %idxprom = sext i32 %10 to i64, !dbg !4330
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !4330
  %11 = load i32, i32* %arrayidx, align 4, !dbg !4330
  %idxprom4 = sext i32 %11 to i64, !dbg !4330
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i64 %idxprom4, !dbg !4330
  %12 = load i32, i32* %arrayidx5, align 4, !dbg !4330
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %12), !dbg !4330
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4330
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !4330
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !4330
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !4330
  %x_basic_block_info8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 2, !dbg !4330
  %15 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info8, align 8, !dbg !4330
  %tobool9 = icmp ne %struct.VEC_basic_block_gc* %15, null, !dbg !4330
  br i1 %tobool9, label %cond.true10, label %cond.false15, !dbg !4330

cond.true10:                                      ; preds = %cond.end
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4330
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !4330
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !4330
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !4330
  %x_basic_block_info13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 2, !dbg !4330
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info13, align 8, !dbg !4330
  %base14 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %18, i32 0, i32 0, !dbg !4330
  br label %cond.end16, !dbg !4330

cond.false15:                                     ; preds = %cond.end
  br label %cond.end16, !dbg !4330

cond.end16:                                       ; preds = %cond.false15, %cond.true10
  %cond17 = phi %struct.VEC_basic_block_base* [ %base14, %cond.true10 ], [ null, %cond.false15 ], !dbg !4330
  %19 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4330
  %20 = load i32*, i32** @ebb_head, align 8, !dbg !4330
  %21 = load i32, i32* %bb, align 4, !dbg !4330
  %add = add nsw i32 %21, 1, !dbg !4330
  %idxprom18 = sext i32 %add to i64, !dbg !4330
  %arrayidx19 = getelementptr inbounds i32, i32* %20, i64 %idxprom18, !dbg !4330
  %22 = load i32, i32* %arrayidx19, align 4, !dbg !4330
  %sub = sub nsw i32 %22, 1, !dbg !4330
  %idxprom20 = sext i32 %sub to i64, !dbg !4330
  %arrayidx21 = getelementptr inbounds i32, i32* %19, i64 %idxprom20, !dbg !4330
  %23 = load i32, i32* %arrayidx21, align 4, !dbg !4330
  %call22 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond17, i32 %23), !dbg !4330
  %cmp23 = icmp eq %struct.basic_block_def* %call, %call22, !dbg !4330
  br i1 %cmp23, label %cond.false25, label %cond.true24, !dbg !4330

cond.true24:                                      ; preds = %cond.end16
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 2888, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4330
  br label %cond.end26, !dbg !4330

cond.false25:                                     ; preds = %cond.end16
  br label %cond.end26, !dbg !4330

cond.end26:                                       ; preds = %cond.false25, %cond.true24
  %cond27 = phi i32 [ 0, %cond.true24 ], [ 0, %cond.false25 ], !dbg !4330
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4331
  %add.ptr28 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !4331
  %cfg29 = getelementptr inbounds %struct.function, %struct.function* %add.ptr28, i32 0, i32 1, !dbg !4331
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg29, align 8, !dbg !4331
  %x_basic_block_info30 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 2, !dbg !4331
  %26 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info30, align 8, !dbg !4331
  %tobool31 = icmp ne %struct.VEC_basic_block_gc* %26, null, !dbg !4331
  br i1 %tobool31, label %cond.true32, label %cond.false37, !dbg !4331

cond.true32:                                      ; preds = %cond.end26
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4331
  %add.ptr33 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !4331
  %cfg34 = getelementptr inbounds %struct.function, %struct.function* %add.ptr33, i32 0, i32 1, !dbg !4331
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg34, align 8, !dbg !4331
  %x_basic_block_info35 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 2, !dbg !4331
  %29 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info35, align 8, !dbg !4331
  %base36 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %29, i32 0, i32 0, !dbg !4331
  br label %cond.end38, !dbg !4331

cond.false37:                                     ; preds = %cond.end26
  br label %cond.end38, !dbg !4331

cond.end38:                                       ; preds = %cond.false37, %cond.true32
  %cond39 = phi %struct.VEC_basic_block_base* [ %base36, %cond.true32 ], [ null, %cond.false37 ], !dbg !4331
  %30 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4331
  %31 = load i32*, i32** @ebb_head, align 8, !dbg !4331
  %32 = load i32, i32* %bb, align 4, !dbg !4331
  %idxprom40 = sext i32 %32 to i64, !dbg !4331
  %arrayidx41 = getelementptr inbounds i32, i32* %31, i64 %idxprom40, !dbg !4331
  %33 = load i32, i32* %arrayidx41, align 4, !dbg !4331
  %idxprom42 = sext i32 %33 to i64, !dbg !4331
  %arrayidx43 = getelementptr inbounds i32, i32* %30, i64 %idxprom42, !dbg !4331
  %34 = load i32, i32* %arrayidx43, align 4, !dbg !4331
  %call44 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond39, i32 %34), !dbg !4331
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4332
  %add.ptr45 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !4332
  %cfg46 = getelementptr inbounds %struct.function, %struct.function* %add.ptr45, i32 0, i32 1, !dbg !4332
  %36 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg46, align 8, !dbg !4332
  %x_basic_block_info47 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %36, i32 0, i32 2, !dbg !4332
  %37 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info47, align 8, !dbg !4332
  %tobool48 = icmp ne %struct.VEC_basic_block_gc* %37, null, !dbg !4332
  br i1 %tobool48, label %cond.true49, label %cond.false54, !dbg !4332

cond.true49:                                      ; preds = %cond.end38
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4332
  %add.ptr50 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !4332
  %cfg51 = getelementptr inbounds %struct.function, %struct.function* %add.ptr50, i32 0, i32 1, !dbg !4332
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg51, align 8, !dbg !4332
  %x_basic_block_info52 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 2, !dbg !4332
  %40 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info52, align 8, !dbg !4332
  %base53 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %40, i32 0, i32 0, !dbg !4332
  br label %cond.end55, !dbg !4332

cond.false54:                                     ; preds = %cond.end38
  br label %cond.end55, !dbg !4332

cond.end55:                                       ; preds = %cond.false54, %cond.true49
  %cond56 = phi %struct.VEC_basic_block_base* [ %base53, %cond.true49 ], [ null, %cond.false54 ], !dbg !4332
  %41 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4332
  %42 = load i32*, i32** @ebb_head, align 8, !dbg !4332
  %43 = load i32, i32* %bb, align 4, !dbg !4332
  %add57 = add nsw i32 %43, 1, !dbg !4332
  %idxprom58 = sext i32 %add57 to i64, !dbg !4332
  %arrayidx59 = getelementptr inbounds i32, i32* %42, i64 %idxprom58, !dbg !4332
  %44 = load i32, i32* %arrayidx59, align 4, !dbg !4332
  %sub60 = sub nsw i32 %44, 1, !dbg !4332
  %idxprom61 = sext i32 %sub60 to i64, !dbg !4332
  %arrayidx62 = getelementptr inbounds i32, i32* %41, i64 %idxprom61, !dbg !4332
  %45 = load i32, i32* %arrayidx62, align 4, !dbg !4332
  %call63 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond56, i32 %45), !dbg !4332
  call void @get_ebb_head_tail(%struct.basic_block_def* %call44, %struct.basic_block_def* %call63, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !4333
  %46 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4334
  %47 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4335
  call void @sched_free_deps(%struct.rtx_def* %46, %struct.rtx_def* %47, i8 zeroext 0), !dbg !4336
  br label %for.inc, !dbg !4337

for.inc:                                          ; preds = %cond.end55
  %48 = load i32, i32* %bb, align 4, !dbg !4338
  %inc = add nsw i32 %48, 1, !dbg !4338
  store i32 %inc, i32* %bb, align 4, !dbg !4338
  br label %for.cond, !dbg !4339, !llvm.loop !4340

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4342
}

declare dso_local void @sched_free_deps(%struct.rtx_def*, %struct.rtx_def*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @compute_priorities() #0 !dbg !4343 {
entry:
  %bb = alloca i32, align 4
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !4344, metadata !DIExpression()), !dbg !4345
  %0 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4346
  %sched_max_insns_priority = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %0, i32 0, i32 13, !dbg !4347
  store i32 0, i32* %sched_max_insns_priority, align 4, !dbg !4348
  store i32 0, i32* %bb, align 4, !dbg !4349
  br label %for.cond, !dbg !4351

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %bb, align 4, !dbg !4352
  %2 = load i32, i32* @current_nr_blocks, align 4, !dbg !4354
  %cmp = icmp slt i32 %1, %2, !dbg !4355
  br i1 %cmp, label %for.body, label %for.end, !dbg !4356

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !4357, metadata !DIExpression()), !dbg !4359
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !4360, metadata !DIExpression()), !dbg !4361
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4362
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4362
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4362
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4362
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 2, !dbg !4362
  %5 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4362
  %tobool = icmp ne %struct.VEC_basic_block_gc* %5, null, !dbg !4362
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4362

cond.true:                                        ; preds = %for.body
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4362
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !4362
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4362
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4362
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 2, !dbg !4362
  %8 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !4362
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %8, i32 0, i32 0, !dbg !4362
  br label %cond.end, !dbg !4362

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4362

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4362
  %9 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4362
  %10 = load i32*, i32** @ebb_head, align 8, !dbg !4362
  %11 = load i32, i32* %bb, align 4, !dbg !4362
  %idxprom = sext i32 %11 to i64, !dbg !4362
  %arrayidx = getelementptr inbounds i32, i32* %10, i64 %idxprom, !dbg !4362
  %12 = load i32, i32* %arrayidx, align 4, !dbg !4362
  %idxprom4 = sext i32 %12 to i64, !dbg !4362
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i64 %idxprom4, !dbg !4362
  %13 = load i32, i32* %arrayidx5, align 4, !dbg !4362
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %13), !dbg !4362
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4362
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !4362
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !4362
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !4362
  %x_basic_block_info8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 2, !dbg !4362
  %16 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info8, align 8, !dbg !4362
  %tobool9 = icmp ne %struct.VEC_basic_block_gc* %16, null, !dbg !4362
  br i1 %tobool9, label %cond.true10, label %cond.false15, !dbg !4362

cond.true10:                                      ; preds = %cond.end
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4362
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !4362
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !4362
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !4362
  %x_basic_block_info13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 2, !dbg !4362
  %19 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info13, align 8, !dbg !4362
  %base14 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %19, i32 0, i32 0, !dbg !4362
  br label %cond.end16, !dbg !4362

cond.false15:                                     ; preds = %cond.end
  br label %cond.end16, !dbg !4362

cond.end16:                                       ; preds = %cond.false15, %cond.true10
  %cond17 = phi %struct.VEC_basic_block_base* [ %base14, %cond.true10 ], [ null, %cond.false15 ], !dbg !4362
  %20 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4362
  %21 = load i32*, i32** @ebb_head, align 8, !dbg !4362
  %22 = load i32, i32* %bb, align 4, !dbg !4362
  %add = add nsw i32 %22, 1, !dbg !4362
  %idxprom18 = sext i32 %add to i64, !dbg !4362
  %arrayidx19 = getelementptr inbounds i32, i32* %21, i64 %idxprom18, !dbg !4362
  %23 = load i32, i32* %arrayidx19, align 4, !dbg !4362
  %sub = sub nsw i32 %23, 1, !dbg !4362
  %idxprom20 = sext i32 %sub to i64, !dbg !4362
  %arrayidx21 = getelementptr inbounds i32, i32* %20, i64 %idxprom20, !dbg !4362
  %24 = load i32, i32* %arrayidx21, align 4, !dbg !4362
  %call22 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond17, i32 %24), !dbg !4362
  %cmp23 = icmp eq %struct.basic_block_def* %call, %call22, !dbg !4362
  br i1 %cmp23, label %cond.false25, label %cond.true24, !dbg !4362

cond.true24:                                      ; preds = %cond.end16
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 2908, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4362
  br label %cond.end26, !dbg !4362

cond.false25:                                     ; preds = %cond.end16
  br label %cond.end26, !dbg !4362

cond.end26:                                       ; preds = %cond.false25, %cond.true24
  %cond27 = phi i32 [ 0, %cond.true24 ], [ 0, %cond.false25 ], !dbg !4362
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4363
  %add.ptr28 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !4363
  %cfg29 = getelementptr inbounds %struct.function, %struct.function* %add.ptr28, i32 0, i32 1, !dbg !4363
  %26 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg29, align 8, !dbg !4363
  %x_basic_block_info30 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %26, i32 0, i32 2, !dbg !4363
  %27 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info30, align 8, !dbg !4363
  %tobool31 = icmp ne %struct.VEC_basic_block_gc* %27, null, !dbg !4363
  br i1 %tobool31, label %cond.true32, label %cond.false37, !dbg !4363

cond.true32:                                      ; preds = %cond.end26
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4363
  %add.ptr33 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !4363
  %cfg34 = getelementptr inbounds %struct.function, %struct.function* %add.ptr33, i32 0, i32 1, !dbg !4363
  %29 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg34, align 8, !dbg !4363
  %x_basic_block_info35 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %29, i32 0, i32 2, !dbg !4363
  %30 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info35, align 8, !dbg !4363
  %base36 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %30, i32 0, i32 0, !dbg !4363
  br label %cond.end38, !dbg !4363

cond.false37:                                     ; preds = %cond.end26
  br label %cond.end38, !dbg !4363

cond.end38:                                       ; preds = %cond.false37, %cond.true32
  %cond39 = phi %struct.VEC_basic_block_base* [ %base36, %cond.true32 ], [ null, %cond.false37 ], !dbg !4363
  %31 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4363
  %32 = load i32*, i32** @ebb_head, align 8, !dbg !4363
  %33 = load i32, i32* %bb, align 4, !dbg !4363
  %idxprom40 = sext i32 %33 to i64, !dbg !4363
  %arrayidx41 = getelementptr inbounds i32, i32* %32, i64 %idxprom40, !dbg !4363
  %34 = load i32, i32* %arrayidx41, align 4, !dbg !4363
  %idxprom42 = sext i32 %34 to i64, !dbg !4363
  %arrayidx43 = getelementptr inbounds i32, i32* %31, i64 %idxprom42, !dbg !4363
  %35 = load i32, i32* %arrayidx43, align 4, !dbg !4363
  %call44 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond39, i32 %35), !dbg !4363
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4364
  %add.ptr45 = getelementptr inbounds %struct.function, %struct.function* %36, i64 0, !dbg !4364
  %cfg46 = getelementptr inbounds %struct.function, %struct.function* %add.ptr45, i32 0, i32 1, !dbg !4364
  %37 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg46, align 8, !dbg !4364
  %x_basic_block_info47 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %37, i32 0, i32 2, !dbg !4364
  %38 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info47, align 8, !dbg !4364
  %tobool48 = icmp ne %struct.VEC_basic_block_gc* %38, null, !dbg !4364
  br i1 %tobool48, label %cond.true49, label %cond.false54, !dbg !4364

cond.true49:                                      ; preds = %cond.end38
  %39 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4364
  %add.ptr50 = getelementptr inbounds %struct.function, %struct.function* %39, i64 0, !dbg !4364
  %cfg51 = getelementptr inbounds %struct.function, %struct.function* %add.ptr50, i32 0, i32 1, !dbg !4364
  %40 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg51, align 8, !dbg !4364
  %x_basic_block_info52 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %40, i32 0, i32 2, !dbg !4364
  %41 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info52, align 8, !dbg !4364
  %base53 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %41, i32 0, i32 0, !dbg !4364
  br label %cond.end55, !dbg !4364

cond.false54:                                     ; preds = %cond.end38
  br label %cond.end55, !dbg !4364

cond.end55:                                       ; preds = %cond.false54, %cond.true49
  %cond56 = phi %struct.VEC_basic_block_base* [ %base53, %cond.true49 ], [ null, %cond.false54 ], !dbg !4364
  %42 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4364
  %43 = load i32*, i32** @ebb_head, align 8, !dbg !4364
  %44 = load i32, i32* %bb, align 4, !dbg !4364
  %add57 = add nsw i32 %44, 1, !dbg !4364
  %idxprom58 = sext i32 %add57 to i64, !dbg !4364
  %arrayidx59 = getelementptr inbounds i32, i32* %43, i64 %idxprom58, !dbg !4364
  %45 = load i32, i32* %arrayidx59, align 4, !dbg !4364
  %sub60 = sub nsw i32 %45, 1, !dbg !4364
  %idxprom61 = sext i32 %sub60 to i64, !dbg !4364
  %arrayidx62 = getelementptr inbounds i32, i32* %42, i64 %idxprom61, !dbg !4364
  %46 = load i32, i32* %arrayidx62, align 4, !dbg !4364
  %call63 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond56, i32 %46), !dbg !4364
  call void @get_ebb_head_tail(%struct.basic_block_def* %call44, %struct.basic_block_def* %call63, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !4365
  %47 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4366
  %48 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4368
  %call64 = call i32 @no_real_insns_p(%struct.rtx_def* %47, %struct.rtx_def* %48), !dbg !4369
  %tobool65 = icmp ne i32 %call64, 0, !dbg !4369
  br i1 %tobool65, label %if.then, label %if.end, !dbg !4370

if.then:                                          ; preds = %cond.end55
  br label %for.inc, !dbg !4371

if.end:                                           ; preds = %cond.end55
  %49 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4372
  %50 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4373
  %call66 = call i32 @set_priorities(%struct.rtx_def* %49, %struct.rtx_def* %50), !dbg !4374
  %51 = load i32, i32* @rgn_n_insns, align 4, !dbg !4375
  %add67 = add nsw i32 %51, %call66, !dbg !4375
  store i32 %add67, i32* @rgn_n_insns, align 4, !dbg !4375
  br label %for.inc, !dbg !4376

for.inc:                                          ; preds = %if.end, %if.then
  %52 = load i32, i32* %bb, align 4, !dbg !4377
  %inc = add nsw i32 %52, 1, !dbg !4377
  store i32 %inc, i32* %bb, align 4, !dbg !4377
  br label %for.cond, !dbg !4378, !llvm.loop !4379

for.end:                                          ; preds = %for.cond
  %53 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !4381
  %sched_max_insns_priority68 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %53, i32 0, i32 13, !dbg !4382
  %54 = load i32, i32* %sched_max_insns_priority68, align 4, !dbg !4383
  %inc69 = add nsw i32 %54, 1, !dbg !4383
  store i32 %inc69, i32* %sched_max_insns_priority68, align 4, !dbg !4383
  ret void, !dbg !4384
}

declare dso_local i32 @no_real_insns_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @set_priorities(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_rgn_init(i8 zeroext %single_blocks_p) #0 !dbg !4385 {
entry:
  %single_blocks_p.addr = alloca i8, align 1
  store i8 %single_blocks_p, i8* %single_blocks_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %single_blocks_p.addr, metadata !4388, metadata !DIExpression()), !dbg !4389
  %0 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4390
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %0, i64 81, !dbg !4390
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !4390
  %1 = load i32, i32* %value, align 8, !dbg !4390
  %mul = mul nsw i32 %1, 10000, !dbg !4391
  %div = sdiv i32 %mul, 100, !dbg !4392
  store i32 %div, i32* @min_spec_prob, align 4, !dbg !4393
  store i32 0, i32* @nr_inter, align 4, !dbg !4394
  store i32 0, i32* @nr_spec, align 4, !dbg !4395
  call void @extend_regions(), !dbg !4396
  %2 = load i32*, i32** @containing_rgn, align 8, !dbg !4397
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i64 0, !dbg !4397
  store i32 -1, i32* %arrayidx1, align 4, !dbg !4398
  %3 = load i32*, i32** @containing_rgn, align 8, !dbg !4399
  %arrayidx2 = getelementptr inbounds i32, i32* %3, i64 1, !dbg !4399
  store i32 -1, i32* %arrayidx2, align 4, !dbg !4400
  %4 = load i8, i8* %single_blocks_p.addr, align 1, !dbg !4401
  %conv = zext i8 %4 to i32, !dbg !4401
  %tobool = icmp ne i32 %conv, 0, !dbg !4401
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4403

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4404
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4404
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4404
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4404
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 3, !dbg !4404
  %7 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !4404
  %cmp = icmp eq i32 %7, 3, !dbg !4405
  br i1 %cmp, label %if.then, label %lor.lhs.false4, !dbg !4406

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* @flag_schedule_interblock, align 4, !dbg !4407
  %tobool5 = icmp ne i32 %8, 0, !dbg !4407
  br i1 %tobool5, label %lor.lhs.false6, label %if.then, !dbg !4408

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %call = call i32 @is_cfg_nonregular(), !dbg !4409
  %tobool7 = icmp ne i32 %call, 0, !dbg !4409
  br i1 %tobool7, label %if.then, label %if.else, !dbg !4410

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false, %entry
  %call8 = call zeroext i8 @sel_sched_p(), !dbg !4411
  call void @find_single_block_region(i8 zeroext %call8), !dbg !4413
  br label %if.end20, !dbg !4414

if.else:                                          ; preds = %lor.lhs.false6
  %call9 = call zeroext i8 @sel_sched_p(), !dbg !4415
  %tobool10 = icmp ne i8 %call9, 0, !dbg !4415
  br i1 %tobool10, label %if.end, label %if.then11, !dbg !4418

if.then11:                                        ; preds = %if.else
  call void @calculate_dominance_info(i32 1), !dbg !4419
  br label %if.end, !dbg !4419

if.end:                                           ; preds = %if.then11, %if.else
  call void @find_rgns(), !dbg !4420
  %9 = load i32, i32* @sched_verbose, align 4, !dbg !4421
  %cmp12 = icmp sge i32 %9, 3, !dbg !4423
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !4424

if.then14:                                        ; preds = %if.end
  call void @debug_regions(), !dbg !4425
  br label %if.end15, !dbg !4425

if.end15:                                         ; preds = %if.then14, %if.end
  %call16 = call zeroext i8 @sel_sched_p(), !dbg !4426
  %tobool17 = icmp ne i8 %call16, 0, !dbg !4426
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !4428

if.then18:                                        ; preds = %if.end15
  call void @free_dominance_info(i32 1), !dbg !4429
  br label %if.end19, !dbg !4429

if.end19:                                         ; preds = %if.then18, %if.end15
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then
  %10 = load i32, i32* @nr_regions, align 4, !dbg !4430
  %cmp21 = icmp slt i32 0, %10, !dbg !4430
  br i1 %cmp21, label %land.lhs.true, label %cond.true, !dbg !4430

land.lhs.true:                                    ; preds = %if.end20
  %11 = load i32, i32* @nr_regions, align 4, !dbg !4430
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4430
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !4430
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !4430
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !4430
  %x_n_basic_blocks25 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 3, !dbg !4430
  %14 = load i32, i32* %x_n_basic_blocks25, align 8, !dbg !4430
  %cmp26 = icmp sle i32 %11, %14, !dbg !4430
  br i1 %cmp26, label %cond.false, label %cond.true, !dbg !4430

cond.true:                                        ; preds = %land.lhs.true, %if.end20
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3073, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4430
  br label %cond.end, !dbg !4430

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4430

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4430
  %15 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4431
  %16 = load i32, i32* @nr_regions, align 4, !dbg !4431
  %sub = sub nsw i32 %16, 1, !dbg !4431
  %idxprom = sext i32 %sub to i64, !dbg !4431
  %arrayidx28 = getelementptr inbounds %struct.region, %struct.region* %15, i64 %idxprom, !dbg !4431
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx28, i32 0, i32 1, !dbg !4431
  %17 = load i32, i32* %rgn_blocks, align 4, !dbg !4431
  %18 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4432
  %19 = load i32, i32* @nr_regions, align 4, !dbg !4432
  %sub29 = sub nsw i32 %19, 1, !dbg !4432
  %idxprom30 = sext i32 %sub29 to i64, !dbg !4432
  %arrayidx31 = getelementptr inbounds %struct.region, %struct.region* %18, i64 %idxprom30, !dbg !4432
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx31, i32 0, i32 0, !dbg !4432
  %20 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !4432
  %add = add nsw i32 %17, %20, !dbg !4433
  %21 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4434
  %22 = load i32, i32* @nr_regions, align 4, !dbg !4434
  %idxprom32 = sext i32 %22 to i64, !dbg !4434
  %arrayidx33 = getelementptr inbounds %struct.region, %struct.region* %21, i64 %idxprom32, !dbg !4434
  %rgn_blocks34 = getelementptr inbounds %struct.region, %struct.region* %arrayidx33, i32 0, i32 1, !dbg !4434
  store i32 %add, i32* %rgn_blocks34, align 4, !dbg !4435
  ret void, !dbg !4436
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @extend_regions() #0 !dbg !4437 {
entry:
  %0 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4438
  %1 = bitcast %struct.region* %0 to i8*, !dbg !4438
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4438
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4438
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4438
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4438
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 3, !dbg !4438
  %4 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !4438
  %conv = sext i32 %4 to i64, !dbg !4438
  %mul = mul i64 12, %conv, !dbg !4438
  %call = call i8* @xrealloc(i8* %1, i64 %mul), !dbg !4438
  %5 = bitcast i8* %call to %struct.region*, !dbg !4438
  store %struct.region* %5, %struct.region** @rgn_table, align 8, !dbg !4439
  %6 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4440
  %7 = bitcast i32* %6 to i8*, !dbg !4440
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4440
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4440
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4440
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4440
  %x_n_basic_blocks3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 3, !dbg !4440
  %10 = load i32, i32* %x_n_basic_blocks3, align 8, !dbg !4440
  %conv4 = sext i32 %10 to i64, !dbg !4440
  %mul5 = mul i64 4, %conv4, !dbg !4440
  %call6 = call i8* @xrealloc(i8* %7, i64 %mul5), !dbg !4440
  %11 = bitcast i8* %call6 to i32*, !dbg !4440
  store i32* %11, i32** @rgn_bb_table, align 8, !dbg !4441
  %12 = load i32*, i32** @block_to_bb, align 8, !dbg !4442
  %13 = bitcast i32* %12 to i8*, !dbg !4442
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4442
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !4442
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !4442
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !4442
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 5, !dbg !4442
  %16 = load i32, i32* %x_last_basic_block, align 8, !dbg !4442
  %conv9 = sext i32 %16 to i64, !dbg !4442
  %mul10 = mul i64 4, %conv9, !dbg !4442
  %call11 = call i8* @xrealloc(i8* %13, i64 %mul10), !dbg !4442
  %17 = bitcast i8* %call11 to i32*, !dbg !4442
  store i32* %17, i32** @block_to_bb, align 8, !dbg !4443
  %18 = load i32*, i32** @containing_rgn, align 8, !dbg !4444
  %19 = bitcast i32* %18 to i8*, !dbg !4444
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4444
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !4444
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !4444
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !4444
  %x_last_basic_block14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 5, !dbg !4444
  %22 = load i32, i32* %x_last_basic_block14, align 8, !dbg !4444
  %conv15 = sext i32 %22 to i64, !dbg !4444
  %mul16 = mul i64 4, %conv15, !dbg !4444
  %call17 = call i8* @xrealloc(i8* %19, i64 %mul16), !dbg !4444
  %23 = bitcast i8* %call17 to i32*, !dbg !4444
  store i32* %23, i32** @containing_rgn, align 8, !dbg !4445
  ret void, !dbg !4446
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @is_cfg_nonregular() #0 !dbg !4447 {
entry:
  %retval = alloca i32, align 4
  %b = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !4448, metadata !DIExpression()), !dbg !4449
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4450, metadata !DIExpression()), !dbg !4451
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 10), align 8, !dbg !4452
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !4452
  br i1 %tobool, label %if.then, label %if.end, !dbg !4454

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !4455
  br label %return, !dbg !4455

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 5), align 8, !dbg !4456
  %tobool1 = icmp ne %struct.rtx_def* %1, null, !dbg !4456
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !4458

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !4459
  br label %return, !dbg !4459

if.end3:                                          ; preds = %if.end
  %call = call zeroext i8 @current_function_has_exception_handlers(), !dbg !4460
  %tobool4 = icmp ne i8 %call, 0, !dbg !4460
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !4462

if.then5:                                         ; preds = %if.end3
  store i32 1, i32* %retval, align 4, !dbg !4463
  br label %return, !dbg !4463

if.end6:                                          ; preds = %if.end3
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4464
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4464
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4464
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4464
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 0, !dbg !4464
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4464
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 6, !dbg !4464
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4464
  store %struct.basic_block_def* %5, %struct.basic_block_def** %b, align 8, !dbg !4464
  br label %for.cond, !dbg !4464

for.cond:                                         ; preds = %for.inc128, %if.end6
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4466
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4466
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4466
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !4466
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !4466
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 1, !dbg !4466
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4466
  %cmp = icmp ne %struct.basic_block_def* %6, %9, !dbg !4466
  br i1 %cmp, label %for.body, label %for.end130, !dbg !4464

for.body:                                         ; preds = %for.cond
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4468
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !4468
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4468
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4468
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 0, !dbg !4468
  %12 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4468
  store %struct.rtx_def* %12, %struct.rtx_def** %insn, align 8, !dbg !4468
  br label %for.cond9, !dbg !4468

for.cond9:                                        ; preds = %for.inc, %for.body
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4470
  %tobool10 = icmp ne %struct.rtx_def* %13, null, !dbg !4470
  br i1 %tobool10, label %land.rhs, label %land.end, !dbg !4470

land.rhs:                                         ; preds = %for.cond9
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4470
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4470
  %il11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 7, !dbg !4470
  %rtl12 = bitcast %union.basic_block_il_dependent* %il11 to %struct.rtl_bb_info**, !dbg !4470
  %16 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl12, align 8, !dbg !4470
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %16, i32 0, i32 1, !dbg !4470
  %17 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4470
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4470
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4470
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4470
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4470
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4470
  %cmp13 = icmp ne %struct.rtx_def* %14, %18, !dbg !4470
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond9
  %19 = phi i1 [ false, %for.cond9 ], [ %cmp13, %land.rhs ], !dbg !4472
  br i1 %19, label %for.body14, label %for.end, !dbg !4468

for.body14:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4473, metadata !DIExpression()), !dbg !4475
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !4476, metadata !DIExpression()), !dbg !4477
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !4478, metadata !DIExpression()), !dbg !4479
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !4480, metadata !DIExpression()), !dbg !4481
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4482
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !4482
  %bf.load = load i32, i32* %21, align 8, !dbg !4482
  %bf.clear = and i32 %bf.load, 65535, !dbg !4482
  %cmp15 = icmp eq i32 %bf.clear, 9, !dbg !4482
  br i1 %cmp15, label %land.lhs.true, label %if.end19, !dbg !4484

land.lhs.true:                                    ; preds = %for.body14
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4485
  %call16 = call i32 @computed_jump_p(%struct.rtx_def* %22), !dbg !4486
  %tobool17 = icmp ne i32 %call16, 0, !dbg !4486
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !4487

if.then18:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !4488
  br label %return, !dbg !4488

if.end19:                                         ; preds = %land.lhs.true, %for.body14
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4489
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4489
  %bf.load20 = load i32, i32* %24, align 8, !dbg !4489
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !4489
  %cmp22 = icmp eq i32 %bf.clear21, 8, !dbg !4489
  br i1 %cmp22, label %if.end35, label %lor.lhs.false, !dbg !4489

lor.lhs.false:                                    ; preds = %if.end19
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4489
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !4489
  %bf.load23 = load i32, i32* %26, align 8, !dbg !4489
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !4489
  %cmp25 = icmp eq i32 %bf.clear24, 7, !dbg !4489
  br i1 %cmp25, label %if.end35, label %lor.lhs.false26, !dbg !4489

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4489
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !4489
  %bf.load27 = load i32, i32* %28, align 8, !dbg !4489
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !4489
  %cmp29 = icmp eq i32 %bf.clear28, 9, !dbg !4489
  br i1 %cmp29, label %if.end35, label %lor.lhs.false30, !dbg !4489

lor.lhs.false30:                                  ; preds = %lor.lhs.false26
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4489
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !4489
  %bf.load31 = load i32, i32* %30, align 8, !dbg !4489
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !4489
  %cmp33 = icmp eq i32 %bf.clear32, 10, !dbg !4489
  br i1 %cmp33, label %if.end35, label %if.then34, !dbg !4491

if.then34:                                        ; preds = %lor.lhs.false30
  br label %for.inc, !dbg !4492

if.end35:                                         ; preds = %lor.lhs.false30, %lor.lhs.false26, %lor.lhs.false, %if.end19
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4493
  %call36 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %31, i32 10, %struct.rtx_def* null), !dbg !4494
  store %struct.rtx_def* %call36, %struct.rtx_def** %note, align 8, !dbg !4495
  %32 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4496
  %cmp37 = icmp eq %struct.rtx_def* %32, null, !dbg !4498
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !4499

if.then38:                                        ; preds = %if.end35
  br label %for.inc, !dbg !4500

if.end39:                                         ; preds = %if.end35
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4501
  %call40 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %33), !dbg !4502
  store %struct.rtx_def* %call40, %struct.rtx_def** %next, align 8, !dbg !4503
  %34 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4504
  %cmp41 = icmp eq %struct.rtx_def* %34, null, !dbg !4506
  br i1 %cmp41, label %if.then72, label %lor.lhs.false42, !dbg !4507

lor.lhs.false42:                                  ; preds = %if.end39
  %35 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4508
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !4508
  %bf.load43 = load i32, i32* %36, align 8, !dbg !4508
  %bf.clear44 = and i32 %bf.load43, 65535, !dbg !4508
  %cmp45 = icmp eq i32 %bf.clear44, 9, !dbg !4508
  br i1 %cmp45, label %lor.lhs.false46, label %if.then72, !dbg !4509

lor.lhs.false46:                                  ; preds = %lor.lhs.false42
  %37 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4510
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !4510
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !4510
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 8, !dbg !4510
  %rt_rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**, !dbg !4510
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx50, align 8, !dbg !4510
  %39 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4511
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !4511
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !4511
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 0, !dbg !4511
  %rt_rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**, !dbg !4511
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx54, align 8, !dbg !4511
  %cmp55 = icmp ne %struct.rtx_def* %38, %40, !dbg !4512
  br i1 %cmp55, label %land.lhs.true56, label %lor.lhs.false63, !dbg !4513

land.lhs.true56:                                  ; preds = %lor.lhs.false46
  %41 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4514
  %42 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4515
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !4515
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !4515
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 0, !dbg !4515
  %rt_rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !4515
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx60, align 8, !dbg !4515
  %call61 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %41, i32 9, %struct.rtx_def* %43), !dbg !4516
  %cmp62 = icmp eq %struct.rtx_def* %call61, null, !dbg !4517
  br i1 %cmp62, label %if.then72, label %lor.lhs.false63, !dbg !4518

lor.lhs.false63:                                  ; preds = %land.lhs.true56, %lor.lhs.false46
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4519
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !4519
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !4519
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 3, !dbg !4519
  %rt_bb = bitcast %union.rtunion_def* %arrayidx66 to %struct.basic_block_def**, !dbg !4519
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4519
  %46 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4520
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !4520
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !4520
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 3, !dbg !4520
  %rt_bb70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.basic_block_def**, !dbg !4520
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb70, align 8, !dbg !4520
  %cmp71 = icmp ne %struct.basic_block_def* %45, %47, !dbg !4521
  br i1 %cmp71, label %if.then72, label %if.end73, !dbg !4522

if.then72:                                        ; preds = %lor.lhs.false63, %land.lhs.true56, %lor.lhs.false42, %if.end39
  store i32 1, i32* %retval, align 4, !dbg !4523
  br label %return, !dbg !4523

if.end73:                                         ; preds = %lor.lhs.false63
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4524
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !4524
  %bf.load74 = load i32, i32* %49, align 8, !dbg !4524
  %bf.clear75 = and i32 %bf.load74, 65535, !dbg !4524
  %cmp76 = icmp eq i32 %bf.clear75, 8, !dbg !4524
  br i1 %cmp76, label %cond.true, label %lor.lhs.false77, !dbg !4524

lor.lhs.false77:                                  ; preds = %if.end73
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4524
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !4524
  %bf.load78 = load i32, i32* %51, align 8, !dbg !4524
  %bf.clear79 = and i32 %bf.load78, 65535, !dbg !4524
  %cmp80 = icmp eq i32 %bf.clear79, 7, !dbg !4524
  br i1 %cmp80, label %cond.true, label %lor.lhs.false81, !dbg !4524

lor.lhs.false81:                                  ; preds = %lor.lhs.false77
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4524
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !4524
  %bf.load82 = load i32, i32* %53, align 8, !dbg !4524
  %bf.clear83 = and i32 %bf.load82, 65535, !dbg !4524
  %cmp84 = icmp eq i32 %bf.clear83, 9, !dbg !4524
  br i1 %cmp84, label %cond.true, label %lor.lhs.false85, !dbg !4524

lor.lhs.false85:                                  ; preds = %lor.lhs.false81
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4524
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !4524
  %bf.load86 = load i32, i32* %55, align 8, !dbg !4524
  %bf.clear87 = and i32 %bf.load86, 65535, !dbg !4524
  %cmp88 = icmp eq i32 %bf.clear87, 10, !dbg !4524
  br i1 %cmp88, label %cond.true, label %cond.false106, !dbg !4524

cond.true:                                        ; preds = %lor.lhs.false85, %lor.lhs.false81, %lor.lhs.false77, %if.end73
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4524
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !4524
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !4524
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 5, !dbg !4524
  %rt_rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**, !dbg !4524
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx92, align 8, !dbg !4524
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !4524
  %bf.load93 = load i32, i32* %58, align 8, !dbg !4524
  %bf.clear94 = and i32 %bf.load93, 65535, !dbg !4524
  %cmp95 = icmp eq i32 %bf.clear94, 23, !dbg !4524
  br i1 %cmp95, label %cond.true96, label %cond.false, !dbg !4524

cond.true96:                                      ; preds = %cond.true
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4524
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !4524
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !4524
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 5, !dbg !4524
  %rt_rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**, !dbg !4524
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx100, align 8, !dbg !4524
  br label %cond.end, !dbg !4524

cond.false:                                       ; preds = %cond.true
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4524
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4524
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !4524
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !4524
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 5, !dbg !4524
  %rt_rtx104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtx_def**, !dbg !4524
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx104, align 8, !dbg !4524
  %call105 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %61, %struct.rtx_def* %63), !dbg !4524
  br label %cond.end, !dbg !4524

cond.end:                                         ; preds = %cond.false, %cond.true96
  %cond = phi %struct.rtx_def* [ %60, %cond.true96 ], [ %call105, %cond.false ], !dbg !4524
  br label %cond.end107, !dbg !4524

cond.false106:                                    ; preds = %lor.lhs.false85
  br label %cond.end107, !dbg !4524

cond.end107:                                      ; preds = %cond.false106, %cond.end
  %cond108 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false106 ], !dbg !4524
  store %struct.rtx_def* %cond108, %struct.rtx_def** %set, align 8, !dbg !4525
  %64 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4526
  %cmp109 = icmp eq %struct.rtx_def* %64, null, !dbg !4528
  br i1 %cmp109, label %if.then110, label %if.end111, !dbg !4529

if.then110:                                       ; preds = %cond.end107
  store i32 1, i32* %retval, align 4, !dbg !4530
  br label %return, !dbg !4530

if.end111:                                        ; preds = %cond.end107
  %65 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4531
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !4531
  %fld113 = bitcast %union.u* %u112 to [1 x %union.rtunion_def]*, !dbg !4531
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i64 0, i64 0, !dbg !4531
  %rt_rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**, !dbg !4531
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx115, align 8, !dbg !4531
  store %struct.rtx_def* %66, %struct.rtx_def** %dest, align 8, !dbg !4532
  %67 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4533
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !4533
  %bf.load116 = load i32, i32* %68, align 8, !dbg !4533
  %bf.clear117 = and i32 %bf.load116, 65535, !dbg !4533
  %cmp118 = icmp eq i32 %bf.clear117, 37, !dbg !4533
  br i1 %cmp118, label %lor.lhs.false119, label %if.then122, !dbg !4535

lor.lhs.false119:                                 ; preds = %if.end111
  %69 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4536
  %70 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4537
  %call120 = call i32 @dead_or_set_p(%struct.rtx_def* %69, %struct.rtx_def* %70), !dbg !4538
  %tobool121 = icmp ne i32 %call120, 0, !dbg !4538
  br i1 %tobool121, label %if.end123, label %if.then122, !dbg !4539

if.then122:                                       ; preds = %lor.lhs.false119, %if.end111
  store i32 1, i32* %retval, align 4, !dbg !4540
  br label %return, !dbg !4540

if.end123:                                        ; preds = %lor.lhs.false119
  br label %for.inc, !dbg !4541

for.inc:                                          ; preds = %if.end123, %if.then38, %if.then34
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4470
  %u124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !4470
  %fld125 = bitcast %union.u* %u124 to [1 x %union.rtunion_def]*, !dbg !4470
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i64 0, i64 2, !dbg !4470
  %rt_rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**, !dbg !4470
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx127, align 8, !dbg !4470
  store %struct.rtx_def* %72, %struct.rtx_def** %insn, align 8, !dbg !4470
  br label %for.cond9, !dbg !4470, !llvm.loop !4542

for.end:                                          ; preds = %land.end
  br label %for.inc128, !dbg !4543

for.inc128:                                       ; preds = %for.end
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4466
  %next_bb129 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %73, i32 0, i32 6, !dbg !4466
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb129, align 8, !dbg !4466
  store %struct.basic_block_def* %74, %struct.basic_block_def** %b, align 8, !dbg !4466
  br label %for.cond, !dbg !4466, !llvm.loop !4544

for.end130:                                       ; preds = %for.cond
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4546
  %add.ptr131 = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, !dbg !4546
  %cfg132 = getelementptr inbounds %struct.function, %struct.function* %add.ptr131, i32 0, i32 1, !dbg !4546
  %76 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg132, align 8, !dbg !4546
  %x_entry_block_ptr133 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %76, i32 0, i32 0, !dbg !4546
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr133, align 8, !dbg !4546
  %next_bb134 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 6, !dbg !4546
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb134, align 8, !dbg !4546
  store %struct.basic_block_def* %78, %struct.basic_block_def** %b, align 8, !dbg !4546
  br label %for.cond135, !dbg !4546

for.cond135:                                      ; preds = %for.inc158, %for.end130
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4548
  %80 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4548
  %add.ptr136 = getelementptr inbounds %struct.function, %struct.function* %80, i64 0, !dbg !4548
  %cfg137 = getelementptr inbounds %struct.function, %struct.function* %add.ptr136, i32 0, i32 1, !dbg !4548
  %81 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg137, align 8, !dbg !4548
  %x_exit_block_ptr138 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %81, i32 0, i32 1, !dbg !4548
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr138, align 8, !dbg !4548
  %cmp139 = icmp ne %struct.basic_block_def* %79, %82, !dbg !4548
  br i1 %cmp139, label %for.body140, label %for.end160, !dbg !4546

for.body140:                                      ; preds = %for.cond135
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4550
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 0, !dbg !4550
  %84 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4550
  %tobool141 = icmp ne %struct.VEC_edge_gc* %84, null, !dbg !4550
  br i1 %tobool141, label %cond.true142, label %cond.false144, !dbg !4550

cond.true142:                                     ; preds = %for.body140
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4550
  %preds143 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 0, !dbg !4550
  %86 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds143, align 8, !dbg !4550
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %86, i32 0, i32 0, !dbg !4550
  br label %cond.end145, !dbg !4550

cond.false144:                                    ; preds = %for.body140
  br label %cond.end145, !dbg !4550

cond.end145:                                      ; preds = %cond.false144, %cond.true142
  %cond146 = phi %struct.VEC_edge_base* [ %base, %cond.true142 ], [ null, %cond.false144 ], !dbg !4550
  %call147 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond146), !dbg !4550
  %cmp148 = icmp eq i32 %call147, 0, !dbg !4553
  br i1 %cmp148, label %if.then156, label %lor.lhs.false149, !dbg !4554

lor.lhs.false149:                                 ; preds = %cond.end145
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4555
  %call150 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %87), !dbg !4556
  %conv = zext i8 %call150 to i32, !dbg !4556
  %tobool151 = icmp ne i32 %conv, 0, !dbg !4556
  br i1 %tobool151, label %land.lhs.true152, label %if.end157, !dbg !4557

land.lhs.true152:                                 ; preds = %lor.lhs.false149
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4558
  %call153 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %88), !dbg !4559
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4560
  %cmp154 = icmp eq %struct.basic_block_def* %call153, %89, !dbg !4561
  br i1 %cmp154, label %if.then156, label %if.end157, !dbg !4562

if.then156:                                       ; preds = %land.lhs.true152, %cond.end145
  store i32 1, i32* %retval, align 4, !dbg !4563
  br label %return, !dbg !4563

if.end157:                                        ; preds = %land.lhs.true152, %lor.lhs.false149
  br label %for.inc158, !dbg !4564

for.inc158:                                       ; preds = %if.end157
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4548
  %next_bb159 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 6, !dbg !4548
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb159, align 8, !dbg !4548
  store %struct.basic_block_def* %91, %struct.basic_block_def** %b, align 8, !dbg !4548
  br label %for.cond135, !dbg !4548, !llvm.loop !4565

for.end160:                                       ; preds = %for.cond135
  store i32 0, i32* %retval, align 4, !dbg !4567
  br label %return, !dbg !4567

return:                                           ; preds = %for.end160, %if.then156, %if.then122, %if.then110, %if.then72, %if.then18, %if.then5, %if.then2, %if.then
  %92 = load i32, i32* %retval, align 4, !dbg !4568
  ret i32 %92, !dbg !4568
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_single_block_region(i8 zeroext %ebbs_p) #0 !dbg !4569 {
entry:
  %ebbs_p.addr = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %ebb_start = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %probability_cutoff = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store i8 %ebbs_p, i8* %ebbs_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ebbs_p.addr, metadata !4570, metadata !DIExpression()), !dbg !4571
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4572, metadata !DIExpression()), !dbg !4573
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ebb_start, metadata !4574, metadata !DIExpression()), !dbg !4575
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4576, metadata !DIExpression()), !dbg !4577
  store i32 0, i32* %i, align 4, !dbg !4577
  store i32 0, i32* @nr_regions, align 4, !dbg !4578
  %0 = load i8, i8* %ebbs_p.addr, align 1, !dbg !4579
  %tobool = icmp ne i8 %0, 0, !dbg !4579
  br i1 %tobool, label %if.then, label %if.else64, !dbg !4581

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %probability_cutoff, metadata !4582, metadata !DIExpression()), !dbg !4584
  %1 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !4585
  %tobool1 = icmp ne %struct.gcov_ctr_summary* %1, null, !dbg !4585
  br i1 %tobool1, label %land.lhs.true, label %if.else, !dbg !4587

land.lhs.true:                                    ; preds = %if.then
  %2 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !4588
  %tobool2 = icmp ne i32 %2, 0, !dbg !4588
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !4589

if.then3:                                         ; preds = %land.lhs.true
  %3 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4590
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %3, i64 51, !dbg !4590
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !4590
  %4 = load i32, i32* %value, align 8, !dbg !4590
  store i32 %4, i32* %probability_cutoff, align 4, !dbg !4591
  br label %if.end, !dbg !4592

if.else:                                          ; preds = %land.lhs.true, %if.then
  %5 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4593
  %arrayidx4 = getelementptr inbounds %struct.param_info, %struct.param_info* %5, i64 52, !dbg !4593
  %value5 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx4, i32 0, i32 1, !dbg !4593
  %6 = load i32, i32* %value5, align 8, !dbg !4593
  store i32 %6, i32* %probability_cutoff, align 4, !dbg !4594
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  %7 = load i32, i32* %probability_cutoff, align 4, !dbg !4595
  %mul = mul nsw i32 100, %7, !dbg !4596
  store i32 %mul, i32* %probability_cutoff, align 4, !dbg !4597
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4598
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4598
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4598
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4598
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 0, !dbg !4598
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4598
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 6, !dbg !4598
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4598
  store %struct.basic_block_def* %11, %struct.basic_block_def** %ebb_start, align 8, !dbg !4598
  br label %for.cond, !dbg !4598

for.cond:                                         ; preds = %for.inc61, %if.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %ebb_start, align 8, !dbg !4600
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4600
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !4600
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !4600
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !4600
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 1, !dbg !4600
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4600
  %cmp = icmp ne %struct.basic_block_def* %12, %15, !dbg !4600
  br i1 %cmp, label %for.body, label %for.end63, !dbg !4598

for.body:                                         ; preds = %for.cond
  %16 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4602
  %17 = load i32, i32* @nr_regions, align 4, !dbg !4602
  %idxprom = sext i32 %17 to i64, !dbg !4602
  %arrayidx8 = getelementptr inbounds %struct.region, %struct.region* %16, i64 %idxprom, !dbg !4602
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx8, i32 0, i32 0, !dbg !4602
  store i32 0, i32* %rgn_nr_blocks, align 4, !dbg !4604
  %18 = load i32, i32* %i, align 4, !dbg !4605
  %19 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4606
  %20 = load i32, i32* @nr_regions, align 4, !dbg !4606
  %idxprom9 = sext i32 %20 to i64, !dbg !4606
  %arrayidx10 = getelementptr inbounds %struct.region, %struct.region* %19, i64 %idxprom9, !dbg !4606
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx10, i32 0, i32 1, !dbg !4606
  store i32 %18, i32* %rgn_blocks, align 4, !dbg !4607
  %21 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4608
  %22 = load i32, i32* @nr_regions, align 4, !dbg !4608
  %idxprom11 = sext i32 %22 to i64, !dbg !4608
  %arrayidx12 = getelementptr inbounds %struct.region, %struct.region* %21, i64 %idxprom11, !dbg !4608
  %dont_calc_deps = getelementptr inbounds %struct.region, %struct.region* %arrayidx12, i32 0, i32 2, !dbg !4608
  %bf.load = load i8, i8* %dont_calc_deps, align 4, !dbg !4609
  %bf.clear = and i8 %bf.load, -2, !dbg !4609
  store i8 %bf.clear, i8* %dont_calc_deps, align 4, !dbg !4609
  %23 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4610
  %24 = load i32, i32* @nr_regions, align 4, !dbg !4610
  %idxprom13 = sext i32 %24 to i64, !dbg !4610
  %arrayidx14 = getelementptr inbounds %struct.region, %struct.region* %23, i64 %idxprom13, !dbg !4610
  %has_real_ebb = getelementptr inbounds %struct.region, %struct.region* %arrayidx14, i32 0, i32 2, !dbg !4610
  %bf.load15 = load i8, i8* %has_real_ebb, align 4, !dbg !4611
  %bf.clear16 = and i8 %bf.load15, -3, !dbg !4611
  store i8 %bf.clear16, i8* %has_real_ebb, align 4, !dbg !4611
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %ebb_start, align 8, !dbg !4612
  store %struct.basic_block_def* %25, %struct.basic_block_def** %bb, align 8, !dbg !4614
  br label %for.cond17, !dbg !4615

for.cond17:                                       ; preds = %for.inc57, %for.body
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4616, metadata !DIExpression()), !dbg !4619
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4620, metadata !DIExpression()), !dbg !4621
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4622
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 9, !dbg !4623
  %27 = load i32, i32* %index, align 8, !dbg !4623
  %28 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4624
  %29 = load i32, i32* %i, align 4, !dbg !4625
  %idxprom18 = sext i32 %29 to i64, !dbg !4624
  %arrayidx19 = getelementptr inbounds i32, i32* %28, i64 %idxprom18, !dbg !4624
  store i32 %27, i32* %arrayidx19, align 4, !dbg !4626
  %30 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4627
  %31 = load i32, i32* @nr_regions, align 4, !dbg !4627
  %idxprom20 = sext i32 %31 to i64, !dbg !4627
  %arrayidx21 = getelementptr inbounds %struct.region, %struct.region* %30, i64 %idxprom20, !dbg !4627
  %rgn_nr_blocks22 = getelementptr inbounds %struct.region, %struct.region* %arrayidx21, i32 0, i32 0, !dbg !4627
  %32 = load i32, i32* %rgn_nr_blocks22, align 4, !dbg !4628
  %inc = add nsw i32 %32, 1, !dbg !4628
  store i32 %inc, i32* %rgn_nr_blocks22, align 4, !dbg !4628
  %33 = load i32, i32* @nr_regions, align 4, !dbg !4629
  %34 = load i32*, i32** @containing_rgn, align 8, !dbg !4630
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4630
  %index23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 9, !dbg !4630
  %36 = load i32, i32* %index23, align 8, !dbg !4630
  %idxprom24 = sext i32 %36 to i64, !dbg !4630
  %arrayidx25 = getelementptr inbounds i32, i32* %34, i64 %idxprom24, !dbg !4630
  store i32 %33, i32* %arrayidx25, align 4, !dbg !4631
  %37 = load i32, i32* %i, align 4, !dbg !4632
  %38 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4633
  %39 = load i32, i32* @nr_regions, align 4, !dbg !4633
  %idxprom26 = sext i32 %39 to i64, !dbg !4633
  %arrayidx27 = getelementptr inbounds %struct.region, %struct.region* %38, i64 %idxprom26, !dbg !4633
  %rgn_blocks28 = getelementptr inbounds %struct.region, %struct.region* %arrayidx27, i32 0, i32 1, !dbg !4633
  %40 = load i32, i32* %rgn_blocks28, align 4, !dbg !4633
  %sub = sub nsw i32 %37, %40, !dbg !4634
  %41 = load i32*, i32** @block_to_bb, align 8, !dbg !4635
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4635
  %index29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 9, !dbg !4635
  %43 = load i32, i32* %index29, align 8, !dbg !4635
  %idxprom30 = sext i32 %43 to i64, !dbg !4635
  %arrayidx31 = getelementptr inbounds i32, i32* %41, i64 %idxprom30, !dbg !4635
  store i32 %sub, i32* %arrayidx31, align 4, !dbg !4636
  %44 = load i32, i32* %i, align 4, !dbg !4637
  %inc32 = add nsw i32 %44, 1, !dbg !4637
  store i32 %inc32, i32* %i, align 4, !dbg !4637
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4638
  %next_bb33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 6, !dbg !4640
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb33, align 8, !dbg !4640
  %47 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4641
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, !dbg !4641
  %cfg35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 1, !dbg !4641
  %48 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg35, align 8, !dbg !4641
  %x_exit_block_ptr36 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %48, i32 0, i32 1, !dbg !4641
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr36, align 8, !dbg !4641
  %cmp37 = icmp eq %struct.basic_block_def* %46, %49, !dbg !4642
  br i1 %cmp37, label %if.then42, label %lor.lhs.false, !dbg !4643

lor.lhs.false:                                    ; preds = %for.cond17
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4644
  %next_bb38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 6, !dbg !4644
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb38, align 8, !dbg !4644
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 7, !dbg !4644
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4644
  %52 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4644
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %52, i32 0, i32 0, !dbg !4644
  %53 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4644
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !4644
  %bf.load39 = load i32, i32* %54, align 8, !dbg !4644
  %bf.clear40 = and i32 %bf.load39, 65535, !dbg !4644
  %cmp41 = icmp eq i32 %bf.clear40, 12, !dbg !4644
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !4645

if.then42:                                        ; preds = %lor.lhs.false, %for.cond17
  br label %for.end59, !dbg !4646

if.end43:                                         ; preds = %lor.lhs.false
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4647
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 1, !dbg !4647
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4647
  %56 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4647
  %57 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %56, i32 0, i32 0, !dbg !4647
  %58 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !4647
  store i32 %58, i32* %57, align 8, !dbg !4647
  %59 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %56, i32 0, i32 1, !dbg !4647
  %60 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !4647
  store %struct.VEC_edge_gc** %60, %struct.VEC_edge_gc*** %59, align 8, !dbg !4647
  %61 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4647
  %62 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4647
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 16, i1 false), !dbg !4647
  br label %for.cond44, !dbg !4647

for.cond44:                                       ; preds = %for.inc, %if.end43
  %63 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4649
  %64 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %63, i32 0, i32 0, !dbg !4649
  %65 = load i32, i32* %64, align 8, !dbg !4649
  %66 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %63, i32 0, i32 1, !dbg !4649
  %67 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %66, align 8, !dbg !4649
  %call45 = call zeroext i8 @ei_cond(i32 %65, %struct.VEC_edge_gc** %67, %struct.edge_def** %e), !dbg !4649
  %tobool46 = icmp ne i8 %call45, 0, !dbg !4647
  br i1 %tobool46, label %for.body47, label %for.end, !dbg !4647

for.body47:                                       ; preds = %for.cond44
  %68 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4651
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 7, !dbg !4653
  %69 = load i32, i32* %flags, align 8, !dbg !4653
  %and = and i32 %69, 1, !dbg !4654
  %cmp48 = icmp ne i32 %and, 0, !dbg !4655
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !4656

if.then49:                                        ; preds = %for.body47
  br label %for.end, !dbg !4657

if.end50:                                         ; preds = %for.body47
  br label %for.inc, !dbg !4658

for.inc:                                          ; preds = %if.end50
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4649
  br label %for.cond44, !dbg !4649, !llvm.loop !4659

for.end:                                          ; preds = %if.then49, %for.cond44
  %70 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4661
  %tobool51 = icmp ne %struct.edge_def* %70, null, !dbg !4661
  br i1 %tobool51, label %if.end53, label %if.then52, !dbg !4663

if.then52:                                        ; preds = %for.end
  br label %for.end59, !dbg !4664

if.end53:                                         ; preds = %for.end
  %71 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4665
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 8, !dbg !4667
  %72 = load i32, i32* %probability, align 4, !dbg !4667
  %73 = load i32, i32* %probability_cutoff, align 4, !dbg !4668
  %cmp54 = icmp sle i32 %72, %73, !dbg !4669
  br i1 %cmp54, label %if.then55, label %if.end56, !dbg !4670

if.then55:                                        ; preds = %if.end53
  br label %for.end59, !dbg !4671

if.end56:                                         ; preds = %if.end53
  br label %for.inc57, !dbg !4672

for.inc57:                                        ; preds = %if.end56
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4673
  %next_bb58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 6, !dbg !4674
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb58, align 8, !dbg !4674
  store %struct.basic_block_def* %75, %struct.basic_block_def** %bb, align 8, !dbg !4675
  br label %for.cond17, !dbg !4676, !llvm.loop !4677

for.end59:                                        ; preds = %if.then55, %if.then52, %if.then42
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4680
  store %struct.basic_block_def* %76, %struct.basic_block_def** %ebb_start, align 8, !dbg !4681
  %77 = load i32, i32* @nr_regions, align 4, !dbg !4682
  %inc60 = add nsw i32 %77, 1, !dbg !4682
  store i32 %inc60, i32* @nr_regions, align 4, !dbg !4682
  br label %for.inc61, !dbg !4683

for.inc61:                                        ; preds = %for.end59
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %ebb_start, align 8, !dbg !4600
  %next_bb62 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 6, !dbg !4600
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb62, align 8, !dbg !4600
  store %struct.basic_block_def* %79, %struct.basic_block_def** %ebb_start, align 8, !dbg !4600
  br label %for.cond, !dbg !4600, !llvm.loop !4684

for.end63:                                        ; preds = %for.cond
  br label %if.end104, !dbg !4686

if.else64:                                        ; preds = %entry
  %80 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4687
  %add.ptr65 = getelementptr inbounds %struct.function, %struct.function* %80, i64 0, !dbg !4687
  %cfg66 = getelementptr inbounds %struct.function, %struct.function* %add.ptr65, i32 0, i32 1, !dbg !4687
  %81 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg66, align 8, !dbg !4687
  %x_entry_block_ptr67 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %81, i32 0, i32 0, !dbg !4687
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr67, align 8, !dbg !4687
  %next_bb68 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 6, !dbg !4687
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb68, align 8, !dbg !4687
  store %struct.basic_block_def* %83, %struct.basic_block_def** %bb, align 8, !dbg !4687
  br label %for.cond69, !dbg !4687

for.cond69:                                       ; preds = %for.inc101, %if.else64
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4689
  %85 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4689
  %add.ptr70 = getelementptr inbounds %struct.function, %struct.function* %85, i64 0, !dbg !4689
  %cfg71 = getelementptr inbounds %struct.function, %struct.function* %add.ptr70, i32 0, i32 1, !dbg !4689
  %86 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg71, align 8, !dbg !4689
  %x_exit_block_ptr72 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %86, i32 0, i32 1, !dbg !4689
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr72, align 8, !dbg !4689
  %cmp73 = icmp ne %struct.basic_block_def* %84, %87, !dbg !4689
  br i1 %cmp73, label %for.body74, label %for.end103, !dbg !4687

for.body74:                                       ; preds = %for.cond69
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4691
  %index75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %88, i32 0, i32 9, !dbg !4693
  %89 = load i32, i32* %index75, align 8, !dbg !4693
  %90 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4694
  %91 = load i32, i32* @nr_regions, align 4, !dbg !4695
  %idxprom76 = sext i32 %91 to i64, !dbg !4694
  %arrayidx77 = getelementptr inbounds i32, i32* %90, i64 %idxprom76, !dbg !4694
  store i32 %89, i32* %arrayidx77, align 4, !dbg !4696
  %92 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4697
  %93 = load i32, i32* @nr_regions, align 4, !dbg !4697
  %idxprom78 = sext i32 %93 to i64, !dbg !4697
  %arrayidx79 = getelementptr inbounds %struct.region, %struct.region* %92, i64 %idxprom78, !dbg !4697
  %rgn_nr_blocks80 = getelementptr inbounds %struct.region, %struct.region* %arrayidx79, i32 0, i32 0, !dbg !4697
  store i32 1, i32* %rgn_nr_blocks80, align 4, !dbg !4698
  %94 = load i32, i32* @nr_regions, align 4, !dbg !4699
  %95 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4700
  %96 = load i32, i32* @nr_regions, align 4, !dbg !4700
  %idxprom81 = sext i32 %96 to i64, !dbg !4700
  %arrayidx82 = getelementptr inbounds %struct.region, %struct.region* %95, i64 %idxprom81, !dbg !4700
  %rgn_blocks83 = getelementptr inbounds %struct.region, %struct.region* %arrayidx82, i32 0, i32 1, !dbg !4700
  store i32 %94, i32* %rgn_blocks83, align 4, !dbg !4701
  %97 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4702
  %98 = load i32, i32* @nr_regions, align 4, !dbg !4702
  %idxprom84 = sext i32 %98 to i64, !dbg !4702
  %arrayidx85 = getelementptr inbounds %struct.region, %struct.region* %97, i64 %idxprom84, !dbg !4702
  %dont_calc_deps86 = getelementptr inbounds %struct.region, %struct.region* %arrayidx85, i32 0, i32 2, !dbg !4702
  %bf.load87 = load i8, i8* %dont_calc_deps86, align 4, !dbg !4703
  %bf.clear88 = and i8 %bf.load87, -2, !dbg !4703
  store i8 %bf.clear88, i8* %dont_calc_deps86, align 4, !dbg !4703
  %99 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4704
  %100 = load i32, i32* @nr_regions, align 4, !dbg !4704
  %idxprom89 = sext i32 %100 to i64, !dbg !4704
  %arrayidx90 = getelementptr inbounds %struct.region, %struct.region* %99, i64 %idxprom89, !dbg !4704
  %has_real_ebb91 = getelementptr inbounds %struct.region, %struct.region* %arrayidx90, i32 0, i32 2, !dbg !4704
  %bf.load92 = load i8, i8* %has_real_ebb91, align 4, !dbg !4705
  %bf.clear93 = and i8 %bf.load92, -3, !dbg !4705
  store i8 %bf.clear93, i8* %has_real_ebb91, align 4, !dbg !4705
  %101 = load i32, i32* @nr_regions, align 4, !dbg !4706
  %102 = load i32*, i32** @containing_rgn, align 8, !dbg !4707
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4707
  %index94 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %103, i32 0, i32 9, !dbg !4707
  %104 = load i32, i32* %index94, align 8, !dbg !4707
  %idxprom95 = sext i32 %104 to i64, !dbg !4707
  %arrayidx96 = getelementptr inbounds i32, i32* %102, i64 %idxprom95, !dbg !4707
  store i32 %101, i32* %arrayidx96, align 4, !dbg !4708
  %105 = load i32*, i32** @block_to_bb, align 8, !dbg !4709
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4709
  %index97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %106, i32 0, i32 9, !dbg !4709
  %107 = load i32, i32* %index97, align 8, !dbg !4709
  %idxprom98 = sext i32 %107 to i64, !dbg !4709
  %arrayidx99 = getelementptr inbounds i32, i32* %105, i64 %idxprom98, !dbg !4709
  store i32 0, i32* %arrayidx99, align 4, !dbg !4710
  %108 = load i32, i32* @nr_regions, align 4, !dbg !4711
  %inc100 = add nsw i32 %108, 1, !dbg !4711
  store i32 %inc100, i32* @nr_regions, align 4, !dbg !4711
  br label %for.inc101, !dbg !4712

for.inc101:                                       ; preds = %for.body74
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4689
  %next_bb102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %109, i32 0, i32 6, !dbg !4689
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb102, align 8, !dbg !4689
  store %struct.basic_block_def* %110, %struct.basic_block_def** %bb, align 8, !dbg !4689
  br label %for.cond69, !dbg !4689, !llvm.loop !4713

for.end103:                                       ; preds = %for.cond69
  br label %if.end104

if.end104:                                        ; preds = %for.end103, %for.end63
  ret void, !dbg !4715
}

declare dso_local void @calculate_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_rgns() #0 !dbg !4716 {
entry:
  %call = call zeroext i8 @sel_sched_p(), !dbg !4717
  %conv = zext i8 %call to i32, !dbg !4717
  %tobool = icmp ne i32 %conv, 0, !dbg !4717
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4719

land.lhs.true:                                    ; preds = %entry
  %0 = load i32, i32* @flag_sel_sched_pipelining, align 4, !dbg !4720
  %tobool1 = icmp ne i32 %0, 0, !dbg !4720
  br i1 %tobool1, label %if.then, label %if.else, !dbg !4721

if.then:                                          ; preds = %land.lhs.true
  call void @sel_find_rgns(), !dbg !4722
  br label %if.end, !dbg !4722

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @haifa_find_rgns(), !dbg !4723
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !4724
}

declare dso_local void @free_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_rgn_finish() #0 !dbg !4725 {
entry:
  %0 = load i32, i32* @reload_completed, align 4, !dbg !4726
  %tobool = icmp ne i32 %0, 0, !dbg !4726
  br i1 %tobool, label %if.then, label %if.end, !dbg !4728

if.then:                                          ; preds = %entry
  call void @reposition_prologue_and_epilogue_notes(), !dbg !4729
  br label %if.end, !dbg !4729

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @sched_verbose, align 4, !dbg !4730
  %tobool1 = icmp ne i32 %1, 0, !dbg !4730
  br i1 %tobool1, label %if.then2, label %if.end8, !dbg !4732

if.then2:                                         ; preds = %if.end
  %2 = load i32, i32* @reload_completed, align 4, !dbg !4733
  %cmp = icmp eq i32 %2, 0, !dbg !4736
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !4737

land.lhs.true:                                    ; preds = %if.then2
  %3 = load i32, i32* @flag_schedule_interblock, align 4, !dbg !4738
  %tobool3 = icmp ne i32 %3, 0, !dbg !4738
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !4739

if.then4:                                         ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4740
  %5 = load i32, i32* @nr_inter, align 4, !dbg !4742
  %6 = load i32, i32* @nr_spec, align 4, !dbg !4743
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.45, i64 0, i64 0), i32 %5, i32 %6), !dbg !4744
  br label %if.end6, !dbg !4745

if.else:                                          ; preds = %land.lhs.true, %if.then2
  %7 = load i32, i32* @nr_inter, align 4, !dbg !4746
  %cmp5 = icmp sle i32 %7, 0, !dbg !4746
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !4746

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3098, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4746
  br label %cond.end, !dbg !4746

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !4746

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4746
  br label %if.end6

if.end6:                                          ; preds = %cond.end, %if.then4
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !4747
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)), !dbg !4748
  br label %if.end8, !dbg !4749

if.end8:                                          ; preds = %if.end6, %if.end
  store i32 0, i32* @nr_regions, align 4, !dbg !4750
  %9 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4751
  %10 = bitcast %struct.region* %9 to i8*, !dbg !4751
  call void @free(i8* %10), !dbg !4752
  store %struct.region* null, %struct.region** @rgn_table, align 8, !dbg !4753
  %11 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4754
  %12 = bitcast i32* %11 to i8*, !dbg !4754
  call void @free(i8* %12), !dbg !4755
  store i32* null, i32** @rgn_bb_table, align 8, !dbg !4756
  %13 = load i32*, i32** @block_to_bb, align 8, !dbg !4757
  %14 = bitcast i32* %13 to i8*, !dbg !4757
  call void @free(i8* %14), !dbg !4758
  store i32* null, i32** @block_to_bb, align 8, !dbg !4759
  %15 = load i32*, i32** @containing_rgn, align 8, !dbg !4760
  %16 = bitcast i32* %15 to i8*, !dbg !4760
  call void @free(i8* %16), !dbg !4761
  store i32* null, i32** @containing_rgn, align 8, !dbg !4762
  %17 = load i32*, i32** @ebb_head, align 8, !dbg !4763
  %18 = bitcast i32* %17 to i8*, !dbg !4763
  call void @free(i8* %18), !dbg !4764
  store i32* null, i32** @ebb_head, align 8, !dbg !4765
  ret void, !dbg !4766
}

declare dso_local void @reposition_prologue_and_epilogue_notes() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @rgn_setup_region(i32 %rgn) #0 !dbg !4767 {
entry:
  %rgn.addr = alloca i32, align 4
  %bb = alloca i32, align 4
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !4768, metadata !DIExpression()), !dbg !4769
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !4770, metadata !DIExpression()), !dbg !4771
  %0 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4772
  %1 = load i32, i32* %rgn.addr, align 4, !dbg !4772
  %idxprom = sext i32 %1 to i64, !dbg !4772
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %0, i64 %idxprom, !dbg !4772
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 0, !dbg !4772
  %2 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !4772
  store i32 %2, i32* @current_nr_blocks, align 4, !dbg !4773
  %3 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4774
  %4 = load i32, i32* %rgn.addr, align 4, !dbg !4774
  %idxprom1 = sext i32 %4 to i64, !dbg !4774
  %arrayidx2 = getelementptr inbounds %struct.region, %struct.region* %3, i64 %idxprom1, !dbg !4774
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx2, i32 0, i32 1, !dbg !4774
  %5 = load i32, i32* %rgn_blocks, align 4, !dbg !4774
  store i32 %5, i32* @current_blocks, align 4, !dbg !4775
  %6 = load i32*, i32** @ebb_head, align 8, !dbg !4776
  %7 = bitcast i32* %6 to i8*, !dbg !4776
  %8 = load i32, i32* @current_nr_blocks, align 4, !dbg !4776
  %add = add nsw i32 %8, 1, !dbg !4776
  %conv = sext i32 %add to i64, !dbg !4776
  %mul = mul i64 4, %conv, !dbg !4776
  %call = call i8* @xrealloc(i8* %7, i64 %mul), !dbg !4776
  %9 = bitcast i8* %call to i32*, !dbg !4776
  store i32* %9, i32** @ebb_head, align 8, !dbg !4777
  store i32 0, i32* %bb, align 4, !dbg !4778
  br label %for.cond, !dbg !4780

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %bb, align 4, !dbg !4781
  %11 = load i32, i32* @current_nr_blocks, align 4, !dbg !4783
  %cmp = icmp sle i32 %10, %11, !dbg !4784
  br i1 %cmp, label %for.body, label %for.end, !dbg !4785

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* @current_blocks, align 4, !dbg !4786
  %13 = load i32, i32* %bb, align 4, !dbg !4787
  %add4 = add nsw i32 %12, %13, !dbg !4788
  %14 = load i32*, i32** @ebb_head, align 8, !dbg !4789
  %15 = load i32, i32* %bb, align 4, !dbg !4790
  %idxprom5 = sext i32 %15 to i64, !dbg !4789
  %arrayidx6 = getelementptr inbounds i32, i32* %14, i64 %idxprom5, !dbg !4789
  store i32 %add4, i32* %arrayidx6, align 4, !dbg !4791
  br label %for.inc, !dbg !4789

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %bb, align 4, !dbg !4792
  %inc = add nsw i32 %16, 1, !dbg !4792
  store i32 %inc, i32* %bb, align 4, !dbg !4792
  br label %for.cond, !dbg !4793, !llvm.loop !4794

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4796
}

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_rgn_compute_dependencies(i32 %rgn) #0 !dbg !4797 {
entry:
  %rgn.addr = alloca i32, align 4
  %bb = alloca i32, align 4
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !4798, metadata !DIExpression()), !dbg !4799
  %0 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4800
  %1 = load i32, i32* %rgn.addr, align 4, !dbg !4800
  %idxprom = sext i32 %1 to i64, !dbg !4800
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %0, i64 %idxprom, !dbg !4800
  %dont_calc_deps = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 2, !dbg !4800
  %bf.load = load i8, i8* %dont_calc_deps, align 4, !dbg !4800
  %bf.clear = and i8 %bf.load, 1, !dbg !4800
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4800
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4800
  br i1 %tobool, label %if.else, label %if.then, !dbg !4802

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !4803, metadata !DIExpression()), !dbg !4805
  %call = call zeroext i8 @sel_sched_p(), !dbg !4806
  %tobool1 = icmp ne i8 %call, 0, !dbg !4806
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !4808

if.then2:                                         ; preds = %if.then
  store i32 1, i32* @sched_emulate_haifa_p, align 4, !dbg !4809
  br label %if.end, !dbg !4810

if.end:                                           ; preds = %if.then2, %if.then
  call void @init_deps_global(), !dbg !4811
  %2 = load i32, i32* @current_nr_blocks, align 4, !dbg !4812
  %conv = sext i32 %2 to i64, !dbg !4812
  %mul = mul i64 184, %conv, !dbg !4812
  %call3 = call i8* @xmalloc(i64 %mul), !dbg !4812
  %3 = bitcast i8* %call3 to %struct.deps*, !dbg !4812
  store %struct.deps* %3, %struct.deps** @bb_deps, align 8, !dbg !4813
  store i32 0, i32* %bb, align 4, !dbg !4814
  br label %for.cond, !dbg !4816

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %bb, align 4, !dbg !4817
  %5 = load i32, i32* @current_nr_blocks, align 4, !dbg !4819
  %cmp = icmp slt i32 %4, %5, !dbg !4820
  br i1 %cmp, label %for.body, label %for.end, !dbg !4821

for.body:                                         ; preds = %for.cond
  %6 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !4822
  %7 = load i32, i32* %bb, align 4, !dbg !4823
  %idx.ext = sext i32 %7 to i64, !dbg !4824
  %add.ptr = getelementptr inbounds %struct.deps, %struct.deps* %6, i64 %idx.ext, !dbg !4824
  call void @init_deps(%struct.deps* %add.ptr, i8 zeroext 0), !dbg !4825
  br label %for.inc, !dbg !4825

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %bb, align 4, !dbg !4826
  %inc = add nsw i32 %8, 1, !dbg !4826
  store i32 %inc, i32* %bb, align 4, !dbg !4826
  br label %for.cond, !dbg !4827, !llvm.loop !4828

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* @sched_max_luid, align 4, !dbg !4830
  %call5 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %9), !dbg !4831
  store %struct.simple_bitmap_def* %call5, %struct.simple_bitmap_def** @insn_referenced, align 8, !dbg !4832
  %10 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @insn_referenced, align 8, !dbg !4833
  call void @sbitmap_zero(%struct.simple_bitmap_def* %10), !dbg !4834
  store i32 0, i32* %bb, align 4, !dbg !4835
  br label %for.cond6, !dbg !4837

for.cond6:                                        ; preds = %for.inc10, %for.end
  %11 = load i32, i32* %bb, align 4, !dbg !4838
  %12 = load i32, i32* @current_nr_blocks, align 4, !dbg !4840
  %cmp7 = icmp slt i32 %11, %12, !dbg !4841
  br i1 %cmp7, label %for.body9, label %for.end12, !dbg !4842

for.body9:                                        ; preds = %for.cond6
  %13 = load i32, i32* %bb, align 4, !dbg !4843
  call void @compute_block_dependences(i32 %13), !dbg !4844
  br label %for.inc10, !dbg !4844

for.inc10:                                        ; preds = %for.body9
  %14 = load i32, i32* %bb, align 4, !dbg !4845
  %inc11 = add nsw i32 %14, 1, !dbg !4845
  store i32 %inc11, i32* %bb, align 4, !dbg !4845
  br label %for.cond6, !dbg !4846, !llvm.loop !4847

for.end12:                                        ; preds = %for.cond6
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @insn_referenced, align 8, !dbg !4849
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %15, i32 0, i32 0, !dbg !4849
  %16 = load i8*, i8** %popcount, align 8, !dbg !4849
  call void @free(i8* %16), !dbg !4849
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @insn_referenced, align 8, !dbg !4849
  %18 = bitcast %struct.simple_bitmap_def* %17 to i8*, !dbg !4849
  call void @free(i8* %18), !dbg !4849
  call void @free_pending_lists(), !dbg !4850
  call void @finish_deps_global(), !dbg !4851
  %19 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !4852
  %20 = bitcast %struct.deps* %19 to i8*, !dbg !4852
  call void @free(i8* %20), !dbg !4853
  %21 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !4854
  %22 = load i32, i32* %rgn.addr, align 4, !dbg !4854
  %idxprom13 = sext i32 %22 to i64, !dbg !4854
  %arrayidx14 = getelementptr inbounds %struct.region, %struct.region* %21, i64 %idxprom13, !dbg !4854
  %dont_calc_deps15 = getelementptr inbounds %struct.region, %struct.region* %arrayidx14, i32 0, i32 2, !dbg !4854
  %bf.load16 = load i8, i8* %dont_calc_deps15, align 4, !dbg !4855
  %bf.clear17 = and i8 %bf.load16, -2, !dbg !4855
  %bf.set = or i8 %bf.clear17, 1, !dbg !4855
  store i8 %bf.set, i8* %dont_calc_deps15, align 4, !dbg !4855
  %call18 = call zeroext i8 @sel_sched_p(), !dbg !4856
  %tobool19 = icmp ne i8 %call18, 0, !dbg !4856
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !4858

if.then20:                                        ; preds = %for.end12
  store i32 0, i32* @sched_emulate_haifa_p, align 4, !dbg !4859
  br label %if.end21, !dbg !4860

if.end21:                                         ; preds = %if.then20, %for.end12
  br label %if.end27, !dbg !4861

if.else:                                          ; preds = %entry
  %23 = load i32, i32* @current_nr_blocks, align 4, !dbg !4862
  %cmp22 = icmp eq i32 %23, 1, !dbg !4862
  br i1 %cmp22, label %cond.false, label %lor.lhs.false, !dbg !4862

lor.lhs.false:                                    ; preds = %if.else
  %call24 = call zeroext i8 @sel_sched_p(), !dbg !4862
  %conv25 = zext i8 %call24 to i32, !dbg !4862
  %tobool26 = icmp ne i32 %conv25, 0, !dbg !4862
  br i1 %tobool26, label %cond.false, label %cond.true, !dbg !4862

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3179, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4862
  br label %cond.end, !dbg !4862

cond.false:                                       ; preds = %lor.lhs.false, %if.else
  br label %cond.end, !dbg !4862

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4862
  br label %if.end27

if.end27:                                         ; preds = %cond.end, %if.end21
  ret void, !dbg !4863
}

declare dso_local void @init_deps_global() #2

declare dso_local void @init_deps(%struct.deps*, i8 zeroext) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_block_dependences(i32 %bb) #0 !dbg !4864 {
entry:
  %bb.addr = alloca i32, align 4
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  %tmp_deps = alloca %struct.deps, align 8
  store i32 %bb, i32* %bb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb.addr, metadata !4865, metadata !DIExpression()), !dbg !4866
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !4867, metadata !DIExpression()), !dbg !4868
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !4869, metadata !DIExpression()), !dbg !4870
  call void @llvm.dbg.declare(metadata %struct.deps* %tmp_deps, metadata !4871, metadata !DIExpression()), !dbg !4872
  %0 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !4873
  %1 = load i32, i32* %bb.addr, align 4, !dbg !4874
  %idxprom = sext i32 %1 to i64, !dbg !4873
  %arrayidx = getelementptr inbounds %struct.deps, %struct.deps* %0, i64 %idxprom, !dbg !4873
  %2 = bitcast %struct.deps* %tmp_deps to i8*, !dbg !4873
  %3 = bitcast %struct.deps* %arrayidx to i8*, !dbg !4873
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 184, i1 false), !dbg !4873
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4875
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !4875
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4875
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4875
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 2, !dbg !4875
  %6 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4875
  %tobool = icmp ne %struct.VEC_basic_block_gc* %6, null, !dbg !4875
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4875

cond.true:                                        ; preds = %entry
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4875
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4875
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4875
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4875
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 2, !dbg !4875
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !4875
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %9, i32 0, i32 0, !dbg !4875
  br label %cond.end, !dbg !4875

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4875

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4875
  %10 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4875
  %11 = load i32*, i32** @ebb_head, align 8, !dbg !4875
  %12 = load i32, i32* %bb.addr, align 4, !dbg !4875
  %idxprom4 = sext i32 %12 to i64, !dbg !4875
  %arrayidx5 = getelementptr inbounds i32, i32* %11, i64 %idxprom4, !dbg !4875
  %13 = load i32, i32* %arrayidx5, align 4, !dbg !4875
  %idxprom6 = sext i32 %13 to i64, !dbg !4875
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i64 %idxprom6, !dbg !4875
  %14 = load i32, i32* %arrayidx7, align 4, !dbg !4875
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %14), !dbg !4875
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4875
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !4875
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !4875
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !4875
  %x_basic_block_info10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 2, !dbg !4875
  %17 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info10, align 8, !dbg !4875
  %tobool11 = icmp ne %struct.VEC_basic_block_gc* %17, null, !dbg !4875
  br i1 %tobool11, label %cond.true12, label %cond.false17, !dbg !4875

cond.true12:                                      ; preds = %cond.end
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4875
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !4875
  %cfg14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 1, !dbg !4875
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg14, align 8, !dbg !4875
  %x_basic_block_info15 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 2, !dbg !4875
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info15, align 8, !dbg !4875
  %base16 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %20, i32 0, i32 0, !dbg !4875
  br label %cond.end18, !dbg !4875

cond.false17:                                     ; preds = %cond.end
  br label %cond.end18, !dbg !4875

cond.end18:                                       ; preds = %cond.false17, %cond.true12
  %cond19 = phi %struct.VEC_basic_block_base* [ %base16, %cond.true12 ], [ null, %cond.false17 ], !dbg !4875
  %21 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4875
  %22 = load i32*, i32** @ebb_head, align 8, !dbg !4875
  %23 = load i32, i32* %bb.addr, align 4, !dbg !4875
  %add = add nsw i32 %23, 1, !dbg !4875
  %idxprom20 = sext i32 %add to i64, !dbg !4875
  %arrayidx21 = getelementptr inbounds i32, i32* %22, i64 %idxprom20, !dbg !4875
  %24 = load i32, i32* %arrayidx21, align 4, !dbg !4875
  %sub = sub nsw i32 %24, 1, !dbg !4875
  %idxprom22 = sext i32 %sub to i64, !dbg !4875
  %arrayidx23 = getelementptr inbounds i32, i32* %21, i64 %idxprom22, !dbg !4875
  %25 = load i32, i32* %arrayidx23, align 4, !dbg !4875
  %call24 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond19, i32 %25), !dbg !4875
  %cmp = icmp eq %struct.basic_block_def* %call, %call24, !dbg !4875
  br i1 %cmp, label %cond.false26, label %cond.true25, !dbg !4875

cond.true25:                                      ; preds = %cond.end18
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 2723, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !4875
  br label %cond.end27, !dbg !4875

cond.false26:                                     ; preds = %cond.end18
  br label %cond.end27, !dbg !4875

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !4875
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4876
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !4876
  %cfg30 = getelementptr inbounds %struct.function, %struct.function* %add.ptr29, i32 0, i32 1, !dbg !4876
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg30, align 8, !dbg !4876
  %x_basic_block_info31 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 2, !dbg !4876
  %28 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info31, align 8, !dbg !4876
  %tobool32 = icmp ne %struct.VEC_basic_block_gc* %28, null, !dbg !4876
  br i1 %tobool32, label %cond.true33, label %cond.false38, !dbg !4876

cond.true33:                                      ; preds = %cond.end27
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4876
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !4876
  %cfg35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 1, !dbg !4876
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg35, align 8, !dbg !4876
  %x_basic_block_info36 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 2, !dbg !4876
  %31 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info36, align 8, !dbg !4876
  %base37 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %31, i32 0, i32 0, !dbg !4876
  br label %cond.end39, !dbg !4876

cond.false38:                                     ; preds = %cond.end27
  br label %cond.end39, !dbg !4876

cond.end39:                                       ; preds = %cond.false38, %cond.true33
  %cond40 = phi %struct.VEC_basic_block_base* [ %base37, %cond.true33 ], [ null, %cond.false38 ], !dbg !4876
  %32 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4876
  %33 = load i32*, i32** @ebb_head, align 8, !dbg !4876
  %34 = load i32, i32* %bb.addr, align 4, !dbg !4876
  %idxprom41 = sext i32 %34 to i64, !dbg !4876
  %arrayidx42 = getelementptr inbounds i32, i32* %33, i64 %idxprom41, !dbg !4876
  %35 = load i32, i32* %arrayidx42, align 4, !dbg !4876
  %idxprom43 = sext i32 %35 to i64, !dbg !4876
  %arrayidx44 = getelementptr inbounds i32, i32* %32, i64 %idxprom43, !dbg !4876
  %36 = load i32, i32* %arrayidx44, align 4, !dbg !4876
  %call45 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond40, i32 %36), !dbg !4876
  %37 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4877
  %add.ptr46 = getelementptr inbounds %struct.function, %struct.function* %37, i64 0, !dbg !4877
  %cfg47 = getelementptr inbounds %struct.function, %struct.function* %add.ptr46, i32 0, i32 1, !dbg !4877
  %38 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg47, align 8, !dbg !4877
  %x_basic_block_info48 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %38, i32 0, i32 2, !dbg !4877
  %39 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info48, align 8, !dbg !4877
  %tobool49 = icmp ne %struct.VEC_basic_block_gc* %39, null, !dbg !4877
  br i1 %tobool49, label %cond.true50, label %cond.false55, !dbg !4877

cond.true50:                                      ; preds = %cond.end39
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4877
  %add.ptr51 = getelementptr inbounds %struct.function, %struct.function* %40, i64 0, !dbg !4877
  %cfg52 = getelementptr inbounds %struct.function, %struct.function* %add.ptr51, i32 0, i32 1, !dbg !4877
  %41 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg52, align 8, !dbg !4877
  %x_basic_block_info53 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %41, i32 0, i32 2, !dbg !4877
  %42 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info53, align 8, !dbg !4877
  %base54 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %42, i32 0, i32 0, !dbg !4877
  br label %cond.end56, !dbg !4877

cond.false55:                                     ; preds = %cond.end39
  br label %cond.end56, !dbg !4877

cond.end56:                                       ; preds = %cond.false55, %cond.true50
  %cond57 = phi %struct.VEC_basic_block_base* [ %base54, %cond.true50 ], [ null, %cond.false55 ], !dbg !4877
  %43 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4877
  %44 = load i32*, i32** @ebb_head, align 8, !dbg !4877
  %45 = load i32, i32* %bb.addr, align 4, !dbg !4877
  %add58 = add nsw i32 %45, 1, !dbg !4877
  %idxprom59 = sext i32 %add58 to i64, !dbg !4877
  %arrayidx60 = getelementptr inbounds i32, i32* %44, i64 %idxprom59, !dbg !4877
  %46 = load i32, i32* %arrayidx60, align 4, !dbg !4877
  %sub61 = sub nsw i32 %46, 1, !dbg !4877
  %idxprom62 = sext i32 %sub61 to i64, !dbg !4877
  %arrayidx63 = getelementptr inbounds i32, i32* %43, i64 %idxprom62, !dbg !4877
  %47 = load i32, i32* %arrayidx63, align 4, !dbg !4877
  %call64 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond57, i32 %47), !dbg !4877
  call void @get_ebb_head_tail(%struct.basic_block_def* %call45, %struct.basic_block_def* %call64, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !4878
  %48 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4879
  %49 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4880
  call void @sched_analyze(%struct.deps* %tmp_deps, %struct.rtx_def* %48, %struct.rtx_def* %49), !dbg !4881
  %call65 = call zeroext i8 @sel_sched_p(), !dbg !4882
  %tobool66 = icmp ne i8 %call65, 0, !dbg !4882
  br i1 %tobool66, label %if.end, label %if.then, !dbg !4884

if.then:                                          ; preds = %cond.end56
  %50 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4885
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4886
  call void @add_branch_dependences(%struct.rtx_def* %50, %struct.rtx_def* %51), !dbg !4887
  br label %if.end, !dbg !4887

if.end:                                           ; preds = %if.then, %cond.end56
  %52 = load i32, i32* @current_nr_blocks, align 4, !dbg !4888
  %cmp67 = icmp sgt i32 %52, 1, !dbg !4890
  br i1 %cmp67, label %if.then68, label %if.end69, !dbg !4891

if.then68:                                        ; preds = %if.end
  %53 = load i32, i32* %bb.addr, align 4, !dbg !4892
  call void @propagate_deps(i32 %53, %struct.deps* %tmp_deps), !dbg !4893
  br label %if.end69, !dbg !4893

if.end69:                                         ; preds = %if.then68, %if.end
  call void @free_deps(%struct.deps* %tmp_deps), !dbg !4894
  %54 = load void (%struct.rtx_def*, %struct.rtx_def*)*, void (%struct.rtx_def*, %struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 10), align 8, !dbg !4895
  %tobool70 = icmp ne void (%struct.rtx_def*, %struct.rtx_def*)* %54, null, !dbg !4897
  br i1 %tobool70, label %if.then71, label %if.end72, !dbg !4898

if.then71:                                        ; preds = %if.end69
  %55 = load void (%struct.rtx_def*, %struct.rtx_def*)*, void (%struct.rtx_def*, %struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 10), align 8, !dbg !4899
  %56 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !4900
  %57 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !4901
  call void %55(%struct.rtx_def* %56, %struct.rtx_def* %57), !dbg !4902
  br label %if.end72, !dbg !4902

if.end72:                                         ; preds = %if.then71, %if.end69
  ret void, !dbg !4903
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_pending_lists() #0 !dbg !4904 {
entry:
  %bb = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !4905, metadata !DIExpression()), !dbg !4906
  store i32 0, i32* %bb, align 4, !dbg !4907
  br label %for.cond, !dbg !4909

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %bb, align 4, !dbg !4910
  %1 = load i32, i32* @current_nr_blocks, align 4, !dbg !4912
  %cmp = icmp slt i32 %0, %1, !dbg !4913
  br i1 %cmp, label %for.body, label %for.end, !dbg !4914

for.body:                                         ; preds = %for.cond
  %2 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !4915
  %3 = load i32, i32* %bb, align 4, !dbg !4917
  %idxprom = sext i32 %3 to i64, !dbg !4915
  %arrayidx = getelementptr inbounds %struct.deps, %struct.deps* %2, i64 %idxprom, !dbg !4915
  %pending_read_insns = getelementptr inbounds %struct.deps, %struct.deps* %arrayidx, i32 0, i32 0, !dbg !4918
  call void @free_INSN_LIST_list(%struct.rtx_def** %pending_read_insns), !dbg !4919
  %4 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !4920
  %5 = load i32, i32* %bb, align 4, !dbg !4921
  %idxprom1 = sext i32 %5 to i64, !dbg !4920
  %arrayidx2 = getelementptr inbounds %struct.deps, %struct.deps* %4, i64 %idxprom1, !dbg !4920
  %pending_write_insns = getelementptr inbounds %struct.deps, %struct.deps* %arrayidx2, i32 0, i32 2, !dbg !4922
  call void @free_INSN_LIST_list(%struct.rtx_def** %pending_write_insns), !dbg !4923
  %6 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !4924
  %7 = load i32, i32* %bb, align 4, !dbg !4925
  %idxprom3 = sext i32 %7 to i64, !dbg !4924
  %arrayidx4 = getelementptr inbounds %struct.deps, %struct.deps* %6, i64 %idxprom3, !dbg !4924
  %pending_read_mems = getelementptr inbounds %struct.deps, %struct.deps* %arrayidx4, i32 0, i32 1, !dbg !4926
  call void @free_EXPR_LIST_list(%struct.rtx_def** %pending_read_mems), !dbg !4927
  %8 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !4928
  %9 = load i32, i32* %bb, align 4, !dbg !4929
  %idxprom5 = sext i32 %9 to i64, !dbg !4928
  %arrayidx6 = getelementptr inbounds %struct.deps, %struct.deps* %8, i64 %idxprom5, !dbg !4928
  %pending_write_mems = getelementptr inbounds %struct.deps, %struct.deps* %arrayidx6, i32 0, i32 3, !dbg !4930
  call void @free_EXPR_LIST_list(%struct.rtx_def** %pending_write_mems), !dbg !4931
  br label %for.inc, !dbg !4932

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %bb, align 4, !dbg !4933
  %inc = add nsw i32 %10, 1, !dbg !4933
  store i32 %inc, i32* %bb, align 4, !dbg !4933
  br label %for.cond, !dbg !4934, !llvm.loop !4935

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4937
}

declare dso_local void @finish_deps_global() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_rgn_local_init(i32 %rgn) #0 !dbg !4938 {
entry:
  %rgn.addr = alloca i32, align 4
  %bb = alloca i32, align 4
  %block = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp38 = alloca %struct.edge_iterator, align 8
  %tmp80 = alloca %struct.edge_iterator, align 8
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !4939, metadata !DIExpression()), !dbg !4940
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !4941, metadata !DIExpression()), !dbg !4942
  %0 = load i32, i32* @current_nr_blocks, align 4, !dbg !4943
  %cmp = icmp sgt i32 %0, 1, !dbg !4945
  br i1 %cmp, label %if.then, label %if.end93, !dbg !4946

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block, metadata !4947, metadata !DIExpression()), !dbg !4949
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4950, metadata !DIExpression()), !dbg !4951
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4952, metadata !DIExpression()), !dbg !4953
  %1 = load i32, i32* @current_nr_blocks, align 4, !dbg !4954
  %conv = sext i32 %1 to i64, !dbg !4954
  %mul = mul i64 4, %conv, !dbg !4954
  %call = call i8* @xmalloc(i64 %mul), !dbg !4954
  %2 = bitcast i8* %call to i32*, !dbg !4954
  store i32* %2, i32** @prob, align 8, !dbg !4955
  %3 = load i32, i32* @current_nr_blocks, align 4, !dbg !4956
  %4 = load i32, i32* @current_nr_blocks, align 4, !dbg !4957
  %call1 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %3, i32 %4), !dbg !4958
  store %struct.simple_bitmap_def** %call1, %struct.simple_bitmap_def*** @dom, align 8, !dbg !4959
  %5 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @dom, align 8, !dbg !4960
  %6 = load i32, i32* @current_nr_blocks, align 4, !dbg !4961
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %5, i32 %6), !dbg !4962
  store i32 0, i32* @rgn_nr_edges, align 4, !dbg !4963
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4964
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4964
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4964
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4964
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 0, !dbg !4964
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4964
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 6, !dbg !4964
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4964
  store %struct.basic_block_def* %10, %struct.basic_block_def** %block, align 8, !dbg !4964
  br label %for.cond, !dbg !4964

for.cond:                                         ; preds = %for.inc14, %if.then
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4966
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4966
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !4966
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !4966
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !4966
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 1, !dbg !4966
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4966
  %cmp4 = icmp ne %struct.basic_block_def* %11, %14, !dbg !4966
  br i1 %cmp4, label %for.body, label %for.end16, !dbg !4964

for.body:                                         ; preds = %for.cond
  %15 = load i32*, i32** @containing_rgn, align 8, !dbg !4968
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4968
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !4968
  %17 = load i32, i32* %index, align 8, !dbg !4968
  %idxprom = sext i32 %17 to i64, !dbg !4968
  %arrayidx = getelementptr inbounds i32, i32* %15, i64 %idxprom, !dbg !4968
  %18 = load i32, i32* %arrayidx, align 4, !dbg !4968
  %19 = load i32, i32* %rgn.addr, align 4, !dbg !4971
  %cmp6 = icmp ne i32 %18, %19, !dbg !4972
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !4973

if.then8:                                         ; preds = %for.body
  br label %for.inc14, !dbg !4974

if.end:                                           ; preds = %for.body
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4975
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 1, !dbg !4975
  %call9 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4975
  %21 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4975
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 0, !dbg !4975
  %23 = extractvalue { i32, %struct.VEC_edge_gc** } %call9, 0, !dbg !4975
  store i32 %23, i32* %22, align 8, !dbg !4975
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 1, !dbg !4975
  %25 = extractvalue { i32, %struct.VEC_edge_gc** } %call9, 1, !dbg !4975
  store %struct.VEC_edge_gc** %25, %struct.VEC_edge_gc*** %24, align 8, !dbg !4975
  %26 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4975
  %27 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4975
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !4975
  br label %for.cond10, !dbg !4975

for.cond10:                                       ; preds = %for.inc, %if.end
  %28 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4977
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 0, !dbg !4977
  %30 = load i32, i32* %29, align 8, !dbg !4977
  %31 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 1, !dbg !4977
  %32 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %31, align 8, !dbg !4977
  %call11 = call zeroext i8 @ei_cond(i32 %30, %struct.VEC_edge_gc** %32, %struct.edge_def** %e), !dbg !4977
  %tobool = icmp ne i8 %call11, 0, !dbg !4975
  br i1 %tobool, label %for.body12, label %for.end, !dbg !4975

for.body12:                                       ; preds = %for.cond10
  %33 = load i32, i32* @rgn_nr_edges, align 4, !dbg !4979
  %inc = add nsw i32 %33, 1, !dbg !4979
  store i32 %inc, i32* @rgn_nr_edges, align 4, !dbg !4979
  %conv13 = sext i32 %33 to i64, !dbg !4979
  %34 = inttoptr i64 %conv13 to i8*, !dbg !4979
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4979
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 3, !dbg !4979
  store i8* %34, i8** %aux, align 8, !dbg !4979
  br label %for.inc, !dbg !4979

for.inc:                                          ; preds = %for.body12
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4977
  br label %for.cond10, !dbg !4977, !llvm.loop !4980

for.end:                                          ; preds = %for.cond10
  br label %for.inc14, !dbg !4982

for.inc14:                                        ; preds = %for.end, %if.then8
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4966
  %next_bb15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 6, !dbg !4966
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb15, align 8, !dbg !4966
  store %struct.basic_block_def* %37, %struct.basic_block_def** %block, align 8, !dbg !4966
  br label %for.cond, !dbg !4966, !llvm.loop !4983

for.end16:                                        ; preds = %for.cond
  %38 = load i32, i32* @rgn_nr_edges, align 4, !dbg !4985
  %conv17 = sext i32 %38 to i64, !dbg !4985
  %mul18 = mul i64 8, %conv17, !dbg !4985
  %call19 = call i8* @xmalloc(i64 %mul18), !dbg !4985
  %39 = bitcast i8* %call19 to %struct.edge_def**, !dbg !4985
  store %struct.edge_def** %39, %struct.edge_def*** @rgn_edges, align 8, !dbg !4986
  store i32 0, i32* @rgn_nr_edges, align 4, !dbg !4987
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4988
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %40, i64 0, !dbg !4988
  %cfg21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 1, !dbg !4988
  %41 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg21, align 8, !dbg !4988
  %x_entry_block_ptr22 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %41, i32 0, i32 0, !dbg !4988
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr22, align 8, !dbg !4988
  %next_bb23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 6, !dbg !4988
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb23, align 8, !dbg !4988
  store %struct.basic_block_def* %43, %struct.basic_block_def** %block, align 8, !dbg !4988
  br label %for.cond24, !dbg !4988

for.cond24:                                       ; preds = %for.inc50, %for.end16
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4990
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4990
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !4990
  %cfg26 = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 1, !dbg !4990
  %46 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg26, align 8, !dbg !4990
  %x_exit_block_ptr27 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %46, i32 0, i32 1, !dbg !4990
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr27, align 8, !dbg !4990
  %cmp28 = icmp ne %struct.basic_block_def* %44, %47, !dbg !4990
  br i1 %cmp28, label %for.body30, label %for.end52, !dbg !4988

for.body30:                                       ; preds = %for.cond24
  %48 = load i32*, i32** @containing_rgn, align 8, !dbg !4992
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4992
  %index31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 9, !dbg !4992
  %50 = load i32, i32* %index31, align 8, !dbg !4992
  %idxprom32 = sext i32 %50 to i64, !dbg !4992
  %arrayidx33 = getelementptr inbounds i32, i32* %48, i64 %idxprom32, !dbg !4992
  %51 = load i32, i32* %arrayidx33, align 4, !dbg !4992
  %52 = load i32, i32* %rgn.addr, align 4, !dbg !4995
  %cmp34 = icmp ne i32 %51, %52, !dbg !4996
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !4997

if.then36:                                        ; preds = %for.body30
  br label %for.inc50, !dbg !4998

if.end37:                                         ; preds = %for.body30
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4999
  %succs39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 1, !dbg !4999
  %call40 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs39), !dbg !4999
  %54 = bitcast %struct.edge_iterator* %tmp38 to { i32, %struct.VEC_edge_gc** }*, !dbg !4999
  %55 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %54, i32 0, i32 0, !dbg !4999
  %56 = extractvalue { i32, %struct.VEC_edge_gc** } %call40, 0, !dbg !4999
  store i32 %56, i32* %55, align 8, !dbg !4999
  %57 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %54, i32 0, i32 1, !dbg !4999
  %58 = extractvalue { i32, %struct.VEC_edge_gc** } %call40, 1, !dbg !4999
  store %struct.VEC_edge_gc** %58, %struct.VEC_edge_gc*** %57, align 8, !dbg !4999
  %59 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4999
  %60 = bitcast %struct.edge_iterator* %tmp38 to i8*, !dbg !4999
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false), !dbg !4999
  br label %for.cond41, !dbg !4999

for.cond41:                                       ; preds = %for.inc48, %if.end37
  %61 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5001
  %62 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %61, i32 0, i32 0, !dbg !5001
  %63 = load i32, i32* %62, align 8, !dbg !5001
  %64 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %61, i32 0, i32 1, !dbg !5001
  %65 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %64, align 8, !dbg !5001
  %call42 = call zeroext i8 @ei_cond(i32 %63, %struct.VEC_edge_gc** %65, %struct.edge_def** %e), !dbg !5001
  %tobool43 = icmp ne i8 %call42, 0, !dbg !4999
  br i1 %tobool43, label %for.body44, label %for.end49, !dbg !4999

for.body44:                                       ; preds = %for.cond41
  %66 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5003
  %67 = load %struct.edge_def**, %struct.edge_def*** @rgn_edges, align 8, !dbg !5004
  %68 = load i32, i32* @rgn_nr_edges, align 4, !dbg !5005
  %inc45 = add nsw i32 %68, 1, !dbg !5005
  store i32 %inc45, i32* @rgn_nr_edges, align 4, !dbg !5005
  %idxprom46 = sext i32 %68 to i64, !dbg !5004
  %arrayidx47 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %67, i64 %idxprom46, !dbg !5004
  store %struct.edge_def* %66, %struct.edge_def** %arrayidx47, align 8, !dbg !5006
  br label %for.inc48, !dbg !5004

for.inc48:                                        ; preds = %for.body44
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5001
  br label %for.cond41, !dbg !5001, !llvm.loop !5007

for.end49:                                        ; preds = %for.cond41
  br label %for.inc50, !dbg !5009

for.inc50:                                        ; preds = %for.end49, %if.then36
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4990
  %next_bb51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 6, !dbg !4990
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb51, align 8, !dbg !4990
  store %struct.basic_block_def* %70, %struct.basic_block_def** %block, align 8, !dbg !4990
  br label %for.cond24, !dbg !4990, !llvm.loop !5010

for.end52:                                        ; preds = %for.cond24
  %71 = load i32, i32* @current_nr_blocks, align 4, !dbg !5012
  %72 = load i32, i32* @rgn_nr_edges, align 4, !dbg !5013
  %call53 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %71, i32 %72), !dbg !5014
  store %struct.simple_bitmap_def** %call53, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !5015
  %73 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !5016
  %74 = load i32, i32* @current_nr_blocks, align 4, !dbg !5017
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %73, i32 %74), !dbg !5018
  %75 = load i32, i32* @current_nr_blocks, align 4, !dbg !5019
  %76 = load i32, i32* @rgn_nr_edges, align 4, !dbg !5020
  %call54 = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %75, i32 %76), !dbg !5021
  store %struct.simple_bitmap_def** %call54, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !5022
  %77 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !5023
  %78 = load i32, i32* @current_nr_blocks, align 4, !dbg !5024
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %77, i32 %78), !dbg !5025
  store i32 0, i32* %bb, align 4, !dbg !5026
  br label %for.cond55, !dbg !5028

for.cond55:                                       ; preds = %for.inc59, %for.end52
  %79 = load i32, i32* %bb, align 4, !dbg !5029
  %80 = load i32, i32* @current_nr_blocks, align 4, !dbg !5031
  %cmp56 = icmp slt i32 %79, %80, !dbg !5032
  br i1 %cmp56, label %for.body58, label %for.end61, !dbg !5033

for.body58:                                       ; preds = %for.cond55
  %81 = load i32, i32* %bb, align 4, !dbg !5034
  call void @compute_dom_prob_ps(i32 %81), !dbg !5035
  br label %for.inc59, !dbg !5035

for.inc59:                                        ; preds = %for.body58
  %82 = load i32, i32* %bb, align 4, !dbg !5036
  %inc60 = add nsw i32 %82, 1, !dbg !5036
  store i32 %inc60, i32* %bb, align 4, !dbg !5036
  br label %for.cond55, !dbg !5037, !llvm.loop !5038

for.end61:                                        ; preds = %for.cond55
  %83 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5040
  %add.ptr62 = getelementptr inbounds %struct.function, %struct.function* %83, i64 0, !dbg !5040
  %cfg63 = getelementptr inbounds %struct.function, %struct.function* %add.ptr62, i32 0, i32 1, !dbg !5040
  %84 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg63, align 8, !dbg !5040
  %x_entry_block_ptr64 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %84, i32 0, i32 0, !dbg !5040
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr64, align 8, !dbg !5040
  %next_bb65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 6, !dbg !5040
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb65, align 8, !dbg !5040
  store %struct.basic_block_def* %86, %struct.basic_block_def** %block, align 8, !dbg !5040
  br label %for.cond66, !dbg !5040

for.cond66:                                       ; preds = %for.inc90, %for.end61
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !5042
  %88 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5042
  %add.ptr67 = getelementptr inbounds %struct.function, %struct.function* %88, i64 0, !dbg !5042
  %cfg68 = getelementptr inbounds %struct.function, %struct.function* %add.ptr67, i32 0, i32 1, !dbg !5042
  %89 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg68, align 8, !dbg !5042
  %x_exit_block_ptr69 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %89, i32 0, i32 1, !dbg !5042
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr69, align 8, !dbg !5042
  %cmp70 = icmp ne %struct.basic_block_def* %87, %90, !dbg !5042
  br i1 %cmp70, label %for.body72, label %for.end92, !dbg !5040

for.body72:                                       ; preds = %for.cond66
  %91 = load i32*, i32** @containing_rgn, align 8, !dbg !5044
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !5044
  %index73 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 9, !dbg !5044
  %93 = load i32, i32* %index73, align 8, !dbg !5044
  %idxprom74 = sext i32 %93 to i64, !dbg !5044
  %arrayidx75 = getelementptr inbounds i32, i32* %91, i64 %idxprom74, !dbg !5044
  %94 = load i32, i32* %arrayidx75, align 4, !dbg !5044
  %95 = load i32, i32* %rgn.addr, align 4, !dbg !5047
  %cmp76 = icmp ne i32 %94, %95, !dbg !5048
  br i1 %cmp76, label %if.then78, label %if.end79, !dbg !5049

if.then78:                                        ; preds = %for.body72
  br label %for.inc90, !dbg !5050

if.end79:                                         ; preds = %for.body72
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !5051
  %succs81 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %96, i32 0, i32 1, !dbg !5051
  %call82 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs81), !dbg !5051
  %97 = bitcast %struct.edge_iterator* %tmp80 to { i32, %struct.VEC_edge_gc** }*, !dbg !5051
  %98 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %97, i32 0, i32 0, !dbg !5051
  %99 = extractvalue { i32, %struct.VEC_edge_gc** } %call82, 0, !dbg !5051
  store i32 %99, i32* %98, align 8, !dbg !5051
  %100 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %97, i32 0, i32 1, !dbg !5051
  %101 = extractvalue { i32, %struct.VEC_edge_gc** } %call82, 1, !dbg !5051
  store %struct.VEC_edge_gc** %101, %struct.VEC_edge_gc*** %100, align 8, !dbg !5051
  %102 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5051
  %103 = bitcast %struct.edge_iterator* %tmp80 to i8*, !dbg !5051
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 16, i1 false), !dbg !5051
  br label %for.cond83, !dbg !5051

for.cond83:                                       ; preds = %for.inc88, %if.end79
  %104 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5053
  %105 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %104, i32 0, i32 0, !dbg !5053
  %106 = load i32, i32* %105, align 8, !dbg !5053
  %107 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %104, i32 0, i32 1, !dbg !5053
  %108 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %107, align 8, !dbg !5053
  %call84 = call zeroext i8 @ei_cond(i32 %106, %struct.VEC_edge_gc** %108, %struct.edge_def** %e), !dbg !5053
  %tobool85 = icmp ne i8 %call84, 0, !dbg !5051
  br i1 %tobool85, label %for.body86, label %for.end89, !dbg !5051

for.body86:                                       ; preds = %for.cond83
  %109 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5055
  %aux87 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %109, i32 0, i32 3, !dbg !5056
  store i8* null, i8** %aux87, align 8, !dbg !5057
  br label %for.inc88, !dbg !5055

for.inc88:                                        ; preds = %for.body86
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5053
  br label %for.cond83, !dbg !5053, !llvm.loop !5058

for.end89:                                        ; preds = %for.cond83
  br label %for.inc90, !dbg !5060

for.inc90:                                        ; preds = %for.end89, %if.then78
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !5042
  %next_bb91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %110, i32 0, i32 6, !dbg !5042
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb91, align 8, !dbg !5042
  store %struct.basic_block_def* %111, %struct.basic_block_def** %block, align 8, !dbg !5042
  br label %for.cond66, !dbg !5042, !llvm.loop !5061

for.end92:                                        ; preds = %for.cond66
  br label %if.end93, !dbg !5063

if.end93:                                         ; preds = %for.end92, %entry
  ret void, !dbg !5064
}

declare dso_local %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32, i32) #2

declare dso_local void @sbitmap_vector_zero(%struct.simple_bitmap_def**, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_dom_prob_ps(i32 %bb) #0 !dbg !5065 {
entry:
  %bb.addr = alloca i32, align 4
  %in_ei = alloca %struct.edge_iterator, align 8
  %in_edge = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %pred_bb = alloca i32, align 4
  %out_edge = alloca %struct.edge_def*, align 8
  %out_ei = alloca %struct.edge_iterator, align 8
  %tmp52 = alloca %struct.edge_iterator, align 8
  store i32 %bb, i32* %bb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb.addr, metadata !5066, metadata !DIExpression()), !dbg !5067
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %in_ei, metadata !5068, metadata !DIExpression()), !dbg !5069
  call void @llvm.dbg.declare(metadata %struct.edge_def** %in_edge, metadata !5070, metadata !DIExpression()), !dbg !5071
  %0 = load i32*, i32** @ebb_head, align 8, !dbg !5072
  %1 = load i32, i32* %bb.addr, align 4, !dbg !5072
  %idxprom = sext i32 %1 to i64, !dbg !5072
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !5072
  %2 = load i32, i32* %arrayidx, align 4, !dbg !5072
  %3 = load i32, i32* %bb.addr, align 4, !dbg !5072
  %4 = load i32, i32* @current_blocks, align 4, !dbg !5072
  %add = add nsw i32 %3, %4, !dbg !5072
  %cmp = icmp eq i32 %2, %add, !dbg !5072
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5072

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 1410, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5072
  br label %cond.end, !dbg !5072

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5072
  %5 = load i32, i32* %bb.addr, align 4, !dbg !5073
  %tobool = icmp ne i32 %5, 0, !dbg !5073
  br i1 %tobool, label %if.end, label %if.then, !dbg !5075

if.then:                                          ; preds = %cond.end
  %6 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @dom, align 8, !dbg !5076
  %7 = load i32, i32* %bb.addr, align 4, !dbg !5078
  %idxprom1 = sext i32 %7 to i64, !dbg !5076
  %arrayidx2 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %6, i64 %idxprom1, !dbg !5076
  %8 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx2, align 8, !dbg !5076
  call void @SET_BIT(%struct.simple_bitmap_def* %8, i32 0), !dbg !5079
  %9 = load i32*, i32** @prob, align 8, !dbg !5080
  %10 = load i32, i32* %bb.addr, align 4, !dbg !5081
  %idxprom3 = sext i32 %10 to i64, !dbg !5080
  %arrayidx4 = getelementptr inbounds i32, i32* %9, i64 %idxprom3, !dbg !5080
  store i32 10000, i32* %arrayidx4, align 4, !dbg !5082
  br label %if.end90, !dbg !5083

if.end:                                           ; preds = %cond.end
  %11 = load i32*, i32** @prob, align 8, !dbg !5084
  %12 = load i32, i32* %bb.addr, align 4, !dbg !5085
  %idxprom5 = sext i32 %12 to i64, !dbg !5084
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i64 %idxprom5, !dbg !5084
  store i32 0, i32* %arrayidx6, align 4, !dbg !5086
  %13 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @dom, align 8, !dbg !5087
  %14 = load i32, i32* %bb.addr, align 4, !dbg !5088
  %idxprom7 = sext i32 %14 to i64, !dbg !5087
  %arrayidx8 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %13, i64 %idxprom7, !dbg !5087
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx8, align 8, !dbg !5087
  call void @sbitmap_ones(%struct.simple_bitmap_def* %15), !dbg !5089
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5090
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5090
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5090
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5090
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 2, !dbg !5090
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !5090
  %tobool9 = icmp ne %struct.VEC_basic_block_gc* %18, null, !dbg !5090
  br i1 %tobool9, label %cond.true10, label %cond.false14, !dbg !5090

cond.true10:                                      ; preds = %if.end
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5090
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !5090
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !5090
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !5090
  %x_basic_block_info13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 2, !dbg !5090
  %21 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info13, align 8, !dbg !5090
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %21, i32 0, i32 0, !dbg !5090
  br label %cond.end15, !dbg !5090

cond.false14:                                     ; preds = %if.end
  br label %cond.end15, !dbg !5090

cond.end15:                                       ; preds = %cond.false14, %cond.true10
  %cond16 = phi %struct.VEC_basic_block_base* [ %base, %cond.true10 ], [ null, %cond.false14 ], !dbg !5090
  %22 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5090
  %23 = load i32*, i32** @ebb_head, align 8, !dbg !5090
  %24 = load i32, i32* %bb.addr, align 4, !dbg !5090
  %idxprom17 = sext i32 %24 to i64, !dbg !5090
  %arrayidx18 = getelementptr inbounds i32, i32* %23, i64 %idxprom17, !dbg !5090
  %25 = load i32, i32* %arrayidx18, align 4, !dbg !5090
  %idxprom19 = sext i32 %25 to i64, !dbg !5090
  %arrayidx20 = getelementptr inbounds i32, i32* %22, i64 %idxprom19, !dbg !5090
  %26 = load i32, i32* %arrayidx20, align 4, !dbg !5090
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond16, i32 %26), !dbg !5090
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !5090
  %call21 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5090
  %27 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5090
  %28 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %27, i32 0, i32 0, !dbg !5090
  %29 = extractvalue { i32, %struct.VEC_edge_gc** } %call21, 0, !dbg !5090
  store i32 %29, i32* %28, align 8, !dbg !5090
  %30 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %27, i32 0, i32 1, !dbg !5090
  %31 = extractvalue { i32, %struct.VEC_edge_gc** } %call21, 1, !dbg !5090
  store %struct.VEC_edge_gc** %31, %struct.VEC_edge_gc*** %30, align 8, !dbg !5090
  %32 = bitcast %struct.edge_iterator* %in_ei to i8*, !dbg !5090
  %33 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5090
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false), !dbg !5090
  br label %for.cond, !dbg !5090

for.cond:                                         ; preds = %for.inc68, %cond.end15
  %34 = bitcast %struct.edge_iterator* %in_ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5092
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 0, !dbg !5092
  %36 = load i32, i32* %35, align 8, !dbg !5092
  %37 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 1, !dbg !5092
  %38 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %37, align 8, !dbg !5092
  %call22 = call zeroext i8 @ei_cond(i32 %36, %struct.VEC_edge_gc** %38, %struct.edge_def** %in_edge), !dbg !5092
  %tobool23 = icmp ne i8 %call22, 0, !dbg !5090
  br i1 %tobool23, label %for.body, label %for.end69, !dbg !5090

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %pred_bb, metadata !5094, metadata !DIExpression()), !dbg !5096
  call void @llvm.dbg.declare(metadata %struct.edge_def** %out_edge, metadata !5097, metadata !DIExpression()), !dbg !5098
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %out_ei, metadata !5099, metadata !DIExpression()), !dbg !5100
  %39 = load %struct.edge_def*, %struct.edge_def** %in_edge, align 8, !dbg !5101
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 0, !dbg !5103
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5103
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5104
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !5104
  %cfg25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 1, !dbg !5104
  %42 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg25, align 8, !dbg !5104
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i32 0, i32 0, !dbg !5104
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5104
  %cmp26 = icmp eq %struct.basic_block_def* %40, %43, !dbg !5105
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !5106

if.then27:                                        ; preds = %for.body
  br label %for.inc68, !dbg !5107

if.end28:                                         ; preds = %for.body
  %44 = load i32*, i32** @block_to_bb, align 8, !dbg !5108
  %45 = load %struct.edge_def*, %struct.edge_def** %in_edge, align 8, !dbg !5108
  %src29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 0, !dbg !5108
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %src29, align 8, !dbg !5108
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 9, !dbg !5108
  %47 = load i32, i32* %index, align 8, !dbg !5108
  %idxprom30 = sext i32 %47 to i64, !dbg !5108
  %arrayidx31 = getelementptr inbounds i32, i32* %44, i64 %idxprom30, !dbg !5108
  %48 = load i32, i32* %arrayidx31, align 4, !dbg !5108
  store i32 %48, i32* %pred_bb, align 4, !dbg !5109
  %49 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @dom, align 8, !dbg !5110
  %50 = load i32, i32* %bb.addr, align 4, !dbg !5111
  %idxprom32 = sext i32 %50 to i64, !dbg !5110
  %arrayidx33 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %49, i64 %idxprom32, !dbg !5110
  %51 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx33, align 8, !dbg !5110
  %52 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @dom, align 8, !dbg !5112
  %53 = load i32, i32* %bb.addr, align 4, !dbg !5113
  %idxprom34 = sext i32 %53 to i64, !dbg !5112
  %arrayidx35 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %52, i64 %idxprom34, !dbg !5112
  %54 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx35, align 8, !dbg !5112
  %55 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @dom, align 8, !dbg !5114
  %56 = load i32, i32* %pred_bb, align 4, !dbg !5115
  %idxprom36 = sext i32 %56 to i64, !dbg !5114
  %arrayidx37 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %55, i64 %idxprom36, !dbg !5114
  %57 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx37, align 8, !dbg !5114
  call void @sbitmap_a_and_b(%struct.simple_bitmap_def* %51, %struct.simple_bitmap_def* %54, %struct.simple_bitmap_def* %57), !dbg !5116
  %58 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !5117
  %59 = load i32, i32* %bb.addr, align 4, !dbg !5118
  %idxprom38 = sext i32 %59 to i64, !dbg !5117
  %arrayidx39 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %58, i64 %idxprom38, !dbg !5117
  %60 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx39, align 8, !dbg !5117
  %61 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !5119
  %62 = load i32, i32* %bb.addr, align 4, !dbg !5120
  %idxprom40 = sext i32 %62 to i64, !dbg !5119
  %arrayidx41 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %61, i64 %idxprom40, !dbg !5119
  %63 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx41, align 8, !dbg !5119
  %64 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !5121
  %65 = load i32, i32* %pred_bb, align 4, !dbg !5122
  %idxprom42 = sext i32 %65 to i64, !dbg !5121
  %arrayidx43 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %64, i64 %idxprom42, !dbg !5121
  %66 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx43, align 8, !dbg !5121
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %60, %struct.simple_bitmap_def* %63, %struct.simple_bitmap_def* %66), !dbg !5123
  %67 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !5124
  %68 = load i32, i32* %bb.addr, align 4, !dbg !5125
  %idxprom44 = sext i32 %68 to i64, !dbg !5124
  %arrayidx45 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %67, i64 %idxprom44, !dbg !5124
  %69 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx45, align 8, !dbg !5124
  %70 = load %struct.edge_def*, %struct.edge_def** %in_edge, align 8, !dbg !5126
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %70, i32 0, i32 3, !dbg !5126
  %71 = load i8*, i8** %aux, align 8, !dbg !5126
  %72 = ptrtoint i8* %71 to i64, !dbg !5126
  %conv = trunc i64 %72 to i32, !dbg !5126
  call void @SET_BIT(%struct.simple_bitmap_def* %69, i32 %conv), !dbg !5127
  %73 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !5128
  %74 = load i32, i32* %bb.addr, align 4, !dbg !5129
  %idxprom46 = sext i32 %74 to i64, !dbg !5128
  %arrayidx47 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %73, i64 %idxprom46, !dbg !5128
  %75 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx47, align 8, !dbg !5128
  %76 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !5130
  %77 = load i32, i32* %bb.addr, align 4, !dbg !5131
  %idxprom48 = sext i32 %77 to i64, !dbg !5130
  %arrayidx49 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %76, i64 %idxprom48, !dbg !5130
  %78 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx49, align 8, !dbg !5130
  %79 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !5132
  %80 = load i32, i32* %pred_bb, align 4, !dbg !5133
  %idxprom50 = sext i32 %80 to i64, !dbg !5132
  %arrayidx51 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %79, i64 %idxprom50, !dbg !5132
  %81 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx51, align 8, !dbg !5132
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %75, %struct.simple_bitmap_def* %78, %struct.simple_bitmap_def* %81), !dbg !5134
  %82 = load %struct.edge_def*, %struct.edge_def** %in_edge, align 8, !dbg !5135
  %src53 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %82, i32 0, i32 0, !dbg !5135
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %src53, align 8, !dbg !5135
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 1, !dbg !5135
  %call54 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5135
  %84 = bitcast %struct.edge_iterator* %tmp52 to { i32, %struct.VEC_edge_gc** }*, !dbg !5135
  %85 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %84, i32 0, i32 0, !dbg !5135
  %86 = extractvalue { i32, %struct.VEC_edge_gc** } %call54, 0, !dbg !5135
  store i32 %86, i32* %85, align 8, !dbg !5135
  %87 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %84, i32 0, i32 1, !dbg !5135
  %88 = extractvalue { i32, %struct.VEC_edge_gc** } %call54, 1, !dbg !5135
  store %struct.VEC_edge_gc** %88, %struct.VEC_edge_gc*** %87, align 8, !dbg !5135
  %89 = bitcast %struct.edge_iterator* %out_ei to i8*, !dbg !5135
  %90 = bitcast %struct.edge_iterator* %tmp52 to i8*, !dbg !5135
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 16, i1 false), !dbg !5135
  br label %for.cond55, !dbg !5135

for.cond55:                                       ; preds = %for.inc, %if.end28
  %91 = bitcast %struct.edge_iterator* %out_ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5137
  %92 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %91, i32 0, i32 0, !dbg !5137
  %93 = load i32, i32* %92, align 8, !dbg !5137
  %94 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %91, i32 0, i32 1, !dbg !5137
  %95 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %94, align 8, !dbg !5137
  %call56 = call zeroext i8 @ei_cond(i32 %93, %struct.VEC_edge_gc** %95, %struct.edge_def** %out_edge), !dbg !5137
  %tobool57 = icmp ne i8 %call56, 0, !dbg !5135
  br i1 %tobool57, label %for.body58, label %for.end, !dbg !5135

for.body58:                                       ; preds = %for.cond55
  %96 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !5139
  %97 = load i32, i32* %bb.addr, align 4, !dbg !5140
  %idxprom59 = sext i32 %97 to i64, !dbg !5139
  %arrayidx60 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %96, i64 %idxprom59, !dbg !5139
  %98 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx60, align 8, !dbg !5139
  %99 = load %struct.edge_def*, %struct.edge_def** %out_edge, align 8, !dbg !5141
  %aux61 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %99, i32 0, i32 3, !dbg !5141
  %100 = load i8*, i8** %aux61, align 8, !dbg !5141
  %101 = ptrtoint i8* %100 to i64, !dbg !5141
  %conv62 = trunc i64 %101 to i32, !dbg !5141
  call void @SET_BIT(%struct.simple_bitmap_def* %98, i32 %conv62), !dbg !5142
  br label %for.inc, !dbg !5142

for.inc:                                          ; preds = %for.body58
  call void @ei_next(%struct.edge_iterator* %out_ei), !dbg !5137
  br label %for.cond55, !dbg !5137, !llvm.loop !5143

for.end:                                          ; preds = %for.cond55
  %102 = load i32*, i32** @prob, align 8, !dbg !5145
  %103 = load i32, i32* %pred_bb, align 4, !dbg !5146
  %idxprom63 = sext i32 %103 to i64, !dbg !5145
  %arrayidx64 = getelementptr inbounds i32, i32* %102, i64 %idxprom63, !dbg !5145
  %104 = load i32, i32* %arrayidx64, align 4, !dbg !5145
  %105 = load %struct.edge_def*, %struct.edge_def** %in_edge, align 8, !dbg !5147
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %105, i32 0, i32 8, !dbg !5148
  %106 = load i32, i32* %probability, align 4, !dbg !5148
  %mul = mul nsw i32 %104, %106, !dbg !5149
  %div = sdiv i32 %mul, 10000, !dbg !5150
  %107 = load i32*, i32** @prob, align 8, !dbg !5151
  %108 = load i32, i32* %bb.addr, align 4, !dbg !5152
  %idxprom65 = sext i32 %108 to i64, !dbg !5151
  %arrayidx66 = getelementptr inbounds i32, i32* %107, i64 %idxprom65, !dbg !5151
  %109 = load i32, i32* %arrayidx66, align 4, !dbg !5153
  %add67 = add nsw i32 %109, %div, !dbg !5153
  store i32 %add67, i32* %arrayidx66, align 4, !dbg !5153
  br label %for.inc68, !dbg !5154

for.inc68:                                        ; preds = %for.end, %if.then27
  call void @ei_next(%struct.edge_iterator* %in_ei), !dbg !5092
  br label %for.cond, !dbg !5092, !llvm.loop !5155

for.end69:                                        ; preds = %for.cond
  %110 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @dom, align 8, !dbg !5157
  %111 = load i32, i32* %bb.addr, align 4, !dbg !5158
  %idxprom70 = sext i32 %111 to i64, !dbg !5157
  %arrayidx71 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %110, i64 %idxprom70, !dbg !5157
  %112 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx71, align 8, !dbg !5157
  %113 = load i32, i32* %bb.addr, align 4, !dbg !5159
  call void @SET_BIT(%struct.simple_bitmap_def* %112, i32 %113), !dbg !5160
  %114 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !5161
  %115 = load i32, i32* %bb.addr, align 4, !dbg !5162
  %idxprom72 = sext i32 %115 to i64, !dbg !5161
  %arrayidx73 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %114, i64 %idxprom72, !dbg !5161
  %116 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx73, align 8, !dbg !5161
  %117 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !5163
  %118 = load i32, i32* %bb.addr, align 4, !dbg !5164
  %idxprom74 = sext i32 %118 to i64, !dbg !5163
  %arrayidx75 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %117, i64 %idxprom74, !dbg !5163
  %119 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx75, align 8, !dbg !5163
  %120 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !5165
  %121 = load i32, i32* %bb.addr, align 4, !dbg !5166
  %idxprom76 = sext i32 %121 to i64, !dbg !5165
  %arrayidx77 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %120, i64 %idxprom76, !dbg !5165
  %122 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx77, align 8, !dbg !5165
  call void @sbitmap_difference(%struct.simple_bitmap_def* %116, %struct.simple_bitmap_def* %119, %struct.simple_bitmap_def* %122), !dbg !5167
  %123 = load i32, i32* @sched_verbose, align 4, !dbg !5168
  %cmp78 = icmp sge i32 %123, 2, !dbg !5170
  br i1 %cmp78, label %if.then80, label %if.end90, !dbg !5171

if.then80:                                        ; preds = %for.end69
  %124 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !5172
  %125 = load i32, i32* %bb.addr, align 4, !dbg !5173
  %126 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5174
  %127 = load i32*, i32** @ebb_head, align 8, !dbg !5174
  %128 = load i32, i32* %bb.addr, align 4, !dbg !5174
  %idxprom81 = sext i32 %128 to i64, !dbg !5174
  %arrayidx82 = getelementptr inbounds i32, i32* %127, i64 %idxprom81, !dbg !5174
  %129 = load i32, i32* %arrayidx82, align 4, !dbg !5174
  %idxprom83 = sext i32 %129 to i64, !dbg !5174
  %arrayidx84 = getelementptr inbounds i32, i32* %126, i64 %idxprom83, !dbg !5174
  %130 = load i32, i32* %arrayidx84, align 4, !dbg !5174
  %131 = load i32*, i32** @prob, align 8, !dbg !5175
  %132 = load i32, i32* %bb.addr, align 4, !dbg !5176
  %idxprom85 = sext i32 %132 to i64, !dbg !5175
  %arrayidx86 = getelementptr inbounds i32, i32* %131, i64 %idxprom85, !dbg !5175
  %133 = load i32, i32* %arrayidx86, align 4, !dbg !5175
  %mul87 = mul nsw i32 100, %133, !dbg !5177
  %div88 = sdiv i32 %mul87, 10000, !dbg !5178
  %call89 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %124, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.50, i64 0, i64 0), i32 %125, i32 %130, i32 %div88), !dbg !5179
  br label %if.end90, !dbg !5179

if.end90:                                         ; preds = %if.then, %if.then80, %for.end69
  ret void, !dbg !5180
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_rgn_local_free() #0 !dbg !5181 {
entry:
  %0 = load i32*, i32** @prob, align 8, !dbg !5182
  %1 = bitcast i32* %0 to i8*, !dbg !5182
  call void @free(i8* %1), !dbg !5183
  %2 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @dom, align 8, !dbg !5184
  %3 = bitcast %struct.simple_bitmap_def** %2 to i8*, !dbg !5184
  call void @free(i8* %3), !dbg !5184
  %4 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !5185
  %5 = bitcast %struct.simple_bitmap_def** %4 to i8*, !dbg !5185
  call void @free(i8* %5), !dbg !5185
  %6 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !5186
  %7 = bitcast %struct.simple_bitmap_def** %6 to i8*, !dbg !5186
  call void @free(i8* %7), !dbg !5186
  %8 = load %struct.edge_def**, %struct.edge_def*** @rgn_edges, align 8, !dbg !5187
  %9 = bitcast %struct.edge_def** %8 to i8*, !dbg !5187
  call void @free(i8* %9), !dbg !5188
  ret void, !dbg !5189
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sched_rgn_local_finish() #0 !dbg !5190 {
entry:
  %0 = load i32, i32* @current_nr_blocks, align 4, !dbg !5191
  %cmp = icmp sgt i32 %0, 1, !dbg !5193
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5194

land.lhs.true:                                    ; preds = %entry
  %call = call zeroext i8 @sel_sched_p(), !dbg !5195
  %tobool = icmp ne i8 %call, 0, !dbg !5195
  br i1 %tobool, label %if.end, label %if.then, !dbg !5196

if.then:                                          ; preds = %land.lhs.true
  call void @sched_rgn_local_free(), !dbg !5197
  br label %if.end, !dbg !5199

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !5200
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rgn_setup_common_sched_info() #0 !dbg !5201 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.common_sched_info_def* @rgn_common_sched_info to i8*), i8* align 8 bitcast (%struct.common_sched_info_def* @haifa_common_sched_info to i8*), i64 40, i1 false), !dbg !5202
  store void (i32, i32, i32)* @rgn_fix_recovery_cfg, void (i32, i32, i32)** getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @rgn_common_sched_info, i32 0, i32 0), align 8, !dbg !5203
  store void (%struct.basic_block_def*, %struct.basic_block_def*)* @rgn_add_block, void (%struct.basic_block_def*, %struct.basic_block_def*)** getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @rgn_common_sched_info, i32 0, i32 1), align 8, !dbg !5204
  store i32 (%struct.basic_block_def*)* @rgn_estimate_number_of_insns, i32 (%struct.basic_block_def*)** getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @rgn_common_sched_info, i32 0, i32 2), align 8, !dbg !5205
  store i32 1, i32* getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @rgn_common_sched_info, i32 0, i32 4), align 8, !dbg !5206
  store %struct.common_sched_info_def* @rgn_common_sched_info, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !5207
  ret void, !dbg !5208
}

; Function Attrs: noinline nounwind uwtable
define internal void @rgn_fix_recovery_cfg(i32 %bbi, i32 %check_bbi, i32 %check_bb_nexti) #0 !dbg !5209 {
entry:
  %bbi.addr = alloca i32, align 4
  %check_bbi.addr = alloca i32, align 4
  %check_bb_nexti.addr = alloca i32, align 4
  %old_pos = alloca i32, align 4
  %new_pos = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %bbi, i32* %bbi.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bbi.addr, metadata !5210, metadata !DIExpression()), !dbg !5211
  store i32 %check_bbi, i32* %check_bbi.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %check_bbi.addr, metadata !5212, metadata !DIExpression()), !dbg !5213
  store i32 %check_bb_nexti, i32* %check_bb_nexti.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %check_bb_nexti.addr, metadata !5214, metadata !DIExpression()), !dbg !5215
  call void @llvm.dbg.declare(metadata i32* %old_pos, metadata !5216, metadata !DIExpression()), !dbg !5217
  call void @llvm.dbg.declare(metadata i32* %new_pos, metadata !5218, metadata !DIExpression()), !dbg !5219
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5220, metadata !DIExpression()), !dbg !5221
  %0 = load i32*, i32** @block_to_bb, align 8, !dbg !5222
  %1 = load i32, i32* %bbi.addr, align 4, !dbg !5222
  %idxprom = sext i32 %1 to i64, !dbg !5222
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !5222
  %2 = load i32, i32* %arrayidx, align 4, !dbg !5222
  %3 = load i32*, i32** @block_to_bb, align 8, !dbg !5223
  %4 = load i32, i32* %check_bb_nexti.addr, align 4, !dbg !5223
  %idxprom1 = sext i32 %4 to i64, !dbg !5223
  %arrayidx2 = getelementptr inbounds i32, i32* %3, i64 %idxprom1, !dbg !5223
  store i32 %2, i32* %arrayidx2, align 4, !dbg !5224
  %5 = load i32*, i32** @ebb_head, align 8, !dbg !5225
  %6 = load i32*, i32** @block_to_bb, align 8, !dbg !5227
  %7 = load i32, i32* %check_bbi.addr, align 4, !dbg !5227
  %idxprom3 = sext i32 %7 to i64, !dbg !5227
  %arrayidx4 = getelementptr inbounds i32, i32* %6, i64 %idxprom3, !dbg !5227
  %8 = load i32, i32* %arrayidx4, align 4, !dbg !5227
  %add = add nsw i32 %8, 1, !dbg !5228
  %idxprom5 = sext i32 %add to i64, !dbg !5225
  %arrayidx6 = getelementptr inbounds i32, i32* %5, i64 %idxprom5, !dbg !5225
  %9 = load i32, i32* %arrayidx6, align 4, !dbg !5225
  %sub = sub nsw i32 %9, 1, !dbg !5229
  store i32 %sub, i32* %old_pos, align 4, !dbg !5230
  br label %for.cond, !dbg !5231

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5232
  %11 = load i32, i32* %old_pos, align 4, !dbg !5234
  %idxprom7 = sext i32 %11 to i64, !dbg !5232
  %arrayidx8 = getelementptr inbounds i32, i32* %10, i64 %idxprom7, !dbg !5232
  %12 = load i32, i32* %arrayidx8, align 4, !dbg !5232
  %13 = load i32, i32* %check_bb_nexti.addr, align 4, !dbg !5235
  %cmp = icmp ne i32 %12, %13, !dbg !5236
  br i1 %cmp, label %for.body, label %for.end, !dbg !5237

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !5237

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %old_pos, align 4, !dbg !5238
  %dec = add nsw i32 %14, -1, !dbg !5238
  store i32 %dec, i32* %old_pos, align 4, !dbg !5238
  br label %for.cond, !dbg !5239, !llvm.loop !5240

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %old_pos, align 4, !dbg !5242
  %16 = load i32*, i32** @ebb_head, align 8, !dbg !5242
  %17 = load i32*, i32** @block_to_bb, align 8, !dbg !5242
  %18 = load i32, i32* %check_bbi.addr, align 4, !dbg !5242
  %idxprom9 = sext i32 %18 to i64, !dbg !5242
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i64 %idxprom9, !dbg !5242
  %19 = load i32, i32* %arrayidx10, align 4, !dbg !5242
  %idxprom11 = sext i32 %19 to i64, !dbg !5242
  %arrayidx12 = getelementptr inbounds i32, i32* %16, i64 %idxprom11, !dbg !5242
  %20 = load i32, i32* %arrayidx12, align 4, !dbg !5242
  %cmp13 = icmp sgt i32 %15, %20, !dbg !5242
  br i1 %cmp13, label %cond.false, label %cond.true, !dbg !5242

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3458, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5242
  br label %cond.end, !dbg !5242

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !5242

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5242
  %21 = load i32*, i32** @ebb_head, align 8, !dbg !5243
  %22 = load i32*, i32** @block_to_bb, align 8, !dbg !5245
  %23 = load i32, i32* %bbi.addr, align 4, !dbg !5245
  %idxprom14 = sext i32 %23 to i64, !dbg !5245
  %arrayidx15 = getelementptr inbounds i32, i32* %22, i64 %idxprom14, !dbg !5245
  %24 = load i32, i32* %arrayidx15, align 4, !dbg !5245
  %add16 = add nsw i32 %24, 1, !dbg !5246
  %idxprom17 = sext i32 %add16 to i64, !dbg !5243
  %arrayidx18 = getelementptr inbounds i32, i32* %21, i64 %idxprom17, !dbg !5243
  %25 = load i32, i32* %arrayidx18, align 4, !dbg !5243
  %sub19 = sub nsw i32 %25, 1, !dbg !5247
  store i32 %sub19, i32* %new_pos, align 4, !dbg !5248
  br label %for.cond20, !dbg !5249

for.cond20:                                       ; preds = %for.inc25, %cond.end
  %26 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5250
  %27 = load i32, i32* %new_pos, align 4, !dbg !5252
  %idxprom21 = sext i32 %27 to i64, !dbg !5250
  %arrayidx22 = getelementptr inbounds i32, i32* %26, i64 %idxprom21, !dbg !5250
  %28 = load i32, i32* %arrayidx22, align 4, !dbg !5250
  %29 = load i32, i32* %bbi.addr, align 4, !dbg !5253
  %cmp23 = icmp ne i32 %28, %29, !dbg !5254
  br i1 %cmp23, label %for.body24, label %for.end27, !dbg !5255

for.body24:                                       ; preds = %for.cond20
  br label %for.inc25, !dbg !5255

for.inc25:                                        ; preds = %for.body24
  %30 = load i32, i32* %new_pos, align 4, !dbg !5256
  %dec26 = add nsw i32 %30, -1, !dbg !5256
  store i32 %dec26, i32* %new_pos, align 4, !dbg !5256
  br label %for.cond20, !dbg !5257, !llvm.loop !5258

for.end27:                                        ; preds = %for.cond20
  %31 = load i32, i32* %new_pos, align 4, !dbg !5260
  %inc = add nsw i32 %31, 1, !dbg !5260
  store i32 %inc, i32* %new_pos, align 4, !dbg !5260
  %32 = load i32, i32* %new_pos, align 4, !dbg !5261
  %33 = load i32*, i32** @ebb_head, align 8, !dbg !5261
  %34 = load i32*, i32** @block_to_bb, align 8, !dbg !5261
  %35 = load i32, i32* %bbi.addr, align 4, !dbg !5261
  %idxprom28 = sext i32 %35 to i64, !dbg !5261
  %arrayidx29 = getelementptr inbounds i32, i32* %34, i64 %idxprom28, !dbg !5261
  %36 = load i32, i32* %arrayidx29, align 4, !dbg !5261
  %idxprom30 = sext i32 %36 to i64, !dbg !5261
  %arrayidx31 = getelementptr inbounds i32, i32* %33, i64 %idxprom30, !dbg !5261
  %37 = load i32, i32* %arrayidx31, align 4, !dbg !5261
  %cmp32 = icmp sgt i32 %32, %37, !dbg !5261
  br i1 %cmp32, label %cond.false34, label %cond.true33, !dbg !5261

cond.true33:                                      ; preds = %for.end27
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3464, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5261
  br label %cond.end35, !dbg !5261

cond.false34:                                     ; preds = %for.end27
  br label %cond.end35, !dbg !5261

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ 0, %cond.true33 ], [ 0, %cond.false34 ], !dbg !5261
  %38 = load i32, i32* %new_pos, align 4, !dbg !5262
  %39 = load i32, i32* %old_pos, align 4, !dbg !5262
  %cmp37 = icmp slt i32 %38, %39, !dbg !5262
  br i1 %cmp37, label %cond.false39, label %cond.true38, !dbg !5262

cond.true38:                                      ; preds = %cond.end35
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3466, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5262
  br label %cond.end40, !dbg !5262

cond.false39:                                     ; preds = %cond.end35
  br label %cond.end40, !dbg !5262

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !5262
  %40 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5263
  %41 = load i32, i32* %new_pos, align 4, !dbg !5264
  %idx.ext = sext i32 %41 to i64, !dbg !5265
  %add.ptr = getelementptr inbounds i32, i32* %40, i64 %idx.ext, !dbg !5265
  %add.ptr42 = getelementptr inbounds i32, i32* %add.ptr, i64 1, !dbg !5266
  %42 = bitcast i32* %add.ptr42 to i8*, !dbg !5267
  %43 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5268
  %44 = load i32, i32* %new_pos, align 4, !dbg !5269
  %idx.ext43 = sext i32 %44 to i64, !dbg !5270
  %add.ptr44 = getelementptr inbounds i32, i32* %43, i64 %idx.ext43, !dbg !5270
  %45 = bitcast i32* %add.ptr44 to i8*, !dbg !5267
  %46 = load i32, i32* %old_pos, align 4, !dbg !5271
  %47 = load i32, i32* %new_pos, align 4, !dbg !5272
  %sub45 = sub nsw i32 %46, %47, !dbg !5273
  %conv = sext i32 %sub45 to i64, !dbg !5274
  %mul = mul i64 %conv, 4, !dbg !5275
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %45, i64 %mul, i1 false), !dbg !5267
  %48 = load i32, i32* %check_bb_nexti.addr, align 4, !dbg !5276
  %49 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5277
  %50 = load i32, i32* %new_pos, align 4, !dbg !5278
  %idxprom46 = sext i32 %50 to i64, !dbg !5277
  %arrayidx47 = getelementptr inbounds i32, i32* %49, i64 %idxprom46, !dbg !5277
  store i32 %48, i32* %arrayidx47, align 4, !dbg !5279
  %51 = load i32*, i32** @block_to_bb, align 8, !dbg !5280
  %52 = load i32, i32* %bbi.addr, align 4, !dbg !5280
  %idxprom48 = sext i32 %52 to i64, !dbg !5280
  %arrayidx49 = getelementptr inbounds i32, i32* %51, i64 %idxprom48, !dbg !5280
  %53 = load i32, i32* %arrayidx49, align 4, !dbg !5280
  %add50 = add nsw i32 %53, 1, !dbg !5282
  store i32 %add50, i32* %i, align 4, !dbg !5283
  br label %for.cond51, !dbg !5284

for.cond51:                                       ; preds = %for.inc60, %cond.end40
  %54 = load i32, i32* %i, align 4, !dbg !5285
  %55 = load i32*, i32** @block_to_bb, align 8, !dbg !5287
  %56 = load i32, i32* %check_bbi.addr, align 4, !dbg !5287
  %idxprom52 = sext i32 %56 to i64, !dbg !5287
  %arrayidx53 = getelementptr inbounds i32, i32* %55, i64 %idxprom52, !dbg !5287
  %57 = load i32, i32* %arrayidx53, align 4, !dbg !5287
  %cmp54 = icmp sle i32 %54, %57, !dbg !5288
  br i1 %cmp54, label %for.body56, label %for.end62, !dbg !5289

for.body56:                                       ; preds = %for.cond51
  %58 = load i32*, i32** @ebb_head, align 8, !dbg !5290
  %59 = load i32, i32* %i, align 4, !dbg !5291
  %idxprom57 = sext i32 %59 to i64, !dbg !5290
  %arrayidx58 = getelementptr inbounds i32, i32* %58, i64 %idxprom57, !dbg !5290
  %60 = load i32, i32* %arrayidx58, align 4, !dbg !5292
  %inc59 = add nsw i32 %60, 1, !dbg !5292
  store i32 %inc59, i32* %arrayidx58, align 4, !dbg !5292
  br label %for.inc60, !dbg !5290

for.inc60:                                        ; preds = %for.body56
  %61 = load i32, i32* %i, align 4, !dbg !5293
  %inc61 = add nsw i32 %61, 1, !dbg !5293
  store i32 %inc61, i32* %i, align 4, !dbg !5293
  br label %for.cond51, !dbg !5294, !llvm.loop !5295

for.end62:                                        ; preds = %for.cond51
  ret void, !dbg !5297
}

; Function Attrs: noinline nounwind uwtable
define internal void @rgn_add_block(%struct.basic_block_def* %bb, %struct.basic_block_def* %after) #0 !dbg !5298 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %pos = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5299, metadata !DIExpression()), !dbg !5300
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !5301, metadata !DIExpression()), !dbg !5302
  call void @extend_regions(), !dbg !5303
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5304
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 9, !dbg !5305
  %1 = load i32, i32* %index, align 8, !dbg !5305
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* @not_in_df, i32 %1), !dbg !5306
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !5307
  %cmp = icmp eq %struct.basic_block_def* %2, null, !dbg !5309
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5310

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !5311
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5312
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5312
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5312
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5312
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 1, !dbg !5312
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5312
  %cmp1 = icmp eq %struct.basic_block_def* %3, %6, !dbg !5313
  br i1 %cmp1, label %if.then, label %if.else, !dbg !5314

if.then:                                          ; preds = %lor.lhs.false, %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5315
  call void @rgn_make_new_region_out_of_new_block(%struct.basic_block_def* %7), !dbg !5317
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !5318
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5319
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !5319
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !5319
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !5319
  %x_exit_block_ptr4 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !5319
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr4, align 8, !dbg !5319
  %cmp5 = icmp eq %struct.basic_block_def* %8, %11, !dbg !5320
  %conv = zext i1 %cmp5 to i32, !dbg !5320
  %12 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !5321
  %13 = load i32, i32* @nr_regions, align 4, !dbg !5321
  %sub = sub nsw i32 %13, 1, !dbg !5321
  %idxprom = sext i32 %sub to i64, !dbg !5321
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %12, i64 %idxprom, !dbg !5321
  %dont_calc_deps = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 2, !dbg !5321
  %14 = trunc i32 %conv to i8, !dbg !5322
  %bf.load = load i8, i8* %dont_calc_deps, align 4, !dbg !5322
  %bf.value = and i8 %14, 1, !dbg !5322
  %bf.clear = and i8 %bf.load, -2, !dbg !5322
  %bf.set = or i8 %bf.clear, %bf.value, !dbg !5322
  store i8 %bf.set, i8* %dont_calc_deps, align 4, !dbg !5322
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !5322
  br label %if.end, !dbg !5323

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5324, metadata !DIExpression()), !dbg !5326
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !5327, metadata !DIExpression()), !dbg !5328
  %15 = load i32*, i32** @block_to_bb, align 8, !dbg !5329
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !5329
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !5329
  %17 = load i32, i32* %index6, align 8, !dbg !5329
  %idxprom7 = sext i32 %17 to i64, !dbg !5329
  %arrayidx8 = getelementptr inbounds i32, i32* %15, i64 %idxprom7, !dbg !5329
  %18 = load i32, i32* %arrayidx8, align 4, !dbg !5329
  %19 = load i32*, i32** @block_to_bb, align 8, !dbg !5330
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5330
  %index9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 9, !dbg !5330
  %21 = load i32, i32* %index9, align 8, !dbg !5330
  %idxprom10 = sext i32 %21 to i64, !dbg !5330
  %arrayidx11 = getelementptr inbounds i32, i32* %19, i64 %idxprom10, !dbg !5330
  store i32 %18, i32* %arrayidx11, align 4, !dbg !5331
  %22 = load i32*, i32** @block_to_bb, align 8, !dbg !5332
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !5332
  %index12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !5332
  %24 = load i32, i32* %index12, align 8, !dbg !5332
  %idxprom13 = sext i32 %24 to i64, !dbg !5332
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i64 %idxprom13, !dbg !5332
  %25 = load i32, i32* %arrayidx14, align 4, !dbg !5332
  %add = add nsw i32 %25, 1, !dbg !5333
  store i32 %add, i32* %i, align 4, !dbg !5334
  %26 = load i32*, i32** @ebb_head, align 8, !dbg !5335
  %27 = load i32, i32* %i, align 4, !dbg !5336
  %idxprom15 = sext i32 %27 to i64, !dbg !5335
  %arrayidx16 = getelementptr inbounds i32, i32* %26, i64 %idxprom15, !dbg !5335
  %28 = load i32, i32* %arrayidx16, align 4, !dbg !5335
  %sub17 = sub nsw i32 %28, 1, !dbg !5337
  store i32 %sub17, i32* %pos, align 4, !dbg !5338
  br label %for.cond, !dbg !5339

for.cond:                                         ; preds = %for.inc, %if.else
  %29 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5340
  %30 = load i32, i32* %pos, align 4, !dbg !5343
  %idxprom18 = sext i32 %30 to i64, !dbg !5340
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i64 %idxprom18, !dbg !5340
  %31 = load i32, i32* %arrayidx19, align 4, !dbg !5340
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !5344
  %index20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !5345
  %33 = load i32, i32* %index20, align 8, !dbg !5345
  %cmp21 = icmp ne i32 %31, %33, !dbg !5346
  br i1 %cmp21, label %for.body, label %for.end, !dbg !5347

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !5347

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %pos, align 4, !dbg !5348
  %dec = add nsw i32 %34, -1, !dbg !5348
  store i32 %dec, i32* %pos, align 4, !dbg !5348
  br label %for.cond, !dbg !5349, !llvm.loop !5350

for.end:                                          ; preds = %for.cond
  %35 = load i32, i32* %pos, align 4, !dbg !5352
  %inc = add nsw i32 %35, 1, !dbg !5352
  store i32 %inc, i32* %pos, align 4, !dbg !5352
  %36 = load i32, i32* %pos, align 4, !dbg !5353
  %37 = load i32*, i32** @ebb_head, align 8, !dbg !5353
  %38 = load i32, i32* %i, align 4, !dbg !5353
  %sub23 = sub nsw i32 %38, 1, !dbg !5353
  %idxprom24 = sext i32 %sub23 to i64, !dbg !5353
  %arrayidx25 = getelementptr inbounds i32, i32* %37, i64 %idxprom24, !dbg !5353
  %39 = load i32, i32* %arrayidx25, align 4, !dbg !5353
  %cmp26 = icmp sgt i32 %36, %39, !dbg !5353
  br i1 %cmp26, label %cond.false, label %cond.true, !dbg !5353

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3413, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5353
  br label %cond.end, !dbg !5353

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !5353

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5353
  %40 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5354
  %41 = load i32, i32* %pos, align 4, !dbg !5355
  %idx.ext = sext i32 %41 to i64, !dbg !5356
  %add.ptr28 = getelementptr inbounds i32, i32* %40, i64 %idx.ext, !dbg !5356
  %add.ptr29 = getelementptr inbounds i32, i32* %add.ptr28, i64 1, !dbg !5357
  %42 = bitcast i32* %add.ptr29 to i8*, !dbg !5358
  %43 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5359
  %44 = load i32, i32* %pos, align 4, !dbg !5360
  %idx.ext30 = sext i32 %44 to i64, !dbg !5361
  %add.ptr31 = getelementptr inbounds i32, i32* %43, i64 %idx.ext30, !dbg !5361
  %45 = bitcast i32* %add.ptr31 to i8*, !dbg !5358
  %46 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !5362
  %47 = load i32, i32* @nr_regions, align 4, !dbg !5362
  %idxprom32 = sext i32 %47 to i64, !dbg !5362
  %arrayidx33 = getelementptr inbounds %struct.region, %struct.region* %46, i64 %idxprom32, !dbg !5362
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx33, i32 0, i32 1, !dbg !5362
  %48 = load i32, i32* %rgn_blocks, align 4, !dbg !5362
  %sub34 = sub nsw i32 %48, 1, !dbg !5363
  %49 = load i32, i32* %pos, align 4, !dbg !5364
  %sub35 = sub nsw i32 %sub34, %49, !dbg !5365
  %add36 = add nsw i32 %sub35, 1, !dbg !5366
  %conv37 = sext i32 %add36 to i64, !dbg !5367
  %mul = mul i64 %conv37, 4, !dbg !5368
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %45, i64 %mul, i1 false), !dbg !5358
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5369
  %index38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 9, !dbg !5370
  %51 = load i32, i32* %index38, align 8, !dbg !5370
  %52 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5371
  %53 = load i32, i32* %pos, align 4, !dbg !5372
  %idxprom39 = sext i32 %53 to i64, !dbg !5371
  %arrayidx40 = getelementptr inbounds i32, i32* %52, i64 %idxprom39, !dbg !5371
  store i32 %51, i32* %arrayidx40, align 4, !dbg !5373
  br label %for.cond41, !dbg !5374

for.cond41:                                       ; preds = %for.inc48, %cond.end
  %54 = load i32, i32* %i, align 4, !dbg !5375
  %55 = load i32, i32* @current_nr_blocks, align 4, !dbg !5378
  %cmp42 = icmp sle i32 %54, %55, !dbg !5379
  br i1 %cmp42, label %for.body44, label %for.end50, !dbg !5380

for.body44:                                       ; preds = %for.cond41
  %56 = load i32*, i32** @ebb_head, align 8, !dbg !5381
  %57 = load i32, i32* %i, align 4, !dbg !5382
  %idxprom45 = sext i32 %57 to i64, !dbg !5381
  %arrayidx46 = getelementptr inbounds i32, i32* %56, i64 %idxprom45, !dbg !5381
  %58 = load i32, i32* %arrayidx46, align 4, !dbg !5383
  %inc47 = add nsw i32 %58, 1, !dbg !5383
  store i32 %inc47, i32* %arrayidx46, align 4, !dbg !5383
  br label %for.inc48, !dbg !5381

for.inc48:                                        ; preds = %for.body44
  %59 = load i32, i32* %i, align 4, !dbg !5384
  %inc49 = add nsw i32 %59, 1, !dbg !5384
  store i32 %inc49, i32* %i, align 4, !dbg !5384
  br label %for.cond41, !dbg !5385, !llvm.loop !5386

for.end50:                                        ; preds = %for.cond41
  %60 = load i32*, i32** @containing_rgn, align 8, !dbg !5388
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !5388
  %index51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 9, !dbg !5388
  %62 = load i32, i32* %index51, align 8, !dbg !5388
  %idxprom52 = sext i32 %62 to i64, !dbg !5388
  %arrayidx53 = getelementptr inbounds i32, i32* %60, i64 %idxprom52, !dbg !5388
  %63 = load i32, i32* %arrayidx53, align 4, !dbg !5388
  store i32 %63, i32* %i, align 4, !dbg !5389
  %64 = load i32, i32* %i, align 4, !dbg !5390
  %65 = load i32*, i32** @containing_rgn, align 8, !dbg !5391
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5391
  %index54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 9, !dbg !5391
  %67 = load i32, i32* %index54, align 8, !dbg !5391
  %idxprom55 = sext i32 %67 to i64, !dbg !5391
  %arrayidx56 = getelementptr inbounds i32, i32* %65, i64 %idxprom55, !dbg !5391
  store i32 %64, i32* %arrayidx56, align 4, !dbg !5392
  %68 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !5393
  %69 = load i32, i32* %i, align 4, !dbg !5393
  %idxprom57 = sext i32 %69 to i64, !dbg !5393
  %arrayidx58 = getelementptr inbounds %struct.region, %struct.region* %68, i64 %idxprom57, !dbg !5393
  %has_real_ebb = getelementptr inbounds %struct.region, %struct.region* %arrayidx58, i32 0, i32 2, !dbg !5393
  %bf.load59 = load i8, i8* %has_real_ebb, align 4, !dbg !5394
  %bf.clear60 = and i8 %bf.load59, -3, !dbg !5394
  %bf.set61 = or i8 %bf.clear60, 2, !dbg !5394
  store i8 %bf.set61, i8* %has_real_ebb, align 4, !dbg !5394
  %70 = load i32, i32* %i, align 4, !dbg !5395
  %inc62 = add nsw i32 %70, 1, !dbg !5395
  store i32 %inc62, i32* %i, align 4, !dbg !5395
  br label %for.cond63, !dbg !5395

for.cond63:                                       ; preds = %for.inc71, %for.end50
  %71 = load i32, i32* %i, align 4, !dbg !5397
  %72 = load i32, i32* @nr_regions, align 4, !dbg !5399
  %cmp64 = icmp sle i32 %71, %72, !dbg !5400
  br i1 %cmp64, label %for.body66, label %for.end73, !dbg !5401

for.body66:                                       ; preds = %for.cond63
  %73 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !5402
  %74 = load i32, i32* %i, align 4, !dbg !5402
  %idxprom67 = sext i32 %74 to i64, !dbg !5402
  %arrayidx68 = getelementptr inbounds %struct.region, %struct.region* %73, i64 %idxprom67, !dbg !5402
  %rgn_blocks69 = getelementptr inbounds %struct.region, %struct.region* %arrayidx68, i32 0, i32 1, !dbg !5402
  %75 = load i32, i32* %rgn_blocks69, align 4, !dbg !5403
  %inc70 = add nsw i32 %75, 1, !dbg !5403
  store i32 %inc70, i32* %rgn_blocks69, align 4, !dbg !5403
  br label %for.inc71, !dbg !5402

for.inc71:                                        ; preds = %for.body66
  %76 = load i32, i32* %i, align 4, !dbg !5404
  %inc72 = add nsw i32 %76, 1, !dbg !5404
  store i32 %inc72, i32* %i, align 4, !dbg !5404
  br label %for.cond63, !dbg !5405, !llvm.loop !5406

for.end73:                                        ; preds = %for.cond63
  br label %if.end

if.end:                                           ; preds = %for.end73, %if.then
  ret void, !dbg !5408
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rgn_estimate_number_of_insns(%struct.basic_block_def* %bb) #0 !dbg !5409 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %count = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5410, metadata !DIExpression()), !dbg !5411
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5412, metadata !DIExpression()), !dbg !5413
  %0 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !5414
  %tobool = icmp ne %struct.VEC_int_heap* %0, null, !dbg !5414
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5414

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !5414
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %1, i32 0, i32 0, !dbg !5414
  br label %cond.end, !dbg !5414

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5414

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5414
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5414
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5414
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5414
  %3 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5414
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %3, i32 0, i32 1, !dbg !5414
  %4 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5414
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !5414
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5414
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5414
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !5414
  %5 = load i32, i32* %rt_int, align 8, !dbg !5414
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond, i32 %5), !dbg !5414
  %6 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !5415
  %tobool1 = icmp ne %struct.VEC_int_heap* %6, null, !dbg !5415
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5415

cond.true2:                                       ; preds = %cond.end
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !5415
  %base3 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %7, i32 0, i32 0, !dbg !5415
  br label %cond.end5, !dbg !5415

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5415

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_int_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !5415
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5415
  %il7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !5415
  %rtl8 = bitcast %union.basic_block_il_dependent* %il7 to %struct.rtl_bb_info**, !dbg !5415
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl8, align 8, !dbg !5415
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 0, !dbg !5415
  %10 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5415
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5415
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !5415
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !5415
  %rt_int12 = bitcast %union.rtunion_def* %arrayidx11 to i32*, !dbg !5415
  %11 = load i32, i32* %rt_int12, align 8, !dbg !5415
  %call13 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond6, i32 %11), !dbg !5415
  %sub = sub nsw i32 %call, %call13, !dbg !5416
  store i32 %sub, i32* %count, align 4, !dbg !5417
  %12 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5418
  %tobool14 = icmp ne i32 %12, 0, !dbg !5418
  br i1 %tobool14, label %if.then, label %if.end31, !dbg !5420

if.then:                                          ; preds = %cond.end5
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5421, metadata !DIExpression()), !dbg !5423
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5424
  %il15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !5424
  %rtl16 = bitcast %union.basic_block_il_dependent* %il15 to %struct.rtl_bb_info**, !dbg !5424
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl16, align 8, !dbg !5424
  %head_17 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 0, !dbg !5424
  %15 = load %struct.rtx_def*, %struct.rtx_def** %head_17, align 8, !dbg !5424
  store %struct.rtx_def* %15, %struct.rtx_def** %insn, align 8, !dbg !5424
  br label %for.cond, !dbg !5424

for.cond:                                         ; preds = %for.inc, %if.then
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5426
  %tobool18 = icmp ne %struct.rtx_def* %16, null, !dbg !5426
  br i1 %tobool18, label %land.rhs, label %land.end, !dbg !5426

land.rhs:                                         ; preds = %for.cond
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5426
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5426
  %il19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 7, !dbg !5426
  %rtl20 = bitcast %union.basic_block_il_dependent* %il19 to %struct.rtl_bb_info**, !dbg !5426
  %19 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl20, align 8, !dbg !5426
  %end_21 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %19, i32 0, i32 1, !dbg !5426
  %20 = load %struct.rtx_def*, %struct.rtx_def** %end_21, align 8, !dbg !5426
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !5426
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !5426
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 2, !dbg !5426
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !5426
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5426
  %cmp = icmp ne %struct.rtx_def* %17, %21, !dbg !5426
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %22 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !5428
  br i1 %22, label %for.body, label %for.end, !dbg !5424

for.body:                                         ; preds = %land.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5429
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !5429
  %bf.load = load i32, i32* %24, align 8, !dbg !5429
  %bf.clear = and i32 %bf.load, 65535, !dbg !5429
  %cmp25 = icmp eq i32 %bf.clear, 7, !dbg !5429
  br i1 %cmp25, label %if.then26, label %if.end, !dbg !5431

if.then26:                                        ; preds = %for.body
  %25 = load i32, i32* %count, align 4, !dbg !5432
  %dec = add nsw i32 %25, -1, !dbg !5432
  store i32 %dec, i32* %count, align 4, !dbg !5432
  br label %if.end, !dbg !5433

if.end:                                           ; preds = %if.then26, %for.body
  br label %for.inc, !dbg !5429

for.inc:                                          ; preds = %if.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5426
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5426
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !5426
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 2, !dbg !5426
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !5426
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !5426
  store %struct.rtx_def* %27, %struct.rtx_def** %insn, align 8, !dbg !5426
  br label %for.cond, !dbg !5426, !llvm.loop !5434

for.end:                                          ; preds = %land.end
  br label %if.end31, !dbg !5436

if.end31:                                         ; preds = %for.end, %cond.end5
  %28 = load i32, i32* %count, align 4, !dbg !5437
  ret i32 %28, !dbg !5438
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rgn_setup_sched_infos() #0 !dbg !5439 {
entry:
  %call = call zeroext i8 @sel_sched_p(), !dbg !5440
  %tobool = icmp ne i8 %call, 0, !dbg !5440
  br i1 %tobool, label %if.else, label %if.then, !dbg !5442

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.sched_deps_info_def* @rgn_sched_deps_info to i8*), i8* align 8 bitcast (%struct.sched_deps_info_def* @rgn_const_sched_deps_info to i8*), i64 104, i1 false), !dbg !5443
  br label %if.end, !dbg !5443

if.else:                                          ; preds = %entry
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.sched_deps_info_def* @rgn_sched_deps_info to i8*), i8* align 8 bitcast (%struct.sched_deps_info_def* @rgn_const_sel_sched_deps_info to i8*), i64 104, i1 false), !dbg !5444
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store %struct.sched_deps_info_def* @rgn_sched_deps_info, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !5445
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.haifa_sched_info* @rgn_sched_info to i8*), i8* align 8 bitcast (%struct.haifa_sched_info* @rgn_const_sched_info to i8*), i64 136, i1 false), !dbg !5446
  store %struct.haifa_sched_info* @rgn_sched_info, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5447
  ret void, !dbg !5448
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @schedule_insns() #0 !dbg !5449 {
entry:
  %rgn = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn, metadata !5450, metadata !DIExpression()), !dbg !5451
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5452
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5452
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5452
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5452
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !5452
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !5452
  %cmp = icmp eq i32 %2, 2, !dbg !5454
  br i1 %cmp, label %if.then, label %if.end, !dbg !5455

if.then:                                          ; preds = %entry
  br label %return, !dbg !5456

if.end:                                           ; preds = %entry
  call void @rgn_setup_common_sched_info(), !dbg !5457
  call void @rgn_setup_sched_infos(), !dbg !5458
  call void @haifa_sched_init(), !dbg !5459
  %3 = load i32, i32* @reload_completed, align 4, !dbg !5460
  %conv = trunc i32 %3 to i8, !dbg !5460
  call void @sched_rgn_init(i8 zeroext %conv), !dbg !5461
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* @not_in_df, %struct.bitmap_obstack* null), !dbg !5462
  call void @bitmap_clear(%struct.bitmap_head_def* @not_in_df), !dbg !5463
  store i32 0, i32* %rgn, align 4, !dbg !5464
  br label %for.cond, !dbg !5466

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %rgn, align 4, !dbg !5467
  %5 = load i32, i32* @nr_regions, align 4, !dbg !5469
  %cmp1 = icmp slt i32 %4, %5, !dbg !5470
  br i1 %cmp1, label %for.body, label %for.end, !dbg !5471

for.body:                                         ; preds = %for.cond
  %call = call zeroext i8 @dbg_cnt(i32 30), !dbg !5472
  %tobool = icmp ne i8 %call, 0, !dbg !5472
  br i1 %tobool, label %if.then3, label %if.end4, !dbg !5474

if.then3:                                         ; preds = %for.body
  %6 = load i32, i32* %rgn, align 4, !dbg !5475
  call void @schedule_region(i32 %6), !dbg !5476
  br label %if.end4, !dbg !5476

if.end4:                                          ; preds = %if.then3, %for.body
  br label %for.inc, !dbg !5477

for.inc:                                          ; preds = %if.end4
  %7 = load i32, i32* %rgn, align 4, !dbg !5478
  %inc = add nsw i32 %7, 1, !dbg !5478
  store i32 %inc, i32* %rgn, align 4, !dbg !5478
  br label %for.cond, !dbg !5479, !llvm.loop !5480

for.end:                                          ; preds = %for.cond
  call void @sched_rgn_finish(), !dbg !5482
  call void @bitmap_clear(%struct.bitmap_head_def* @not_in_df), !dbg !5483
  call void @haifa_sched_finish(), !dbg !5484
  br label %return, !dbg !5485

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !5485
}

declare dso_local void @haifa_sched_init() #2

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_initialize_stat(%struct.bitmap_head_def* %head, %struct.bitmap_obstack* %obstack) #0 !dbg !5486 {
entry:
  %head.addr = alloca %struct.bitmap_head_def*, align 8
  %obstack.addr = alloca %struct.bitmap_obstack*, align 8
  store %struct.bitmap_head_def* %head, %struct.bitmap_head_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %head.addr, metadata !5489, metadata !DIExpression()), !dbg !5490
  store %struct.bitmap_obstack* %obstack, %struct.bitmap_obstack** %obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_obstack** %obstack.addr, metadata !5491, metadata !DIExpression()), !dbg !5492
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !5493
  %current = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 1, !dbg !5494
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %current, align 8, !dbg !5495
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !5496
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %1, i32 0, i32 0, !dbg !5497
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %first, align 8, !dbg !5498
  %2 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** %obstack.addr, align 8, !dbg !5499
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !5500
  %obstack1 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 3, !dbg !5501
  store %struct.bitmap_obstack* %2, %struct.bitmap_obstack** %obstack1, align 8, !dbg !5502
  ret void, !dbg !5503
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

declare dso_local zeroext i8 @dbg_cnt(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @schedule_region(i32 %rgn) #0 !dbg !5504 {
entry:
  %rgn.addr = alloca i32, align 4
  %bb = alloca i32, align 4
  %sched_rgn_n_insns = alloca i32, align 4
  %first_bb = alloca %struct.basic_block_def*, align 8
  %last_bb = alloca %struct.basic_block_def*, align 8
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  %first_bb41 = alloca %struct.basic_block_def*, align 8
  %last_bb42 = alloca %struct.basic_block_def*, align 8
  %curr_bb = alloca %struct.basic_block_def*, align 8
  %head43 = alloca %struct.rtx_def*, align 8
  %tail44 = alloca %struct.rtx_def*, align 8
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !5505, metadata !DIExpression()), !dbg !5506
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !5507, metadata !DIExpression()), !dbg !5508
  call void @llvm.dbg.declare(metadata i32* %sched_rgn_n_insns, metadata !5509, metadata !DIExpression()), !dbg !5510
  store i32 0, i32* %sched_rgn_n_insns, align 4, !dbg !5510
  store i32 0, i32* @rgn_n_insns, align 4, !dbg !5511
  %0 = load i32, i32* %rgn.addr, align 4, !dbg !5512
  call void @rgn_setup_region(i32 %0), !dbg !5513
  %call = call zeroext i8 @sched_is_disabled_for_current_region_p(), !dbg !5514
  %tobool = icmp ne i8 %call, 0, !dbg !5514
  br i1 %tobool, label %if.then, label %if.end, !dbg !5516

if.then:                                          ; preds = %entry
  br label %return, !dbg !5517

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %rgn.addr, align 4, !dbg !5518
  call void @sched_rgn_compute_dependencies(i32 %1), !dbg !5519
  %2 = load i32, i32* %rgn.addr, align 4, !dbg !5520
  call void @sched_rgn_local_init(i32 %2), !dbg !5521
  call void @compute_priorities(), !dbg !5522
  %3 = load i32, i32* @rgn_n_insns, align 4, !dbg !5523
  call void @sched_extend_ready_list(i32 %3), !dbg !5524
  %4 = load i8, i8* @sched_pressure_p, align 1, !dbg !5525
  %tobool1 = icmp ne i8 %4, 0, !dbg !5525
  br i1 %tobool1, label %if.then2, label %if.end37, !dbg !5527

if.then2:                                         ; preds = %if.end
  call void @sched_init_region_reg_pressure_info(), !dbg !5528
  store i32 0, i32* %bb, align 4, !dbg !5530
  br label %for.cond, !dbg !5532

for.cond:                                         ; preds = %for.inc, %if.then2
  %5 = load i32, i32* %bb, align 4, !dbg !5533
  %6 = load i32, i32* @current_nr_blocks, align 4, !dbg !5535
  %cmp = icmp slt i32 %5, %6, !dbg !5536
  br i1 %cmp, label %for.body, label %for.end, !dbg !5537

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_bb, metadata !5538, metadata !DIExpression()), !dbg !5540
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last_bb, metadata !5541, metadata !DIExpression()), !dbg !5542
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !5543, metadata !DIExpression()), !dbg !5544
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !5545, metadata !DIExpression()), !dbg !5546
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5547
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !5547
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5547
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5547
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 2, !dbg !5547
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !5547
  %tobool3 = icmp ne %struct.VEC_basic_block_gc* %9, null, !dbg !5547
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !5547

cond.true:                                        ; preds = %for.body
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5547
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !5547
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !5547
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !5547
  %x_basic_block_info6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 2, !dbg !5547
  %12 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info6, align 8, !dbg !5547
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %12, i32 0, i32 0, !dbg !5547
  br label %cond.end, !dbg !5547

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !5547

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5547
  %13 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5547
  %14 = load i32*, i32** @ebb_head, align 8, !dbg !5547
  %15 = load i32, i32* %bb, align 4, !dbg !5547
  %idxprom = sext i32 %15 to i64, !dbg !5547
  %arrayidx = getelementptr inbounds i32, i32* %14, i64 %idxprom, !dbg !5547
  %16 = load i32, i32* %arrayidx, align 4, !dbg !5547
  %idxprom7 = sext i32 %16 to i64, !dbg !5547
  %arrayidx8 = getelementptr inbounds i32, i32* %13, i64 %idxprom7, !dbg !5547
  %17 = load i32, i32* %arrayidx8, align 4, !dbg !5547
  %call9 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %17), !dbg !5547
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %first_bb, align 8, !dbg !5548
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5549
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !5549
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 1, !dbg !5549
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !5549
  %x_basic_block_info12 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 2, !dbg !5549
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info12, align 8, !dbg !5549
  %tobool13 = icmp ne %struct.VEC_basic_block_gc* %20, null, !dbg !5549
  br i1 %tobool13, label %cond.true14, label %cond.false19, !dbg !5549

cond.true14:                                      ; preds = %cond.end
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5549
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !5549
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 1, !dbg !5549
  %22 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !5549
  %x_basic_block_info17 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %22, i32 0, i32 2, !dbg !5549
  %23 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info17, align 8, !dbg !5549
  %base18 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %23, i32 0, i32 0, !dbg !5549
  br label %cond.end20, !dbg !5549

cond.false19:                                     ; preds = %cond.end
  br label %cond.end20, !dbg !5549

cond.end20:                                       ; preds = %cond.false19, %cond.true14
  %cond21 = phi %struct.VEC_basic_block_base* [ %base18, %cond.true14 ], [ null, %cond.false19 ], !dbg !5549
  %24 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5549
  %25 = load i32*, i32** @ebb_head, align 8, !dbg !5549
  %26 = load i32, i32* %bb, align 4, !dbg !5549
  %add = add nsw i32 %26, 1, !dbg !5549
  %idxprom22 = sext i32 %add to i64, !dbg !5549
  %arrayidx23 = getelementptr inbounds i32, i32* %25, i64 %idxprom22, !dbg !5549
  %27 = load i32, i32* %arrayidx23, align 4, !dbg !5549
  %sub = sub nsw i32 %27, 1, !dbg !5549
  %idxprom24 = sext i32 %sub to i64, !dbg !5549
  %arrayidx25 = getelementptr inbounds i32, i32* %24, i64 %idxprom24, !dbg !5549
  %28 = load i32, i32* %arrayidx25, align 4, !dbg !5549
  %call26 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond21, i32 %28), !dbg !5549
  store %struct.basic_block_def* %call26, %struct.basic_block_def** %last_bb, align 8, !dbg !5550
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !5551
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %last_bb, align 8, !dbg !5552
  call void @get_ebb_head_tail(%struct.basic_block_def* %29, %struct.basic_block_def* %30, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !5553
  %31 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !5554
  %32 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !5556
  %call27 = call i32 @no_real_insns_p(%struct.rtx_def* %31, %struct.rtx_def* %32), !dbg !5557
  %tobool28 = icmp ne i32 %call27, 0, !dbg !5557
  br i1 %tobool28, label %if.then29, label %if.end35, !dbg !5558

if.then29:                                        ; preds = %cond.end20
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !5559
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %last_bb, align 8, !dbg !5559
  %cmp30 = icmp eq %struct.basic_block_def* %33, %34, !dbg !5559
  br i1 %cmp30, label %cond.false32, label %cond.true31, !dbg !5559

cond.true31:                                      ; preds = %if.then29
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 2962, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5559
  br label %cond.end33, !dbg !5559

cond.false32:                                     ; preds = %if.then29
  br label %cond.end33, !dbg !5559

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi i32 [ 0, %cond.true31 ], [ 0, %cond.false32 ], !dbg !5559
  br label %for.inc, !dbg !5561

if.end35:                                         ; preds = %cond.end20
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !5562
  %36 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !5563
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !5563
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5563
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5563
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !5563
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5563
  call void @sched_setup_bb_reg_pressure_info(%struct.basic_block_def* %35, %struct.rtx_def* %37), !dbg !5564
  br label %for.inc, !dbg !5565

for.inc:                                          ; preds = %if.end35, %cond.end33
  %38 = load i32, i32* %bb, align 4, !dbg !5566
  %inc = add nsw i32 %38, 1, !dbg !5566
  store i32 %inc, i32* %bb, align 4, !dbg !5566
  br label %for.cond, !dbg !5567, !llvm.loop !5568

for.end:                                          ; preds = %for.cond
  br label %if.end37, !dbg !5570

if.end37:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %bb, align 4, !dbg !5571
  br label %for.cond38, !dbg !5573

for.cond38:                                       ; preds = %for.inc138, %if.end37
  %39 = load i32, i32* %bb, align 4, !dbg !5574
  %40 = load i32, i32* @current_nr_blocks, align 4, !dbg !5576
  %cmp39 = icmp slt i32 %39, %40, !dbg !5577
  br i1 %cmp39, label %for.body40, label %for.end140, !dbg !5578

for.body40:                                       ; preds = %for.cond38
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_bb41, metadata !5579, metadata !DIExpression()), !dbg !5581
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last_bb42, metadata !5582, metadata !DIExpression()), !dbg !5583
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %curr_bb, metadata !5584, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head43, metadata !5586, metadata !DIExpression()), !dbg !5587
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail44, metadata !5588, metadata !DIExpression()), !dbg !5589
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5590
  %add.ptr45 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !5590
  %cfg46 = getelementptr inbounds %struct.function, %struct.function* %add.ptr45, i32 0, i32 1, !dbg !5590
  %42 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg46, align 8, !dbg !5590
  %x_basic_block_info47 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i32 0, i32 2, !dbg !5590
  %43 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info47, align 8, !dbg !5590
  %tobool48 = icmp ne %struct.VEC_basic_block_gc* %43, null, !dbg !5590
  br i1 %tobool48, label %cond.true49, label %cond.false54, !dbg !5590

cond.true49:                                      ; preds = %for.body40
  %44 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5590
  %add.ptr50 = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, !dbg !5590
  %cfg51 = getelementptr inbounds %struct.function, %struct.function* %add.ptr50, i32 0, i32 1, !dbg !5590
  %45 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg51, align 8, !dbg !5590
  %x_basic_block_info52 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %45, i32 0, i32 2, !dbg !5590
  %46 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info52, align 8, !dbg !5590
  %base53 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %46, i32 0, i32 0, !dbg !5590
  br label %cond.end55, !dbg !5590

cond.false54:                                     ; preds = %for.body40
  br label %cond.end55, !dbg !5590

cond.end55:                                       ; preds = %cond.false54, %cond.true49
  %cond56 = phi %struct.VEC_basic_block_base* [ %base53, %cond.true49 ], [ null, %cond.false54 ], !dbg !5590
  %47 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5590
  %48 = load i32*, i32** @ebb_head, align 8, !dbg !5590
  %49 = load i32, i32* %bb, align 4, !dbg !5590
  %idxprom57 = sext i32 %49 to i64, !dbg !5590
  %arrayidx58 = getelementptr inbounds i32, i32* %48, i64 %idxprom57, !dbg !5590
  %50 = load i32, i32* %arrayidx58, align 4, !dbg !5590
  %idxprom59 = sext i32 %50 to i64, !dbg !5590
  %arrayidx60 = getelementptr inbounds i32, i32* %47, i64 %idxprom59, !dbg !5590
  %51 = load i32, i32* %arrayidx60, align 4, !dbg !5590
  %call61 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond56, i32 %51), !dbg !5590
  store %struct.basic_block_def* %call61, %struct.basic_block_def** %first_bb41, align 8, !dbg !5591
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5592
  %add.ptr62 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !5592
  %cfg63 = getelementptr inbounds %struct.function, %struct.function* %add.ptr62, i32 0, i32 1, !dbg !5592
  %53 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg63, align 8, !dbg !5592
  %x_basic_block_info64 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %53, i32 0, i32 2, !dbg !5592
  %54 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info64, align 8, !dbg !5592
  %tobool65 = icmp ne %struct.VEC_basic_block_gc* %54, null, !dbg !5592
  br i1 %tobool65, label %cond.true66, label %cond.false71, !dbg !5592

cond.true66:                                      ; preds = %cond.end55
  %55 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5592
  %add.ptr67 = getelementptr inbounds %struct.function, %struct.function* %55, i64 0, !dbg !5592
  %cfg68 = getelementptr inbounds %struct.function, %struct.function* %add.ptr67, i32 0, i32 1, !dbg !5592
  %56 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg68, align 8, !dbg !5592
  %x_basic_block_info69 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %56, i32 0, i32 2, !dbg !5592
  %57 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info69, align 8, !dbg !5592
  %base70 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %57, i32 0, i32 0, !dbg !5592
  br label %cond.end72, !dbg !5592

cond.false71:                                     ; preds = %cond.end55
  br label %cond.end72, !dbg !5592

cond.end72:                                       ; preds = %cond.false71, %cond.true66
  %cond73 = phi %struct.VEC_basic_block_base* [ %base70, %cond.true66 ], [ null, %cond.false71 ], !dbg !5592
  %58 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5592
  %59 = load i32*, i32** @ebb_head, align 8, !dbg !5592
  %60 = load i32, i32* %bb, align 4, !dbg !5592
  %add74 = add nsw i32 %60, 1, !dbg !5592
  %idxprom75 = sext i32 %add74 to i64, !dbg !5592
  %arrayidx76 = getelementptr inbounds i32, i32* %59, i64 %idxprom75, !dbg !5592
  %61 = load i32, i32* %arrayidx76, align 4, !dbg !5592
  %sub77 = sub nsw i32 %61, 1, !dbg !5592
  %idxprom78 = sext i32 %sub77 to i64, !dbg !5592
  %arrayidx79 = getelementptr inbounds i32, i32* %58, i64 %idxprom78, !dbg !5592
  %62 = load i32, i32* %arrayidx79, align 4, !dbg !5592
  %call80 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond73, i32 %62), !dbg !5592
  store %struct.basic_block_def* %call80, %struct.basic_block_def** %last_bb42, align 8, !dbg !5593
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb41, align 8, !dbg !5594
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %last_bb42, align 8, !dbg !5595
  call void @get_ebb_head_tail(%struct.basic_block_def* %63, %struct.basic_block_def* %64, %struct.rtx_def** %head43, %struct.rtx_def** %tail44), !dbg !5596
  %65 = load %struct.rtx_def*, %struct.rtx_def** %head43, align 8, !dbg !5597
  %66 = load %struct.rtx_def*, %struct.rtx_def** %tail44, align 8, !dbg !5599
  %call81 = call i32 @no_real_insns_p(%struct.rtx_def* %65, %struct.rtx_def* %66), !dbg !5600
  %tobool82 = icmp ne i32 %call81, 0, !dbg !5600
  br i1 %tobool82, label %if.then83, label %if.end89, !dbg !5601

if.then83:                                        ; preds = %cond.end72
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb41, align 8, !dbg !5602
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %last_bb42, align 8, !dbg !5602
  %cmp84 = icmp eq %struct.basic_block_def* %67, %68, !dbg !5602
  br i1 %cmp84, label %cond.false86, label %cond.true85, !dbg !5602

cond.true85:                                      ; preds = %if.then83
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 2982, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5602
  br label %cond.end87, !dbg !5602

cond.false86:                                     ; preds = %if.then83
  br label %cond.end87, !dbg !5602

cond.end87:                                       ; preds = %cond.false86, %cond.true85
  %cond88 = phi i32 [ 0, %cond.true85 ], [ 0, %cond.false86 ], !dbg !5602
  br label %for.inc138, !dbg !5604

if.end89:                                         ; preds = %cond.end72
  %69 = load %struct.rtx_def*, %struct.rtx_def** %head43, align 8, !dbg !5605
  %u90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !5605
  %fld91 = bitcast %union.u* %u90 to [1 x %union.rtunion_def]*, !dbg !5605
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i64 0, i64 1, !dbg !5605
  %rt_rtx93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtx_def**, !dbg !5605
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx93, align 8, !dbg !5605
  %71 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5606
  %prev_head = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %71, i32 0, i32 8, !dbg !5607
  store %struct.rtx_def* %70, %struct.rtx_def** %prev_head, align 8, !dbg !5608
  %72 = load %struct.rtx_def*, %struct.rtx_def** %tail44, align 8, !dbg !5609
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !5609
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !5609
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 2, !dbg !5609
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !5609
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !5609
  %74 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5610
  %next_tail = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %74, i32 0, i32 9, !dbg !5611
  store %struct.rtx_def* %73, %struct.rtx_def** %next_tail, align 8, !dbg !5612
  %75 = load %struct.rtx_def*, %struct.rtx_def** %head43, align 8, !dbg !5613
  %76 = load %struct.rtx_def*, %struct.rtx_def** %tail44, align 8, !dbg !5614
  call void @remove_notes(%struct.rtx_def* %75, %struct.rtx_def* %76), !dbg !5615
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb41, align 8, !dbg !5616
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %last_bb42, align 8, !dbg !5617
  call void @unlink_bb_notes(%struct.basic_block_def* %77, %struct.basic_block_def* %78), !dbg !5618
  %79 = load i32, i32* %bb, align 4, !dbg !5619
  store i32 %79, i32* @target_bb, align 4, !dbg !5620
  %80 = load i32, i32* @flag_schedule_interblock, align 4, !dbg !5621
  %tobool98 = icmp ne i32 %80, 0, !dbg !5621
  br i1 %tobool98, label %cond.false101, label %lor.lhs.false, !dbg !5621

lor.lhs.false:                                    ; preds = %if.end89
  %81 = load i32, i32* @current_nr_blocks, align 4, !dbg !5621
  %cmp99 = icmp eq i32 %81, 1, !dbg !5621
  br i1 %cmp99, label %cond.false101, label %cond.true100, !dbg !5621

cond.true100:                                     ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 2995, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5621
  br label %cond.end102, !dbg !5621

cond.false101:                                    ; preds = %lor.lhs.false, %if.end89
  br label %cond.end102, !dbg !5621

cond.end102:                                      ; preds = %cond.false101, %cond.true100
  %cond103 = phi i32 [ 0, %cond.true100 ], [ 0, %cond.false101 ], !dbg !5621
  %82 = load i32, i32* @current_nr_blocks, align 4, !dbg !5622
  %cmp104 = icmp eq i32 %82, 1, !dbg !5623
  %conv = zext i1 %cmp104 to i32, !dbg !5623
  %83 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !5624
  %queue_must_finish_empty = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %83, i32 0, i32 12, !dbg !5625
  %84 = trunc i32 %conv to i8, !dbg !5626
  %bf.load = load i8, i8* %queue_must_finish_empty, align 8, !dbg !5626
  %bf.value = and i8 %84, 1, !dbg !5626
  %bf.clear = and i8 %bf.load, -2, !dbg !5626
  %bf.set = or i8 %bf.clear, %bf.value, !dbg !5626
  store i8 %bf.set, i8* %queue_must_finish_empty, align 8, !dbg !5626
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !5626
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb41, align 8, !dbg !5627
  store %struct.basic_block_def* %85, %struct.basic_block_def** %curr_bb, align 8, !dbg !5628
  %call105 = call zeroext i8 @dbg_cnt(i32 27), !dbg !5629
  %tobool106 = icmp ne i8 %call105, 0, !dbg !5629
  br i1 %tobool106, label %if.then107, label %if.else, !dbg !5631

if.then107:                                       ; preds = %cond.end102
  call void @schedule_block(%struct.basic_block_def** %curr_bb), !dbg !5632
  %86 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5634
  %add.ptr108 = getelementptr inbounds %struct.function, %struct.function* %86, i64 0, !dbg !5634
  %cfg109 = getelementptr inbounds %struct.function, %struct.function* %add.ptr108, i32 0, i32 1, !dbg !5634
  %87 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg109, align 8, !dbg !5634
  %x_basic_block_info110 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %87, i32 0, i32 2, !dbg !5634
  %88 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info110, align 8, !dbg !5634
  %tobool111 = icmp ne %struct.VEC_basic_block_gc* %88, null, !dbg !5634
  br i1 %tobool111, label %cond.true112, label %cond.false117, !dbg !5634

cond.true112:                                     ; preds = %if.then107
  %89 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5634
  %add.ptr113 = getelementptr inbounds %struct.function, %struct.function* %89, i64 0, !dbg !5634
  %cfg114 = getelementptr inbounds %struct.function, %struct.function* %add.ptr113, i32 0, i32 1, !dbg !5634
  %90 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg114, align 8, !dbg !5634
  %x_basic_block_info115 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %90, i32 0, i32 2, !dbg !5634
  %91 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info115, align 8, !dbg !5634
  %base116 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %91, i32 0, i32 0, !dbg !5634
  br label %cond.end118, !dbg !5634

cond.false117:                                    ; preds = %if.then107
  br label %cond.end118, !dbg !5634

cond.end118:                                      ; preds = %cond.false117, %cond.true112
  %cond119 = phi %struct.VEC_basic_block_base* [ %base116, %cond.true112 ], [ null, %cond.false117 ], !dbg !5634
  %92 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5634
  %93 = load i32*, i32** @ebb_head, align 8, !dbg !5634
  %94 = load i32, i32* %bb, align 4, !dbg !5634
  %idxprom120 = sext i32 %94 to i64, !dbg !5634
  %arrayidx121 = getelementptr inbounds i32, i32* %93, i64 %idxprom120, !dbg !5634
  %95 = load i32, i32* %arrayidx121, align 4, !dbg !5634
  %idxprom122 = sext i32 %95 to i64, !dbg !5634
  %arrayidx123 = getelementptr inbounds i32, i32* %92, i64 %idxprom122, !dbg !5634
  %96 = load i32, i32* %arrayidx123, align 4, !dbg !5634
  %call124 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond119, i32 %96), !dbg !5634
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb41, align 8, !dbg !5634
  %cmp125 = icmp eq %struct.basic_block_def* %call124, %97, !dbg !5634
  br i1 %cmp125, label %cond.false128, label %cond.true127, !dbg !5634

cond.true127:                                     ; preds = %cond.end118
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3002, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5634
  br label %cond.end129, !dbg !5634

cond.false128:                                    ; preds = %cond.end118
  br label %cond.end129, !dbg !5634

cond.end129:                                      ; preds = %cond.false128, %cond.true127
  %cond130 = phi i32 [ 0, %cond.true127 ], [ 0, %cond.false128 ], !dbg !5634
  %98 = load i32, i32* @sched_n_insns, align 4, !dbg !5635
  %99 = load i32, i32* %sched_rgn_n_insns, align 4, !dbg !5636
  %add131 = add nsw i32 %99, %98, !dbg !5636
  store i32 %add131, i32* %sched_rgn_n_insns, align 4, !dbg !5636
  br label %if.end133, !dbg !5637

if.else:                                          ; preds = %cond.end102
  %100 = load i32, i32* @rgn_n_insns, align 4, !dbg !5638
  %101 = load i32, i32* %sched_rgn_n_insns, align 4, !dbg !5640
  %add132 = add nsw i32 %101, %100, !dbg !5640
  store i32 %add132, i32* %sched_rgn_n_insns, align 4, !dbg !5640
  br label %if.end133

if.end133:                                        ; preds = %if.else, %cond.end129
  %102 = load i32, i32* @current_nr_blocks, align 4, !dbg !5641
  %cmp134 = icmp sgt i32 %102, 1, !dbg !5643
  br i1 %cmp134, label %if.then136, label %if.end137, !dbg !5644

if.then136:                                       ; preds = %if.end133
  call void @free_trg_info(), !dbg !5645
  br label %if.end137, !dbg !5645

if.end137:                                        ; preds = %if.then136, %if.end133
  br label %for.inc138, !dbg !5646

for.inc138:                                       ; preds = %if.end137, %cond.end87
  %103 = load i32, i32* %bb, align 4, !dbg !5647
  %inc139 = add nsw i32 %103, 1, !dbg !5647
  store i32 %inc139, i32* %bb, align 4, !dbg !5647
  br label %for.cond38, !dbg !5648, !llvm.loop !5649

for.end140:                                       ; preds = %for.cond38
  %104 = load i32, i32* %sched_rgn_n_insns, align 4, !dbg !5651
  %105 = load i32, i32* @rgn_n_insns, align 4, !dbg !5651
  %cmp141 = icmp eq i32 %104, %105, !dbg !5651
  br i1 %cmp141, label %cond.false144, label %cond.true143, !dbg !5651

cond.true143:                                     ; preds = %for.end140
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3016, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5651
  br label %cond.end145, !dbg !5651

cond.false144:                                    ; preds = %for.end140
  br label %cond.end145, !dbg !5651

cond.end145:                                      ; preds = %cond.false144, %cond.true143
  %cond146 = phi i32 [ 0, %cond.true143 ], [ 0, %cond.false144 ], !dbg !5651
  call void @sched_finish_ready_list(), !dbg !5652
  call void @sched_rgn_local_finish(), !dbg !5653
  store i32 0, i32* %bb, align 4, !dbg !5654
  br label %for.cond147, !dbg !5656

for.cond147:                                      ; preds = %for.inc151, %cond.end145
  %106 = load i32, i32* %bb, align 4, !dbg !5657
  %107 = load i32, i32* @current_nr_blocks, align 4, !dbg !5659
  %cmp148 = icmp slt i32 %106, %107, !dbg !5660
  br i1 %cmp148, label %for.body150, label %for.end153, !dbg !5661

for.body150:                                      ; preds = %for.cond147
  %108 = load i32, i32* %bb, align 4, !dbg !5662
  call void @free_block_dependencies(i32 %108), !dbg !5663
  br label %for.inc151, !dbg !5663

for.inc151:                                       ; preds = %for.body150
  %109 = load i32, i32* %bb, align 4, !dbg !5664
  %inc152 = add nsw i32 %109, 1, !dbg !5664
  store i32 %inc152, i32* %bb, align 4, !dbg !5664
  br label %for.cond147, !dbg !5665, !llvm.loop !5666

for.end153:                                       ; preds = %for.cond147
  %110 = load i8, i8* @haifa_recovery_bb_ever_added_p, align 1, !dbg !5668
  %conv154 = zext i8 %110 to i32, !dbg !5668
  %tobool155 = icmp ne i32 %conv154, 0, !dbg !5668
  br i1 %tobool155, label %cond.false161, label %lor.lhs.false156, !dbg !5668

lor.lhs.false156:                                 ; preds = %for.end153
  %call157 = call zeroext i8 @deps_pools_are_empty_p(), !dbg !5668
  %conv158 = zext i8 %call157 to i32, !dbg !5668
  %tobool159 = icmp ne i32 %conv158, 0, !dbg !5668
  br i1 %tobool159, label %cond.false161, label %cond.true160, !dbg !5668

cond.true160:                                     ; preds = %lor.lhs.false156
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3028, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5668
  br label %cond.end162, !dbg !5668

cond.false161:                                    ; preds = %lor.lhs.false156, %for.end153
  br label %cond.end162, !dbg !5668

cond.end162:                                      ; preds = %cond.false161, %cond.true160
  %cond163 = phi i32 [ 0, %cond.true160 ], [ 0, %cond.false161 ], !dbg !5668
  br label %return, !dbg !5669

return:                                           ; preds = %cond.end162, %if.then
  ret void, !dbg !5669
}

declare dso_local void @haifa_sched_finish() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @rgn_make_new_region_out_of_new_block(%struct.basic_block_def* %bb) #0 !dbg !5670 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5673, metadata !DIExpression()), !dbg !5674
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5675, metadata !DIExpression()), !dbg !5676
  %0 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !5677
  %1 = load i32, i32* @nr_regions, align 4, !dbg !5677
  %idxprom = sext i32 %1 to i64, !dbg !5677
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %0, i64 %idxprom, !dbg !5677
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 1, !dbg !5677
  %2 = load i32, i32* %rgn_blocks, align 4, !dbg !5677
  store i32 %2, i32* %i, align 4, !dbg !5678
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5679
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !5680
  %4 = load i32, i32* %index, align 8, !dbg !5680
  %5 = load i32*, i32** @rgn_bb_table, align 8, !dbg !5681
  %6 = load i32, i32* %i, align 4, !dbg !5682
  %idxprom1 = sext i32 %6 to i64, !dbg !5681
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i64 %idxprom1, !dbg !5681
  store i32 %4, i32* %arrayidx2, align 4, !dbg !5683
  %7 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !5684
  %8 = load i32, i32* @nr_regions, align 4, !dbg !5684
  %idxprom3 = sext i32 %8 to i64, !dbg !5684
  %arrayidx4 = getelementptr inbounds %struct.region, %struct.region* %7, i64 %idxprom3, !dbg !5684
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx4, i32 0, i32 0, !dbg !5684
  store i32 1, i32* %rgn_nr_blocks, align 4, !dbg !5685
  %9 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !5686
  %10 = load i32, i32* @nr_regions, align 4, !dbg !5686
  %idxprom5 = sext i32 %10 to i64, !dbg !5686
  %arrayidx6 = getelementptr inbounds %struct.region, %struct.region* %9, i64 %idxprom5, !dbg !5686
  %has_real_ebb = getelementptr inbounds %struct.region, %struct.region* %arrayidx6, i32 0, i32 2, !dbg !5686
  %bf.load = load i8, i8* %has_real_ebb, align 4, !dbg !5687
  %bf.clear = and i8 %bf.load, -3, !dbg !5687
  store i8 %bf.clear, i8* %has_real_ebb, align 4, !dbg !5687
  %11 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !5688
  %12 = load i32, i32* @nr_regions, align 4, !dbg !5688
  %idxprom7 = sext i32 %12 to i64, !dbg !5688
  %arrayidx8 = getelementptr inbounds %struct.region, %struct.region* %11, i64 %idxprom7, !dbg !5688
  %dont_calc_deps = getelementptr inbounds %struct.region, %struct.region* %arrayidx8, i32 0, i32 2, !dbg !5688
  %bf.load9 = load i8, i8* %dont_calc_deps, align 4, !dbg !5689
  %bf.clear10 = and i8 %bf.load9, -2, !dbg !5689
  store i8 %bf.clear10, i8* %dont_calc_deps, align 4, !dbg !5689
  %13 = load i32, i32* @nr_regions, align 4, !dbg !5690
  %14 = load i32*, i32** @containing_rgn, align 8, !dbg !5691
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5691
  %index11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !5691
  %16 = load i32, i32* %index11, align 8, !dbg !5691
  %idxprom12 = sext i32 %16 to i64, !dbg !5691
  %arrayidx13 = getelementptr inbounds i32, i32* %14, i64 %idxprom12, !dbg !5691
  store i32 %13, i32* %arrayidx13, align 4, !dbg !5692
  %17 = load i32*, i32** @block_to_bb, align 8, !dbg !5693
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5693
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !5693
  %19 = load i32, i32* %index14, align 8, !dbg !5693
  %idxprom15 = sext i32 %19 to i64, !dbg !5693
  %arrayidx16 = getelementptr inbounds i32, i32* %17, i64 %idxprom15, !dbg !5693
  store i32 0, i32* %arrayidx16, align 4, !dbg !5694
  %20 = load i32, i32* @nr_regions, align 4, !dbg !5695
  %inc = add nsw i32 %20, 1, !dbg !5695
  store i32 %inc, i32* @nr_regions, align 4, !dbg !5695
  %21 = load i32, i32* %i, align 4, !dbg !5696
  %add = add nsw i32 %21, 1, !dbg !5697
  %22 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !5698
  %23 = load i32, i32* @nr_regions, align 4, !dbg !5698
  %idxprom17 = sext i32 %23 to i64, !dbg !5698
  %arrayidx18 = getelementptr inbounds %struct.region, %struct.region* %22, i64 %idxprom17, !dbg !5698
  %rgn_blocks19 = getelementptr inbounds %struct.region, %struct.region* %arrayidx18, i32 0, i32 1, !dbg !5698
  store i32 %add, i32* %rgn_blocks19, align 4, !dbg !5699
  ret void, !dbg !5700
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_handle_sched() #0 !dbg !5701 {
entry:
  %0 = load i32, i32* @flag_schedule_insns, align 4, !dbg !5702
  %tobool = icmp ne i32 %0, 0, !dbg !5702
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5703

land.rhs:                                         ; preds = %entry
  %call = call zeroext i8 @dbg_cnt(i32 28), !dbg !5704
  %conv = zext i8 %call to i32, !dbg !5704
  %tobool1 = icmp ne i32 %conv, 0, !dbg !5703
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %1 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !5705
  %land.ext = zext i1 %1 to i32, !dbg !5703
  %conv2 = trunc i32 %land.ext to i8, !dbg !5702
  ret i8 %conv2, !dbg !5706
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_sched() #0 !dbg !5707 {
entry:
  %0 = load i32, i32* @flag_selective_scheduling, align 4, !dbg !5708
  %tobool = icmp ne i32 %0, 0, !dbg !5708
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5710

land.lhs.true:                                    ; preds = %entry
  %call = call zeroext i8 @maybe_skip_selective_scheduling(), !dbg !5711
  %tobool1 = icmp ne i8 %call, 0, !dbg !5711
  br i1 %tobool1, label %if.else, label %if.then, !dbg !5712

if.then:                                          ; preds = %land.lhs.true
  call void @run_selective_scheduling(), !dbg !5713
  br label %if.end, !dbg !5713

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @schedule_insns(), !dbg !5714
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0, !dbg !5715
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_handle_sched2() #0 !dbg !5716 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !5717
  %cmp = icmp sgt i32 %0, 0, !dbg !5718
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !5719

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_schedule_insns_after_reload, align 4, !dbg !5720
  %tobool = icmp ne i32 %1, 0, !dbg !5720
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5721

land.rhs:                                         ; preds = %land.lhs.true
  %call = call zeroext i8 @dbg_cnt(i32 26), !dbg !5722
  %conv = zext i8 %call to i32, !dbg !5722
  %tobool1 = icmp ne i32 %conv, 0, !dbg !5721
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %2 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !5723
  %land.ext = zext i1 %2 to i32, !dbg !5721
  %conv2 = trunc i32 %land.ext to i8, !dbg !5717
  ret i8 %conv2, !dbg !5724
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_sched2() #0 !dbg !5725 {
entry:
  %0 = load i32, i32* @flag_selective_scheduling2, align 4, !dbg !5726
  %tobool = icmp ne i32 %0, 0, !dbg !5726
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5728

land.lhs.true:                                    ; preds = %entry
  %call = call zeroext i8 @maybe_skip_selective_scheduling(), !dbg !5729
  %tobool1 = icmp ne i8 %call, 0, !dbg !5729
  br i1 %tobool1, label %if.else, label %if.then, !dbg !5730

if.then:                                          ; preds = %land.lhs.true
  call void @run_selective_scheduling(), !dbg !5731
  br label %if.end5, !dbg !5731

if.else:                                          ; preds = %land.lhs.true, %entry
  %1 = load i32, i32* @flag_sched2_use_superblocks, align 4, !dbg !5732
  %tobool2 = icmp ne i32 %1, 0, !dbg !5732
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !5735

if.then3:                                         ; preds = %if.else
  call void @schedule_ebbs(), !dbg !5736
  br label %if.end, !dbg !5736

if.else4:                                         ; preds = %if.else
  call void @schedule_insns(), !dbg !5737
  br label %if.end

if.end:                                           ; preds = %if.else4, %if.then3
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  ret i32 0, !dbg !5738
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5739 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5742, metadata !DIExpression()), !dbg !5743
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5744
  %3 = load i32, i32* %index, align 8, !dbg !5744
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5745
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5745
  %6 = load i32, i32* %5, align 8, !dbg !5745
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5745
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !5745
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !5745
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5745
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5745

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5745
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5745
  %11 = load i32, i32* %10, align 8, !dbg !5745
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5745
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5745
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5745
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5745
  br label %cond.end, !dbg !5745

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5745

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5745
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5745
  %cmp = icmp eq i32 %3, %call2, !dbg !5746
  %conv = zext i1 %cmp to i32, !dbg !5746
  %conv3 = trunc i32 %conv to i8, !dbg !5747
  ret i8 %conv3, !dbg !5748
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5749 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5752, metadata !DIExpression()), !dbg !5753
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5754
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5754
  %5 = load i32, i32* %4, align 8, !dbg !5754
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5754
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5754
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5754
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5754
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5754

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5754
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5754
  %10 = load i32, i32* %9, align 8, !dbg !5754
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5754
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5754
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5754
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5754
  br label %cond.end, !dbg !5754

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5754

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5754
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5754
  %13 = load i32, i32* %index, align 8, !dbg !5754
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5754
  ret %struct.edge_def* %call2, !dbg !5755
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5756 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5761, metadata !DIExpression()), !dbg !5762
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5762
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5762
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5762

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5762
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5762
  %2 = load i32, i32* %num, align 8, !dbg !5762
  br label %cond.end, !dbg !5762

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5762

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5762
  ret i32 %cond, !dbg !5762
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5763 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5766, metadata !DIExpression()), !dbg !5767
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5768
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !5768
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !5768
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5768

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.48, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5768
  br label %cond.end, !dbg !5768

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5768

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5768
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5769
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !5769
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !5770
  ret %struct.VEC_edge_gc* %5, !dbg !5771
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !5772 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5775, metadata !DIExpression()), !dbg !5776
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5777, metadata !DIExpression()), !dbg !5776
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5776
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5776
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5776

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5776
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5776
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !5776
  %3 = load i32, i32* %num, align 8, !dbg !5776
  %cmp = icmp ult i32 %1, %3, !dbg !5776
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5778
  %land.ext = zext i1 %4 to i32, !dbg !5776
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5776
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !5776
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5776
  %idxprom = zext i32 %6 to i64, !dbg !5776
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5776
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !5776
  ret %struct.edge_def* %7, !dbg !5776
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @alloc_EXPR_LIST(i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #2

declare dso_local void @sd_next_list(%struct.rtx_def*, i32*, %struct._deps_list**, i8*) #2

declare dso_local zeroext i8 @current_function_has_exception_handlers() #2

declare dso_local i32 @computed_jump_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @dead_or_set_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !5779 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5785, metadata !DIExpression()), !dbg !5786
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5787
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !5787
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !5787
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !5787
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5787

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5787
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !5787
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !5787
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !5787
  br label %cond.end, !dbg !5787

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5787

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5787
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5787
  %cmp = icmp eq i32 %call, 1, !dbg !5788
  %conv = zext i1 %cmp to i32, !dbg !5788
  %conv2 = trunc i32 %conv to i8, !dbg !5787
  ret i8 %conv2, !dbg !5789
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_pred(%struct.basic_block_def* %bb) #0 !dbg !5790 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5793, metadata !DIExpression()), !dbg !5794
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5795
  %call = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %0), !dbg !5796
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 0, !dbg !5797
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5797
  ret %struct.basic_block_def* %1, !dbg !5798
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !5799 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5802, metadata !DIExpression()), !dbg !5803
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5804
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !5804
  %tobool = icmp ne i8 %call, 0, !dbg !5804
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5804

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.48, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5804
  br label %cond.end, !dbg !5804

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5804

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5804
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5805
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !5805
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !5805
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !5805
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5805

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5805
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !5805
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !5805
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !5805
  br label %cond.end5, !dbg !5805

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5805

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !5805
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !5805
  ret %struct.edge_def* %call7, !dbg !5806
}

declare dso_local void @sel_find_rgns() #2

; Function Attrs: noinline nounwind uwtable
define internal void @haifa_find_rgns() #0 !dbg !5807 {
entry:
  %max_hdr = alloca i32*, align 8
  %dfs_nr = alloca i32*, align 8
  %degree = alloca i32*, align 8
  %no_loops = alloca i8, align 1
  %node = alloca i32, align 4
  %child = alloca i32, align 4
  %loop_head = alloca i32, align 4
  %i = alloca i32, align 4
  %head = alloca i32, align 4
  %tail = alloca i32, align 4
  %count = alloca i32, align 4
  %sp = alloca i32, align 4
  %idx = alloca i32, align 4
  %current_edge = alloca %struct.edge_iterator, align 8
  %stack = alloca %struct.edge_iterator*, align 8
  %num_bbs = alloca i32, align 4
  %num_insns = alloca i32, align 4
  %unreachable = alloca i32, align 4
  %too_large_failure = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %header = alloca %struct.simple_bitmap_def*, align 8
  %inner = alloca %struct.simple_bitmap_def*, align 8
  %in_queue = alloca %struct.simple_bitmap_def*, align 8
  %in_stack = alloca %struct.simple_bitmap_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp278 = alloca %struct.edge_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp290 = alloca %struct.edge_iterator, align 8
  %queue = alloca i32*, align 8
  %degree1 = alloca i32*, align 8
  %extended_rgn_header = alloca %struct.simple_bitmap_def*, align 8
  %extend_regions_p = alloca i8, align 1
  %e408 = alloca %struct.edge_def*, align 8
  %ei409 = alloca %struct.edge_iterator, align 8
  %jbb = alloca %struct.basic_block_def*, align 8
  %tmp457 = alloca %struct.edge_iterator, align 8
  %e519 = alloca %struct.edge_def*, align 8
  %tmp520 = alloca %struct.edge_iterator, align 8
  %e563 = alloca %struct.edge_def*, align 8
  %tmp567 = alloca %struct.edge_iterator, align 8
  %e670 = alloca %struct.edge_def*, align 8
  %tmp686 = alloca %struct.edge_iterator, align 8
  %t = alloca i32*, align 8
  %tmp729 = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata i32** %max_hdr, metadata !5808, metadata !DIExpression()), !dbg !5809
  call void @llvm.dbg.declare(metadata i32** %dfs_nr, metadata !5810, metadata !DIExpression()), !dbg !5811
  call void @llvm.dbg.declare(metadata i32** %degree, metadata !5812, metadata !DIExpression()), !dbg !5813
  call void @llvm.dbg.declare(metadata i8* %no_loops, metadata !5814, metadata !DIExpression()), !dbg !5815
  store i8 1, i8* %no_loops, align 1, !dbg !5815
  call void @llvm.dbg.declare(metadata i32* %node, metadata !5816, metadata !DIExpression()), !dbg !5817
  call void @llvm.dbg.declare(metadata i32* %child, metadata !5818, metadata !DIExpression()), !dbg !5819
  call void @llvm.dbg.declare(metadata i32* %loop_head, metadata !5820, metadata !DIExpression()), !dbg !5821
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5822, metadata !DIExpression()), !dbg !5823
  call void @llvm.dbg.declare(metadata i32* %head, metadata !5824, metadata !DIExpression()), !dbg !5825
  call void @llvm.dbg.declare(metadata i32* %tail, metadata !5826, metadata !DIExpression()), !dbg !5827
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5828, metadata !DIExpression()), !dbg !5829
  store i32 0, i32* %count, align 4, !dbg !5829
  call void @llvm.dbg.declare(metadata i32* %sp, metadata !5830, metadata !DIExpression()), !dbg !5831
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !5832, metadata !DIExpression()), !dbg !5833
  store i32 0, i32* %idx, align 4, !dbg !5833
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %current_edge, metadata !5834, metadata !DIExpression()), !dbg !5835
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %stack, metadata !5836, metadata !DIExpression()), !dbg !5837
  call void @llvm.dbg.declare(metadata i32* %num_bbs, metadata !5838, metadata !DIExpression()), !dbg !5839
  call void @llvm.dbg.declare(metadata i32* %num_insns, metadata !5840, metadata !DIExpression()), !dbg !5841
  call void @llvm.dbg.declare(metadata i32* %unreachable, metadata !5842, metadata !DIExpression()), !dbg !5843
  call void @llvm.dbg.declare(metadata i32* %too_large_failure, metadata !5844, metadata !DIExpression()), !dbg !5845
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5846, metadata !DIExpression()), !dbg !5847
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %header, metadata !5848, metadata !DIExpression()), !dbg !5849
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %inner, metadata !5850, metadata !DIExpression()), !dbg !5851
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %in_queue, metadata !5852, metadata !DIExpression()), !dbg !5853
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %in_stack, metadata !5854, metadata !DIExpression()), !dbg !5855
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5856
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5856
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5856
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5856
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !5856
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !5856
  %conv = sext i32 %2 to i64, !dbg !5856
  %mul = mul i64 4, %conv, !dbg !5856
  %call = call i8* @xmalloc(i64 %mul), !dbg !5856
  %3 = bitcast i8* %call to i32*, !dbg !5856
  store i32* %3, i32** %max_hdr, align 8, !dbg !5857
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5858
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5858
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5858
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5858
  %x_last_basic_block3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 5, !dbg !5858
  %6 = load i32, i32* %x_last_basic_block3, align 8, !dbg !5858
  %conv4 = sext i32 %6 to i64, !dbg !5858
  %call5 = call i8* @xcalloc(i64 %conv4, i64 4), !dbg !5858
  %7 = bitcast i8* %call5 to i32*, !dbg !5858
  store i32* %7, i32** %dfs_nr, align 8, !dbg !5859
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5860
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !5860
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !5860
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !5860
  %x_n_edges = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 4, !dbg !5860
  %10 = load i32, i32* %x_n_edges, align 4, !dbg !5860
  %conv8 = sext i32 %10 to i64, !dbg !5860
  %mul9 = mul i64 16, %conv8, !dbg !5860
  %call10 = call i8* @xmalloc(i64 %mul9), !dbg !5860
  %11 = bitcast i8* %call10 to %struct.edge_iterator*, !dbg !5860
  store %struct.edge_iterator* %11, %struct.edge_iterator** %stack, align 8, !dbg !5861
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5862
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !5862
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !5862
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !5862
  %x_last_basic_block13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 5, !dbg !5862
  %14 = load i32, i32* %x_last_basic_block13, align 8, !dbg !5862
  %call14 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %14), !dbg !5863
  store %struct.simple_bitmap_def* %call14, %struct.simple_bitmap_def** %inner, align 8, !dbg !5864
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !5865
  call void @sbitmap_ones(%struct.simple_bitmap_def* %15), !dbg !5866
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5867
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5867
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 1, !dbg !5867
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !5867
  %x_last_basic_block17 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 5, !dbg !5867
  %18 = load i32, i32* %x_last_basic_block17, align 8, !dbg !5867
  %call18 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %18), !dbg !5868
  store %struct.simple_bitmap_def* %call18, %struct.simple_bitmap_def** %header, align 8, !dbg !5869
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header, align 8, !dbg !5870
  call void @sbitmap_zero(%struct.simple_bitmap_def* %19), !dbg !5871
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5872
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !5872
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 1, !dbg !5872
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !5872
  %x_last_basic_block21 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 5, !dbg !5872
  %22 = load i32, i32* %x_last_basic_block21, align 8, !dbg !5872
  %call22 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %22), !dbg !5873
  store %struct.simple_bitmap_def* %call22, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !5874
  %23 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !5875
  call void @sbitmap_zero(%struct.simple_bitmap_def* %23), !dbg !5876
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5877
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !5877
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !5877
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !5877
  %x_last_basic_block25 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 5, !dbg !5877
  %26 = load i32, i32* %x_last_basic_block25, align 8, !dbg !5877
  %call26 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %26), !dbg !5878
  store %struct.simple_bitmap_def* %call26, %struct.simple_bitmap_def** %in_stack, align 8, !dbg !5879
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_stack, align 8, !dbg !5880
  call void @sbitmap_zero(%struct.simple_bitmap_def* %27), !dbg !5881
  store i32 0, i32* %i, align 4, !dbg !5882
  br label %for.cond, !dbg !5884

for.cond:                                         ; preds = %for.inc, %entry
  %28 = load i32, i32* %i, align 4, !dbg !5885
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5887
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !5887
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 1, !dbg !5887
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !5887
  %x_last_basic_block29 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 5, !dbg !5887
  %31 = load i32, i32* %x_last_basic_block29, align 8, !dbg !5887
  %cmp = icmp slt i32 %28, %31, !dbg !5888
  br i1 %cmp, label %for.body, label %for.end, !dbg !5889

for.body:                                         ; preds = %for.cond
  %32 = load i32*, i32** %max_hdr, align 8, !dbg !5890
  %33 = load i32, i32* %i, align 4, !dbg !5891
  %idxprom = sext i32 %33 to i64, !dbg !5890
  %arrayidx = getelementptr inbounds i32, i32* %32, i64 %idxprom, !dbg !5890
  store i32 -1, i32* %arrayidx, align 4, !dbg !5892
  br label %for.inc, !dbg !5890

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %i, align 4, !dbg !5893
  %inc = add nsw i32 %34, 1, !dbg !5893
  store i32 %inc, i32* %i, align 4, !dbg !5893
  br label %for.cond, !dbg !5894, !llvm.loop !5895

for.end:                                          ; preds = %for.cond
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5897
  %add.ptr31 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !5897
  %cfg32 = getelementptr inbounds %struct.function, %struct.function* %add.ptr31, i32 0, i32 1, !dbg !5897
  %36 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg32, align 8, !dbg !5897
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %36, i32 0, i32 0, !dbg !5897
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5897
  %call33 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %37), !dbg !5897
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call33, i32 0, i32 1, !dbg !5897
  %call34 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5897
  %38 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5897
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 0, !dbg !5897
  %40 = extractvalue { i32, %struct.VEC_edge_gc** } %call34, 0, !dbg !5897
  store i32 %40, i32* %39, align 8, !dbg !5897
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 1, !dbg !5897
  %42 = extractvalue { i32, %struct.VEC_edge_gc** } %call34, 1, !dbg !5897
  store %struct.VEC_edge_gc** %42, %struct.VEC_edge_gc*** %41, align 8, !dbg !5897
  %43 = bitcast %struct.edge_iterator* %current_edge to i8*, !dbg !5897
  %44 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5897
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false), !dbg !5897
  store i32 -1, i32* %sp, align 4, !dbg !5898
  br label %while.body, !dbg !5899

while.body:                                       ; preds = %for.end, %if.end128, %if.then147, %if.end195, %if.end267, %if.end271
  %45 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5900
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 0, !dbg !5900
  %47 = load i32, i32* %46, align 8, !dbg !5900
  %48 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 1, !dbg !5900
  %49 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %48, align 8, !dbg !5900
  %call35 = call zeroext i8 @ei_end_p(i32 %47, %struct.VEC_edge_gc** %49), !dbg !5900
  %conv36 = zext i8 %call35 to i32, !dbg !5900
  %tobool = icmp ne i32 %conv36, 0, !dbg !5900
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5900

lor.lhs.false:                                    ; preds = %while.body
  %50 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5900
  %51 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 0, !dbg !5900
  %52 = load i32, i32* %51, align 8, !dbg !5900
  %53 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 1, !dbg !5900
  %54 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %53, align 8, !dbg !5900
  %call37 = call %struct.edge_def* @ei_edge(i32 %52, %struct.VEC_edge_gc** %54), !dbg !5900
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call37, i32 0, i32 3, !dbg !5900
  %55 = load i8*, i8** %aux, align 8, !dbg !5900
  %tobool38 = icmp ne i8* %55, null, !dbg !5900
  br i1 %tobool38, label %if.then, label %if.end129, !dbg !5903

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.cond39, !dbg !5904

while.cond39:                                     ; preds = %if.end116, %if.then
  %56 = load i32, i32* %sp, align 4, !dbg !5906
  %cmp40 = icmp sge i32 %56, 0, !dbg !5907
  br i1 %cmp40, label %land.rhs, label %land.end, !dbg !5908

land.rhs:                                         ; preds = %while.cond39
  %57 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5909
  %58 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %57, i32 0, i32 0, !dbg !5909
  %59 = load i32, i32* %58, align 8, !dbg !5909
  %60 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %57, i32 0, i32 1, !dbg !5909
  %61 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %60, align 8, !dbg !5909
  %call42 = call zeroext i8 @ei_end_p(i32 %59, %struct.VEC_edge_gc** %61), !dbg !5909
  %conv43 = zext i8 %call42 to i32, !dbg !5909
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !5909
  br i1 %tobool44, label %lor.end, label %lor.rhs, !dbg !5909

lor.rhs:                                          ; preds = %land.rhs
  %62 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5909
  %63 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %62, i32 0, i32 0, !dbg !5909
  %64 = load i32, i32* %63, align 8, !dbg !5909
  %65 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %62, i32 0, i32 1, !dbg !5909
  %66 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %65, align 8, !dbg !5909
  %call45 = call %struct.edge_def* @ei_edge(i32 %64, %struct.VEC_edge_gc** %66), !dbg !5909
  %aux46 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call45, i32 0, i32 3, !dbg !5909
  %67 = load i8*, i8** %aux46, align 8, !dbg !5909
  %tobool47 = icmp ne i8* %67, null, !dbg !5909
  br label %lor.end, !dbg !5909

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %68 = phi i1 [ true, %land.rhs ], [ %tobool47, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond39
  %69 = phi i1 [ false, %while.cond39 ], [ %68, %lor.end ], !dbg !5910
  br i1 %69, label %while.body48, label %while.end, !dbg !5904

while.body48:                                     ; preds = %land.end
  %70 = load %struct.edge_iterator*, %struct.edge_iterator** %stack, align 8, !dbg !5911
  %71 = load i32, i32* %sp, align 4, !dbg !5913
  %dec = add nsw i32 %71, -1, !dbg !5913
  store i32 %dec, i32* %sp, align 4, !dbg !5913
  %idxprom49 = sext i32 %71 to i64, !dbg !5911
  %arrayidx50 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %70, i64 %idxprom49, !dbg !5911
  %72 = bitcast %struct.edge_iterator* %current_edge to i8*, !dbg !5911
  %73 = bitcast %struct.edge_iterator* %arrayidx50 to i8*, !dbg !5911
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 16, i1 false), !dbg !5911
  %74 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5914
  %75 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %74, i32 0, i32 0, !dbg !5914
  %76 = load i32, i32* %75, align 8, !dbg !5914
  %77 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %74, i32 0, i32 1, !dbg !5914
  %78 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %77, align 8, !dbg !5914
  %call51 = call %struct.edge_def* @ei_edge(i32 %76, %struct.VEC_edge_gc** %78), !dbg !5914
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call51, i32 0, i32 0, !dbg !5915
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5915
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 9, !dbg !5916
  %80 = load i32, i32* %index, align 8, !dbg !5916
  store i32 %80, i32* %node, align 4, !dbg !5917
  %81 = load i32, i32* %node, align 4, !dbg !5918
  %cmp52 = icmp ne i32 %81, 0, !dbg !5918
  br i1 %cmp52, label %cond.false, label %cond.true, !dbg !5918

cond.true:                                        ; preds = %while.body48
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 684, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5918
  br label %cond.end, !dbg !5918

cond.false:                                       ; preds = %while.body48
  br label %cond.end, !dbg !5918

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5918
  %82 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5919
  %83 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %82, i32 0, i32 0, !dbg !5919
  %84 = load i32, i32* %83, align 8, !dbg !5919
  %85 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %82, i32 0, i32 1, !dbg !5919
  %86 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %85, align 8, !dbg !5919
  %call54 = call %struct.edge_def* @ei_edge(i32 %84, %struct.VEC_edge_gc** %86), !dbg !5919
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call54, i32 0, i32 1, !dbg !5920
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5920
  %index55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 9, !dbg !5921
  %88 = load i32, i32* %index55, align 8, !dbg !5921
  store i32 %88, i32* %child, align 4, !dbg !5922
  %89 = load i32, i32* %child, align 4, !dbg !5923
  %cmp56 = icmp ne i32 %89, 1, !dbg !5923
  br i1 %cmp56, label %cond.false59, label %cond.true58, !dbg !5923

cond.true58:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 686, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5923
  br label %cond.end60, !dbg !5923

cond.false59:                                     ; preds = %cond.end
  br label %cond.end60, !dbg !5923

cond.end60:                                       ; preds = %cond.false59, %cond.true58
  %cond61 = phi i32 [ 0, %cond.true58 ], [ 0, %cond.false59 ], !dbg !5923
  %90 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_stack, align 8, !dbg !5924
  %91 = load i32, i32* %child, align 4, !dbg !5925
  call void @RESET_BIT(%struct.simple_bitmap_def* %90, i32 %91), !dbg !5926
  %92 = load i32*, i32** %max_hdr, align 8, !dbg !5927
  %93 = load i32, i32* %child, align 4, !dbg !5929
  %idxprom62 = sext i32 %93 to i64, !dbg !5927
  %arrayidx63 = getelementptr inbounds i32, i32* %92, i64 %idxprom62, !dbg !5927
  %94 = load i32, i32* %arrayidx63, align 4, !dbg !5927
  %cmp64 = icmp sge i32 %94, 0, !dbg !5930
  br i1 %cmp64, label %land.lhs.true, label %if.end116, !dbg !5931

land.lhs.true:                                    ; preds = %cond.end60
  %95 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_stack, align 8, !dbg !5932
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %95, i32 0, i32 3, !dbg !5932
  %96 = load i32*, i32** %max_hdr, align 8, !dbg !5932
  %97 = load i32, i32* %child, align 4, !dbg !5932
  %idxprom66 = sext i32 %97 to i64, !dbg !5932
  %arrayidx67 = getelementptr inbounds i32, i32* %96, i64 %idxprom66, !dbg !5932
  %98 = load i32, i32* %arrayidx67, align 4, !dbg !5932
  %div = udiv i32 %98, 64, !dbg !5932
  %idxprom68 = zext i32 %div to i64, !dbg !5932
  %arrayidx69 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom68, !dbg !5932
  %99 = load i64, i64* %arrayidx69, align 8, !dbg !5932
  %100 = load i32*, i32** %max_hdr, align 8, !dbg !5932
  %101 = load i32, i32* %child, align 4, !dbg !5932
  %idxprom70 = sext i32 %101 to i64, !dbg !5932
  %arrayidx71 = getelementptr inbounds i32, i32* %100, i64 %idxprom70, !dbg !5932
  %102 = load i32, i32* %arrayidx71, align 4, !dbg !5932
  %rem = urem i32 %102, 64, !dbg !5932
  %sh_prom = zext i32 %rem to i64, !dbg !5932
  %shr = lshr i64 %99, %sh_prom, !dbg !5932
  %and = and i64 %shr, 1, !dbg !5932
  %tobool72 = icmp ne i64 %and, 0, !dbg !5932
  br i1 %tobool72, label %if.then73, label %if.end116, !dbg !5933

if.then73:                                        ; preds = %land.lhs.true
  %103 = load i32*, i32** %max_hdr, align 8, !dbg !5934
  %104 = load i32, i32* %node, align 4, !dbg !5934
  %idxprom74 = sext i32 %104 to i64, !dbg !5934
  %arrayidx75 = getelementptr inbounds i32, i32* %103, i64 %idxprom74, !dbg !5934
  %105 = load i32, i32* %arrayidx75, align 4, !dbg !5934
  %cmp76 = icmp eq i32 %105, -1, !dbg !5934
  br i1 %cmp76, label %if.then78, label %if.else, !dbg !5937

if.then78:                                        ; preds = %if.then73
  %106 = load i32*, i32** %max_hdr, align 8, !dbg !5934
  %107 = load i32, i32* %child, align 4, !dbg !5934
  %idxprom79 = sext i32 %107 to i64, !dbg !5934
  %arrayidx80 = getelementptr inbounds i32, i32* %106, i64 %idxprom79, !dbg !5934
  %108 = load i32, i32* %arrayidx80, align 4, !dbg !5934
  %109 = load i32*, i32** %max_hdr, align 8, !dbg !5934
  %110 = load i32, i32* %node, align 4, !dbg !5934
  %idxprom81 = sext i32 %110 to i64, !dbg !5934
  %arrayidx82 = getelementptr inbounds i32, i32* %109, i64 %idxprom81, !dbg !5934
  store i32 %108, i32* %arrayidx82, align 4, !dbg !5934
  br label %if.end115, !dbg !5934

if.else:                                          ; preds = %if.then73
  %111 = load i32*, i32** %dfs_nr, align 8, !dbg !5938
  %112 = load i32*, i32** %max_hdr, align 8, !dbg !5938
  %113 = load i32, i32* %node, align 4, !dbg !5938
  %idxprom83 = sext i32 %113 to i64, !dbg !5938
  %arrayidx84 = getelementptr inbounds i32, i32* %112, i64 %idxprom83, !dbg !5938
  %114 = load i32, i32* %arrayidx84, align 4, !dbg !5938
  %idxprom85 = sext i32 %114 to i64, !dbg !5938
  %arrayidx86 = getelementptr inbounds i32, i32* %111, i64 %idxprom85, !dbg !5938
  %115 = load i32, i32* %arrayidx86, align 4, !dbg !5938
  %116 = load i32*, i32** %dfs_nr, align 8, !dbg !5938
  %117 = load i32*, i32** %max_hdr, align 8, !dbg !5938
  %118 = load i32, i32* %child, align 4, !dbg !5938
  %idxprom87 = sext i32 %118 to i64, !dbg !5938
  %arrayidx88 = getelementptr inbounds i32, i32* %117, i64 %idxprom87, !dbg !5938
  %119 = load i32, i32* %arrayidx88, align 4, !dbg !5938
  %idxprom89 = sext i32 %119 to i64, !dbg !5938
  %arrayidx90 = getelementptr inbounds i32, i32* %116, i64 %idxprom89, !dbg !5938
  %120 = load i32, i32* %arrayidx90, align 4, !dbg !5938
  %cmp91 = icmp sgt i32 %115, %120, !dbg !5938
  br i1 %cmp91, label %if.then93, label %if.else96, !dbg !5934

if.then93:                                        ; preds = %if.else
  %121 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !5938
  %122 = load i32*, i32** %max_hdr, align 8, !dbg !5938
  %123 = load i32, i32* %child, align 4, !dbg !5938
  %idxprom94 = sext i32 %123 to i64, !dbg !5938
  %arrayidx95 = getelementptr inbounds i32, i32* %122, i64 %idxprom94, !dbg !5938
  %124 = load i32, i32* %arrayidx95, align 4, !dbg !5938
  call void @RESET_BIT(%struct.simple_bitmap_def* %121, i32 %124), !dbg !5938
  br label %if.end114, !dbg !5938

if.else96:                                        ; preds = %if.else
  %125 = load i32*, i32** %dfs_nr, align 8, !dbg !5940
  %126 = load i32*, i32** %max_hdr, align 8, !dbg !5940
  %127 = load i32, i32* %node, align 4, !dbg !5940
  %idxprom97 = sext i32 %127 to i64, !dbg !5940
  %arrayidx98 = getelementptr inbounds i32, i32* %126, i64 %idxprom97, !dbg !5940
  %128 = load i32, i32* %arrayidx98, align 4, !dbg !5940
  %idxprom99 = sext i32 %128 to i64, !dbg !5940
  %arrayidx100 = getelementptr inbounds i32, i32* %125, i64 %idxprom99, !dbg !5940
  %129 = load i32, i32* %arrayidx100, align 4, !dbg !5940
  %130 = load i32*, i32** %dfs_nr, align 8, !dbg !5940
  %131 = load i32*, i32** %max_hdr, align 8, !dbg !5940
  %132 = load i32, i32* %child, align 4, !dbg !5940
  %idxprom101 = sext i32 %132 to i64, !dbg !5940
  %arrayidx102 = getelementptr inbounds i32, i32* %131, i64 %idxprom101, !dbg !5940
  %133 = load i32, i32* %arrayidx102, align 4, !dbg !5940
  %idxprom103 = sext i32 %133 to i64, !dbg !5940
  %arrayidx104 = getelementptr inbounds i32, i32* %130, i64 %idxprom103, !dbg !5940
  %134 = load i32, i32* %arrayidx104, align 4, !dbg !5940
  %cmp105 = icmp slt i32 %129, %134, !dbg !5940
  br i1 %cmp105, label %if.then107, label %if.end, !dbg !5938

if.then107:                                       ; preds = %if.else96
  %135 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !5942
  %136 = load i32*, i32** %max_hdr, align 8, !dbg !5942
  %137 = load i32, i32* %node, align 4, !dbg !5942
  %idxprom108 = sext i32 %137 to i64, !dbg !5942
  %arrayidx109 = getelementptr inbounds i32, i32* %136, i64 %idxprom108, !dbg !5942
  %138 = load i32, i32* %arrayidx109, align 4, !dbg !5942
  call void @RESET_BIT(%struct.simple_bitmap_def* %135, i32 %138), !dbg !5942
  %139 = load i32*, i32** %max_hdr, align 8, !dbg !5942
  %140 = load i32, i32* %child, align 4, !dbg !5942
  %idxprom110 = sext i32 %140 to i64, !dbg !5942
  %arrayidx111 = getelementptr inbounds i32, i32* %139, i64 %idxprom110, !dbg !5942
  %141 = load i32, i32* %arrayidx111, align 4, !dbg !5942
  %142 = load i32*, i32** %max_hdr, align 8, !dbg !5942
  %143 = load i32, i32* %node, align 4, !dbg !5942
  %idxprom112 = sext i32 %143 to i64, !dbg !5942
  %arrayidx113 = getelementptr inbounds i32, i32* %142, i64 %idxprom112, !dbg !5942
  store i32 %141, i32* %arrayidx113, align 4, !dbg !5942
  br label %if.end, !dbg !5942

if.end:                                           ; preds = %if.then107, %if.else96
  br label %if.end114

if.end114:                                        ; preds = %if.end, %if.then93
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.then78
  br label %if.end116, !dbg !5937

if.end116:                                        ; preds = %if.end115, %land.lhs.true, %cond.end60
  call void @ei_next(%struct.edge_iterator* %current_edge), !dbg !5944
  br label %while.cond39, !dbg !5904, !llvm.loop !5945

while.end:                                        ; preds = %land.end
  %144 = load i32, i32* %sp, align 4, !dbg !5947
  %cmp117 = icmp slt i32 %144, 0, !dbg !5949
  br i1 %cmp117, label %land.lhs.true119, label %if.end128, !dbg !5950

land.lhs.true119:                                 ; preds = %while.end
  %145 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5951
  %146 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %145, i32 0, i32 0, !dbg !5951
  %147 = load i32, i32* %146, align 8, !dbg !5951
  %148 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %145, i32 0, i32 1, !dbg !5951
  %149 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %148, align 8, !dbg !5951
  %call120 = call zeroext i8 @ei_end_p(i32 %147, %struct.VEC_edge_gc** %149), !dbg !5951
  %conv121 = zext i8 %call120 to i32, !dbg !5951
  %tobool122 = icmp ne i32 %conv121, 0, !dbg !5951
  br i1 %tobool122, label %if.then127, label %lor.lhs.false123, !dbg !5951

lor.lhs.false123:                                 ; preds = %land.lhs.true119
  %150 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5951
  %151 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %150, i32 0, i32 0, !dbg !5951
  %152 = load i32, i32* %151, align 8, !dbg !5951
  %153 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %150, i32 0, i32 1, !dbg !5951
  %154 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %153, align 8, !dbg !5951
  %call124 = call %struct.edge_def* @ei_edge(i32 %152, %struct.VEC_edge_gc** %154), !dbg !5951
  %aux125 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call124, i32 0, i32 3, !dbg !5951
  %155 = load i8*, i8** %aux125, align 8, !dbg !5951
  %tobool126 = icmp ne i8* %155, null, !dbg !5951
  br i1 %tobool126, label %if.then127, label %if.end128, !dbg !5952

if.then127:                                       ; preds = %lor.lhs.false123, %land.lhs.true119
  br label %while.end283, !dbg !5953

if.end128:                                        ; preds = %lor.lhs.false123, %while.end
  br label %while.body, !dbg !5954, !llvm.loop !5955

if.end129:                                        ; preds = %lor.lhs.false
  %156 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5957
  %157 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %156, i32 0, i32 0, !dbg !5957
  %158 = load i32, i32* %157, align 8, !dbg !5957
  %159 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %156, i32 0, i32 1, !dbg !5957
  %160 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %159, align 8, !dbg !5957
  %call130 = call %struct.edge_def* @ei_edge(i32 %158, %struct.VEC_edge_gc** %160), !dbg !5957
  %src131 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call130, i32 0, i32 0, !dbg !5958
  %161 = load %struct.basic_block_def*, %struct.basic_block_def** %src131, align 8, !dbg !5958
  %index132 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %161, i32 0, i32 9, !dbg !5959
  %162 = load i32, i32* %index132, align 8, !dbg !5959
  store i32 %162, i32* %node, align 4, !dbg !5960
  %163 = load i32, i32* %node, align 4, !dbg !5961
  %cmp133 = icmp ne i32 %163, 0, !dbg !5961
  br i1 %cmp133, label %cond.false136, label %cond.true135, !dbg !5961

cond.true135:                                     ; preds = %if.end129
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 703, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !5961
  br label %cond.end137, !dbg !5961

cond.false136:                                    ; preds = %if.end129
  br label %cond.end137, !dbg !5961

cond.end137:                                      ; preds = %cond.false136, %cond.true135
  %cond138 = phi i32 [ 0, %cond.true135 ], [ 0, %cond.false136 ], !dbg !5961
  %164 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_stack, align 8, !dbg !5962
  %165 = load i32, i32* %node, align 4, !dbg !5963
  call void @SET_BIT(%struct.simple_bitmap_def* %164, i32 %165), !dbg !5964
  %166 = load i32, i32* %count, align 4, !dbg !5965
  %inc139 = add nsw i32 %166, 1, !dbg !5965
  store i32 %inc139, i32* %count, align 4, !dbg !5965
  %167 = load i32*, i32** %dfs_nr, align 8, !dbg !5966
  %168 = load i32, i32* %node, align 4, !dbg !5967
  %idxprom140 = sext i32 %168 to i64, !dbg !5966
  %arrayidx141 = getelementptr inbounds i32, i32* %167, i64 %idxprom140, !dbg !5966
  store i32 %inc139, i32* %arrayidx141, align 4, !dbg !5968
  %169 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5969
  %170 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %169, i32 0, i32 0, !dbg !5969
  %171 = load i32, i32* %170, align 8, !dbg !5969
  %172 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %169, i32 0, i32 1, !dbg !5969
  %173 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %172, align 8, !dbg !5969
  %call142 = call %struct.edge_def* @ei_edge(i32 %171, %struct.VEC_edge_gc** %173), !dbg !5969
  %dest143 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call142, i32 0, i32 1, !dbg !5970
  %174 = load %struct.basic_block_def*, %struct.basic_block_def** %dest143, align 8, !dbg !5970
  %index144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %174, i32 0, i32 9, !dbg !5971
  %175 = load i32, i32* %index144, align 8, !dbg !5971
  store i32 %175, i32* %child, align 4, !dbg !5972
  %176 = load i32, i32* %child, align 4, !dbg !5973
  %cmp145 = icmp eq i32 %176, 1, !dbg !5975
  br i1 %cmp145, label %if.then147, label %if.end151, !dbg !5976

if.then147:                                       ; preds = %cond.end137
  %177 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5977
  %178 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %177, i32 0, i32 0, !dbg !5977
  %179 = load i32, i32* %178, align 8, !dbg !5977
  %180 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %177, i32 0, i32 1, !dbg !5977
  %181 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %180, align 8, !dbg !5977
  %call148 = call %struct.edge_def* @ei_edge(i32 %179, %struct.VEC_edge_gc** %181), !dbg !5977
  %182 = bitcast %struct.edge_def* %call148 to i8*, !dbg !5977
  %183 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5977
  %184 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %183, i32 0, i32 0, !dbg !5977
  %185 = load i32, i32* %184, align 8, !dbg !5977
  %186 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %183, i32 0, i32 1, !dbg !5977
  %187 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %186, align 8, !dbg !5977
  %call149 = call %struct.edge_def* @ei_edge(i32 %185, %struct.VEC_edge_gc** %187), !dbg !5977
  %aux150 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call149, i32 0, i32 3, !dbg !5977
  store i8* %182, i8** %aux150, align 8, !dbg !5977
  call void @ei_next(%struct.edge_iterator* %current_edge), !dbg !5979
  br label %while.body, !dbg !5980, !llvm.loop !5955

if.end151:                                        ; preds = %cond.end137
  %188 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_stack, align 8, !dbg !5981
  %elms152 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %188, i32 0, i32 3, !dbg !5981
  %189 = load i32, i32* %child, align 4, !dbg !5981
  %div153 = udiv i32 %189, 64, !dbg !5981
  %idxprom154 = zext i32 %div153 to i64, !dbg !5981
  %arrayidx155 = getelementptr inbounds [1 x i64], [1 x i64]* %elms152, i64 0, i64 %idxprom154, !dbg !5981
  %190 = load i64, i64* %arrayidx155, align 8, !dbg !5981
  %191 = load i32, i32* %child, align 4, !dbg !5981
  %rem156 = urem i32 %191, 64, !dbg !5981
  %sh_prom157 = zext i32 %rem156 to i64, !dbg !5981
  %shr158 = lshr i64 %190, %sh_prom157, !dbg !5981
  %and159 = and i64 %shr158, 1, !dbg !5981
  %tobool160 = icmp ne i64 %and159, 0, !dbg !5981
  br i1 %tobool160, label %if.then161, label %if.end199, !dbg !5983

if.then161:                                       ; preds = %if.end151
  store i8 0, i8* %no_loops, align 1, !dbg !5984
  %192 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header, align 8, !dbg !5986
  %193 = load i32, i32* %child, align 4, !dbg !5987
  call void @SET_BIT(%struct.simple_bitmap_def* %192, i32 %193), !dbg !5988
  %194 = load i32*, i32** %max_hdr, align 8, !dbg !5989
  %195 = load i32, i32* %node, align 4, !dbg !5989
  %idxprom162 = sext i32 %195 to i64, !dbg !5989
  %arrayidx163 = getelementptr inbounds i32, i32* %194, i64 %idxprom162, !dbg !5989
  %196 = load i32, i32* %arrayidx163, align 4, !dbg !5989
  %cmp164 = icmp eq i32 %196, -1, !dbg !5989
  br i1 %cmp164, label %if.then166, label %if.else169, !dbg !5992

if.then166:                                       ; preds = %if.then161
  %197 = load i32, i32* %child, align 4, !dbg !5989
  %198 = load i32*, i32** %max_hdr, align 8, !dbg !5989
  %199 = load i32, i32* %node, align 4, !dbg !5989
  %idxprom167 = sext i32 %199 to i64, !dbg !5989
  %arrayidx168 = getelementptr inbounds i32, i32* %198, i64 %idxprom167, !dbg !5989
  store i32 %197, i32* %arrayidx168, align 4, !dbg !5989
  br label %if.end195, !dbg !5989

if.else169:                                       ; preds = %if.then161
  %200 = load i32*, i32** %dfs_nr, align 8, !dbg !5993
  %201 = load i32*, i32** %max_hdr, align 8, !dbg !5993
  %202 = load i32, i32* %node, align 4, !dbg !5993
  %idxprom170 = sext i32 %202 to i64, !dbg !5993
  %arrayidx171 = getelementptr inbounds i32, i32* %201, i64 %idxprom170, !dbg !5993
  %203 = load i32, i32* %arrayidx171, align 4, !dbg !5993
  %idxprom172 = sext i32 %203 to i64, !dbg !5993
  %arrayidx173 = getelementptr inbounds i32, i32* %200, i64 %idxprom172, !dbg !5993
  %204 = load i32, i32* %arrayidx173, align 4, !dbg !5993
  %205 = load i32*, i32** %dfs_nr, align 8, !dbg !5993
  %206 = load i32, i32* %child, align 4, !dbg !5993
  %idxprom174 = sext i32 %206 to i64, !dbg !5993
  %arrayidx175 = getelementptr inbounds i32, i32* %205, i64 %idxprom174, !dbg !5993
  %207 = load i32, i32* %arrayidx175, align 4, !dbg !5993
  %cmp176 = icmp sgt i32 %204, %207, !dbg !5993
  br i1 %cmp176, label %if.then178, label %if.else179, !dbg !5989

if.then178:                                       ; preds = %if.else169
  %208 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !5993
  %209 = load i32, i32* %child, align 4, !dbg !5993
  call void @RESET_BIT(%struct.simple_bitmap_def* %208, i32 %209), !dbg !5993
  br label %if.end194, !dbg !5993

if.else179:                                       ; preds = %if.else169
  %210 = load i32*, i32** %dfs_nr, align 8, !dbg !5995
  %211 = load i32*, i32** %max_hdr, align 8, !dbg !5995
  %212 = load i32, i32* %node, align 4, !dbg !5995
  %idxprom180 = sext i32 %212 to i64, !dbg !5995
  %arrayidx181 = getelementptr inbounds i32, i32* %211, i64 %idxprom180, !dbg !5995
  %213 = load i32, i32* %arrayidx181, align 4, !dbg !5995
  %idxprom182 = sext i32 %213 to i64, !dbg !5995
  %arrayidx183 = getelementptr inbounds i32, i32* %210, i64 %idxprom182, !dbg !5995
  %214 = load i32, i32* %arrayidx183, align 4, !dbg !5995
  %215 = load i32*, i32** %dfs_nr, align 8, !dbg !5995
  %216 = load i32, i32* %child, align 4, !dbg !5995
  %idxprom184 = sext i32 %216 to i64, !dbg !5995
  %arrayidx185 = getelementptr inbounds i32, i32* %215, i64 %idxprom184, !dbg !5995
  %217 = load i32, i32* %arrayidx185, align 4, !dbg !5995
  %cmp186 = icmp slt i32 %214, %217, !dbg !5995
  br i1 %cmp186, label %if.then188, label %if.end193, !dbg !5993

if.then188:                                       ; preds = %if.else179
  %218 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !5997
  %219 = load i32*, i32** %max_hdr, align 8, !dbg !5997
  %220 = load i32, i32* %node, align 4, !dbg !5997
  %idxprom189 = sext i32 %220 to i64, !dbg !5997
  %arrayidx190 = getelementptr inbounds i32, i32* %219, i64 %idxprom189, !dbg !5997
  %221 = load i32, i32* %arrayidx190, align 4, !dbg !5997
  call void @RESET_BIT(%struct.simple_bitmap_def* %218, i32 %221), !dbg !5997
  %222 = load i32, i32* %child, align 4, !dbg !5997
  %223 = load i32*, i32** %max_hdr, align 8, !dbg !5997
  %224 = load i32, i32* %node, align 4, !dbg !5997
  %idxprom191 = sext i32 %224 to i64, !dbg !5997
  %arrayidx192 = getelementptr inbounds i32, i32* %223, i64 %idxprom191, !dbg !5997
  store i32 %222, i32* %arrayidx192, align 4, !dbg !5997
  br label %if.end193, !dbg !5997

if.end193:                                        ; preds = %if.then188, %if.else179
  br label %if.end194

if.end194:                                        ; preds = %if.end193, %if.then178
  br label %if.end195

if.end195:                                        ; preds = %if.end194, %if.then166
  %225 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5999
  %226 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %225, i32 0, i32 0, !dbg !5999
  %227 = load i32, i32* %226, align 8, !dbg !5999
  %228 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %225, i32 0, i32 1, !dbg !5999
  %229 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %228, align 8, !dbg !5999
  %call196 = call %struct.edge_def* @ei_edge(i32 %227, %struct.VEC_edge_gc** %229), !dbg !5999
  %230 = bitcast %struct.edge_def* %call196 to i8*, !dbg !5999
  %231 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !5999
  %232 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %231, i32 0, i32 0, !dbg !5999
  %233 = load i32, i32* %232, align 8, !dbg !5999
  %234 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %231, i32 0, i32 1, !dbg !5999
  %235 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %234, align 8, !dbg !5999
  %call197 = call %struct.edge_def* @ei_edge(i32 %233, %struct.VEC_edge_gc** %235), !dbg !5999
  %aux198 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call197, i32 0, i32 3, !dbg !5999
  store i8* %230, i8** %aux198, align 8, !dbg !5999
  call void @ei_next(%struct.edge_iterator* %current_edge), !dbg !6000
  br label %while.body, !dbg !6001, !llvm.loop !5955

if.end199:                                        ; preds = %if.end151
  %236 = load i32*, i32** %dfs_nr, align 8, !dbg !6002
  %237 = load i32, i32* %child, align 4, !dbg !6004
  %idxprom200 = sext i32 %237 to i64, !dbg !6002
  %arrayidx201 = getelementptr inbounds i32, i32* %236, i64 %idxprom200, !dbg !6002
  %238 = load i32, i32* %arrayidx201, align 4, !dbg !6002
  %tobool202 = icmp ne i32 %238, 0, !dbg !6002
  br i1 %tobool202, label %if.then203, label %if.end271, !dbg !6005

if.then203:                                       ; preds = %if.end199
  %239 = load i32*, i32** %max_hdr, align 8, !dbg !6006
  %240 = load i32, i32* %child, align 4, !dbg !6009
  %idxprom204 = sext i32 %240 to i64, !dbg !6006
  %arrayidx205 = getelementptr inbounds i32, i32* %239, i64 %idxprom204, !dbg !6006
  %241 = load i32, i32* %arrayidx205, align 4, !dbg !6006
  %cmp206 = icmp sge i32 %241, 0, !dbg !6010
  br i1 %cmp206, label %land.lhs.true208, label %if.end267, !dbg !6011

land.lhs.true208:                                 ; preds = %if.then203
  %242 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_stack, align 8, !dbg !6012
  %elms209 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %242, i32 0, i32 3, !dbg !6012
  %243 = load i32*, i32** %max_hdr, align 8, !dbg !6012
  %244 = load i32, i32* %child, align 4, !dbg !6012
  %idxprom210 = sext i32 %244 to i64, !dbg !6012
  %arrayidx211 = getelementptr inbounds i32, i32* %243, i64 %idxprom210, !dbg !6012
  %245 = load i32, i32* %arrayidx211, align 4, !dbg !6012
  %div212 = udiv i32 %245, 64, !dbg !6012
  %idxprom213 = zext i32 %div212 to i64, !dbg !6012
  %arrayidx214 = getelementptr inbounds [1 x i64], [1 x i64]* %elms209, i64 0, i64 %idxprom213, !dbg !6012
  %246 = load i64, i64* %arrayidx214, align 8, !dbg !6012
  %247 = load i32*, i32** %max_hdr, align 8, !dbg !6012
  %248 = load i32, i32* %child, align 4, !dbg !6012
  %idxprom215 = sext i32 %248 to i64, !dbg !6012
  %arrayidx216 = getelementptr inbounds i32, i32* %247, i64 %idxprom215, !dbg !6012
  %249 = load i32, i32* %arrayidx216, align 4, !dbg !6012
  %rem217 = urem i32 %249, 64, !dbg !6012
  %sh_prom218 = zext i32 %rem217 to i64, !dbg !6012
  %shr219 = lshr i64 %246, %sh_prom218, !dbg !6012
  %and220 = and i64 %shr219, 1, !dbg !6012
  %tobool221 = icmp ne i64 %and220, 0, !dbg !6012
  br i1 %tobool221, label %if.then222, label %if.end267, !dbg !6013

if.then222:                                       ; preds = %land.lhs.true208
  %250 = load i32*, i32** %max_hdr, align 8, !dbg !6014
  %251 = load i32, i32* %node, align 4, !dbg !6014
  %idxprom223 = sext i32 %251 to i64, !dbg !6014
  %arrayidx224 = getelementptr inbounds i32, i32* %250, i64 %idxprom223, !dbg !6014
  %252 = load i32, i32* %arrayidx224, align 4, !dbg !6014
  %cmp225 = icmp eq i32 %252, -1, !dbg !6014
  br i1 %cmp225, label %if.then227, label %if.else232, !dbg !6017

if.then227:                                       ; preds = %if.then222
  %253 = load i32*, i32** %max_hdr, align 8, !dbg !6014
  %254 = load i32, i32* %child, align 4, !dbg !6014
  %idxprom228 = sext i32 %254 to i64, !dbg !6014
  %arrayidx229 = getelementptr inbounds i32, i32* %253, i64 %idxprom228, !dbg !6014
  %255 = load i32, i32* %arrayidx229, align 4, !dbg !6014
  %256 = load i32*, i32** %max_hdr, align 8, !dbg !6014
  %257 = load i32, i32* %node, align 4, !dbg !6014
  %idxprom230 = sext i32 %257 to i64, !dbg !6014
  %arrayidx231 = getelementptr inbounds i32, i32* %256, i64 %idxprom230, !dbg !6014
  store i32 %255, i32* %arrayidx231, align 4, !dbg !6014
  br label %if.end266, !dbg !6014

if.else232:                                       ; preds = %if.then222
  %258 = load i32*, i32** %dfs_nr, align 8, !dbg !6018
  %259 = load i32*, i32** %max_hdr, align 8, !dbg !6018
  %260 = load i32, i32* %node, align 4, !dbg !6018
  %idxprom233 = sext i32 %260 to i64, !dbg !6018
  %arrayidx234 = getelementptr inbounds i32, i32* %259, i64 %idxprom233, !dbg !6018
  %261 = load i32, i32* %arrayidx234, align 4, !dbg !6018
  %idxprom235 = sext i32 %261 to i64, !dbg !6018
  %arrayidx236 = getelementptr inbounds i32, i32* %258, i64 %idxprom235, !dbg !6018
  %262 = load i32, i32* %arrayidx236, align 4, !dbg !6018
  %263 = load i32*, i32** %dfs_nr, align 8, !dbg !6018
  %264 = load i32*, i32** %max_hdr, align 8, !dbg !6018
  %265 = load i32, i32* %child, align 4, !dbg !6018
  %idxprom237 = sext i32 %265 to i64, !dbg !6018
  %arrayidx238 = getelementptr inbounds i32, i32* %264, i64 %idxprom237, !dbg !6018
  %266 = load i32, i32* %arrayidx238, align 4, !dbg !6018
  %idxprom239 = sext i32 %266 to i64, !dbg !6018
  %arrayidx240 = getelementptr inbounds i32, i32* %263, i64 %idxprom239, !dbg !6018
  %267 = load i32, i32* %arrayidx240, align 4, !dbg !6018
  %cmp241 = icmp sgt i32 %262, %267, !dbg !6018
  br i1 %cmp241, label %if.then243, label %if.else246, !dbg !6014

if.then243:                                       ; preds = %if.else232
  %268 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !6018
  %269 = load i32*, i32** %max_hdr, align 8, !dbg !6018
  %270 = load i32, i32* %child, align 4, !dbg !6018
  %idxprom244 = sext i32 %270 to i64, !dbg !6018
  %arrayidx245 = getelementptr inbounds i32, i32* %269, i64 %idxprom244, !dbg !6018
  %271 = load i32, i32* %arrayidx245, align 4, !dbg !6018
  call void @RESET_BIT(%struct.simple_bitmap_def* %268, i32 %271), !dbg !6018
  br label %if.end265, !dbg !6018

if.else246:                                       ; preds = %if.else232
  %272 = load i32*, i32** %dfs_nr, align 8, !dbg !6020
  %273 = load i32*, i32** %max_hdr, align 8, !dbg !6020
  %274 = load i32, i32* %node, align 4, !dbg !6020
  %idxprom247 = sext i32 %274 to i64, !dbg !6020
  %arrayidx248 = getelementptr inbounds i32, i32* %273, i64 %idxprom247, !dbg !6020
  %275 = load i32, i32* %arrayidx248, align 4, !dbg !6020
  %idxprom249 = sext i32 %275 to i64, !dbg !6020
  %arrayidx250 = getelementptr inbounds i32, i32* %272, i64 %idxprom249, !dbg !6020
  %276 = load i32, i32* %arrayidx250, align 4, !dbg !6020
  %277 = load i32*, i32** %dfs_nr, align 8, !dbg !6020
  %278 = load i32*, i32** %max_hdr, align 8, !dbg !6020
  %279 = load i32, i32* %child, align 4, !dbg !6020
  %idxprom251 = sext i32 %279 to i64, !dbg !6020
  %arrayidx252 = getelementptr inbounds i32, i32* %278, i64 %idxprom251, !dbg !6020
  %280 = load i32, i32* %arrayidx252, align 4, !dbg !6020
  %idxprom253 = sext i32 %280 to i64, !dbg !6020
  %arrayidx254 = getelementptr inbounds i32, i32* %277, i64 %idxprom253, !dbg !6020
  %281 = load i32, i32* %arrayidx254, align 4, !dbg !6020
  %cmp255 = icmp slt i32 %276, %281, !dbg !6020
  br i1 %cmp255, label %if.then257, label %if.end264, !dbg !6018

if.then257:                                       ; preds = %if.else246
  %282 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !6022
  %283 = load i32*, i32** %max_hdr, align 8, !dbg !6022
  %284 = load i32, i32* %node, align 4, !dbg !6022
  %idxprom258 = sext i32 %284 to i64, !dbg !6022
  %arrayidx259 = getelementptr inbounds i32, i32* %283, i64 %idxprom258, !dbg !6022
  %285 = load i32, i32* %arrayidx259, align 4, !dbg !6022
  call void @RESET_BIT(%struct.simple_bitmap_def* %282, i32 %285), !dbg !6022
  %286 = load i32*, i32** %max_hdr, align 8, !dbg !6022
  %287 = load i32, i32* %child, align 4, !dbg !6022
  %idxprom260 = sext i32 %287 to i64, !dbg !6022
  %arrayidx261 = getelementptr inbounds i32, i32* %286, i64 %idxprom260, !dbg !6022
  %288 = load i32, i32* %arrayidx261, align 4, !dbg !6022
  %289 = load i32*, i32** %max_hdr, align 8, !dbg !6022
  %290 = load i32, i32* %node, align 4, !dbg !6022
  %idxprom262 = sext i32 %290 to i64, !dbg !6022
  %arrayidx263 = getelementptr inbounds i32, i32* %289, i64 %idxprom262, !dbg !6022
  store i32 %288, i32* %arrayidx263, align 4, !dbg !6022
  br label %if.end264, !dbg !6022

if.end264:                                        ; preds = %if.then257, %if.else246
  br label %if.end265

if.end265:                                        ; preds = %if.end264, %if.then243
  br label %if.end266

if.end266:                                        ; preds = %if.end265, %if.then227
  br label %if.end267, !dbg !6017

if.end267:                                        ; preds = %if.end266, %land.lhs.true208, %if.then203
  %291 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !6024
  %292 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %291, i32 0, i32 0, !dbg !6024
  %293 = load i32, i32* %292, align 8, !dbg !6024
  %294 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %291, i32 0, i32 1, !dbg !6024
  %295 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %294, align 8, !dbg !6024
  %call268 = call %struct.edge_def* @ei_edge(i32 %293, %struct.VEC_edge_gc** %295), !dbg !6024
  %296 = bitcast %struct.edge_def* %call268 to i8*, !dbg !6024
  %297 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !6024
  %298 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %297, i32 0, i32 0, !dbg !6024
  %299 = load i32, i32* %298, align 8, !dbg !6024
  %300 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %297, i32 0, i32 1, !dbg !6024
  %301 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %300, align 8, !dbg !6024
  %call269 = call %struct.edge_def* @ei_edge(i32 %299, %struct.VEC_edge_gc** %301), !dbg !6024
  %aux270 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call269, i32 0, i32 3, !dbg !6024
  store i8* %296, i8** %aux270, align 8, !dbg !6024
  call void @ei_next(%struct.edge_iterator* %current_edge), !dbg !6025
  br label %while.body, !dbg !6026, !llvm.loop !5955

if.end271:                                        ; preds = %if.end199
  %302 = load %struct.edge_iterator*, %struct.edge_iterator** %stack, align 8, !dbg !6027
  %303 = load i32, i32* %sp, align 4, !dbg !6028
  %inc272 = add nsw i32 %303, 1, !dbg !6028
  store i32 %inc272, i32* %sp, align 4, !dbg !6028
  %idxprom273 = sext i32 %inc272 to i64, !dbg !6027
  %arrayidx274 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %302, i64 %idxprom273, !dbg !6027
  %304 = bitcast %struct.edge_iterator* %arrayidx274 to i8*, !dbg !6029
  %305 = bitcast %struct.edge_iterator* %current_edge to i8*, !dbg !6029
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %304, i8* align 8 %305, i64 16, i1 false), !dbg !6029
  %306 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !6030
  %307 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %306, i32 0, i32 0, !dbg !6030
  %308 = load i32, i32* %307, align 8, !dbg !6030
  %309 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %306, i32 0, i32 1, !dbg !6030
  %310 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %309, align 8, !dbg !6030
  %call275 = call %struct.edge_def* @ei_edge(i32 %308, %struct.VEC_edge_gc** %310), !dbg !6030
  %311 = bitcast %struct.edge_def* %call275 to i8*, !dbg !6030
  %312 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !6030
  %313 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %312, i32 0, i32 0, !dbg !6030
  %314 = load i32, i32* %313, align 8, !dbg !6030
  %315 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %312, i32 0, i32 1, !dbg !6030
  %316 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %315, align 8, !dbg !6030
  %call276 = call %struct.edge_def* @ei_edge(i32 %314, %struct.VEC_edge_gc** %316), !dbg !6030
  %aux277 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call276, i32 0, i32 3, !dbg !6030
  store i8* %311, i8** %aux277, align 8, !dbg !6030
  %317 = bitcast %struct.edge_iterator* %current_edge to { i32, %struct.VEC_edge_gc** }*, !dbg !6031
  %318 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %317, i32 0, i32 0, !dbg !6031
  %319 = load i32, i32* %318, align 8, !dbg !6031
  %320 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %317, i32 0, i32 1, !dbg !6031
  %321 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %320, align 8, !dbg !6031
  %call279 = call %struct.edge_def* @ei_edge(i32 %319, %struct.VEC_edge_gc** %321), !dbg !6031
  %dest280 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call279, i32 0, i32 1, !dbg !6031
  %322 = load %struct.basic_block_def*, %struct.basic_block_def** %dest280, align 8, !dbg !6031
  %succs281 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %322, i32 0, i32 1, !dbg !6031
  %call282 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs281), !dbg !6031
  %323 = bitcast %struct.edge_iterator* %tmp278 to { i32, %struct.VEC_edge_gc** }*, !dbg !6031
  %324 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %323, i32 0, i32 0, !dbg !6031
  %325 = extractvalue { i32, %struct.VEC_edge_gc** } %call282, 0, !dbg !6031
  store i32 %325, i32* %324, align 8, !dbg !6031
  %326 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %323, i32 0, i32 1, !dbg !6031
  %327 = extractvalue { i32, %struct.VEC_edge_gc** } %call282, 1, !dbg !6031
  store %struct.VEC_edge_gc** %327, %struct.VEC_edge_gc*** %326, align 8, !dbg !6031
  %328 = bitcast %struct.edge_iterator* %current_edge to i8*, !dbg !6031
  %329 = bitcast %struct.edge_iterator* %tmp278 to i8*, !dbg !6031
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %328, i8* align 8 %329, i64 16, i1 false), !dbg !6031
  br label %while.body, !dbg !5899, !llvm.loop !5955

while.end283:                                     ; preds = %if.then127
  %330 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6032
  %add.ptr284 = getelementptr inbounds %struct.function, %struct.function* %330, i64 0, !dbg !6032
  %cfg285 = getelementptr inbounds %struct.function, %struct.function* %add.ptr284, i32 0, i32 1, !dbg !6032
  %331 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg285, align 8, !dbg !6032
  %x_entry_block_ptr286 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %331, i32 0, i32 0, !dbg !6032
  %332 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr286, align 8, !dbg !6032
  store %struct.basic_block_def* %332, %struct.basic_block_def** %bb, align 8, !dbg !6032
  br label %for.cond287, !dbg !6032

for.cond287:                                      ; preds = %for.inc300, %while.end283
  %333 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6034
  %tobool288 = icmp ne %struct.basic_block_def* %333, null, !dbg !6032
  br i1 %tobool288, label %for.body289, label %for.end301, !dbg !6032

for.body289:                                      ; preds = %for.cond287
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6036, metadata !DIExpression()), !dbg !6038
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6039, metadata !DIExpression()), !dbg !6040
  %334 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6041
  %succs291 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %334, i32 0, i32 1, !dbg !6041
  %call292 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs291), !dbg !6041
  %335 = bitcast %struct.edge_iterator* %tmp290 to { i32, %struct.VEC_edge_gc** }*, !dbg !6041
  %336 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %335, i32 0, i32 0, !dbg !6041
  %337 = extractvalue { i32, %struct.VEC_edge_gc** } %call292, 0, !dbg !6041
  store i32 %337, i32* %336, align 8, !dbg !6041
  %338 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %335, i32 0, i32 1, !dbg !6041
  %339 = extractvalue { i32, %struct.VEC_edge_gc** } %call292, 1, !dbg !6041
  store %struct.VEC_edge_gc** %339, %struct.VEC_edge_gc*** %338, align 8, !dbg !6041
  %340 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6041
  %341 = bitcast %struct.edge_iterator* %tmp290 to i8*, !dbg !6041
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %340, i8* align 8 %341, i64 16, i1 false), !dbg !6041
  br label %for.cond293, !dbg !6041

for.cond293:                                      ; preds = %for.inc298, %for.body289
  %342 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6043
  %343 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %342, i32 0, i32 0, !dbg !6043
  %344 = load i32, i32* %343, align 8, !dbg !6043
  %345 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %342, i32 0, i32 1, !dbg !6043
  %346 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %345, align 8, !dbg !6043
  %call294 = call zeroext i8 @ei_cond(i32 %344, %struct.VEC_edge_gc** %346, %struct.edge_def** %e), !dbg !6043
  %tobool295 = icmp ne i8 %call294, 0, !dbg !6041
  br i1 %tobool295, label %for.body296, label %for.end299, !dbg !6041

for.body296:                                      ; preds = %for.cond293
  %347 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6045
  %aux297 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %347, i32 0, i32 3, !dbg !6046
  store i8* null, i8** %aux297, align 8, !dbg !6047
  br label %for.inc298, !dbg !6045

for.inc298:                                       ; preds = %for.body296
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6043
  br label %for.cond293, !dbg !6043, !llvm.loop !6048

for.end299:                                       ; preds = %for.cond293
  br label %for.inc300, !dbg !6050

for.inc300:                                       ; preds = %for.end299
  %348 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6034
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %348, i32 0, i32 6, !dbg !6034
  %349 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6034
  store %struct.basic_block_def* %349, %struct.basic_block_def** %bb, align 8, !dbg !6034
  br label %for.cond287, !dbg !6034, !llvm.loop !6051

for.end301:                                       ; preds = %for.cond287
  store i32 0, i32* %unreachable, align 4, !dbg !6053
  %350 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6054
  %add.ptr302 = getelementptr inbounds %struct.function, %struct.function* %350, i64 0, !dbg !6054
  %cfg303 = getelementptr inbounds %struct.function, %struct.function* %add.ptr302, i32 0, i32 1, !dbg !6054
  %351 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg303, align 8, !dbg !6054
  %x_entry_block_ptr304 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %351, i32 0, i32 0, !dbg !6054
  %352 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr304, align 8, !dbg !6054
  %next_bb305 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %352, i32 0, i32 6, !dbg !6054
  %353 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb305, align 8, !dbg !6054
  store %struct.basic_block_def* %353, %struct.basic_block_def** %bb, align 8, !dbg !6054
  br label %for.cond306, !dbg !6054

for.cond306:                                      ; preds = %for.inc319, %for.end301
  %354 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6056
  %355 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6056
  %add.ptr307 = getelementptr inbounds %struct.function, %struct.function* %355, i64 0, !dbg !6056
  %cfg308 = getelementptr inbounds %struct.function, %struct.function* %add.ptr307, i32 0, i32 1, !dbg !6056
  %356 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg308, align 8, !dbg !6056
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %356, i32 0, i32 1, !dbg !6056
  %357 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6056
  %cmp309 = icmp ne %struct.basic_block_def* %354, %357, !dbg !6056
  br i1 %cmp309, label %for.body311, label %for.end321, !dbg !6054

for.body311:                                      ; preds = %for.cond306
  %358 = load i32*, i32** %dfs_nr, align 8, !dbg !6058
  %359 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6060
  %index312 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %359, i32 0, i32 9, !dbg !6061
  %360 = load i32, i32* %index312, align 8, !dbg !6061
  %idxprom313 = sext i32 %360 to i64, !dbg !6058
  %arrayidx314 = getelementptr inbounds i32, i32* %358, i64 %idxprom313, !dbg !6058
  %361 = load i32, i32* %arrayidx314, align 4, !dbg !6058
  %cmp315 = icmp eq i32 %361, 0, !dbg !6062
  br i1 %cmp315, label %if.then317, label %if.end318, !dbg !6063

if.then317:                                       ; preds = %for.body311
  store i32 1, i32* %unreachable, align 4, !dbg !6064
  br label %for.end321, !dbg !6066

if.end318:                                        ; preds = %for.body311
  br label %for.inc319, !dbg !6067

for.inc319:                                       ; preds = %if.end318
  %362 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6056
  %next_bb320 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %362, i32 0, i32 6, !dbg !6056
  %363 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb320, align 8, !dbg !6056
  store %struct.basic_block_def* %363, %struct.basic_block_def** %bb, align 8, !dbg !6056
  br label %for.cond306, !dbg !6056, !llvm.loop !6068

for.end321:                                       ; preds = %if.then317, %for.cond306
  %364 = load i32*, i32** %dfs_nr, align 8, !dbg !6070
  store i32* %364, i32** %degree, align 8, !dbg !6071
  %365 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6072
  %add.ptr322 = getelementptr inbounds %struct.function, %struct.function* %365, i64 0, !dbg !6072
  %cfg323 = getelementptr inbounds %struct.function, %struct.function* %add.ptr322, i32 0, i32 1, !dbg !6072
  %366 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg323, align 8, !dbg !6072
  %x_entry_block_ptr324 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %366, i32 0, i32 0, !dbg !6072
  %367 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr324, align 8, !dbg !6072
  %next_bb325 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %367, i32 0, i32 6, !dbg !6072
  %368 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb325, align 8, !dbg !6072
  store %struct.basic_block_def* %368, %struct.basic_block_def** %bb, align 8, !dbg !6072
  br label %for.cond326, !dbg !6072

for.cond326:                                      ; preds = %for.inc343, %for.end321
  %369 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6074
  %370 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6074
  %add.ptr327 = getelementptr inbounds %struct.function, %struct.function* %370, i64 0, !dbg !6074
  %cfg328 = getelementptr inbounds %struct.function, %struct.function* %add.ptr327, i32 0, i32 1, !dbg !6074
  %371 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg328, align 8, !dbg !6074
  %x_exit_block_ptr329 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %371, i32 0, i32 1, !dbg !6074
  %372 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr329, align 8, !dbg !6074
  %cmp330 = icmp ne %struct.basic_block_def* %369, %372, !dbg !6074
  br i1 %cmp330, label %for.body332, label %for.end345, !dbg !6072

for.body332:                                      ; preds = %for.cond326
  %373 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6076
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %373, i32 0, i32 0, !dbg !6076
  %374 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6076
  %tobool333 = icmp ne %struct.VEC_edge_gc* %374, null, !dbg !6076
  br i1 %tobool333, label %cond.true334, label %cond.false336, !dbg !6076

cond.true334:                                     ; preds = %for.body332
  %375 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6076
  %preds335 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %375, i32 0, i32 0, !dbg !6076
  %376 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds335, align 8, !dbg !6076
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %376, i32 0, i32 0, !dbg !6076
  br label %cond.end337, !dbg !6076

cond.false336:                                    ; preds = %for.body332
  br label %cond.end337, !dbg !6076

cond.end337:                                      ; preds = %cond.false336, %cond.true334
  %cond338 = phi %struct.VEC_edge_base* [ %base, %cond.true334 ], [ null, %cond.false336 ], !dbg !6076
  %call339 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond338), !dbg !6076
  %377 = load i32*, i32** %degree, align 8, !dbg !6077
  %378 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6078
  %index340 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %378, i32 0, i32 9, !dbg !6079
  %379 = load i32, i32* %index340, align 8, !dbg !6079
  %idxprom341 = sext i32 %379 to i64, !dbg !6077
  %arrayidx342 = getelementptr inbounds i32, i32* %377, i64 %idxprom341, !dbg !6077
  store i32 %call339, i32* %arrayidx342, align 4, !dbg !6080
  br label %for.inc343, !dbg !6077

for.inc343:                                       ; preds = %cond.end337
  %380 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6074
  %next_bb344 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %380, i32 0, i32 6, !dbg !6074
  %381 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb344, align 8, !dbg !6074
  store %struct.basic_block_def* %381, %struct.basic_block_def** %bb, align 8, !dbg !6074
  br label %for.cond326, !dbg !6074, !llvm.loop !6081

for.end345:                                       ; preds = %for.cond326
  %382 = load i32, i32* %unreachable, align 4, !dbg !6083
  %tobool346 = icmp ne i32 %382, 0, !dbg !6083
  br i1 %tobool346, label %if.end757, label %if.then347, !dbg !6085

if.then347:                                       ; preds = %for.end345
  call void @llvm.dbg.declare(metadata i32** %queue, metadata !6086, metadata !DIExpression()), !dbg !6088
  call void @llvm.dbg.declare(metadata i32** %degree1, metadata !6089, metadata !DIExpression()), !dbg !6090
  store i32* null, i32** %degree1, align 8, !dbg !6090
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %extended_rgn_header, metadata !6091, metadata !DIExpression()), !dbg !6092
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** %extended_rgn_header, align 8, !dbg !6092
  call void @llvm.dbg.declare(metadata i8* %extend_regions_p, metadata !6093, metadata !DIExpression()), !dbg !6094
  %383 = load i8, i8* %no_loops, align 1, !dbg !6095
  %tobool348 = icmp ne i8 %383, 0, !dbg !6095
  br i1 %tobool348, label %if.then349, label %if.end350, !dbg !6097

if.then349:                                       ; preds = %if.then347
  %384 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header, align 8, !dbg !6098
  call void @SET_BIT(%struct.simple_bitmap_def* %384, i32 0), !dbg !6099
  br label %if.end350, !dbg !6099

if.end350:                                        ; preds = %if.then349, %if.then347
  %385 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6100
  %add.ptr351 = getelementptr inbounds %struct.function, %struct.function* %385, i64 0, !dbg !6100
  %cfg352 = getelementptr inbounds %struct.function, %struct.function* %add.ptr351, i32 0, i32 1, !dbg !6100
  %386 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg352, align 8, !dbg !6100
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %386, i32 0, i32 3, !dbg !6100
  %387 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !6100
  %conv353 = sext i32 %387 to i64, !dbg !6100
  %mul354 = mul i64 4, %conv353, !dbg !6100
  %call355 = call i8* @xmalloc(i64 %mul354), !dbg !6100
  %388 = bitcast i8* %call355 to i32*, !dbg !6100
  store i32* %388, i32** %queue, align 8, !dbg !6101
  %389 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !6102
  %arrayidx356 = getelementptr inbounds %struct.param_info, %struct.param_info* %389, i64 82, !dbg !6102
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx356, i32 0, i32 1, !dbg !6102
  %390 = load i32, i32* %value, align 8, !dbg !6102
  %cmp357 = icmp sgt i32 %390, 0, !dbg !6103
  %conv358 = zext i1 %cmp357 to i32, !dbg !6103
  %conv359 = trunc i32 %conv358 to i8, !dbg !6102
  store i8 %conv359, i8* %extend_regions_p, align 1, !dbg !6104
  %391 = load i8, i8* %extend_regions_p, align 1, !dbg !6105
  %tobool360 = icmp ne i8 %391, 0, !dbg !6105
  br i1 %tobool360, label %if.then361, label %if.end372, !dbg !6107

if.then361:                                       ; preds = %if.end350
  %392 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6108
  %add.ptr362 = getelementptr inbounds %struct.function, %struct.function* %392, i64 0, !dbg !6108
  %cfg363 = getelementptr inbounds %struct.function, %struct.function* %add.ptr362, i32 0, i32 1, !dbg !6108
  %393 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg363, align 8, !dbg !6108
  %x_last_basic_block364 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %393, i32 0, i32 5, !dbg !6108
  %394 = load i32, i32* %x_last_basic_block364, align 8, !dbg !6108
  %conv365 = sext i32 %394 to i64, !dbg !6108
  %mul366 = mul i64 4, %conv365, !dbg !6108
  %call367 = call i8* @xmalloc(i64 %mul366), !dbg !6108
  %395 = bitcast i8* %call367 to i32*, !dbg !6108
  store i32* %395, i32** %degree1, align 8, !dbg !6110
  %396 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6111
  %add.ptr368 = getelementptr inbounds %struct.function, %struct.function* %396, i64 0, !dbg !6111
  %cfg369 = getelementptr inbounds %struct.function, %struct.function* %add.ptr368, i32 0, i32 1, !dbg !6111
  %397 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg369, align 8, !dbg !6111
  %x_last_basic_block370 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %397, i32 0, i32 5, !dbg !6111
  %398 = load i32, i32* %x_last_basic_block370, align 8, !dbg !6111
  %call371 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %398), !dbg !6112
  store %struct.simple_bitmap_def* %call371, %struct.simple_bitmap_def** %extended_rgn_header, align 8, !dbg !6113
  %399 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %extended_rgn_header, align 8, !dbg !6114
  call void @sbitmap_zero(%struct.simple_bitmap_def* %399), !dbg !6115
  br label %if.end372, !dbg !6116

if.end372:                                        ; preds = %if.then361, %if.end350
  %400 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6117
  %add.ptr373 = getelementptr inbounds %struct.function, %struct.function* %400, i64 0, !dbg !6117
  %cfg374 = getelementptr inbounds %struct.function, %struct.function* %add.ptr373, i32 0, i32 1, !dbg !6117
  %401 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg374, align 8, !dbg !6117
  %x_entry_block_ptr375 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %401, i32 0, i32 0, !dbg !6117
  %402 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr375, align 8, !dbg !6117
  %next_bb376 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %402, i32 0, i32 6, !dbg !6117
  %403 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb376, align 8, !dbg !6117
  store %struct.basic_block_def* %403, %struct.basic_block_def** %bb, align 8, !dbg !6117
  br label %for.cond377, !dbg !6117

for.cond377:                                      ; preds = %for.inc751, %if.end372
  %404 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6119
  %405 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6119
  %add.ptr378 = getelementptr inbounds %struct.function, %struct.function* %405, i64 0, !dbg !6119
  %cfg379 = getelementptr inbounds %struct.function, %struct.function* %add.ptr378, i32 0, i32 1, !dbg !6119
  %406 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg379, align 8, !dbg !6119
  %x_exit_block_ptr380 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %406, i32 0, i32 1, !dbg !6119
  %407 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr380, align 8, !dbg !6119
  %cmp381 = icmp ne %struct.basic_block_def* %404, %407, !dbg !6119
  br i1 %cmp381, label %for.body383, label %for.end753, !dbg !6117

for.body383:                                      ; preds = %for.cond377
  %408 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header, align 8, !dbg !6121
  %elms384 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %408, i32 0, i32 3, !dbg !6121
  %409 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6121
  %index385 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %409, i32 0, i32 9, !dbg !6121
  %410 = load i32, i32* %index385, align 8, !dbg !6121
  %div386 = udiv i32 %410, 64, !dbg !6121
  %idxprom387 = zext i32 %div386 to i64, !dbg !6121
  %arrayidx388 = getelementptr inbounds [1 x i64], [1 x i64]* %elms384, i64 0, i64 %idxprom387, !dbg !6121
  %411 = load i64, i64* %arrayidx388, align 8, !dbg !6121
  %412 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6121
  %index389 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %412, i32 0, i32 9, !dbg !6121
  %413 = load i32, i32* %index389, align 8, !dbg !6121
  %rem390 = urem i32 %413, 64, !dbg !6121
  %sh_prom391 = zext i32 %rem390 to i64, !dbg !6121
  %shr392 = lshr i64 %411, %sh_prom391, !dbg !6121
  %and393 = and i64 %shr392, 1, !dbg !6121
  %tobool394 = icmp ne i64 %and393, 0, !dbg !6121
  br i1 %tobool394, label %land.lhs.true395, label %if.end750, !dbg !6124

land.lhs.true395:                                 ; preds = %for.body383
  %414 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !6125
  %elms396 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %414, i32 0, i32 3, !dbg !6125
  %415 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6125
  %index397 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %415, i32 0, i32 9, !dbg !6125
  %416 = load i32, i32* %index397, align 8, !dbg !6125
  %div398 = udiv i32 %416, 64, !dbg !6125
  %idxprom399 = zext i32 %div398 to i64, !dbg !6125
  %arrayidx400 = getelementptr inbounds [1 x i64], [1 x i64]* %elms396, i64 0, i64 %idxprom399, !dbg !6125
  %417 = load i64, i64* %arrayidx400, align 8, !dbg !6125
  %418 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6125
  %index401 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %418, i32 0, i32 9, !dbg !6125
  %419 = load i32, i32* %index401, align 8, !dbg !6125
  %rem402 = urem i32 %419, 64, !dbg !6125
  %sh_prom403 = zext i32 %rem402 to i64, !dbg !6125
  %shr404 = lshr i64 %417, %sh_prom403, !dbg !6125
  %and405 = and i64 %shr404, 1, !dbg !6125
  %tobool406 = icmp ne i64 %and405, 0, !dbg !6125
  br i1 %tobool406, label %if.then407, label %if.end750, !dbg !6126

if.then407:                                       ; preds = %land.lhs.true395
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e408, metadata !6127, metadata !DIExpression()), !dbg !6129
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei409, metadata !6130, metadata !DIExpression()), !dbg !6131
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jbb, metadata !6132, metadata !DIExpression()), !dbg !6133
  %420 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6134
  %add.ptr410 = getelementptr inbounds %struct.function, %struct.function* %420, i64 0, !dbg !6134
  %cfg411 = getelementptr inbounds %struct.function, %struct.function* %add.ptr410, i32 0, i32 1, !dbg !6134
  %421 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg411, align 8, !dbg !6134
  %x_entry_block_ptr412 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %421, i32 0, i32 0, !dbg !6134
  %422 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr412, align 8, !dbg !6134
  %next_bb413 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %422, i32 0, i32 6, !dbg !6134
  %423 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb413, align 8, !dbg !6134
  store %struct.basic_block_def* %423, %struct.basic_block_def** %jbb, align 8, !dbg !6134
  br label %for.cond414, !dbg !6134

for.cond414:                                      ; preds = %for.inc436, %if.then407
  %424 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6136
  %425 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6136
  %add.ptr415 = getelementptr inbounds %struct.function, %struct.function* %425, i64 0, !dbg !6136
  %cfg416 = getelementptr inbounds %struct.function, %struct.function* %add.ptr415, i32 0, i32 1, !dbg !6136
  %426 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg416, align 8, !dbg !6136
  %x_exit_block_ptr417 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %426, i32 0, i32 1, !dbg !6136
  %427 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr417, align 8, !dbg !6136
  %cmp418 = icmp ne %struct.basic_block_def* %424, %427, !dbg !6136
  br i1 %cmp418, label %for.body420, label %for.end438, !dbg !6134

for.body420:                                      ; preds = %for.cond414
  %428 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6138
  %index421 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %428, i32 0, i32 9, !dbg !6141
  %429 = load i32, i32* %index421, align 8, !dbg !6141
  %430 = load i32*, i32** %max_hdr, align 8, !dbg !6142
  %431 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6143
  %index422 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %431, i32 0, i32 9, !dbg !6144
  %432 = load i32, i32* %index422, align 8, !dbg !6144
  %idxprom423 = sext i32 %432 to i64, !dbg !6142
  %arrayidx424 = getelementptr inbounds i32, i32* %430, i64 %idxprom423, !dbg !6142
  %433 = load i32, i32* %arrayidx424, align 4, !dbg !6142
  %cmp425 = icmp eq i32 %429, %433, !dbg !6145
  br i1 %cmp425, label %land.lhs.true427, label %if.end435, !dbg !6146

land.lhs.true427:                                 ; preds = %for.body420
  %434 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6147
  %435 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6148
  %cmp428 = icmp ne %struct.basic_block_def* %434, %435, !dbg !6149
  br i1 %cmp428, label %if.then430, label %if.end435, !dbg !6150

if.then430:                                       ; preds = %land.lhs.true427
  %436 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6151
  %437 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6154
  %call431 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %436, %struct.basic_block_def* %437), !dbg !6155
  %tobool432 = icmp ne i8 %call431, 0, !dbg !6155
  br i1 %tobool432, label %if.end434, label %if.then433, !dbg !6156

if.then433:                                       ; preds = %if.then430
  br label %for.end438, !dbg !6157

if.end434:                                        ; preds = %if.then430
  br label %if.end435, !dbg !6158

if.end435:                                        ; preds = %if.end434, %land.lhs.true427, %for.body420
  br label %for.inc436, !dbg !6159

for.inc436:                                       ; preds = %if.end435
  %438 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6136
  %next_bb437 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %438, i32 0, i32 6, !dbg !6136
  %439 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb437, align 8, !dbg !6136
  store %struct.basic_block_def* %439, %struct.basic_block_def** %jbb, align 8, !dbg !6136
  br label %for.cond414, !dbg !6136, !llvm.loop !6160

for.end438:                                       ; preds = %if.then433, %for.cond414
  %440 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6162
  %441 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6164
  %add.ptr439 = getelementptr inbounds %struct.function, %struct.function* %441, i64 0, !dbg !6164
  %cfg440 = getelementptr inbounds %struct.function, %struct.function* %add.ptr439, i32 0, i32 1, !dbg !6164
  %442 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg440, align 8, !dbg !6164
  %x_exit_block_ptr441 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %442, i32 0, i32 1, !dbg !6164
  %443 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr441, align 8, !dbg !6164
  %cmp442 = icmp ne %struct.basic_block_def* %440, %443, !dbg !6165
  br i1 %cmp442, label %if.then444, label %if.end445, !dbg !6166

if.then444:                                       ; preds = %for.end438
  br label %for.inc751, !dbg !6167

if.end445:                                        ; preds = %for.end438
  store i32 -1, i32* %tail, align 4, !dbg !6168
  store i32 -1, i32* %head, align 4, !dbg !6169
  store i32 0, i32* %too_large_failure, align 4, !dbg !6170
  %444 = load i32*, i32** %max_hdr, align 8, !dbg !6171
  %445 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6172
  %index446 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %445, i32 0, i32 9, !dbg !6173
  %446 = load i32, i32* %index446, align 8, !dbg !6173
  %idxprom447 = sext i32 %446 to i64, !dbg !6171
  %arrayidx448 = getelementptr inbounds i32, i32* %444, i64 %idxprom447, !dbg !6171
  %447 = load i32, i32* %arrayidx448, align 4, !dbg !6171
  store i32 %447, i32* %loop_head, align 4, !dbg !6174
  %448 = load i8, i8* %extend_regions_p, align 1, !dbg !6175
  %tobool449 = icmp ne i8 %448, 0, !dbg !6175
  br i1 %tobool449, label %if.then450, label %if.end456, !dbg !6177

if.then450:                                       ; preds = %if.end445
  %449 = load i32*, i32** %degree1, align 8, !dbg !6178
  %450 = bitcast i32* %449 to i8*, !dbg !6179
  %451 = load i32*, i32** %degree, align 8, !dbg !6180
  %452 = bitcast i32* %451 to i8*, !dbg !6179
  %453 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6181
  %add.ptr451 = getelementptr inbounds %struct.function, %struct.function* %453, i64 0, !dbg !6181
  %cfg452 = getelementptr inbounds %struct.function, %struct.function* %add.ptr451, i32 0, i32 1, !dbg !6181
  %454 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg452, align 8, !dbg !6181
  %x_last_basic_block453 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %454, i32 0, i32 5, !dbg !6181
  %455 = load i32, i32* %x_last_basic_block453, align 8, !dbg !6181
  %conv454 = sext i32 %455 to i64, !dbg !6181
  %mul455 = mul i64 %conv454, 4, !dbg !6182
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %450, i8* align 4 %452, i64 %mul455, i1 false), !dbg !6179
  br label %if.end456, !dbg !6179

if.end456:                                        ; preds = %if.then450, %if.end445
  %456 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6183
  %succs458 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %456, i32 0, i32 1, !dbg !6183
  %call459 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs458), !dbg !6183
  %457 = bitcast %struct.edge_iterator* %tmp457 to { i32, %struct.VEC_edge_gc** }*, !dbg !6183
  %458 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %457, i32 0, i32 0, !dbg !6183
  %459 = extractvalue { i32, %struct.VEC_edge_gc** } %call459, 0, !dbg !6183
  store i32 %459, i32* %458, align 8, !dbg !6183
  %460 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %457, i32 0, i32 1, !dbg !6183
  %461 = extractvalue { i32, %struct.VEC_edge_gc** } %call459, 1, !dbg !6183
  store %struct.VEC_edge_gc** %461, %struct.VEC_edge_gc*** %460, align 8, !dbg !6183
  %462 = bitcast %struct.edge_iterator* %ei409 to i8*, !dbg !6183
  %463 = bitcast %struct.edge_iterator* %tmp457 to i8*, !dbg !6183
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %462, i8* align 8 %463, i64 16, i1 false), !dbg !6183
  br label %for.cond460, !dbg !6183

for.cond460:                                      ; preds = %for.inc477, %if.end456
  %464 = bitcast %struct.edge_iterator* %ei409 to { i32, %struct.VEC_edge_gc** }*, !dbg !6185
  %465 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %464, i32 0, i32 0, !dbg !6185
  %466 = load i32, i32* %465, align 8, !dbg !6185
  %467 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %464, i32 0, i32 1, !dbg !6185
  %468 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %467, align 8, !dbg !6185
  %call461 = call zeroext i8 @ei_cond(i32 %466, %struct.VEC_edge_gc** %468, %struct.edge_def** %e408), !dbg !6185
  %tobool462 = icmp ne i8 %call461, 0, !dbg !6183
  br i1 %tobool462, label %for.body463, label %for.end478, !dbg !6183

for.body463:                                      ; preds = %for.cond460
  %469 = load %struct.edge_def*, %struct.edge_def** %e408, align 8, !dbg !6187
  %dest464 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %469, i32 0, i32 1, !dbg !6189
  %470 = load %struct.basic_block_def*, %struct.basic_block_def** %dest464, align 8, !dbg !6189
  %471 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6190
  %add.ptr465 = getelementptr inbounds %struct.function, %struct.function* %471, i64 0, !dbg !6190
  %cfg466 = getelementptr inbounds %struct.function, %struct.function* %add.ptr465, i32 0, i32 1, !dbg !6190
  %472 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg466, align 8, !dbg !6190
  %x_exit_block_ptr467 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %472, i32 0, i32 1, !dbg !6190
  %473 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr467, align 8, !dbg !6190
  %cmp468 = icmp ne %struct.basic_block_def* %470, %473, !dbg !6191
  br i1 %cmp468, label %if.then470, label %if.end476, !dbg !6192

if.then470:                                       ; preds = %for.body463
  %474 = load i32*, i32** %degree, align 8, !dbg !6193
  %475 = load %struct.edge_def*, %struct.edge_def** %e408, align 8, !dbg !6194
  %dest471 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %475, i32 0, i32 1, !dbg !6195
  %476 = load %struct.basic_block_def*, %struct.basic_block_def** %dest471, align 8, !dbg !6195
  %index472 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %476, i32 0, i32 9, !dbg !6196
  %477 = load i32, i32* %index472, align 8, !dbg !6196
  %idxprom473 = sext i32 %477 to i64, !dbg !6193
  %arrayidx474 = getelementptr inbounds i32, i32* %474, i64 %idxprom473, !dbg !6193
  %478 = load i32, i32* %arrayidx474, align 4, !dbg !6197
  %dec475 = add nsw i32 %478, -1, !dbg !6197
  store i32 %dec475, i32* %arrayidx474, align 4, !dbg !6197
  br label %if.end476, !dbg !6197

if.end476:                                        ; preds = %if.then470, %for.body463
  br label %for.inc477, !dbg !6190

for.inc477:                                       ; preds = %if.end476
  call void @ei_next(%struct.edge_iterator* %ei409), !dbg !6185
  br label %for.cond460, !dbg !6185, !llvm.loop !6198

for.end478:                                       ; preds = %for.cond460
  store i32 1, i32* %num_bbs, align 4, !dbg !6200
  %479 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !6201
  %estimate_number_of_insns = getelementptr inbounds %struct.common_sched_info_def, %struct.common_sched_info_def* %479, i32 0, i32 2, !dbg !6202
  %480 = load i32 (%struct.basic_block_def*)*, i32 (%struct.basic_block_def*)** %estimate_number_of_insns, align 8, !dbg !6202
  %481 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6203
  %call479 = call i32 %480(%struct.basic_block_def* %481), !dbg !6201
  store i32 %call479, i32* %num_insns, align 4, !dbg !6204
  %482 = load i8, i8* %no_loops, align 1, !dbg !6205
  %tobool480 = icmp ne i8 %482, 0, !dbg !6205
  br i1 %tobool480, label %if.then481, label %if.else518, !dbg !6207

if.then481:                                       ; preds = %for.end478
  %483 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6208
  %add.ptr482 = getelementptr inbounds %struct.function, %struct.function* %483, i64 0, !dbg !6208
  %cfg483 = getelementptr inbounds %struct.function, %struct.function* %add.ptr482, i32 0, i32 1, !dbg !6208
  %484 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg483, align 8, !dbg !6208
  %x_entry_block_ptr484 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %484, i32 0, i32 0, !dbg !6208
  %485 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr484, align 8, !dbg !6208
  %next_bb485 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %485, i32 0, i32 6, !dbg !6208
  %486 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb485, align 8, !dbg !6208
  store %struct.basic_block_def* %486, %struct.basic_block_def** %jbb, align 8, !dbg !6208
  br label %for.cond486, !dbg !6208

for.cond486:                                      ; preds = %for.inc515, %if.then481
  %487 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6211
  %488 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6211
  %add.ptr487 = getelementptr inbounds %struct.function, %struct.function* %488, i64 0, !dbg !6211
  %cfg488 = getelementptr inbounds %struct.function, %struct.function* %add.ptr487, i32 0, i32 1, !dbg !6211
  %489 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg488, align 8, !dbg !6211
  %x_exit_block_ptr489 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %489, i32 0, i32 1, !dbg !6211
  %490 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr489, align 8, !dbg !6211
  %cmp490 = icmp ne %struct.basic_block_def* %487, %490, !dbg !6211
  br i1 %cmp490, label %for.body492, label %for.end517, !dbg !6208

for.body492:                                      ; preds = %for.cond486
  %491 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6213
  %call493 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %491), !dbg !6215
  %conv494 = zext i8 %call493 to i32, !dbg !6215
  %tobool495 = icmp ne i32 %conv494, 0, !dbg !6215
  br i1 %tobool495, label %land.lhs.true496, label %if.end514, !dbg !6216

land.lhs.true496:                                 ; preds = %for.body492
  %492 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6217
  %call497 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %492), !dbg !6218
  %493 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6219
  %add.ptr498 = getelementptr inbounds %struct.function, %struct.function* %493, i64 0, !dbg !6219
  %cfg499 = getelementptr inbounds %struct.function, %struct.function* %add.ptr498, i32 0, i32 1, !dbg !6219
  %494 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg499, align 8, !dbg !6219
  %x_exit_block_ptr500 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %494, i32 0, i32 1, !dbg !6219
  %495 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr500, align 8, !dbg !6219
  %cmp501 = icmp eq %struct.basic_block_def* %call497, %495, !dbg !6220
  br i1 %cmp501, label %if.then503, label %if.end514, !dbg !6221

if.then503:                                       ; preds = %land.lhs.true496
  %496 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6222
  %index504 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %496, i32 0, i32 9, !dbg !6224
  %497 = load i32, i32* %index504, align 8, !dbg !6224
  %498 = load i32*, i32** %queue, align 8, !dbg !6225
  %499 = load i32, i32* %tail, align 4, !dbg !6226
  %inc505 = add nsw i32 %499, 1, !dbg !6226
  store i32 %inc505, i32* %tail, align 4, !dbg !6226
  %idxprom506 = sext i32 %inc505 to i64, !dbg !6225
  %arrayidx507 = getelementptr inbounds i32, i32* %498, i64 %idxprom506, !dbg !6225
  store i32 %497, i32* %arrayidx507, align 4, !dbg !6227
  %500 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !6228
  %501 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6229
  %index508 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %501, i32 0, i32 9, !dbg !6230
  %502 = load i32, i32* %index508, align 8, !dbg !6230
  call void @SET_BIT(%struct.simple_bitmap_def* %500, i32 %502), !dbg !6231
  %503 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6232
  %index509 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %503, i32 0, i32 9, !dbg !6234
  %504 = load i32, i32* %index509, align 8, !dbg !6234
  %call510 = call zeroext i8 @too_large(i32 %504, i32* %num_bbs, i32* %num_insns), !dbg !6235
  %tobool511 = icmp ne i8 %call510, 0, !dbg !6235
  br i1 %tobool511, label %if.then512, label %if.end513, !dbg !6236

if.then512:                                       ; preds = %if.then503
  store i32 1, i32* %too_large_failure, align 4, !dbg !6237
  br label %for.end517, !dbg !6239

if.end513:                                        ; preds = %if.then503
  br label %if.end514, !dbg !6240

if.end514:                                        ; preds = %if.end513, %land.lhs.true496, %for.body492
  br label %for.inc515, !dbg !6219

for.inc515:                                       ; preds = %if.end514
  %505 = load %struct.basic_block_def*, %struct.basic_block_def** %jbb, align 8, !dbg !6211
  %next_bb516 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %505, i32 0, i32 6, !dbg !6211
  %506 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb516, align 8, !dbg !6211
  store %struct.basic_block_def* %506, %struct.basic_block_def** %jbb, align 8, !dbg !6211
  br label %for.cond486, !dbg !6211, !llvm.loop !6241

for.end517:                                       ; preds = %if.then512, %for.cond486
  br label %if.end556, !dbg !6243

if.else518:                                       ; preds = %for.end478
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e519, metadata !6244, metadata !DIExpression()), !dbg !6246
  %507 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6247
  %preds521 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %507, i32 0, i32 0, !dbg !6247
  %call522 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds521), !dbg !6247
  %508 = bitcast %struct.edge_iterator* %tmp520 to { i32, %struct.VEC_edge_gc** }*, !dbg !6247
  %509 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %508, i32 0, i32 0, !dbg !6247
  %510 = extractvalue { i32, %struct.VEC_edge_gc** } %call522, 0, !dbg !6247
  store i32 %510, i32* %509, align 8, !dbg !6247
  %511 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %508, i32 0, i32 1, !dbg !6247
  %512 = extractvalue { i32, %struct.VEC_edge_gc** } %call522, 1, !dbg !6247
  store %struct.VEC_edge_gc** %512, %struct.VEC_edge_gc*** %511, align 8, !dbg !6247
  %513 = bitcast %struct.edge_iterator* %ei409 to i8*, !dbg !6247
  %514 = bitcast %struct.edge_iterator* %tmp520 to i8*, !dbg !6247
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %513, i8* align 8 %514, i64 16, i1 false), !dbg !6247
  br label %for.cond523, !dbg !6247

for.cond523:                                      ; preds = %for.inc554, %if.else518
  %515 = bitcast %struct.edge_iterator* %ei409 to { i32, %struct.VEC_edge_gc** }*, !dbg !6249
  %516 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %515, i32 0, i32 0, !dbg !6249
  %517 = load i32, i32* %516, align 8, !dbg !6249
  %518 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %515, i32 0, i32 1, !dbg !6249
  %519 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %518, align 8, !dbg !6249
  %call524 = call zeroext i8 @ei_cond(i32 %517, %struct.VEC_edge_gc** %519, %struct.edge_def** %e519), !dbg !6249
  %tobool525 = icmp ne i8 %call524, 0, !dbg !6247
  br i1 %tobool525, label %for.body526, label %for.end555, !dbg !6247

for.body526:                                      ; preds = %for.cond523
  %520 = load %struct.edge_def*, %struct.edge_def** %e519, align 8, !dbg !6251
  %src527 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %520, i32 0, i32 0, !dbg !6254
  %521 = load %struct.basic_block_def*, %struct.basic_block_def** %src527, align 8, !dbg !6254
  %522 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6255
  %add.ptr528 = getelementptr inbounds %struct.function, %struct.function* %522, i64 0, !dbg !6255
  %cfg529 = getelementptr inbounds %struct.function, %struct.function* %add.ptr528, i32 0, i32 1, !dbg !6255
  %523 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg529, align 8, !dbg !6255
  %x_entry_block_ptr530 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %523, i32 0, i32 0, !dbg !6255
  %524 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr530, align 8, !dbg !6255
  %cmp531 = icmp eq %struct.basic_block_def* %521, %524, !dbg !6256
  br i1 %cmp531, label %if.then533, label %if.end534, !dbg !6257

if.then533:                                       ; preds = %for.body526
  br label %for.inc554, !dbg !6258

if.end534:                                        ; preds = %for.body526
  %525 = load %struct.edge_def*, %struct.edge_def** %e519, align 8, !dbg !6259
  %src535 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %525, i32 0, i32 0, !dbg !6260
  %526 = load %struct.basic_block_def*, %struct.basic_block_def** %src535, align 8, !dbg !6260
  %index536 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %526, i32 0, i32 9, !dbg !6261
  %527 = load i32, i32* %index536, align 8, !dbg !6261
  store i32 %527, i32* %node, align 4, !dbg !6262
  %528 = load i32*, i32** %max_hdr, align 8, !dbg !6263
  %529 = load i32, i32* %node, align 4, !dbg !6265
  %idxprom537 = sext i32 %529 to i64, !dbg !6263
  %arrayidx538 = getelementptr inbounds i32, i32* %528, i64 %idxprom537, !dbg !6263
  %530 = load i32, i32* %arrayidx538, align 4, !dbg !6263
  %531 = load i32, i32* %loop_head, align 4, !dbg !6266
  %cmp539 = icmp eq i32 %530, %531, !dbg !6267
  br i1 %cmp539, label %land.lhs.true541, label %if.end553, !dbg !6268

land.lhs.true541:                                 ; preds = %if.end534
  %532 = load i32, i32* %node, align 4, !dbg !6269
  %533 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6270
  %index542 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %533, i32 0, i32 9, !dbg !6271
  %534 = load i32, i32* %index542, align 8, !dbg !6271
  %cmp543 = icmp ne i32 %532, %534, !dbg !6272
  br i1 %cmp543, label %if.then545, label %if.end553, !dbg !6273

if.then545:                                       ; preds = %land.lhs.true541
  %535 = load i32, i32* %node, align 4, !dbg !6274
  %536 = load i32*, i32** %queue, align 8, !dbg !6276
  %537 = load i32, i32* %tail, align 4, !dbg !6277
  %inc546 = add nsw i32 %537, 1, !dbg !6277
  store i32 %inc546, i32* %tail, align 4, !dbg !6277
  %idxprom547 = sext i32 %inc546 to i64, !dbg !6276
  %arrayidx548 = getelementptr inbounds i32, i32* %536, i64 %idxprom547, !dbg !6276
  store i32 %535, i32* %arrayidx548, align 4, !dbg !6278
  %538 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !6279
  %539 = load i32, i32* %node, align 4, !dbg !6280
  call void @SET_BIT(%struct.simple_bitmap_def* %538, i32 %539), !dbg !6281
  %540 = load i32, i32* %node, align 4, !dbg !6282
  %call549 = call zeroext i8 @too_large(i32 %540, i32* %num_bbs, i32* %num_insns), !dbg !6284
  %tobool550 = icmp ne i8 %call549, 0, !dbg !6284
  br i1 %tobool550, label %if.then551, label %if.end552, !dbg !6285

if.then551:                                       ; preds = %if.then545
  store i32 1, i32* %too_large_failure, align 4, !dbg !6286
  br label %for.end555, !dbg !6288

if.end552:                                        ; preds = %if.then545
  br label %if.end553, !dbg !6289

if.end553:                                        ; preds = %if.end552, %land.lhs.true541, %if.end534
  br label %for.inc554, !dbg !6290

for.inc554:                                       ; preds = %if.end553, %if.then533
  call void @ei_next(%struct.edge_iterator* %ei409), !dbg !6249
  br label %for.cond523, !dbg !6249, !llvm.loop !6291

for.end555:                                       ; preds = %if.then551, %for.cond523
  br label %if.end556

if.end556:                                        ; preds = %for.end555, %for.end517
  br label %while.cond, !dbg !6293

while.cond:                                       ; preds = %for.end625, %if.end556
  %541 = load i32, i32* %head, align 4, !dbg !6294
  %542 = load i32, i32* %tail, align 4, !dbg !6295
  %cmp557 = icmp slt i32 %541, %542, !dbg !6296
  br i1 %cmp557, label %land.rhs559, label %land.end561, !dbg !6297

land.rhs559:                                      ; preds = %while.cond
  %543 = load i32, i32* %too_large_failure, align 4, !dbg !6298
  %tobool560 = icmp ne i32 %543, 0, !dbg !6299
  %lnot = xor i1 %tobool560, true, !dbg !6299
  br label %land.end561

land.end561:                                      ; preds = %land.rhs559, %while.cond
  %544 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs559 ], !dbg !6300
  br i1 %544, label %while.body562, label %while.end626, !dbg !6293

while.body562:                                    ; preds = %land.end561
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e563, metadata !6301, metadata !DIExpression()), !dbg !6303
  %545 = load i32*, i32** %queue, align 8, !dbg !6304
  %546 = load i32, i32* %head, align 4, !dbg !6305
  %inc564 = add nsw i32 %546, 1, !dbg !6305
  store i32 %inc564, i32* %head, align 4, !dbg !6305
  %idxprom565 = sext i32 %inc564 to i64, !dbg !6304
  %arrayidx566 = getelementptr inbounds i32, i32* %545, i64 %idxprom565, !dbg !6304
  %547 = load i32, i32* %arrayidx566, align 4, !dbg !6304
  store i32 %547, i32* %child, align 4, !dbg !6306
  %548 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6307
  %add.ptr568 = getelementptr inbounds %struct.function, %struct.function* %548, i64 0, !dbg !6307
  %cfg569 = getelementptr inbounds %struct.function, %struct.function* %add.ptr568, i32 0, i32 1, !dbg !6307
  %549 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg569, align 8, !dbg !6307
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %549, i32 0, i32 2, !dbg !6307
  %550 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !6307
  %tobool570 = icmp ne %struct.VEC_basic_block_gc* %550, null, !dbg !6307
  br i1 %tobool570, label %cond.true571, label %cond.false576, !dbg !6307

cond.true571:                                     ; preds = %while.body562
  %551 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6307
  %add.ptr572 = getelementptr inbounds %struct.function, %struct.function* %551, i64 0, !dbg !6307
  %cfg573 = getelementptr inbounds %struct.function, %struct.function* %add.ptr572, i32 0, i32 1, !dbg !6307
  %552 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg573, align 8, !dbg !6307
  %x_basic_block_info574 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %552, i32 0, i32 2, !dbg !6307
  %553 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info574, align 8, !dbg !6307
  %base575 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %553, i32 0, i32 0, !dbg !6307
  br label %cond.end577, !dbg !6307

cond.false576:                                    ; preds = %while.body562
  br label %cond.end577, !dbg !6307

cond.end577:                                      ; preds = %cond.false576, %cond.true571
  %cond578 = phi %struct.VEC_basic_block_base* [ %base575, %cond.true571 ], [ null, %cond.false576 ], !dbg !6307
  %554 = load i32, i32* %child, align 4, !dbg !6307
  %call579 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond578, i32 %554), !dbg !6307
  %preds580 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call579, i32 0, i32 0, !dbg !6307
  %call581 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds580), !dbg !6307
  %555 = bitcast %struct.edge_iterator* %tmp567 to { i32, %struct.VEC_edge_gc** }*, !dbg !6307
  %556 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %555, i32 0, i32 0, !dbg !6307
  %557 = extractvalue { i32, %struct.VEC_edge_gc** } %call581, 0, !dbg !6307
  store i32 %557, i32* %556, align 8, !dbg !6307
  %558 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %555, i32 0, i32 1, !dbg !6307
  %559 = extractvalue { i32, %struct.VEC_edge_gc** } %call581, 1, !dbg !6307
  store %struct.VEC_edge_gc** %559, %struct.VEC_edge_gc*** %558, align 8, !dbg !6307
  %560 = bitcast %struct.edge_iterator* %ei409 to i8*, !dbg !6307
  %561 = bitcast %struct.edge_iterator* %tmp567 to i8*, !dbg !6307
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %560, i8* align 8 %561, i64 16, i1 false), !dbg !6307
  br label %for.cond582, !dbg !6307

for.cond582:                                      ; preds = %for.inc624, %cond.end577
  %562 = bitcast %struct.edge_iterator* %ei409 to { i32, %struct.VEC_edge_gc** }*, !dbg !6309
  %563 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %562, i32 0, i32 0, !dbg !6309
  %564 = load i32, i32* %563, align 8, !dbg !6309
  %565 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %562, i32 0, i32 1, !dbg !6309
  %566 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %565, align 8, !dbg !6309
  %call583 = call zeroext i8 @ei_cond(i32 %564, %struct.VEC_edge_gc** %566, %struct.edge_def** %e563), !dbg !6309
  %tobool584 = icmp ne i8 %call583, 0, !dbg !6307
  br i1 %tobool584, label %for.body585, label %for.end625, !dbg !6307

for.body585:                                      ; preds = %for.cond582
  %567 = load %struct.edge_def*, %struct.edge_def** %e563, align 8, !dbg !6311
  %src586 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %567, i32 0, i32 0, !dbg !6313
  %568 = load %struct.basic_block_def*, %struct.basic_block_def** %src586, align 8, !dbg !6313
  %index587 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %568, i32 0, i32 9, !dbg !6314
  %569 = load i32, i32* %index587, align 8, !dbg !6314
  store i32 %569, i32* %node, align 4, !dbg !6315
  %570 = load %struct.edge_def*, %struct.edge_def** %e563, align 8, !dbg !6316
  %src588 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %570, i32 0, i32 0, !dbg !6318
  %571 = load %struct.basic_block_def*, %struct.basic_block_def** %src588, align 8, !dbg !6318
  %572 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6319
  %add.ptr589 = getelementptr inbounds %struct.function, %struct.function* %572, i64 0, !dbg !6319
  %cfg590 = getelementptr inbounds %struct.function, %struct.function* %add.ptr589, i32 0, i32 1, !dbg !6319
  %573 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg590, align 8, !dbg !6319
  %x_entry_block_ptr591 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %573, i32 0, i32 0, !dbg !6319
  %574 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr591, align 8, !dbg !6319
  %cmp592 = icmp eq %struct.basic_block_def* %571, %574, !dbg !6320
  br i1 %cmp592, label %if.then599, label %lor.lhs.false594, !dbg !6321

lor.lhs.false594:                                 ; preds = %for.body585
  %575 = load i32*, i32** %max_hdr, align 8, !dbg !6322
  %576 = load i32, i32* %node, align 4, !dbg !6323
  %idxprom595 = sext i32 %576 to i64, !dbg !6322
  %arrayidx596 = getelementptr inbounds i32, i32* %575, i64 %idxprom595, !dbg !6322
  %577 = load i32, i32* %arrayidx596, align 4, !dbg !6322
  %578 = load i32, i32* %loop_head, align 4, !dbg !6324
  %cmp597 = icmp ne i32 %577, %578, !dbg !6325
  br i1 %cmp597, label %if.then599, label %if.else600, !dbg !6326

if.then599:                                       ; preds = %lor.lhs.false594, %for.body585
  store i32 -1, i32* %tail, align 4, !dbg !6327
  br label %for.end625, !dbg !6329

if.else600:                                       ; preds = %lor.lhs.false594
  %579 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !6330
  %elms601 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %579, i32 0, i32 3, !dbg !6330
  %580 = load i32, i32* %node, align 4, !dbg !6330
  %div602 = udiv i32 %580, 64, !dbg !6330
  %idxprom603 = zext i32 %div602 to i64, !dbg !6330
  %arrayidx604 = getelementptr inbounds [1 x i64], [1 x i64]* %elms601, i64 0, i64 %idxprom603, !dbg !6330
  %581 = load i64, i64* %arrayidx604, align 8, !dbg !6330
  %582 = load i32, i32* %node, align 4, !dbg !6330
  %rem605 = urem i32 %582, 64, !dbg !6330
  %sh_prom606 = zext i32 %rem605 to i64, !dbg !6330
  %shr607 = lshr i64 %581, %sh_prom606, !dbg !6330
  %and608 = and i64 %shr607, 1, !dbg !6330
  %tobool609 = icmp ne i64 %and608, 0, !dbg !6330
  br i1 %tobool609, label %if.end622, label %land.lhs.true610, !dbg !6332

land.lhs.true610:                                 ; preds = %if.else600
  %583 = load i32, i32* %node, align 4, !dbg !6333
  %584 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6334
  %index611 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %584, i32 0, i32 9, !dbg !6335
  %585 = load i32, i32* %index611, align 8, !dbg !6335
  %cmp612 = icmp ne i32 %583, %585, !dbg !6336
  br i1 %cmp612, label %if.then614, label %if.end622, !dbg !6337

if.then614:                                       ; preds = %land.lhs.true610
  %586 = load i32, i32* %node, align 4, !dbg !6338
  %587 = load i32*, i32** %queue, align 8, !dbg !6340
  %588 = load i32, i32* %tail, align 4, !dbg !6341
  %inc615 = add nsw i32 %588, 1, !dbg !6341
  store i32 %inc615, i32* %tail, align 4, !dbg !6341
  %idxprom616 = sext i32 %inc615 to i64, !dbg !6340
  %arrayidx617 = getelementptr inbounds i32, i32* %587, i64 %idxprom616, !dbg !6340
  store i32 %586, i32* %arrayidx617, align 4, !dbg !6342
  %589 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !6343
  %590 = load i32, i32* %node, align 4, !dbg !6344
  call void @SET_BIT(%struct.simple_bitmap_def* %589, i32 %590), !dbg !6345
  %591 = load i32, i32* %node, align 4, !dbg !6346
  %call618 = call zeroext i8 @too_large(i32 %591, i32* %num_bbs, i32* %num_insns), !dbg !6348
  %tobool619 = icmp ne i8 %call618, 0, !dbg !6348
  br i1 %tobool619, label %if.then620, label %if.end621, !dbg !6349

if.then620:                                       ; preds = %if.then614
  store i32 1, i32* %too_large_failure, align 4, !dbg !6350
  br label %for.end625, !dbg !6352

if.end621:                                        ; preds = %if.then614
  br label %if.end622, !dbg !6353

if.end622:                                        ; preds = %if.end621, %land.lhs.true610, %if.else600
  br label %if.end623

if.end623:                                        ; preds = %if.end622
  br label %for.inc624, !dbg !6354

for.inc624:                                       ; preds = %if.end623
  call void @ei_next(%struct.edge_iterator* %ei409), !dbg !6309
  br label %for.cond582, !dbg !6309, !llvm.loop !6355

for.end625:                                       ; preds = %if.then620, %if.then599, %for.cond582
  br label %while.cond, !dbg !6293, !llvm.loop !6357

while.end626:                                     ; preds = %land.end561
  %592 = load i32, i32* %tail, align 4, !dbg !6359
  %cmp627 = icmp sge i32 %592, 0, !dbg !6361
  br i1 %cmp627, label %land.lhs.true629, label %if.else726, !dbg !6362

land.lhs.true629:                                 ; preds = %while.end626
  %593 = load i32, i32* %too_large_failure, align 4, !dbg !6363
  %tobool630 = icmp ne i32 %593, 0, !dbg !6363
  br i1 %tobool630, label %if.else726, label %if.then631, !dbg !6364

if.then631:                                       ; preds = %land.lhs.true629
  %594 = load i32*, i32** %degree, align 8, !dbg !6365
  %595 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6367
  %index632 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %595, i32 0, i32 9, !dbg !6368
  %596 = load i32, i32* %index632, align 8, !dbg !6368
  %idxprom633 = sext i32 %596 to i64, !dbg !6365
  %arrayidx634 = getelementptr inbounds i32, i32* %594, i64 %idxprom633, !dbg !6365
  store i32 -1, i32* %arrayidx634, align 4, !dbg !6369
  %597 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6370
  %index635 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %597, i32 0, i32 9, !dbg !6371
  %598 = load i32, i32* %index635, align 8, !dbg !6371
  %599 = load i32*, i32** @rgn_bb_table, align 8, !dbg !6372
  %600 = load i32, i32* %idx, align 4, !dbg !6373
  %idxprom636 = sext i32 %600 to i64, !dbg !6372
  %arrayidx637 = getelementptr inbounds i32, i32* %599, i64 %idxprom636, !dbg !6372
  store i32 %598, i32* %arrayidx637, align 4, !dbg !6374
  %601 = load i32, i32* %num_bbs, align 4, !dbg !6375
  %602 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !6376
  %603 = load i32, i32* @nr_regions, align 4, !dbg !6376
  %idxprom638 = sext i32 %603 to i64, !dbg !6376
  %arrayidx639 = getelementptr inbounds %struct.region, %struct.region* %602, i64 %idxprom638, !dbg !6376
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx639, i32 0, i32 0, !dbg !6376
  store i32 %601, i32* %rgn_nr_blocks, align 4, !dbg !6377
  %604 = load i32, i32* %idx, align 4, !dbg !6378
  %inc640 = add nsw i32 %604, 1, !dbg !6378
  store i32 %inc640, i32* %idx, align 4, !dbg !6378
  %605 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !6379
  %606 = load i32, i32* @nr_regions, align 4, !dbg !6379
  %idxprom641 = sext i32 %606 to i64, !dbg !6379
  %arrayidx642 = getelementptr inbounds %struct.region, %struct.region* %605, i64 %idxprom641, !dbg !6379
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx642, i32 0, i32 1, !dbg !6379
  store i32 %604, i32* %rgn_blocks, align 4, !dbg !6380
  %607 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !6381
  %608 = load i32, i32* @nr_regions, align 4, !dbg !6381
  %idxprom643 = sext i32 %608 to i64, !dbg !6381
  %arrayidx644 = getelementptr inbounds %struct.region, %struct.region* %607, i64 %idxprom643, !dbg !6381
  %dont_calc_deps = getelementptr inbounds %struct.region, %struct.region* %arrayidx644, i32 0, i32 2, !dbg !6381
  %bf.load = load i8, i8* %dont_calc_deps, align 4, !dbg !6382
  %bf.clear = and i8 %bf.load, -2, !dbg !6382
  store i8 %bf.clear, i8* %dont_calc_deps, align 4, !dbg !6382
  %609 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !6383
  %610 = load i32, i32* @nr_regions, align 4, !dbg !6383
  %idxprom645 = sext i32 %610 to i64, !dbg !6383
  %arrayidx646 = getelementptr inbounds %struct.region, %struct.region* %609, i64 %idxprom645, !dbg !6383
  %has_real_ebb = getelementptr inbounds %struct.region, %struct.region* %arrayidx646, i32 0, i32 2, !dbg !6383
  %bf.load647 = load i8, i8* %has_real_ebb, align 4, !dbg !6384
  %bf.clear648 = and i8 %bf.load647, -3, !dbg !6384
  store i8 %bf.clear648, i8* %has_real_ebb, align 4, !dbg !6384
  %611 = load i32, i32* @nr_regions, align 4, !dbg !6385
  %612 = load i32*, i32** @containing_rgn, align 8, !dbg !6386
  %613 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6386
  %index649 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %613, i32 0, i32 9, !dbg !6386
  %614 = load i32, i32* %index649, align 8, !dbg !6386
  %idxprom650 = sext i32 %614 to i64, !dbg !6386
  %arrayidx651 = getelementptr inbounds i32, i32* %612, i64 %idxprom650, !dbg !6386
  store i32 %611, i32* %arrayidx651, align 4, !dbg !6387
  store i32 0, i32* %count, align 4, !dbg !6388
  %615 = load i32*, i32** @block_to_bb, align 8, !dbg !6389
  %616 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6389
  %index652 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %616, i32 0, i32 9, !dbg !6389
  %617 = load i32, i32* %index652, align 8, !dbg !6389
  %idxprom653 = sext i32 %617 to i64, !dbg !6389
  %arrayidx654 = getelementptr inbounds i32, i32* %615, i64 %idxprom653, !dbg !6389
  store i32 0, i32* %arrayidx654, align 4, !dbg !6390
  br label %while.cond655, !dbg !6391

while.cond655:                                    ; preds = %if.end723, %if.then631
  %618 = load i32, i32* %tail, align 4, !dbg !6392
  %cmp656 = icmp sge i32 %618, 0, !dbg !6393
  br i1 %cmp656, label %while.body658, label %while.end724, !dbg !6391

while.body658:                                    ; preds = %while.cond655
  %619 = load i32, i32* %head, align 4, !dbg !6394
  %cmp659 = icmp slt i32 %619, 0, !dbg !6397
  br i1 %cmp659, label %if.then661, label %if.end662, !dbg !6398

if.then661:                                       ; preds = %while.body658
  %620 = load i32, i32* %tail, align 4, !dbg !6399
  store i32 %620, i32* %head, align 4, !dbg !6400
  br label %if.end662, !dbg !6401

if.end662:                                        ; preds = %if.then661, %while.body658
  %621 = load i32*, i32** %queue, align 8, !dbg !6402
  %622 = load i32, i32* %head, align 4, !dbg !6403
  %idxprom663 = sext i32 %622 to i64, !dbg !6402
  %arrayidx664 = getelementptr inbounds i32, i32* %621, i64 %idxprom663, !dbg !6402
  %623 = load i32, i32* %arrayidx664, align 4, !dbg !6402
  store i32 %623, i32* %child, align 4, !dbg !6404
  %624 = load i32*, i32** %degree, align 8, !dbg !6405
  %625 = load i32, i32* %child, align 4, !dbg !6407
  %idxprom665 = sext i32 %625 to i64, !dbg !6405
  %arrayidx666 = getelementptr inbounds i32, i32* %624, i64 %idxprom665, !dbg !6405
  %626 = load i32, i32* %arrayidx666, align 4, !dbg !6405
  %cmp667 = icmp eq i32 %626, 0, !dbg !6408
  br i1 %cmp667, label %if.then669, label %if.else721, !dbg !6409

if.then669:                                       ; preds = %if.end662
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e670, metadata !6410, metadata !DIExpression()), !dbg !6412
  %627 = load i32*, i32** %degree, align 8, !dbg !6413
  %628 = load i32, i32* %child, align 4, !dbg !6414
  %idxprom671 = sext i32 %628 to i64, !dbg !6413
  %arrayidx672 = getelementptr inbounds i32, i32* %627, i64 %idxprom671, !dbg !6413
  store i32 -1, i32* %arrayidx672, align 4, !dbg !6415
  %629 = load i32, i32* %child, align 4, !dbg !6416
  %630 = load i32*, i32** @rgn_bb_table, align 8, !dbg !6417
  %631 = load i32, i32* %idx, align 4, !dbg !6418
  %inc673 = add nsw i32 %631, 1, !dbg !6418
  store i32 %inc673, i32* %idx, align 4, !dbg !6418
  %idxprom674 = sext i32 %631 to i64, !dbg !6417
  %arrayidx675 = getelementptr inbounds i32, i32* %630, i64 %idxprom674, !dbg !6417
  store i32 %629, i32* %arrayidx675, align 4, !dbg !6419
  %632 = load i32, i32* %count, align 4, !dbg !6420
  %inc676 = add nsw i32 %632, 1, !dbg !6420
  store i32 %inc676, i32* %count, align 4, !dbg !6420
  %633 = load i32*, i32** @block_to_bb, align 8, !dbg !6421
  %634 = load i32, i32* %child, align 4, !dbg !6421
  %idxprom677 = sext i32 %634 to i64, !dbg !6421
  %arrayidx678 = getelementptr inbounds i32, i32* %633, i64 %idxprom677, !dbg !6421
  store i32 %inc676, i32* %arrayidx678, align 4, !dbg !6422
  %635 = load i32, i32* @nr_regions, align 4, !dbg !6423
  %636 = load i32*, i32** @containing_rgn, align 8, !dbg !6424
  %637 = load i32, i32* %child, align 4, !dbg !6424
  %idxprom679 = sext i32 %637 to i64, !dbg !6424
  %arrayidx680 = getelementptr inbounds i32, i32* %636, i64 %idxprom679, !dbg !6424
  store i32 %635, i32* %arrayidx680, align 4, !dbg !6425
  %638 = load i32*, i32** %queue, align 8, !dbg !6426
  %639 = load i32, i32* %tail, align 4, !dbg !6427
  %dec681 = add nsw i32 %639, -1, !dbg !6427
  store i32 %dec681, i32* %tail, align 4, !dbg !6427
  %idxprom682 = sext i32 %639 to i64, !dbg !6426
  %arrayidx683 = getelementptr inbounds i32, i32* %638, i64 %idxprom682, !dbg !6426
  %640 = load i32, i32* %arrayidx683, align 4, !dbg !6426
  %641 = load i32*, i32** %queue, align 8, !dbg !6428
  %642 = load i32, i32* %head, align 4, !dbg !6429
  %idxprom684 = sext i32 %642 to i64, !dbg !6428
  %arrayidx685 = getelementptr inbounds i32, i32* %641, i64 %idxprom684, !dbg !6428
  store i32 %640, i32* %arrayidx685, align 4, !dbg !6430
  %643 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6431
  %add.ptr687 = getelementptr inbounds %struct.function, %struct.function* %643, i64 0, !dbg !6431
  %cfg688 = getelementptr inbounds %struct.function, %struct.function* %add.ptr687, i32 0, i32 1, !dbg !6431
  %644 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg688, align 8, !dbg !6431
  %x_basic_block_info689 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %644, i32 0, i32 2, !dbg !6431
  %645 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info689, align 8, !dbg !6431
  %tobool690 = icmp ne %struct.VEC_basic_block_gc* %645, null, !dbg !6431
  br i1 %tobool690, label %cond.true691, label %cond.false696, !dbg !6431

cond.true691:                                     ; preds = %if.then669
  %646 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6431
  %add.ptr692 = getelementptr inbounds %struct.function, %struct.function* %646, i64 0, !dbg !6431
  %cfg693 = getelementptr inbounds %struct.function, %struct.function* %add.ptr692, i32 0, i32 1, !dbg !6431
  %647 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg693, align 8, !dbg !6431
  %x_basic_block_info694 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %647, i32 0, i32 2, !dbg !6431
  %648 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info694, align 8, !dbg !6431
  %base695 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %648, i32 0, i32 0, !dbg !6431
  br label %cond.end697, !dbg !6431

cond.false696:                                    ; preds = %if.then669
  br label %cond.end697, !dbg !6431

cond.end697:                                      ; preds = %cond.false696, %cond.true691
  %cond698 = phi %struct.VEC_basic_block_base* [ %base695, %cond.true691 ], [ null, %cond.false696 ], !dbg !6431
  %649 = load i32, i32* %child, align 4, !dbg !6431
  %call699 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond698, i32 %649), !dbg !6431
  %succs700 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call699, i32 0, i32 1, !dbg !6431
  %call701 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs700), !dbg !6431
  %650 = bitcast %struct.edge_iterator* %tmp686 to { i32, %struct.VEC_edge_gc** }*, !dbg !6431
  %651 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %650, i32 0, i32 0, !dbg !6431
  %652 = extractvalue { i32, %struct.VEC_edge_gc** } %call701, 0, !dbg !6431
  store i32 %652, i32* %651, align 8, !dbg !6431
  %653 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %650, i32 0, i32 1, !dbg !6431
  %654 = extractvalue { i32, %struct.VEC_edge_gc** } %call701, 1, !dbg !6431
  store %struct.VEC_edge_gc** %654, %struct.VEC_edge_gc*** %653, align 8, !dbg !6431
  %655 = bitcast %struct.edge_iterator* %ei409 to i8*, !dbg !6431
  %656 = bitcast %struct.edge_iterator* %tmp686 to i8*, !dbg !6431
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %655, i8* align 8 %656, i64 16, i1 false), !dbg !6431
  br label %for.cond702, !dbg !6431

for.cond702:                                      ; preds = %for.inc719, %cond.end697
  %657 = bitcast %struct.edge_iterator* %ei409 to { i32, %struct.VEC_edge_gc** }*, !dbg !6433
  %658 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %657, i32 0, i32 0, !dbg !6433
  %659 = load i32, i32* %658, align 8, !dbg !6433
  %660 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %657, i32 0, i32 1, !dbg !6433
  %661 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %660, align 8, !dbg !6433
  %call703 = call zeroext i8 @ei_cond(i32 %659, %struct.VEC_edge_gc** %661, %struct.edge_def** %e670), !dbg !6433
  %tobool704 = icmp ne i8 %call703, 0, !dbg !6431
  br i1 %tobool704, label %for.body705, label %for.end720, !dbg !6431

for.body705:                                      ; preds = %for.cond702
  %662 = load %struct.edge_def*, %struct.edge_def** %e670, align 8, !dbg !6435
  %dest706 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %662, i32 0, i32 1, !dbg !6437
  %663 = load %struct.basic_block_def*, %struct.basic_block_def** %dest706, align 8, !dbg !6437
  %664 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6438
  %add.ptr707 = getelementptr inbounds %struct.function, %struct.function* %664, i64 0, !dbg !6438
  %cfg708 = getelementptr inbounds %struct.function, %struct.function* %add.ptr707, i32 0, i32 1, !dbg !6438
  %665 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg708, align 8, !dbg !6438
  %x_exit_block_ptr709 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %665, i32 0, i32 1, !dbg !6438
  %666 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr709, align 8, !dbg !6438
  %cmp710 = icmp ne %struct.basic_block_def* %663, %666, !dbg !6439
  br i1 %cmp710, label %if.then712, label %if.end718, !dbg !6440

if.then712:                                       ; preds = %for.body705
  %667 = load i32*, i32** %degree, align 8, !dbg !6441
  %668 = load %struct.edge_def*, %struct.edge_def** %e670, align 8, !dbg !6442
  %dest713 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %668, i32 0, i32 1, !dbg !6443
  %669 = load %struct.basic_block_def*, %struct.basic_block_def** %dest713, align 8, !dbg !6443
  %index714 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %669, i32 0, i32 9, !dbg !6444
  %670 = load i32, i32* %index714, align 8, !dbg !6444
  %idxprom715 = sext i32 %670 to i64, !dbg !6441
  %arrayidx716 = getelementptr inbounds i32, i32* %667, i64 %idxprom715, !dbg !6441
  %671 = load i32, i32* %arrayidx716, align 4, !dbg !6445
  %dec717 = add nsw i32 %671, -1, !dbg !6445
  store i32 %dec717, i32* %arrayidx716, align 4, !dbg !6445
  br label %if.end718, !dbg !6445

if.end718:                                        ; preds = %if.then712, %for.body705
  br label %for.inc719, !dbg !6438

for.inc719:                                       ; preds = %if.end718
  call void @ei_next(%struct.edge_iterator* %ei409), !dbg !6433
  br label %for.cond702, !dbg !6433, !llvm.loop !6446

for.end720:                                       ; preds = %for.cond702
  br label %if.end723, !dbg !6448

if.else721:                                       ; preds = %if.end662
  %672 = load i32, i32* %head, align 4, !dbg !6449
  %dec722 = add nsw i32 %672, -1, !dbg !6449
  store i32 %dec722, i32* %head, align 4, !dbg !6449
  br label %if.end723

if.end723:                                        ; preds = %if.else721, %for.end720
  br label %while.cond655, !dbg !6391, !llvm.loop !6450

while.end724:                                     ; preds = %while.cond655
  %673 = load i32, i32* @nr_regions, align 4, !dbg !6452
  %inc725 = add nsw i32 %673, 1, !dbg !6452
  store i32 %inc725, i32* @nr_regions, align 4, !dbg !6452
  br label %if.end749, !dbg !6453

if.else726:                                       ; preds = %land.lhs.true629, %while.end626
  %674 = load i8, i8* %extend_regions_p, align 1, !dbg !6454
  %tobool727 = icmp ne i8 %674, 0, !dbg !6454
  br i1 %tobool727, label %if.then728, label %if.end748, !dbg !6456

if.then728:                                       ; preds = %if.else726
  call void @llvm.dbg.declare(metadata i32** %t, metadata !6457, metadata !DIExpression()), !dbg !6459
  %675 = load i32*, i32** %degree, align 8, !dbg !6460
  store i32* %675, i32** %t, align 8, !dbg !6459
  %676 = load i32*, i32** %degree1, align 8, !dbg !6461
  store i32* %676, i32** %degree, align 8, !dbg !6462
  %677 = load i32*, i32** %t, align 8, !dbg !6463
  store i32* %677, i32** %degree1, align 8, !dbg !6464
  %678 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6465
  %succs730 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %678, i32 0, i32 1, !dbg !6465
  %call731 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs730), !dbg !6465
  %679 = bitcast %struct.edge_iterator* %tmp729 to { i32, %struct.VEC_edge_gc** }*, !dbg !6465
  %680 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %679, i32 0, i32 0, !dbg !6465
  %681 = extractvalue { i32, %struct.VEC_edge_gc** } %call731, 0, !dbg !6465
  store i32 %681, i32* %680, align 8, !dbg !6465
  %682 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %679, i32 0, i32 1, !dbg !6465
  %683 = extractvalue { i32, %struct.VEC_edge_gc** } %call731, 1, !dbg !6465
  store %struct.VEC_edge_gc** %683, %struct.VEC_edge_gc*** %682, align 8, !dbg !6465
  %684 = bitcast %struct.edge_iterator* %ei409 to i8*, !dbg !6465
  %685 = bitcast %struct.edge_iterator* %tmp729 to i8*, !dbg !6465
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %684, i8* align 8 %685, i64 16, i1 false), !dbg !6465
  br label %for.cond732, !dbg !6465

for.cond732:                                      ; preds = %for.inc746, %if.then728
  %686 = bitcast %struct.edge_iterator* %ei409 to { i32, %struct.VEC_edge_gc** }*, !dbg !6467
  %687 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %686, i32 0, i32 0, !dbg !6467
  %688 = load i32, i32* %687, align 8, !dbg !6467
  %689 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %686, i32 0, i32 1, !dbg !6467
  %690 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %689, align 8, !dbg !6467
  %call733 = call zeroext i8 @ei_cond(i32 %688, %struct.VEC_edge_gc** %690, %struct.edge_def** %e408), !dbg !6467
  %tobool734 = icmp ne i8 %call733, 0, !dbg !6465
  br i1 %tobool734, label %for.body735, label %for.end747, !dbg !6465

for.body735:                                      ; preds = %for.cond732
  %691 = load %struct.edge_def*, %struct.edge_def** %e408, align 8, !dbg !6469
  %dest736 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %691, i32 0, i32 1, !dbg !6471
  %692 = load %struct.basic_block_def*, %struct.basic_block_def** %dest736, align 8, !dbg !6471
  %693 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6472
  %add.ptr737 = getelementptr inbounds %struct.function, %struct.function* %693, i64 0, !dbg !6472
  %cfg738 = getelementptr inbounds %struct.function, %struct.function* %add.ptr737, i32 0, i32 1, !dbg !6472
  %694 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg738, align 8, !dbg !6472
  %x_exit_block_ptr739 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %694, i32 0, i32 1, !dbg !6472
  %695 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr739, align 8, !dbg !6472
  %cmp740 = icmp ne %struct.basic_block_def* %692, %695, !dbg !6473
  br i1 %cmp740, label %if.then742, label %if.end745, !dbg !6474

if.then742:                                       ; preds = %for.body735
  %696 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %extended_rgn_header, align 8, !dbg !6475
  %697 = load %struct.edge_def*, %struct.edge_def** %e408, align 8, !dbg !6476
  %dest743 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %697, i32 0, i32 1, !dbg !6477
  %698 = load %struct.basic_block_def*, %struct.basic_block_def** %dest743, align 8, !dbg !6477
  %index744 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %698, i32 0, i32 9, !dbg !6478
  %699 = load i32, i32* %index744, align 8, !dbg !6478
  call void @SET_BIT(%struct.simple_bitmap_def* %696, i32 %699), !dbg !6479
  br label %if.end745, !dbg !6479

if.end745:                                        ; preds = %if.then742, %for.body735
  br label %for.inc746, !dbg !6472

for.inc746:                                       ; preds = %if.end745
  call void @ei_next(%struct.edge_iterator* %ei409), !dbg !6467
  br label %for.cond732, !dbg !6467, !llvm.loop !6480

for.end747:                                       ; preds = %for.cond732
  br label %if.end748, !dbg !6482

if.end748:                                        ; preds = %for.end747, %if.else726
  br label %if.end749

if.end749:                                        ; preds = %if.end748, %while.end724
  br label %if.end750, !dbg !6483

if.end750:                                        ; preds = %if.end749, %land.lhs.true395, %for.body383
  br label %for.inc751, !dbg !6484

for.inc751:                                       ; preds = %if.end750, %if.then444
  %700 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6119
  %next_bb752 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %700, i32 0, i32 6, !dbg !6119
  %701 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb752, align 8, !dbg !6119
  store %struct.basic_block_def* %701, %struct.basic_block_def** %bb, align 8, !dbg !6119
  br label %for.cond377, !dbg !6119, !llvm.loop !6485

for.end753:                                       ; preds = %for.cond377
  %702 = load i32*, i32** %queue, align 8, !dbg !6487
  %703 = bitcast i32* %702 to i8*, !dbg !6487
  call void @free(i8* %703), !dbg !6488
  %704 = load i8, i8* %extend_regions_p, align 1, !dbg !6489
  %tobool754 = icmp ne i8 %704, 0, !dbg !6489
  br i1 %tobool754, label %if.then755, label %if.end756, !dbg !6491

if.then755:                                       ; preds = %for.end753
  %705 = load i32*, i32** %degree1, align 8, !dbg !6492
  %706 = bitcast i32* %705 to i8*, !dbg !6492
  call void @free(i8* %706), !dbg !6494
  %707 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header, align 8, !dbg !6495
  %708 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header, align 8, !dbg !6496
  %709 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %extended_rgn_header, align 8, !dbg !6497
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %707, %struct.simple_bitmap_def* %708, %struct.simple_bitmap_def* %709), !dbg !6498
  %710 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %extended_rgn_header, align 8, !dbg !6499
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %710, i32 0, i32 0, !dbg !6499
  %711 = load i8*, i8** %popcount, align 8, !dbg !6499
  call void @free(i8* %711), !dbg !6499
  %712 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %extended_rgn_header, align 8, !dbg !6499
  %713 = bitcast %struct.simple_bitmap_def* %712 to i8*, !dbg !6499
  call void @free(i8* %713), !dbg !6499
  %714 = load i32*, i32** %degree, align 8, !dbg !6500
  %715 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header, align 8, !dbg !6501
  %716 = load i32*, i32** %max_hdr, align 8, !dbg !6502
  call void @extend_rgns(i32* %714, i32* %idx, %struct.simple_bitmap_def* %715, i32* %716), !dbg !6503
  br label %if.end756, !dbg !6504

if.end756:                                        ; preds = %if.then755, %for.end753
  br label %if.end757, !dbg !6505

if.end757:                                        ; preds = %if.end756, %for.end345
  %717 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6506
  %add.ptr758 = getelementptr inbounds %struct.function, %struct.function* %717, i64 0, !dbg !6506
  %cfg759 = getelementptr inbounds %struct.function, %struct.function* %add.ptr758, i32 0, i32 1, !dbg !6506
  %718 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg759, align 8, !dbg !6506
  %x_entry_block_ptr760 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %718, i32 0, i32 0, !dbg !6506
  %719 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr760, align 8, !dbg !6506
  %next_bb761 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %719, i32 0, i32 6, !dbg !6506
  %720 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb761, align 8, !dbg !6506
  store %struct.basic_block_def* %720, %struct.basic_block_def** %bb, align 8, !dbg !6506
  br label %for.cond762, !dbg !6506

for.cond762:                                      ; preds = %for.inc803, %if.end757
  %721 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6508
  %722 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6508
  %add.ptr763 = getelementptr inbounds %struct.function, %struct.function* %722, i64 0, !dbg !6508
  %cfg764 = getelementptr inbounds %struct.function, %struct.function* %add.ptr763, i32 0, i32 1, !dbg !6508
  %723 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg764, align 8, !dbg !6508
  %x_exit_block_ptr765 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %723, i32 0, i32 1, !dbg !6508
  %724 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr765, align 8, !dbg !6508
  %cmp766 = icmp ne %struct.basic_block_def* %721, %724, !dbg !6508
  br i1 %cmp766, label %for.body768, label %for.end805, !dbg !6506

for.body768:                                      ; preds = %for.cond762
  %725 = load i32*, i32** %degree, align 8, !dbg !6510
  %726 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6512
  %index769 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %726, i32 0, i32 9, !dbg !6513
  %727 = load i32, i32* %index769, align 8, !dbg !6513
  %idxprom770 = sext i32 %727 to i64, !dbg !6510
  %arrayidx771 = getelementptr inbounds i32, i32* %725, i64 %idxprom770, !dbg !6510
  %728 = load i32, i32* %arrayidx771, align 4, !dbg !6510
  %cmp772 = icmp sge i32 %728, 0, !dbg !6514
  br i1 %cmp772, label %if.then774, label %if.end802, !dbg !6515

if.then774:                                       ; preds = %for.body768
  %729 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6516
  %index775 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %729, i32 0, i32 9, !dbg !6518
  %730 = load i32, i32* %index775, align 8, !dbg !6518
  %731 = load i32*, i32** @rgn_bb_table, align 8, !dbg !6519
  %732 = load i32, i32* %idx, align 4, !dbg !6520
  %idxprom776 = sext i32 %732 to i64, !dbg !6519
  %arrayidx777 = getelementptr inbounds i32, i32* %731, i64 %idxprom776, !dbg !6519
  store i32 %730, i32* %arrayidx777, align 4, !dbg !6521
  %733 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !6522
  %734 = load i32, i32* @nr_regions, align 4, !dbg !6522
  %idxprom778 = sext i32 %734 to i64, !dbg !6522
  %arrayidx779 = getelementptr inbounds %struct.region, %struct.region* %733, i64 %idxprom778, !dbg !6522
  %rgn_nr_blocks780 = getelementptr inbounds %struct.region, %struct.region* %arrayidx779, i32 0, i32 0, !dbg !6522
  store i32 1, i32* %rgn_nr_blocks780, align 4, !dbg !6523
  %735 = load i32, i32* %idx, align 4, !dbg !6524
  %inc781 = add nsw i32 %735, 1, !dbg !6524
  store i32 %inc781, i32* %idx, align 4, !dbg !6524
  %736 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !6525
  %737 = load i32, i32* @nr_regions, align 4, !dbg !6525
  %idxprom782 = sext i32 %737 to i64, !dbg !6525
  %arrayidx783 = getelementptr inbounds %struct.region, %struct.region* %736, i64 %idxprom782, !dbg !6525
  %rgn_blocks784 = getelementptr inbounds %struct.region, %struct.region* %arrayidx783, i32 0, i32 1, !dbg !6525
  store i32 %735, i32* %rgn_blocks784, align 4, !dbg !6526
  %738 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !6527
  %739 = load i32, i32* @nr_regions, align 4, !dbg !6527
  %idxprom785 = sext i32 %739 to i64, !dbg !6527
  %arrayidx786 = getelementptr inbounds %struct.region, %struct.region* %738, i64 %idxprom785, !dbg !6527
  %dont_calc_deps787 = getelementptr inbounds %struct.region, %struct.region* %arrayidx786, i32 0, i32 2, !dbg !6527
  %bf.load788 = load i8, i8* %dont_calc_deps787, align 4, !dbg !6528
  %bf.clear789 = and i8 %bf.load788, -2, !dbg !6528
  store i8 %bf.clear789, i8* %dont_calc_deps787, align 4, !dbg !6528
  %740 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !6529
  %741 = load i32, i32* @nr_regions, align 4, !dbg !6529
  %idxprom790 = sext i32 %741 to i64, !dbg !6529
  %arrayidx791 = getelementptr inbounds %struct.region, %struct.region* %740, i64 %idxprom790, !dbg !6529
  %has_real_ebb792 = getelementptr inbounds %struct.region, %struct.region* %arrayidx791, i32 0, i32 2, !dbg !6529
  %bf.load793 = load i8, i8* %has_real_ebb792, align 4, !dbg !6530
  %bf.clear794 = and i8 %bf.load793, -3, !dbg !6530
  store i8 %bf.clear794, i8* %has_real_ebb792, align 4, !dbg !6530
  %742 = load i32, i32* @nr_regions, align 4, !dbg !6531
  %inc795 = add nsw i32 %742, 1, !dbg !6531
  store i32 %inc795, i32* @nr_regions, align 4, !dbg !6531
  %743 = load i32*, i32** @containing_rgn, align 8, !dbg !6532
  %744 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6532
  %index796 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %744, i32 0, i32 9, !dbg !6532
  %745 = load i32, i32* %index796, align 8, !dbg !6532
  %idxprom797 = sext i32 %745 to i64, !dbg !6532
  %arrayidx798 = getelementptr inbounds i32, i32* %743, i64 %idxprom797, !dbg !6532
  store i32 %742, i32* %arrayidx798, align 4, !dbg !6533
  %746 = load i32*, i32** @block_to_bb, align 8, !dbg !6534
  %747 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6534
  %index799 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %747, i32 0, i32 9, !dbg !6534
  %748 = load i32, i32* %index799, align 8, !dbg !6534
  %idxprom800 = sext i32 %748 to i64, !dbg !6534
  %arrayidx801 = getelementptr inbounds i32, i32* %746, i64 %idxprom800, !dbg !6534
  store i32 0, i32* %arrayidx801, align 4, !dbg !6535
  br label %if.end802, !dbg !6536

if.end802:                                        ; preds = %if.then774, %for.body768
  br label %for.inc803, !dbg !6537

for.inc803:                                       ; preds = %if.end802
  %749 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6508
  %next_bb804 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %749, i32 0, i32 6, !dbg !6508
  %750 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb804, align 8, !dbg !6508
  store %struct.basic_block_def* %750, %struct.basic_block_def** %bb, align 8, !dbg !6508
  br label %for.cond762, !dbg !6508, !llvm.loop !6538

for.end805:                                       ; preds = %for.cond762
  %751 = load i32*, i32** %max_hdr, align 8, !dbg !6540
  %752 = bitcast i32* %751 to i8*, !dbg !6540
  call void @free(i8* %752), !dbg !6541
  %753 = load i32*, i32** %degree, align 8, !dbg !6542
  %754 = bitcast i32* %753 to i8*, !dbg !6542
  call void @free(i8* %754), !dbg !6543
  %755 = load %struct.edge_iterator*, %struct.edge_iterator** %stack, align 8, !dbg !6544
  %756 = bitcast %struct.edge_iterator* %755 to i8*, !dbg !6544
  call void @free(i8* %756), !dbg !6545
  %757 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header, align 8, !dbg !6546
  %popcount806 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %757, i32 0, i32 0, !dbg !6546
  %758 = load i8*, i8** %popcount806, align 8, !dbg !6546
  call void @free(i8* %758), !dbg !6546
  %759 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %header, align 8, !dbg !6546
  %760 = bitcast %struct.simple_bitmap_def* %759 to i8*, !dbg !6546
  call void @free(i8* %760), !dbg !6546
  %761 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !6547
  %popcount807 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %761, i32 0, i32 0, !dbg !6547
  %762 = load i8*, i8** %popcount807, align 8, !dbg !6547
  call void @free(i8* %762), !dbg !6547
  %763 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %inner, align 8, !dbg !6547
  %764 = bitcast %struct.simple_bitmap_def* %763 to i8*, !dbg !6547
  call void @free(i8* %764), !dbg !6547
  %765 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !6548
  %popcount808 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %765, i32 0, i32 0, !dbg !6548
  %766 = load i8*, i8** %popcount808, align 8, !dbg !6548
  call void @free(i8* %766), !dbg !6548
  %767 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !6548
  %768 = bitcast %struct.simple_bitmap_def* %767 to i8*, !dbg !6548
  call void @free(i8* %768), !dbg !6548
  %769 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_stack, align 8, !dbg !6549
  %popcount809 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %769, i32 0, i32 0, !dbg !6549
  %770 = load i8*, i8** %popcount809, align 8, !dbg !6549
  call void @free(i8* %770), !dbg !6549
  %771 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_stack, align 8, !dbg !6549
  %772 = bitcast %struct.simple_bitmap_def* %771 to i8*, !dbg !6549
  call void @free(i8* %772), !dbg !6549
  ret void, !dbg !6550
}

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local void @sbitmap_ones(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !6551 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6552, metadata !DIExpression()), !dbg !6553
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6554
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !6555
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !6556
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6556
  ret %struct.basic_block_def* %1, !dbg !6557
}

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !6558 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !6559, metadata !DIExpression()), !dbg !6560
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !6561, metadata !DIExpression()), !dbg !6562
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6563
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !6565
  %1 = load i8*, i8** %popcount, align 8, !dbg !6565
  %tobool = icmp ne i8* %1, null, !dbg !6563
  br i1 %tobool, label %if.then, label %if.end7, !dbg !6566

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !6567, metadata !DIExpression()), !dbg !6569
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6570
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !6570
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !6570
  %div = udiv i32 %3, 64, !dbg !6570
  %idxprom = zext i32 %div to i64, !dbg !6570
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6570
  %4 = load i64, i64* %arrayidx, align 8, !dbg !6570
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !6570
  %rem = urem i32 %5, 64, !dbg !6570
  %sh_prom = zext i32 %rem to i64, !dbg !6570
  %shr = lshr i64 %4, %sh_prom, !dbg !6570
  %and = and i64 %shr, 1, !dbg !6570
  %conv = trunc i64 %and to i8, !dbg !6570
  store i8 %conv, i8* %oldbit, align 1, !dbg !6571
  %6 = load i8, i8* %oldbit, align 1, !dbg !6572
  %tobool1 = icmp ne i8 %6, 0, !dbg !6572
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !6574

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6575
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !6576
  %8 = load i8*, i8** %popcount3, align 8, !dbg !6576
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !6577
  %div4 = udiv i32 %9, 64, !dbg !6578
  %idxprom5 = zext i32 %div4 to i64, !dbg !6575
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !6575
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !6579
  %dec = add i8 %10, -1, !dbg !6579
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !6579
  br label %if.end, !dbg !6575

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !6580

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !6581
  %rem8 = urem i32 %11, 64, !dbg !6582
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !6583
  %shl = shl i64 1, %sh_prom9, !dbg !6583
  %neg = xor i64 %shl, -1, !dbg !6584
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6585
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !6586
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !6587
  %div11 = udiv i32 %13, 64, !dbg !6588
  %idxprom12 = zext i32 %div11 to i64, !dbg !6585
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !6585
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !6589
  %and14 = and i64 %14, %neg, !dbg !6589
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !6589
  ret void, !dbg !6590
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !6591 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6592, metadata !DIExpression()), !dbg !6593
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6594
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !6594
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6594
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6594
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6594

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6594
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !6594
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !6594
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6594
  br label %cond.end, !dbg !6594

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6594

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6594
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6594
  %cmp = icmp eq i32 %call, 1, !dbg !6595
  %conv = zext i1 %cmp to i32, !dbg !6595
  %conv2 = trunc i32 %conv to i8, !dbg !6594
  ret i8 %conv2, !dbg !6596
}

declare dso_local void @sbitmap_a_or_b(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !6597 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6598, metadata !DIExpression()), !dbg !6599
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6600
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !6600
  %tobool = icmp ne i8 %call, 0, !dbg !6600
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6600

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.48, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !6600
  br label %cond.end, !dbg !6600

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6600

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6600
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6601
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !6601
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6601
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6601
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6601

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6601
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !6601
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !6601
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6601
  br label %cond.end5, !dbg !6601

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6601

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6601
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6601
  ret %struct.edge_def* %call7, !dbg !6602
}

declare dso_local void @sched_analyze(%struct.deps*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_branch_dependences(%struct.rtx_def* %head, %struct.rtx_def* %tail) #0 !dbg !6603 {
entry:
  %head.addr = alloca %struct.rtx_def*, align 8
  %tail.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !6604, metadata !DIExpression()), !dbg !6605
  store %struct.rtx_def* %tail, %struct.rtx_def** %tail.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail.addr, metadata !6606, metadata !DIExpression()), !dbg !6607
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6608, metadata !DIExpression()), !dbg !6609
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !6610, metadata !DIExpression()), !dbg !6611
  br label %while.cond, !dbg !6612

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6613
  %1 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6614
  %cmp = icmp ne %struct.rtx_def* %0, %1, !dbg !6615
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6616

land.rhs:                                         ; preds = %while.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6617
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6617
  %bf.load = load i32, i32* %3, align 8, !dbg !6617
  %bf.clear = and i32 %bf.load, 65535, !dbg !6617
  %cmp1 = icmp eq i32 %bf.clear, 7, !dbg !6617
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ], !dbg !6618
  br i1 %4, label %while.body, label %while.end, !dbg !6612

while.body:                                       ; preds = %land.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6619
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !6619
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6619
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6619
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6619
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6619
  store %struct.rtx_def* %6, %struct.rtx_def** %tail.addr, align 8, !dbg !6620
  br label %while.cond, !dbg !6612, !llvm.loop !6621

while.end:                                        ; preds = %land.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6622
  store %struct.rtx_def* %7, %struct.rtx_def** %insn, align 8, !dbg !6623
  store %struct.rtx_def* null, %struct.rtx_def** %last, align 8, !dbg !6624
  br label %while.cond2, !dbg !6625

while.cond2:                                      ; preds = %do.end, %while.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6626
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6626
  %bf.load3 = load i32, i32* %9, align 8, !dbg !6626
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !6626
  %cmp5 = icmp eq i32 %bf.clear4, 10, !dbg !6626
  br i1 %cmp5, label %lor.end, label %lor.lhs.false, !dbg !6627

lor.lhs.false:                                    ; preds = %while.cond2
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6628
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6628
  %bf.load6 = load i32, i32* %11, align 8, !dbg !6628
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !6628
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !6628
  br i1 %cmp8, label %lor.end, label %lor.lhs.false9, !dbg !6629

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6630
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !6630
  %bf.load10 = load i32, i32* %13, align 8, !dbg !6630
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !6630
  %cmp12 = icmp eq i32 %bf.clear11, 8, !dbg !6630
  br i1 %cmp12, label %land.lhs.true, label %lor.rhs, !dbg !6631

land.lhs.true:                                    ; preds = %lor.lhs.false9
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6632
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6632
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !6632
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 5, !dbg !6632
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !6632
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !6632
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !6632
  %bf.load17 = load i32, i32* %16, align 8, !dbg !6632
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !6632
  %cmp19 = icmp eq i32 %bf.clear18, 24, !dbg !6633
  br i1 %cmp19, label %lor.end, label %lor.lhs.false20, !dbg !6634

lor.lhs.false20:                                  ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6635
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !6635
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !6635
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 5, !dbg !6635
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !6635
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !6635
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !6635
  %bf.load25 = load i32, i32* %19, align 8, !dbg !6635
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !6635
  %cmp27 = icmp eq i32 %bf.clear26, 25, !dbg !6636
  br i1 %cmp27, label %lor.end, label %lor.lhs.false28, !dbg !6637

lor.lhs.false28:                                  ; preds = %lor.lhs.false20
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6638
  %call = call zeroext i8 @can_throw_internal(%struct.rtx_def* %20), !dbg !6639
  %conv = zext i8 %call to i32, !dbg !6639
  %tobool = icmp ne i32 %conv, 0, !dbg !6639
  br i1 %tobool, label %lor.end, label %lor.lhs.false29, !dbg !6640

lor.lhs.false29:                                  ; preds = %lor.lhs.false28
  %21 = load i32, i32* @reload_completed, align 4, !dbg !6641
  %tobool30 = icmp ne i32 %21, 0, !dbg !6641
  br i1 %tobool30, label %lor.rhs, label %land.lhs.true31, !dbg !6642

land.lhs.true31:                                  ; preds = %lor.lhs.false29
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6643
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6643
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !6643
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 5, !dbg !6643
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !6643
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !6643
  %call36 = call zeroext i8 @sets_likely_spilled(%struct.rtx_def* %23), !dbg !6644
  %conv37 = zext i8 %call36 to i32, !dbg !6644
  %tobool38 = icmp ne i32 %conv37, 0, !dbg !6644
  br i1 %tobool38, label %lor.end, label %lor.rhs, !dbg !6645

lor.rhs:                                          ; preds = %land.lhs.true31, %lor.lhs.false29, %lor.lhs.false9
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6646
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !6646
  %bf.load39 = load i32, i32* %25, align 8, !dbg !6646
  %bf.clear40 = and i32 %bf.load39, 65535, !dbg !6646
  %cmp41 = icmp eq i32 %bf.clear40, 13, !dbg !6646
  br label %lor.end, !dbg !6645

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true31, %lor.lhs.false28, %lor.lhs.false20, %land.lhs.true, %lor.lhs.false, %while.cond2
  %26 = phi i1 [ true, %land.lhs.true31 ], [ true, %lor.lhs.false28 ], [ true, %lor.lhs.false20 ], [ true, %land.lhs.true ], [ true, %lor.lhs.false ], [ true, %while.cond2 ], [ %cmp41, %lor.rhs ]
  br i1 %26, label %while.body43, label %while.end101, !dbg !6625

while.body43:                                     ; preds = %lor.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6647
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !6647
  %bf.load44 = load i32, i32* %28, align 8, !dbg !6647
  %bf.clear45 = and i32 %bf.load44, 65535, !dbg !6647
  %cmp46 = icmp eq i32 %bf.clear45, 13, !dbg !6647
  br i1 %cmp46, label %if.end84, label %if.then, !dbg !6650

if.then:                                          ; preds = %while.body43
  %29 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6651
  %cmp48 = icmp ne %struct.rtx_def* %29, null, !dbg !6654
  br i1 %cmp48, label %land.lhs.true50, label %if.end63, !dbg !6655

land.lhs.true50:                                  ; preds = %if.then
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6656
  %31 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6657
  %call51 = call %struct._dep* @sd_find_dep_between(%struct.rtx_def* %30, %struct.rtx_def* %31, i8 zeroext 0), !dbg !6658
  %cmp52 = icmp eq %struct._dep* %call51, null, !dbg !6659
  br i1 %cmp52, label %if.then54, label %if.end63, !dbg !6660

if.then54:                                        ; preds = %land.lhs.true50
  %32 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6661
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6664
  %call55 = call zeroext i8 @sched_insns_conditions_mutex_p(%struct.rtx_def* %32, %struct.rtx_def* %33), !dbg !6665
  %tobool56 = icmp ne i8 %call55, 0, !dbg !6665
  br i1 %tobool56, label %if.end, label %if.then57, !dbg !6666

if.then57:                                        ; preds = %if.then54
  %34 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6667
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6668
  call void @add_dependence(%struct.rtx_def* %34, %struct.rtx_def* %35, i32 12), !dbg !6669
  br label %if.end, !dbg !6669

if.end:                                           ; preds = %if.then57, %if.then54
  %36 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @insn_referenced, align 8, !dbg !6670
  %37 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6671
  %tobool58 = icmp ne %struct.VEC_int_heap* %37, null, !dbg !6671
  br i1 %tobool58, label %cond.true, label %cond.false, !dbg !6671

cond.true:                                        ; preds = %if.end
  %38 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6671
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %38, i32 0, i32 0, !dbg !6671
  br label %cond.end, !dbg !6671

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6671

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6671
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6671
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !6671
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !6671
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 0, !dbg !6671
  %rt_int = bitcast %union.rtunion_def* %arrayidx61 to i32*, !dbg !6671
  %40 = load i32, i32* %rt_int, align 8, !dbg !6671
  %call62 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond, i32 %40), !dbg !6671
  call void @SET_BIT(%struct.simple_bitmap_def* %36, i32 %call62), !dbg !6672
  br label %if.end63, !dbg !6673

if.end63:                                         ; preds = %cond.end, %land.lhs.true50, %if.then
  %41 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !6674
  %tobool64 = icmp ne %struct.VEC_haifa_deps_insn_data_def_heap* %41, null, !dbg !6674
  br i1 %tobool64, label %cond.true65, label %cond.false67, !dbg !6674

cond.true65:                                      ; preds = %if.end63
  %42 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !6674
  %base66 = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_heap, %struct.VEC_haifa_deps_insn_data_def_heap* %42, i32 0, i32 0, !dbg !6674
  br label %cond.end68, !dbg !6674

cond.false67:                                     ; preds = %if.end63
  br label %cond.end68, !dbg !6674

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi %struct.VEC_haifa_deps_insn_data_def_base* [ %base66, %cond.true65 ], [ null, %cond.false67 ], !dbg !6674
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6674
  %tobool70 = icmp ne %struct.VEC_int_heap* %43, null, !dbg !6674
  br i1 %tobool70, label %cond.true71, label %cond.false73, !dbg !6674

cond.true71:                                      ; preds = %cond.end68
  %44 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6674
  %base72 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %44, i32 0, i32 0, !dbg !6674
  br label %cond.end74, !dbg !6674

cond.false73:                                     ; preds = %cond.end68
  br label %cond.end74, !dbg !6674

cond.end74:                                       ; preds = %cond.false73, %cond.true71
  %cond75 = phi %struct.VEC_int_base* [ %base72, %cond.true71 ], [ null, %cond.false73 ], !dbg !6674
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6674
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !6674
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !6674
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 0, !dbg !6674
  %rt_int79 = bitcast %union.rtunion_def* %arrayidx78 to i32*, !dbg !6674
  %46 = load i32, i32* %rt_int79, align 8, !dbg !6674
  %call80 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond75, i32 %46), !dbg !6674
  %call81 = call %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %cond69, i32 %call80), !dbg !6674
  %cant_move = getelementptr inbounds %struct._haifa_deps_insn_data, %struct._haifa_deps_insn_data* %call81, i32 0, i32 7, !dbg !6674
  %bf.load82 = load i8, i8* %cant_move, align 8, !dbg !6675
  %bf.clear83 = and i8 %bf.load82, -2, !dbg !6675
  %bf.set = or i8 %bf.clear83, 1, !dbg !6675
  store i8 %bf.set, i8* %cant_move, align 8, !dbg !6675
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6676
  store %struct.rtx_def* %47, %struct.rtx_def** %last, align 8, !dbg !6677
  br label %if.end84, !dbg !6678

if.end84:                                         ; preds = %cond.end74, %while.body43
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6679
  %49 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6681
  %cmp85 = icmp eq %struct.rtx_def* %48, %49, !dbg !6682
  br i1 %cmp85, label %if.then87, label %if.end88, !dbg !6683

if.then87:                                        ; preds = %if.end84
  br label %while.end101, !dbg !6684

if.end88:                                         ; preds = %if.end84
  br label %do.body, !dbg !6685

do.body:                                          ; preds = %land.end100, %if.end88
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6686
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !6686
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !6686
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 1, !dbg !6686
  %rt_rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**, !dbg !6686
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx92, align 8, !dbg !6686
  store %struct.rtx_def* %51, %struct.rtx_def** %insn, align 8, !dbg !6687
  br label %do.cond, !dbg !6688

do.cond:                                          ; preds = %do.body
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6689
  %53 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6690
  %cmp93 = icmp ne %struct.rtx_def* %52, %53, !dbg !6691
  br i1 %cmp93, label %land.rhs95, label %land.end100, !dbg !6692

land.rhs95:                                       ; preds = %do.cond
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6693
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !6693
  %bf.load96 = load i32, i32* %55, align 8, !dbg !6693
  %bf.clear97 = and i32 %bf.load96, 65535, !dbg !6693
  %cmp98 = icmp eq i32 %bf.clear97, 7, !dbg !6693
  br label %land.end100

land.end100:                                      ; preds = %land.rhs95, %do.cond
  %56 = phi i1 [ false, %do.cond ], [ %cmp98, %land.rhs95 ], !dbg !6694
  br i1 %56, label %do.body, label %do.end, !dbg !6688, !llvm.loop !6695

do.end:                                           ; preds = %land.end100
  br label %while.cond2, !dbg !6625, !llvm.loop !6697

while.end101:                                     ; preds = %if.then87, %lor.end
  %57 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6699
  store %struct.rtx_def* %57, %struct.rtx_def** %insn, align 8, !dbg !6700
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6701
  %cmp102 = icmp ne %struct.rtx_def* %58, null, !dbg !6703
  br i1 %cmp102, label %if.then104, label %if.end146, !dbg !6704

if.then104:                                       ; preds = %while.end101
  br label %while.cond105, !dbg !6705

while.cond105:                                    ; preds = %if.end144, %if.then139, %if.then104
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6706
  %60 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6707
  %cmp106 = icmp ne %struct.rtx_def* %59, %60, !dbg !6708
  br i1 %cmp106, label %while.body108, label %while.end145, !dbg !6705

while.body108:                                    ; preds = %while.cond105
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6709
  %call109 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %61), !dbg !6711
  store %struct.rtx_def* %call109, %struct.rtx_def** %insn, align 8, !dbg !6712
  %62 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @insn_referenced, align 8, !dbg !6713
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %62, i32 0, i32 3, !dbg !6713
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6713
  %tobool110 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !6713
  br i1 %tobool110, label %cond.true111, label %cond.false113, !dbg !6713

cond.true111:                                     ; preds = %while.body108
  %64 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6713
  %base112 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %64, i32 0, i32 0, !dbg !6713
  br label %cond.end114, !dbg !6713

cond.false113:                                    ; preds = %while.body108
  br label %cond.end114, !dbg !6713

cond.end114:                                      ; preds = %cond.false113, %cond.true111
  %cond115 = phi %struct.VEC_int_base* [ %base112, %cond.true111 ], [ null, %cond.false113 ], !dbg !6713
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6713
  %u116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !6713
  %fld117 = bitcast %union.u* %u116 to [1 x %union.rtunion_def]*, !dbg !6713
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i64 0, i64 0, !dbg !6713
  %rt_int119 = bitcast %union.rtunion_def* %arrayidx118 to i32*, !dbg !6713
  %66 = load i32, i32* %rt_int119, align 8, !dbg !6713
  %call120 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond115, i32 %66), !dbg !6713
  %div = udiv i32 %call120, 64, !dbg !6713
  %idxprom = zext i32 %div to i64, !dbg !6713
  %arrayidx121 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6713
  %67 = load i64, i64* %arrayidx121, align 8, !dbg !6713
  %68 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6713
  %tobool122 = icmp ne %struct.VEC_int_heap* %68, null, !dbg !6713
  br i1 %tobool122, label %cond.true123, label %cond.false125, !dbg !6713

cond.true123:                                     ; preds = %cond.end114
  %69 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6713
  %base124 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %69, i32 0, i32 0, !dbg !6713
  br label %cond.end126, !dbg !6713

cond.false125:                                    ; preds = %cond.end114
  br label %cond.end126, !dbg !6713

cond.end126:                                      ; preds = %cond.false125, %cond.true123
  %cond127 = phi %struct.VEC_int_base* [ %base124, %cond.true123 ], [ null, %cond.false125 ], !dbg !6713
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6713
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !6713
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !6713
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 0, !dbg !6713
  %rt_int131 = bitcast %union.rtunion_def* %arrayidx130 to i32*, !dbg !6713
  %71 = load i32, i32* %rt_int131, align 8, !dbg !6713
  %call132 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond127, i32 %71), !dbg !6713
  %rem = urem i32 %call132, 64, !dbg !6713
  %sh_prom = zext i32 %rem to i64, !dbg !6713
  %shr = lshr i64 %67, %sh_prom, !dbg !6713
  %and = and i64 %shr, 1, !dbg !6713
  %tobool133 = icmp ne i64 %and, 0, !dbg !6713
  br i1 %tobool133, label %if.then139, label %lor.lhs.false134, !dbg !6715

lor.lhs.false134:                                 ; preds = %cond.end126
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6716
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !6716
  %bf.load135 = load i32, i32* %73, align 8, !dbg !6716
  %bf.clear136 = and i32 %bf.load135, 65535, !dbg !6716
  %cmp137 = icmp eq i32 %bf.clear136, 7, !dbg !6716
  br i1 %cmp137, label %if.then139, label %if.end140, !dbg !6717

if.then139:                                       ; preds = %lor.lhs.false134, %cond.end126
  br label %while.cond105, !dbg !6718, !llvm.loop !6719

if.end140:                                        ; preds = %lor.lhs.false134
  %74 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6721
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6723
  %call141 = call zeroext i8 @sched_insns_conditions_mutex_p(%struct.rtx_def* %74, %struct.rtx_def* %75), !dbg !6724
  %tobool142 = icmp ne i8 %call141, 0, !dbg !6724
  br i1 %tobool142, label %if.end144, label %if.then143, !dbg !6725

if.then143:                                       ; preds = %if.end140
  %76 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6726
  %77 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6727
  call void @add_dependence(%struct.rtx_def* %76, %struct.rtx_def* %77, i32 12), !dbg !6728
  br label %if.end144, !dbg !6728

if.end144:                                        ; preds = %if.then143, %if.end140
  br label %while.cond105, !dbg !6705, !llvm.loop !6719

while.end145:                                     ; preds = %while.cond105
  br label %if.end146, !dbg !6705

if.end146:                                        ; preds = %while.end145, %while.end101
  %78 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 35), align 8, !dbg !6729
  %call147 = call zeroext i8 %78(), !dbg !6731
  %tobool148 = icmp ne i8 %call147, 0, !dbg !6731
  br i1 %tobool148, label %if.end150, label %if.then149, !dbg !6732

if.then149:                                       ; preds = %if.end146
  br label %while.end197, !dbg !6733

if.end150:                                        ; preds = %if.end146
  %79 = load i32, i32* @reload_completed, align 4, !dbg !6734
  %tobool151 = icmp ne i32 %79, 0, !dbg !6734
  br i1 %tobool151, label %lor.lhs.false152, label %if.then157, !dbg !6736

lor.lhs.false152:                                 ; preds = %if.end150
  %80 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6737
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !6737
  %bf.load153 = load i32, i32* %81, align 8, !dbg !6737
  %bf.clear154 = and i32 %bf.load153, 65535, !dbg !6737
  %cmp155 = icmp eq i32 %bf.clear154, 9, !dbg !6737
  br i1 %cmp155, label %if.end158, label %if.then157, !dbg !6738

if.then157:                                       ; preds = %lor.lhs.false152, %if.end150
  br label %while.end197, !dbg !6739

if.end158:                                        ; preds = %lor.lhs.false152
  %82 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6740
  store %struct.rtx_def* %82, %struct.rtx_def** %insn, align 8, !dbg !6741
  br label %while.cond159, !dbg !6742

while.cond159:                                    ; preds = %if.end196, %if.end158
  %83 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6743
  %84 = load %struct.rtx_def*, %struct.rtx_def** %head.addr, align 8, !dbg !6744
  %cmp160 = icmp ne %struct.rtx_def* %83, %84, !dbg !6745
  br i1 %cmp160, label %while.body162, label %while.end197, !dbg !6742

while.body162:                                    ; preds = %while.cond159
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6746
  %u163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !6746
  %fld164 = bitcast %union.u* %u163 to [1 x %union.rtunion_def]*, !dbg !6746
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i64 0, i64 1, !dbg !6746
  %rt_rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**, !dbg !6746
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx166, align 8, !dbg !6746
  store %struct.rtx_def* %86, %struct.rtx_def** %insn, align 8, !dbg !6748
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6749
  %88 = bitcast %struct.rtx_def* %87 to i32*, !dbg !6749
  %bf.load167 = load i32, i32* %88, align 8, !dbg !6749
  %bf.clear168 = and i32 %bf.load167, 65535, !dbg !6749
  %cmp169 = icmp eq i32 %bf.clear168, 8, !dbg !6749
  br i1 %cmp169, label %land.lhs.true186, label %lor.lhs.false171, !dbg !6749

lor.lhs.false171:                                 ; preds = %while.body162
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6749
  %90 = bitcast %struct.rtx_def* %89 to i32*, !dbg !6749
  %bf.load172 = load i32, i32* %90, align 8, !dbg !6749
  %bf.clear173 = and i32 %bf.load172, 65535, !dbg !6749
  %cmp174 = icmp eq i32 %bf.clear173, 7, !dbg !6749
  br i1 %cmp174, label %land.lhs.true186, label %lor.lhs.false176, !dbg !6749

lor.lhs.false176:                                 ; preds = %lor.lhs.false171
  %91 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6749
  %92 = bitcast %struct.rtx_def* %91 to i32*, !dbg !6749
  %bf.load177 = load i32, i32* %92, align 8, !dbg !6749
  %bf.clear178 = and i32 %bf.load177, 65535, !dbg !6749
  %cmp179 = icmp eq i32 %bf.clear178, 9, !dbg !6749
  br i1 %cmp179, label %land.lhs.true186, label %lor.lhs.false181, !dbg !6749

lor.lhs.false181:                                 ; preds = %lor.lhs.false176
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6749
  %94 = bitcast %struct.rtx_def* %93 to i32*, !dbg !6749
  %bf.load182 = load i32, i32* %94, align 8, !dbg !6749
  %bf.clear183 = and i32 %bf.load182, 65535, !dbg !6749
  %cmp184 = icmp eq i32 %bf.clear183, 10, !dbg !6749
  br i1 %cmp184, label %land.lhs.true186, label %if.end196, !dbg !6751

land.lhs.true186:                                 ; preds = %lor.lhs.false181, %lor.lhs.false176, %lor.lhs.false171, %while.body162
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6752
  %u187 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1, !dbg !6752
  %fld188 = bitcast %union.u* %u187 to [1 x %union.rtunion_def]*, !dbg !6752
  %arrayidx189 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld188, i64 0, i64 5, !dbg !6752
  %rt_rtx190 = bitcast %union.rtunion_def* %arrayidx189 to %struct.rtx_def**, !dbg !6752
  %96 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx190, align 8, !dbg !6752
  %97 = bitcast %struct.rtx_def* %96 to i32*, !dbg !6752
  %bf.load191 = load i32, i32* %97, align 8, !dbg !6752
  %bf.clear192 = and i32 %bf.load191, 65535, !dbg !6752
  %cmp193 = icmp eq i32 %bf.clear192, 14, !dbg !6753
  br i1 %cmp193, label %if.then195, label %if.end196, !dbg !6754

if.then195:                                       ; preds = %land.lhs.true186
  %98 = load %struct.rtx_def*, %struct.rtx_def** %tail.addr, align 8, !dbg !6755
  %99 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6756
  call void @add_dependence(%struct.rtx_def* %98, %struct.rtx_def* %99, i32 12), !dbg !6757
  br label %if.end196, !dbg !6757

if.end196:                                        ; preds = %if.then195, %land.lhs.true186, %lor.lhs.false181
  br label %while.cond159, !dbg !6742, !llvm.loop !6758

while.end197:                                     ; preds = %if.then149, %if.then157, %while.cond159
  ret void, !dbg !6760
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_deps(i32 %bb, %struct.deps* %pred_deps) #0 !dbg !6761 {
entry:
  %bb.addr = alloca i32, align 4
  %pred_deps.addr = alloca %struct.deps*, align 8
  %block = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store i32 %bb, i32* %bb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb.addr, metadata !6764, metadata !DIExpression()), !dbg !6765
  store %struct.deps* %pred_deps, %struct.deps** %pred_deps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %pred_deps.addr, metadata !6766, metadata !DIExpression()), !dbg !6767
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block, metadata !6768, metadata !DIExpression()), !dbg !6769
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6770
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6770
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6770
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6770
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 2, !dbg !6770
  %2 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !6770
  %tobool = icmp ne %struct.VEC_basic_block_gc* %2, null, !dbg !6770
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6770

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6770
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !6770
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !6770
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6770
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 2, !dbg !6770
  %5 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !6770
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %5, i32 0, i32 0, !dbg !6770
  br label %cond.end, !dbg !6770

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6770

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6770
  %6 = load i32*, i32** @rgn_bb_table, align 8, !dbg !6770
  %7 = load i32*, i32** @ebb_head, align 8, !dbg !6770
  %8 = load i32, i32* %bb.addr, align 4, !dbg !6770
  %idxprom = sext i32 %8 to i64, !dbg !6770
  %arrayidx = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !6770
  %9 = load i32, i32* %arrayidx, align 4, !dbg !6770
  %idxprom4 = sext i32 %9 to i64, !dbg !6770
  %arrayidx5 = getelementptr inbounds i32, i32* %6, i64 %idxprom4, !dbg !6770
  %10 = load i32, i32* %arrayidx5, align 4, !dbg !6770
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %10), !dbg !6770
  store %struct.basic_block_def* %call, %struct.basic_block_def** %block, align 8, !dbg !6769
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6771, metadata !DIExpression()), !dbg !6772
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6773, metadata !DIExpression()), !dbg !6774
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !6775
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1, !dbg !6775
  %call6 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !6775
  %12 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6775
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 0, !dbg !6775
  %14 = extractvalue { i32, %struct.VEC_edge_gc** } %call6, 0, !dbg !6775
  store i32 %14, i32* %13, align 8, !dbg !6775
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 1, !dbg !6775
  %16 = extractvalue { i32, %struct.VEC_edge_gc** } %call6, 1, !dbg !6775
  store %struct.VEC_edge_gc** %16, %struct.VEC_edge_gc*** %15, align 8, !dbg !6775
  %17 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6775
  %18 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6775
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false), !dbg !6775
  br label %for.cond, !dbg !6775

for.cond:                                         ; preds = %for.inc, %cond.end
  %19 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6777
  %20 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %19, i32 0, i32 0, !dbg !6777
  %21 = load i32, i32* %20, align 8, !dbg !6777
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %19, i32 0, i32 1, !dbg !6777
  %23 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %22, align 8, !dbg !6777
  %call7 = call zeroext i8 @ei_cond(i32 %21, %struct.VEC_edge_gc** %23, %struct.edge_def** %e), !dbg !6777
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6775
  br i1 %tobool8, label %for.body, label %for.end, !dbg !6775

for.body:                                         ; preds = %for.cond
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6779
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 1, !dbg !6782
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6782
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6783
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !6783
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !6783
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !6783
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 1, !dbg !6783
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6783
  %cmp = icmp eq %struct.basic_block_def* %25, %28, !dbg !6784
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6785

lor.lhs.false:                                    ; preds = %for.body
  %29 = load i32*, i32** @containing_rgn, align 8, !dbg !6786
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !6786
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !6786
  %31 = load i32, i32* %index, align 8, !dbg !6786
  %idxprom11 = sext i32 %31 to i64, !dbg !6786
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i64 %idxprom11, !dbg !6786
  %32 = load i32, i32* %arrayidx12, align 4, !dbg !6786
  %33 = load i32*, i32** @containing_rgn, align 8, !dbg !6787
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6787
  %dest13 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !6787
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest13, align 8, !dbg !6787
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 9, !dbg !6787
  %36 = load i32, i32* %index14, align 8, !dbg !6787
  %idxprom15 = sext i32 %36 to i64, !dbg !6787
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i64 %idxprom15, !dbg !6787
  %37 = load i32, i32* %arrayidx16, align 4, !dbg !6787
  %cmp17 = icmp ne i32 %32, %37, !dbg !6788
  br i1 %cmp17, label %if.then, label %lor.lhs.false18, !dbg !6789

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %38 = load i32*, i32** @block_to_bb, align 8, !dbg !6790
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6790
  %dest19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 1, !dbg !6790
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %dest19, align 8, !dbg !6790
  %index20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 9, !dbg !6790
  %41 = load i32, i32* %index20, align 8, !dbg !6790
  %idxprom21 = sext i32 %41 to i64, !dbg !6790
  %arrayidx22 = getelementptr inbounds i32, i32* %38, i64 %idxprom21, !dbg !6790
  %42 = load i32, i32* %arrayidx22, align 4, !dbg !6790
  %43 = load i32, i32* %bb.addr, align 4, !dbg !6791
  %cmp23 = icmp sle i32 %42, %43, !dbg !6792
  br i1 %cmp23, label %if.then, label %if.end, !dbg !6793

if.then:                                          ; preds = %lor.lhs.false18, %lor.lhs.false, %for.body
  br label %for.inc, !dbg !6794

if.end:                                           ; preds = %lor.lhs.false18
  %44 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !6795
  %45 = load i32*, i32** @block_to_bb, align 8, !dbg !6796
  %46 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6796
  %dest24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 1, !dbg !6796
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %dest24, align 8, !dbg !6796
  %index25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 9, !dbg !6796
  %48 = load i32, i32* %index25, align 8, !dbg !6796
  %idxprom26 = sext i32 %48 to i64, !dbg !6796
  %arrayidx27 = getelementptr inbounds i32, i32* %45, i64 %idxprom26, !dbg !6796
  %49 = load i32, i32* %arrayidx27, align 4, !dbg !6796
  %idx.ext = sext i32 %49 to i64, !dbg !6797
  %add.ptr28 = getelementptr inbounds %struct.deps, %struct.deps* %44, i64 %idx.ext, !dbg !6797
  %50 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !6798
  call void @deps_join(%struct.deps* %add.ptr28, %struct.deps* %50), !dbg !6799
  br label %for.inc, !dbg !6800

for.inc:                                          ; preds = %if.end, %if.then
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6777
  br label %for.cond, !dbg !6777, !llvm.loop !6801

for.end:                                          ; preds = %for.cond
  %51 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !6803
  %pending_read_insns = getelementptr inbounds %struct.deps, %struct.deps* %51, i32 0, i32 0, !dbg !6804
  %52 = load %struct.rtx_def*, %struct.rtx_def** %pending_read_insns, align 8, !dbg !6804
  %53 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !6805
  %54 = load i32, i32* %bb.addr, align 4, !dbg !6806
  %idxprom29 = sext i32 %54 to i64, !dbg !6805
  %arrayidx30 = getelementptr inbounds %struct.deps, %struct.deps* %53, i64 %idxprom29, !dbg !6805
  %pending_read_insns31 = getelementptr inbounds %struct.deps, %struct.deps* %arrayidx30, i32 0, i32 0, !dbg !6807
  store %struct.rtx_def* %52, %struct.rtx_def** %pending_read_insns31, align 8, !dbg !6808
  %55 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !6809
  %pending_read_mems = getelementptr inbounds %struct.deps, %struct.deps* %55, i32 0, i32 1, !dbg !6810
  %56 = load %struct.rtx_def*, %struct.rtx_def** %pending_read_mems, align 8, !dbg !6810
  %57 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !6811
  %58 = load i32, i32* %bb.addr, align 4, !dbg !6812
  %idxprom32 = sext i32 %58 to i64, !dbg !6811
  %arrayidx33 = getelementptr inbounds %struct.deps, %struct.deps* %57, i64 %idxprom32, !dbg !6811
  %pending_read_mems34 = getelementptr inbounds %struct.deps, %struct.deps* %arrayidx33, i32 0, i32 1, !dbg !6813
  store %struct.rtx_def* %56, %struct.rtx_def** %pending_read_mems34, align 8, !dbg !6814
  %59 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !6815
  %pending_write_insns = getelementptr inbounds %struct.deps, %struct.deps* %59, i32 0, i32 2, !dbg !6816
  %60 = load %struct.rtx_def*, %struct.rtx_def** %pending_write_insns, align 8, !dbg !6816
  %61 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !6817
  %62 = load i32, i32* %bb.addr, align 4, !dbg !6818
  %idxprom35 = sext i32 %62 to i64, !dbg !6817
  %arrayidx36 = getelementptr inbounds %struct.deps, %struct.deps* %61, i64 %idxprom35, !dbg !6817
  %pending_write_insns37 = getelementptr inbounds %struct.deps, %struct.deps* %arrayidx36, i32 0, i32 2, !dbg !6819
  store %struct.rtx_def* %60, %struct.rtx_def** %pending_write_insns37, align 8, !dbg !6820
  %63 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !6821
  %pending_write_mems = getelementptr inbounds %struct.deps, %struct.deps* %63, i32 0, i32 3, !dbg !6822
  %64 = load %struct.rtx_def*, %struct.rtx_def** %pending_write_mems, align 8, !dbg !6822
  %65 = load %struct.deps*, %struct.deps** @bb_deps, align 8, !dbg !6823
  %66 = load i32, i32* %bb.addr, align 4, !dbg !6824
  %idxprom38 = sext i32 %66 to i64, !dbg !6823
  %arrayidx39 = getelementptr inbounds %struct.deps, %struct.deps* %65, i64 %idxprom38, !dbg !6823
  %pending_write_mems40 = getelementptr inbounds %struct.deps, %struct.deps* %arrayidx39, i32 0, i32 3, !dbg !6825
  store %struct.rtx_def* %64, %struct.rtx_def** %pending_write_mems40, align 8, !dbg !6826
  %67 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !6827
  %pending_read_insns41 = getelementptr inbounds %struct.deps, %struct.deps* %67, i32 0, i32 0, !dbg !6828
  store %struct.rtx_def* null, %struct.rtx_def** %pending_read_insns41, align 8, !dbg !6829
  %68 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !6830
  %pending_read_mems42 = getelementptr inbounds %struct.deps, %struct.deps* %68, i32 0, i32 1, !dbg !6831
  store %struct.rtx_def* null, %struct.rtx_def** %pending_read_mems42, align 8, !dbg !6832
  %69 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !6833
  %pending_write_insns43 = getelementptr inbounds %struct.deps, %struct.deps* %69, i32 0, i32 2, !dbg !6834
  store %struct.rtx_def* null, %struct.rtx_def** %pending_write_insns43, align 8, !dbg !6835
  %70 = load %struct.deps*, %struct.deps** %pred_deps.addr, align 8, !dbg !6836
  %pending_write_mems44 = getelementptr inbounds %struct.deps, %struct.deps* %70, i32 0, i32 3, !dbg !6837
  store %struct.rtx_def* null, %struct.rtx_def** %pending_write_mems44, align 8, !dbg !6838
  ret void, !dbg !6839
}

declare dso_local void @free_deps(%struct.deps*) #2

declare dso_local zeroext i8 @can_throw_internal(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sets_likely_spilled(%struct.rtx_def* %pat) #0 !dbg !6840 {
entry:
  %pat.addr = alloca %struct.rtx_def*, align 8
  %ret = alloca i8, align 1
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !6841, metadata !DIExpression()), !dbg !6842
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !6843, metadata !DIExpression()), !dbg !6844
  store i8 0, i8* %ret, align 1, !dbg !6844
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !6845
  call void @note_stores(%struct.rtx_def* %0, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @sets_likely_spilled_1, i8* %ret), !dbg !6846
  %1 = load i8, i8* %ret, align 1, !dbg !6847
  ret i8 %1, !dbg !6848
}

declare dso_local %struct._dep* @sd_find_dep_between(%struct.rtx_def*, %struct.rtx_def*, i8 zeroext) #2

declare dso_local zeroext i8 @sched_insns_conditions_mutex_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @add_dependence(%struct.rtx_def*, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_index(%struct.VEC_int_base* %vec_, i32 %ix_) #0 !dbg !6849 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6861, metadata !DIExpression()), !dbg !6862
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6863, metadata !DIExpression()), !dbg !6862
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6862
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !6862
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6862

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6862
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6862
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !6862
  %3 = load i32, i32* %num, align 4, !dbg !6862
  %cmp = icmp ult i32 %1, %3, !dbg !6862
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6864
  %land.ext = zext i1 %4 to i32, !dbg !6862
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6862
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 2, !dbg !6862
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6862
  %idxprom = zext i32 %6 to i64, !dbg !6862
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !6862
  %7 = load i32, i32* %arrayidx, align 4, !dbg !6862
  ret i32 %7, !dbg !6862
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %vec_, i32 %ix_) #0 !dbg !6865 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_deps_insn_data_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_haifa_deps_insn_data_def_base* %vec_, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, metadata !6888, metadata !DIExpression()), !dbg !6889
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6890, metadata !DIExpression()), !dbg !6889
  %0 = load %struct.VEC_haifa_deps_insn_data_def_base*, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8, !dbg !6889
  %tobool = icmp ne %struct.VEC_haifa_deps_insn_data_def_base* %0, null, !dbg !6889
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6889

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6889
  %2 = load %struct.VEC_haifa_deps_insn_data_def_base*, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8, !dbg !6889
  %num = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_base, %struct.VEC_haifa_deps_insn_data_def_base* %2, i32 0, i32 0, !dbg !6889
  %3 = load i32, i32* %num, align 8, !dbg !6889
  %cmp = icmp ult i32 %1, %3, !dbg !6889
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6891
  %land.ext = zext i1 %4 to i32, !dbg !6889
  %5 = load %struct.VEC_haifa_deps_insn_data_def_base*, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8, !dbg !6889
  %vec = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_base, %struct.VEC_haifa_deps_insn_data_def_base* %5, i32 0, i32 2, !dbg !6889
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6889
  %idxprom = zext i32 %6 to i64, !dbg !6889
  %arrayidx = getelementptr inbounds [1 x %struct._haifa_deps_insn_data], [1 x %struct._haifa_deps_insn_data]* %vec, i64 0, i64 %idxprom, !dbg !6889
  ret %struct._haifa_deps_insn_data* %arrayidx, !dbg !6889
}

declare dso_local %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #2

declare dso_local void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sets_likely_spilled_1(%struct.rtx_def* %x, %struct.rtx_def* %pat, i8* %data) #0 !dbg !6892 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %pat.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %ret = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6895, metadata !DIExpression()), !dbg !6896
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !6897, metadata !DIExpression()), !dbg !6898
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6899, metadata !DIExpression()), !dbg !6900
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !6901, metadata !DIExpression()), !dbg !6902
  %0 = load i8*, i8** %data.addr, align 8, !dbg !6903
  store i8* %0, i8** %ret, align 8, !dbg !6902
  %1 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !6904
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6904
  %bf.load = load i32, i32* %2, align 8, !dbg !6904
  %bf.clear = and i32 %bf.load, 65535, !dbg !6904
  %cmp = icmp eq i32 %bf.clear, 23, !dbg !6906
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6907

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6908
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !6908
  %bf.load1 = load i32, i32* %4, align 8, !dbg !6908
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6908
  %cmp3 = icmp eq i32 %bf.clear2, 37, !dbg !6908
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !6909

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6910
  %call = call i32 @rhs_regno(%struct.rtx_def* %5), !dbg !6910
  %cmp5 = icmp ult i32 %call, 53, !dbg !6911
  br i1 %cmp5, label %land.lhs.true6, label %if.end, !dbg !6912

land.lhs.true6:                                   ; preds = %land.lhs.true4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call7 = call i32 @rhs_regno(%struct.rtx_def* %6), !dbg !6913
  %idxprom = zext i32 %call7 to i64, !dbg !6913
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom, !dbg !6913
  %7 = load i32, i32* %arrayidx, align 4, !dbg !6913
  %cmp8 = icmp eq i32 %7, 1, !dbg !6913
  br i1 %cmp8, label %if.then, label %lor.lhs.false, !dbg !6913

lor.lhs.false:                                    ; preds = %land.lhs.true6
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call9 = call i32 @rhs_regno(%struct.rtx_def* %8), !dbg !6913
  %idxprom10 = zext i32 %call9 to i64, !dbg !6913
  %arrayidx11 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom10, !dbg !6913
  %9 = load i32, i32* %arrayidx11, align 4, !dbg !6913
  %cmp12 = icmp eq i32 %9, 2, !dbg !6913
  br i1 %cmp12, label %if.then, label %lor.lhs.false13, !dbg !6913

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call14 = call i32 @rhs_regno(%struct.rtx_def* %10), !dbg !6913
  %idxprom15 = zext i32 %call14 to i64, !dbg !6913
  %arrayidx16 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom15, !dbg !6913
  %11 = load i32, i32* %arrayidx16, align 4, !dbg !6913
  %cmp17 = icmp eq i32 %11, 3, !dbg !6913
  br i1 %cmp17, label %if.then, label %lor.lhs.false18, !dbg !6913

lor.lhs.false18:                                  ; preds = %lor.lhs.false13
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call19 = call i32 @rhs_regno(%struct.rtx_def* %12), !dbg !6913
  %idxprom20 = zext i32 %call19 to i64, !dbg !6913
  %arrayidx21 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom20, !dbg !6913
  %13 = load i32, i32* %arrayidx21, align 4, !dbg !6913
  %cmp22 = icmp eq i32 %13, 4, !dbg !6913
  br i1 %cmp22, label %if.then, label %lor.lhs.false23, !dbg !6913

lor.lhs.false23:                                  ; preds = %lor.lhs.false18
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call24 = call i32 @rhs_regno(%struct.rtx_def* %14), !dbg !6913
  %idxprom25 = zext i32 %call24 to i64, !dbg !6913
  %arrayidx26 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom25, !dbg !6913
  %15 = load i32, i32* %arrayidx26, align 4, !dbg !6913
  %cmp27 = icmp eq i32 %15, 7, !dbg !6913
  br i1 %cmp27, label %if.then, label %lor.lhs.false28, !dbg !6913

lor.lhs.false28:                                  ; preds = %lor.lhs.false23
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call29 = call i32 @rhs_regno(%struct.rtx_def* %16), !dbg !6913
  %idxprom30 = zext i32 %call29 to i64, !dbg !6913
  %arrayidx31 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom30, !dbg !6913
  %17 = load i32, i32* %arrayidx31, align 4, !dbg !6913
  %cmp32 = icmp eq i32 %17, 5, !dbg !6913
  br i1 %cmp32, label %if.then, label %lor.lhs.false33, !dbg !6913

lor.lhs.false33:                                  ; preds = %lor.lhs.false28
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call34 = call i32 @rhs_regno(%struct.rtx_def* %18), !dbg !6913
  %idxprom35 = zext i32 %call34 to i64, !dbg !6913
  %arrayidx36 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom35, !dbg !6913
  %19 = load i32, i32* %arrayidx36, align 4, !dbg !6913
  %cmp37 = icmp eq i32 %19, 6, !dbg !6913
  br i1 %cmp37, label %if.then, label %lor.lhs.false38, !dbg !6913

lor.lhs.false38:                                  ; preds = %lor.lhs.false33
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call39 = call i32 @rhs_regno(%struct.rtx_def* %20), !dbg !6913
  %idxprom40 = zext i32 %call39 to i64, !dbg !6913
  %arrayidx41 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom40, !dbg !6913
  %21 = load i32, i32* %arrayidx41, align 4, !dbg !6913
  %cmp42 = icmp eq i32 %21, 17, !dbg !6913
  br i1 %cmp42, label %if.then, label %lor.lhs.false43, !dbg !6913

lor.lhs.false43:                                  ; preds = %lor.lhs.false38
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call44 = call i32 @rhs_regno(%struct.rtx_def* %22), !dbg !6913
  %idxprom45 = zext i32 %call44 to i64, !dbg !6913
  %arrayidx46 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom45, !dbg !6913
  %23 = load i32, i32* %arrayidx46, align 4, !dbg !6913
  %cmp47 = icmp eq i32 %23, 14, !dbg !6913
  br i1 %cmp47, label %if.then, label %lor.lhs.false48, !dbg !6913

lor.lhs.false48:                                  ; preds = %lor.lhs.false43
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6913
  %call49 = call i32 @rhs_regno(%struct.rtx_def* %24), !dbg !6913
  %idxprom50 = zext i32 %call49 to i64, !dbg !6913
  %arrayidx51 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom50, !dbg !6913
  %25 = load i32, i32* %arrayidx51, align 4, !dbg !6913
  %cmp52 = icmp eq i32 %25, 15, !dbg !6913
  br i1 %cmp52, label %if.then, label %if.end, !dbg !6914

if.then:                                          ; preds = %lor.lhs.false48, %lor.lhs.false43, %lor.lhs.false38, %lor.lhs.false33, %lor.lhs.false28, %lor.lhs.false23, %lor.lhs.false18, %lor.lhs.false13, %lor.lhs.false, %land.lhs.true6
  %26 = load i8*, i8** %ret, align 8, !dbg !6915
  store i8 1, i8* %26, align 1, !dbg !6916
  br label %if.end, !dbg !6917

if.end:                                           ; preds = %if.then, %lor.lhs.false48, %land.lhs.true4, %land.lhs.true, %entry
  ret void, !dbg !6918
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !6919 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6922, metadata !DIExpression()), !dbg !6923
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6924
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6924
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6924
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6924
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6924
  %1 = load i32, i32* %rt_uint, align 8, !dbg !6924
  ret i32 %1, !dbg !6925
}

declare dso_local void @free_INSN_LIST_list(%struct.rtx_def**) #2

declare dso_local void @free_EXPR_LIST_list(%struct.rtx_def**) #2

declare dso_local void @sbitmap_a_and_b(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare dso_local void @sbitmap_difference(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_jump_reg_dependencies(%struct.rtx_def* %insn, %struct.bitmap_head_def* %cond_exec, %struct.bitmap_head_def* %used, %struct.bitmap_head_def* %set) #0 !dbg !6926 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %cond_exec.addr = alloca %struct.bitmap_head_def*, align 8
  %used.addr = alloca %struct.bitmap_head_def*, align 8
  %set.addr = alloca %struct.bitmap_head_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6927, metadata !DIExpression()), !dbg !6928
  store %struct.bitmap_head_def* %cond_exec, %struct.bitmap_head_def** %cond_exec.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %cond_exec.addr, metadata !6929, metadata !DIExpression()), !dbg !6930
  store %struct.bitmap_head_def* %used, %struct.bitmap_head_def** %used.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %used.addr, metadata !6931, metadata !DIExpression()), !dbg !6932
  store %struct.bitmap_head_def* %set, %struct.bitmap_head_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %set.addr, metadata !6933, metadata !DIExpression()), !dbg !6934
  ret void, !dbg !6935
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_ready_list() #0 !dbg !6936 {
entry:
  %prev_head = alloca %struct.rtx_def*, align 8
  %next_tail = alloca %struct.rtx_def*, align 8
  %bb_src = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %src_head = alloca %struct.rtx_def*, align 8
  %src_next_tail = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  %head = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_head, metadata !6937, metadata !DIExpression()), !dbg !6938
  %0 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !6939
  %prev_head1 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %0, i32 0, i32 8, !dbg !6940
  %1 = load %struct.rtx_def*, %struct.rtx_def** %prev_head1, align 8, !dbg !6940
  store %struct.rtx_def* %1, %struct.rtx_def** %prev_head, align 8, !dbg !6938
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next_tail, metadata !6941, metadata !DIExpression()), !dbg !6942
  %2 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !6943
  %next_tail2 = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %2, i32 0, i32 9, !dbg !6944
  %3 = load %struct.rtx_def*, %struct.rtx_def** %next_tail2, align 8, !dbg !6944
  store %struct.rtx_def* %3, %struct.rtx_def** %next_tail, align 8, !dbg !6942
  call void @llvm.dbg.declare(metadata i32* %bb_src, metadata !6945, metadata !DIExpression()), !dbg !6946
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6947, metadata !DIExpression()), !dbg !6948
  store i32 0, i32* @target_n_insns, align 4, !dbg !6949
  store i32 0, i32* @sched_target_n_insns, align 4, !dbg !6950
  store i32 0, i32* @sched_n_insns, align 4, !dbg !6951
  %4 = load i32, i32* @sched_verbose, align 4, !dbg !6952
  %cmp = icmp sge i32 %4, 5, !dbg !6954
  br i1 %cmp, label %if.then, label %if.end, !dbg !6955

if.then:                                          ; preds = %entry
  %5 = load i32, i32* @target_bb, align 4, !dbg !6956
  call void @debug_rgn_dependencies(i32 %5), !dbg !6957
  br label %if.end, !dbg !6957

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* @current_nr_blocks, align 4, !dbg !6958
  %cmp3 = icmp sgt i32 %6, 1, !dbg !6960
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6961

if.then4:                                         ; preds = %if.end
  %7 = load i32, i32* @target_bb, align 4, !dbg !6962
  call void @compute_trg_info(i32 %7), !dbg !6963
  br label %if.end5, !dbg !6963

if.end5:                                          ; preds = %if.then4, %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %prev_head, align 8, !dbg !6964
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !6964
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6964
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6964
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6964
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6964
  store %struct.rtx_def* %9, %struct.rtx_def** %insn, align 8, !dbg !6966
  br label %for.cond, !dbg !6967

for.cond:                                         ; preds = %for.inc, %if.end5
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6968
  %11 = load %struct.rtx_def*, %struct.rtx_def** %next_tail, align 8, !dbg !6970
  %cmp6 = icmp ne %struct.rtx_def* %10, %11, !dbg !6971
  br i1 %cmp6, label %for.body, label %for.end, !dbg !6972

for.body:                                         ; preds = %for.cond
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6973
  %call = call i32 @try_ready(%struct.rtx_def* %12), !dbg !6975
  %13 = load i32, i32* @target_n_insns, align 4, !dbg !6976
  %inc = add nsw i32 %13, 1, !dbg !6976
  store i32 %inc, i32* @target_n_insns, align 4, !dbg !6976
  %14 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6977
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %14, null, !dbg !6977
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6977

cond.true:                                        ; preds = %for.body
  %15 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !6977
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %15, i32 0, i32 0, !dbg !6977
  br label %cond.end, !dbg !6977

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !6977

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6977
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6977
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6977
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !6977
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 0, !dbg !6977
  %rt_int = bitcast %union.rtunion_def* %arrayidx9 to i32*, !dbg !6977
  %17 = load i32, i32* %rt_int, align 8, !dbg !6977
  %call10 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %17), !dbg !6977
  %todo_spec = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call10, i32 0, i32 8, !dbg !6977
  %18 = load i32, i32* %todo_spec, align 8, !dbg !6977
  %and = and i32 %18, 258048, !dbg !6977
  %tobool11 = icmp ne i32 %and, 0, !dbg !6977
  br i1 %tobool11, label %cond.true12, label %cond.false13, !dbg !6977

cond.true12:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 2126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !6977
  br label %cond.end14, !dbg !6977

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !6977

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ 0, %cond.true12 ], [ 0, %cond.false13 ], !dbg !6977
  br label %for.inc, !dbg !6978

for.inc:                                          ; preds = %cond.end14
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6979
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !6979
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !6979
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 2, !dbg !6979
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !6979
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !6979
  store %struct.rtx_def* %20, %struct.rtx_def** %insn, align 8, !dbg !6980
  br label %for.cond, !dbg !6981, !llvm.loop !6982

for.end:                                          ; preds = %for.cond
  %21 = load i32, i32* @target_bb, align 4, !dbg !6984
  %add = add nsw i32 %21, 1, !dbg !6986
  store i32 %add, i32* %bb_src, align 4, !dbg !6987
  br label %for.cond20, !dbg !6988

for.cond20:                                       ; preds = %for.inc94, %for.end
  %22 = load i32, i32* %bb_src, align 4, !dbg !6989
  %23 = load i32, i32* @current_nr_blocks, align 4, !dbg !6991
  %cmp21 = icmp slt i32 %22, %23, !dbg !6992
  br i1 %cmp21, label %for.body22, label %for.end96, !dbg !6993

for.body22:                                       ; preds = %for.cond20
  %24 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !6994
  %25 = load i32, i32* %bb_src, align 4, !dbg !6994
  %idxprom = sext i32 %25 to i64, !dbg !6994
  %arrayidx23 = getelementptr inbounds %struct.candidate, %struct.candidate* %24, i64 %idxprom, !dbg !6994
  %is_valid = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx23, i32 0, i32 0, !dbg !6994
  %26 = load i8, i8* %is_valid, align 8, !dbg !6994
  %tobool24 = icmp ne i8 %26, 0, !dbg !6994
  br i1 %tobool24, label %if.then25, label %if.end93, !dbg !6996

if.then25:                                        ; preds = %for.body22
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src_head, metadata !6997, metadata !DIExpression()), !dbg !6999
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src_next_tail, metadata !7000, metadata !DIExpression()), !dbg !7001
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !7002, metadata !DIExpression()), !dbg !7003
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !7004, metadata !DIExpression()), !dbg !7005
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7006
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !7006
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7006
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7006
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 2, !dbg !7006
  %29 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !7006
  %tobool26 = icmp ne %struct.VEC_basic_block_gc* %29, null, !dbg !7006
  br i1 %tobool26, label %cond.true27, label %cond.false32, !dbg !7006

cond.true27:                                      ; preds = %if.then25
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7006
  %add.ptr28 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !7006
  %cfg29 = getelementptr inbounds %struct.function, %struct.function* %add.ptr28, i32 0, i32 1, !dbg !7006
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg29, align 8, !dbg !7006
  %x_basic_block_info30 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 2, !dbg !7006
  %32 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info30, align 8, !dbg !7006
  %base31 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %32, i32 0, i32 0, !dbg !7006
  br label %cond.end33, !dbg !7006

cond.false32:                                     ; preds = %if.then25
  br label %cond.end33, !dbg !7006

cond.end33:                                       ; preds = %cond.false32, %cond.true27
  %cond34 = phi %struct.VEC_basic_block_base* [ %base31, %cond.true27 ], [ null, %cond.false32 ], !dbg !7006
  %33 = load i32*, i32** @rgn_bb_table, align 8, !dbg !7006
  %34 = load i32*, i32** @ebb_head, align 8, !dbg !7006
  %35 = load i32, i32* %bb_src, align 4, !dbg !7006
  %idxprom35 = sext i32 %35 to i64, !dbg !7006
  %arrayidx36 = getelementptr inbounds i32, i32* %34, i64 %idxprom35, !dbg !7006
  %36 = load i32, i32* %arrayidx36, align 4, !dbg !7006
  %idxprom37 = sext i32 %36 to i64, !dbg !7006
  %arrayidx38 = getelementptr inbounds i32, i32* %33, i64 %idxprom37, !dbg !7006
  %37 = load i32, i32* %arrayidx38, align 4, !dbg !7006
  %call39 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond34, i32 %37), !dbg !7006
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7007
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !7007
  %cfg41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 1, !dbg !7007
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg41, align 8, !dbg !7007
  %x_basic_block_info42 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 2, !dbg !7007
  %40 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info42, align 8, !dbg !7007
  %tobool43 = icmp ne %struct.VEC_basic_block_gc* %40, null, !dbg !7007
  br i1 %tobool43, label %cond.true44, label %cond.false49, !dbg !7007

cond.true44:                                      ; preds = %cond.end33
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7007
  %add.ptr45 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !7007
  %cfg46 = getelementptr inbounds %struct.function, %struct.function* %add.ptr45, i32 0, i32 1, !dbg !7007
  %42 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg46, align 8, !dbg !7007
  %x_basic_block_info47 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i32 0, i32 2, !dbg !7007
  %43 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info47, align 8, !dbg !7007
  %base48 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %43, i32 0, i32 0, !dbg !7007
  br label %cond.end50, !dbg !7007

cond.false49:                                     ; preds = %cond.end33
  br label %cond.end50, !dbg !7007

cond.end50:                                       ; preds = %cond.false49, %cond.true44
  %cond51 = phi %struct.VEC_basic_block_base* [ %base48, %cond.true44 ], [ null, %cond.false49 ], !dbg !7007
  %44 = load i32*, i32** @rgn_bb_table, align 8, !dbg !7007
  %45 = load i32*, i32** @ebb_head, align 8, !dbg !7007
  %46 = load i32, i32* %bb_src, align 4, !dbg !7007
  %add52 = add nsw i32 %46, 1, !dbg !7007
  %idxprom53 = sext i32 %add52 to i64, !dbg !7007
  %arrayidx54 = getelementptr inbounds i32, i32* %45, i64 %idxprom53, !dbg !7007
  %47 = load i32, i32* %arrayidx54, align 4, !dbg !7007
  %sub = sub nsw i32 %47, 1, !dbg !7007
  %idxprom55 = sext i32 %sub to i64, !dbg !7007
  %arrayidx56 = getelementptr inbounds i32, i32* %44, i64 %idxprom55, !dbg !7007
  %48 = load i32, i32* %arrayidx56, align 4, !dbg !7007
  %call57 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond51, i32 %48), !dbg !7007
  call void @get_ebb_head_tail(%struct.basic_block_def* %call39, %struct.basic_block_def* %call57, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !7008
  %49 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !7009
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !7009
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !7009
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 2, !dbg !7009
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !7009
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !7009
  store %struct.rtx_def* %50, %struct.rtx_def** %src_next_tail, align 8, !dbg !7010
  %51 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !7011
  store %struct.rtx_def* %51, %struct.rtx_def** %src_head, align 8, !dbg !7012
  %52 = load %struct.rtx_def*, %struct.rtx_def** %src_head, align 8, !dbg !7013
  store %struct.rtx_def* %52, %struct.rtx_def** %insn, align 8, !dbg !7015
  br label %for.cond62, !dbg !7016

for.cond62:                                       ; preds = %for.inc87, %cond.end50
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7017
  %54 = load %struct.rtx_def*, %struct.rtx_def** %src_next_tail, align 8, !dbg !7019
  %cmp63 = icmp ne %struct.rtx_def* %53, %54, !dbg !7020
  br i1 %cmp63, label %for.body64, label %for.end92, !dbg !7021

for.body64:                                       ; preds = %for.cond62
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7022
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !7022
  %bf.load = load i32, i32* %56, align 8, !dbg !7022
  %bf.clear = and i32 %bf.load, 65535, !dbg !7022
  %cmp65 = icmp eq i32 %bf.clear, 8, !dbg !7022
  br i1 %cmp65, label %land.lhs.true, label %lor.lhs.false, !dbg !7022

lor.lhs.false:                                    ; preds = %for.body64
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7022
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !7022
  %bf.load66 = load i32, i32* %58, align 8, !dbg !7022
  %bf.clear67 = and i32 %bf.load66, 65535, !dbg !7022
  %cmp68 = icmp eq i32 %bf.clear67, 7, !dbg !7022
  br i1 %cmp68, label %land.lhs.true, label %lor.lhs.false69, !dbg !7022

lor.lhs.false69:                                  ; preds = %lor.lhs.false
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7022
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !7022
  %bf.load70 = load i32, i32* %60, align 8, !dbg !7022
  %bf.clear71 = and i32 %bf.load70, 65535, !dbg !7022
  %cmp72 = icmp eq i32 %bf.clear71, 9, !dbg !7022
  br i1 %cmp72, label %land.lhs.true, label %lor.lhs.false73, !dbg !7022

lor.lhs.false73:                                  ; preds = %lor.lhs.false69
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7022
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !7022
  %bf.load74 = load i32, i32* %62, align 8, !dbg !7022
  %bf.clear75 = and i32 %bf.load74, 65535, !dbg !7022
  %cmp76 = icmp eq i32 %bf.clear75, 10, !dbg !7022
  br i1 %cmp76, label %land.lhs.true, label %if.end86, !dbg !7024

land.lhs.true:                                    ; preds = %lor.lhs.false73, %lor.lhs.false69, %lor.lhs.false, %for.body64
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7025
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !7025
  %bf.load77 = load i32, i32* %64, align 8, !dbg !7025
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !7025
  %cmp79 = icmp eq i32 %bf.clear78, 7, !dbg !7025
  br i1 %cmp79, label %land.lhs.true80, label %if.then84, !dbg !7025

land.lhs.true80:                                  ; preds = %land.lhs.true
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7025
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !7025
  %bf.load81 = load i32, i32* %66, align 8, !dbg !7025
  %bf.lshr = lshr i32 %bf.load81, 26, !dbg !7025
  %bf.clear82 = and i32 %bf.lshr, 1, !dbg !7025
  %tobool83 = icmp ne i32 %bf.clear82, 0, !dbg !7025
  br i1 %tobool83, label %if.then84, label %if.end86, !dbg !7026

if.then84:                                        ; preds = %land.lhs.true80, %land.lhs.true
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7027
  %call85 = call i32 @try_ready(%struct.rtx_def* %67), !dbg !7028
  br label %if.end86, !dbg !7028

if.end86:                                         ; preds = %if.then84, %land.lhs.true80, %lor.lhs.false73
  br label %for.inc87, !dbg !7025

for.inc87:                                        ; preds = %if.end86
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7029
  %u88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !7029
  %fld89 = bitcast %union.u* %u88 to [1 x %union.rtunion_def]*, !dbg !7029
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i64 0, i64 2, !dbg !7029
  %rt_rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**, !dbg !7029
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx91, align 8, !dbg !7029
  store %struct.rtx_def* %69, %struct.rtx_def** %insn, align 8, !dbg !7030
  br label %for.cond62, !dbg !7031, !llvm.loop !7032

for.end92:                                        ; preds = %for.cond62
  br label %if.end93, !dbg !7034

if.end93:                                         ; preds = %for.end92, %for.body22
  br label %for.inc94, !dbg !6994

for.inc94:                                        ; preds = %if.end93
  %70 = load i32, i32* %bb_src, align 4, !dbg !7035
  %inc95 = add nsw i32 %70, 1, !dbg !7035
  store i32 %inc95, i32* %bb_src, align 4, !dbg !7035
  br label %for.cond20, !dbg !7036, !llvm.loop !7037

for.end96:                                        ; preds = %for.cond20
  ret void, !dbg !7039
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @can_schedule_ready_p(%struct.rtx_def* %insn) #0 !dbg !7040 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7041, metadata !DIExpression()), !dbg !7042
  %0 = load i32*, i32** @block_to_bb, align 8, !dbg !7043
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7043
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7043
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7043
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7043
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7043
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7043
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !7043
  %3 = load i32, i32* %index, align 8, !dbg !7043
  %add = add nsw i32 %3, 0, !dbg !7043
  %idxprom = sext i32 %add to i64, !dbg !7043
  %arrayidx1 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !7043
  %4 = load i32, i32* %arrayidx1, align 4, !dbg !7043
  %5 = load i32, i32* @target_bb, align 4, !dbg !7045
  %cmp = icmp ne i32 %4, %5, !dbg !7046
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !7047

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7048
  %7 = load i32*, i32** @block_to_bb, align 8, !dbg !7048
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7048
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7048
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7048
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 3, !dbg !7048
  %rt_bb5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.basic_block_def**, !dbg !7048
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb5, align 8, !dbg !7048
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !7048
  %10 = load i32, i32* %index6, align 8, !dbg !7048
  %add7 = add nsw i32 %10, 0, !dbg !7048
  %idxprom8 = sext i32 %add7 to i64, !dbg !7048
  %arrayidx9 = getelementptr inbounds i32, i32* %7, i64 %idxprom8, !dbg !7048
  %11 = load i32, i32* %arrayidx9, align 4, !dbg !7048
  %idxprom10 = sext i32 %11 to i64, !dbg !7048
  %arrayidx11 = getelementptr inbounds %struct.candidate, %struct.candidate* %6, i64 %idxprom10, !dbg !7048
  %is_speculative = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx11, i32 0, i32 1, !dbg !7048
  %12 = load i8, i8* %is_speculative, align 1, !dbg !7048
  %conv = sext i8 %12 to i32, !dbg !7048
  %tobool = icmp ne i32 %conv, 0, !dbg !7048
  br i1 %tobool, label %land.lhs.true12, label %if.else, !dbg !7049

land.lhs.true12:                                  ; preds = %land.lhs.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7050
  %14 = load i32*, i32** @block_to_bb, align 8, !dbg !7051
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7051
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !7051
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !7051
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 3, !dbg !7051
  %rt_bb16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.basic_block_def**, !dbg !7051
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb16, align 8, !dbg !7051
  %index17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !7051
  %17 = load i32, i32* %index17, align 8, !dbg !7051
  %add18 = add nsw i32 %17, 0, !dbg !7051
  %idxprom19 = sext i32 %add18 to i64, !dbg !7051
  %arrayidx20 = getelementptr inbounds i32, i32* %14, i64 %idxprom19, !dbg !7051
  %18 = load i32, i32* %arrayidx20, align 4, !dbg !7051
  %call = call i32 @check_live(%struct.rtx_def* %13, i32 %18), !dbg !7052
  %tobool21 = icmp ne i32 %call, 0, !dbg !7052
  br i1 %tobool21, label %if.else, label %if.then, !dbg !7053

if.then:                                          ; preds = %land.lhs.true12
  store i32 0, i32* %retval, align 4, !dbg !7054
  br label %return, !dbg !7054

if.else:                                          ; preds = %land.lhs.true12, %land.lhs.true, %entry
  store i32 1, i32* %retval, align 4, !dbg !7055
  br label %return, !dbg !7055

return:                                           ; preds = %if.else, %if.then
  %19 = load i32, i32* %retval, align 4, !dbg !7056
  ret i32 %19, !dbg !7056
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @schedule_more_p() #0 !dbg !7057 {
entry:
  %0 = load i32, i32* @sched_target_n_insns, align 4, !dbg !7058
  %1 = load i32, i32* @target_n_insns, align 4, !dbg !7059
  %cmp = icmp slt i32 %0, %1, !dbg !7060
  %conv = zext i1 %cmp to i32, !dbg !7060
  ret i32 %conv, !dbg !7061
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @new_ready(%struct.rtx_def* %next, i32 %ts) #0 !dbg !7062 {
entry:
  %next.addr = alloca %struct.rtx_def*, align 8
  %ts.addr = alloca i32, align 4
  %not_ex_free = alloca i32, align 4
  %new_ds = alloca i32, align 4
  store %struct.rtx_def* %next, %struct.rtx_def** %next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next.addr, metadata !7063, metadata !DIExpression()), !dbg !7064
  store i32 %ts, i32* %ts.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ts.addr, metadata !7065, metadata !DIExpression()), !dbg !7066
  %0 = load i32*, i32** @block_to_bb, align 8, !dbg !7067
  %1 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7067
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7067
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7067
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7067
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7067
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7067
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !7067
  %3 = load i32, i32* %index, align 8, !dbg !7067
  %add = add nsw i32 %3, 0, !dbg !7067
  %idxprom = sext i32 %add to i64, !dbg !7067
  %arrayidx1 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !7067
  %4 = load i32, i32* %arrayidx1, align 4, !dbg !7067
  %5 = load i32, i32* @target_bb, align 4, !dbg !7069
  %cmp = icmp ne i32 %4, %5, !dbg !7070
  br i1 %cmp, label %if.then, label %if.end108, !dbg !7071

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %not_ex_free, metadata !7072, metadata !DIExpression()), !dbg !7074
  store i32 0, i32* %not_ex_free, align 4, !dbg !7074
  %6 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7075
  %7 = load i32*, i32** @block_to_bb, align 8, !dbg !7075
  %8 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7075
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7075
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7075
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 3, !dbg !7075
  %rt_bb5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.basic_block_def**, !dbg !7075
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb5, align 8, !dbg !7075
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !7075
  %10 = load i32, i32* %index6, align 8, !dbg !7075
  %add7 = add nsw i32 %10, 0, !dbg !7075
  %idxprom8 = sext i32 %add7 to i64, !dbg !7075
  %arrayidx9 = getelementptr inbounds i32, i32* %7, i64 %idxprom8, !dbg !7075
  %11 = load i32, i32* %arrayidx9, align 4, !dbg !7075
  %idxprom10 = sext i32 %11 to i64, !dbg !7075
  %arrayidx11 = getelementptr inbounds %struct.candidate, %struct.candidate* %6, i64 %idxprom10, !dbg !7075
  %is_valid = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx11, i32 0, i32 0, !dbg !7075
  %12 = load i8, i8* %is_valid, align 8, !dbg !7075
  %tobool = icmp ne i8 %12, 0, !dbg !7075
  br i1 %tobool, label %lor.lhs.false, label %if.then88, !dbg !7077

lor.lhs.false:                                    ; preds = %if.then
  %13 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7078
  %tobool12 = icmp ne %struct.VEC_haifa_deps_insn_data_def_heap* %13, null, !dbg !7078
  br i1 %tobool12, label %cond.true, label %cond.false, !dbg !7078

cond.true:                                        ; preds = %lor.lhs.false
  %14 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7078
  %base = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_heap, %struct.VEC_haifa_deps_insn_data_def_heap* %14, i32 0, i32 0, !dbg !7078
  br label %cond.end, !dbg !7078

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !7078

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_deps_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7078
  %15 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7078
  %tobool13 = icmp ne %struct.VEC_int_heap* %15, null, !dbg !7078
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !7078

cond.true14:                                      ; preds = %cond.end
  %16 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7078
  %base15 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %16, i32 0, i32 0, !dbg !7078
  br label %cond.end17, !dbg !7078

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17, !dbg !7078

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_int_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !7078
  %17 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7078
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7078
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !7078
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !7078
  %rt_int = bitcast %union.rtunion_def* %arrayidx21 to i32*, !dbg !7078
  %18 = load i32, i32* %rt_int, align 8, !dbg !7078
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond18, i32 %18), !dbg !7078
  %call22 = call %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %cond, i32 %call), !dbg !7078
  %cant_move = getelementptr inbounds %struct._haifa_deps_insn_data, %struct._haifa_deps_insn_data* %call22, i32 0, i32 7, !dbg !7078
  %bf.load = load i8, i8* %cant_move, align 8, !dbg !7078
  %bf.clear = and i8 %bf.load, 1, !dbg !7078
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7078
  %tobool23 = icmp ne i32 %bf.cast, 0, !dbg !7078
  br i1 %tobool23, label %if.then88, label %lor.lhs.false24, !dbg !7079

lor.lhs.false24:                                  ; preds = %cond.end17
  %19 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7080
  %20 = load i32*, i32** @block_to_bb, align 8, !dbg !7080
  %21 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7080
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !7080
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !7080
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 3, !dbg !7080
  %rt_bb28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.basic_block_def**, !dbg !7080
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb28, align 8, !dbg !7080
  %index29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 9, !dbg !7080
  %23 = load i32, i32* %index29, align 8, !dbg !7080
  %add30 = add nsw i32 %23, 0, !dbg !7080
  %idxprom31 = sext i32 %add30 to i64, !dbg !7080
  %arrayidx32 = getelementptr inbounds i32, i32* %20, i64 %idxprom31, !dbg !7080
  %24 = load i32, i32* %arrayidx32, align 4, !dbg !7080
  %idxprom33 = sext i32 %24 to i64, !dbg !7080
  %arrayidx34 = getelementptr inbounds %struct.candidate, %struct.candidate* %19, i64 %idxprom33, !dbg !7080
  %is_speculative = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx34, i32 0, i32 1, !dbg !7080
  %25 = load i8, i8* %is_speculative, align 1, !dbg !7080
  %conv = sext i8 %25 to i32, !dbg !7080
  %tobool35 = icmp ne i32 %conv, 0, !dbg !7080
  br i1 %tobool35, label %land.lhs.true, label %if.end107, !dbg !7081

land.lhs.true:                                    ; preds = %lor.lhs.false24
  %26 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7082
  %call36 = call i32 @recog_memoized(%struct.rtx_def* %26), !dbg !7083
  %cmp37 = icmp sge i32 %call36, 0, !dbg !7084
  br i1 %cmp37, label %land.lhs.true39, label %lor.lhs.false44, !dbg !7085

land.lhs.true39:                                  ; preds = %land.lhs.true
  %27 = load i8*, i8** @curr_state, align 8, !dbg !7086
  %28 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7087
  %29 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7088
  %call40 = call i32 @min_insn_conflict_delay(i8* %27, %struct.rtx_def* %28, %struct.rtx_def* %29), !dbg !7089
  %30 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7090
  %arrayidx41 = getelementptr inbounds %struct.param_info, %struct.param_info* %30, i64 83, !dbg !7090
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx41, i32 0, i32 1, !dbg !7090
  %31 = load i32, i32* %value, align 8, !dbg !7090
  %cmp42 = icmp sgt i32 %call40, %31, !dbg !7091
  br i1 %cmp42, label %if.then88, label %lor.lhs.false44, !dbg !7092

lor.lhs.false44:                                  ; preds = %land.lhs.true39, %land.lhs.true
  %call45 = call zeroext i8 @sel_sched_p(), !dbg !7093
  %conv46 = zext i8 %call45 to i32, !dbg !7093
  %tobool47 = icmp ne i32 %conv46, 0, !dbg !7093
  br i1 %tobool47, label %cond.true48, label %cond.false52, !dbg !7094

cond.true48:                                      ; preds = %lor.lhs.false44
  %32 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7093
  %call49 = call zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def* %32), !dbg !7093
  %conv50 = zext i8 %call49 to i32, !dbg !7093
  %tobool51 = icmp ne i32 %conv50, 0, !dbg !7093
  br i1 %tobool51, label %if.then88, label %lor.lhs.false66, !dbg !7093

cond.false52:                                     ; preds = %lor.lhs.false44
  %33 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7093
  %tobool53 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %33, null, !dbg !7093
  br i1 %tobool53, label %cond.true54, label %cond.false56, !dbg !7093

cond.true54:                                      ; preds = %cond.false52
  %34 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7093
  %base55 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %34, i32 0, i32 0, !dbg !7093
  br label %cond.end57, !dbg !7093

cond.false56:                                     ; preds = %cond.false52
  br label %cond.end57, !dbg !7093

cond.end57:                                       ; preds = %cond.false56, %cond.true54
  %cond58 = phi %struct.VEC_haifa_insn_data_def_base* [ %base55, %cond.true54 ], [ null, %cond.false56 ], !dbg !7093
  %35 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7093
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !7093
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !7093
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 0, !dbg !7093
  %rt_int62 = bitcast %union.rtunion_def* %arrayidx61 to i32*, !dbg !7093
  %36 = load i32, i32* %rt_int62, align 8, !dbg !7093
  %call63 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond58, i32 %36), !dbg !7093
  %recovery_block = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call63, i32 0, i32 11, !dbg !7093
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !7093
  %cmp64 = icmp ne %struct.basic_block_def* %37, null, !dbg !7093
  br i1 %cmp64, label %if.then88, label %lor.lhs.false66, !dbg !7094

lor.lhs.false66:                                  ; preds = %cond.end57, %cond.true48
  %38 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7095
  %39 = load i32*, i32** @block_to_bb, align 8, !dbg !7096
  %40 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7096
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !7096
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !7096
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 3, !dbg !7096
  %rt_bb70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.basic_block_def**, !dbg !7096
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb70, align 8, !dbg !7096
  %index71 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !7096
  %42 = load i32, i32* %index71, align 8, !dbg !7096
  %add72 = add nsw i32 %42, 0, !dbg !7096
  %idxprom73 = sext i32 %add72 to i64, !dbg !7096
  %arrayidx74 = getelementptr inbounds i32, i32* %39, i64 %idxprom73, !dbg !7096
  %43 = load i32, i32* %arrayidx74, align 4, !dbg !7096
  %call75 = call i32 @check_live(%struct.rtx_def* %38, i32 %43), !dbg !7097
  %tobool76 = icmp ne i32 %call75, 0, !dbg !7097
  br i1 %tobool76, label %lor.lhs.false77, label %if.then88, !dbg !7098

lor.lhs.false77:                                  ; preds = %lor.lhs.false66
  %44 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7099
  %45 = load i32*, i32** @block_to_bb, align 8, !dbg !7100
  %46 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7100
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !7100
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !7100
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 3, !dbg !7100
  %rt_bb81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.basic_block_def**, !dbg !7100
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb81, align 8, !dbg !7100
  %index82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 9, !dbg !7100
  %48 = load i32, i32* %index82, align 8, !dbg !7100
  %add83 = add nsw i32 %48, 0, !dbg !7100
  %idxprom84 = sext i32 %add83 to i64, !dbg !7100
  %arrayidx85 = getelementptr inbounds i32, i32* %45, i64 %idxprom84, !dbg !7100
  %49 = load i32, i32* %arrayidx85, align 4, !dbg !7100
  %50 = load i32, i32* @target_bb, align 4, !dbg !7101
  %call86 = call i32 @is_exception_free(%struct.rtx_def* %44, i32 %49, i32 %50), !dbg !7102
  %tobool87 = icmp ne i32 %call86, 0, !dbg !7103
  %lnot = xor i1 %tobool87, true, !dbg !7103
  %lnot.ext = zext i1 %lnot to i32, !dbg !7103
  store i32 %lnot.ext, i32* %not_ex_free, align 4, !dbg !7104
  br i1 %lnot, label %if.then88, label %if.end107, !dbg !7105

if.then88:                                        ; preds = %lor.lhs.false77, %lor.lhs.false66, %cond.end57, %cond.true48, %land.lhs.true39, %cond.end17, %if.then
  %51 = load i32, i32* %not_ex_free, align 4, !dbg !7106
  %tobool89 = icmp ne i32 %51, 0, !dbg !7106
  br i1 %tobool89, label %land.lhs.true90, label %if.else103, !dbg !7109

land.lhs.true90:                                  ; preds = %if.then88
  %52 = load %struct.sched_deps_info_def*, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !7110
  %generate_spec_deps = getelementptr inbounds %struct.sched_deps_info_def, %struct.sched_deps_info_def* %52, i32 0, i32 12, !dbg !7111
  %bf.load91 = load i8, i8* %generate_spec_deps, align 8, !dbg !7111
  %bf.lshr = lshr i8 %bf.load91, 2, !dbg !7111
  %bf.clear92 = and i8 %bf.lshr, 1, !dbg !7111
  %bf.cast93 = zext i8 %bf.clear92 to i32, !dbg !7111
  %tobool94 = icmp ne i32 %bf.cast93, 0, !dbg !7110
  br i1 %tobool94, label %land.lhs.true95, label %if.else103, !dbg !7112

land.lhs.true95:                                  ; preds = %land.lhs.true90
  %53 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7113
  %mask = getelementptr inbounds %struct.spec_info_def, %struct.spec_info_def* %53, i32 0, i32 0, !dbg !7114
  %54 = load i32, i32* %mask, align 8, !dbg !7114
  %and = and i32 %54, 258048, !dbg !7115
  %tobool96 = icmp ne i32 %and, 0, !dbg !7115
  br i1 %tobool96, label %if.then97, label %if.else103, !dbg !7116

if.then97:                                        ; preds = %land.lhs.true95
  call void @llvm.dbg.declare(metadata i32* %new_ds, metadata !7117, metadata !DIExpression()), !dbg !7119
  %55 = load i32, i32* %ts.addr, align 4, !dbg !7120
  %call98 = call i32 @set_dep_weak(i32 %55, i32 258048, i32 62), !dbg !7121
  store i32 %call98, i32* %new_ds, align 4, !dbg !7122
  %56 = load %struct.rtx_def*, %struct.rtx_def** %next.addr, align 8, !dbg !7123
  %57 = load i32, i32* %new_ds, align 4, !dbg !7125
  %call99 = call zeroext i8 @sched_insn_is_legitimate_for_speculation_p(%struct.rtx_def* %56, i32 %57), !dbg !7126
  %tobool100 = icmp ne i8 %call99, 0, !dbg !7126
  br i1 %tobool100, label %if.then101, label %if.else, !dbg !7127

if.then101:                                       ; preds = %if.then97
  %58 = load i32, i32* %new_ds, align 4, !dbg !7128
  store i32 %58, i32* %ts.addr, align 4, !dbg !7129
  br label %if.end, !dbg !7130

if.else:                                          ; preds = %if.then97
  %59 = load i32, i32* %ts.addr, align 4, !dbg !7131
  %and102 = and i32 %59, -16777216, !dbg !7132
  %or = or i32 %and102, 134217728, !dbg !7133
  store i32 %or, i32* %ts.addr, align 4, !dbg !7134
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then101
  br label %if.end106, !dbg !7135

if.else103:                                       ; preds = %land.lhs.true95, %land.lhs.true90, %if.then88
  %60 = load i32, i32* %ts.addr, align 4, !dbg !7136
  %and104 = and i32 %60, -16777216, !dbg !7137
  %or105 = or i32 %and104, 134217728, !dbg !7138
  store i32 %or105, i32* %ts.addr, align 4, !dbg !7139
  br label %if.end106

if.end106:                                        ; preds = %if.else103, %if.end
  br label %if.end107, !dbg !7140

if.end107:                                        ; preds = %if.end106, %lor.lhs.false77, %lor.lhs.false24
  br label %if.end108, !dbg !7141

if.end108:                                        ; preds = %if.end107, %entry
  %61 = load i32, i32* %ts.addr, align 4, !dbg !7142
  ret i32 %61, !dbg !7143
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rgn_rank(%struct.rtx_def* %insn1, %struct.rtx_def* %insn2) #0 !dbg !7144 {
entry:
  %retval = alloca i32, align 4
  %insn1.addr = alloca %struct.rtx_def*, align 8
  %insn2.addr = alloca %struct.rtx_def*, align 8
  %spec_val = alloca i32, align 4
  %prob_val = alloca i32, align 4
  store %struct.rtx_def* %insn1, %struct.rtx_def** %insn1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn1.addr, metadata !7145, metadata !DIExpression()), !dbg !7146
  store %struct.rtx_def* %insn2, %struct.rtx_def** %insn2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn2.addr, metadata !7147, metadata !DIExpression()), !dbg !7148
  %0 = load i32*, i32** @block_to_bb, align 8, !dbg !7149
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn1.addr, align 8, !dbg !7149
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7149
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7149
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7149
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7149
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7149
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !7149
  %3 = load i32, i32* %index, align 8, !dbg !7149
  %add = add nsw i32 %3, 0, !dbg !7149
  %idxprom = sext i32 %add to i64, !dbg !7149
  %arrayidx1 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !7149
  %4 = load i32, i32* %arrayidx1, align 4, !dbg !7149
  %5 = load i32*, i32** @block_to_bb, align 8, !dbg !7151
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn2.addr, align 8, !dbg !7151
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7151
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7151
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 3, !dbg !7151
  %rt_bb5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.basic_block_def**, !dbg !7151
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb5, align 8, !dbg !7151
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !7151
  %8 = load i32, i32* %index6, align 8, !dbg !7151
  %add7 = add nsw i32 %8, 0, !dbg !7151
  %idxprom8 = sext i32 %add7 to i64, !dbg !7151
  %arrayidx9 = getelementptr inbounds i32, i32* %5, i64 %idxprom8, !dbg !7151
  %9 = load i32, i32* %arrayidx9, align 4, !dbg !7151
  %cmp = icmp ne i32 %4, %9, !dbg !7152
  br i1 %cmp, label %if.then, label %if.end99, !dbg !7153

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %spec_val, metadata !7154, metadata !DIExpression()), !dbg !7156
  call void @llvm.dbg.declare(metadata i32* %prob_val, metadata !7157, metadata !DIExpression()), !dbg !7158
  %10 = load i32*, i32** @block_to_bb, align 8, !dbg !7159
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn2.addr, align 8, !dbg !7159
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7159
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !7159
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 3, !dbg !7159
  %rt_bb13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.basic_block_def**, !dbg !7159
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb13, align 8, !dbg !7159
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !7159
  %13 = load i32, i32* %index14, align 8, !dbg !7159
  %add15 = add nsw i32 %13, 0, !dbg !7159
  %idxprom16 = sext i32 %add15 to i64, !dbg !7159
  %arrayidx17 = getelementptr inbounds i32, i32* %10, i64 %idxprom16, !dbg !7159
  %14 = load i32, i32* %arrayidx17, align 4, !dbg !7159
  %15 = load i32, i32* @target_bb, align 4, !dbg !7161
  %cmp18 = icmp eq i32 %14, %15, !dbg !7162
  br i1 %cmp18, label %land.lhs.true, label %if.end, !dbg !7163

land.lhs.true:                                    ; preds = %if.then
  %16 = load i32*, i32** @block_to_bb, align 8, !dbg !7164
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn1.addr, align 8, !dbg !7164
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7164
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !7164
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 3, !dbg !7164
  %rt_bb22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.basic_block_def**, !dbg !7164
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb22, align 8, !dbg !7164
  %index23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !7164
  %19 = load i32, i32* %index23, align 8, !dbg !7164
  %add24 = add nsw i32 %19, 0, !dbg !7164
  %idxprom25 = sext i32 %add24 to i64, !dbg !7164
  %arrayidx26 = getelementptr inbounds i32, i32* %16, i64 %idxprom25, !dbg !7164
  %20 = load i32, i32* %arrayidx26, align 4, !dbg !7164
  %21 = load i32, i32* @target_bb, align 4, !dbg !7165
  %cmp27 = icmp ne i32 %20, %21, !dbg !7166
  br i1 %cmp27, label %if.then28, label %if.end, !dbg !7167

if.then28:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !7168
  br label %return, !dbg !7168

if.end:                                           ; preds = %land.lhs.true, %if.then
  %22 = load i32*, i32** @block_to_bb, align 8, !dbg !7169
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn1.addr, align 8, !dbg !7169
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7169
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !7169
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 3, !dbg !7169
  %rt_bb32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.basic_block_def**, !dbg !7169
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb32, align 8, !dbg !7169
  %index33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 9, !dbg !7169
  %25 = load i32, i32* %index33, align 8, !dbg !7169
  %add34 = add nsw i32 %25, 0, !dbg !7169
  %idxprom35 = sext i32 %add34 to i64, !dbg !7169
  %arrayidx36 = getelementptr inbounds i32, i32* %22, i64 %idxprom35, !dbg !7169
  %26 = load i32, i32* %arrayidx36, align 4, !dbg !7169
  %27 = load i32, i32* @target_bb, align 4, !dbg !7171
  %cmp37 = icmp eq i32 %26, %27, !dbg !7172
  br i1 %cmp37, label %land.lhs.true38, label %if.end49, !dbg !7173

land.lhs.true38:                                  ; preds = %if.end
  %28 = load i32*, i32** @block_to_bb, align 8, !dbg !7174
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn2.addr, align 8, !dbg !7174
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !7174
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !7174
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 3, !dbg !7174
  %rt_bb42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.basic_block_def**, !dbg !7174
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb42, align 8, !dbg !7174
  %index43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !7174
  %31 = load i32, i32* %index43, align 8, !dbg !7174
  %add44 = add nsw i32 %31, 0, !dbg !7174
  %idxprom45 = sext i32 %add44 to i64, !dbg !7174
  %arrayidx46 = getelementptr inbounds i32, i32* %28, i64 %idxprom45, !dbg !7174
  %32 = load i32, i32* %arrayidx46, align 4, !dbg !7174
  %33 = load i32, i32* @target_bb, align 4, !dbg !7175
  %cmp47 = icmp ne i32 %32, %33, !dbg !7176
  br i1 %cmp47, label %if.then48, label %if.end49, !dbg !7177

if.then48:                                        ; preds = %land.lhs.true38
  store i32 -1, i32* %retval, align 4, !dbg !7178
  br label %return, !dbg !7178

if.end49:                                         ; preds = %land.lhs.true38, %if.end
  %34 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7179
  %35 = load i32*, i32** @block_to_bb, align 8, !dbg !7179
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn1.addr, align 8, !dbg !7179
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !7179
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !7179
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 3, !dbg !7179
  %rt_bb53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.basic_block_def**, !dbg !7179
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb53, align 8, !dbg !7179
  %index54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 9, !dbg !7179
  %38 = load i32, i32* %index54, align 8, !dbg !7179
  %add55 = add nsw i32 %38, 0, !dbg !7179
  %idxprom56 = sext i32 %add55 to i64, !dbg !7179
  %arrayidx57 = getelementptr inbounds i32, i32* %35, i64 %idxprom56, !dbg !7179
  %39 = load i32, i32* %arrayidx57, align 4, !dbg !7179
  %idxprom58 = sext i32 %39 to i64, !dbg !7179
  %arrayidx59 = getelementptr inbounds %struct.candidate, %struct.candidate* %34, i64 %idxprom58, !dbg !7179
  %is_speculative = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx59, i32 0, i32 1, !dbg !7179
  %40 = load i8, i8* %is_speculative, align 1, !dbg !7179
  %conv = sext i8 %40 to i32, !dbg !7179
  %41 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7180
  %42 = load i32*, i32** @block_to_bb, align 8, !dbg !7180
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn2.addr, align 8, !dbg !7180
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !7180
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !7180
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 3, !dbg !7180
  %rt_bb63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.basic_block_def**, !dbg !7180
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb63, align 8, !dbg !7180
  %index64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 9, !dbg !7180
  %45 = load i32, i32* %index64, align 8, !dbg !7180
  %add65 = add nsw i32 %45, 0, !dbg !7180
  %idxprom66 = sext i32 %add65 to i64, !dbg !7180
  %arrayidx67 = getelementptr inbounds i32, i32* %42, i64 %idxprom66, !dbg !7180
  %46 = load i32, i32* %arrayidx67, align 4, !dbg !7180
  %idxprom68 = sext i32 %46 to i64, !dbg !7180
  %arrayidx69 = getelementptr inbounds %struct.candidate, %struct.candidate* %41, i64 %idxprom68, !dbg !7180
  %is_speculative70 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx69, i32 0, i32 1, !dbg !7180
  %47 = load i8, i8* %is_speculative70, align 1, !dbg !7180
  %conv71 = sext i8 %47 to i32, !dbg !7180
  %sub = sub nsw i32 %conv, %conv71, !dbg !7181
  store i32 %sub, i32* %spec_val, align 4, !dbg !7182
  %48 = load i32, i32* %spec_val, align 4, !dbg !7183
  %tobool = icmp ne i32 %48, 0, !dbg !7183
  br i1 %tobool, label %if.then72, label %if.end73, !dbg !7185

if.then72:                                        ; preds = %if.end49
  %49 = load i32, i32* %spec_val, align 4, !dbg !7186
  store i32 %49, i32* %retval, align 4, !dbg !7187
  br label %return, !dbg !7187

if.end73:                                         ; preds = %if.end49
  %50 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7188
  %51 = load i32*, i32** @block_to_bb, align 8, !dbg !7188
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn2.addr, align 8, !dbg !7188
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !7188
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !7188
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 3, !dbg !7188
  %rt_bb77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.basic_block_def**, !dbg !7188
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb77, align 8, !dbg !7188
  %index78 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 9, !dbg !7188
  %54 = load i32, i32* %index78, align 8, !dbg !7188
  %add79 = add nsw i32 %54, 0, !dbg !7188
  %idxprom80 = sext i32 %add79 to i64, !dbg !7188
  %arrayidx81 = getelementptr inbounds i32, i32* %51, i64 %idxprom80, !dbg !7188
  %55 = load i32, i32* %arrayidx81, align 4, !dbg !7188
  %idxprom82 = sext i32 %55 to i64, !dbg !7188
  %arrayidx83 = getelementptr inbounds %struct.candidate, %struct.candidate* %50, i64 %idxprom82, !dbg !7188
  %src_prob = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx83, i32 0, i32 2, !dbg !7188
  %56 = load i32, i32* %src_prob, align 4, !dbg !7188
  %57 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7189
  %58 = load i32*, i32** @block_to_bb, align 8, !dbg !7189
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn1.addr, align 8, !dbg !7189
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !7189
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !7189
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 3, !dbg !7189
  %rt_bb87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.basic_block_def**, !dbg !7189
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb87, align 8, !dbg !7189
  %index88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 9, !dbg !7189
  %61 = load i32, i32* %index88, align 8, !dbg !7189
  %add89 = add nsw i32 %61, 0, !dbg !7189
  %idxprom90 = sext i32 %add89 to i64, !dbg !7189
  %arrayidx91 = getelementptr inbounds i32, i32* %58, i64 %idxprom90, !dbg !7189
  %62 = load i32, i32* %arrayidx91, align 4, !dbg !7189
  %idxprom92 = sext i32 %62 to i64, !dbg !7189
  %arrayidx93 = getelementptr inbounds %struct.candidate, %struct.candidate* %57, i64 %idxprom92, !dbg !7189
  %src_prob94 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx93, i32 0, i32 2, !dbg !7189
  %63 = load i32, i32* %src_prob94, align 4, !dbg !7189
  %sub95 = sub nsw i32 %56, %63, !dbg !7190
  store i32 %sub95, i32* %prob_val, align 4, !dbg !7191
  %64 = load i32, i32* %prob_val, align 4, !dbg !7192
  %tobool96 = icmp ne i32 %64, 0, !dbg !7192
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !7194

if.then97:                                        ; preds = %if.end73
  %65 = load i32, i32* %prob_val, align 4, !dbg !7195
  store i32 %65, i32* %retval, align 4, !dbg !7196
  br label %return, !dbg !7196

if.end98:                                         ; preds = %if.end73
  br label %if.end99, !dbg !7197

if.end99:                                         ; preds = %if.end98, %entry
  store i32 0, i32* %retval, align 4, !dbg !7198
  br label %return, !dbg !7198

return:                                           ; preds = %if.end99, %if.then97, %if.then72, %if.then48, %if.then28
  %66 = load i32, i32* %retval, align 4, !dbg !7199
  ret i32 %66, !dbg !7199
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @rgn_print_insn(%struct.rtx_def* %insn, i32 %aligned) #0 !dbg !2459 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %aligned.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7200, metadata !DIExpression()), !dbg !7201
  store i32 %aligned, i32* %aligned.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %aligned.addr, metadata !7202, metadata !DIExpression()), !dbg !7203
  %0 = load i32, i32* %aligned.addr, align 4, !dbg !7204
  %tobool = icmp ne i32 %0, 0, !dbg !7204
  br i1 %tobool, label %if.then, label %if.else, !dbg !7206

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** @block_to_bb, align 8, !dbg !7207
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7207
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7207
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7207
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7207
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7207
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7207
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !7207
  %4 = load i32, i32* %index, align 8, !dbg !7207
  %add = add nsw i32 %4, 0, !dbg !7207
  %idxprom = sext i32 %add to i64, !dbg !7207
  %arrayidx1 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !7207
  %5 = load i32, i32* %arrayidx1, align 4, !dbg !7207
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7208
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7208
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7208
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 0, !dbg !7208
  %rt_int = bitcast %union.rtunion_def* %arrayidx4 to i32*, !dbg !7208
  %7 = load i32, i32* %rt_int, align 8, !dbg !7208
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @rgn_print_insn.tmp, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.51, i64 0, i64 0), i32 %5, i32 %7), !dbg !7209
  br label %if.end34, !dbg !7209

if.else:                                          ; preds = %entry
  %8 = load i32, i32* @current_nr_blocks, align 4, !dbg !7210
  %cmp = icmp sgt i32 %8, 1, !dbg !7213
  br i1 %cmp, label %land.lhs.true, label %if.else28, !dbg !7214

land.lhs.true:                                    ; preds = %if.else
  %9 = load i32*, i32** @block_to_bb, align 8, !dbg !7215
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7215
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !7215
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !7215
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 3, !dbg !7215
  %rt_bb8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.basic_block_def**, !dbg !7215
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb8, align 8, !dbg !7215
  %index9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !7215
  %12 = load i32, i32* %index9, align 8, !dbg !7215
  %add10 = add nsw i32 %12, 0, !dbg !7215
  %idxprom11 = sext i32 %add10 to i64, !dbg !7215
  %arrayidx12 = getelementptr inbounds i32, i32* %9, i64 %idxprom11, !dbg !7215
  %13 = load i32, i32* %arrayidx12, align 4, !dbg !7215
  %14 = load i32, i32* @target_bb, align 4, !dbg !7216
  %cmp13 = icmp ne i32 %13, %14, !dbg !7217
  br i1 %cmp13, label %if.then14, label %if.else28, !dbg !7218

if.then14:                                        ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7219
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !7219
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !7219
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 0, !dbg !7219
  %rt_int18 = bitcast %union.rtunion_def* %arrayidx17 to i32*, !dbg !7219
  %16 = load i32, i32* %rt_int18, align 8, !dbg !7219
  %17 = load i32*, i32** @block_to_bb, align 8, !dbg !7220
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7220
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7220
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !7220
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 3, !dbg !7220
  %rt_bb22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.basic_block_def**, !dbg !7220
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb22, align 8, !dbg !7220
  %index23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 9, !dbg !7220
  %20 = load i32, i32* %index23, align 8, !dbg !7220
  %add24 = add nsw i32 %20, 0, !dbg !7220
  %idxprom25 = sext i32 %add24 to i64, !dbg !7220
  %arrayidx26 = getelementptr inbounds i32, i32* %17, i64 %idxprom25, !dbg !7220
  %21 = load i32, i32* %arrayidx26, align 4, !dbg !7220
  %call27 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @rgn_print_insn.tmp, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0), i32 %16, i32 %21), !dbg !7221
  br label %if.end, !dbg !7221

if.else28:                                        ; preds = %land.lhs.true, %if.else
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7222
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !7222
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !7222
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !7222
  %rt_int32 = bitcast %union.rtunion_def* %arrayidx31 to i32*, !dbg !7222
  %23 = load i32, i32* %rt_int32, align 8, !dbg !7222
  %call33 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @rgn_print_insn.tmp, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i64 0, i64 0), i32 %23), !dbg !7223
  br label %if.end

if.end:                                           ; preds = %if.else28, %if.then14
  br label %if.end34

if.end34:                                         ; preds = %if.end, %if.then
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @rgn_print_insn.tmp, i64 0, i64 0), !dbg !7224
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rgn_insn_finishes_block_p(%struct.rtx_def* %insn) #0 !dbg !7225 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7226, metadata !DIExpression()), !dbg !7227
  %0 = load i32*, i32** @block_to_bb, align 8, !dbg !7228
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7228
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7228
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7228
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7228
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7228
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7228
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !7228
  %3 = load i32, i32* %index, align 8, !dbg !7228
  %add = add nsw i32 %3, 0, !dbg !7228
  %idxprom = sext i32 %add to i64, !dbg !7228
  %arrayidx1 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !7228
  %4 = load i32, i32* %arrayidx1, align 4, !dbg !7228
  %5 = load i32, i32* @target_bb, align 4, !dbg !7230
  %cmp = icmp eq i32 %4, %5, !dbg !7231
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7232

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* @sched_target_n_insns, align 4, !dbg !7233
  %add2 = add nsw i32 %6, 1, !dbg !7234
  %7 = load i32, i32* @target_n_insns, align 4, !dbg !7235
  %cmp3 = icmp eq i32 %add2, %7, !dbg !7236
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7237

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !7238
  br label %return, !dbg !7238

if.end:                                           ; preds = %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !7239
  br label %return, !dbg !7239

return:                                           ; preds = %if.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !7240
  ret i8 %8, !dbg !7240
}

; Function Attrs: noinline nounwind uwtable
define internal void @rgn_add_remove_insn(%struct.rtx_def* %insn, i32 %remove_p) #0 !dbg !7241 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %remove_p.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7242, metadata !DIExpression()), !dbg !7243
  store i32 %remove_p, i32* %remove_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %remove_p.addr, metadata !7244, metadata !DIExpression()), !dbg !7245
  %0 = load i32, i32* %remove_p.addr, align 4, !dbg !7246
  %tobool = icmp ne i32 %0, 0, !dbg !7246
  br i1 %tobool, label %if.else, label %if.then, !dbg !7248

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @rgn_n_insns, align 4, !dbg !7249
  %inc = add nsw i32 %1, 1, !dbg !7249
  store i32 %inc, i32* @rgn_n_insns, align 4, !dbg !7249
  br label %if.end, !dbg !7250

if.else:                                          ; preds = %entry
  %2 = load i32, i32* @rgn_n_insns, align 4, !dbg !7251
  %dec = add nsw i32 %2, -1, !dbg !7251
  store i32 %dec, i32* @rgn_n_insns, align 4, !dbg !7251
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load i32*, i32** @block_to_bb, align 8, !dbg !7252
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7252
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7252
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7252
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7252
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7252
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7252
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 9, !dbg !7252
  %6 = load i32, i32* %index, align 8, !dbg !7252
  %add = add nsw i32 %6, 0, !dbg !7252
  %idxprom = sext i32 %add to i64, !dbg !7252
  %arrayidx1 = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !7252
  %7 = load i32, i32* %arrayidx1, align 4, !dbg !7252
  %8 = load i32, i32* @target_bb, align 4, !dbg !7254
  %cmp = icmp eq i32 %7, %8, !dbg !7255
  br i1 %cmp, label %if.then2, label %if.end9, !dbg !7256

if.then2:                                         ; preds = %if.end
  %9 = load i32, i32* %remove_p.addr, align 4, !dbg !7257
  %tobool3 = icmp ne i32 %9, 0, !dbg !7257
  br i1 %tobool3, label %if.else6, label %if.then4, !dbg !7260

if.then4:                                         ; preds = %if.then2
  %10 = load i32, i32* @target_n_insns, align 4, !dbg !7261
  %inc5 = add nsw i32 %10, 1, !dbg !7261
  store i32 %inc5, i32* @target_n_insns, align 4, !dbg !7261
  br label %if.end8, !dbg !7262

if.else6:                                         ; preds = %if.then2
  %11 = load i32, i32* @target_n_insns, align 4, !dbg !7263
  %dec7 = add nsw i32 %11, -1, !dbg !7263
  store i32 %dec7, i32* @target_n_insns, align 4, !dbg !7263
  br label %if.end8

if.end8:                                          ; preds = %if.else6, %if.then4
  br label %if.end9, !dbg !7264

if.end9:                                          ; preds = %if.end8, %if.end
  ret void, !dbg !7265
}

; Function Attrs: noinline nounwind uwtable
define internal void @begin_schedule_ready(%struct.rtx_def* %insn, %struct.rtx_def* %last) #0 !dbg !7266 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %last.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7267, metadata !DIExpression()), !dbg !7268
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last.addr, metadata !7269, metadata !DIExpression()), !dbg !7270
  %0 = load i32*, i32** @block_to_bb, align 8, !dbg !7271
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7271
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7271
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7271
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7271
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7271
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7271
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !7271
  %3 = load i32, i32* %index, align 8, !dbg !7271
  %add = add nsw i32 %3, 0, !dbg !7271
  %idxprom = sext i32 %add to i64, !dbg !7271
  %arrayidx1 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !7271
  %4 = load i32, i32* %arrayidx1, align 4, !dbg !7271
  %5 = load i32, i32* @target_bb, align 4, !dbg !7273
  %cmp = icmp ne i32 %4, %5, !dbg !7274
  br i1 %cmp, label %if.then, label %if.else, !dbg !7275

if.then:                                          ; preds = %entry
  %6 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7276
  %7 = load i32*, i32** @block_to_bb, align 8, !dbg !7276
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7276
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !7276
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7276
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 3, !dbg !7276
  %rt_bb5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.basic_block_def**, !dbg !7276
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb5, align 8, !dbg !7276
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !7276
  %10 = load i32, i32* %index6, align 8, !dbg !7276
  %add7 = add nsw i32 %10, 0, !dbg !7276
  %idxprom8 = sext i32 %add7 to i64, !dbg !7276
  %arrayidx9 = getelementptr inbounds i32, i32* %7, i64 %idxprom8, !dbg !7276
  %11 = load i32, i32* %arrayidx9, align 4, !dbg !7276
  %idxprom10 = sext i32 %11 to i64, !dbg !7276
  %arrayidx11 = getelementptr inbounds %struct.candidate, %struct.candidate* %6, i64 %idxprom10, !dbg !7276
  %is_speculative = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx11, i32 0, i32 1, !dbg !7276
  %12 = load i8, i8* %is_speculative, align 1, !dbg !7276
  %tobool = icmp ne i8 %12, 0, !dbg !7276
  br i1 %tobool, label %if.then12, label %if.end56, !dbg !7279

if.then12:                                        ; preds = %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7280
  %14 = load i32*, i32** @block_to_bb, align 8, !dbg !7280
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7280
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !7280
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !7280
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 3, !dbg !7280
  %rt_bb16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.basic_block_def**, !dbg !7280
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb16, align 8, !dbg !7280
  %index17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !7280
  %17 = load i32, i32* %index17, align 8, !dbg !7280
  %add18 = add nsw i32 %17, 0, !dbg !7280
  %idxprom19 = sext i32 %add18 to i64, !dbg !7280
  %arrayidx20 = getelementptr inbounds i32, i32* %14, i64 %idxprom19, !dbg !7280
  %18 = load i32, i32* %arrayidx20, align 4, !dbg !7280
  %call = call i32 @check_live(%struct.rtx_def* %13, i32 %18), !dbg !7280
  %tobool21 = icmp ne i32 %call, 0, !dbg !7280
  br i1 %tobool21, label %cond.false, label %cond.true, !dbg !7280

cond.true:                                        ; preds = %if.then12
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 2177, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !7280
  br label %cond.end, !dbg !7280

cond.false:                                       ; preds = %if.then12
  br label %cond.end, !dbg !7280

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7280
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7282
  %20 = load i32*, i32** @block_to_bb, align 8, !dbg !7283
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7283
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !7283
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !7283
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 3, !dbg !7283
  %rt_bb25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.basic_block_def**, !dbg !7283
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb25, align 8, !dbg !7283
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 9, !dbg !7283
  %23 = load i32, i32* %index26, align 8, !dbg !7283
  %add27 = add nsw i32 %23, 0, !dbg !7283
  %idxprom28 = sext i32 %add27 to i64, !dbg !7283
  %arrayidx29 = getelementptr inbounds i32, i32* %20, i64 %idxprom28, !dbg !7283
  %24 = load i32, i32* %arrayidx29, align 4, !dbg !7283
  call void @update_live(%struct.rtx_def* %19, i32 %24), !dbg !7284
  %25 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7285
  %tobool30 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %25, null, !dbg !7285
  br i1 %tobool30, label %cond.true31, label %cond.false32, !dbg !7285

cond.true31:                                      ; preds = %cond.end
  %26 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7285
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %26, i32 0, i32 0, !dbg !7285
  br label %cond.end33, !dbg !7285

cond.false32:                                     ; preds = %cond.end
  br label %cond.end33, !dbg !7285

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true31 ], [ null, %cond.false32 ], !dbg !7285
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7285
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !7285
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !7285
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 0, !dbg !7285
  %rt_int = bitcast %union.rtunion_def* %arrayidx37 to i32*, !dbg !7285
  %28 = load i32, i32* %rt_int, align 8, !dbg !7285
  %call38 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond34, i32 %28), !dbg !7285
  %is_load_insn = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call38, i32 0, i32 6, !dbg !7285
  %bf.load = load i8, i8* %is_load_insn, align 2, !dbg !7285
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !7285
  %bf.clear = and i8 %bf.lshr, 1, !dbg !7285
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7285
  %tobool39 = icmp ne i32 %bf.cast, 0, !dbg !7285
  br i1 %tobool39, label %if.then55, label %lor.lhs.false, !dbg !7287

lor.lhs.false:                                    ; preds = %cond.end33
  %29 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7288
  %tobool40 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %29, null, !dbg !7288
  br i1 %tobool40, label %cond.true41, label %cond.false43, !dbg !7288

cond.true41:                                      ; preds = %lor.lhs.false
  %30 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7288
  %base42 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %30, i32 0, i32 0, !dbg !7288
  br label %cond.end44, !dbg !7288

cond.false43:                                     ; preds = %lor.lhs.false
  br label %cond.end44, !dbg !7288

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.VEC_haifa_insn_data_def_base* [ %base42, %cond.true41 ], [ null, %cond.false43 ], !dbg !7288
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7288
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !7288
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !7288
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !7288
  %rt_int49 = bitcast %union.rtunion_def* %arrayidx48 to i32*, !dbg !7288
  %32 = load i32, i32* %rt_int49, align 8, !dbg !7288
  %call50 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond45, i32 %32), !dbg !7288
  %fed_by_spec_load = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call50, i32 0, i32 6, !dbg !7288
  %bf.load51 = load i8, i8* %fed_by_spec_load, align 2, !dbg !7288
  %bf.clear52 = and i8 %bf.load51, 1, !dbg !7288
  %bf.cast53 = zext i8 %bf.clear52 to i32, !dbg !7288
  %tobool54 = icmp ne i32 %bf.cast53, 0, !dbg !7288
  br i1 %tobool54, label %if.then55, label %if.end, !dbg !7289

if.then55:                                        ; preds = %cond.end44, %cond.end33
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7290
  call void @set_spec_fed(%struct.rtx_def* %33), !dbg !7291
  br label %if.end, !dbg !7291

if.end:                                           ; preds = %if.then55, %cond.end44
  %34 = load i32, i32* @nr_spec, align 4, !dbg !7292
  %inc = add nsw i32 %34, 1, !dbg !7292
  store i32 %inc, i32* @nr_spec, align 4, !dbg !7292
  br label %if.end56, !dbg !7293

if.end56:                                         ; preds = %if.end, %if.then
  %35 = load i32, i32* @nr_inter, align 4, !dbg !7294
  %inc57 = add nsw i32 %35, 1, !dbg !7294
  store i32 %inc57, i32* @nr_inter, align 4, !dbg !7294
  br label %if.end59, !dbg !7295

if.else:                                          ; preds = %entry
  %36 = load i32, i32* @sched_target_n_insns, align 4, !dbg !7296
  %inc58 = add nsw i32 %36, 1, !dbg !7296
  store i32 %inc58, i32* @sched_target_n_insns, align 4, !dbg !7296
  br label %if.end59

if.end59:                                         ; preds = %if.else, %if.end56
  %37 = load i32, i32* @sched_n_insns, align 4, !dbg !7298
  %inc60 = add nsw i32 %37, 1, !dbg !7298
  store i32 %inc60, i32* @sched_n_insns, align 4, !dbg !7298
  ret void, !dbg !7299
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @advance_target_bb(%struct.basic_block_def* %bb, %struct.rtx_def* %insn) #0 !dbg !7300 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7301, metadata !DIExpression()), !dbg !7302
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7303, metadata !DIExpression()), !dbg !7304
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7305
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !7305
  br i1 %tobool, label %if.then, label %if.end, !dbg !7307

if.then:                                          ; preds = %entry
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !7308
  br label %return, !dbg !7308

if.end:                                           ; preds = %entry
  %1 = load i32*, i32** @block_to_bb, align 8, !dbg !7309
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7309
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !7309
  %3 = load i32, i32* %index, align 8, !dbg !7309
  %idxprom = sext i32 %3 to i64, !dbg !7309
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !7309
  %4 = load i32, i32* %arrayidx, align 4, !dbg !7309
  %5 = load i32, i32* @target_bb, align 4, !dbg !7309
  %cmp = icmp eq i32 %4, %5, !dbg !7309
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !7309

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32*, i32** @block_to_bb, align 8, !dbg !7309
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7309
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 6, !dbg !7309
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !7309
  %index1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !7309
  %9 = load i32, i32* %index1, align 8, !dbg !7309
  %idxprom2 = sext i32 %9 to i64, !dbg !7309
  %arrayidx3 = getelementptr inbounds i32, i32* %6, i64 %idxprom2, !dbg !7309
  %10 = load i32, i32* %arrayidx3, align 4, !dbg !7309
  %11 = load i32, i32* @target_bb, align 4, !dbg !7309
  %cmp4 = icmp eq i32 %10, %11, !dbg !7309
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !7309

cond.true:                                        ; preds = %land.lhs.true, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 3487, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !7309
  br label %cond.end, !dbg !7309

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7309

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7309
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7310
  %next_bb5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 6, !dbg !7311
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb5, align 8, !dbg !7311
  store %struct.basic_block_def* %13, %struct.basic_block_def** %retval, align 8, !dbg !7312
  br label %return, !dbg !7312

return:                                           ; preds = %cond.end, %if.then
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !7313
  ret %struct.basic_block_def* %14, !dbg !7313
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_trg_info(i32 %trg) #0 !dbg !7314 {
entry:
  %trg.addr = alloca i32, align 4
  %sp = alloca %struct.candidate*, align 8
  %el = alloca %struct.edgelst, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %update_idx = alloca i32, align 4
  %block = alloca %struct.basic_block_def*, align 8
  %visited = alloca %struct.simple_bitmap_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tf = alloca i32, align 4
  %cf = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  store i32 %trg, i32* %trg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %trg.addr, metadata !7315, metadata !DIExpression()), !dbg !7316
  call void @llvm.dbg.declare(metadata %struct.candidate** %sp, metadata !7317, metadata !DIExpression()), !dbg !7318
  call void @llvm.dbg.declare(metadata %struct.edgelst* %el, metadata !7319, metadata !DIExpression()), !dbg !7325
  %0 = bitcast %struct.edgelst* %el to i8*, !dbg !7325
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 16, i1 false), !dbg !7325
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7326, metadata !DIExpression()), !dbg !7327
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7328, metadata !DIExpression()), !dbg !7329
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7330, metadata !DIExpression()), !dbg !7331
  call void @llvm.dbg.declare(metadata i32* %update_idx, metadata !7332, metadata !DIExpression()), !dbg !7333
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block, metadata !7334, metadata !DIExpression()), !dbg !7335
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited, metadata !7336, metadata !DIExpression()), !dbg !7337
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7338, metadata !DIExpression()), !dbg !7339
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7340, metadata !DIExpression()), !dbg !7341
  %1 = load i32, i32* @current_nr_blocks, align 4, !dbg !7342
  %conv = sext i32 %1 to i64, !dbg !7342
  %mul = mul i64 40, %conv, !dbg !7342
  %call = call i8* @xmalloc(i64 %mul), !dbg !7342
  %2 = bitcast i8* %call to %struct.candidate*, !dbg !7342
  store %struct.candidate* %2, %struct.candidate** @candidate_table, align 8, !dbg !7343
  store i32 0, i32* @bblst_last, align 4, !dbg !7344
  %3 = load i32, i32* @current_nr_blocks, align 4, !dbg !7345
  %4 = load i32, i32* @target_bb, align 4, !dbg !7346
  %sub = sub nsw i32 %3, %4, !dbg !7347
  %5 = load i32, i32* @rgn_nr_edges, align 4, !dbg !7348
  %mul1 = mul nsw i32 %sub, %5, !dbg !7349
  store i32 %mul1, i32* @bblst_size, align 4, !dbg !7350
  %6 = load i32, i32* @bblst_size, align 4, !dbg !7351
  %conv2 = sext i32 %6 to i64, !dbg !7351
  %mul3 = mul i64 8, %conv2, !dbg !7351
  %call4 = call i8* @xmalloc(i64 %mul3), !dbg !7351
  %7 = bitcast i8* %call4 to %struct.basic_block_def**, !dbg !7351
  store %struct.basic_block_def** %7, %struct.basic_block_def*** @bblst_table, align 8, !dbg !7352
  store i32 0, i32* @edgelst_last, align 4, !dbg !7353
  %8 = load i32, i32* @rgn_nr_edges, align 4, !dbg !7354
  %conv5 = sext i32 %8 to i64, !dbg !7354
  %mul6 = mul i64 8, %conv5, !dbg !7354
  %call7 = call i8* @xmalloc(i64 %mul6), !dbg !7354
  %9 = bitcast i8* %call7 to %struct.edge_def**, !dbg !7354
  store %struct.edge_def** %9, %struct.edge_def*** @edgelst_table, align 8, !dbg !7355
  %10 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7356
  %11 = load i32, i32* %trg.addr, align 4, !dbg !7357
  %idx.ext = sext i32 %11 to i64, !dbg !7358
  %add.ptr = getelementptr inbounds %struct.candidate, %struct.candidate* %10, i64 %idx.ext, !dbg !7358
  store %struct.candidate* %add.ptr, %struct.candidate** %sp, align 8, !dbg !7359
  %12 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7360
  %is_valid = getelementptr inbounds %struct.candidate, %struct.candidate* %12, i32 0, i32 0, !dbg !7361
  store i8 1, i8* %is_valid, align 8, !dbg !7362
  %13 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7363
  %is_speculative = getelementptr inbounds %struct.candidate, %struct.candidate* %13, i32 0, i32 1, !dbg !7364
  store i8 0, i8* %is_speculative, align 1, !dbg !7365
  %14 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7366
  %src_prob = getelementptr inbounds %struct.candidate, %struct.candidate* %14, i32 0, i32 2, !dbg !7367
  store i32 10000, i32* %src_prob, align 4, !dbg !7368
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7369
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !7369
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !7369
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7369
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 5, !dbg !7369
  %17 = load i32, i32* %x_last_basic_block, align 8, !dbg !7369
  %call9 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %17), !dbg !7370
  store %struct.simple_bitmap_def* %call9, %struct.simple_bitmap_def** %visited, align 8, !dbg !7371
  %18 = load i32, i32* %trg.addr, align 4, !dbg !7372
  %add = add nsw i32 %18, 1, !dbg !7374
  store i32 %add, i32* %i, align 4, !dbg !7375
  br label %for.cond, !dbg !7376

for.cond:                                         ; preds = %for.inc142, %entry
  %19 = load i32, i32* %i, align 4, !dbg !7377
  %20 = load i32, i32* @current_nr_blocks, align 4, !dbg !7379
  %cmp = icmp slt i32 %19, %20, !dbg !7380
  br i1 %cmp, label %for.body, label %for.end144, !dbg !7381

for.body:                                         ; preds = %for.cond
  %21 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7382
  %22 = load i32, i32* %i, align 4, !dbg !7384
  %idx.ext11 = sext i32 %22 to i64, !dbg !7385
  %add.ptr12 = getelementptr inbounds %struct.candidate, %struct.candidate* %21, i64 %idx.ext11, !dbg !7385
  store %struct.candidate* %add.ptr12, %struct.candidate** %sp, align 8, !dbg !7386
  %23 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @dom, align 8, !dbg !7387
  %24 = load i32, i32* %i, align 4, !dbg !7387
  %idxprom = sext i32 %24 to i64, !dbg !7387
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %23, i64 %idxprom, !dbg !7387
  %25 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx, align 8, !dbg !7387
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %25, i32 0, i32 3, !dbg !7387
  %26 = load i32, i32* %trg.addr, align 4, !dbg !7387
  %div = udiv i32 %26, 64, !dbg !7387
  %idxprom13 = zext i32 %div to i64, !dbg !7387
  %arrayidx14 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom13, !dbg !7387
  %27 = load i64, i64* %arrayidx14, align 8, !dbg !7387
  %28 = load i32, i32* %trg.addr, align 4, !dbg !7387
  %rem = urem i32 %28, 64, !dbg !7387
  %sh_prom = zext i32 %rem to i64, !dbg !7387
  %shr = lshr i64 %27, %sh_prom, !dbg !7387
  %and = and i64 %shr, 1, !dbg !7387
  %conv15 = trunc i64 %and to i8, !dbg !7387
  %29 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7388
  %is_valid16 = getelementptr inbounds %struct.candidate, %struct.candidate* %29, i32 0, i32 0, !dbg !7389
  store i8 %conv15, i8* %is_valid16, align 8, !dbg !7390
  %30 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7391
  %is_valid17 = getelementptr inbounds %struct.candidate, %struct.candidate* %30, i32 0, i32 0, !dbg !7393
  %31 = load i8, i8* %is_valid17, align 8, !dbg !7393
  %tobool = icmp ne i8 %31, 0, !dbg !7391
  br i1 %tobool, label %if.then, label %if.end, !dbg !7394

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %tf, metadata !7395, metadata !DIExpression()), !dbg !7397
  %32 = load i32*, i32** @prob, align 8, !dbg !7398
  %33 = load i32, i32* %trg.addr, align 4, !dbg !7399
  %idxprom18 = sext i32 %33 to i64, !dbg !7398
  %arrayidx19 = getelementptr inbounds i32, i32* %32, i64 %idxprom18, !dbg !7398
  %34 = load i32, i32* %arrayidx19, align 4, !dbg !7398
  store i32 %34, i32* %tf, align 4, !dbg !7397
  call void @llvm.dbg.declare(metadata i32* %cf, metadata !7400, metadata !DIExpression()), !dbg !7401
  %35 = load i32*, i32** @prob, align 8, !dbg !7402
  %36 = load i32, i32* %i, align 4, !dbg !7403
  %idxprom20 = sext i32 %36 to i64, !dbg !7402
  %arrayidx21 = getelementptr inbounds i32, i32* %35, i64 %idxprom20, !dbg !7402
  %37 = load i32, i32* %arrayidx21, align 4, !dbg !7402
  store i32 %37, i32* %cf, align 4, !dbg !7401
  %38 = load i32, i32* %tf, align 4, !dbg !7404
  %tobool22 = icmp ne i32 %38, 0, !dbg !7404
  br i1 %tobool22, label %cond.true, label %cond.false, !dbg !7404

cond.true:                                        ; preds = %if.then
  %39 = load i32, i32* %cf, align 4, !dbg !7405
  %mul23 = mul nsw i32 %39, 10000, !dbg !7406
  %40 = load i32, i32* %tf, align 4, !dbg !7407
  %div24 = sdiv i32 %mul23, %40, !dbg !7408
  br label %cond.end, !dbg !7404

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7404

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div24, %cond.true ], [ 0, %cond.false ], !dbg !7404
  %41 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7409
  %src_prob25 = getelementptr inbounds %struct.candidate, %struct.candidate* %41, i32 0, i32 2, !dbg !7410
  store i32 %cond, i32* %src_prob25, align 4, !dbg !7411
  %42 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7412
  %src_prob26 = getelementptr inbounds %struct.candidate, %struct.candidate* %42, i32 0, i32 2, !dbg !7413
  %43 = load i32, i32* %src_prob26, align 4, !dbg !7413
  %44 = load i32, i32* @min_spec_prob, align 4, !dbg !7414
  %cmp27 = icmp sge i32 %43, %44, !dbg !7415
  %conv28 = zext i1 %cmp27 to i32, !dbg !7415
  %conv29 = trunc i32 %conv28 to i8, !dbg !7416
  %45 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7417
  %is_valid30 = getelementptr inbounds %struct.candidate, %struct.candidate* %45, i32 0, i32 0, !dbg !7418
  store i8 %conv29, i8* %is_valid30, align 8, !dbg !7419
  br label %if.end, !dbg !7420

if.end:                                           ; preds = %cond.end, %for.body
  %46 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7421
  %is_valid31 = getelementptr inbounds %struct.candidate, %struct.candidate* %46, i32 0, i32 0, !dbg !7423
  %47 = load i8, i8* %is_valid31, align 8, !dbg !7423
  %tobool32 = icmp ne i8 %47, 0, !dbg !7421
  br i1 %tobool32, label %if.then33, label %if.end45, !dbg !7424

if.then33:                                        ; preds = %if.end
  %48 = load i32, i32* %i, align 4, !dbg !7425
  %49 = load i32, i32* %trg.addr, align 4, !dbg !7427
  call void @split_edges(i32 %48, i32 %49, %struct.edgelst* %el), !dbg !7428
  %nr_members = getelementptr inbounds %struct.edgelst, %struct.edgelst* %el, i32 0, i32 1, !dbg !7429
  %50 = load i32, i32* %nr_members, align 8, !dbg !7429
  %tobool34 = icmp ne i32 %50, 0, !dbg !7430
  %51 = zext i1 %tobool34 to i64, !dbg !7430
  %cond35 = select i1 %tobool34, i32 1, i32 0, !dbg !7430
  %conv36 = trunc i32 %cond35 to i8, !dbg !7430
  %52 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7431
  %is_speculative37 = getelementptr inbounds %struct.candidate, %struct.candidate* %52, i32 0, i32 1, !dbg !7432
  store i8 %conv36, i8* %is_speculative37, align 1, !dbg !7433
  %53 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7434
  %is_speculative38 = getelementptr inbounds %struct.candidate, %struct.candidate* %53, i32 0, i32 1, !dbg !7436
  %54 = load i8, i8* %is_speculative38, align 1, !dbg !7436
  %conv39 = sext i8 %54 to i32, !dbg !7434
  %tobool40 = icmp ne i32 %conv39, 0, !dbg !7434
  br i1 %tobool40, label %land.lhs.true, label %if.end44, !dbg !7437

land.lhs.true:                                    ; preds = %if.then33
  %55 = load i32, i32* @flag_schedule_speculative, align 4, !dbg !7438
  %tobool41 = icmp ne i32 %55, 0, !dbg !7438
  br i1 %tobool41, label %if.end44, label %if.then42, !dbg !7439

if.then42:                                        ; preds = %land.lhs.true
  %56 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7440
  %is_valid43 = getelementptr inbounds %struct.candidate, %struct.candidate* %56, i32 0, i32 0, !dbg !7441
  store i8 0, i8* %is_valid43, align 8, !dbg !7442
  br label %if.end44, !dbg !7440

if.end44:                                         ; preds = %if.then42, %land.lhs.true, %if.then33
  br label %if.end45, !dbg !7443

if.end45:                                         ; preds = %if.end44, %if.end
  %57 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7444
  %is_valid46 = getelementptr inbounds %struct.candidate, %struct.candidate* %57, i32 0, i32 0, !dbg !7446
  %58 = load i8, i8* %is_valid46, align 8, !dbg !7446
  %tobool47 = icmp ne i8 %58, 0, !dbg !7444
  br i1 %tobool47, label %if.then48, label %if.else, !dbg !7447

if.then48:                                        ; preds = %if.end45
  %59 = load %struct.basic_block_def**, %struct.basic_block_def*** @bblst_table, align 8, !dbg !7448
  %60 = load i32, i32* @bblst_last, align 4, !dbg !7450
  %idxprom49 = sext i32 %60 to i64, !dbg !7448
  %arrayidx50 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %59, i64 %idxprom49, !dbg !7448
  %61 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7451
  %split_bbs = getelementptr inbounds %struct.candidate, %struct.candidate* %61, i32 0, i32 3, !dbg !7452
  %first_member = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs, i32 0, i32 0, !dbg !7453
  store %struct.basic_block_def** %arrayidx50, %struct.basic_block_def*** %first_member, align 8, !dbg !7454
  %nr_members51 = getelementptr inbounds %struct.edgelst, %struct.edgelst* %el, i32 0, i32 1, !dbg !7455
  %62 = load i32, i32* %nr_members51, align 8, !dbg !7455
  %63 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7456
  %split_bbs52 = getelementptr inbounds %struct.candidate, %struct.candidate* %63, i32 0, i32 3, !dbg !7457
  %nr_members53 = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs52, i32 0, i32 1, !dbg !7458
  store i32 %62, i32* %nr_members53, align 8, !dbg !7459
  store i32 0, i32* %j, align 4, !dbg !7460
  br label %for.cond54, !dbg !7462

for.cond54:                                       ; preds = %for.inc, %if.then48
  %64 = load i32, i32* %j, align 4, !dbg !7463
  %nr_members55 = getelementptr inbounds %struct.edgelst, %struct.edgelst* %el, i32 0, i32 1, !dbg !7465
  %65 = load i32, i32* %nr_members55, align 8, !dbg !7465
  %cmp56 = icmp slt i32 %64, %65, !dbg !7466
  br i1 %cmp56, label %for.body58, label %for.end, !dbg !7467

for.body58:                                       ; preds = %for.cond54
  %first_member59 = getelementptr inbounds %struct.edgelst, %struct.edgelst* %el, i32 0, i32 0, !dbg !7468
  %66 = load %struct.edge_def**, %struct.edge_def*** %first_member59, align 8, !dbg !7468
  %67 = load i32, i32* %j, align 4, !dbg !7469
  %idxprom60 = sext i32 %67 to i64, !dbg !7470
  %arrayidx61 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %66, i64 %idxprom60, !dbg !7470
  %68 = load %struct.edge_def*, %struct.edge_def** %arrayidx61, align 8, !dbg !7470
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 1, !dbg !7471
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7471
  %70 = load %struct.basic_block_def**, %struct.basic_block_def*** @bblst_table, align 8, !dbg !7472
  %71 = load i32, i32* @bblst_last, align 4, !dbg !7473
  %idxprom62 = sext i32 %71 to i64, !dbg !7472
  %arrayidx63 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %70, i64 %idxprom62, !dbg !7472
  store %struct.basic_block_def* %69, %struct.basic_block_def** %arrayidx63, align 8, !dbg !7474
  br label %for.inc, !dbg !7472

for.inc:                                          ; preds = %for.body58
  %72 = load i32, i32* @bblst_last, align 4, !dbg !7475
  %inc = add nsw i32 %72, 1, !dbg !7475
  store i32 %inc, i32* @bblst_last, align 4, !dbg !7475
  %73 = load i32, i32* %j, align 4, !dbg !7476
  %inc64 = add nsw i32 %73, 1, !dbg !7476
  store i32 %inc64, i32* %j, align 4, !dbg !7476
  br label %for.cond54, !dbg !7477, !llvm.loop !7478

for.end:                                          ; preds = %for.cond54
  %74 = load %struct.basic_block_def**, %struct.basic_block_def*** @bblst_table, align 8, !dbg !7480
  %75 = load i32, i32* @bblst_last, align 4, !dbg !7481
  %idxprom65 = sext i32 %75 to i64, !dbg !7480
  %arrayidx66 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %74, i64 %idxprom65, !dbg !7480
  %76 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7482
  %update_bbs = getelementptr inbounds %struct.candidate, %struct.candidate* %76, i32 0, i32 4, !dbg !7483
  %first_member67 = getelementptr inbounds %struct.bblst, %struct.bblst* %update_bbs, i32 0, i32 0, !dbg !7484
  store %struct.basic_block_def** %arrayidx66, %struct.basic_block_def*** %first_member67, align 8, !dbg !7485
  store i32 0, i32* %update_idx, align 4, !dbg !7486
  %77 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !7487
  call void @sbitmap_zero(%struct.simple_bitmap_def* %77), !dbg !7488
  store i32 0, i32* %j, align 4, !dbg !7489
  br label %for.cond68, !dbg !7491

for.cond68:                                       ; preds = %for.inc124, %for.end
  %78 = load i32, i32* %j, align 4, !dbg !7492
  %nr_members69 = getelementptr inbounds %struct.edgelst, %struct.edgelst* %el, i32 0, i32 1, !dbg !7494
  %79 = load i32, i32* %nr_members69, align 8, !dbg !7494
  %cmp70 = icmp slt i32 %78, %79, !dbg !7495
  br i1 %cmp70, label %for.body72, label %for.end126, !dbg !7496

for.body72:                                       ; preds = %for.cond68
  %first_member73 = getelementptr inbounds %struct.edgelst, %struct.edgelst* %el, i32 0, i32 0, !dbg !7497
  %80 = load %struct.edge_def**, %struct.edge_def*** %first_member73, align 8, !dbg !7497
  %81 = load i32, i32* %j, align 4, !dbg !7499
  %idxprom74 = sext i32 %81 to i64, !dbg !7500
  %arrayidx75 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %80, i64 %idxprom74, !dbg !7500
  %82 = load %struct.edge_def*, %struct.edge_def** %arrayidx75, align 8, !dbg !7500
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %82, i32 0, i32 0, !dbg !7501
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7501
  store %struct.basic_block_def* %83, %struct.basic_block_def** %block, align 8, !dbg !7502
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !7503
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 1, !dbg !7503
  %call76 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !7503
  %85 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7503
  %86 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %85, i32 0, i32 0, !dbg !7503
  %87 = extractvalue { i32, %struct.VEC_edge_gc** } %call76, 0, !dbg !7503
  store i32 %87, i32* %86, align 8, !dbg !7503
  %88 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %85, i32 0, i32 1, !dbg !7503
  %89 = extractvalue { i32, %struct.VEC_edge_gc** } %call76, 1, !dbg !7503
  store %struct.VEC_edge_gc** %89, %struct.VEC_edge_gc*** %88, align 8, !dbg !7503
  %90 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7503
  %91 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7503
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 16, i1 false), !dbg !7503
  br label %for.cond77, !dbg !7503

for.cond77:                                       ; preds = %for.inc122, %for.body72
  %92 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7505
  %93 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %92, i32 0, i32 0, !dbg !7505
  %94 = load i32, i32* %93, align 8, !dbg !7505
  %95 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %92, i32 0, i32 1, !dbg !7505
  %96 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %95, align 8, !dbg !7505
  %call78 = call zeroext i8 @ei_cond(i32 %94, %struct.VEC_edge_gc** %96, %struct.edge_def** %e), !dbg !7505
  %tobool79 = icmp ne i8 %call78, 0, !dbg !7503
  br i1 %tobool79, label %for.body80, label %for.end123, !dbg !7503

for.body80:                                       ; preds = %for.cond77
  %97 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !7507
  %elms81 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %97, i32 0, i32 3, !dbg !7507
  %98 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7507
  %dest82 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %98, i32 0, i32 1, !dbg !7507
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %dest82, align 8, !dbg !7507
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %99, i32 0, i32 9, !dbg !7507
  %100 = load i32, i32* %index, align 8, !dbg !7507
  %div83 = udiv i32 %100, 64, !dbg !7507
  %idxprom84 = zext i32 %div83 to i64, !dbg !7507
  %arrayidx85 = getelementptr inbounds [1 x i64], [1 x i64]* %elms81, i64 0, i64 %idxprom84, !dbg !7507
  %101 = load i64, i64* %arrayidx85, align 8, !dbg !7507
  %102 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7507
  %dest86 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %102, i32 0, i32 1, !dbg !7507
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %dest86, align 8, !dbg !7507
  %index87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %103, i32 0, i32 9, !dbg !7507
  %104 = load i32, i32* %index87, align 8, !dbg !7507
  %rem88 = urem i32 %104, 64, !dbg !7507
  %sh_prom89 = zext i32 %rem88 to i64, !dbg !7507
  %shr90 = lshr i64 %101, %sh_prom89, !dbg !7507
  %and91 = and i64 %shr90, 1, !dbg !7507
  %tobool92 = icmp ne i64 %and91, 0, !dbg !7507
  br i1 %tobool92, label %if.end121, label %if.then93, !dbg !7510

if.then93:                                        ; preds = %for.body80
  store i32 0, i32* %k, align 4, !dbg !7511
  br label %for.cond94, !dbg !7514

for.cond94:                                       ; preds = %for.inc106, %if.then93
  %105 = load i32, i32* %k, align 4, !dbg !7515
  %nr_members95 = getelementptr inbounds %struct.edgelst, %struct.edgelst* %el, i32 0, i32 1, !dbg !7517
  %106 = load i32, i32* %nr_members95, align 8, !dbg !7517
  %cmp96 = icmp slt i32 %105, %106, !dbg !7518
  br i1 %cmp96, label %for.body98, label %for.end108, !dbg !7519

for.body98:                                       ; preds = %for.cond94
  %107 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7520
  %first_member99 = getelementptr inbounds %struct.edgelst, %struct.edgelst* %el, i32 0, i32 0, !dbg !7522
  %108 = load %struct.edge_def**, %struct.edge_def*** %first_member99, align 8, !dbg !7522
  %109 = load i32, i32* %k, align 4, !dbg !7523
  %idxprom100 = sext i32 %109 to i64, !dbg !7524
  %arrayidx101 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %108, i64 %idxprom100, !dbg !7524
  %110 = load %struct.edge_def*, %struct.edge_def** %arrayidx101, align 8, !dbg !7524
  %cmp102 = icmp eq %struct.edge_def* %107, %110, !dbg !7525
  br i1 %cmp102, label %if.then104, label %if.end105, !dbg !7526

if.then104:                                       ; preds = %for.body98
  br label %for.end108, !dbg !7527

if.end105:                                        ; preds = %for.body98
  br label %for.inc106, !dbg !7528

for.inc106:                                       ; preds = %if.end105
  %111 = load i32, i32* %k, align 4, !dbg !7529
  %inc107 = add nsw i32 %111, 1, !dbg !7529
  store i32 %inc107, i32* %k, align 4, !dbg !7529
  br label %for.cond94, !dbg !7530, !llvm.loop !7531

for.end108:                                       ; preds = %if.then104, %for.cond94
  %112 = load i32, i32* %k, align 4, !dbg !7533
  %nr_members109 = getelementptr inbounds %struct.edgelst, %struct.edgelst* %el, i32 0, i32 1, !dbg !7535
  %113 = load i32, i32* %nr_members109, align 8, !dbg !7535
  %cmp110 = icmp sge i32 %112, %113, !dbg !7536
  br i1 %cmp110, label %if.then112, label %if.end120, !dbg !7537

if.then112:                                       ; preds = %for.end108
  %114 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7538
  %dest113 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %114, i32 0, i32 1, !dbg !7540
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %dest113, align 8, !dbg !7540
  %116 = load %struct.basic_block_def**, %struct.basic_block_def*** @bblst_table, align 8, !dbg !7541
  %117 = load i32, i32* @bblst_last, align 4, !dbg !7542
  %inc114 = add nsw i32 %117, 1, !dbg !7542
  store i32 %inc114, i32* @bblst_last, align 4, !dbg !7542
  %idxprom115 = sext i32 %117 to i64, !dbg !7541
  %arrayidx116 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %116, i64 %idxprom115, !dbg !7541
  store %struct.basic_block_def* %115, %struct.basic_block_def** %arrayidx116, align 8, !dbg !7543
  %118 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !7544
  %119 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7545
  %dest117 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %119, i32 0, i32 1, !dbg !7546
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %dest117, align 8, !dbg !7546
  %index118 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %120, i32 0, i32 9, !dbg !7547
  %121 = load i32, i32* %index118, align 8, !dbg !7547
  call void @SET_BIT(%struct.simple_bitmap_def* %118, i32 %121), !dbg !7548
  %122 = load i32, i32* %update_idx, align 4, !dbg !7549
  %inc119 = add nsw i32 %122, 1, !dbg !7549
  store i32 %inc119, i32* %update_idx, align 4, !dbg !7549
  br label %if.end120, !dbg !7550

if.end120:                                        ; preds = %if.then112, %for.end108
  br label %if.end121, !dbg !7551

if.end121:                                        ; preds = %if.end120, %for.body80
  br label %for.inc122, !dbg !7552

for.inc122:                                       ; preds = %if.end121
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7505
  br label %for.cond77, !dbg !7505, !llvm.loop !7553

for.end123:                                       ; preds = %for.cond77
  br label %for.inc124, !dbg !7555

for.inc124:                                       ; preds = %for.end123
  %123 = load i32, i32* %j, align 4, !dbg !7556
  %inc125 = add nsw i32 %123, 1, !dbg !7556
  store i32 %inc125, i32* %j, align 4, !dbg !7556
  br label %for.cond68, !dbg !7557, !llvm.loop !7558

for.end126:                                       ; preds = %for.cond68
  %124 = load i32, i32* %update_idx, align 4, !dbg !7560
  %125 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7561
  %update_bbs127 = getelementptr inbounds %struct.candidate, %struct.candidate* %125, i32 0, i32 4, !dbg !7562
  %nr_members128 = getelementptr inbounds %struct.bblst, %struct.bblst* %update_bbs127, i32 0, i32 1, !dbg !7563
  store i32 %124, i32* %nr_members128, align 8, !dbg !7564
  %126 = load i32, i32* @bblst_last, align 4, !dbg !7565
  %127 = load i32, i32* @bblst_size, align 4, !dbg !7565
  %cmp129 = icmp sle i32 %126, %127, !dbg !7565
  br i1 %cmp129, label %cond.false132, label %cond.true131, !dbg !7565

cond.true131:                                     ; preds = %for.end126
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 1572, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !7565
  br label %cond.end133, !dbg !7565

cond.false132:                                    ; preds = %for.end126
  br label %cond.end133, !dbg !7565

cond.end133:                                      ; preds = %cond.false132, %cond.true131
  %cond134 = phi i32 [ 0, %cond.true131 ], [ 0, %cond.false132 ], !dbg !7565
  br label %if.end141, !dbg !7566

if.else:                                          ; preds = %if.end45
  %128 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7567
  %update_bbs135 = getelementptr inbounds %struct.candidate, %struct.candidate* %128, i32 0, i32 4, !dbg !7569
  %nr_members136 = getelementptr inbounds %struct.bblst, %struct.bblst* %update_bbs135, i32 0, i32 1, !dbg !7570
  store i32 0, i32* %nr_members136, align 8, !dbg !7571
  %129 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7572
  %split_bbs137 = getelementptr inbounds %struct.candidate, %struct.candidate* %129, i32 0, i32 3, !dbg !7573
  %nr_members138 = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs137, i32 0, i32 1, !dbg !7574
  store i32 0, i32* %nr_members138, align 8, !dbg !7575
  %130 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7576
  %is_speculative139 = getelementptr inbounds %struct.candidate, %struct.candidate* %130, i32 0, i32 1, !dbg !7577
  store i8 0, i8* %is_speculative139, align 1, !dbg !7578
  %131 = load %struct.candidate*, %struct.candidate** %sp, align 8, !dbg !7579
  %src_prob140 = getelementptr inbounds %struct.candidate, %struct.candidate* %131, i32 0, i32 2, !dbg !7580
  store i32 0, i32* %src_prob140, align 4, !dbg !7581
  br label %if.end141

if.end141:                                        ; preds = %if.else, %cond.end133
  br label %for.inc142, !dbg !7582

for.inc142:                                       ; preds = %if.end141
  %132 = load i32, i32* %i, align 4, !dbg !7583
  %inc143 = add nsw i32 %132, 1, !dbg !7583
  store i32 %inc143, i32* %i, align 4, !dbg !7583
  br label %for.cond, !dbg !7584, !llvm.loop !7585

for.end144:                                       ; preds = %for.cond
  %133 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !7587
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %133, i32 0, i32 0, !dbg !7587
  %134 = load i8*, i8** %popcount, align 8, !dbg !7587
  call void @free(i8* %134), !dbg !7587
  %135 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !7587
  %136 = bitcast %struct.simple_bitmap_def* %135 to i8*, !dbg !7587
  call void @free(i8* %136), !dbg !7587
  ret void, !dbg !7588
}

declare dso_local i32 @try_ready(%struct.rtx_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @split_edges(i32 %bb_src, i32 %bb_trg, %struct.edgelst* %bl) #0 !dbg !7589 {
entry:
  %bb_src.addr = alloca i32, align 4
  %bb_trg.addr = alloca i32, align 4
  %bl.addr = alloca %struct.edgelst*, align 8
  %src = alloca %struct.simple_bitmap_def*, align 8
  store i32 %bb_src, i32* %bb_src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_src.addr, metadata !7593, metadata !DIExpression()), !dbg !7594
  store i32 %bb_trg, i32* %bb_trg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_trg.addr, metadata !7595, metadata !DIExpression()), !dbg !7596
  store %struct.edgelst* %bl, %struct.edgelst** %bl.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edgelst** %bl.addr, metadata !7597, metadata !DIExpression()), !dbg !7598
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %src, metadata !7599, metadata !DIExpression()), !dbg !7600
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !7601
  %1 = load i32, i32* %bb_src.addr, align 4, !dbg !7602
  %idxprom = sext i32 %1 to i64, !dbg !7601
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %0, i64 %idxprom, !dbg !7601
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx, align 8, !dbg !7601
  %n_bits = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 1, !dbg !7603
  %3 = load i32, i32* %n_bits, align 8, !dbg !7603
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %3), !dbg !7604
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %src, align 8, !dbg !7600
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %src, align 8, !dbg !7605
  %5 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !7606
  %6 = load i32, i32* %bb_src.addr, align 4, !dbg !7607
  %idxprom1 = sext i32 %6 to i64, !dbg !7606
  %arrayidx2 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %5, i64 %idxprom1, !dbg !7606
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx2, align 8, !dbg !7606
  call void @sbitmap_copy(%struct.simple_bitmap_def* %4, %struct.simple_bitmap_def* %7), !dbg !7608
  %8 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %src, align 8, !dbg !7609
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %src, align 8, !dbg !7610
  %10 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @pot_split, align 8, !dbg !7611
  %11 = load i32, i32* %bb_trg.addr, align 4, !dbg !7612
  %idxprom3 = sext i32 %11 to i64, !dbg !7611
  %arrayidx4 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %10, i64 %idxprom3, !dbg !7611
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx4, align 8, !dbg !7611
  call void @sbitmap_difference(%struct.simple_bitmap_def* %8, %struct.simple_bitmap_def* %9, %struct.simple_bitmap_def* %12), !dbg !7613
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %src, align 8, !dbg !7614
  %14 = load %struct.edgelst*, %struct.edgelst** %bl.addr, align 8, !dbg !7615
  call void @extract_edgelst(%struct.simple_bitmap_def* %13, %struct.edgelst* %14), !dbg !7616
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %src, align 8, !dbg !7617
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %15, i32 0, i32 0, !dbg !7617
  %16 = load i8*, i8** %popcount, align 8, !dbg !7617
  call void @free(i8* %16), !dbg !7617
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %src, align 8, !dbg !7617
  %18 = bitcast %struct.simple_bitmap_def* %17 to i8*, !dbg !7617
  call void @free(i8* %18), !dbg !7617
  ret void, !dbg !7618
}

declare dso_local void @sbitmap_copy(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @extract_edgelst(%struct.simple_bitmap_def* %set, %struct.edgelst* %el) #0 !dbg !7619 {
entry:
  %set.addr = alloca %struct.simple_bitmap_def*, align 8
  %el.addr = alloca %struct.edgelst*, align 8
  %i = alloca i32, align 4
  %sbi = alloca %struct.sbitmap_iterator, align 8
  store %struct.simple_bitmap_def* %set, %struct.simple_bitmap_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %set.addr, metadata !7622, metadata !DIExpression()), !dbg !7623
  store %struct.edgelst* %el, %struct.edgelst** %el.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edgelst** %el.addr, metadata !7624, metadata !DIExpression()), !dbg !7625
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7626, metadata !DIExpression()), !dbg !7627
  store i32 0, i32* %i, align 4, !dbg !7627
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !7628, metadata !DIExpression()), !dbg !7639
  store i32 0, i32* @edgelst_last, align 4, !dbg !7640
  %0 = load %struct.edge_def**, %struct.edge_def*** @edgelst_table, align 8, !dbg !7641
  %1 = load i32, i32* @edgelst_last, align 4, !dbg !7642
  %idxprom = sext i32 %1 to i64, !dbg !7641
  %arrayidx = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %0, i64 %idxprom, !dbg !7641
  %2 = load %struct.edgelst*, %struct.edgelst** %el.addr, align 8, !dbg !7643
  %first_member = getelementptr inbounds %struct.edgelst, %struct.edgelst* %2, i32 0, i32 0, !dbg !7644
  store %struct.edge_def** %arrayidx, %struct.edge_def*** %first_member, align 8, !dbg !7645
  %3 = load %struct.edgelst*, %struct.edgelst** %el.addr, align 8, !dbg !7646
  %nr_members = getelementptr inbounds %struct.edgelst, %struct.edgelst* %3, i32 0, i32 1, !dbg !7647
  store i32 0, i32* %nr_members, align 8, !dbg !7648
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %set.addr, align 8, !dbg !7649
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %4, i32 0), !dbg !7649
  br label %for.cond, !dbg !7649

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %i), !dbg !7651
  %tobool = icmp ne i8 %call, 0, !dbg !7649
  br i1 %tobool, label %for.body, label %for.end, !dbg !7649

for.body:                                         ; preds = %for.cond
  %5 = load %struct.edge_def**, %struct.edge_def*** @rgn_edges, align 8, !dbg !7653
  %6 = load i32, i32* %i, align 4, !dbg !7655
  %idxprom1 = zext i32 %6 to i64, !dbg !7653
  %arrayidx2 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %5, i64 %idxprom1, !dbg !7653
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx2, align 8, !dbg !7653
  %8 = load %struct.edge_def**, %struct.edge_def*** @edgelst_table, align 8, !dbg !7656
  %9 = load i32, i32* @edgelst_last, align 4, !dbg !7657
  %inc = add nsw i32 %9, 1, !dbg !7657
  store i32 %inc, i32* @edgelst_last, align 4, !dbg !7657
  %idxprom3 = sext i32 %9 to i64, !dbg !7656
  %arrayidx4 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %8, i64 %idxprom3, !dbg !7656
  store %struct.edge_def* %7, %struct.edge_def** %arrayidx4, align 8, !dbg !7658
  %10 = load %struct.edgelst*, %struct.edgelst** %el.addr, align 8, !dbg !7659
  %nr_members5 = getelementptr inbounds %struct.edgelst, %struct.edgelst* %10, i32 0, i32 1, !dbg !7660
  %11 = load i32, i32* %nr_members5, align 8, !dbg !7661
  %inc6 = add nsw i32 %11, 1, !dbg !7661
  store i32 %inc6, i32* %nr_members5, align 8, !dbg !7661
  br label %for.inc, !dbg !7662

for.inc:                                          ; preds = %for.body
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !7651
  br label %for.cond, !dbg !7651, !llvm.loop !7663

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7665
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbitmap_iter_init(%struct.sbitmap_iterator* %i, %struct.simple_bitmap_def* %bmp, i32 %min) #0 !dbg !7666 {
entry:
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  %bmp.addr = alloca %struct.simple_bitmap_def*, align 8
  %min.addr = alloca i32, align 4
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !7673, metadata !DIExpression()), !dbg !7674
  store %struct.simple_bitmap_def* %bmp, %struct.simple_bitmap_def** %bmp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %bmp.addr, metadata !7675, metadata !DIExpression()), !dbg !7676
  store i32 %min, i32* %min.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %min.addr, metadata !7677, metadata !DIExpression()), !dbg !7678
  %0 = load i32, i32* %min.addr, align 4, !dbg !7679
  %div = udiv i32 %0, 64, !dbg !7680
  %1 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7681
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %1, i32 0, i32 2, !dbg !7682
  store i32 %div, i32* %word_num, align 4, !dbg !7683
  %2 = load i32, i32* %min.addr, align 4, !dbg !7684
  %3 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7685
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %3, i32 0, i32 3, !dbg !7686
  store i32 %2, i32* %bit_num, align 8, !dbg !7687
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %bmp.addr, align 8, !dbg !7688
  %size = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %4, i32 0, i32 2, !dbg !7689
  %5 = load i32, i32* %size, align 4, !dbg !7689
  %6 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7690
  %size1 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %6, i32 0, i32 1, !dbg !7691
  store i32 %5, i32* %size1, align 8, !dbg !7692
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %bmp.addr, align 8, !dbg !7693
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 3, !dbg !7694
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 0, !dbg !7693
  %8 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7695
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %8, i32 0, i32 0, !dbg !7696
  store i64* %arraydecay, i64** %ptr, align 8, !dbg !7697
  %9 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7698
  %word_num2 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %9, i32 0, i32 2, !dbg !7700
  %10 = load i32, i32* %word_num2, align 4, !dbg !7700
  %11 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7701
  %size3 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %11, i32 0, i32 1, !dbg !7702
  %12 = load i32, i32* %size3, align 8, !dbg !7702
  %cmp = icmp uge i32 %10, %12, !dbg !7703
  br i1 %cmp, label %if.then, label %if.else, !dbg !7704

if.then:                                          ; preds = %entry
  %13 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7705
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %13, i32 0, i32 4, !dbg !7706
  store i64 0, i64* %word, align 8, !dbg !7707
  br label %if.end, !dbg !7705

if.else:                                          ; preds = %entry
  %14 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7708
  %ptr4 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %14, i32 0, i32 0, !dbg !7709
  %15 = load i64*, i64** %ptr4, align 8, !dbg !7709
  %16 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7710
  %word_num5 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %16, i32 0, i32 2, !dbg !7711
  %17 = load i32, i32* %word_num5, align 4, !dbg !7711
  %idxprom = zext i32 %17 to i64, !dbg !7708
  %arrayidx = getelementptr inbounds i64, i64* %15, i64 %idxprom, !dbg !7708
  %18 = load i64, i64* %arrayidx, align 8, !dbg !7708
  %19 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7712
  %bit_num6 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %19, i32 0, i32 3, !dbg !7713
  %20 = load i32, i32* %bit_num6, align 8, !dbg !7713
  %rem = urem i32 %20, 64, !dbg !7714
  %sh_prom = zext i32 %rem to i64, !dbg !7715
  %shr = lshr i64 %18, %sh_prom, !dbg !7715
  %21 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7716
  %word7 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %21, i32 0, i32 4, !dbg !7717
  store i64 %shr, i64* %word7, align 8, !dbg !7718
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7719
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %i, i32* %n) #0 !dbg !7720 {
entry:
  %retval = alloca i8, align 1
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  %n.addr = alloca i32*, align 8
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !7723, metadata !DIExpression()), !dbg !7724
  store i32* %n, i32** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !7725, metadata !DIExpression()), !dbg !7726
  br label %for.cond, !dbg !7727

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7728
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %0, i32 0, i32 4, !dbg !7731
  %1 = load i64, i64* %word, align 8, !dbg !7731
  %cmp = icmp eq i64 %1, 0, !dbg !7732
  br i1 %cmp, label %for.body, label %for.end, !dbg !7733

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7734
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %2, i32 0, i32 2, !dbg !7736
  %3 = load i32, i32* %word_num, align 4, !dbg !7737
  %inc = add i32 %3, 1, !dbg !7737
  store i32 %inc, i32* %word_num, align 4, !dbg !7737
  %4 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7738
  %word_num1 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %4, i32 0, i32 2, !dbg !7740
  %5 = load i32, i32* %word_num1, align 4, !dbg !7740
  %6 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7741
  %size = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %6, i32 0, i32 1, !dbg !7742
  %7 = load i32, i32* %size, align 8, !dbg !7742
  %cmp2 = icmp uge i32 %5, %7, !dbg !7743
  br i1 %cmp2, label %if.then, label %if.end, !dbg !7744

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !7745
  br label %return, !dbg !7745

if.end:                                           ; preds = %for.body
  %8 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7746
  %word_num3 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %8, i32 0, i32 2, !dbg !7747
  %9 = load i32, i32* %word_num3, align 4, !dbg !7747
  %mul = mul i32 %9, 64, !dbg !7748
  %10 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7749
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %10, i32 0, i32 3, !dbg !7750
  store i32 %mul, i32* %bit_num, align 8, !dbg !7751
  br label %for.inc, !dbg !7752

for.inc:                                          ; preds = %if.end
  %11 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7753
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %11, i32 0, i32 0, !dbg !7754
  %12 = load i64*, i64** %ptr, align 8, !dbg !7754
  %13 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7755
  %word_num4 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %13, i32 0, i32 2, !dbg !7756
  %14 = load i32, i32* %word_num4, align 4, !dbg !7756
  %idxprom = zext i32 %14 to i64, !dbg !7753
  %arrayidx = getelementptr inbounds i64, i64* %12, i64 %idxprom, !dbg !7753
  %15 = load i64, i64* %arrayidx, align 8, !dbg !7753
  %16 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7757
  %word5 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %16, i32 0, i32 4, !dbg !7758
  store i64 %15, i64* %word5, align 8, !dbg !7759
  br label %for.cond, !dbg !7760, !llvm.loop !7761

for.end:                                          ; preds = %for.cond
  br label %for.cond6, !dbg !7763

for.cond6:                                        ; preds = %for.inc12, %for.end
  %17 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7764
  %word7 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %17, i32 0, i32 4, !dbg !7767
  %18 = load i64, i64* %word7, align 8, !dbg !7767
  %and = and i64 %18, 1, !dbg !7768
  %cmp8 = icmp eq i64 %and, 0, !dbg !7769
  br i1 %cmp8, label %for.body9, label %for.end14, !dbg !7770

for.body9:                                        ; preds = %for.cond6
  %19 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7771
  %bit_num10 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %19, i32 0, i32 3, !dbg !7772
  %20 = load i32, i32* %bit_num10, align 8, !dbg !7773
  %inc11 = add i32 %20, 1, !dbg !7773
  store i32 %inc11, i32* %bit_num10, align 8, !dbg !7773
  br label %for.inc12, !dbg !7771

for.inc12:                                        ; preds = %for.body9
  %21 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7774
  %word13 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %21, i32 0, i32 4, !dbg !7775
  %22 = load i64, i64* %word13, align 8, !dbg !7776
  %shr = lshr i64 %22, 1, !dbg !7776
  store i64 %shr, i64* %word13, align 8, !dbg !7776
  br label %for.cond6, !dbg !7777, !llvm.loop !7778

for.end14:                                        ; preds = %for.cond6
  %23 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7780
  %bit_num15 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %23, i32 0, i32 3, !dbg !7781
  %24 = load i32, i32* %bit_num15, align 8, !dbg !7781
  %25 = load i32*, i32** %n.addr, align 8, !dbg !7782
  store i32 %24, i32* %25, align 4, !dbg !7783
  store i8 1, i8* %retval, align 1, !dbg !7784
  br label %return, !dbg !7784

return:                                           ; preds = %for.end14, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !7785
  ret i8 %26, !dbg !7785
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbitmap_iter_next(%struct.sbitmap_iterator* %i) #0 !dbg !7786 {
entry:
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !7789, metadata !DIExpression()), !dbg !7790
  %0 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7791
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %0, i32 0, i32 4, !dbg !7792
  %1 = load i64, i64* %word, align 8, !dbg !7793
  %shr = lshr i64 %1, 1, !dbg !7793
  store i64 %shr, i64* %word, align 8, !dbg !7793
  %2 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !7794
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %2, i32 0, i32 3, !dbg !7795
  %3 = load i32, i32* %bit_num, align 8, !dbg !7796
  %inc = add i32 %3, 1, !dbg !7796
  store i32 %inc, i32* %bit_num, align 8, !dbg !7796
  ret void, !dbg !7797
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_live(%struct.rtx_def* %insn, i32 %src) #0 !dbg !7798 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %src.addr = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7801, metadata !DIExpression()), !dbg !7802
  store i32 %src, i32* %src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src.addr, metadata !7803, metadata !DIExpression()), !dbg !7804
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7805
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7805
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7805
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7805
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7805
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7805
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !7805
  %bf.load = load i32, i32* %2, align 8, !dbg !7805
  %bf.clear = and i32 %bf.load, 65535, !dbg !7805
  %cmp = icmp eq i32 %bf.clear, 23, !dbg !7807
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7808

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7809
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7809
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7809
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !7809
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7809
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !7809
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7809
  %bf.load5 = load i32, i32* %5, align 8, !dbg !7809
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !7809
  %cmp7 = icmp eq i32 %bf.clear6, 25, !dbg !7810
  br i1 %cmp7, label %if.then, label %if.else, !dbg !7811

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load i32, i32* %src.addr, align 4, !dbg !7812
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7813
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !7813
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7813
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 5, !dbg !7813
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !7813
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx11, align 8, !dbg !7813
  %call = call i32 @check_live_1(i32 %6, %struct.rtx_def* %8), !dbg !7814
  store i32 %call, i32* %retval, align 4, !dbg !7815
  br label %return, !dbg !7815

if.else:                                          ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7816
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7816
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !7816
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 5, !dbg !7816
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !7816
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !7816
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7816
  %bf.load16 = load i32, i32* %11, align 8, !dbg !7816
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !7816
  %cmp18 = icmp eq i32 %bf.clear17, 15, !dbg !7818
  br i1 %cmp18, label %if.then19, label %if.end68, !dbg !7819

if.then19:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7820, metadata !DIExpression()), !dbg !7822
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7823
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !7823
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !7823
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !7823
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !7823
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !7823
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !7823
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !7823
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !7823
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtvec_def**, !dbg !7823
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7823
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 0, !dbg !7823
  %15 = load i32, i32* %num_elem, align 8, !dbg !7823
  %sub = sub nsw i32 %15, 1, !dbg !7825
  store i32 %sub, i32* %j, align 4, !dbg !7826
  br label %for.cond, !dbg !7827

for.cond:                                         ; preds = %for.inc, %if.then19
  %16 = load i32, i32* %j, align 4, !dbg !7828
  %cmp27 = icmp sge i32 %16, 0, !dbg !7830
  br i1 %cmp27, label %for.body, label %for.end, !dbg !7831

for.body:                                         ; preds = %for.cond
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7832
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7832
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !7832
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 5, !dbg !7832
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !7832
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !7832
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7832
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !7832
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !7832
  %rt_rtvec35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtvec_def**, !dbg !7832
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec35, align 8, !dbg !7832
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 1, !dbg !7832
  %20 = load i32, i32* %j, align 4, !dbg !7832
  %idxprom = sext i32 %20 to i64, !dbg !7832
  %arrayidx36 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !7832
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx36, align 8, !dbg !7832
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !7832
  %bf.load37 = load i32, i32* %22, align 8, !dbg !7832
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !7832
  %cmp39 = icmp eq i32 %bf.clear38, 23, !dbg !7834
  br i1 %cmp39, label %land.lhs.true, label %lor.lhs.false40, !dbg !7835

lor.lhs.false40:                                  ; preds = %for.body
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7836
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7836
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !7836
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 5, !dbg !7836
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !7836
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !7836
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7836
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !7836
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 0, !dbg !7836
  %rt_rtvec48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtvec_def**, !dbg !7836
  %25 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec48, align 8, !dbg !7836
  %elem49 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %25, i32 0, i32 1, !dbg !7836
  %26 = load i32, i32* %j, align 4, !dbg !7836
  %idxprom50 = sext i32 %26 to i64, !dbg !7836
  %arrayidx51 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem49, i64 0, i64 %idxprom50, !dbg !7836
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx51, align 8, !dbg !7836
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !7836
  %bf.load52 = load i32, i32* %28, align 8, !dbg !7836
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !7836
  %cmp54 = icmp eq i32 %bf.clear53, 25, !dbg !7837
  br i1 %cmp54, label %land.lhs.true, label %if.end, !dbg !7838

land.lhs.true:                                    ; preds = %lor.lhs.false40, %for.body
  %29 = load i32, i32* %src.addr, align 4, !dbg !7839
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7840
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !7840
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !7840
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 5, !dbg !7840
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !7840
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !7840
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !7840
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !7840
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 0, !dbg !7840
  %rt_rtvec62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtvec_def**, !dbg !7840
  %32 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec62, align 8, !dbg !7840
  %elem63 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %32, i32 0, i32 1, !dbg !7840
  %33 = load i32, i32* %j, align 4, !dbg !7840
  %idxprom64 = sext i32 %33 to i64, !dbg !7840
  %arrayidx65 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem63, i64 0, i64 %idxprom64, !dbg !7840
  %34 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx65, align 8, !dbg !7840
  %call66 = call i32 @check_live_1(i32 %29, %struct.rtx_def* %34), !dbg !7841
  %tobool = icmp ne i32 %call66, 0, !dbg !7841
  br i1 %tobool, label %if.end, label %if.then67, !dbg !7842

if.then67:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !7843
  br label %return, !dbg !7843

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false40
  br label %for.inc, !dbg !7844

for.inc:                                          ; preds = %if.end
  %35 = load i32, i32* %j, align 4, !dbg !7845
  %dec = add nsw i32 %35, -1, !dbg !7845
  store i32 %dec, i32* %j, align 4, !dbg !7845
  br label %for.cond, !dbg !7846, !llvm.loop !7847

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !7849
  br label %return, !dbg !7849

if.end68:                                         ; preds = %if.else
  br label %if.end69

if.end69:                                         ; preds = %if.end68
  store i32 1, i32* %retval, align 4, !dbg !7850
  br label %return, !dbg !7850

return:                                           ; preds = %if.end69, %for.end, %if.then67, %if.then
  %36 = load i32, i32* %retval, align 4, !dbg !7851
  ret i32 %36, !dbg !7851
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_live_1(i32 %src, %struct.rtx_def* %x) #0 !dbg !7852 {
entry:
  %retval = alloca i32, align 4
  %src.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %regno = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %i16 = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca %struct.basic_block_def*, align 8
  %t = alloca i32, align 4
  %b117 = alloca %struct.basic_block_def*, align 8
  %t124 = alloca i32, align 4
  store i32 %src, i32* %src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src.addr, metadata !7855, metadata !DIExpression()), !dbg !7856
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7857, metadata !DIExpression()), !dbg !7858
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7859, metadata !DIExpression()), !dbg !7860
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !7861, metadata !DIExpression()), !dbg !7862
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !7863, metadata !DIExpression()), !dbg !7864
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7865
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7865
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7865
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7865
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7865
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7865
  store %struct.rtx_def* %1, %struct.rtx_def** %reg, align 8, !dbg !7864
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7866
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !7868
  br i1 %cmp, label %if.then, label %if.end, !dbg !7869

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !7870
  br label %return, !dbg !7870

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !7871

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7872
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !7872
  %bf.load = load i32, i32* %4, align 8, !dbg !7872
  %bf.clear = and i32 %bf.load, 65535, !dbg !7872
  %cmp1 = icmp eq i32 %bf.clear, 39, !dbg !7873
  br i1 %cmp1, label %lor.end, label %lor.lhs.false, !dbg !7874

lor.lhs.false:                                    ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7875
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !7875
  %bf.load2 = load i32, i32* %6, align 8, !dbg !7875
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !7875
  %cmp4 = icmp eq i32 %bf.clear3, 120, !dbg !7876
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !7877

lor.rhs:                                          ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7878
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !7878
  %bf.load5 = load i32, i32* %8, align 8, !dbg !7878
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !7878
  %cmp7 = icmp eq i32 %bf.clear6, 40, !dbg !7879
  br label %lor.end, !dbg !7877

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp7, %lor.rhs ]
  br i1 %9, label %while.body, label %while.end, !dbg !7871

while.body:                                       ; preds = %lor.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7880
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !7880
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7880
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !7880
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !7880
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx11, align 8, !dbg !7880
  store %struct.rtx_def* %11, %struct.rtx_def** %reg, align 8, !dbg !7881
  br label %while.cond, !dbg !7871, !llvm.loop !7882

while.end:                                        ; preds = %lor.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7883
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !7883
  %bf.load12 = load i32, i32* %13, align 8, !dbg !7883
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !7883
  %cmp14 = icmp eq i32 %bf.clear13, 15, !dbg !7885
  br i1 %cmp14, label %if.then15, label %if.end46, !dbg !7886

if.then15:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata i32* %i16, metadata !7887, metadata !DIExpression()), !dbg !7889
  %14 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7890
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !7890
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !7890
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 0, !dbg !7890
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtvec_def**, !dbg !7890
  %15 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7890
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %15, i32 0, i32 0, !dbg !7890
  %16 = load i32, i32* %num_elem, align 8, !dbg !7890
  %sub = sub nsw i32 %16, 1, !dbg !7892
  store i32 %sub, i32* %i16, align 4, !dbg !7893
  br label %for.cond, !dbg !7894

for.cond:                                         ; preds = %for.inc, %if.then15
  %17 = load i32, i32* %i16, align 4, !dbg !7895
  %cmp20 = icmp sge i32 %17, 0, !dbg !7897
  br i1 %cmp20, label %for.body, label %for.end, !dbg !7898

for.body:                                         ; preds = %for.cond
  %18 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7899
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7899
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !7899
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 0, !dbg !7899
  %rt_rtvec24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtvec_def**, !dbg !7899
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec24, align 8, !dbg !7899
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 1, !dbg !7899
  %20 = load i32, i32* %i16, align 4, !dbg !7899
  %idxprom = sext i32 %20 to i64, !dbg !7899
  %arrayidx25 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !7899
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8, !dbg !7899
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !7899
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !7899
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 0, !dbg !7899
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !7899
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx29, align 8, !dbg !7899
  %cmp30 = icmp ne %struct.rtx_def* %22, null, !dbg !7901
  br i1 %cmp30, label %if.then31, label %if.end45, !dbg !7902

if.then31:                                        ; preds = %for.body
  %23 = load i32, i32* %src.addr, align 4, !dbg !7903
  %24 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7905
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7905
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !7905
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !7905
  %rt_rtvec35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtvec_def**, !dbg !7905
  %25 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec35, align 8, !dbg !7905
  %elem36 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %25, i32 0, i32 1, !dbg !7905
  %26 = load i32, i32* %i16, align 4, !dbg !7905
  %idxprom37 = sext i32 %26 to i64, !dbg !7905
  %arrayidx38 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem36, i64 0, i64 %idxprom37, !dbg !7905
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8, !dbg !7905
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !7905
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !7905
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 0, !dbg !7905
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !7905
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !7905
  %call = call i32 @check_live_1(i32 %23, %struct.rtx_def* %28), !dbg !7906
  %tobool = icmp ne i32 %call, 0, !dbg !7906
  br i1 %tobool, label %if.then43, label %if.end44, !dbg !7907

if.then43:                                        ; preds = %if.then31
  store i32 1, i32* %retval, align 4, !dbg !7908
  br label %return, !dbg !7908

if.end44:                                         ; preds = %if.then31
  br label %if.end45, !dbg !7909

if.end45:                                         ; preds = %if.end44, %for.body
  br label %for.inc, !dbg !7910

for.inc:                                          ; preds = %if.end45
  %29 = load i32, i32* %i16, align 4, !dbg !7911
  %dec = add nsw i32 %29, -1, !dbg !7911
  store i32 %dec, i32* %i16, align 4, !dbg !7911
  br label %for.cond, !dbg !7912, !llvm.loop !7913

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7915
  br label %return, !dbg !7915

if.end46:                                         ; preds = %while.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7916
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !7916
  %bf.load47 = load i32, i32* %31, align 8, !dbg !7916
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !7916
  %cmp49 = icmp eq i32 %bf.clear48, 37, !dbg !7916
  br i1 %cmp49, label %if.end51, label %if.then50, !dbg !7918

if.then50:                                        ; preds = %if.end46
  store i32 1, i32* %retval, align 4, !dbg !7919
  br label %return, !dbg !7919

if.end51:                                         ; preds = %if.end46
  %32 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7920
  %call52 = call i32 @rhs_regno(%struct.rtx_def* %32), !dbg !7920
  store i32 %call52, i32* %regno, align 4, !dbg !7921
  %33 = load i32, i32* %regno, align 4, !dbg !7922
  %cmp53 = icmp slt i32 %33, 53, !dbg !7924
  br i1 %cmp53, label %land.lhs.true, label %if.else, !dbg !7925

land.lhs.true:                                    ; preds = %if.end51
  %34 = load i32, i32* %regno, align 4, !dbg !7926
  %idxprom54 = sext i32 %34 to i64, !dbg !7927
  %arrayidx55 = getelementptr inbounds [53 x i8], [53 x i8]* @global_regs, i64 0, i64 %idxprom54, !dbg !7927
  %35 = load i8, i8* %arrayidx55, align 1, !dbg !7927
  %conv = sext i8 %35 to i32, !dbg !7927
  %tobool56 = icmp ne i32 %conv, 0, !dbg !7927
  br i1 %tobool56, label %if.then57, label %if.else, !dbg !7928

if.then57:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !7929
  br label %return, !dbg !7929

if.else:                                          ; preds = %land.lhs.true, %if.end51
  %36 = load i32, i32* %regno, align 4, !dbg !7931
  %cmp58 = icmp slt i32 %36, 53, !dbg !7934
  br i1 %cmp58, label %if.then60, label %if.else108, !dbg !7935

if.then60:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7936, metadata !DIExpression()), !dbg !7938
  %37 = load i32, i32* %regno, align 4, !dbg !7939
  %idxprom61 = sext i32 %37 to i64, !dbg !7940
  %arrayidx62 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom61, !dbg !7940
  %38 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7941
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !7941
  %bf.load63 = load i32, i32* %39, align 8, !dbg !7941
  %bf.lshr = lshr i32 %bf.load63, 16, !dbg !7941
  %bf.clear64 = and i32 %bf.lshr, 255, !dbg !7941
  %idxprom65 = zext i32 %bf.clear64 to i64, !dbg !7940
  %arrayidx66 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx62, i64 0, i64 %idxprom65, !dbg !7940
  %40 = load i8, i8* %arrayidx66, align 1, !dbg !7940
  %conv67 = zext i8 %40 to i32, !dbg !7940
  store i32 %conv67, i32* %j, align 4, !dbg !7938
  br label %while.cond68, !dbg !7942

while.cond68:                                     ; preds = %for.end106, %if.then60
  %41 = load i32, i32* %j, align 4, !dbg !7943
  %dec69 = add nsw i32 %41, -1, !dbg !7943
  store i32 %dec69, i32* %j, align 4, !dbg !7943
  %cmp70 = icmp sge i32 %dec69, 0, !dbg !7944
  br i1 %cmp70, label %while.body72, label %while.end107, !dbg !7942

while.body72:                                     ; preds = %while.cond68
  store i32 0, i32* %i, align 4, !dbg !7945
  br label %for.cond73, !dbg !7948

for.cond73:                                       ; preds = %for.inc105, %while.body72
  %42 = load i32, i32* %i, align 4, !dbg !7949
  %43 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7951
  %44 = load i32, i32* %src.addr, align 4, !dbg !7952
  %idxprom74 = sext i32 %44 to i64, !dbg !7951
  %arrayidx75 = getelementptr inbounds %struct.candidate, %struct.candidate* %43, i64 %idxprom74, !dbg !7951
  %split_bbs = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx75, i32 0, i32 3, !dbg !7953
  %nr_members = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs, i32 0, i32 1, !dbg !7954
  %45 = load i32, i32* %nr_members, align 8, !dbg !7954
  %cmp76 = icmp slt i32 %42, %45, !dbg !7955
  br i1 %cmp76, label %for.body78, label %for.end106, !dbg !7956

for.body78:                                       ; preds = %for.cond73
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !7957, metadata !DIExpression()), !dbg !7959
  %46 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7960
  %47 = load i32, i32* %src.addr, align 4, !dbg !7961
  %idxprom79 = sext i32 %47 to i64, !dbg !7960
  %arrayidx80 = getelementptr inbounds %struct.candidate, %struct.candidate* %46, i64 %idxprom79, !dbg !7960
  %split_bbs81 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx80, i32 0, i32 3, !dbg !7962
  %first_member = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs81, i32 0, i32 0, !dbg !7963
  %48 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_member, align 8, !dbg !7963
  %49 = load i32, i32* %i, align 4, !dbg !7964
  %idxprom82 = sext i32 %49 to i64, !dbg !7960
  %arrayidx83 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %48, i64 %idxprom82, !dbg !7960
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx83, align 8, !dbg !7960
  store %struct.basic_block_def* %50, %struct.basic_block_def** %b, align 8, !dbg !7959
  call void @llvm.dbg.declare(metadata i32* %t, metadata !7965, metadata !DIExpression()), !dbg !7966
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !7967
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 9, !dbg !7968
  %52 = load i32, i32* %index, align 8, !dbg !7968
  %call84 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* @not_in_df, i32 %52), !dbg !7969
  store i32 %call84, i32* %t, align 4, !dbg !7966
  %53 = load i32, i32* %t, align 4, !dbg !7970
  %tobool85 = icmp ne i32 %53, 0, !dbg !7970
  br i1 %tobool85, label %lor.lhs.false86, label %cond.false, !dbg !7970

lor.lhs.false86:                                  ; preds = %for.body78
  %54 = load i32*, i32** @containing_rgn, align 8, !dbg !7970
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !7970
  %index87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 9, !dbg !7970
  %56 = load i32, i32* %index87, align 8, !dbg !7970
  %idxprom88 = sext i32 %56 to i64, !dbg !7970
  %arrayidx89 = getelementptr inbounds i32, i32* %54, i64 %idxprom88, !dbg !7970
  %57 = load i32, i32* %arrayidx89, align 4, !dbg !7970
  %58 = load i32*, i32** @containing_rgn, align 8, !dbg !7970
  %59 = load i32*, i32** @rgn_bb_table, align 8, !dbg !7970
  %60 = load i32*, i32** @ebb_head, align 8, !dbg !7970
  %61 = load i32, i32* %src.addr, align 4, !dbg !7970
  %idxprom90 = sext i32 %61 to i64, !dbg !7970
  %arrayidx91 = getelementptr inbounds i32, i32* %60, i64 %idxprom90, !dbg !7970
  %62 = load i32, i32* %arrayidx91, align 4, !dbg !7970
  %idxprom92 = sext i32 %62 to i64, !dbg !7970
  %arrayidx93 = getelementptr inbounds i32, i32* %59, i64 %idxprom92, !dbg !7970
  %63 = load i32, i32* %arrayidx93, align 4, !dbg !7970
  %idxprom94 = sext i32 %63 to i64, !dbg !7970
  %arrayidx95 = getelementptr inbounds i32, i32* %58, i64 %idxprom94, !dbg !7970
  %64 = load i32, i32* %arrayidx95, align 4, !dbg !7970
  %cmp96 = icmp ne i32 %57, %64, !dbg !7970
  br i1 %cmp96, label %cond.false, label %cond.true, !dbg !7970

cond.true:                                        ; preds = %lor.lhs.false86
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 1705, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !7970
  br label %cond.end, !dbg !7970

cond.false:                                       ; preds = %lor.lhs.false86, %for.body78
  br label %cond.end, !dbg !7970

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7970
  %65 = load i32, i32* %t, align 4, !dbg !7971
  %tobool98 = icmp ne i32 %65, 0, !dbg !7971
  br i1 %tobool98, label %if.then103, label %lor.lhs.false99, !dbg !7973

lor.lhs.false99:                                  ; preds = %cond.end
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !7974
  %call100 = call %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def* %66), !dbg !7974
  %67 = load i32, i32* %regno, align 4, !dbg !7974
  %68 = load i32, i32* %j, align 4, !dbg !7974
  %add = add nsw i32 %67, %68, !dbg !7974
  %call101 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %call100, i32 %add), !dbg !7974
  %tobool102 = icmp ne i32 %call101, 0, !dbg !7974
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !7975

if.then103:                                       ; preds = %lor.lhs.false99, %cond.end
  store i32 0, i32* %retval, align 4, !dbg !7976
  br label %return, !dbg !7976

if.end104:                                        ; preds = %lor.lhs.false99
  br label %for.inc105, !dbg !7977

for.inc105:                                       ; preds = %if.end104
  %69 = load i32, i32* %i, align 4, !dbg !7978
  %inc = add nsw i32 %69, 1, !dbg !7978
  store i32 %inc, i32* %i, align 4, !dbg !7978
  br label %for.cond73, !dbg !7979, !llvm.loop !7980

for.end106:                                       ; preds = %for.cond73
  br label %while.cond68, !dbg !7942, !llvm.loop !7982

while.end107:                                     ; preds = %while.cond68
  br label %if.end154, !dbg !7984

if.else108:                                       ; preds = %if.else
  store i32 0, i32* %i, align 4, !dbg !7985
  br label %for.cond109, !dbg !7988

for.cond109:                                      ; preds = %for.inc151, %if.else108
  %70 = load i32, i32* %i, align 4, !dbg !7989
  %71 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !7991
  %72 = load i32, i32* %src.addr, align 4, !dbg !7992
  %idxprom110 = sext i32 %72 to i64, !dbg !7991
  %arrayidx111 = getelementptr inbounds %struct.candidate, %struct.candidate* %71, i64 %idxprom110, !dbg !7991
  %split_bbs112 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx111, i32 0, i32 3, !dbg !7993
  %nr_members113 = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs112, i32 0, i32 1, !dbg !7994
  %73 = load i32, i32* %nr_members113, align 8, !dbg !7994
  %cmp114 = icmp slt i32 %70, %73, !dbg !7995
  br i1 %cmp114, label %for.body116, label %for.end153, !dbg !7996

for.body116:                                      ; preds = %for.cond109
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b117, metadata !7997, metadata !DIExpression()), !dbg !7999
  %74 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !8000
  %75 = load i32, i32* %src.addr, align 4, !dbg !8001
  %idxprom118 = sext i32 %75 to i64, !dbg !8000
  %arrayidx119 = getelementptr inbounds %struct.candidate, %struct.candidate* %74, i64 %idxprom118, !dbg !8000
  %split_bbs120 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx119, i32 0, i32 3, !dbg !8002
  %first_member121 = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs120, i32 0, i32 0, !dbg !8003
  %76 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_member121, align 8, !dbg !8003
  %77 = load i32, i32* %i, align 4, !dbg !8004
  %idxprom122 = sext i32 %77 to i64, !dbg !8000
  %arrayidx123 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %76, i64 %idxprom122, !dbg !8000
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx123, align 8, !dbg !8000
  store %struct.basic_block_def* %78, %struct.basic_block_def** %b117, align 8, !dbg !7999
  call void @llvm.dbg.declare(metadata i32* %t124, metadata !8005, metadata !DIExpression()), !dbg !8006
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %b117, align 8, !dbg !8007
  %index125 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 9, !dbg !8008
  %80 = load i32, i32* %index125, align 8, !dbg !8008
  %call126 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* @not_in_df, i32 %80), !dbg !8009
  store i32 %call126, i32* %t124, align 4, !dbg !8006
  %81 = load i32, i32* %t124, align 4, !dbg !8010
  %tobool127 = icmp ne i32 %81, 0, !dbg !8010
  br i1 %tobool127, label %lor.lhs.false128, label %cond.false141, !dbg !8010

lor.lhs.false128:                                 ; preds = %for.body116
  %82 = load i32*, i32** @containing_rgn, align 8, !dbg !8010
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %b117, align 8, !dbg !8010
  %index129 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 9, !dbg !8010
  %84 = load i32, i32* %index129, align 8, !dbg !8010
  %idxprom130 = sext i32 %84 to i64, !dbg !8010
  %arrayidx131 = getelementptr inbounds i32, i32* %82, i64 %idxprom130, !dbg !8010
  %85 = load i32, i32* %arrayidx131, align 4, !dbg !8010
  %86 = load i32*, i32** @containing_rgn, align 8, !dbg !8010
  %87 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8010
  %88 = load i32*, i32** @ebb_head, align 8, !dbg !8010
  %89 = load i32, i32* %src.addr, align 4, !dbg !8010
  %idxprom132 = sext i32 %89 to i64, !dbg !8010
  %arrayidx133 = getelementptr inbounds i32, i32* %88, i64 %idxprom132, !dbg !8010
  %90 = load i32, i32* %arrayidx133, align 4, !dbg !8010
  %idxprom134 = sext i32 %90 to i64, !dbg !8010
  %arrayidx135 = getelementptr inbounds i32, i32* %87, i64 %idxprom134, !dbg !8010
  %91 = load i32, i32* %arrayidx135, align 4, !dbg !8010
  %idxprom136 = sext i32 %91 to i64, !dbg !8010
  %arrayidx137 = getelementptr inbounds i32, i32* %86, i64 %idxprom136, !dbg !8010
  %92 = load i32, i32* %arrayidx137, align 4, !dbg !8010
  %cmp138 = icmp ne i32 %85, %92, !dbg !8010
  br i1 %cmp138, label %cond.false141, label %cond.true140, !dbg !8010

cond.true140:                                     ; preds = %lor.lhs.false128
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 1721, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !8010
  br label %cond.end142, !dbg !8010

cond.false141:                                    ; preds = %lor.lhs.false128, %for.body116
  br label %cond.end142, !dbg !8010

cond.end142:                                      ; preds = %cond.false141, %cond.true140
  %cond143 = phi i32 [ 0, %cond.true140 ], [ 0, %cond.false141 ], !dbg !8010
  %93 = load i32, i32* %t124, align 4, !dbg !8011
  %tobool144 = icmp ne i32 %93, 0, !dbg !8011
  br i1 %tobool144, label %if.then149, label %lor.lhs.false145, !dbg !8013

lor.lhs.false145:                                 ; preds = %cond.end142
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %b117, align 8, !dbg !8014
  %call146 = call %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def* %94), !dbg !8014
  %95 = load i32, i32* %regno, align 4, !dbg !8014
  %call147 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %call146, i32 %95), !dbg !8014
  %tobool148 = icmp ne i32 %call147, 0, !dbg !8014
  br i1 %tobool148, label %if.then149, label %if.end150, !dbg !8015

if.then149:                                       ; preds = %lor.lhs.false145, %cond.end142
  store i32 0, i32* %retval, align 4, !dbg !8016
  br label %return, !dbg !8016

if.end150:                                        ; preds = %lor.lhs.false145
  br label %for.inc151, !dbg !8017

for.inc151:                                       ; preds = %if.end150
  %96 = load i32, i32* %i, align 4, !dbg !8018
  %inc152 = add nsw i32 %96, 1, !dbg !8018
  store i32 %inc152, i32* %i, align 4, !dbg !8018
  br label %for.cond109, !dbg !8019, !llvm.loop !8020

for.end153:                                       ; preds = %for.cond109
  br label %if.end154

if.end154:                                        ; preds = %for.end153, %while.end107
  br label %if.end155

if.end155:                                        ; preds = %if.end154
  store i32 1, i32* %retval, align 4, !dbg !8022
  br label %return, !dbg !8022

return:                                           ; preds = %if.end155, %if.then149, %if.then103, %if.then57, %if.then50, %for.end, %if.then43, %if.then
  %97 = load i32, i32* %retval, align 4, !dbg !8023
  ret i32 %97, !dbg !8023
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def*) #2

declare dso_local i32 @min_insn_conflict_delay(i8*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @is_exception_free(%struct.rtx_def* %insn, i32 %bb_src, i32 %bb_trg) #0 !dbg !8024 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %bb_src.addr = alloca i32, align 4
  %bb_trg.addr = alloca i32, align 4
  %insn_class = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8027, metadata !DIExpression()), !dbg !8028
  store i32 %bb_src, i32* %bb_src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_src.addr, metadata !8029, metadata !DIExpression()), !dbg !8030
  store i32 %bb_trg, i32* %bb_trg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_trg.addr, metadata !8031, metadata !DIExpression()), !dbg !8032
  call void @llvm.dbg.declare(metadata i32* %insn_class, metadata !8033, metadata !DIExpression()), !dbg !8034
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8035
  %call = call i32 @haifa_classify_insn(%struct.rtx_def* %0), !dbg !8036
  store i32 %call, i32* %insn_class, align 4, !dbg !8034
  %1 = load i32, i32* %insn_class, align 4, !dbg !8037
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 5, label %sw.bb1
  ], !dbg !8038

sw.bb:                                            ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !8039
  br label %return, !dbg !8039

sw.bb1:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8041
  br label %return, !dbg !8041

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !8042

sw.epilog:                                        ; preds = %sw.default
  %2 = load i32, i32* @flag_schedule_speculative_load, align 4, !dbg !8043
  %tobool = icmp ne i32 %2, 0, !dbg !8043
  br i1 %tobool, label %if.end, label %if.then, !dbg !8045

if.then:                                          ; preds = %sw.epilog
  store i32 0, i32* %retval, align 4, !dbg !8046
  br label %return, !dbg !8046

if.end:                                           ; preds = %sw.epilog
  %3 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8047
  %tobool2 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %3, null, !dbg !8047
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !8047

cond.true:                                        ; preds = %if.end
  %4 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8047
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %4, i32 0, i32 0, !dbg !8047
  br label %cond.end, !dbg !8047

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8047

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8047
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8047
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8047
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8047
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8047
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8047
  %6 = load i32, i32* %rt_int, align 8, !dbg !8047
  %call3 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %6), !dbg !8047
  %is_load_insn = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call3, i32 0, i32 6, !dbg !8047
  %bf.load = load i8, i8* %is_load_insn, align 2, !dbg !8048
  %bf.clear = and i8 %bf.load, -3, !dbg !8048
  %bf.set = or i8 %bf.clear, 2, !dbg !8048
  store i8 %bf.set, i8* %is_load_insn, align 2, !dbg !8048
  %7 = load i32, i32* %insn_class, align 4, !dbg !8049
  switch i32 %7, label %sw.default17 [
    i32 1, label %sw.bb4
    i32 4, label %sw.bb5
    i32 2, label %sw.bb6
    i32 3, label %sw.bb11
  ], !dbg !8050

sw.bb4:                                           ; preds = %cond.end
  store i32 1, i32* %retval, align 4, !dbg !8051
  br label %return, !dbg !8051

sw.bb5:                                           ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !8053
  br label %return, !dbg !8053

sw.bb6:                                           ; preds = %cond.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8054
  %9 = load i32, i32* %bb_src.addr, align 4, !dbg !8056
  %10 = load i32, i32* %bb_trg.addr, align 4, !dbg !8057
  %call7 = call i32 @is_pfree(%struct.rtx_def* %8, i32 %9, i32 %10), !dbg !8058
  %tobool8 = icmp ne i32 %call7, 0, !dbg !8058
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !8059

if.then9:                                         ; preds = %sw.bb6
  store i32 1, i32* %retval, align 4, !dbg !8060
  br label %return, !dbg !8060

if.end10:                                         ; preds = %sw.bb6
  br label %sw.bb11, !dbg !8061

sw.bb11:                                          ; preds = %cond.end, %if.end10
  %11 = load i32, i32* @flag_schedule_speculative_load_dangerous, align 4, !dbg !8062
  %tobool12 = icmp ne i32 %11, 0, !dbg !8062
  br i1 %tobool12, label %lor.lhs.false, label %if.then15, !dbg !8064

lor.lhs.false:                                    ; preds = %sw.bb11
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8065
  %13 = load i32, i32* %bb_src.addr, align 4, !dbg !8066
  %14 = load i32, i32* %bb_trg.addr, align 4, !dbg !8067
  %call13 = call i32 @is_prisky(%struct.rtx_def* %12, i32 %13, i32 %14), !dbg !8068
  %tobool14 = icmp ne i32 %call13, 0, !dbg !8068
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !8069

if.then15:                                        ; preds = %lor.lhs.false, %sw.bb11
  store i32 0, i32* %retval, align 4, !dbg !8070
  br label %return, !dbg !8070

if.end16:                                         ; preds = %lor.lhs.false
  br label %sw.epilog18, !dbg !8071

sw.default17:                                     ; preds = %cond.end
  br label %sw.epilog18, !dbg !8072

sw.epilog18:                                      ; preds = %sw.default17, %if.end16
  %15 = load i32, i32* @flag_schedule_speculative_load_dangerous, align 4, !dbg !8073
  store i32 %15, i32* %retval, align 4, !dbg !8074
  br label %return, !dbg !8074

return:                                           ; preds = %sw.epilog18, %if.then15, %if.then9, %sw.bb5, %sw.bb4, %if.then, %sw.bb1, %sw.bb
  %16 = load i32, i32* %retval, align 4, !dbg !8075
  ret i32 %16, !dbg !8075
}

declare dso_local i32 @set_dep_weak(i32, i32, i32) #2

declare dso_local zeroext i8 @sched_insn_is_legitimate_for_speculation_p(%struct.rtx_def*, i32) #2

declare dso_local i32 @haifa_classify_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @is_pfree(%struct.rtx_def* %load_insn, i32 %bb_src, i32 %bb_trg) #0 !dbg !8076 {
entry:
  %retval = alloca i32, align 4
  %load_insn.addr = alloca %struct.rtx_def*, align 8
  %bb_src.addr = alloca i32, align 4
  %bb_trg.addr = alloca i32, align 4
  %back_sd_it = alloca %struct._sd_iterator, align 8
  %back_dep = alloca %struct._dep*, align 8
  %candp = alloca %struct.candidate*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %insn1 = alloca %struct.rtx_def*, align 8
  %fore_sd_it = alloca %struct._sd_iterator, align 8
  %fore_dep = alloca %struct._dep*, align 8
  %tmp3 = alloca %struct._sd_iterator, align 8
  %insn2 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %load_insn, %struct.rtx_def** %load_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %load_insn.addr, metadata !8077, metadata !DIExpression()), !dbg !8078
  store i32 %bb_src, i32* %bb_src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_src.addr, metadata !8079, metadata !DIExpression()), !dbg !8080
  store i32 %bb_trg, i32* %bb_trg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_trg.addr, metadata !8081, metadata !DIExpression()), !dbg !8082
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %back_sd_it, metadata !8083, metadata !DIExpression()), !dbg !8084
  call void @llvm.dbg.declare(metadata %struct._dep** %back_dep, metadata !8085, metadata !DIExpression()), !dbg !8086
  call void @llvm.dbg.declare(metadata %struct.candidate** %candp, metadata !8087, metadata !DIExpression()), !dbg !8088
  %0 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !8089
  %1 = load i32, i32* %bb_src.addr, align 4, !dbg !8090
  %idx.ext = sext i32 %1 to i64, !dbg !8091
  %add.ptr = getelementptr inbounds %struct.candidate, %struct.candidate* %0, i64 %idx.ext, !dbg !8091
  store %struct.candidate* %add.ptr, %struct.candidate** %candp, align 8, !dbg !8088
  %2 = load %struct.candidate*, %struct.candidate** %candp, align 8, !dbg !8092
  %split_bbs = getelementptr inbounds %struct.candidate, %struct.candidate* %2, i32 0, i32 3, !dbg !8094
  %nr_members = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs, i32 0, i32 1, !dbg !8095
  %3 = load i32, i32* %nr_members, align 8, !dbg !8095
  %cmp = icmp ne i32 %3, 1, !dbg !8096
  br i1 %cmp, label %if.then, label %if.end, !dbg !8097

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8098
  br label %return, !dbg !8098

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %load_insn.addr, align 8, !dbg !8099
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %4, i32 3), !dbg !8099
  %5 = bitcast %struct._sd_iterator* %back_sd_it to i8*, !dbg !8099
  %6 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !8099
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 32, i1 false), !dbg !8099
  br label %for.cond, !dbg !8099

for.cond:                                         ; preds = %for.inc29, %if.end
  %call = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %back_sd_it, %struct._dep** %back_dep), !dbg !8101
  %tobool = icmp ne i8 %call, 0, !dbg !8099
  br i1 %tobool, label %for.body, label %for.end30, !dbg !8099

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn1, metadata !8103, metadata !DIExpression()), !dbg !8105
  %7 = load %struct._dep*, %struct._dep** %back_dep, align 8, !dbg !8106
  %pro = getelementptr inbounds %struct._dep, %struct._dep* %7, i32 0, i32 0, !dbg !8106
  %8 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !8106
  store %struct.rtx_def* %8, %struct.rtx_def** %insn1, align 8, !dbg !8105
  %9 = load %struct._dep*, %struct._dep** %back_dep, align 8, !dbg !8107
  %type = getelementptr inbounds %struct._dep, %struct._dep* %9, i32 0, i32 2, !dbg !8107
  %10 = load i32, i32* %type, align 8, !dbg !8107
  %cmp1 = icmp eq i32 %10, 0, !dbg !8109
  br i1 %cmp1, label %if.then2, label %if.end28, !dbg !8110

if.then2:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %fore_sd_it, metadata !8111, metadata !DIExpression()), !dbg !8113
  call void @llvm.dbg.declare(metadata %struct._dep** %fore_dep, metadata !8114, metadata !DIExpression()), !dbg !8115
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8116
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp3, %struct.rtx_def* %11, i32 4), !dbg !8116
  %12 = bitcast %struct._sd_iterator* %fore_sd_it to i8*, !dbg !8116
  %13 = bitcast %struct._sd_iterator* %tmp3 to i8*, !dbg !8116
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 32, i1 false), !dbg !8116
  br label %for.cond4, !dbg !8116

for.cond4:                                        ; preds = %for.inc, %if.then2
  %call5 = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %fore_sd_it, %struct._dep** %fore_dep), !dbg !8118
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8116
  br i1 %tobool6, label %for.body7, label %for.end, !dbg !8116

for.body7:                                        ; preds = %for.cond4
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn2, metadata !8120, metadata !DIExpression()), !dbg !8122
  %14 = load %struct._dep*, %struct._dep** %fore_dep, align 8, !dbg !8123
  %con = getelementptr inbounds %struct._dep, %struct._dep* %14, i32 0, i32 1, !dbg !8123
  %15 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !8123
  store %struct.rtx_def* %15, %struct.rtx_def** %insn2, align 8, !dbg !8122
  %16 = load %struct._dep*, %struct._dep** %fore_dep, align 8, !dbg !8124
  %type8 = getelementptr inbounds %struct._dep, %struct._dep* %16, i32 0, i32 2, !dbg !8124
  %17 = load i32, i32* %type8, align 8, !dbg !8124
  %cmp9 = icmp eq i32 %17, 0, !dbg !8126
  br i1 %cmp9, label %if.then10, label %if.end27, !dbg !8127

if.then10:                                        ; preds = %for.body7
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn2, align 8, !dbg !8128
  %call11 = call i32 @haifa_classify_insn(%struct.rtx_def* %18), !dbg !8131
  %cmp12 = icmp ne i32 %call11, 2, !dbg !8132
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !8133

if.then13:                                        ; preds = %if.then10
  br label %for.inc, !dbg !8134

if.end14:                                         ; preds = %if.then10
  %19 = load i32*, i32** @block_to_bb, align 8, !dbg !8135
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn2, align 8, !dbg !8135
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !8135
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8135
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8135
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8135
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8135
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !8135
  %22 = load i32, i32* %index, align 8, !dbg !8135
  %add = add nsw i32 %22, 0, !dbg !8135
  %idxprom = sext i32 %add to i64, !dbg !8135
  %arrayidx15 = getelementptr inbounds i32, i32* %19, i64 %idxprom, !dbg !8135
  %23 = load i32, i32* %arrayidx15, align 4, !dbg !8135
  %24 = load i32, i32* %bb_trg.addr, align 4, !dbg !8137
  %cmp16 = icmp eq i32 %23, %24, !dbg !8138
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !8139

if.then17:                                        ; preds = %if.end14
  store i32 1, i32* %retval, align 4, !dbg !8140
  br label %return, !dbg !8140

if.end18:                                         ; preds = %if.end14
  %25 = load %struct.candidate*, %struct.candidate** %candp, align 8, !dbg !8141
  %split_bbs19 = getelementptr inbounds %struct.candidate, %struct.candidate* %25, i32 0, i32 3, !dbg !8143
  %first_member = getelementptr inbounds %struct.bblst, %struct.bblst* %split_bbs19, i32 0, i32 0, !dbg !8144
  %26 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_member, align 8, !dbg !8144
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %26, align 8, !dbg !8145
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn2, align 8, !dbg !8146
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !8146
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !8146
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 3, !dbg !8146
  %rt_bb23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.basic_block_def**, !dbg !8146
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb23, align 8, !dbg !8146
  %cmp24 = icmp eq %struct.basic_block_def* %27, %29, !dbg !8147
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !8148

if.then25:                                        ; preds = %if.end18
  store i32 1, i32* %retval, align 4, !dbg !8149
  br label %return, !dbg !8149

if.end26:                                         ; preds = %if.end18
  br label %if.end27, !dbg !8150

if.end27:                                         ; preds = %if.end26, %for.body7
  br label %for.inc, !dbg !8151

for.inc:                                          ; preds = %if.end27, %if.then13
  call void @sd_iterator_next(%struct._sd_iterator* %fore_sd_it), !dbg !8118
  br label %for.cond4, !dbg !8118, !llvm.loop !8152

for.end:                                          ; preds = %for.cond4
  br label %if.end28, !dbg !8154

if.end28:                                         ; preds = %for.end, %for.body
  br label %for.inc29, !dbg !8155

for.inc29:                                        ; preds = %if.end28
  call void @sd_iterator_next(%struct._sd_iterator* %back_sd_it), !dbg !8101
  br label %for.cond, !dbg !8101, !llvm.loop !8156

for.end30:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !8158
  br label %return, !dbg !8158

return:                                           ; preds = %for.end30, %if.then25, %if.then17, %if.then
  %30 = load i32, i32* %retval, align 4, !dbg !8159
  ret i32 %30, !dbg !8159
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @is_prisky(%struct.rtx_def* %load_insn, i32 %bb_src, i32 %bb_trg) #0 !dbg !8160 {
entry:
  %retval = alloca i32, align 4
  %load_insn.addr = alloca %struct.rtx_def*, align 8
  %bb_src.addr = alloca i32, align 4
  %bb_trg.addr = alloca i32, align 4
  store %struct.rtx_def* %load_insn, %struct.rtx_def** %load_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %load_insn.addr, metadata !8161, metadata !DIExpression()), !dbg !8162
  store i32 %bb_src, i32* %bb_src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_src.addr, metadata !8163, metadata !DIExpression()), !dbg !8164
  store i32 %bb_trg, i32* %bb_trg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_trg.addr, metadata !8165, metadata !DIExpression()), !dbg !8166
  %0 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8167
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_heap* %0, null, !dbg !8167
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8167

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8167
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %1, i32 0, i32 0, !dbg !8167
  br label %cond.end, !dbg !8167

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8167

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8167
  %2 = load %struct.rtx_def*, %struct.rtx_def** %load_insn.addr, align 8, !dbg !8167
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !8167
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8167
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8167
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8167
  %3 = load i32, i32* %rt_int, align 8, !dbg !8167
  %call = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %3), !dbg !8167
  %fed_by_spec_load = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call, i32 0, i32 6, !dbg !8167
  %bf.load = load i8, i8* %fed_by_spec_load, align 2, !dbg !8167
  %bf.clear = and i8 %bf.load, 1, !dbg !8167
  %bf.cast = zext i8 %bf.clear to i32, !dbg !8167
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !8167
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8169

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %retval, align 4, !dbg !8170
  br label %return, !dbg !8170

if.end:                                           ; preds = %cond.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %load_insn.addr, align 8, !dbg !8171
  %call2 = call zeroext i8 @sd_lists_empty_p(%struct.rtx_def* %4, i32 3), !dbg !8173
  %tobool3 = icmp ne i8 %call2, 0, !dbg !8173
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !8174

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !8175
  br label %return, !dbg !8175

if.end5:                                          ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %load_insn.addr, align 8, !dbg !8176
  %6 = load i32, i32* %bb_src.addr, align 4, !dbg !8178
  %7 = load i32, i32* %bb_trg.addr, align 4, !dbg !8179
  %call6 = call i32 @is_conditionally_protected(%struct.rtx_def* %5, i32 %6, i32 %7), !dbg !8180
  %tobool7 = icmp ne i32 %call6, 0, !dbg !8180
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !8181

if.then8:                                         ; preds = %if.end5
  store i32 1, i32* %retval, align 4, !dbg !8182
  br label %return, !dbg !8182

if.end9:                                          ; preds = %if.end5
  store i32 0, i32* %retval, align 4, !dbg !8183
  br label %return, !dbg !8183

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !8184
  ret i32 %8, !dbg !8184
}

declare dso_local zeroext i8 @sd_lists_empty_p(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @is_conditionally_protected(%struct.rtx_def* %load_insn, i32 %bb_src, i32 %bb_trg) #0 !dbg !8185 {
entry:
  %retval = alloca i32, align 4
  %load_insn.addr = alloca %struct.rtx_def*, align 8
  %bb_src.addr = alloca i32, align 4
  %bb_trg.addr = alloca i32, align 4
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %insn1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %load_insn, %struct.rtx_def** %load_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %load_insn.addr, metadata !8186, metadata !DIExpression()), !dbg !8187
  store i32 %bb_src, i32* %bb_src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_src.addr, metadata !8188, metadata !DIExpression()), !dbg !8189
  store i32 %bb_trg, i32* %bb_trg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb_trg.addr, metadata !8190, metadata !DIExpression()), !dbg !8191
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !8192, metadata !DIExpression()), !dbg !8193
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !8194, metadata !DIExpression()), !dbg !8195
  %0 = load %struct.rtx_def*, %struct.rtx_def** %load_insn.addr, align 8, !dbg !8196
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %0, i32 3), !dbg !8196
  %1 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !8196
  %2 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !8196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 32, i1 false), !dbg !8196
  br label %for.cond, !dbg !8196

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !8198
  %tobool = icmp ne i8 %call, 0, !dbg !8196
  br i1 %tobool, label %for.body, label %for.end, !dbg !8196

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn1, metadata !8200, metadata !DIExpression()), !dbg !8202
  %3 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !8203
  %pro = getelementptr inbounds %struct._dep, %struct._dep* %3, i32 0, i32 0, !dbg !8203
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pro, align 8, !dbg !8203
  store %struct.rtx_def* %4, %struct.rtx_def** %insn1, align 8, !dbg !8202
  %5 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !8204
  %type = getelementptr inbounds %struct._dep, %struct._dep* %5, i32 0, i32 2, !dbg !8204
  %6 = load i32, i32* %type, align 8, !dbg !8204
  %cmp = icmp ne i32 %6, 0, !dbg !8206
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8207

lor.lhs.false:                                    ; preds = %for.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8208
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8208
  %bf.load = load i32, i32* %8, align 8, !dbg !8208
  %bf.clear = and i32 %bf.load, 65535, !dbg !8208
  %cmp1 = icmp eq i32 %bf.clear, 9, !dbg !8208
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8209

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc, !dbg !8210

if.end:                                           ; preds = %lor.lhs.false
  %9 = load i32*, i32** @block_to_bb, align 8, !dbg !8211
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8211
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8211
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8211
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8211
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8211
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8211
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !8211
  %12 = load i32, i32* %index, align 8, !dbg !8211
  %add = add nsw i32 %12, 0, !dbg !8211
  %idxprom = sext i32 %add to i64, !dbg !8211
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !8211
  %13 = load i32, i32* %arrayidx2, align 4, !dbg !8211
  %14 = load i32, i32* %bb_src.addr, align 4, !dbg !8213
  %cmp3 = icmp eq i32 %13, %14, !dbg !8214
  br i1 %cmp3, label %if.then164, label %lor.lhs.false4, !dbg !8215

lor.lhs.false4:                                   ; preds = %if.end
  %15 = load i32*, i32** @containing_rgn, align 8, !dbg !8216
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8216
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !8216
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !8216
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 3, !dbg !8216
  %rt_bb8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.basic_block_def**, !dbg !8216
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb8, align 8, !dbg !8216
  %index9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !8216
  %18 = load i32, i32* %index9, align 8, !dbg !8216
  %add10 = add nsw i32 %18, 0, !dbg !8216
  %idxprom11 = sext i32 %add10 to i64, !dbg !8216
  %arrayidx12 = getelementptr inbounds i32, i32* %15, i64 %idxprom11, !dbg !8216
  %19 = load i32, i32* %arrayidx12, align 4, !dbg !8216
  %20 = load i32*, i32** @containing_rgn, align 8, !dbg !8217
  %21 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8217
  %22 = load i32*, i32** @ebb_head, align 8, !dbg !8217
  %23 = load i32, i32* %bb_src.addr, align 4, !dbg !8217
  %idxprom13 = sext i32 %23 to i64, !dbg !8217
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i64 %idxprom13, !dbg !8217
  %24 = load i32, i32* %arrayidx14, align 4, !dbg !8217
  %idxprom15 = sext i32 %24 to i64, !dbg !8217
  %arrayidx16 = getelementptr inbounds i32, i32* %21, i64 %idxprom15, !dbg !8217
  %25 = load i32, i32* %arrayidx16, align 4, !dbg !8217
  %idxprom17 = sext i32 %25 to i64, !dbg !8217
  %arrayidx18 = getelementptr inbounds i32, i32* %20, i64 %idxprom17, !dbg !8217
  %26 = load i32, i32* %arrayidx18, align 4, !dbg !8217
  %cmp19 = icmp ne i32 %19, %26, !dbg !8218
  br i1 %cmp19, label %if.then164, label %lor.lhs.false20, !dbg !8219

lor.lhs.false20:                                  ; preds = %lor.lhs.false4
  %27 = load i32, i32* %bb_trg.addr, align 4, !dbg !8220
  %28 = load i32*, i32** @block_to_bb, align 8, !dbg !8220
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8220
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !8220
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !8220
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 3, !dbg !8220
  %rt_bb24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.basic_block_def**, !dbg !8220
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb24, align 8, !dbg !8220
  %index25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !8220
  %31 = load i32, i32* %index25, align 8, !dbg !8220
  %add26 = add nsw i32 %31, 0, !dbg !8220
  %idxprom27 = sext i32 %add26 to i64, !dbg !8220
  %arrayidx28 = getelementptr inbounds i32, i32* %28, i64 %idxprom27, !dbg !8220
  %32 = load i32, i32* %arrayidx28, align 4, !dbg !8220
  %cmp29 = icmp eq i32 %27, %32, !dbg !8220
  br i1 %cmp29, label %if.end165, label %lor.lhs.false30, !dbg !8220

lor.lhs.false30:                                  ; preds = %lor.lhs.false20
  %33 = load i32, i32* %bb_trg.addr, align 4, !dbg !8220
  %tobool31 = icmp ne i32 %33, 0, !dbg !8220
  br i1 %tobool31, label %lor.lhs.false32, label %if.end165, !dbg !8220

lor.lhs.false32:                                  ; preds = %lor.lhs.false30
  %34 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !8220
  %35 = load i32*, i32** @block_to_bb, align 8, !dbg !8220
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8220
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !8220
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !8220
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 3, !dbg !8220
  %rt_bb36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.basic_block_def**, !dbg !8220
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb36, align 8, !dbg !8220
  %index37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 9, !dbg !8220
  %38 = load i32, i32* %index37, align 8, !dbg !8220
  %add38 = add nsw i32 %38, 0, !dbg !8220
  %idxprom39 = sext i32 %add38 to i64, !dbg !8220
  %arrayidx40 = getelementptr inbounds i32, i32* %35, i64 %idxprom39, !dbg !8220
  %39 = load i32, i32* %arrayidx40, align 4, !dbg !8220
  %idxprom41 = sext i32 %39 to i64, !dbg !8220
  %arrayidx42 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %34, i64 %idxprom41, !dbg !8220
  %40 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx42, align 8, !dbg !8220
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %40, i32 0, i32 3, !dbg !8220
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8220
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !8220
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8220
  %42 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8220
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i32 0, i32 2, !dbg !8220
  %43 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !8220
  %tobool43 = icmp ne %struct.VEC_basic_block_gc* %43, null, !dbg !8220
  br i1 %tobool43, label %cond.true, label %cond.false, !dbg !8220

cond.true:                                        ; preds = %lor.lhs.false32
  %44 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8220
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, !dbg !8220
  %cfg45 = getelementptr inbounds %struct.function, %struct.function* %add.ptr44, i32 0, i32 1, !dbg !8220
  %45 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg45, align 8, !dbg !8220
  %x_basic_block_info46 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %45, i32 0, i32 2, !dbg !8220
  %46 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info46, align 8, !dbg !8220
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %46, i32 0, i32 0, !dbg !8220
  br label %cond.end, !dbg !8220

cond.false:                                       ; preds = %lor.lhs.false32
  br label %cond.end, !dbg !8220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8220
  %47 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8220
  %48 = load i32*, i32** @ebb_head, align 8, !dbg !8220
  %49 = load i32, i32* %bb_trg.addr, align 4, !dbg !8220
  %idxprom47 = sext i32 %49 to i64, !dbg !8220
  %arrayidx48 = getelementptr inbounds i32, i32* %48, i64 %idxprom47, !dbg !8220
  %50 = load i32, i32* %arrayidx48, align 4, !dbg !8220
  %idxprom49 = sext i32 %50 to i64, !dbg !8220
  %arrayidx50 = getelementptr inbounds i32, i32* %47, i64 %idxprom49, !dbg !8220
  %51 = load i32, i32* %arrayidx50, align 4, !dbg !8220
  %call51 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %51), !dbg !8220
  %call52 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %call51), !dbg !8220
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call52, i32 0, i32 3, !dbg !8220
  %52 = load i8*, i8** %aux, align 8, !dbg !8220
  %53 = ptrtoint i8* %52 to i64, !dbg !8220
  %conv = trunc i64 %53 to i32, !dbg !8220
  %div = udiv i32 %conv, 64, !dbg !8220
  %idxprom53 = zext i32 %div to i64, !dbg !8220
  %arrayidx54 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom53, !dbg !8220
  %54 = load i64, i64* %arrayidx54, align 8, !dbg !8220
  %55 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8220
  %add.ptr55 = getelementptr inbounds %struct.function, %struct.function* %55, i64 0, !dbg !8220
  %cfg56 = getelementptr inbounds %struct.function, %struct.function* %add.ptr55, i32 0, i32 1, !dbg !8220
  %56 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg56, align 8, !dbg !8220
  %x_basic_block_info57 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %56, i32 0, i32 2, !dbg !8220
  %57 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info57, align 8, !dbg !8220
  %tobool58 = icmp ne %struct.VEC_basic_block_gc* %57, null, !dbg !8220
  br i1 %tobool58, label %cond.true59, label %cond.false64, !dbg !8220

cond.true59:                                      ; preds = %cond.end
  %58 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8220
  %add.ptr60 = getelementptr inbounds %struct.function, %struct.function* %58, i64 0, !dbg !8220
  %cfg61 = getelementptr inbounds %struct.function, %struct.function* %add.ptr60, i32 0, i32 1, !dbg !8220
  %59 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg61, align 8, !dbg !8220
  %x_basic_block_info62 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %59, i32 0, i32 2, !dbg !8220
  %60 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info62, align 8, !dbg !8220
  %base63 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %60, i32 0, i32 0, !dbg !8220
  br label %cond.end65, !dbg !8220

cond.false64:                                     ; preds = %cond.end
  br label %cond.end65, !dbg !8220

cond.end65:                                       ; preds = %cond.false64, %cond.true59
  %cond66 = phi %struct.VEC_basic_block_base* [ %base63, %cond.true59 ], [ null, %cond.false64 ], !dbg !8220
  %61 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8220
  %62 = load i32*, i32** @ebb_head, align 8, !dbg !8220
  %63 = load i32, i32* %bb_trg.addr, align 4, !dbg !8220
  %idxprom67 = sext i32 %63 to i64, !dbg !8220
  %arrayidx68 = getelementptr inbounds i32, i32* %62, i64 %idxprom67, !dbg !8220
  %64 = load i32, i32* %arrayidx68, align 4, !dbg !8220
  %idxprom69 = sext i32 %64 to i64, !dbg !8220
  %arrayidx70 = getelementptr inbounds i32, i32* %61, i64 %idxprom69, !dbg !8220
  %65 = load i32, i32* %arrayidx70, align 4, !dbg !8220
  %call71 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond66, i32 %65), !dbg !8220
  %call72 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %call71), !dbg !8220
  %aux73 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call72, i32 0, i32 3, !dbg !8220
  %66 = load i8*, i8** %aux73, align 8, !dbg !8220
  %67 = ptrtoint i8* %66 to i64, !dbg !8220
  %conv74 = trunc i64 %67 to i32, !dbg !8220
  %rem = urem i32 %conv74, 64, !dbg !8220
  %sh_prom = zext i32 %rem to i64, !dbg !8220
  %shr = lshr i64 %54, %sh_prom, !dbg !8220
  %and = and i64 %shr, 1, !dbg !8220
  %tobool75 = icmp ne i64 %and, 0, !dbg !8220
  br i1 %tobool75, label %if.end165, label %land.lhs.true, !dbg !8221

land.lhs.true:                                    ; preds = %cond.end65
  %68 = load i32*, i32** @block_to_bb, align 8, !dbg !8222
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8222
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !8222
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !8222
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 3, !dbg !8222
  %rt_bb79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.basic_block_def**, !dbg !8222
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb79, align 8, !dbg !8222
  %index80 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 9, !dbg !8222
  %71 = load i32, i32* %index80, align 8, !dbg !8222
  %add81 = add nsw i32 %71, 0, !dbg !8222
  %idxprom82 = sext i32 %add81 to i64, !dbg !8222
  %arrayidx83 = getelementptr inbounds i32, i32* %68, i64 %idxprom82, !dbg !8222
  %72 = load i32, i32* %arrayidx83, align 4, !dbg !8222
  %73 = load i32, i32* %bb_trg.addr, align 4, !dbg !8222
  %cmp84 = icmp eq i32 %72, %73, !dbg !8222
  br i1 %cmp84, label %if.end165, label %lor.lhs.false86, !dbg !8222

lor.lhs.false86:                                  ; preds = %land.lhs.true
  %74 = load i32*, i32** @block_to_bb, align 8, !dbg !8222
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8222
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !8222
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !8222
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 3, !dbg !8222
  %rt_bb90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.basic_block_def**, !dbg !8222
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb90, align 8, !dbg !8222
  %index91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 9, !dbg !8222
  %77 = load i32, i32* %index91, align 8, !dbg !8222
  %add92 = add nsw i32 %77, 0, !dbg !8222
  %idxprom93 = sext i32 %add92 to i64, !dbg !8222
  %arrayidx94 = getelementptr inbounds i32, i32* %74, i64 %idxprom93, !dbg !8222
  %78 = load i32, i32* %arrayidx94, align 4, !dbg !8222
  %tobool95 = icmp ne i32 %78, 0, !dbg !8222
  br i1 %tobool95, label %lor.lhs.false96, label %if.end165, !dbg !8222

lor.lhs.false96:                                  ; preds = %lor.lhs.false86
  %79 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !8222
  %80 = load i32, i32* %bb_trg.addr, align 4, !dbg !8222
  %idxprom97 = sext i32 %80 to i64, !dbg !8222
  %arrayidx98 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %79, i64 %idxprom97, !dbg !8222
  %81 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx98, align 8, !dbg !8222
  %elms99 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %81, i32 0, i32 3, !dbg !8222
  %82 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8222
  %add.ptr100 = getelementptr inbounds %struct.function, %struct.function* %82, i64 0, !dbg !8222
  %cfg101 = getelementptr inbounds %struct.function, %struct.function* %add.ptr100, i32 0, i32 1, !dbg !8222
  %83 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg101, align 8, !dbg !8222
  %x_basic_block_info102 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %83, i32 0, i32 2, !dbg !8222
  %84 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info102, align 8, !dbg !8222
  %tobool103 = icmp ne %struct.VEC_basic_block_gc* %84, null, !dbg !8222
  br i1 %tobool103, label %cond.true104, label %cond.false109, !dbg !8222

cond.true104:                                     ; preds = %lor.lhs.false96
  %85 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8222
  %add.ptr105 = getelementptr inbounds %struct.function, %struct.function* %85, i64 0, !dbg !8222
  %cfg106 = getelementptr inbounds %struct.function, %struct.function* %add.ptr105, i32 0, i32 1, !dbg !8222
  %86 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg106, align 8, !dbg !8222
  %x_basic_block_info107 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %86, i32 0, i32 2, !dbg !8222
  %87 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info107, align 8, !dbg !8222
  %base108 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %87, i32 0, i32 0, !dbg !8222
  br label %cond.end110, !dbg !8222

cond.false109:                                    ; preds = %lor.lhs.false96
  br label %cond.end110, !dbg !8222

cond.end110:                                      ; preds = %cond.false109, %cond.true104
  %cond111 = phi %struct.VEC_basic_block_base* [ %base108, %cond.true104 ], [ null, %cond.false109 ], !dbg !8222
  %88 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8222
  %89 = load i32*, i32** @ebb_head, align 8, !dbg !8222
  %90 = load i32*, i32** @block_to_bb, align 8, !dbg !8222
  %91 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8222
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !8222
  %fld113 = bitcast %union.u* %u112 to [1 x %union.rtunion_def]*, !dbg !8222
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i64 0, i64 3, !dbg !8222
  %rt_bb115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.basic_block_def**, !dbg !8222
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb115, align 8, !dbg !8222
  %index116 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 9, !dbg !8222
  %93 = load i32, i32* %index116, align 8, !dbg !8222
  %add117 = add nsw i32 %93, 0, !dbg !8222
  %idxprom118 = sext i32 %add117 to i64, !dbg !8222
  %arrayidx119 = getelementptr inbounds i32, i32* %90, i64 %idxprom118, !dbg !8222
  %94 = load i32, i32* %arrayidx119, align 4, !dbg !8222
  %idxprom120 = sext i32 %94 to i64, !dbg !8222
  %arrayidx121 = getelementptr inbounds i32, i32* %89, i64 %idxprom120, !dbg !8222
  %95 = load i32, i32* %arrayidx121, align 4, !dbg !8222
  %idxprom122 = sext i32 %95 to i64, !dbg !8222
  %arrayidx123 = getelementptr inbounds i32, i32* %88, i64 %idxprom122, !dbg !8222
  %96 = load i32, i32* %arrayidx123, align 4, !dbg !8222
  %call124 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond111, i32 %96), !dbg !8222
  %call125 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %call124), !dbg !8222
  %aux126 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call125, i32 0, i32 3, !dbg !8222
  %97 = load i8*, i8** %aux126, align 8, !dbg !8222
  %98 = ptrtoint i8* %97 to i64, !dbg !8222
  %conv127 = trunc i64 %98 to i32, !dbg !8222
  %div128 = udiv i32 %conv127, 64, !dbg !8222
  %idxprom129 = zext i32 %div128 to i64, !dbg !8222
  %arrayidx130 = getelementptr inbounds [1 x i64], [1 x i64]* %elms99, i64 0, i64 %idxprom129, !dbg !8222
  %99 = load i64, i64* %arrayidx130, align 8, !dbg !8222
  %100 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8222
  %add.ptr131 = getelementptr inbounds %struct.function, %struct.function* %100, i64 0, !dbg !8222
  %cfg132 = getelementptr inbounds %struct.function, %struct.function* %add.ptr131, i32 0, i32 1, !dbg !8222
  %101 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg132, align 8, !dbg !8222
  %x_basic_block_info133 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %101, i32 0, i32 2, !dbg !8222
  %102 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info133, align 8, !dbg !8222
  %tobool134 = icmp ne %struct.VEC_basic_block_gc* %102, null, !dbg !8222
  br i1 %tobool134, label %cond.true135, label %cond.false140, !dbg !8222

cond.true135:                                     ; preds = %cond.end110
  %103 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8222
  %add.ptr136 = getelementptr inbounds %struct.function, %struct.function* %103, i64 0, !dbg !8222
  %cfg137 = getelementptr inbounds %struct.function, %struct.function* %add.ptr136, i32 0, i32 1, !dbg !8222
  %104 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg137, align 8, !dbg !8222
  %x_basic_block_info138 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %104, i32 0, i32 2, !dbg !8222
  %105 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info138, align 8, !dbg !8222
  %base139 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %105, i32 0, i32 0, !dbg !8222
  br label %cond.end141, !dbg !8222

cond.false140:                                    ; preds = %cond.end110
  br label %cond.end141, !dbg !8222

cond.end141:                                      ; preds = %cond.false140, %cond.true135
  %cond142 = phi %struct.VEC_basic_block_base* [ %base139, %cond.true135 ], [ null, %cond.false140 ], !dbg !8222
  %106 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8222
  %107 = load i32*, i32** @ebb_head, align 8, !dbg !8222
  %108 = load i32*, i32** @block_to_bb, align 8, !dbg !8222
  %109 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8222
  %u143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1, !dbg !8222
  %fld144 = bitcast %union.u* %u143 to [1 x %union.rtunion_def]*, !dbg !8222
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i64 0, i64 3, !dbg !8222
  %rt_bb146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.basic_block_def**, !dbg !8222
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb146, align 8, !dbg !8222
  %index147 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %110, i32 0, i32 9, !dbg !8222
  %111 = load i32, i32* %index147, align 8, !dbg !8222
  %add148 = add nsw i32 %111, 0, !dbg !8222
  %idxprom149 = sext i32 %add148 to i64, !dbg !8222
  %arrayidx150 = getelementptr inbounds i32, i32* %108, i64 %idxprom149, !dbg !8222
  %112 = load i32, i32* %arrayidx150, align 4, !dbg !8222
  %idxprom151 = sext i32 %112 to i64, !dbg !8222
  %arrayidx152 = getelementptr inbounds i32, i32* %107, i64 %idxprom151, !dbg !8222
  %113 = load i32, i32* %arrayidx152, align 4, !dbg !8222
  %idxprom153 = sext i32 %113 to i64, !dbg !8222
  %arrayidx154 = getelementptr inbounds i32, i32* %106, i64 %idxprom153, !dbg !8222
  %114 = load i32, i32* %arrayidx154, align 4, !dbg !8222
  %call155 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond142, i32 %114), !dbg !8222
  %call156 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %call155), !dbg !8222
  %aux157 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call156, i32 0, i32 3, !dbg !8222
  %115 = load i8*, i8** %aux157, align 8, !dbg !8222
  %116 = ptrtoint i8* %115 to i64, !dbg !8222
  %conv158 = trunc i64 %116 to i32, !dbg !8222
  %rem159 = urem i32 %conv158, 64, !dbg !8222
  %sh_prom160 = zext i32 %rem159 to i64, !dbg !8222
  %shr161 = lshr i64 %99, %sh_prom160, !dbg !8222
  %and162 = and i64 %shr161, 1, !dbg !8222
  %tobool163 = icmp ne i64 %and162, 0, !dbg !8222
  br i1 %tobool163, label %if.end165, label %if.then164, !dbg !8223

if.then164:                                       ; preds = %cond.end141, %lor.lhs.false4, %if.end
  br label %for.inc, !dbg !8224

if.end165:                                        ; preds = %cond.end141, %lor.lhs.false86, %land.lhs.true, %cond.end65, %lor.lhs.false30, %lor.lhs.false20
  %117 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8225
  %118 = load i32, i32* %bb_src.addr, align 4, !dbg !8227
  %call166 = call i32 @find_conditional_protection(%struct.rtx_def* %117, i32 %118), !dbg !8228
  %tobool167 = icmp ne i32 %call166, 0, !dbg !8228
  br i1 %tobool167, label %if.then168, label %if.end169, !dbg !8229

if.then168:                                       ; preds = %if.end165
  store i32 1, i32* %retval, align 4, !dbg !8230
  br label %return, !dbg !8230

if.end169:                                        ; preds = %if.end165
  %119 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !8231
  %120 = load i32, i32* %bb_src.addr, align 4, !dbg !8232
  %121 = load i32, i32* %bb_trg.addr, align 4, !dbg !8233
  %call170 = call i32 @is_conditionally_protected(%struct.rtx_def* %119, i32 %120, i32 %121), !dbg !8234
  store i32 %call170, i32* %retval, align 4, !dbg !8235
  br label %return, !dbg !8235

for.inc:                                          ; preds = %if.then164, %if.then
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !8198
  br label %for.cond, !dbg !8198, !llvm.loop !8236

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !8238
  br label %return, !dbg !8238

return:                                           ; preds = %for.end, %if.end169, %if.then168
  %122 = load i32, i32* %retval, align 4, !dbg !8239
  ret i32 %122, !dbg !8239
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_conditional_protection(%struct.rtx_def* %insn, i32 %load_insn_bb) #0 !dbg !8240 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %load_insn_bb.addr = alloca i32, align 4
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8241, metadata !DIExpression()), !dbg !8242
  store i32 %load_insn_bb, i32* %load_insn_bb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %load_insn_bb.addr, metadata !8243, metadata !DIExpression()), !dbg !8244
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !8245, metadata !DIExpression()), !dbg !8246
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !8247, metadata !DIExpression()), !dbg !8248
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8249
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %0, i32 4), !dbg !8249
  %1 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !8249
  %2 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !8249
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 32, i1 false), !dbg !8249
  br label %for.cond, !dbg !8249

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !8251
  %tobool = icmp ne i8 %call, 0, !dbg !8249
  br i1 %tobool, label %for.body, label %for.end, !dbg !8249

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !8253, metadata !DIExpression()), !dbg !8255
  %3 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !8256
  %con = getelementptr inbounds %struct._dep, %struct._dep* %3, i32 0, i32 1, !dbg !8256
  %4 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !8256
  store %struct.rtx_def* %4, %struct.rtx_def** %next, align 8, !dbg !8255
  %5 = load i32*, i32** @containing_rgn, align 8, !dbg !8257
  %6 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8257
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8257
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8257
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8257
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8257
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8257
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !8257
  %8 = load i32, i32* %index, align 8, !dbg !8257
  %add = add nsw i32 %8, 0, !dbg !8257
  %idxprom = sext i32 %add to i64, !dbg !8257
  %arrayidx1 = getelementptr inbounds i32, i32* %5, i64 %idxprom, !dbg !8257
  %9 = load i32, i32* %arrayidx1, align 4, !dbg !8257
  %10 = load i32*, i32** @containing_rgn, align 8, !dbg !8259
  %11 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8259
  %12 = load i32*, i32** @ebb_head, align 8, !dbg !8259
  %13 = load i32, i32* %load_insn_bb.addr, align 4, !dbg !8259
  %idxprom2 = sext i32 %13 to i64, !dbg !8259
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i64 %idxprom2, !dbg !8259
  %14 = load i32, i32* %arrayidx3, align 4, !dbg !8259
  %idxprom4 = sext i32 %14 to i64, !dbg !8259
  %arrayidx5 = getelementptr inbounds i32, i32* %11, i64 %idxprom4, !dbg !8259
  %15 = load i32, i32* %arrayidx5, align 4, !dbg !8259
  %idxprom6 = sext i32 %15 to i64, !dbg !8259
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i64 %idxprom6, !dbg !8259
  %16 = load i32, i32* %arrayidx7, align 4, !dbg !8259
  %cmp = icmp eq i32 %9, %16, !dbg !8260
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8261

land.lhs.true:                                    ; preds = %for.body
  %17 = load i32*, i32** @block_to_bb, align 8, !dbg !8262
  %18 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8262
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !8262
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8262
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 3, !dbg !8262
  %rt_bb11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.basic_block_def**, !dbg !8262
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb11, align 8, !dbg !8262
  %index12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 9, !dbg !8262
  %20 = load i32, i32* %index12, align 8, !dbg !8262
  %add13 = add nsw i32 %20, 0, !dbg !8262
  %idxprom14 = sext i32 %add13 to i64, !dbg !8262
  %arrayidx15 = getelementptr inbounds i32, i32* %17, i64 %idxprom14, !dbg !8262
  %21 = load i32, i32* %arrayidx15, align 4, !dbg !8262
  %22 = load i32, i32* %load_insn_bb.addr, align 4, !dbg !8262
  %cmp16 = icmp eq i32 %21, %22, !dbg !8262
  br i1 %cmp16, label %land.lhs.true78, label %lor.lhs.false, !dbg !8262

lor.lhs.false:                                    ; preds = %land.lhs.true
  %23 = load i32*, i32** @block_to_bb, align 8, !dbg !8262
  %24 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8262
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !8262
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !8262
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 3, !dbg !8262
  %rt_bb20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.basic_block_def**, !dbg !8262
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb20, align 8, !dbg !8262
  %index21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 9, !dbg !8262
  %26 = load i32, i32* %index21, align 8, !dbg !8262
  %add22 = add nsw i32 %26, 0, !dbg !8262
  %idxprom23 = sext i32 %add22 to i64, !dbg !8262
  %arrayidx24 = getelementptr inbounds i32, i32* %23, i64 %idxprom23, !dbg !8262
  %27 = load i32, i32* %arrayidx24, align 4, !dbg !8262
  %tobool25 = icmp ne i32 %27, 0, !dbg !8262
  br i1 %tobool25, label %lor.lhs.false26, label %land.lhs.true78, !dbg !8262

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %28 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @ancestor_edges, align 8, !dbg !8262
  %29 = load i32, i32* %load_insn_bb.addr, align 4, !dbg !8262
  %idxprom27 = sext i32 %29 to i64, !dbg !8262
  %arrayidx28 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %28, i64 %idxprom27, !dbg !8262
  %30 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx28, align 8, !dbg !8262
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %30, i32 0, i32 3, !dbg !8262
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8262
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !8262
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8262
  %32 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8262
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %32, i32 0, i32 2, !dbg !8262
  %33 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !8262
  %tobool29 = icmp ne %struct.VEC_basic_block_gc* %33, null, !dbg !8262
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !8262

cond.true:                                        ; preds = %lor.lhs.false26
  %34 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8262
  %add.ptr30 = getelementptr inbounds %struct.function, %struct.function* %34, i64 0, !dbg !8262
  %cfg31 = getelementptr inbounds %struct.function, %struct.function* %add.ptr30, i32 0, i32 1, !dbg !8262
  %35 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg31, align 8, !dbg !8262
  %x_basic_block_info32 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %35, i32 0, i32 2, !dbg !8262
  %36 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info32, align 8, !dbg !8262
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %36, i32 0, i32 0, !dbg !8262
  br label %cond.end, !dbg !8262

cond.false:                                       ; preds = %lor.lhs.false26
  br label %cond.end, !dbg !8262

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8262
  %37 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8262
  %38 = load i32*, i32** @ebb_head, align 8, !dbg !8262
  %39 = load i32*, i32** @block_to_bb, align 8, !dbg !8262
  %40 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8262
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !8262
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !8262
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 3, !dbg !8262
  %rt_bb36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.basic_block_def**, !dbg !8262
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb36, align 8, !dbg !8262
  %index37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !8262
  %42 = load i32, i32* %index37, align 8, !dbg !8262
  %add38 = add nsw i32 %42, 0, !dbg !8262
  %idxprom39 = sext i32 %add38 to i64, !dbg !8262
  %arrayidx40 = getelementptr inbounds i32, i32* %39, i64 %idxprom39, !dbg !8262
  %43 = load i32, i32* %arrayidx40, align 4, !dbg !8262
  %idxprom41 = sext i32 %43 to i64, !dbg !8262
  %arrayidx42 = getelementptr inbounds i32, i32* %38, i64 %idxprom41, !dbg !8262
  %44 = load i32, i32* %arrayidx42, align 4, !dbg !8262
  %idxprom43 = sext i32 %44 to i64, !dbg !8262
  %arrayidx44 = getelementptr inbounds i32, i32* %37, i64 %idxprom43, !dbg !8262
  %45 = load i32, i32* %arrayidx44, align 4, !dbg !8262
  %call45 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %45), !dbg !8262
  %call46 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %call45), !dbg !8262
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call46, i32 0, i32 3, !dbg !8262
  %46 = load i8*, i8** %aux, align 8, !dbg !8262
  %47 = ptrtoint i8* %46 to i64, !dbg !8262
  %conv = trunc i64 %47 to i32, !dbg !8262
  %div = udiv i32 %conv, 64, !dbg !8262
  %idxprom47 = zext i32 %div to i64, !dbg !8262
  %arrayidx48 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom47, !dbg !8262
  %48 = load i64, i64* %arrayidx48, align 8, !dbg !8262
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8262
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, !dbg !8262
  %cfg50 = getelementptr inbounds %struct.function, %struct.function* %add.ptr49, i32 0, i32 1, !dbg !8262
  %50 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg50, align 8, !dbg !8262
  %x_basic_block_info51 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %50, i32 0, i32 2, !dbg !8262
  %51 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info51, align 8, !dbg !8262
  %tobool52 = icmp ne %struct.VEC_basic_block_gc* %51, null, !dbg !8262
  br i1 %tobool52, label %cond.true53, label %cond.false58, !dbg !8262

cond.true53:                                      ; preds = %cond.end
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8262
  %add.ptr54 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !8262
  %cfg55 = getelementptr inbounds %struct.function, %struct.function* %add.ptr54, i32 0, i32 1, !dbg !8262
  %53 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg55, align 8, !dbg !8262
  %x_basic_block_info56 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %53, i32 0, i32 2, !dbg !8262
  %54 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info56, align 8, !dbg !8262
  %base57 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %54, i32 0, i32 0, !dbg !8262
  br label %cond.end59, !dbg !8262

cond.false58:                                     ; preds = %cond.end
  br label %cond.end59, !dbg !8262

cond.end59:                                       ; preds = %cond.false58, %cond.true53
  %cond60 = phi %struct.VEC_basic_block_base* [ %base57, %cond.true53 ], [ null, %cond.false58 ], !dbg !8262
  %55 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8262
  %56 = load i32*, i32** @ebb_head, align 8, !dbg !8262
  %57 = load i32*, i32** @block_to_bb, align 8, !dbg !8262
  %58 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8262
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !8262
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !8262
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 3, !dbg !8262
  %rt_bb64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.basic_block_def**, !dbg !8262
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb64, align 8, !dbg !8262
  %index65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 9, !dbg !8262
  %60 = load i32, i32* %index65, align 8, !dbg !8262
  %add66 = add nsw i32 %60, 0, !dbg !8262
  %idxprom67 = sext i32 %add66 to i64, !dbg !8262
  %arrayidx68 = getelementptr inbounds i32, i32* %57, i64 %idxprom67, !dbg !8262
  %61 = load i32, i32* %arrayidx68, align 4, !dbg !8262
  %idxprom69 = sext i32 %61 to i64, !dbg !8262
  %arrayidx70 = getelementptr inbounds i32, i32* %56, i64 %idxprom69, !dbg !8262
  %62 = load i32, i32* %arrayidx70, align 4, !dbg !8262
  %idxprom71 = sext i32 %62 to i64, !dbg !8262
  %arrayidx72 = getelementptr inbounds i32, i32* %55, i64 %idxprom71, !dbg !8262
  %63 = load i32, i32* %arrayidx72, align 4, !dbg !8262
  %call73 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond60, i32 %63), !dbg !8262
  %call74 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %call73), !dbg !8262
  %aux75 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call74, i32 0, i32 3, !dbg !8262
  %64 = load i8*, i8** %aux75, align 8, !dbg !8262
  %65 = ptrtoint i8* %64 to i64, !dbg !8262
  %conv76 = trunc i64 %65 to i32, !dbg !8262
  %rem = urem i32 %conv76, 64, !dbg !8262
  %sh_prom = zext i32 %rem to i64, !dbg !8262
  %shr = lshr i64 %48, %sh_prom, !dbg !8262
  %and = and i64 %shr, 1, !dbg !8262
  %tobool77 = icmp ne i64 %and, 0, !dbg !8262
  br i1 %tobool77, label %land.lhs.true78, label %if.end, !dbg !8263

land.lhs.true78:                                  ; preds = %cond.end59, %lor.lhs.false, %land.lhs.true
  %66 = load i32, i32* %load_insn_bb.addr, align 4, !dbg !8264
  %67 = load i32*, i32** @block_to_bb, align 8, !dbg !8265
  %68 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8265
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !8265
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !8265
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 3, !dbg !8265
  %rt_bb82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.basic_block_def**, !dbg !8265
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb82, align 8, !dbg !8265
  %index83 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 9, !dbg !8265
  %70 = load i32, i32* %index83, align 8, !dbg !8265
  %add84 = add nsw i32 %70, 0, !dbg !8265
  %idxprom85 = sext i32 %add84 to i64, !dbg !8265
  %arrayidx86 = getelementptr inbounds i32, i32* %67, i64 %idxprom85, !dbg !8265
  %71 = load i32, i32* %arrayidx86, align 4, !dbg !8265
  %cmp87 = icmp ne i32 %66, %71, !dbg !8266
  br i1 %cmp87, label %land.lhs.true89, label %if.end, !dbg !8267

land.lhs.true89:                                  ; preds = %land.lhs.true78
  %72 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !8268
  %type = getelementptr inbounds %struct._dep, %struct._dep* %72, i32 0, i32 2, !dbg !8268
  %73 = load i32, i32* %type, align 8, !dbg !8268
  %cmp90 = icmp eq i32 %73, 0, !dbg !8269
  br i1 %cmp90, label %land.lhs.true92, label %if.end, !dbg !8270

land.lhs.true92:                                  ; preds = %land.lhs.true89
  %74 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8271
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !8271
  %bf.load = load i32, i32* %75, align 8, !dbg !8271
  %bf.clear = and i32 %bf.load, 65535, !dbg !8271
  %cmp93 = icmp eq i32 %bf.clear, 9, !dbg !8271
  br i1 %cmp93, label %if.then, label %lor.lhs.false95, !dbg !8272

lor.lhs.false95:                                  ; preds = %land.lhs.true92
  %76 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !8273
  %77 = load i32, i32* %load_insn_bb.addr, align 4, !dbg !8274
  %call96 = call i32 @find_conditional_protection(%struct.rtx_def* %76, i32 %77), !dbg !8275
  %tobool97 = icmp ne i32 %call96, 0, !dbg !8275
  br i1 %tobool97, label %if.then, label %if.end, !dbg !8276

if.then:                                          ; preds = %lor.lhs.false95, %land.lhs.true92
  store i32 1, i32* %retval, align 4, !dbg !8277
  br label %return, !dbg !8277

if.end:                                           ; preds = %lor.lhs.false95, %land.lhs.true89, %land.lhs.true78, %cond.end59, %for.body
  br label %for.inc, !dbg !8278

for.inc:                                          ; preds = %if.end
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !8251
  br label %for.cond, !dbg !8251, !llvm.loop !8279

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !8281
  br label %return, !dbg !8281

return:                                           ; preds = %for.end, %if.then
  %78 = load i32, i32* %retval, align 4, !dbg !8282
  ret i32 %78, !dbg !8282
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_live(%struct.rtx_def* %insn, i32 %src) #0 !dbg !8283 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %src.addr = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8284, metadata !DIExpression()), !dbg !8285
  store i32 %src, i32* %src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src.addr, metadata !8286, metadata !DIExpression()), !dbg !8287
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8288
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8288
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8288
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !8288
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8288
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8288
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8288
  %bf.load = load i32, i32* %2, align 8, !dbg !8288
  %bf.clear = and i32 %bf.load, 65535, !dbg !8288
  %cmp = icmp eq i32 %bf.clear, 23, !dbg !8290
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8291

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8292
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8292
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8292
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !8292
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !8292
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !8292
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8292
  %bf.load5 = load i32, i32* %5, align 8, !dbg !8292
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !8292
  %cmp7 = icmp eq i32 %bf.clear6, 25, !dbg !8293
  br i1 %cmp7, label %if.then, label %if.else, !dbg !8294

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load i32, i32* %src.addr, align 4, !dbg !8295
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8296
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !8296
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8296
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 5, !dbg !8296
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !8296
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx11, align 8, !dbg !8296
  call void @update_live_1(i32 %6, %struct.rtx_def* %8), !dbg !8297
  br label %if.end68, !dbg !8297

if.else:                                          ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8298
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !8298
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !8298
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 5, !dbg !8298
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !8298
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !8298
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !8298
  %bf.load16 = load i32, i32* %11, align 8, !dbg !8298
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !8298
  %cmp18 = icmp eq i32 %bf.clear17, 15, !dbg !8300
  br i1 %cmp18, label %if.then19, label %if.end67, !dbg !8301

if.then19:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8302, metadata !DIExpression()), !dbg !8304
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8305
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !8305
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !8305
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !8305
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !8305
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !8305
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8305
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !8305
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !8305
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtvec_def**, !dbg !8305
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !8305
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 0, !dbg !8305
  %15 = load i32, i32* %num_elem, align 8, !dbg !8305
  %sub = sub nsw i32 %15, 1, !dbg !8307
  store i32 %sub, i32* %j, align 4, !dbg !8308
  br label %for.cond, !dbg !8309

for.cond:                                         ; preds = %for.inc, %if.then19
  %16 = load i32, i32* %j, align 4, !dbg !8310
  %cmp27 = icmp sge i32 %16, 0, !dbg !8312
  br i1 %cmp27, label %for.body, label %for.end, !dbg !8313

for.body:                                         ; preds = %for.cond
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8314
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !8314
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !8314
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 5, !dbg !8314
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !8314
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !8314
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !8314
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !8314
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !8314
  %rt_rtvec35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtvec_def**, !dbg !8314
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec35, align 8, !dbg !8314
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 1, !dbg !8314
  %20 = load i32, i32* %j, align 4, !dbg !8314
  %idxprom = sext i32 %20 to i64, !dbg !8314
  %arrayidx36 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !8314
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx36, align 8, !dbg !8314
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !8314
  %bf.load37 = load i32, i32* %22, align 8, !dbg !8314
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !8314
  %cmp39 = icmp eq i32 %bf.clear38, 23, !dbg !8316
  br i1 %cmp39, label %if.then55, label %lor.lhs.false40, !dbg !8317

lor.lhs.false40:                                  ; preds = %for.body
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8318
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !8318
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !8318
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 5, !dbg !8318
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !8318
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !8318
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !8318
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !8318
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 0, !dbg !8318
  %rt_rtvec48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtvec_def**, !dbg !8318
  %25 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec48, align 8, !dbg !8318
  %elem49 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %25, i32 0, i32 1, !dbg !8318
  %26 = load i32, i32* %j, align 4, !dbg !8318
  %idxprom50 = sext i32 %26 to i64, !dbg !8318
  %arrayidx51 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem49, i64 0, i64 %idxprom50, !dbg !8318
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx51, align 8, !dbg !8318
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !8318
  %bf.load52 = load i32, i32* %28, align 8, !dbg !8318
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !8318
  %cmp54 = icmp eq i32 %bf.clear53, 25, !dbg !8319
  br i1 %cmp54, label %if.then55, label %if.end, !dbg !8320

if.then55:                                        ; preds = %lor.lhs.false40, %for.body
  %29 = load i32, i32* %src.addr, align 4, !dbg !8321
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8322
  %u56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !8322
  %fld57 = bitcast %union.u* %u56 to [1 x %union.rtunion_def]*, !dbg !8322
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i64 0, i64 5, !dbg !8322
  %rt_rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**, !dbg !8322
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx59, align 8, !dbg !8322
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !8322
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !8322
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 0, !dbg !8322
  %rt_rtvec63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtvec_def**, !dbg !8322
  %32 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec63, align 8, !dbg !8322
  %elem64 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %32, i32 0, i32 1, !dbg !8322
  %33 = load i32, i32* %j, align 4, !dbg !8322
  %idxprom65 = sext i32 %33 to i64, !dbg !8322
  %arrayidx66 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem64, i64 0, i64 %idxprom65, !dbg !8322
  %34 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx66, align 8, !dbg !8322
  call void @update_live_1(i32 %29, %struct.rtx_def* %34), !dbg !8323
  br label %if.end, !dbg !8323

if.end:                                           ; preds = %if.then55, %lor.lhs.false40
  br label %for.inc, !dbg !8324

for.inc:                                          ; preds = %if.end
  %35 = load i32, i32* %j, align 4, !dbg !8325
  %dec = add nsw i32 %35, -1, !dbg !8325
  store i32 %dec, i32* %j, align 4, !dbg !8325
  br label %for.cond, !dbg !8326, !llvm.loop !8327

for.end:                                          ; preds = %for.cond
  br label %if.end67, !dbg !8329

if.end67:                                         ; preds = %for.end, %if.else
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then
  ret void, !dbg !8330
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_spec_fed(%struct.rtx_def* %load_insn) #0 !dbg !8331 {
entry:
  %load_insn.addr = alloca %struct.rtx_def*, align 8
  %sd_it = alloca %struct._sd_iterator, align 8
  %dep = alloca %struct._dep*, align 8
  %tmp = alloca %struct._sd_iterator, align 8
  store %struct.rtx_def* %load_insn, %struct.rtx_def** %load_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %load_insn.addr, metadata !8332, metadata !DIExpression()), !dbg !8333
  call void @llvm.dbg.declare(metadata %struct._sd_iterator* %sd_it, metadata !8334, metadata !DIExpression()), !dbg !8335
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !8336, metadata !DIExpression()), !dbg !8337
  %0 = load %struct.rtx_def*, %struct.rtx_def** %load_insn.addr, align 8, !dbg !8338
  call void @sd_iterator_start(%struct._sd_iterator* sret %tmp, %struct.rtx_def* %0, i32 4), !dbg !8338
  %1 = bitcast %struct._sd_iterator* %sd_it to i8*, !dbg !8338
  %2 = bitcast %struct._sd_iterator* %tmp to i8*, !dbg !8338
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 32, i1 false), !dbg !8338
  br label %for.cond, !dbg !8338

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @sd_iterator_cond(%struct._sd_iterator* %sd_it, %struct._dep** %dep), !dbg !8340
  %tobool = icmp ne i8 %call, 0, !dbg !8338
  br i1 %tobool, label %for.body, label %for.end, !dbg !8338

for.body:                                         ; preds = %for.cond
  %3 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !8342
  %type = getelementptr inbounds %struct._dep, %struct._dep* %3, i32 0, i32 2, !dbg !8342
  %4 = load i32, i32* %type, align 8, !dbg !8342
  %cmp = icmp eq i32 %4, 0, !dbg !8344
  br i1 %cmp, label %if.then, label %if.end, !dbg !8345

if.then:                                          ; preds = %for.body
  %5 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8346
  %tobool1 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %5, null, !dbg !8346
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8346

cond.true:                                        ; preds = %if.then
  %6 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !8346
  %base = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %6, i32 0, i32 0, !dbg !8346
  br label %cond.end, !dbg !8346

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !8346

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_haifa_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8346
  %7 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !8346
  %con = getelementptr inbounds %struct._dep, %struct._dep* %7, i32 0, i32 1, !dbg !8346
  %8 = load %struct.rtx_def*, %struct.rtx_def** %con, align 8, !dbg !8346
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !8346
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8346
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8346
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8346
  %9 = load i32, i32* %rt_int, align 8, !dbg !8346
  %call2 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond, i32 %9), !dbg !8346
  %fed_by_spec_load = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call2, i32 0, i32 6, !dbg !8346
  %bf.load = load i8, i8* %fed_by_spec_load, align 2, !dbg !8347
  %bf.clear = and i8 %bf.load, -2, !dbg !8347
  %bf.set = or i8 %bf.clear, 1, !dbg !8347
  store i8 %bf.set, i8* %fed_by_spec_load, align 2, !dbg !8347
  br label %if.end, !dbg !8346

if.end:                                           ; preds = %cond.end, %for.body
  br label %for.inc, !dbg !8348

for.inc:                                          ; preds = %if.end
  call void @sd_iterator_next(%struct._sd_iterator* %sd_it), !dbg !8340
  br label %for.cond, !dbg !8340, !llvm.loop !8349

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8351
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_live_1(i32 %src, %struct.rtx_def* %x) #0 !dbg !8352 {
entry:
  %src.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %regno = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %i16 = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca %struct.basic_block_def*, align 8
  %b92 = alloca %struct.basic_block_def*, align 8
  store i32 %src, i32* %src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src.addr, metadata !8355, metadata !DIExpression()), !dbg !8356
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8357, metadata !DIExpression()), !dbg !8358
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8359, metadata !DIExpression()), !dbg !8360
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !8361, metadata !DIExpression()), !dbg !8362
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !8363, metadata !DIExpression()), !dbg !8364
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8365
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8365
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8365
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8365
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8365
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8365
  store %struct.rtx_def* %1, %struct.rtx_def** %reg, align 8, !dbg !8364
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8366
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !8368
  br i1 %cmp, label %if.then, label %if.end, !dbg !8369

if.then:                                          ; preds = %entry
  br label %if.end105, !dbg !8370

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !8371

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8372
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !8372
  %bf.load = load i32, i32* %4, align 8, !dbg !8372
  %bf.clear = and i32 %bf.load, 65535, !dbg !8372
  %cmp1 = icmp eq i32 %bf.clear, 39, !dbg !8373
  br i1 %cmp1, label %lor.end, label %lor.lhs.false, !dbg !8374

lor.lhs.false:                                    ; preds = %while.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8375
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8375
  %bf.load2 = load i32, i32* %6, align 8, !dbg !8375
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !8375
  %cmp4 = icmp eq i32 %bf.clear3, 120, !dbg !8376
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !8377

lor.rhs:                                          ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8378
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8378
  %bf.load5 = load i32, i32* %8, align 8, !dbg !8378
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !8378
  %cmp7 = icmp eq i32 %bf.clear6, 40, !dbg !8379
  br label %lor.end, !dbg !8377

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp7, %lor.rhs ]
  br i1 %9, label %while.body, label %while.end, !dbg !8371

while.body:                                       ; preds = %lor.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8380
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8380
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8380
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !8380
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !8380
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx11, align 8, !dbg !8380
  store %struct.rtx_def* %11, %struct.rtx_def** %reg, align 8, !dbg !8381
  br label %while.cond, !dbg !8371, !llvm.loop !8382

while.end:                                        ; preds = %lor.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8383
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !8383
  %bf.load12 = load i32, i32* %13, align 8, !dbg !8383
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !8383
  %cmp14 = icmp eq i32 %bf.clear13, 15, !dbg !8385
  br i1 %cmp14, label %if.then15, label %if.end44, !dbg !8386

if.then15:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata i32* %i16, metadata !8387, metadata !DIExpression()), !dbg !8389
  %14 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8390
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !8390
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !8390
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 0, !dbg !8390
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtvec_def**, !dbg !8390
  %15 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !8390
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %15, i32 0, i32 0, !dbg !8390
  %16 = load i32, i32* %num_elem, align 8, !dbg !8390
  %sub = sub nsw i32 %16, 1, !dbg !8392
  store i32 %sub, i32* %i16, align 4, !dbg !8393
  br label %for.cond, !dbg !8394

for.cond:                                         ; preds = %for.inc, %if.then15
  %17 = load i32, i32* %i16, align 4, !dbg !8395
  %cmp20 = icmp sge i32 %17, 0, !dbg !8397
  br i1 %cmp20, label %for.body, label %for.end, !dbg !8398

for.body:                                         ; preds = %for.cond
  %18 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8399
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !8399
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !8399
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 0, !dbg !8399
  %rt_rtvec24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtvec_def**, !dbg !8399
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec24, align 8, !dbg !8399
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 1, !dbg !8399
  %20 = load i32, i32* %i16, align 4, !dbg !8399
  %idxprom = sext i32 %20 to i64, !dbg !8399
  %arrayidx25 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !8399
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx25, align 8, !dbg !8399
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !8399
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !8399
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 0, !dbg !8399
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !8399
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx29, align 8, !dbg !8399
  %cmp30 = icmp ne %struct.rtx_def* %22, null, !dbg !8401
  br i1 %cmp30, label %if.then31, label %if.end43, !dbg !8402

if.then31:                                        ; preds = %for.body
  %23 = load i32, i32* %src.addr, align 4, !dbg !8403
  %24 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8404
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !8404
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !8404
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !8404
  %rt_rtvec35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtvec_def**, !dbg !8404
  %25 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec35, align 8, !dbg !8404
  %elem36 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %25, i32 0, i32 1, !dbg !8404
  %26 = load i32, i32* %i16, align 4, !dbg !8404
  %idxprom37 = sext i32 %26 to i64, !dbg !8404
  %arrayidx38 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem36, i64 0, i64 %idxprom37, !dbg !8404
  %27 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8, !dbg !8404
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !8404
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !8404
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 0, !dbg !8404
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !8404
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !8404
  call void @update_live_1(i32 %23, %struct.rtx_def* %28), !dbg !8405
  br label %if.end43, !dbg !8405

if.end43:                                         ; preds = %if.then31, %for.body
  br label %for.inc, !dbg !8406

for.inc:                                          ; preds = %if.end43
  %29 = load i32, i32* %i16, align 4, !dbg !8407
  %dec = add nsw i32 %29, -1, !dbg !8407
  store i32 %dec, i32* %i16, align 4, !dbg !8407
  br label %for.cond, !dbg !8408, !llvm.loop !8409

for.end:                                          ; preds = %for.cond
  br label %if.end105, !dbg !8411

if.end44:                                         ; preds = %while.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8412
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !8412
  %bf.load45 = load i32, i32* %31, align 8, !dbg !8412
  %bf.clear46 = and i32 %bf.load45, 65535, !dbg !8412
  %cmp47 = icmp eq i32 %bf.clear46, 37, !dbg !8412
  br i1 %cmp47, label %if.end49, label %if.then48, !dbg !8414

if.then48:                                        ; preds = %if.end44
  br label %if.end105, !dbg !8415

if.end49:                                         ; preds = %if.end44
  %32 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8416
  %call = call i32 @rhs_regno(%struct.rtx_def* %32), !dbg !8416
  store i32 %call, i32* %regno, align 4, !dbg !8417
  %33 = load i32, i32* %regno, align 4, !dbg !8418
  %cmp50 = icmp sge i32 %33, 53, !dbg !8420
  br i1 %cmp50, label %if.then54, label %lor.lhs.false51, !dbg !8421

lor.lhs.false51:                                  ; preds = %if.end49
  %34 = load i32, i32* %regno, align 4, !dbg !8422
  %idxprom52 = sext i32 %34 to i64, !dbg !8423
  %arrayidx53 = getelementptr inbounds [53 x i8], [53 x i8]* @global_regs, i64 0, i64 %idxprom52, !dbg !8423
  %35 = load i8, i8* %arrayidx53, align 1, !dbg !8423
  %tobool = icmp ne i8 %35, 0, !dbg !8423
  br i1 %tobool, label %if.end105, label %if.then54, !dbg !8424

if.then54:                                        ; preds = %lor.lhs.false51, %if.end49
  %36 = load i32, i32* %regno, align 4, !dbg !8425
  %cmp55 = icmp slt i32 %36, 53, !dbg !8428
  br i1 %cmp55, label %if.then56, label %if.else, !dbg !8429

if.then56:                                        ; preds = %if.then54
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8430, metadata !DIExpression()), !dbg !8432
  %37 = load i32, i32* %regno, align 4, !dbg !8433
  %idxprom57 = sext i32 %37 to i64, !dbg !8434
  %arrayidx58 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom57, !dbg !8434
  %38 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8435
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !8435
  %bf.load59 = load i32, i32* %39, align 8, !dbg !8435
  %bf.lshr = lshr i32 %bf.load59, 16, !dbg !8435
  %bf.clear60 = and i32 %bf.lshr, 255, !dbg !8435
  %idxprom61 = zext i32 %bf.clear60 to i64, !dbg !8434
  %arrayidx62 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx58, i64 0, i64 %idxprom61, !dbg !8434
  %40 = load i8, i8* %arrayidx62, align 1, !dbg !8434
  %conv = zext i8 %40 to i32, !dbg !8434
  store i32 %conv, i32* %j, align 4, !dbg !8432
  br label %while.cond63, !dbg !8436

while.cond63:                                     ; preds = %for.end82, %if.then56
  %41 = load i32, i32* %j, align 4, !dbg !8437
  %dec64 = add nsw i32 %41, -1, !dbg !8437
  store i32 %dec64, i32* %j, align 4, !dbg !8437
  %cmp65 = icmp sge i32 %dec64, 0, !dbg !8438
  br i1 %cmp65, label %while.body67, label %while.end83, !dbg !8436

while.body67:                                     ; preds = %while.cond63
  store i32 0, i32* %i, align 4, !dbg !8439
  br label %for.cond68, !dbg !8442

for.cond68:                                       ; preds = %for.inc81, %while.body67
  %42 = load i32, i32* %i, align 4, !dbg !8443
  %43 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !8445
  %44 = load i32, i32* %src.addr, align 4, !dbg !8446
  %idxprom69 = sext i32 %44 to i64, !dbg !8445
  %arrayidx70 = getelementptr inbounds %struct.candidate, %struct.candidate* %43, i64 %idxprom69, !dbg !8445
  %update_bbs = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx70, i32 0, i32 4, !dbg !8447
  %nr_members = getelementptr inbounds %struct.bblst, %struct.bblst* %update_bbs, i32 0, i32 1, !dbg !8448
  %45 = load i32, i32* %nr_members, align 8, !dbg !8448
  %cmp71 = icmp slt i32 %42, %45, !dbg !8449
  br i1 %cmp71, label %for.body73, label %for.end82, !dbg !8450

for.body73:                                       ; preds = %for.cond68
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !8451, metadata !DIExpression()), !dbg !8453
  %46 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !8454
  %47 = load i32, i32* %src.addr, align 4, !dbg !8455
  %idxprom74 = sext i32 %47 to i64, !dbg !8454
  %arrayidx75 = getelementptr inbounds %struct.candidate, %struct.candidate* %46, i64 %idxprom74, !dbg !8454
  %update_bbs76 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx75, i32 0, i32 4, !dbg !8456
  %first_member = getelementptr inbounds %struct.bblst, %struct.bblst* %update_bbs76, i32 0, i32 0, !dbg !8457
  %48 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_member, align 8, !dbg !8457
  %49 = load i32, i32* %i, align 4, !dbg !8458
  %idxprom77 = sext i32 %49 to i64, !dbg !8454
  %arrayidx78 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %48, i64 %idxprom77, !dbg !8454
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx78, align 8, !dbg !8454
  store %struct.basic_block_def* %50, %struct.basic_block_def** %b, align 8, !dbg !8453
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !8459
  %call79 = call %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def* %51), !dbg !8459
  %52 = load i32, i32* %regno, align 4, !dbg !8459
  %53 = load i32, i32* %j, align 4, !dbg !8459
  %add = add nsw i32 %52, %53, !dbg !8459
  %call80 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %call79, i32 %add), !dbg !8459
  br label %for.inc81, !dbg !8460

for.inc81:                                        ; preds = %for.body73
  %54 = load i32, i32* %i, align 4, !dbg !8461
  %inc = add nsw i32 %54, 1, !dbg !8461
  store i32 %inc, i32* %i, align 4, !dbg !8461
  br label %for.cond68, !dbg !8462, !llvm.loop !8463

for.end82:                                        ; preds = %for.cond68
  br label %while.cond63, !dbg !8436, !llvm.loop !8465

while.end83:                                      ; preds = %while.cond63
  br label %if.end104, !dbg !8467

if.else:                                          ; preds = %if.then54
  store i32 0, i32* %i, align 4, !dbg !8468
  br label %for.cond84, !dbg !8471

for.cond84:                                       ; preds = %for.inc101, %if.else
  %55 = load i32, i32* %i, align 4, !dbg !8472
  %56 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !8474
  %57 = load i32, i32* %src.addr, align 4, !dbg !8475
  %idxprom85 = sext i32 %57 to i64, !dbg !8474
  %arrayidx86 = getelementptr inbounds %struct.candidate, %struct.candidate* %56, i64 %idxprom85, !dbg !8474
  %update_bbs87 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx86, i32 0, i32 4, !dbg !8476
  %nr_members88 = getelementptr inbounds %struct.bblst, %struct.bblst* %update_bbs87, i32 0, i32 1, !dbg !8477
  %58 = load i32, i32* %nr_members88, align 8, !dbg !8477
  %cmp89 = icmp slt i32 %55, %58, !dbg !8478
  br i1 %cmp89, label %for.body91, label %for.end103, !dbg !8479

for.body91:                                       ; preds = %for.cond84
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b92, metadata !8480, metadata !DIExpression()), !dbg !8482
  %59 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !8483
  %60 = load i32, i32* %src.addr, align 4, !dbg !8484
  %idxprom93 = sext i32 %60 to i64, !dbg !8483
  %arrayidx94 = getelementptr inbounds %struct.candidate, %struct.candidate* %59, i64 %idxprom93, !dbg !8483
  %update_bbs95 = getelementptr inbounds %struct.candidate, %struct.candidate* %arrayidx94, i32 0, i32 4, !dbg !8485
  %first_member96 = getelementptr inbounds %struct.bblst, %struct.bblst* %update_bbs95, i32 0, i32 0, !dbg !8486
  %61 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_member96, align 8, !dbg !8486
  %62 = load i32, i32* %i, align 4, !dbg !8487
  %idxprom97 = sext i32 %62 to i64, !dbg !8483
  %arrayidx98 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %61, i64 %idxprom97, !dbg !8483
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx98, align 8, !dbg !8483
  store %struct.basic_block_def* %63, %struct.basic_block_def** %b92, align 8, !dbg !8482
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %b92, align 8, !dbg !8488
  %call99 = call %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def* %64), !dbg !8488
  %65 = load i32, i32* %regno, align 4, !dbg !8488
  %call100 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %call99, i32 %65), !dbg !8488
  br label %for.inc101, !dbg !8489

for.inc101:                                       ; preds = %for.body91
  %66 = load i32, i32* %i, align 4, !dbg !8490
  %inc102 = add nsw i32 %66, 1, !dbg !8490
  store i32 %inc102, i32* %i, align 4, !dbg !8490
  br label %for.cond84, !dbg !8491, !llvm.loop !8492

for.end103:                                       ; preds = %for.cond84
  br label %if.end104

if.end104:                                        ; preds = %for.end103, %while.end83
  br label %if.end105, !dbg !8494

if.end105:                                        ; preds = %if.then, %for.end, %if.then48, %if.end104, %lor.lhs.false51
  ret void, !dbg !8495
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local void @sched_extend_ready_list(i32) #2

declare dso_local void @sched_init_region_reg_pressure_info() #2

declare dso_local void @sched_setup_bb_reg_pressure_info(%struct.basic_block_def*, %struct.rtx_def*) #2

declare dso_local void @remove_notes(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @unlink_bb_notes(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local void @schedule_block(%struct.basic_block_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_trg_info() #0 !dbg !8496 {
entry:
  %0 = load %struct.candidate*, %struct.candidate** @candidate_table, align 8, !dbg !8497
  %1 = bitcast %struct.candidate* %0 to i8*, !dbg !8497
  call void @free(i8* %1), !dbg !8498
  %2 = load %struct.basic_block_def**, %struct.basic_block_def*** @bblst_table, align 8, !dbg !8499
  %3 = bitcast %struct.basic_block_def** %2 to i8*, !dbg !8499
  call void @free(i8* %3), !dbg !8500
  %4 = load %struct.edge_def**, %struct.edge_def*** @edgelst_table, align 8, !dbg !8501
  %5 = bitcast %struct.edge_def** %4 to i8*, !dbg !8501
  call void @free(i8* %5), !dbg !8502
  ret void, !dbg !8503
}

declare dso_local void @sched_finish_ready_list() #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_block_dependencies(i32 %bb) #0 !dbg !8504 {
entry:
  %bb.addr = alloca i32, align 4
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  store i32 %bb, i32* %bb.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bb.addr, metadata !8505, metadata !DIExpression()), !dbg !8506
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !8507, metadata !DIExpression()), !dbg !8508
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !8509, metadata !DIExpression()), !dbg !8510
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8511
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8511
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8511
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8511
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 2, !dbg !8511
  %2 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !8511
  %tobool = icmp ne %struct.VEC_basic_block_gc* %2, null, !dbg !8511
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8511

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8511
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !8511
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !8511
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !8511
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 2, !dbg !8511
  %5 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !8511
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %5, i32 0, i32 0, !dbg !8511
  br label %cond.end, !dbg !8511

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8511

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8511
  %6 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8511
  %7 = load i32*, i32** @ebb_head, align 8, !dbg !8511
  %8 = load i32, i32* %bb.addr, align 4, !dbg !8511
  %idxprom = sext i32 %8 to i64, !dbg !8511
  %arrayidx = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !8511
  %9 = load i32, i32* %arrayidx, align 4, !dbg !8511
  %idxprom4 = sext i32 %9 to i64, !dbg !8511
  %arrayidx5 = getelementptr inbounds i32, i32* %6, i64 %idxprom4, !dbg !8511
  %10 = load i32, i32* %arrayidx5, align 4, !dbg !8511
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %10), !dbg !8511
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8512
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !8512
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !8512
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !8512
  %x_basic_block_info8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 2, !dbg !8512
  %13 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info8, align 8, !dbg !8512
  %tobool9 = icmp ne %struct.VEC_basic_block_gc* %13, null, !dbg !8512
  br i1 %tobool9, label %cond.true10, label %cond.false15, !dbg !8512

cond.true10:                                      ; preds = %cond.end
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8512
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !8512
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !8512
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !8512
  %x_basic_block_info13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 2, !dbg !8512
  %16 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info13, align 8, !dbg !8512
  %base14 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %16, i32 0, i32 0, !dbg !8512
  br label %cond.end16, !dbg !8512

cond.false15:                                     ; preds = %cond.end
  br label %cond.end16, !dbg !8512

cond.end16:                                       ; preds = %cond.false15, %cond.true10
  %cond17 = phi %struct.VEC_basic_block_base* [ %base14, %cond.true10 ], [ null, %cond.false15 ], !dbg !8512
  %17 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8512
  %18 = load i32*, i32** @ebb_head, align 8, !dbg !8512
  %19 = load i32, i32* %bb.addr, align 4, !dbg !8512
  %add = add nsw i32 %19, 1, !dbg !8512
  %idxprom18 = sext i32 %add to i64, !dbg !8512
  %arrayidx19 = getelementptr inbounds i32, i32* %18, i64 %idxprom18, !dbg !8512
  %20 = load i32, i32* %arrayidx19, align 4, !dbg !8512
  %sub = sub nsw i32 %20, 1, !dbg !8512
  %idxprom20 = sext i32 %sub to i64, !dbg !8512
  %arrayidx21 = getelementptr inbounds i32, i32* %17, i64 %idxprom20, !dbg !8512
  %21 = load i32, i32* %arrayidx21, align 4, !dbg !8512
  %call22 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond17, i32 %21), !dbg !8512
  call void @get_ebb_head_tail(%struct.basic_block_def* %call, %struct.basic_block_def* %call22, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !8513
  %22 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !8514
  %23 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !8516
  %call23 = call i32 @no_real_insns_p(%struct.rtx_def* %22, %struct.rtx_def* %23), !dbg !8517
  %tobool24 = icmp ne i32 %call23, 0, !dbg !8517
  br i1 %tobool24, label %if.then, label %if.end, !dbg !8518

if.then:                                          ; preds = %cond.end16
  br label %return, !dbg !8519

if.end:                                           ; preds = %cond.end16
  %24 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !8520
  %25 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !8521
  call void @sched_free_deps(%struct.rtx_def* %24, %struct.rtx_def* %25, i8 zeroext 1), !dbg !8522
  br label %return, !dbg !8523

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !8523
}

declare dso_local zeroext i8 @deps_pools_are_empty_p() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

declare dso_local zeroext i8 @maybe_skip_selective_scheduling() #2

declare dso_local void @run_selective_scheduling() #2

declare dso_local void @schedule_ebbs() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2463, !2464, !2465}
!llvm.ident = !{!2466}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "nr_regions", scope: !2, file: !3, line: 85, type: !990, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !989, globals: !2200, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "sched-rgn.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !147, !152, !157, !176, !183, !190, !384, !507, !513, !518, !661, !695, !709, !713, !720, !762, !769, !945, !975, !981}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !142, line: 363, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146}
!144 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!147 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !142, line: 355, baseType: !7, size: 32, elements: !148)
!148 = !{!149, !150, !151}
!149 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!150 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!151 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!152 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !153, line: 474, baseType: !7, size: 32, elements: !154)
!153 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!154 = !{!155, !156}
!155 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!156 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!157 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !158, line: 280, baseType: !7, size: 32, elements: !159)
!158 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!159 = !{!160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175}
!160 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !158, line: 1817, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !158, line: 1805, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189}
!185 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!190 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !158, line: 39, baseType: !7, size: 32, elements: !191)
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383}
!192 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!281 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!282 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!283 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!284 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!285 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!286 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!287 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!288 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!289 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!290 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!291 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!292 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!293 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!294 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!295 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!296 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!297 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!298 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!299 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!300 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!301 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!302 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!303 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!304 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!305 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!307 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!308 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!309 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!310 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!311 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!312 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!313 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!314 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!315 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!316 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!317 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!318 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!319 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!320 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!321 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!322 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!323 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!324 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!325 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!326 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!327 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!328 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!329 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!330 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!331 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!332 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!333 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!334 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!335 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!336 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!337 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!338 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!339 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!340 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!341 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!342 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!343 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!344 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!356 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!357 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!358 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!359 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!360 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!361 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!377 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!378 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!379 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!380 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!381 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!382 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!383 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !385, line: 82, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506}
!387 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!391 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!392 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!393 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!394 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!395 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!396 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!397 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!398 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!399 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!400 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!401 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!402 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!403 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!404 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!405 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!406 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!407 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!408 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!409 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!410 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!411 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!412 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!413 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!414 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!415 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!416 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!417 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!418 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!419 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!420 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!421 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!422 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!423 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!424 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!425 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!426 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!427 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!428 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!429 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!430 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!431 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!432 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!433 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!434 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!435 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!436 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!437 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!438 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!439 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!440 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!441 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!442 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!443 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!444 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!445 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!446 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!447 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!448 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!449 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!450 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!451 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!452 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!453 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!454 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!455 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!456 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!457 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!458 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!459 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!460 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!461 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!462 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!463 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!464 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!465 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!466 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!467 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!468 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!469 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!470 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!471 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!472 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!473 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!474 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!475 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!476 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!477 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!478 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!479 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!480 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!481 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!482 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!483 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!484 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!485 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!486 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!487 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!488 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!489 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!490 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!491 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!492 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!493 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!494 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!495 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!496 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!497 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!498 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!499 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!500 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!501 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!502 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!503 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!504 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!505 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!506 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!507 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "post_call_group", file: !508, line: 432, baseType: !7, size: 32, elements: !509)
!508 = !DIFile(filename: "./sched-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!509 = !{!510, !511, !512}
!510 = !DIEnumerator(name: "not_post_call", value: 0, isUnsigned: true)
!511 = !DIEnumerator(name: "post_call", value: 1, isUnsigned: true)
!512 = !DIEnumerator(name: "post_call_initial", value: 2, isUnsigned: true)
!513 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_pending_barrier_mode", file: !508, line: 424, baseType: !7, size: 32, elements: !514)
!514 = !{!515, !516, !517}
!515 = !DIEnumerator(name: "NOT_A_BARRIER", value: 0, isUnsigned: true)
!516 = !DIEnumerator(name: "MOVE_BARRIER", value: 1, isUnsigned: true)
!517 = !DIEnumerator(name: "TRUE_BARRIER", value: 2, isUnsigned: true)
!518 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !519, line: 45, baseType: !7, size: 32, elements: !520)
!519 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!520 = !{!521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660}
!521 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!522 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!523 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!524 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!525 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!526 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!527 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!528 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!529 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!530 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!531 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!532 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!533 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!534 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!535 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!536 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!537 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!538 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!539 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!540 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!541 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!542 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!543 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!544 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!545 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!546 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!547 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!548 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!549 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!550 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!551 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!552 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!553 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!554 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!555 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!556 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!557 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!558 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!559 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!560 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!561 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!562 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!563 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!564 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!565 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!566 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!567 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!568 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!569 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!570 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!571 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!572 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!573 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!574 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!575 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!576 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!577 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!578 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!579 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!580 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!581 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!582 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!583 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!584 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!585 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!586 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!587 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!588 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!589 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!590 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!591 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!592 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!593 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!594 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!595 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!596 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!597 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!598 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!599 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!600 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!601 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!602 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!603 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!604 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!605 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!606 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!607 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!608 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!609 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!610 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!611 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!612 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!613 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!614 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!615 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!616 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!617 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!618 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!619 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!620 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!621 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!622 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!623 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!624 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!625 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!626 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!627 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!628 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!629 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!630 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!631 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!632 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!633 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!634 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!635 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!636 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!637 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!638 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!639 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!640 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!641 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!642 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!643 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!644 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!645 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!646 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!647 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!648 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!649 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!650 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!651 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!652 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!653 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!654 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!655 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!656 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!657 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!658 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!659 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!660 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!661 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !519, line: 836, baseType: !7, size: 32, elements: !662)
!662 = !{!663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694}
!663 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!664 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!665 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!666 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!667 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!668 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!669 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!670 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!671 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!672 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!673 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!674 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!675 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!676 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!677 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!678 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!679 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!680 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!681 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!682 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!683 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!684 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!685 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!686 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!687 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!688 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!689 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!690 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!691 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!692 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!693 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!694 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!695 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !142, line: 295, baseType: !7, size: 32, elements: !696)
!696 = !{!697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708}
!697 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!698 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!699 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!700 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!701 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!702 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!703 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!704 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!705 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!706 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!707 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!708 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!709 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !142, line: 912, baseType: !7, size: 32, elements: !710)
!710 = !{!711, !712}
!711 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!712 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!713 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "sched_pass_id_t", file: !508, line: 37, baseType: !7, size: 32, elements: !714)
!714 = !{!715, !716, !717, !718, !719}
!715 = !DIEnumerator(name: "SCHED_PASS_UNKNOWN", value: 0, isUnsigned: true)
!716 = !DIEnumerator(name: "SCHED_RGN_PASS", value: 1, isUnsigned: true)
!717 = !DIEnumerator(name: "SCHED_EBB_PASS", value: 2, isUnsigned: true)
!718 = !DIEnumerator(name: "SCHED_SMS_PASS", value: 3, isUnsigned: true)
!719 = !DIEnumerator(name: "SCHED_SEL_PASS", value: 4, isUnsigned: true)
!720 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_counter", file: !721, line: 27, baseType: !7, size: 32, elements: !722)
!721 = !DIFile(filename: "./dbgcnt.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!722 = !{!723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761}
!723 = !DIEnumerator(name: "auto_inc_dec", value: 0, isUnsigned: true)
!724 = !DIEnumerator(name: "ccp", value: 1, isUnsigned: true)
!725 = !DIEnumerator(name: "cfg_cleanup", value: 2, isUnsigned: true)
!726 = !DIEnumerator(name: "cse2_move2add", value: 3, isUnsigned: true)
!727 = !DIEnumerator(name: "cprop", value: 4, isUnsigned: true)
!728 = !DIEnumerator(name: "dce", value: 5, isUnsigned: true)
!729 = !DIEnumerator(name: "dce_fast", value: 6, isUnsigned: true)
!730 = !DIEnumerator(name: "dce_ud", value: 7, isUnsigned: true)
!731 = !DIEnumerator(name: "delete_trivial_dead", value: 8, isUnsigned: true)
!732 = !DIEnumerator(name: "df_byte_scan", value: 9, isUnsigned: true)
!733 = !DIEnumerator(name: "dse", value: 10, isUnsigned: true)
!734 = !DIEnumerator(name: "dse1", value: 11, isUnsigned: true)
!735 = !DIEnumerator(name: "dse2", value: 12, isUnsigned: true)
!736 = !DIEnumerator(name: "gcse2_delete", value: 13, isUnsigned: true)
!737 = !DIEnumerator(name: "global_alloc_at_func", value: 14, isUnsigned: true)
!738 = !DIEnumerator(name: "global_alloc_at_reg", value: 15, isUnsigned: true)
!739 = !DIEnumerator(name: "hoist", value: 16, isUnsigned: true)
!740 = !DIEnumerator(name: "ia64_sched2", value: 17, isUnsigned: true)
!741 = !DIEnumerator(name: "if_conversion", value: 18, isUnsigned: true)
!742 = !DIEnumerator(name: "if_after_combine", value: 19, isUnsigned: true)
!743 = !DIEnumerator(name: "if_after_reload", value: 20, isUnsigned: true)
!744 = !DIEnumerator(name: "local_alloc_for_sched", value: 21, isUnsigned: true)
!745 = !DIEnumerator(name: "postreload_cse", value: 22, isUnsigned: true)
!746 = !DIEnumerator(name: "pre", value: 23, isUnsigned: true)
!747 = !DIEnumerator(name: "pre_insn", value: 24, isUnsigned: true)
!748 = !DIEnumerator(name: "treepre_insert", value: 25, isUnsigned: true)
!749 = !DIEnumerator(name: "sched2_func", value: 26, isUnsigned: true)
!750 = !DIEnumerator(name: "sched_block", value: 27, isUnsigned: true)
!751 = !DIEnumerator(name: "sched_func", value: 28, isUnsigned: true)
!752 = !DIEnumerator(name: "sched_insn", value: 29, isUnsigned: true)
!753 = !DIEnumerator(name: "sched_region", value: 30, isUnsigned: true)
!754 = !DIEnumerator(name: "sel_sched_cnt", value: 31, isUnsigned: true)
!755 = !DIEnumerator(name: "sel_sched_region_cnt", value: 32, isUnsigned: true)
!756 = !DIEnumerator(name: "sel_sched_insn_cnt", value: 33, isUnsigned: true)
!757 = !DIEnumerator(name: "sms_sched_loop", value: 34, isUnsigned: true)
!758 = !DIEnumerator(name: "store_motion", value: 35, isUnsigned: true)
!759 = !DIEnumerator(name: "split_for_sched2", value: 36, isUnsigned: true)
!760 = !DIEnumerator(name: "tail_call", value: 37, isUnsigned: true)
!761 = !DIEnumerator(name: "debug_counter_number_of_counters", value: 38, isUnsigned: true)
!762 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !763, line: 104, baseType: !7, size: 32, elements: !764)
!763 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!764 = !{!765, !766, !767, !768}
!765 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!766 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!767 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!768 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!769 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !770, line: 74, baseType: !7, size: 32, elements: !771)
!770 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!771 = !{!772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944}
!772 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!773 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!774 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!775 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!776 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!777 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!778 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!779 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!780 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!781 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!782 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!783 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!784 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!785 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!786 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!787 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!788 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!789 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!790 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!791 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!792 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!793 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!794 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!795 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!796 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!797 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!798 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!799 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!800 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!801 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!802 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!803 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!804 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!805 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!806 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!807 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!808 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!809 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!810 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!811 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!812 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!813 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!814 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!815 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!816 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!817 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!818 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!819 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!820 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!821 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!822 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!823 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!824 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!825 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!826 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!827 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!828 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!829 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!830 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!831 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!832 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!833 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!834 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!835 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!836 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!837 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!838 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!839 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!840 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!841 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!842 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!843 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!844 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!845 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!846 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!847 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!848 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!849 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!850 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!851 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!852 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!853 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!854 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!855 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!856 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!857 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!858 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!859 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!860 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!861 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!862 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!863 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!864 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!865 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!866 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!867 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!868 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!869 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!870 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!871 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!872 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!873 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!874 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!875 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!876 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!877 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!878 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!879 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!880 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!881 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!882 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!883 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!884 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!885 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!886 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!887 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!888 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!889 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!890 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!891 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!892 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!893 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!894 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!895 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!896 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!897 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!898 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!899 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!900 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!901 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!902 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!903 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!904 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!905 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!906 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!907 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!908 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!909 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!910 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!911 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!912 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!913 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!914 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!915 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!916 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!917 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!918 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!919 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!920 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!921 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!922 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!923 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!924 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!925 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!926 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!927 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!928 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!929 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!930 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!931 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!932 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!933 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!934 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!935 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!936 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!937 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!938 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!939 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!940 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!941 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!942 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!943 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!944 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!945 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_class", file: !153, line: 1188, baseType: !7, size: 32, elements: !946)
!946 = !{!947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974}
!947 = !DIEnumerator(name: "NO_REGS", value: 0, isUnsigned: true)
!948 = !DIEnumerator(name: "AREG", value: 1, isUnsigned: true)
!949 = !DIEnumerator(name: "DREG", value: 2, isUnsigned: true)
!950 = !DIEnumerator(name: "CREG", value: 3, isUnsigned: true)
!951 = !DIEnumerator(name: "BREG", value: 4, isUnsigned: true)
!952 = !DIEnumerator(name: "SIREG", value: 5, isUnsigned: true)
!953 = !DIEnumerator(name: "DIREG", value: 6, isUnsigned: true)
!954 = !DIEnumerator(name: "AD_REGS", value: 7, isUnsigned: true)
!955 = !DIEnumerator(name: "CLOBBERED_REGS", value: 8, isUnsigned: true)
!956 = !DIEnumerator(name: "Q_REGS", value: 9, isUnsigned: true)
!957 = !DIEnumerator(name: "NON_Q_REGS", value: 10, isUnsigned: true)
!958 = !DIEnumerator(name: "INDEX_REGS", value: 11, isUnsigned: true)
!959 = !DIEnumerator(name: "LEGACY_REGS", value: 12, isUnsigned: true)
!960 = !DIEnumerator(name: "GENERAL_REGS", value: 13, isUnsigned: true)
!961 = !DIEnumerator(name: "FP_TOP_REG", value: 14, isUnsigned: true)
!962 = !DIEnumerator(name: "FP_SECOND_REG", value: 15, isUnsigned: true)
!963 = !DIEnumerator(name: "FLOAT_REGS", value: 16, isUnsigned: true)
!964 = !DIEnumerator(name: "SSE_FIRST_REG", value: 17, isUnsigned: true)
!965 = !DIEnumerator(name: "SSE_REGS", value: 18, isUnsigned: true)
!966 = !DIEnumerator(name: "MMX_REGS", value: 19, isUnsigned: true)
!967 = !DIEnumerator(name: "FP_TOP_SSE_REGS", value: 20, isUnsigned: true)
!968 = !DIEnumerator(name: "FP_SECOND_SSE_REGS", value: 21, isUnsigned: true)
!969 = !DIEnumerator(name: "FLOAT_SSE_REGS", value: 22, isUnsigned: true)
!970 = !DIEnumerator(name: "FLOAT_INT_REGS", value: 23, isUnsigned: true)
!971 = !DIEnumerator(name: "INT_SSE_REGS", value: 24, isUnsigned: true)
!972 = !DIEnumerator(name: "FLOAT_INT_SSE_REGS", value: 25, isUnsigned: true)
!973 = !DIEnumerator(name: "ALL_REGS", value: 26, isUnsigned: true)
!974 = !DIEnumerator(name: "LIM_REG_CLASSES", value: 27, isUnsigned: true)
!975 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "SPEC_TYPES_OFFSETS", file: !508, line: 958, baseType: !7, size: 32, elements: !976)
!976 = !{!977, !978, !979, !980}
!977 = !DIEnumerator(name: "BEGIN_DATA_BITS_OFFSET", value: 0, isUnsigned: true)
!978 = !DIEnumerator(name: "BE_IN_DATA_BITS_OFFSET", value: 6, isUnsigned: true)
!979 = !DIEnumerator(name: "BEGIN_CONTROL_BITS_OFFSET", value: 12, isUnsigned: true)
!980 = !DIEnumerator(name: "BE_IN_CONTROL_BITS_OFFSET", value: 18, isUnsigned: true)
!981 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "INSN_TRAP_CLASS", file: !508, line: 1121, baseType: !7, size: 32, elements: !982)
!982 = !{!983, !984, !985, !986, !987, !988}
!983 = !DIEnumerator(name: "TRAP_FREE", value: 0, isUnsigned: true)
!984 = !DIEnumerator(name: "IFREE", value: 1, isUnsigned: true)
!985 = !DIEnumerator(name: "PFREE_CANDIDATE", value: 2, isUnsigned: true)
!986 = !DIEnumerator(name: "PRISKY_CANDIDATE", value: 3, isUnsigned: true)
!987 = !DIEnumerator(name: "IRISKY", value: 4, isUnsigned: true)
!988 = !DIEnumerator(name: "TRAP_RISKY", value: 5, isUnsigned: true)
!989 = !{!990, !991, !7, !518, !992, !993, !1474, !2167, !2168, !1070, !997, !2176, !2183, !2184, !2185, !2197, !5}
!990 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !990, size: 64)
!992 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !994, size: 64)
!994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "deps", file: !508, line: 451, size: 1472, elements: !995)
!995 = !{!996, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2161, !2164, !2165, !2166}
!996 = !DIDerivedType(tag: DW_TAG_member, name: "pending_read_insns", scope: !994, file: !508, line: 463, baseType: !997, size: 64)
!997 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !998, line: 50, baseType: !999)
!998 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1000, size: 64)
!1000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !519, line: 240, size: 384, elements: !1001)
!1001 = !{!1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012}
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1000, file: !519, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1000, file: !519, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1000, file: !519, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1000, file: !519, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1000, file: !519, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1000, file: !519, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1000, file: !519, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1000, file: !519, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1000, file: !519, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1000, file: !519, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1000, file: !519, line: 321, baseType: !1013, size: 320, offset: 64)
!1013 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !519, line: 315, size: 320, elements: !1014)
!1014 = !{!1015, !2105, !2107, !2136, !2137}
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1013, file: !519, line: 316, baseType: !1016, size: 64)
!1016 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1017, size: 64, elements: !1035)
!1017 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !519, line: 183, baseType: !1018)
!1018 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !519, line: 166, size: 64, elements: !1019)
!1019 = !{!1020, !1021, !1022, !1026, !1027, !1037, !1038, !1050, !1053, !1116, !2083, !2084, !2095, !2102}
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1018, file: !519, line: 168, baseType: !990, size: 32)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1018, file: !519, line: 169, baseType: !7, size: 32)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1018, file: !519, line: 170, baseType: !1023, size: 64)
!1023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1024, size: 64)
!1024 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1025)
!1025 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1018, file: !519, line: 171, baseType: !997, size: 64)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1018, file: !519, line: 172, baseType: !1028, size: 64)
!1028 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !998, line: 53, baseType: !1029)
!1029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1030, size: 64)
!1030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !519, line: 359, size: 128, elements: !1031)
!1031 = !{!1032, !1033}
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1030, file: !519, line: 360, baseType: !990, size: 32)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1030, file: !519, line: 361, baseType: !1034, size: 64, offset: 64)
!1034 = !DICompositeType(tag: DW_TAG_array_type, baseType: !997, size: 64, elements: !1035)
!1035 = !{!1036}
!1036 = !DISubrange(count: 1)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1018, file: !519, line: 173, baseType: !5, size: 32)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1018, file: !519, line: 174, baseType: !1039, size: 32)
!1039 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !519, line: 133, baseType: !1040)
!1040 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !519, line: 115, size: 32, elements: !1041)
!1041 = !{!1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049}
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1040, file: !519, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1040, file: !519, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1040, file: !519, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1040, file: !519, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1040, file: !519, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1040, file: !519, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1040, file: !519, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1040, file: !519, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1018, file: !519, line: 175, baseType: !1051, size: 64)
!1051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1052, size: 64)
!1052 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !519, line: 175, flags: DIFlagFwdDecl)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1018, file: !519, line: 176, baseType: !1054, size: 64)
!1054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1055, size: 64)
!1055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1056, line: 75, size: 256, elements: !1057)
!1056 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1057 = !{!1058, !1073, !1074, !1075}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1055, file: !1056, line: 76, baseType: !1059, size: 64)
!1059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1060, size: 64)
!1060 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1056, line: 68, baseType: !1061)
!1061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1056, line: 63, size: 320, elements: !1062)
!1062 = !{!1063, !1065, !1066, !1067}
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1061, file: !1056, line: 64, baseType: !1064, size: 64)
!1064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1061, size: 64)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1061, file: !1056, line: 65, baseType: !1064, size: 64, offset: 64)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1061, file: !1056, line: 66, baseType: !7, size: 32, offset: 128)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1061, file: !1056, line: 67, baseType: !1068, size: 128, offset: 192)
!1068 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1069, size: 128, elements: !1071)
!1069 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1056, line: 29, baseType: !1070)
!1070 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1071 = !{!1072}
!1072 = !DISubrange(count: 2)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1055, file: !1056, line: 77, baseType: !1059, size: 64, offset: 64)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1055, file: !1056, line: 78, baseType: !7, size: 32, offset: 128)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1055, file: !1056, line: 79, baseType: !1076, size: 64, offset: 192)
!1076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1077, size: 64)
!1077 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1056, line: 49, baseType: !1078)
!1078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1056, line: 45, size: 832, elements: !1079)
!1079 = !{!1080, !1081, !1082}
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1078, file: !1056, line: 46, baseType: !1064, size: 64)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1078, file: !1056, line: 47, baseType: !1054, size: 64, offset: 64)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1078, file: !1056, line: 48, baseType: !1083, size: 704, offset: 128)
!1083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1084, line: 164, size: 704, elements: !1085)
!1084 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1085 = !{!1086, !1088, !1099, !1100, !1101, !1102, !1103, !1104, !1108, !1112, !1113, !1114, !1115}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1083, file: !1084, line: 166, baseType: !1087, size: 64)
!1087 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1083, file: !1084, line: 167, baseType: !1089, size: 64, offset: 64)
!1089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1090, size: 64)
!1090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1084, line: 157, size: 192, elements: !1091)
!1091 = !{!1092, !1094, !1095}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1090, file: !1084, line: 159, baseType: !1093, size: 64)
!1093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1025, size: 64)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1090, file: !1084, line: 160, baseType: !1089, size: 64, offset: 64)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1090, file: !1084, line: 161, baseType: !1096, size: 32, offset: 128)
!1096 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1025, size: 32, elements: !1097)
!1097 = !{!1098}
!1098 = !DISubrange(count: 4)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1083, file: !1084, line: 168, baseType: !1093, size: 64, offset: 128)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1083, file: !1084, line: 169, baseType: !1093, size: 64, offset: 192)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1083, file: !1084, line: 170, baseType: !1093, size: 64, offset: 256)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1083, file: !1084, line: 171, baseType: !1087, size: 64, offset: 320)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1083, file: !1084, line: 172, baseType: !990, size: 32, offset: 384)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1083, file: !1084, line: 176, baseType: !1105, size: 64, offset: 448)
!1105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1106, size: 64)
!1106 = !DISubroutineType(types: !1107)
!1107 = !{!1089, !992, !1087}
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1083, file: !1084, line: 177, baseType: !1109, size: 64, offset: 512)
!1109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1110, size: 64)
!1110 = !DISubroutineType(types: !1111)
!1111 = !{null, !992, !1089}
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1083, file: !1084, line: 178, baseType: !992, size: 64, offset: 576)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1083, file: !1084, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1083, file: !1084, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1083, file: !1084, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1018, file: !519, line: 177, baseType: !1117, size: 64)
!1117 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !998, line: 56, baseType: !1118)
!1118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1119, size: 64)
!1119 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !158, line: 3371, size: 1792, elements: !1120)
!1120 = !{!1121, !1154, !1160, !1171, !1190, !1201, !1206, !1213, !1219, !1233, !1245, !1283, !1288, !1316, !1324, !1325, !1330, !1339, !1345, !1350, !1354, !1358, !1719, !1768, !1774, !1780, !1787, !1813, !1827, !1844, !1856, !1878, !1893, !2065}
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1119, file: !158, line: 3372, baseType: !1122, size: 64)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !158, line: 360, size: 64, elements: !1123)
!1123 = !{!1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1122, file: !158, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1122, file: !158, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1122, file: !158, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1122, file: !158, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1122, file: !158, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1122, file: !158, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1122, file: !158, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1122, file: !158, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1122, file: !158, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1122, file: !158, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1122, file: !158, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1122, file: !158, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1122, file: !158, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1122, file: !158, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1122, file: !158, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1122, file: !158, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1122, file: !158, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1122, file: !158, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1122, file: !158, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1122, file: !158, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1122, file: !158, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1122, file: !158, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1122, file: !158, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1122, file: !158, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1122, file: !158, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1122, file: !158, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1122, file: !158, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1122, file: !158, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1122, file: !158, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1122, file: !158, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1119, file: !158, line: 3373, baseType: !1155, size: 192)
!1155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !158, line: 402, size: 192, elements: !1156)
!1156 = !{!1157, !1158, !1159}
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1155, file: !158, line: 403, baseType: !1122, size: 64)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1155, file: !158, line: 404, baseType: !1117, size: 64, offset: 64)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1155, file: !158, line: 405, baseType: !1117, size: 64, offset: 128)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1119, file: !158, line: 3374, baseType: !1161, size: 320)
!1161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !158, line: 1384, size: 320, elements: !1162)
!1162 = !{!1163, !1164}
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1161, file: !158, line: 1385, baseType: !1155, size: 192)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1161, file: !158, line: 1386, baseType: !1165, size: 128, offset: 192)
!1165 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1166, line: 58, baseType: !1167)
!1166 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1166, line: 54, size: 128, elements: !1168)
!1168 = !{!1169, !1170}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1167, file: !1166, line: 56, baseType: !1070, size: 64)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1167, file: !1166, line: 57, baseType: !1087, size: 64, offset: 64)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1119, file: !158, line: 3375, baseType: !1172, size: 256)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !158, line: 1397, size: 256, elements: !1173)
!1173 = !{!1174, !1175}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1172, file: !158, line: 1398, baseType: !1155, size: 192)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1172, file: !158, line: 1399, baseType: !1176, size: 64, offset: 192)
!1176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1177, size: 64)
!1177 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1178, line: 52, size: 256, elements: !1179)
!1178 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1179 = !{!1180, !1181, !1182, !1183, !1184, !1185, !1186}
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1177, file: !1178, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1177, file: !1178, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1177, file: !1178, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1177, file: !1178, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1177, file: !1178, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1177, file: !1178, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1177, file: !1178, line: 62, baseType: !1187, size: 192, offset: 64)
!1187 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1070, size: 192, elements: !1188)
!1188 = !{!1189}
!1189 = !DISubrange(count: 3)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1119, file: !158, line: 3376, baseType: !1191, size: 256)
!1191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !158, line: 1408, size: 256, elements: !1192)
!1192 = !{!1193, !1194}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1191, file: !158, line: 1409, baseType: !1155, size: 192)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1191, file: !158, line: 1410, baseType: !1195, size: 64, offset: 192)
!1195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1197, line: 27, size: 192, elements: !1198)
!1197 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1198 = !{!1199, !1200}
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1196, file: !1197, line: 29, baseType: !1165, size: 128)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1196, file: !1197, line: 30, baseType: !5, size: 32, offset: 128)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1119, file: !158, line: 3377, baseType: !1202, size: 256)
!1202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !158, line: 1437, size: 256, elements: !1203)
!1203 = !{!1204, !1205}
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1202, file: !158, line: 1438, baseType: !1155, size: 192)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1202, file: !158, line: 1439, baseType: !1117, size: 64, offset: 192)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1119, file: !158, line: 3378, baseType: !1207, size: 256)
!1207 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !158, line: 1418, size: 256, elements: !1208)
!1208 = !{!1209, !1210, !1211}
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1207, file: !158, line: 1419, baseType: !1155, size: 192)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1207, file: !158, line: 1420, baseType: !990, size: 32, offset: 192)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1207, file: !158, line: 1421, baseType: !1212, size: 8, offset: 224)
!1212 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1025, size: 8, elements: !1035)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1119, file: !158, line: 3379, baseType: !1214, size: 320)
!1214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !158, line: 1428, size: 320, elements: !1215)
!1215 = !{!1216, !1217, !1218}
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1214, file: !158, line: 1429, baseType: !1155, size: 192)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1214, file: !158, line: 1430, baseType: !1117, size: 64, offset: 192)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1214, file: !158, line: 1431, baseType: !1117, size: 64, offset: 256)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1119, file: !158, line: 3380, baseType: !1220, size: 320)
!1220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !158, line: 1460, size: 320, elements: !1221)
!1221 = !{!1222, !1223}
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1220, file: !158, line: 1461, baseType: !1155, size: 192)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1220, file: !158, line: 1462, baseType: !1224, size: 128, offset: 192)
!1224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1225, line: 31, size: 128, elements: !1226)
!1225 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1226 = !{!1227, !1231, !1232}
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1224, file: !1225, line: 32, baseType: !1228, size: 64)
!1228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1229, size: 64)
!1229 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1230)
!1230 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1224, file: !1225, line: 33, baseType: !7, size: 32, offset: 64)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1224, file: !1225, line: 34, baseType: !7, size: 32, offset: 96)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1119, file: !158, line: 3381, baseType: !1234, size: 384)
!1234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !158, line: 2507, size: 384, elements: !1235)
!1235 = !{!1236, !1237, !1242, !1243, !1244}
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1234, file: !158, line: 2508, baseType: !1155, size: 192)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1234, file: !158, line: 2509, baseType: !1238, size: 32, offset: 192)
!1238 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1239, line: 58, baseType: !1240)
!1239 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1240 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1241, line: 44, baseType: !7)
!1241 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1234, file: !158, line: 2510, baseType: !7, size: 32, offset: 224)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1234, file: !158, line: 2511, baseType: !1117, size: 64, offset: 256)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1234, file: !158, line: 2512, baseType: !1117, size: 64, offset: 320)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1119, file: !158, line: 3382, baseType: !1246, size: 896)
!1246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !158, line: 2652, size: 896, elements: !1247)
!1247 = !{!1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280}
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1246, file: !158, line: 2653, baseType: !1234, size: 384)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1246, file: !158, line: 2654, baseType: !1117, size: 64, offset: 384)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1246, file: !158, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1246, file: !158, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1246, file: !158, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1246, file: !158, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1246, file: !158, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1246, file: !158, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1246, file: !158, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1246, file: !158, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1246, file: !158, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1246, file: !158, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1246, file: !158, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1246, file: !158, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1246, file: !158, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1246, file: !158, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1246, file: !158, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1246, file: !158, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1246, file: !158, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1246, file: !158, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1246, file: !158, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1246, file: !158, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1246, file: !158, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1246, file: !158, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1246, file: !158, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1246, file: !158, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1246, file: !158, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1246, file: !158, line: 2703, baseType: !7, size: 32, offset: 512)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1246, file: !158, line: 2705, baseType: !1117, size: 64, offset: 576)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1246, file: !158, line: 2706, baseType: !1117, size: 64, offset: 640)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1246, file: !158, line: 2707, baseType: !1117, size: 64, offset: 704)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1246, file: !158, line: 2708, baseType: !1117, size: 64, offset: 768)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1246, file: !158, line: 2711, baseType: !1281, size: 64, offset: 832)
!1281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1282, size: 64)
!1282 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !158, line: 2711, flags: DIFlagFwdDecl)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1119, file: !158, line: 3383, baseType: !1284, size: 960)
!1284 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !158, line: 2756, size: 960, elements: !1285)
!1285 = !{!1286, !1287}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1284, file: !158, line: 2757, baseType: !1246, size: 896)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1284, file: !158, line: 2758, baseType: !997, size: 64, offset: 896)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1119, file: !158, line: 3384, baseType: !1289, size: 1472)
!1289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !158, line: 3114, size: 1472, elements: !1290)
!1290 = !{!1291, !1312, !1313, !1314, !1315}
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1289, file: !158, line: 3115, baseType: !1292, size: 1216)
!1292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !158, line: 2984, size: 1216, elements: !1293)
!1293 = !{!1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311}
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1292, file: !158, line: 2985, baseType: !1284, size: 960)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1292, file: !158, line: 2986, baseType: !1117, size: 64, offset: 960)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1292, file: !158, line: 2987, baseType: !1117, size: 64, offset: 1024)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1292, file: !158, line: 2988, baseType: !1117, size: 64, offset: 1088)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1292, file: !158, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1292, file: !158, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1292, file: !158, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1292, file: !158, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1292, file: !158, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1292, file: !158, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1292, file: !158, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1292, file: !158, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1292, file: !158, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1292, file: !158, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1292, file: !158, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1292, file: !158, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1292, file: !158, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1292, file: !158, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1289, file: !158, line: 3117, baseType: !1117, size: 64, offset: 1216)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1289, file: !158, line: 3119, baseType: !1117, size: 64, offset: 1280)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1289, file: !158, line: 3121, baseType: !1117, size: 64, offset: 1344)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1289, file: !158, line: 3123, baseType: !1117, size: 64, offset: 1408)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1119, file: !158, line: 3385, baseType: !1317, size: 1088)
!1317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !158, line: 2874, size: 1088, elements: !1318)
!1318 = !{!1319, !1320, !1321}
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1317, file: !158, line: 2875, baseType: !1284, size: 960)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1317, file: !158, line: 2876, baseType: !997, size: 64, offset: 960)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1317, file: !158, line: 2877, baseType: !1322, size: 64, offset: 1024)
!1322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1323, size: 64)
!1323 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !158, line: 2856, flags: DIFlagFwdDecl)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1119, file: !158, line: 3386, baseType: !1292, size: 1216)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1119, file: !158, line: 3387, baseType: !1326, size: 1280)
!1326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !158, line: 3093, size: 1280, elements: !1327)
!1327 = !{!1328, !1329}
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1326, file: !158, line: 3094, baseType: !1292, size: 1216)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1326, file: !158, line: 3095, baseType: !1322, size: 64, offset: 1216)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1119, file: !158, line: 3388, baseType: !1331, size: 1216)
!1331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !158, line: 2824, size: 1216, elements: !1332)
!1332 = !{!1333, !1334, !1335, !1336, !1337, !1338}
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1331, file: !158, line: 2825, baseType: !1246, size: 896)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1331, file: !158, line: 2827, baseType: !1117, size: 64, offset: 896)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1331, file: !158, line: 2828, baseType: !1117, size: 64, offset: 960)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1331, file: !158, line: 2829, baseType: !1117, size: 64, offset: 1024)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1331, file: !158, line: 2830, baseType: !1117, size: 64, offset: 1088)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1331, file: !158, line: 2831, baseType: !1117, size: 64, offset: 1152)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1119, file: !158, line: 3389, baseType: !1340, size: 1024)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !158, line: 2850, size: 1024, elements: !1341)
!1341 = !{!1342, !1343, !1344}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1340, file: !158, line: 2851, baseType: !1284, size: 960)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1340, file: !158, line: 2852, baseType: !990, size: 32, offset: 960)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1340, file: !158, line: 2853, baseType: !990, size: 32, offset: 992)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1119, file: !158, line: 3390, baseType: !1346, size: 1024)
!1346 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !158, line: 2857, size: 1024, elements: !1347)
!1347 = !{!1348, !1349}
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1346, file: !158, line: 2858, baseType: !1284, size: 960)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1346, file: !158, line: 2859, baseType: !1322, size: 64, offset: 960)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1119, file: !158, line: 3391, baseType: !1351, size: 960)
!1351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !158, line: 2862, size: 960, elements: !1352)
!1352 = !{!1353}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1351, file: !158, line: 2863, baseType: !1284, size: 960)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1119, file: !158, line: 3392, baseType: !1355, size: 1472)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !158, line: 3304, size: 1472, elements: !1356)
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1355, file: !158, line: 3305, baseType: !1289, size: 1472)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1119, file: !158, line: 3393, baseType: !1359, size: 1792)
!1359 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !158, line: 3248, size: 1792, elements: !1360)
!1360 = !{!1361, !1362, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718}
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1359, file: !158, line: 3249, baseType: !1289, size: 1472)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1359, file: !158, line: 3251, baseType: !1363, size: 64, offset: 1472)
!1363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1364, size: 64)
!1364 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1365, line: 463, size: 1152, elements: !1366)
!1365 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1366 = !{!1367, !1531, !1635, !1636, !1639, !1642, !1643, !1644, !1645, !1646, !1647, !1671, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1364, file: !1365, line: 464, baseType: !1368, size: 64)
!1368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1369, size: 64)
!1369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !1370)
!1370 = !{!1371, !1420, !1433, !1447, !1499, !1512}
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1369, file: !135, line: 197, baseType: !1372, size: 64)
!1372 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !1373)
!1373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1374, size: 64)
!1374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !1375)
!1375 = !{!1376, !1377, !1378, !1379, !1380, !1381, !1408, !1417, !1418, !1419}
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1374, file: !135, line: 119, baseType: !1373, size: 64)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1374, file: !135, line: 122, baseType: !1373, size: 64, offset: 64)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1374, file: !135, line: 123, baseType: !1373, size: 64, offset: 128)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1374, file: !135, line: 126, baseType: !990, size: 32, offset: 192)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1374, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1374, file: !135, line: 165, baseType: !1382, size: 192, offset: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !1383)
!1383 = !{!1384, !1397, !1403}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1382, file: !135, line: 137, baseType: !1385, size: 128)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !1386)
!1386 = !{!1387, !1396}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1385, file: !135, line: 135, baseType: !1388, size: 64)
!1388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1389, size: 64)
!1389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !1390)
!1390 = !{!1391, !1392, !1393, !1394, !1395}
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1389, file: !135, line: 96, baseType: !1388, size: 64)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1389, file: !135, line: 97, baseType: !1388, size: 64, offset: 64)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1389, file: !135, line: 101, baseType: !1117, size: 64, offset: 128)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1389, file: !135, line: 106, baseType: !1117, size: 64, offset: 192)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1389, file: !135, line: 111, baseType: !1117, size: 64, offset: 256)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1385, file: !135, line: 136, baseType: !1388, size: 64, offset: 64)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1382, file: !135, line: 151, baseType: !1398, size: 192)
!1398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !1399)
!1399 = !{!1400, !1401, !1402}
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1398, file: !135, line: 141, baseType: !1117, size: 64)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1398, file: !135, line: 145, baseType: !1117, size: 64, offset: 64)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1398, file: !135, line: 150, baseType: !990, size: 32, offset: 128)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1382, file: !135, line: 164, baseType: !1404, size: 128)
!1404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !1405)
!1405 = !{!1406, !1407}
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1404, file: !135, line: 161, baseType: !1117, size: 64)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1404, file: !135, line: 163, baseType: !1238, size: 32, offset: 64)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1374, file: !135, line: 168, baseType: !1409, size: 64, offset: 448)
!1409 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1410, size: 64)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !1411)
!1411 = !{!1412, !1413, !1414, !1415, !1416}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1410, file: !135, line: 70, baseType: !1409, size: 64)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1410, file: !135, line: 73, baseType: !1373, size: 64, offset: 64)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1410, file: !135, line: 78, baseType: !1117, size: 64, offset: 128)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1410, file: !135, line: 85, baseType: !997, size: 64, offset: 192)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1410, file: !135, line: 88, baseType: !990, size: 32, offset: 256)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1374, file: !135, line: 173, baseType: !997, size: 64, offset: 512)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1374, file: !135, line: 173, baseType: !997, size: 64, offset: 576)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1374, file: !135, line: 177, baseType: !1230, size: 8, offset: 640)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1369, file: !135, line: 200, baseType: !1421, size: 64, offset: 64)
!1421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1422, size: 64)
!1422 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !1423)
!1423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !1424)
!1424 = !{!1425}
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1423, file: !135, line: 185, baseType: !1426, size: 128)
!1426 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !1427)
!1427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !1428)
!1428 = !{!1429, !1430, !1431}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1427, file: !135, line: 184, baseType: !7, size: 32)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1427, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1427, file: !135, line: 184, baseType: !1432, size: 64, offset: 64)
!1432 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 64, elements: !1035)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1369, file: !135, line: 203, baseType: !1434, size: 64, offset: 128)
!1434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1435, size: 64)
!1435 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !1436)
!1436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !1437)
!1437 = !{!1438}
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1436, file: !135, line: 189, baseType: !1439, size: 128)
!1439 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !1440)
!1440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !1441)
!1441 = !{!1442, !1443, !1444}
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1440, file: !135, line: 188, baseType: !7, size: 32)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1440, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1440, file: !135, line: 188, baseType: !1445, size: 64, offset: 64)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1446, size: 64, elements: !1035)
!1446 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !1409)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1369, file: !135, line: 207, baseType: !1448, size: 64, offset: 192)
!1448 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1449, line: 144, baseType: !1450)
!1449 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1451, size: 64)
!1451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1449, line: 100, size: 896, elements: !1452)
!1452 = !{!1453, !1461, !1466, !1471, !1473, !1476, !1477, !1478, !1479, !1480, !1485, !1487, !1488, !1493, !1498}
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1451, file: !1449, line: 102, baseType: !1454, size: 64)
!1454 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1449, line: 52, baseType: !1455)
!1455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1456, size: 64)
!1456 = !DISubroutineType(types: !1457)
!1457 = !{!1458, !1459}
!1458 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1449, line: 47, baseType: !7)
!1459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1460, size: 64)
!1460 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1451, file: !1449, line: 105, baseType: !1462, size: 64, offset: 64)
!1462 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1449, line: 59, baseType: !1463)
!1463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1464, size: 64)
!1464 = !DISubroutineType(types: !1465)
!1465 = !{!990, !1459, !1459}
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1451, file: !1449, line: 108, baseType: !1467, size: 64, offset: 128)
!1467 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1449, line: 63, baseType: !1468)
!1468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1469, size: 64)
!1469 = !DISubroutineType(types: !1470)
!1470 = !{null, !992}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1451, file: !1449, line: 111, baseType: !1472, size: 64, offset: 192)
!1472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !992, size: 64)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1451, file: !1449, line: 114, baseType: !1474, size: 64, offset: 256)
!1474 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1475, line: 46, baseType: !1070)
!1475 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1451, file: !1449, line: 117, baseType: !1474, size: 64, offset: 320)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1451, file: !1449, line: 120, baseType: !1474, size: 64, offset: 384)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1451, file: !1449, line: 124, baseType: !7, size: 32, offset: 448)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1451, file: !1449, line: 128, baseType: !7, size: 32, offset: 480)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1451, file: !1449, line: 131, baseType: !1481, size: 64, offset: 512)
!1481 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1449, line: 75, baseType: !1482)
!1482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1483, size: 64)
!1483 = !DISubroutineType(types: !1484)
!1484 = !{!992, !1474, !1474}
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1451, file: !1449, line: 132, baseType: !1486, size: 64, offset: 576)
!1486 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1449, line: 78, baseType: !1468)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1451, file: !1449, line: 135, baseType: !992, size: 64, offset: 640)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1451, file: !1449, line: 136, baseType: !1489, size: 64, offset: 704)
!1489 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1449, line: 82, baseType: !1490)
!1490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1491, size: 64)
!1491 = !DISubroutineType(types: !1492)
!1492 = !{!992, !992, !1474, !1474}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1451, file: !1449, line: 137, baseType: !1494, size: 64, offset: 768)
!1494 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1449, line: 83, baseType: !1495)
!1495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1496, size: 64)
!1496 = !DISubroutineType(types: !1497)
!1497 = !{null, !992, !992}
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1451, file: !1449, line: 141, baseType: !7, size: 32, offset: 832)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1369, file: !135, line: 211, baseType: !1500, size: 64, offset: 256)
!1500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1501, size: 64)
!1501 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !158, line: 183, baseType: !1502)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !158, line: 183, size: 128, elements: !1503)
!1503 = !{!1504}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1502, file: !158, line: 183, baseType: !1505, size: 128)
!1505 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !158, line: 182, baseType: !1506)
!1506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !158, line: 182, size: 128, elements: !1507)
!1507 = !{!1508, !1509, !1510}
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1506, file: !158, line: 182, baseType: !7, size: 32)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1506, file: !158, line: 182, baseType: !7, size: 32, offset: 32)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1506, file: !158, line: 182, baseType: !1511, size: 64, offset: 64)
!1511 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1117, size: 64, elements: !1035)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1369, file: !135, line: 220, baseType: !1513, size: 64, offset: 320)
!1513 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !1514)
!1514 = !{!1515, !1516}
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1513, file: !135, line: 218, baseType: !1500, size: 64)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1513, file: !135, line: 219, baseType: !1517, size: 64)
!1517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1518, size: 64)
!1518 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1519, line: 29, baseType: !1520)
!1519 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1519, line: 29, size: 96, elements: !1521)
!1521 = !{!1522}
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1520, file: !1519, line: 29, baseType: !1523, size: 96)
!1523 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1519, line: 27, baseType: !1524)
!1524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1519, line: 27, size: 96, elements: !1525)
!1525 = !{!1526, !1527, !1528}
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1524, file: !1519, line: 27, baseType: !7, size: 32)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1524, file: !1519, line: 27, baseType: !7, size: 32, offset: 32)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1524, file: !1519, line: 27, baseType: !1529, size: 8, offset: 64)
!1529 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1530, size: 8, elements: !1035)
!1530 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1519, line: 26, baseType: !1230)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1364, file: !1365, line: 467, baseType: !1532, size: 64, offset: 64)
!1532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1533, size: 64)
!1533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !142, line: 374, size: 640, elements: !1534)
!1534 = !{!1535, !1610, !1611, !1624, !1625, !1626, !1627, !1628, !1629, !1631, !1633, !1634}
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1533, file: !142, line: 377, baseType: !1536, size: 64)
!1536 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !998, line: 111, baseType: !1537)
!1537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1538, size: 64)
!1538 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !142, line: 217, size: 832, elements: !1539)
!1539 = !{!1540, !1575, !1576, !1577, !1580, !1584, !1585, !1586, !1604, !1605, !1606, !1607, !1608, !1609}
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1538, file: !142, line: 219, baseType: !1541, size: 64)
!1541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1542, size: 64)
!1542 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !142, line: 151, baseType: !1543)
!1543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !142, line: 151, size: 128, elements: !1544)
!1544 = !{!1545}
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1543, file: !142, line: 151, baseType: !1546, size: 128)
!1546 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !142, line: 150, baseType: !1547)
!1547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !142, line: 150, size: 128, elements: !1548)
!1548 = !{!1549, !1550, !1551}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1547, file: !142, line: 150, baseType: !7, size: 32)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1547, file: !142, line: 150, baseType: !7, size: 32, offset: 32)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1547, file: !142, line: 150, baseType: !1552, size: 64, offset: 64)
!1552 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1553, size: 64, elements: !1035)
!1553 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !998, line: 108, baseType: !1554)
!1554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1555, size: 64)
!1555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !142, line: 122, size: 512, elements: !1556)
!1556 = !{!1557, !1558, !1559, !1567, !1568, !1569, !1570, !1571, !1572, !1573}
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1555, file: !142, line: 124, baseType: !1537, size: 64)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1555, file: !142, line: 125, baseType: !1537, size: 64, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1555, file: !142, line: 131, baseType: !1560, size: 64, offset: 128)
!1560 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !142, line: 128, size: 64, elements: !1561)
!1561 = !{!1562, !1566}
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1560, file: !142, line: 129, baseType: !1563, size: 64)
!1563 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !998, line: 66, baseType: !1564)
!1564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!1565 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !998, line: 65, flags: DIFlagFwdDecl)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1560, file: !142, line: 130, baseType: !997, size: 64)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1555, file: !142, line: 134, baseType: !992, size: 64, offset: 192)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1555, file: !142, line: 137, baseType: !1117, size: 64, offset: 256)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1555, file: !142, line: 138, baseType: !1238, size: 32, offset: 320)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1555, file: !142, line: 142, baseType: !7, size: 32, offset: 352)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1555, file: !142, line: 144, baseType: !990, size: 32, offset: 384)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1555, file: !142, line: 145, baseType: !990, size: 32, offset: 416)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1555, file: !142, line: 146, baseType: !1574, size: 64, offset: 448)
!1574 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !142, line: 119, baseType: !1087)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1538, file: !142, line: 220, baseType: !1541, size: 64, offset: 64)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1538, file: !142, line: 223, baseType: !992, size: 64, offset: 128)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1538, file: !142, line: 226, baseType: !1578, size: 64, offset: 192)
!1578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1579, size: 64)
!1579 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !142, line: 185, flags: DIFlagFwdDecl)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1538, file: !142, line: 229, baseType: !1581, size: 128, offset: 256)
!1581 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1582, size: 128, elements: !1071)
!1582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1583, size: 64)
!1583 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !142, line: 229, flags: DIFlagFwdDecl)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1538, file: !142, line: 232, baseType: !1537, size: 64, offset: 384)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1538, file: !142, line: 233, baseType: !1537, size: 64, offset: 448)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1538, file: !142, line: 238, baseType: !1587, size: 64, offset: 512)
!1587 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !142, line: 235, size: 64, elements: !1588)
!1588 = !{!1589, !1595}
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1587, file: !142, line: 236, baseType: !1590, size: 64)
!1590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1591, size: 64)
!1591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !142, line: 273, size: 128, elements: !1592)
!1592 = !{!1593, !1594}
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1591, file: !142, line: 275, baseType: !1563, size: 64)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1591, file: !142, line: 278, baseType: !1563, size: 64, offset: 64)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1587, file: !142, line: 237, baseType: !1596, size: 64)
!1596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1597, size: 64)
!1597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !142, line: 259, size: 320, elements: !1598)
!1598 = !{!1599, !1600, !1601, !1602, !1603}
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1597, file: !142, line: 261, baseType: !997, size: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1597, file: !142, line: 262, baseType: !997, size: 64, offset: 64)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1597, file: !142, line: 266, baseType: !997, size: 64, offset: 128)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1597, file: !142, line: 267, baseType: !997, size: 64, offset: 192)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1597, file: !142, line: 270, baseType: !990, size: 32, offset: 256)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1538, file: !142, line: 241, baseType: !1574, size: 64, offset: 576)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1538, file: !142, line: 244, baseType: !990, size: 32, offset: 640)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1538, file: !142, line: 247, baseType: !990, size: 32, offset: 672)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1538, file: !142, line: 250, baseType: !990, size: 32, offset: 704)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1538, file: !142, line: 253, baseType: !990, size: 32, offset: 736)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1538, file: !142, line: 256, baseType: !990, size: 32, offset: 768)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1533, file: !142, line: 378, baseType: !1536, size: 64, offset: 64)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1533, file: !142, line: 381, baseType: !1612, size: 64, offset: 128)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !142, line: 282, baseType: !1614)
!1614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !142, line: 282, size: 128, elements: !1615)
!1615 = !{!1616}
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1614, file: !142, line: 282, baseType: !1617, size: 128)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !142, line: 281, baseType: !1618)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !142, line: 281, size: 128, elements: !1619)
!1619 = !{!1620, !1621, !1622}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1618, file: !142, line: 281, baseType: !7, size: 32)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1618, file: !142, line: 281, baseType: !7, size: 32, offset: 32)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1618, file: !142, line: 281, baseType: !1623, size: 64, offset: 64)
!1623 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1536, size: 64, elements: !1035)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1533, file: !142, line: 384, baseType: !990, size: 32, offset: 192)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1533, file: !142, line: 387, baseType: !990, size: 32, offset: 224)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1533, file: !142, line: 390, baseType: !990, size: 32, offset: 256)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1533, file: !142, line: 394, baseType: !1612, size: 64, offset: 320)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1533, file: !142, line: 396, baseType: !141, size: 32, offset: 384)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1533, file: !142, line: 399, baseType: !1630, size: 64, offset: 416)
!1630 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 64, elements: !1071)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1533, file: !142, line: 402, baseType: !1632, size: 64, offset: 480)
!1632 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1071)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1533, file: !142, line: 406, baseType: !990, size: 32, offset: 544)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1533, file: !142, line: 409, baseType: !990, size: 32, offset: 576)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1364, file: !1365, line: 470, baseType: !1564, size: 64, offset: 128)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1364, file: !1365, line: 473, baseType: !1637, size: 64, offset: 192)
!1637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1638, size: 64)
!1638 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1365, line: 166, flags: DIFlagFwdDecl)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1364, file: !1365, line: 476, baseType: !1640, size: 64, offset: 256)
!1640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1641, size: 64)
!1641 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1365, line: 476, flags: DIFlagFwdDecl)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1364, file: !1365, line: 479, baseType: !1448, size: 64, offset: 320)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1364, file: !1365, line: 484, baseType: !1117, size: 64, offset: 384)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1364, file: !1365, line: 488, baseType: !1117, size: 64, offset: 448)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1364, file: !1365, line: 493, baseType: !1117, size: 64, offset: 512)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1364, file: !1365, line: 496, baseType: !1117, size: 64, offset: 576)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1364, file: !1365, line: 501, baseType: !1648, size: 64, offset: 640)
!1648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1649, size: 64)
!1649 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !153, line: 2355, size: 576, elements: !1650)
!1650 = !{!1651, !1654, !1655, !1656, !1657, !1659, !1660, !1665, !1666, !1667, !1668, !1669, !1670}
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1649, file: !153, line: 2356, baseType: !1652, size: 64)
!1652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1653, size: 64)
!1653 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !153, line: 2356, flags: DIFlagFwdDecl)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1649, file: !153, line: 2357, baseType: !1023, size: 64, offset: 64)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1649, file: !153, line: 2358, baseType: !990, size: 32, offset: 128)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1649, file: !153, line: 2359, baseType: !990, size: 32, offset: 160)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1649, file: !153, line: 2360, baseType: !1658, size: 128, offset: 192)
!1658 = !DICompositeType(tag: DW_TAG_array_type, baseType: !990, size: 128, elements: !1097)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1649, file: !153, line: 2364, baseType: !990, size: 32, offset: 320)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1649, file: !153, line: 2367, baseType: !1661, size: 128, offset: 384)
!1661 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !153, line: 2349, size: 128, elements: !1662)
!1662 = !{!1663, !1664}
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1661, file: !153, line: 2351, baseType: !997, size: 64)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1661, file: !153, line: 2352, baseType: !1087, size: 64, offset: 64)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1649, file: !153, line: 2371, baseType: !152, size: 32, offset: 512)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1649, file: !153, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1649, file: !153, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1649, file: !153, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1649, file: !153, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1649, file: !153, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1364, file: !1365, line: 504, baseType: !1672, size: 64, offset: 704)
!1672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1673, size: 64)
!1673 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1365, line: 504, flags: DIFlagFwdDecl)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1364, file: !1365, line: 507, baseType: !1448, size: 64, offset: 768)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1364, file: !1365, line: 510, baseType: !990, size: 32, offset: 832)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1364, file: !1365, line: 513, baseType: !990, size: 32, offset: 864)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1364, file: !1365, line: 516, baseType: !1238, size: 32, offset: 896)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1364, file: !1365, line: 519, baseType: !1238, size: 32, offset: 928)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1364, file: !1365, line: 522, baseType: !7, size: 32, offset: 960)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1364, file: !1365, line: 523, baseType: !7, size: 32, offset: 992)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1364, file: !1365, line: 528, baseType: !1023, size: 64, offset: 1024)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1364, file: !1365, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1364, file: !1365, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1364, file: !1365, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1364, file: !1365, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1364, file: !1365, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1364, file: !1365, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1364, file: !1365, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1364, file: !1365, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1364, file: !1365, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1364, file: !1365, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1364, file: !1365, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1364, file: !1365, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1364, file: !1365, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1364, file: !1365, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1364, file: !1365, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1364, file: !1365, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1359, file: !158, line: 3254, baseType: !1117, size: 64, offset: 1536)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1359, file: !158, line: 3257, baseType: !1117, size: 64, offset: 1600)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1359, file: !158, line: 3258, baseType: !1117, size: 64, offset: 1664)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1359, file: !158, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1359, file: !158, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1359, file: !158, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1359, file: !158, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1359, file: !158, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1359, file: !158, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1359, file: !158, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1359, file: !158, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1359, file: !158, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1359, file: !158, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1359, file: !158, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1359, file: !158, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1359, file: !158, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1359, file: !158, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1359, file: !158, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1359, file: !158, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1359, file: !158, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1359, file: !158, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1119, file: !158, line: 3394, baseType: !1720, size: 1344)
!1720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !158, line: 2279, size: 1344, elements: !1721)
!1721 = !{!1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1747, !1748, !1749, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1720, file: !158, line: 2280, baseType: !1155, size: 192)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1720, file: !158, line: 2281, baseType: !1117, size: 64, offset: 192)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1720, file: !158, line: 2282, baseType: !1117, size: 64, offset: 256)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1720, file: !158, line: 2283, baseType: !1117, size: 64, offset: 320)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1720, file: !158, line: 2284, baseType: !1117, size: 64, offset: 384)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1720, file: !158, line: 2285, baseType: !7, size: 32, offset: 448)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1720, file: !158, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1720, file: !158, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1720, file: !158, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1720, file: !158, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1720, file: !158, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1720, file: !158, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1720, file: !158, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1720, file: !158, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1720, file: !158, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1720, file: !158, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1720, file: !158, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1720, file: !158, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1720, file: !158, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1720, file: !158, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1720, file: !158, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1720, file: !158, line: 2305, baseType: !7, size: 32, offset: 512)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1720, file: !158, line: 2306, baseType: !1745, size: 32, offset: 544)
!1745 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1746, line: 31, baseType: !990)
!1746 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1720, file: !158, line: 2307, baseType: !1117, size: 64, offset: 576)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1720, file: !158, line: 2308, baseType: !1117, size: 64, offset: 640)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1720, file: !158, line: 2314, baseType: !1750, size: 64, offset: 704)
!1750 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !158, line: 2309, size: 64, elements: !1751)
!1751 = !{!1752, !1753, !1754}
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1750, file: !158, line: 2310, baseType: !990, size: 32)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1750, file: !158, line: 2311, baseType: !1023, size: 64)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1750, file: !158, line: 2312, baseType: !1755, size: 64)
!1755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1756, size: 64)
!1756 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !158, line: 2277, flags: DIFlagFwdDecl)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1720, file: !158, line: 2315, baseType: !1117, size: 64, offset: 768)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1720, file: !158, line: 2316, baseType: !1117, size: 64, offset: 832)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1720, file: !158, line: 2317, baseType: !1117, size: 64, offset: 896)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1720, file: !158, line: 2318, baseType: !1117, size: 64, offset: 960)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1720, file: !158, line: 2319, baseType: !1117, size: 64, offset: 1024)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1720, file: !158, line: 2320, baseType: !1117, size: 64, offset: 1088)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1720, file: !158, line: 2321, baseType: !1117, size: 64, offset: 1152)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1720, file: !158, line: 2322, baseType: !1117, size: 64, offset: 1216)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1720, file: !158, line: 2324, baseType: !1766, size: 64, offset: 1280)
!1766 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1767, size: 64)
!1767 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !158, line: 2324, flags: DIFlagFwdDecl)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1119, file: !158, line: 3395, baseType: !1769, size: 320)
!1769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !158, line: 1469, size: 320, elements: !1770)
!1770 = !{!1771, !1772, !1773}
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1769, file: !158, line: 1470, baseType: !1155, size: 192)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1769, file: !158, line: 1471, baseType: !1117, size: 64, offset: 192)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1769, file: !158, line: 1472, baseType: !1117, size: 64, offset: 256)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1119, file: !158, line: 3396, baseType: !1775, size: 320)
!1775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !158, line: 1482, size: 320, elements: !1776)
!1776 = !{!1777, !1778, !1779}
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1775, file: !158, line: 1483, baseType: !1155, size: 192)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1775, file: !158, line: 1484, baseType: !990, size: 32, offset: 192)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1775, file: !158, line: 1485, baseType: !1511, size: 64, offset: 256)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1119, file: !158, line: 3397, baseType: !1781, size: 384)
!1781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !158, line: 1829, size: 384, elements: !1782)
!1782 = !{!1783, !1784, !1785, !1786}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1781, file: !158, line: 1830, baseType: !1155, size: 192)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1781, file: !158, line: 1831, baseType: !1238, size: 32, offset: 192)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1781, file: !158, line: 1832, baseType: !1117, size: 64, offset: 256)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1781, file: !158, line: 1835, baseType: !1511, size: 64, offset: 320)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1119, file: !158, line: 3398, baseType: !1788, size: 704)
!1788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !158, line: 1898, size: 704, elements: !1789)
!1789 = !{!1790, !1791, !1792, !1796, !1797, !1800}
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1788, file: !158, line: 1899, baseType: !1155, size: 192)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1788, file: !158, line: 1902, baseType: !1117, size: 64, offset: 192)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1788, file: !158, line: 1905, baseType: !1793, size: 64, offset: 256)
!1793 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !998, line: 58, baseType: !1794)
!1794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1795, size: 64)
!1795 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !998, line: 57, flags: DIFlagFwdDecl)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1788, file: !158, line: 1908, baseType: !7, size: 32, offset: 320)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1788, file: !158, line: 1911, baseType: !1798, size: 64, offset: 384)
!1798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1799, size: 64)
!1799 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !158, line: 1876, flags: DIFlagFwdDecl)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1788, file: !158, line: 1914, baseType: !1801, size: 256, offset: 448)
!1801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !158, line: 1883, size: 256, elements: !1802)
!1802 = !{!1803, !1805, !1806, !1811}
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1801, file: !158, line: 1884, baseType: !1804, size: 64)
!1804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1801, size: 64)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1801, file: !158, line: 1885, baseType: !1804, size: 64, offset: 64)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1801, file: !158, line: 1891, baseType: !1807, size: 64, offset: 128)
!1807 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1801, file: !158, line: 1891, size: 64, elements: !1808)
!1808 = !{!1809, !1810}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1807, file: !158, line: 1891, baseType: !1793, size: 64)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1807, file: !158, line: 1891, baseType: !1117, size: 64)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1801, file: !158, line: 1892, baseType: !1812, size: 64, offset: 192)
!1812 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1117, size: 64)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1119, file: !158, line: 3399, baseType: !1814, size: 704)
!1814 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !158, line: 2008, size: 704, elements: !1815)
!1815 = !{!1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826}
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1814, file: !158, line: 2009, baseType: !1155, size: 192)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1814, file: !158, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1814, file: !158, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1814, file: !158, line: 2014, baseType: !1238, size: 32, offset: 224)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1814, file: !158, line: 2016, baseType: !1117, size: 64, offset: 256)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1814, file: !158, line: 2017, baseType: !1500, size: 64, offset: 320)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1814, file: !158, line: 2019, baseType: !1117, size: 64, offset: 384)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1814, file: !158, line: 2020, baseType: !1117, size: 64, offset: 448)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1814, file: !158, line: 2021, baseType: !1117, size: 64, offset: 512)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1814, file: !158, line: 2022, baseType: !1117, size: 64, offset: 576)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1814, file: !158, line: 2023, baseType: !1117, size: 64, offset: 640)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1119, file: !158, line: 3400, baseType: !1828, size: 832)
!1828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !158, line: 2430, size: 832, elements: !1829)
!1829 = !{!1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839}
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1828, file: !158, line: 2431, baseType: !1155, size: 192)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1828, file: !158, line: 2433, baseType: !1117, size: 64, offset: 192)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1828, file: !158, line: 2434, baseType: !1117, size: 64, offset: 256)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1828, file: !158, line: 2435, baseType: !1117, size: 64, offset: 320)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1828, file: !158, line: 2436, baseType: !1117, size: 64, offset: 384)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1828, file: !158, line: 2437, baseType: !1500, size: 64, offset: 448)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1828, file: !158, line: 2438, baseType: !1117, size: 64, offset: 512)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1828, file: !158, line: 2440, baseType: !1117, size: 64, offset: 576)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1828, file: !158, line: 2441, baseType: !1117, size: 64, offset: 640)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1828, file: !158, line: 2443, baseType: !1840, size: 128, offset: 704)
!1840 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !158, line: 182, baseType: !1841)
!1841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !158, line: 182, size: 128, elements: !1842)
!1842 = !{!1843}
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1841, file: !158, line: 182, baseType: !1505, size: 128)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1119, file: !158, line: 3401, baseType: !1845, size: 320)
!1845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !158, line: 3327, size: 320, elements: !1846)
!1846 = !{!1847, !1848, !1855}
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1845, file: !158, line: 3329, baseType: !1155, size: 192)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1845, file: !158, line: 3330, baseType: !1849, size: 64, offset: 192)
!1849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1850, size: 64)
!1850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !158, line: 3320, size: 192, elements: !1851)
!1851 = !{!1852, !1853, !1854}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1850, file: !158, line: 3322, baseType: !1849, size: 64)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1850, file: !158, line: 3323, baseType: !1849, size: 64, offset: 64)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1850, file: !158, line: 3324, baseType: !1117, size: 64, offset: 128)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1845, file: !158, line: 3331, baseType: !1849, size: 64, offset: 256)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1119, file: !158, line: 3402, baseType: !1857, size: 256)
!1857 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !158, line: 1540, size: 256, elements: !1858)
!1858 = !{!1859, !1860}
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1857, file: !158, line: 1541, baseType: !1155, size: 192)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1857, file: !158, line: 1542, baseType: !1861, size: 64, offset: 192)
!1861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1862, size: 64)
!1862 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !158, line: 1538, baseType: !1863)
!1863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !158, line: 1538, size: 192, elements: !1864)
!1864 = !{!1865}
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1863, file: !158, line: 1538, baseType: !1866, size: 192)
!1866 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !158, line: 1537, baseType: !1867)
!1867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !158, line: 1537, size: 192, elements: !1868)
!1868 = !{!1869, !1870, !1871}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1867, file: !158, line: 1537, baseType: !7, size: 32)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1867, file: !158, line: 1537, baseType: !7, size: 32, offset: 32)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1867, file: !158, line: 1537, baseType: !1872, size: 128, offset: 64)
!1872 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1873, size: 128, elements: !1035)
!1873 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !158, line: 1535, baseType: !1874)
!1874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !158, line: 1532, size: 128, elements: !1875)
!1875 = !{!1876, !1877}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1874, file: !158, line: 1533, baseType: !1117, size: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1874, file: !158, line: 1534, baseType: !1117, size: 64, offset: 64)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1119, file: !158, line: 3403, baseType: !1879, size: 512)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !158, line: 1938, size: 512, elements: !1880)
!1880 = !{!1881, !1882, !1883, !1884, !1890, !1891, !1892}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1879, file: !158, line: 1939, baseType: !1155, size: 192)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1879, file: !158, line: 1940, baseType: !1238, size: 32, offset: 192)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1879, file: !158, line: 1941, baseType: !157, size: 32, offset: 224)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1879, file: !158, line: 1946, baseType: !1885, size: 32, offset: 256)
!1885 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !158, line: 1942, size: 32, elements: !1886)
!1886 = !{!1887, !1888, !1889}
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1885, file: !158, line: 1943, baseType: !176, size: 32)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1885, file: !158, line: 1944, baseType: !183, size: 32)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1885, file: !158, line: 1945, baseType: !190, size: 32)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1879, file: !158, line: 1950, baseType: !1563, size: 64, offset: 320)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1879, file: !158, line: 1951, baseType: !1563, size: 64, offset: 384)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1879, file: !158, line: 1953, baseType: !1511, size: 64, offset: 448)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1119, file: !158, line: 3404, baseType: !1894, size: 1664)
!1894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !158, line: 3337, size: 1664, elements: !1895)
!1895 = !{!1896, !1897}
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1894, file: !158, line: 3338, baseType: !1155, size: 192)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1894, file: !158, line: 3341, baseType: !1898, size: 1472, offset: 192)
!1898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1899, line: 410, size: 1472, elements: !1900)
!1899 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1900 = !{!1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064}
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1898, file: !1899, line: 412, baseType: !990, size: 32)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1898, file: !1899, line: 413, baseType: !990, size: 32, offset: 32)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1898, file: !1899, line: 414, baseType: !990, size: 32, offset: 64)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1898, file: !1899, line: 415, baseType: !990, size: 32, offset: 96)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1898, file: !1899, line: 416, baseType: !990, size: 32, offset: 128)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1898, file: !1899, line: 417, baseType: !990, size: 32, offset: 160)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1898, file: !1899, line: 418, baseType: !1230, size: 8, offset: 192)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1898, file: !1899, line: 419, baseType: !1230, size: 8, offset: 200)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1898, file: !1899, line: 420, baseType: !1910, size: 8, offset: 208)
!1910 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1898, file: !1899, line: 421, baseType: !1910, size: 8, offset: 216)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1898, file: !1899, line: 422, baseType: !1910, size: 8, offset: 224)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1898, file: !1899, line: 423, baseType: !1910, size: 8, offset: 232)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1898, file: !1899, line: 424, baseType: !1910, size: 8, offset: 240)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1898, file: !1899, line: 425, baseType: !1910, size: 8, offset: 248)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1898, file: !1899, line: 426, baseType: !1910, size: 8, offset: 256)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1898, file: !1899, line: 427, baseType: !1910, size: 8, offset: 264)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1898, file: !1899, line: 428, baseType: !1910, size: 8, offset: 272)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1898, file: !1899, line: 429, baseType: !1910, size: 8, offset: 280)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1898, file: !1899, line: 430, baseType: !1910, size: 8, offset: 288)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1898, file: !1899, line: 431, baseType: !1910, size: 8, offset: 296)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1898, file: !1899, line: 432, baseType: !1910, size: 8, offset: 304)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1898, file: !1899, line: 433, baseType: !1910, size: 8, offset: 312)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1898, file: !1899, line: 434, baseType: !1910, size: 8, offset: 320)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1898, file: !1899, line: 435, baseType: !1910, size: 8, offset: 328)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1898, file: !1899, line: 436, baseType: !1910, size: 8, offset: 336)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1898, file: !1899, line: 437, baseType: !1910, size: 8, offset: 344)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1898, file: !1899, line: 438, baseType: !1910, size: 8, offset: 352)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1898, file: !1899, line: 439, baseType: !1910, size: 8, offset: 360)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1898, file: !1899, line: 440, baseType: !1910, size: 8, offset: 368)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1898, file: !1899, line: 441, baseType: !1910, size: 8, offset: 376)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1898, file: !1899, line: 442, baseType: !1910, size: 8, offset: 384)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1898, file: !1899, line: 443, baseType: !1910, size: 8, offset: 392)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1898, file: !1899, line: 444, baseType: !1910, size: 8, offset: 400)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1898, file: !1899, line: 445, baseType: !1910, size: 8, offset: 408)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1898, file: !1899, line: 446, baseType: !1910, size: 8, offset: 416)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1898, file: !1899, line: 447, baseType: !1910, size: 8, offset: 424)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1898, file: !1899, line: 448, baseType: !1910, size: 8, offset: 432)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1898, file: !1899, line: 449, baseType: !1910, size: 8, offset: 440)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1898, file: !1899, line: 450, baseType: !1910, size: 8, offset: 448)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1898, file: !1899, line: 451, baseType: !1910, size: 8, offset: 456)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1898, file: !1899, line: 452, baseType: !1910, size: 8, offset: 464)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1898, file: !1899, line: 453, baseType: !1910, size: 8, offset: 472)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1898, file: !1899, line: 454, baseType: !1910, size: 8, offset: 480)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1898, file: !1899, line: 455, baseType: !1910, size: 8, offset: 488)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1898, file: !1899, line: 456, baseType: !1910, size: 8, offset: 496)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1898, file: !1899, line: 457, baseType: !1910, size: 8, offset: 504)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1898, file: !1899, line: 458, baseType: !1910, size: 8, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1898, file: !1899, line: 459, baseType: !1910, size: 8, offset: 520)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1898, file: !1899, line: 460, baseType: !1910, size: 8, offset: 528)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1898, file: !1899, line: 461, baseType: !1910, size: 8, offset: 536)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1898, file: !1899, line: 462, baseType: !1910, size: 8, offset: 544)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1898, file: !1899, line: 463, baseType: !1910, size: 8, offset: 552)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1898, file: !1899, line: 464, baseType: !1910, size: 8, offset: 560)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1898, file: !1899, line: 465, baseType: !1910, size: 8, offset: 568)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1898, file: !1899, line: 466, baseType: !1910, size: 8, offset: 576)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1898, file: !1899, line: 467, baseType: !1910, size: 8, offset: 584)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1898, file: !1899, line: 468, baseType: !1910, size: 8, offset: 592)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1898, file: !1899, line: 469, baseType: !1910, size: 8, offset: 600)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1898, file: !1899, line: 470, baseType: !1910, size: 8, offset: 608)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1898, file: !1899, line: 471, baseType: !1910, size: 8, offset: 616)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1898, file: !1899, line: 472, baseType: !1910, size: 8, offset: 624)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1898, file: !1899, line: 473, baseType: !1910, size: 8, offset: 632)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1898, file: !1899, line: 474, baseType: !1910, size: 8, offset: 640)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1898, file: !1899, line: 475, baseType: !1910, size: 8, offset: 648)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1898, file: !1899, line: 476, baseType: !1910, size: 8, offset: 656)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1898, file: !1899, line: 477, baseType: !1910, size: 8, offset: 664)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1898, file: !1899, line: 478, baseType: !1910, size: 8, offset: 672)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1898, file: !1899, line: 479, baseType: !1910, size: 8, offset: 680)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1898, file: !1899, line: 480, baseType: !1910, size: 8, offset: 688)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1898, file: !1899, line: 481, baseType: !1910, size: 8, offset: 696)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1898, file: !1899, line: 482, baseType: !1910, size: 8, offset: 704)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1898, file: !1899, line: 483, baseType: !1910, size: 8, offset: 712)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1898, file: !1899, line: 484, baseType: !1910, size: 8, offset: 720)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1898, file: !1899, line: 485, baseType: !1910, size: 8, offset: 728)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1898, file: !1899, line: 486, baseType: !1910, size: 8, offset: 736)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1898, file: !1899, line: 487, baseType: !1910, size: 8, offset: 744)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1898, file: !1899, line: 488, baseType: !1910, size: 8, offset: 752)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1898, file: !1899, line: 489, baseType: !1910, size: 8, offset: 760)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1898, file: !1899, line: 490, baseType: !1910, size: 8, offset: 768)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1898, file: !1899, line: 491, baseType: !1910, size: 8, offset: 776)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1898, file: !1899, line: 492, baseType: !1910, size: 8, offset: 784)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1898, file: !1899, line: 493, baseType: !1910, size: 8, offset: 792)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1898, file: !1899, line: 494, baseType: !1910, size: 8, offset: 800)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1898, file: !1899, line: 495, baseType: !1910, size: 8, offset: 808)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1898, file: !1899, line: 496, baseType: !1910, size: 8, offset: 816)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1898, file: !1899, line: 497, baseType: !1910, size: 8, offset: 824)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1898, file: !1899, line: 498, baseType: !1910, size: 8, offset: 832)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1898, file: !1899, line: 499, baseType: !1910, size: 8, offset: 840)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1898, file: !1899, line: 500, baseType: !1910, size: 8, offset: 848)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1898, file: !1899, line: 501, baseType: !1910, size: 8, offset: 856)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1898, file: !1899, line: 502, baseType: !1910, size: 8, offset: 864)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1898, file: !1899, line: 503, baseType: !1910, size: 8, offset: 872)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1898, file: !1899, line: 504, baseType: !1910, size: 8, offset: 880)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1898, file: !1899, line: 505, baseType: !1910, size: 8, offset: 888)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1898, file: !1899, line: 506, baseType: !1910, size: 8, offset: 896)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1898, file: !1899, line: 507, baseType: !1910, size: 8, offset: 904)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1898, file: !1899, line: 508, baseType: !1910, size: 8, offset: 912)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1898, file: !1899, line: 509, baseType: !1910, size: 8, offset: 920)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1898, file: !1899, line: 510, baseType: !1910, size: 8, offset: 928)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1898, file: !1899, line: 511, baseType: !1910, size: 8, offset: 936)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1898, file: !1899, line: 512, baseType: !1910, size: 8, offset: 944)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1898, file: !1899, line: 513, baseType: !1910, size: 8, offset: 952)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1898, file: !1899, line: 514, baseType: !1910, size: 8, offset: 960)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1898, file: !1899, line: 515, baseType: !1910, size: 8, offset: 968)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1898, file: !1899, line: 516, baseType: !1910, size: 8, offset: 976)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1898, file: !1899, line: 517, baseType: !1910, size: 8, offset: 984)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1898, file: !1899, line: 518, baseType: !1910, size: 8, offset: 992)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1898, file: !1899, line: 519, baseType: !1910, size: 8, offset: 1000)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1898, file: !1899, line: 520, baseType: !1910, size: 8, offset: 1008)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1898, file: !1899, line: 521, baseType: !1910, size: 8, offset: 1016)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1898, file: !1899, line: 522, baseType: !1910, size: 8, offset: 1024)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1898, file: !1899, line: 523, baseType: !1910, size: 8, offset: 1032)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1898, file: !1899, line: 524, baseType: !1910, size: 8, offset: 1040)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1898, file: !1899, line: 525, baseType: !1910, size: 8, offset: 1048)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1898, file: !1899, line: 526, baseType: !1910, size: 8, offset: 1056)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1898, file: !1899, line: 527, baseType: !1910, size: 8, offset: 1064)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1898, file: !1899, line: 528, baseType: !1910, size: 8, offset: 1072)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1898, file: !1899, line: 529, baseType: !1910, size: 8, offset: 1080)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1898, file: !1899, line: 530, baseType: !1910, size: 8, offset: 1088)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1898, file: !1899, line: 531, baseType: !1910, size: 8, offset: 1096)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1898, file: !1899, line: 532, baseType: !1910, size: 8, offset: 1104)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1898, file: !1899, line: 533, baseType: !1910, size: 8, offset: 1112)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1898, file: !1899, line: 534, baseType: !1910, size: 8, offset: 1120)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1898, file: !1899, line: 535, baseType: !1910, size: 8, offset: 1128)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1898, file: !1899, line: 536, baseType: !1910, size: 8, offset: 1136)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1898, file: !1899, line: 537, baseType: !1910, size: 8, offset: 1144)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1898, file: !1899, line: 538, baseType: !1910, size: 8, offset: 1152)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1898, file: !1899, line: 539, baseType: !1910, size: 8, offset: 1160)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1898, file: !1899, line: 540, baseType: !1910, size: 8, offset: 1168)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1898, file: !1899, line: 541, baseType: !1910, size: 8, offset: 1176)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1898, file: !1899, line: 542, baseType: !1910, size: 8, offset: 1184)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1898, file: !1899, line: 543, baseType: !1910, size: 8, offset: 1192)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1898, file: !1899, line: 544, baseType: !1910, size: 8, offset: 1200)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1898, file: !1899, line: 545, baseType: !1910, size: 8, offset: 1208)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1898, file: !1899, line: 546, baseType: !1910, size: 8, offset: 1216)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1898, file: !1899, line: 547, baseType: !1910, size: 8, offset: 1224)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1898, file: !1899, line: 548, baseType: !1910, size: 8, offset: 1232)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1898, file: !1899, line: 549, baseType: !1910, size: 8, offset: 1240)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1898, file: !1899, line: 550, baseType: !1910, size: 8, offset: 1248)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1898, file: !1899, line: 551, baseType: !1910, size: 8, offset: 1256)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1898, file: !1899, line: 552, baseType: !1910, size: 8, offset: 1264)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1898, file: !1899, line: 553, baseType: !1910, size: 8, offset: 1272)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1898, file: !1899, line: 554, baseType: !1910, size: 8, offset: 1280)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1898, file: !1899, line: 555, baseType: !1910, size: 8, offset: 1288)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1898, file: !1899, line: 556, baseType: !1910, size: 8, offset: 1296)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1898, file: !1899, line: 557, baseType: !1910, size: 8, offset: 1304)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1898, file: !1899, line: 558, baseType: !1910, size: 8, offset: 1312)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1898, file: !1899, line: 559, baseType: !1910, size: 8, offset: 1320)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1898, file: !1899, line: 560, baseType: !1910, size: 8, offset: 1328)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1898, file: !1899, line: 561, baseType: !1910, size: 8, offset: 1336)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1898, file: !1899, line: 562, baseType: !1910, size: 8, offset: 1344)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1898, file: !1899, line: 563, baseType: !1910, size: 8, offset: 1352)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1898, file: !1899, line: 564, baseType: !1910, size: 8, offset: 1360)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1898, file: !1899, line: 565, baseType: !1910, size: 8, offset: 1368)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1898, file: !1899, line: 566, baseType: !1910, size: 8, offset: 1376)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1898, file: !1899, line: 567, baseType: !1910, size: 8, offset: 1384)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1898, file: !1899, line: 568, baseType: !1910, size: 8, offset: 1392)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1898, file: !1899, line: 569, baseType: !1910, size: 8, offset: 1400)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1898, file: !1899, line: 570, baseType: !1910, size: 8, offset: 1408)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1898, file: !1899, line: 571, baseType: !1910, size: 8, offset: 1416)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1898, file: !1899, line: 572, baseType: !1910, size: 8, offset: 1424)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1898, file: !1899, line: 573, baseType: !1910, size: 8, offset: 1432)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1898, file: !1899, line: 574, baseType: !1910, size: 8, offset: 1440)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1119, file: !158, line: 3405, baseType: !2066, size: 384)
!2066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !158, line: 3352, size: 384, elements: !2067)
!2067 = !{!2068, !2069}
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2066, file: !158, line: 3353, baseType: !1155, size: 192)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2066, file: !158, line: 3356, baseType: !2070, size: 192, offset: 192)
!2070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1899, line: 578, size: 192, elements: !2071)
!2071 = !{!2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082}
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2070, file: !1899, line: 580, baseType: !990, size: 32)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2070, file: !1899, line: 581, baseType: !990, size: 32, offset: 32)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2070, file: !1899, line: 582, baseType: !990, size: 32, offset: 64)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2070, file: !1899, line: 583, baseType: !990, size: 32, offset: 96)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2070, file: !1899, line: 584, baseType: !1230, size: 8, offset: 128)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2070, file: !1899, line: 585, baseType: !1230, size: 8, offset: 136)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2070, file: !1899, line: 586, baseType: !1230, size: 8, offset: 144)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2070, file: !1899, line: 587, baseType: !1230, size: 8, offset: 152)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2070, file: !1899, line: 588, baseType: !1230, size: 8, offset: 160)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2070, file: !1899, line: 589, baseType: !1230, size: 8, offset: 168)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2070, file: !1899, line: 590, baseType: !1230, size: 8, offset: 176)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1018, file: !519, line: 178, baseType: !1537, size: 64)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1018, file: !519, line: 179, baseType: !2085, size: 64)
!2085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2086, size: 64)
!2086 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !519, line: 150, baseType: !2087)
!2087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !519, line: 142, size: 320, elements: !2088)
!2088 = !{!2089, !2090, !2091, !2092, !2093, !2094}
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2087, file: !519, line: 144, baseType: !1117, size: 64)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2087, file: !519, line: 145, baseType: !997, size: 64, offset: 64)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2087, file: !519, line: 146, baseType: !997, size: 64, offset: 128)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2087, file: !519, line: 147, baseType: !1745, size: 32, offset: 192)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2087, file: !519, line: 148, baseType: !7, size: 32, offset: 224)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2087, file: !519, line: 149, baseType: !1230, size: 8, offset: 256)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1018, file: !519, line: 180, baseType: !2096, size: 64)
!2096 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2097, size: 64)
!2097 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !519, line: 162, baseType: !2098)
!2098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !519, line: 159, size: 128, elements: !2099)
!2099 = !{!2100, !2101}
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2098, file: !519, line: 160, baseType: !1117, size: 64)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2098, file: !519, line: 161, baseType: !1087, size: 64, offset: 64)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1018, file: !519, line: 181, baseType: !2103, size: 64)
!2103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2104, size: 64)
!2104 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !519, line: 181, flags: DIFlagFwdDecl)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1013, file: !519, line: 317, baseType: !2106, size: 64)
!2106 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1087, size: 64, elements: !1035)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1013, file: !519, line: 318, baseType: !2108, size: 320)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !519, line: 188, size: 320, elements: !2109)
!2109 = !{!2110, !2112, !2135}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2108, file: !519, line: 190, baseType: !2111, size: 192)
!2111 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1017, size: 192, elements: !1188)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2108, file: !519, line: 193, baseType: !2113, size: 64, offset: 192)
!2113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2114, size: 64)
!2114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !519, line: 206, size: 320, elements: !2115)
!2115 = !{!2116, !2120, !2121, !2122, !2134}
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2114, file: !519, line: 208, baseType: !2117, size: 64)
!2117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2118, size: 64)
!2118 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !998, line: 62, baseType: !2119)
!2119 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !998, line: 61, flags: DIFlagFwdDecl)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2114, file: !519, line: 211, baseType: !7, size: 32, offset: 64)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2114, file: !519, line: 214, baseType: !1087, size: 64, offset: 128)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2114, file: !519, line: 224, baseType: !2123, size: 64, offset: 192)
!2123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2124, size: 64)
!2124 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !519, line: 202, baseType: !2125)
!2125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !519, line: 202, size: 128, elements: !2126)
!2126 = !{!2127}
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2125, file: !519, line: 202, baseType: !2128, size: 128)
!2128 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !519, line: 200, baseType: !2129)
!2129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !519, line: 200, size: 128, elements: !2130)
!2130 = !{!2131, !2132, !2133}
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2129, file: !519, line: 200, baseType: !7, size: 32)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2129, file: !519, line: 200, baseType: !7, size: 32, offset: 32)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2129, file: !519, line: 200, baseType: !1034, size: 64, offset: 64)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2114, file: !519, line: 234, baseType: !2123, size: 64, offset: 256)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2108, file: !519, line: 197, baseType: !1087, size: 64, offset: 256)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1013, file: !519, line: 319, baseType: !1177, size: 256)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1013, file: !519, line: 320, baseType: !1196, size: 192)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "pending_read_mems", scope: !994, file: !508, line: 466, baseType: !997, size: 64, offset: 64)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "pending_write_insns", scope: !994, file: !508, line: 469, baseType: !997, size: 64, offset: 128)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "pending_write_mems", scope: !994, file: !508, line: 472, baseType: !997, size: 64, offset: 192)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "pending_read_list_length", scope: !994, file: !508, line: 480, baseType: !990, size: 32, offset: 256)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "pending_write_list_length", scope: !994, file: !508, line: 483, baseType: !990, size: 32, offset: 288)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "pending_flush_length", scope: !994, file: !508, line: 487, baseType: !990, size: 32, offset: 320)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "last_pending_memory_flush", scope: !994, file: !508, line: 498, baseType: !997, size: 64, offset: 384)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "last_function_call", scope: !994, file: !508, line: 503, baseType: !997, size: 64, offset: 448)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "last_function_call_may_noreturn", scope: !994, file: !508, line: 509, baseType: !997, size: 64, offset: 512)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "sched_before_next_call", scope: !994, file: !508, line: 515, baseType: !997, size: 64, offset: 576)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "in_post_call_group_p", scope: !994, file: !508, line: 519, baseType: !507, size: 32, offset: 640)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "last_debug_insn", scope: !994, file: !508, line: 522, baseType: !997, size: 64, offset: 704)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "max_reg", scope: !994, file: !508, line: 526, baseType: !990, size: 32, offset: 768)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "reg_last", scope: !994, file: !508, line: 532, baseType: !2152, size: 64, offset: 832)
!2152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2153, size: 64)
!2153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "deps_reg", file: !508, line: 440, size: 320, elements: !2154)
!2154 = !{!2155, !2156, !2157, !2158, !2159, !2160}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !2153, file: !508, line: 442, baseType: !997, size: 64)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "sets", scope: !2153, file: !508, line: 443, baseType: !997, size: 64, offset: 64)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "implicit_sets", scope: !2153, file: !508, line: 444, baseType: !997, size: 64, offset: 128)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "clobbers", scope: !2153, file: !508, line: 445, baseType: !997, size: 64, offset: 192)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "uses_length", scope: !2153, file: !508, line: 446, baseType: !990, size: 32, offset: 256)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "clobbers_length", scope: !2153, file: !508, line: 447, baseType: !990, size: 32, offset: 288)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "reg_last_in_use", scope: !994, file: !508, line: 536, baseType: !2162, size: 256, offset: 896)
!2162 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset_head", file: !142, line: 34, baseType: !2163)
!2163 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_head", file: !1056, line: 84, baseType: !1055)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "reg_conditional_sets", scope: !994, file: !508, line: 539, baseType: !2162, size: 256, offset: 1152)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "last_reg_pending_barrier", scope: !994, file: !508, line: 542, baseType: !513, size: 32, offset: 1408)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "readonly", scope: !994, file: !508, line: 546, baseType: !7, size: 1, offset: 1440, flags: DIFlagBitField, extraData: i64 1440)
!2167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1553, size: 64)
!2168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2169, size: 64)
!2169 = !DIDerivedType(tag: DW_TAG_typedef, name: "region", file: !508, line: 1302, baseType: !2170)
!2170 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !508, line: 1290, size: 96, elements: !2171)
!2171 = !{!2172, !2173, !2174, !2175}
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "rgn_nr_blocks", scope: !2170, file: !508, line: 1293, baseType: !990, size: 32)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "rgn_blocks", scope: !2170, file: !508, line: 1295, baseType: !990, size: 32, offset: 32)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "dont_calc_deps", scope: !2170, file: !508, line: 1298, baseType: !7, size: 1, offset: 64, flags: DIFlagBitField, extraData: i64 64)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "has_real_ebb", scope: !2170, file: !508, line: 1300, baseType: !7, size: 1, offset: 65, flags: DIFlagBitField, extraData: i64 64)
!2176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2177, size: 64)
!2177 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !142, line: 682, baseType: !2178)
!2178 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !142, line: 679, size: 128, elements: !2179)
!2179 = !{!2180, !2181}
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2178, file: !142, line: 680, baseType: !7, size: 32)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !2178, file: !142, line: 681, baseType: !2182, size: 64, offset: 64)
!2182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1541, size: 64)
!2183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1230, size: 64)
!2184 = !DIDerivedType(tag: DW_TAG_typedef, name: "ds_t", file: !508, line: 218, baseType: !990)
!2185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2186, size: 64)
!2186 = !DIDerivedType(tag: DW_TAG_typedef, name: "candidate", file: !3, line: 151, baseType: !2187)
!2187 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 143, size: 320, elements: !2188)
!2188 = !{!2189, !2190, !2191, !2192, !2199}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "is_valid", scope: !2187, file: !3, line: 145, baseType: !1025, size: 8)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "is_speculative", scope: !2187, file: !3, line: 146, baseType: !1025, size: 8, offset: 8)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "src_prob", scope: !2187, file: !3, line: 147, baseType: !990, size: 32, offset: 32)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "split_bbs", scope: !2187, file: !3, line: 148, baseType: !2193, size: 128, offset: 64)
!2193 = !DIDerivedType(tag: DW_TAG_typedef, name: "bblst", file: !3, line: 141, baseType: !2194)
!2194 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 136, size: 128, elements: !2195)
!2195 = !{!2196, !2198}
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "first_member", scope: !2194, file: !3, line: 138, baseType: !2197, size: 64)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1536, size: 64)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "nr_members", scope: !2194, file: !3, line: 139, baseType: !990, size: 32, offset: 64)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "update_bbs", scope: !2187, file: !3, line: 149, baseType: !2193, size: 128, offset: 192)
!2200 = !{!0, !2201, !2203, !2205, !2207, !2209, !2211, !2239, !2241, !2243, !2245, !2247, !2249, !2251, !2253, !2255, !2268, !2270, !2272, !2274, !2278, !2280, !2282, !2303, !2342, !2391, !2393, !2395, !2397, !2433, !2436, !2438, !2441, !2443, !2445, !2447, !2449, !2451, !2453, !2455, !2457}
!2201 = !DIGlobalVariableExpression(var: !2202, expr: !DIExpression())
!2202 = distinct !DIGlobalVariable(name: "rgn_table", scope: !2, file: !3, line: 88, type: !2168, isLocal: false, isDefinition: true)
!2203 = !DIGlobalVariableExpression(var: !2204, expr: !DIExpression())
!2204 = distinct !DIGlobalVariable(name: "rgn_bb_table", scope: !2, file: !3, line: 91, type: !991, isLocal: false, isDefinition: true)
!2205 = !DIGlobalVariableExpression(var: !2206, expr: !DIExpression())
!2206 = distinct !DIGlobalVariable(name: "block_to_bb", scope: !2, file: !3, line: 97, type: !991, isLocal: false, isDefinition: true)
!2207 = !DIGlobalVariableExpression(var: !2208, expr: !DIExpression())
!2208 = distinct !DIGlobalVariable(name: "containing_rgn", scope: !2, file: !3, line: 100, type: !991, isLocal: false, isDefinition: true)
!2209 = !DIGlobalVariableExpression(var: !2210, expr: !DIExpression())
!2210 = distinct !DIGlobalVariable(name: "ebb_head", scope: !2, file: !3, line: 106, type: !991, isLocal: false, isDefinition: true)
!2211 = !DIGlobalVariableExpression(var: !2212, expr: !DIExpression())
!2212 = distinct !DIGlobalVariable(name: "pass_sched", scope: !2, file: !3, line: 3549, type: !2213, isLocal: false, isDefinition: true)
!2213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !763, line: 162, size: 640, elements: !2214)
!2214 = !{!2215}
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2213, file: !763, line: 164, baseType: !2216, size: 640)
!2216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !763, line: 114, size: 640, elements: !2217)
!2217 = !{!2218, !2219, !2220, !2224, !2228, !2230, !2231, !2232, !2234, !2235, !2236, !2237, !2238}
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2216, file: !763, line: 117, baseType: !762, size: 32)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2216, file: !763, line: 121, baseType: !1023, size: 64, offset: 64)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2216, file: !763, line: 125, baseType: !2221, size: 64, offset: 128)
!2221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2222, size: 64)
!2222 = !DISubroutineType(types: !2223)
!2223 = !{!1230}
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2216, file: !763, line: 130, baseType: !2225, size: 64, offset: 192)
!2225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2226, size: 64)
!2226 = !DISubroutineType(types: !2227)
!2227 = !{!7}
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2216, file: !763, line: 133, baseType: !2229, size: 64, offset: 256)
!2229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2216, size: 64)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2216, file: !763, line: 136, baseType: !2229, size: 64, offset: 320)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2216, file: !763, line: 139, baseType: !990, size: 32, offset: 384)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2216, file: !763, line: 143, baseType: !2233, size: 32, offset: 416)
!2233 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !770, line: 80, baseType: !769)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2216, file: !763, line: 146, baseType: !7, size: 32, offset: 448)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2216, file: !763, line: 147, baseType: !7, size: 32, offset: 480)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2216, file: !763, line: 148, baseType: !7, size: 32, offset: 512)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2216, file: !763, line: 151, baseType: !7, size: 32, offset: 544)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2216, file: !763, line: 152, baseType: !7, size: 32, offset: 576)
!2239 = !DIGlobalVariableExpression(var: !2240, expr: !DIExpression())
!2240 = distinct !DIGlobalVariable(name: "pass_sched2", scope: !2, file: !3, line: 3571, type: !2213, isLocal: false, isDefinition: true)
!2241 = !DIGlobalVariableExpression(var: !2242, expr: !DIExpression())
!2242 = distinct !DIGlobalVariable(name: "nr_inter", scope: !2, file: !3, line: 80, type: !990, isLocal: true, isDefinition: true)
!2243 = !DIGlobalVariableExpression(var: !2244, expr: !DIExpression())
!2244 = distinct !DIGlobalVariable(name: "nr_spec", scope: !2, file: !3, line: 80, type: !990, isLocal: true, isDefinition: true)
!2245 = !DIGlobalVariableExpression(var: !2246, expr: !DIExpression())
!2246 = distinct !DIGlobalVariable(name: "min_spec_prob", scope: !2, file: !3, line: 110, type: !990, isLocal: true, isDefinition: true)
!2247 = !DIGlobalVariableExpression(var: !2248, expr: !DIExpression())
!2248 = distinct !DIGlobalVariable(name: "current_nr_blocks", scope: !2, file: !3, line: 117, type: !990, isLocal: false, isDefinition: true)
!2249 = !DIGlobalVariableExpression(var: !2250, expr: !DIExpression())
!2250 = distinct !DIGlobalVariable(name: "current_blocks", scope: !2, file: !3, line: 118, type: !990, isLocal: false, isDefinition: true)
!2251 = !DIGlobalVariableExpression(var: !2252, expr: !DIExpression())
!2252 = distinct !DIGlobalVariable(name: "candidate_table", scope: !2, file: !3, line: 153, type: !2185, isLocal: true, isDefinition: true)
!2253 = !DIGlobalVariableExpression(var: !2254, expr: !DIExpression())
!2254 = distinct !DIGlobalVariable(name: "target_bb", scope: !2, file: !3, line: 161, type: !990, isLocal: false, isDefinition: true)
!2255 = !DIGlobalVariableExpression(var: !2256, expr: !DIExpression())
!2256 = distinct !DIGlobalVariable(name: "dom", scope: !2, file: !3, line: 184, type: !2257, isLocal: true, isDefinition: true)
!2257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2258, size: 64)
!2258 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2259, line: 45, baseType: !2260)
!2259 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2261, size: 64)
!2261 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2259, line: 39, size: 192, elements: !2262)
!2262 = !{!2263, !2264, !2265, !2266}
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2261, file: !2259, line: 41, baseType: !2183, size: 64)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2261, file: !2259, line: 42, baseType: !7, size: 32, offset: 64)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2261, file: !2259, line: 43, baseType: !7, size: 32, offset: 96)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2261, file: !2259, line: 44, baseType: !2267, size: 64, offset: 128)
!2267 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1070, size: 64, elements: !1035)
!2268 = !DIGlobalVariableExpression(var: !2269, expr: !DIExpression())
!2269 = distinct !DIGlobalVariable(name: "prob", scope: !2, file: !3, line: 195, type: !991, isLocal: true, isDefinition: true)
!2270 = !DIGlobalVariableExpression(var: !2271, expr: !DIExpression())
!2271 = distinct !DIGlobalVariable(name: "rgn_nr_edges", scope: !2, file: !3, line: 201, type: !990, isLocal: true, isDefinition: true)
!2272 = !DIGlobalVariableExpression(var: !2273, expr: !DIExpression())
!2273 = distinct !DIGlobalVariable(name: "rgn_edges", scope: !2, file: !3, line: 204, type: !2167, isLocal: true, isDefinition: true)
!2274 = !DIGlobalVariableExpression(var: !2275, expr: !DIExpression())
!2275 = distinct !DIGlobalVariable(name: "pot_split", scope: !2, file: !3, line: 216, type: !2276, isLocal: true, isDefinition: true)
!2276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2277, size: 64)
!2277 = !DIDerivedType(tag: DW_TAG_typedef, name: "edgeset", file: !3, line: 198, baseType: !2258)
!2278 = !DIGlobalVariableExpression(var: !2279, expr: !DIExpression())
!2279 = distinct !DIGlobalVariable(name: "ancestor_edges", scope: !2, file: !3, line: 219, type: !2276, isLocal: true, isDefinition: true)
!2280 = !DIGlobalVariableExpression(var: !2281, expr: !DIExpression())
!2281 = distinct !DIGlobalVariable(name: "not_in_df", scope: !2, file: !3, line: 1647, type: !2163, isLocal: true, isDefinition: true)
!2282 = !DIGlobalVariableExpression(var: !2283, expr: !DIExpression())
!2283 = distinct !DIGlobalVariable(name: "rgn_common_sched_info", scope: !2, file: !3, line: 2330, type: !2284, isLocal: true, isDefinition: true)
!2284 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "common_sched_info_def", file: !508, line: 81, size: 320, elements: !2285)
!2285 = !{!2286, !2290, !2294, !2298, !2302}
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "fix_recovery_cfg", scope: !2284, file: !508, line: 89, baseType: !2287, size: 64)
!2287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2288, size: 64)
!2288 = !DISubroutineType(types: !2289)
!2289 = !{null, !990, !990, !990}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "add_block", scope: !2284, file: !508, line: 96, baseType: !2291, size: 64, offset: 64)
!2291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2292, size: 64)
!2292 = !DISubroutineType(types: !2293)
!2293 = !{null, !1536, !1536}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_number_of_insns", scope: !2284, file: !508, line: 99, baseType: !2295, size: 64, offset: 128)
!2295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2296, size: 64)
!2296 = !DISubroutineType(types: !2297)
!2297 = !{!990, !1536}
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "luid_for_non_insn", scope: !2284, file: !508, line: 105, baseType: !2299, size: 64, offset: 192)
!2299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2300, size: 64)
!2300 = !DISubroutineType(types: !2301)
!2301 = !{!990, !997}
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "sched_pass_id", scope: !2284, file: !508, line: 108, baseType: !713, size: 32, offset: 256)
!2303 = !DIGlobalVariableExpression(var: !2304, expr: !DIExpression())
!2304 = distinct !DIGlobalVariable(name: "rgn_sched_deps_info", scope: !2, file: !3, line: 2335, type: !2305, isLocal: true, isDefinition: true)
!2305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_deps_info_def", file: !508, line: 1149, size: 832, elements: !2306)
!2306 = !{!2307, !2313, !2317, !2321, !2322, !2323, !2324, !2325, !2329, !2330, !2331, !2335, !2339, !2340, !2341}
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "compute_jump_reg_dependencies", scope: !2305, file: !508, line: 1154, baseType: !2308, size: 64)
!2308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2309, size: 64)
!2309 = !DISubroutineType(types: !2310)
!2310 = !{null, !997, !2311, !2311, !2311}
!2311 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset", file: !142, line: 37, baseType: !2312)
!2312 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !998, line: 47, baseType: !1054)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "start_insn", scope: !2305, file: !508, line: 1157, baseType: !2314, size: 64, offset: 64)
!2314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2315, size: 64)
!2315 = !DISubroutineType(types: !2316)
!2316 = !{null, !997}
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "finish_insn", scope: !2305, file: !508, line: 1160, baseType: !2318, size: 64, offset: 128)
!2318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2319, size: 64)
!2319 = !DISubroutineType(types: !2320)
!2320 = !{null}
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "start_lhs", scope: !2305, file: !508, line: 1163, baseType: !2314, size: 64, offset: 192)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "finish_lhs", scope: !2305, file: !508, line: 1166, baseType: !2318, size: 64, offset: 256)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "start_rhs", scope: !2305, file: !508, line: 1169, baseType: !2314, size: 64, offset: 320)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "finish_rhs", scope: !2305, file: !508, line: 1172, baseType: !2318, size: 64, offset: 384)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "note_reg_set", scope: !2305, file: !508, line: 1175, baseType: !2326, size: 64, offset: 448)
!2326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2327, size: 64)
!2327 = !DISubroutineType(types: !2328)
!2328 = !{null, !990}
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "note_reg_clobber", scope: !2305, file: !508, line: 1178, baseType: !2326, size: 64, offset: 512)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "note_reg_use", scope: !2305, file: !508, line: 1181, baseType: !2326, size: 64, offset: 576)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "note_mem_dep", scope: !2305, file: !508, line: 1185, baseType: !2332, size: 64, offset: 640)
!2332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2333, size: 64)
!2333 = !DISubroutineType(types: !2334)
!2334 = !{null, !997, !997, !997, !2184}
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "note_dep", scope: !2305, file: !508, line: 1188, baseType: !2336, size: 64, offset: 704)
!2336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2337, size: 64)
!2337 = !DISubroutineType(types: !2338)
!2338 = !{null, !997, !2184}
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "use_cselib", scope: !2305, file: !508, line: 1194, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "use_deps_list", scope: !2305, file: !508, line: 1198, baseType: !7, size: 1, offset: 769, flags: DIFlagBitField, extraData: i64 768)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "generate_spec_deps", scope: !2305, file: !508, line: 1202, baseType: !7, size: 1, offset: 770, flags: DIFlagBitField, extraData: i64 768)
!2342 = !DIGlobalVariableExpression(var: !2343, expr: !DIExpression())
!2343 = distinct !DIGlobalVariable(name: "rgn_sched_info", scope: !2, file: !3, line: 2393, type: !2344, isLocal: true, isDefinition: true)
!2344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "haifa_sched_info", file: !508, line: 556, size: 1088, elements: !2345)
!2345 = !{!2346, !2347, !2348, !2352, !2356, !2360, !2367, !2368, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2382, !2386, !2390}
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "init_ready_list", scope: !2344, file: !508, line: 560, baseType: !2318, size: 64)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "can_schedule_ready_p", scope: !2344, file: !508, line: 563, baseType: !2299, size: 64, offset: 64)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_more_p", scope: !2344, file: !508, line: 565, baseType: !2349, size: 64, offset: 128)
!2349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2350, size: 64)
!2350 = !DISubroutineType(types: !2351)
!2351 = !{!990}
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "new_ready", scope: !2344, file: !508, line: 571, baseType: !2353, size: 64, offset: 192)
!2353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2354, size: 64)
!2354 = !DISubroutineType(types: !2355)
!2355 = !{!2184, !997, !2184}
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "rank", scope: !2344, file: !508, line: 575, baseType: !2357, size: 64, offset: 256)
!2357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2358, size: 64)
!2358 = !DISubroutineType(types: !2359)
!2359 = !{!990, !997, !997}
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "print_insn", scope: !2344, file: !508, line: 580, baseType: !2361, size: 64, offset: 320)
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2362, size: 64)
!2362 = !DISubroutineType(types: !2363)
!2363 = !{!1023, !2364, !990}
!2364 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !998, line: 51, baseType: !2365)
!2365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2366, size: 64)
!2366 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1000)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "contributes_to_priority", scope: !2344, file: !508, line: 583, baseType: !2357, size: 64, offset: 384)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "insn_finishes_block_p", scope: !2344, file: !508, line: 587, baseType: !2369, size: 64, offset: 448)
!2369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2370, size: 64)
!2370 = !DISubroutineType(types: !2371)
!2371 = !{!1230, !997}
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "prev_head", scope: !2344, file: !508, line: 590, baseType: !997, size: 64, offset: 512)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "next_tail", scope: !2344, file: !508, line: 590, baseType: !997, size: 64, offset: 576)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2344, file: !508, line: 594, baseType: !997, size: 64, offset: 640)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2344, file: !508, line: 594, baseType: !997, size: 64, offset: 704)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "queue_must_finish_empty", scope: !2344, file: !508, line: 597, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "sched_max_insns_priority", scope: !2344, file: !508, line: 600, baseType: !990, size: 32, offset: 800)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "add_remove_insn", scope: !2344, file: !508, line: 606, baseType: !2379, size: 64, offset: 832)
!2379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2380, size: 64)
!2380 = !DISubroutineType(types: !2381)
!2381 = !{null, !997, !990}
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "begin_schedule_ready", scope: !2344, file: !508, line: 611, baseType: !2383, size: 64, offset: 896)
!2383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2384, size: 64)
!2384 = !DISubroutineType(types: !2385)
!2385 = !{null, !997, !997}
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "advance_target_bb", scope: !2344, file: !508, line: 617, baseType: !2387, size: 64, offset: 960)
!2387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2388, size: 64)
!2388 = !DISubroutineType(types: !2389)
!2389 = !{!1536, !1536, !997}
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2344, file: !508, line: 621, baseType: !7, size: 32, offset: 1024)
!2391 = !DIGlobalVariableExpression(var: !2392, expr: !DIExpression())
!2392 = distinct !DIGlobalVariable(name: "insn_referenced", scope: !2, file: !3, line: 2427, type: !2258, isLocal: true, isDefinition: true)
!2393 = !DIGlobalVariableExpression(var: !2394, expr: !DIExpression())
!2394 = distinct !DIGlobalVariable(name: "bb_deps", scope: !2, file: !3, line: 2570, type: !993, isLocal: true, isDefinition: true)
!2395 = !DIGlobalVariableExpression(var: !2396, expr: !DIExpression())
!2396 = distinct !DIGlobalVariable(name: "rgn_n_insns", scope: !2, file: !3, line: 2895, type: !990, isLocal: true, isDefinition: true)
!2397 = !DIGlobalVariableExpression(var: !2398, expr: !DIExpression())
!2398 = distinct !DIGlobalVariable(name: "null_link", scope: !2399, file: !508, line: 1430, type: !2410, isLocal: true, isDefinition: true)
!2399 = distinct !DISubprogram(name: "sd_iterator_start", scope: !508, file: !508, line: 1427, type: !2400, scopeLine: 1428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2400 = !DISubroutineType(types: !2401)
!2401 = !{!2402, !997, !2406}
!2402 = !DIDerivedType(tag: DW_TAG_typedef, name: "sd_iterator_def", file: !508, line: 1414, baseType: !2403)
!2403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sd_iterator", file: !508, line: 1395, size: 256, elements: !2404)
!2404 = !{!2405, !2407, !2408, !2431}
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2403, file: !508, line: 1398, baseType: !2406, size: 32)
!2406 = !DIDerivedType(tag: DW_TAG_typedef, name: "sd_list_types_def", file: !508, line: 1390, baseType: !990)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2403, file: !508, line: 1401, baseType: !997, size: 64, offset: 64)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "linkp", scope: !2403, file: !508, line: 1408, baseType: !2409, size: 64, offset: 128)
!2409 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2410, size: 64)
!2410 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_link_t", file: !508, line: 280, baseType: !2411)
!2411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2412, size: 64)
!2412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_dep_link", file: !508, line: 265, size: 192, elements: !2413)
!2413 = !{!2414, !2428, !2429}
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !2412, file: !508, line: 268, baseType: !2415, size: 64)
!2415 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_node_t", file: !508, line: 261, baseType: !2416)
!2416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2417, size: 64)
!2417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_dep_node", file: !508, line: 405, size: 576, elements: !2418)
!2418 = !{!2419, !2420, !2427}
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "back", scope: !2417, file: !508, line: 408, baseType: !2412, size: 192)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "dep", scope: !2417, file: !508, line: 411, baseType: !2421, size: 192, offset: 192)
!2421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_dep", file: !508, line: 227, size: 192, elements: !2422)
!2422 = !{!2423, !2424, !2425, !2426}
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "pro", scope: !2421, file: !508, line: 230, baseType: !997, size: 64)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "con", scope: !2421, file: !508, line: 233, baseType: !997, size: 64, offset: 64)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2421, file: !508, line: 237, baseType: !661, size: 32, offset: 128)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !2421, file: !508, line: 241, baseType: !2184, size: 32, offset: 160)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "forw", scope: !2417, file: !508, line: 414, baseType: !2412, size: 192, offset: 384)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2412, file: !508, line: 271, baseType: !2411, size: 64, offset: 64)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "prev_nextp", scope: !2412, file: !508, line: 278, baseType: !2430, size: 64, offset: 128)
!2430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2411, size: 64)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "resolved_p", scope: !2403, file: !508, line: 1411, baseType: !1230, size: 8, offset: 192)
!2432 = !{}
!2433 = !DIGlobalVariableExpression(var: !2434, expr: !DIExpression())
!2434 = distinct !DIGlobalVariable(name: "rgn_const_sched_deps_info", scope: !2, file: !3, line: 2339, type: !2435, isLocal: true, isDefinition: true)
!2435 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2305)
!2436 = !DIGlobalVariableExpression(var: !2437, expr: !DIExpression())
!2437 = distinct !DIGlobalVariable(name: "rgn_const_sel_sched_deps_info", scope: !2, file: !3, line: 2347, type: !2435, isLocal: true, isDefinition: true)
!2438 = !DIGlobalVariableExpression(var: !2439, expr: !DIExpression())
!2439 = distinct !DIGlobalVariable(name: "rgn_const_sched_info", scope: !2, file: !3, line: 2370, type: !2440, isLocal: true, isDefinition: true)
!2440 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2344)
!2441 = !DIGlobalVariableExpression(var: !2442, expr: !DIExpression())
!2442 = distinct !DIGlobalVariable(name: "target_n_insns", scope: !2, file: !3, line: 2068, type: !990, isLocal: true, isDefinition: true)
!2443 = !DIGlobalVariableExpression(var: !2444, expr: !DIExpression())
!2444 = distinct !DIGlobalVariable(name: "sched_target_n_insns", scope: !2, file: !3, line: 2066, type: !990, isLocal: true, isDefinition: true)
!2445 = !DIGlobalVariableExpression(var: !2446, expr: !DIExpression())
!2446 = distinct !DIGlobalVariable(name: "sched_n_insns", scope: !2, file: !3, line: 2070, type: !990, isLocal: true, isDefinition: true)
!2447 = !DIGlobalVariableExpression(var: !2448, expr: !DIExpression())
!2448 = distinct !DIGlobalVariable(name: "bblst_last", scope: !2, file: !3, line: 128, type: !990, isLocal: true, isDefinition: true)
!2449 = !DIGlobalVariableExpression(var: !2450, expr: !DIExpression())
!2450 = distinct !DIGlobalVariable(name: "bblst_size", scope: !2, file: !3, line: 128, type: !990, isLocal: true, isDefinition: true)
!2451 = !DIGlobalVariableExpression(var: !2452, expr: !DIExpression())
!2452 = distinct !DIGlobalVariable(name: "bblst_table", scope: !2, file: !3, line: 127, type: !2197, isLocal: true, isDefinition: true)
!2453 = !DIGlobalVariableExpression(var: !2454, expr: !DIExpression())
!2454 = distinct !DIGlobalVariable(name: "edgelst_last", scope: !2, file: !3, line: 172, type: !990, isLocal: true, isDefinition: true)
!2455 = !DIGlobalVariableExpression(var: !2456, expr: !DIExpression())
!2456 = distinct !DIGlobalVariable(name: "edgelst_table", scope: !2, file: !3, line: 171, type: !2167, isLocal: true, isDefinition: true)
!2457 = !DIGlobalVariableExpression(var: !2458, expr: !DIExpression())
!2458 = distinct !DIGlobalVariable(name: "tmp", scope: !2459, file: !3, line: 2257, type: !2460, isLocal: true, isDefinition: true)
!2459 = distinct !DISubprogram(name: "rgn_print_insn", scope: !3, file: !3, line: 2255, type: !2362, scopeLine: 2256, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1025, size: 640, elements: !2461)
!2461 = !{!2462}
!2462 = !DISubrange(count: 80)
!2463 = !{i32 7, !"Dwarf Version", i32 4}
!2464 = !{i32 2, !"Debug Info Version", i32 3}
!2465 = !{i32 1, !"wchar_size", i32 4}
!2466 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2467 = distinct !DISubprogram(name: "debug_regions", scope: !3, file: !3, line: 358, type: !2319, scopeLine: 359, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2468 = !DILocalVariable(name: "rgn", scope: !2467, file: !3, line: 360, type: !990)
!2469 = !DILocation(line: 360, column: 7, scope: !2467)
!2470 = !DILocalVariable(name: "bb", scope: !2467, file: !3, line: 360, type: !990)
!2471 = !DILocation(line: 360, column: 12, scope: !2467)
!2472 = !DILocation(line: 362, column: 12, scope: !2467)
!2473 = !DILocation(line: 362, column: 3, scope: !2467)
!2474 = !DILocation(line: 363, column: 12, scope: !2475)
!2475 = distinct !DILexicalBlock(scope: !2467, file: !3, line: 363, column: 3)
!2476 = !DILocation(line: 363, column: 8, scope: !2475)
!2477 = !DILocation(line: 363, column: 17, scope: !2478)
!2478 = distinct !DILexicalBlock(scope: !2475, file: !3, line: 363, column: 3)
!2479 = !DILocation(line: 363, column: 23, scope: !2478)
!2480 = !DILocation(line: 363, column: 21, scope: !2478)
!2481 = !DILocation(line: 363, column: 3, scope: !2475)
!2482 = !DILocation(line: 365, column: 16, scope: !2483)
!2483 = distinct !DILexicalBlock(scope: !2478, file: !3, line: 364, column: 5)
!2484 = !DILocation(line: 365, column: 58, scope: !2483)
!2485 = !DILocation(line: 366, column: 9, scope: !2483)
!2486 = !DILocation(line: 366, column: 19, scope: !2483)
!2487 = !DILocation(line: 366, column: 24, scope: !2483)
!2488 = !DILocation(line: 365, column: 7, scope: !2483)
!2489 = !DILocation(line: 367, column: 16, scope: !2483)
!2490 = !DILocation(line: 367, column: 7, scope: !2483)
!2491 = !DILocation(line: 371, column: 24, scope: !2483)
!2492 = !DILocation(line: 371, column: 22, scope: !2483)
!2493 = !DILocation(line: 373, column: 15, scope: !2494)
!2494 = distinct !DILexicalBlock(scope: !2483, file: !3, line: 373, column: 7)
!2495 = !DILocation(line: 373, column: 12, scope: !2494)
!2496 = !DILocation(line: 373, column: 20, scope: !2497)
!2497 = distinct !DILexicalBlock(scope: !2494, file: !3, line: 373, column: 7)
!2498 = !DILocation(line: 373, column: 25, scope: !2497)
!2499 = !DILocation(line: 373, column: 35, scope: !2497)
!2500 = !DILocation(line: 373, column: 40, scope: !2497)
!2501 = !DILocation(line: 373, column: 23, scope: !2497)
!2502 = !DILocation(line: 373, column: 7, scope: !2494)
!2503 = !DILocation(line: 374, column: 11, scope: !2497)
!2504 = !DILocation(line: 374, column: 34, scope: !2497)
!2505 = !DILocation(line: 374, column: 38, scope: !2497)
!2506 = !DILocation(line: 374, column: 51, scope: !2497)
!2507 = !DILocation(line: 374, column: 68, scope: !2497)
!2508 = !DILocation(line: 374, column: 66, scope: !2497)
!2509 = !DILocation(line: 374, column: 2, scope: !2497)
!2510 = !DILocation(line: 373, column: 57, scope: !2497)
!2511 = !DILocation(line: 373, column: 7, scope: !2497)
!2512 = distinct !{!2512, !2502, !2513}
!2513 = !DILocation(line: 374, column: 71, scope: !2494)
!2514 = !DILocation(line: 376, column: 16, scope: !2483)
!2515 = !DILocation(line: 376, column: 7, scope: !2483)
!2516 = !DILocation(line: 377, column: 5, scope: !2483)
!2517 = !DILocation(line: 363, column: 38, scope: !2478)
!2518 = !DILocation(line: 363, column: 3, scope: !2478)
!2519 = distinct !{!2519, !2481, !2520}
!2520 = !DILocation(line: 377, column: 5, scope: !2475)
!2521 = !DILocation(line: 378, column: 1, scope: !2467)
!2522 = distinct !DISubprogram(name: "debug_region", scope: !3, file: !3, line: 383, type: !2327, scopeLine: 384, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2523 = !DILocalVariable(name: "rgn", arg: 1, scope: !2522, file: !3, line: 383, type: !990)
!2524 = !DILocation(line: 383, column: 19, scope: !2522)
!2525 = !DILocalVariable(name: "bb", scope: !2522, file: !3, line: 385, type: !990)
!2526 = !DILocation(line: 385, column: 7, scope: !2522)
!2527 = !DILocation(line: 387, column: 12, scope: !2522)
!2528 = !DILocation(line: 387, column: 68, scope: !2522)
!2529 = !DILocation(line: 387, column: 3, scope: !2522)
!2530 = !DILocation(line: 388, column: 12, scope: !2522)
!2531 = !DILocation(line: 388, column: 50, scope: !2522)
!2532 = !DILocation(line: 389, column: 5, scope: !2522)
!2533 = !DILocation(line: 389, column: 15, scope: !2522)
!2534 = !DILocation(line: 389, column: 20, scope: !2522)
!2535 = !DILocation(line: 388, column: 3, scope: !2522)
!2536 = !DILocation(line: 390, column: 12, scope: !2522)
!2537 = !DILocation(line: 390, column: 3, scope: !2522)
!2538 = !DILocation(line: 394, column: 20, scope: !2522)
!2539 = !DILocation(line: 394, column: 18, scope: !2522)
!2540 = !DILocation(line: 396, column: 11, scope: !2541)
!2541 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 396, column: 3)
!2542 = !DILocation(line: 396, column: 8, scope: !2541)
!2543 = !DILocation(line: 396, column: 16, scope: !2544)
!2544 = distinct !DILexicalBlock(scope: !2541, file: !3, line: 396, column: 3)
!2545 = !DILocation(line: 396, column: 21, scope: !2544)
!2546 = !DILocation(line: 396, column: 31, scope: !2544)
!2547 = !DILocation(line: 396, column: 36, scope: !2544)
!2548 = !DILocation(line: 396, column: 19, scope: !2544)
!2549 = !DILocation(line: 396, column: 3, scope: !2541)
!2550 = !DILocation(line: 397, column: 14, scope: !2544)
!2551 = !DILocation(line: 397, column: 33, scope: !2544)
!2552 = !DILocation(line: 397, column: 37, scope: !2544)
!2553 = !DILocation(line: 397, column: 50, scope: !2544)
!2554 = !DILocation(line: 397, column: 67, scope: !2544)
!2555 = !DILocation(line: 397, column: 65, scope: !2544)
!2556 = !DILocation(line: 397, column: 5, scope: !2544)
!2557 = !DILocation(line: 396, column: 53, scope: !2544)
!2558 = !DILocation(line: 396, column: 3, scope: !2544)
!2559 = distinct !{!2559, !2549, !2560}
!2560 = !DILocation(line: 397, column: 70, scope: !2541)
!2561 = !DILocation(line: 399, column: 12, scope: !2522)
!2562 = !DILocation(line: 399, column: 3, scope: !2522)
!2563 = !DILocation(line: 401, column: 11, scope: !2564)
!2564 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 401, column: 3)
!2565 = !DILocation(line: 401, column: 8, scope: !2564)
!2566 = !DILocation(line: 401, column: 16, scope: !2567)
!2567 = distinct !DILexicalBlock(scope: !2564, file: !3, line: 401, column: 3)
!2568 = !DILocation(line: 401, column: 21, scope: !2567)
!2569 = !DILocation(line: 401, column: 31, scope: !2567)
!2570 = !DILocation(line: 401, column: 36, scope: !2567)
!2571 = !DILocation(line: 401, column: 19, scope: !2567)
!2572 = !DILocation(line: 401, column: 3, scope: !2564)
!2573 = !DILocation(line: 403, column: 24, scope: !2574)
!2574 = distinct !DILexicalBlock(scope: !2567, file: !3, line: 402, column: 5)
!2575 = !DILocation(line: 403, column: 37, scope: !2574)
!2576 = !DILocation(line: 403, column: 54, scope: !2574)
!2577 = !DILocation(line: 403, column: 52, scope: !2574)
!2578 = !DILocation(line: 403, column: 7, scope: !2574)
!2579 = !DILocation(line: 404, column: 16, scope: !2574)
!2580 = !DILocation(line: 404, column: 7, scope: !2574)
!2581 = !DILocation(line: 405, column: 5, scope: !2574)
!2582 = !DILocation(line: 401, column: 53, scope: !2567)
!2583 = !DILocation(line: 401, column: 3, scope: !2567)
!2584 = distinct !{!2584, !2572, !2585}
!2585 = !DILocation(line: 405, column: 5, scope: !2564)
!2586 = !DILocation(line: 407, column: 12, scope: !2522)
!2587 = !DILocation(line: 407, column: 3, scope: !2522)
!2588 = !DILocation(line: 409, column: 1, scope: !2522)
!2589 = distinct !DISubprogram(name: "dump_region_dot", scope: !3, file: !3, line: 426, type: !2590, scopeLine: 427, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2590 = !DISubroutineType(types: !2591)
!2591 = !{null, !2592, !990}
!2592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2593, size: 64)
!2593 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2594, line: 7, baseType: !2595)
!2594 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2596, line: 49, size: 1728, elements: !2597)
!2596 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2597 = !{!2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2613, !2615, !2616, !2617, !2620, !2622, !2623, !2624, !2627, !2629, !2632, !2635, !2636, !2637, !2638, !2639}
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2595, file: !2596, line: 51, baseType: !990, size: 32)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2595, file: !2596, line: 54, baseType: !1093, size: 64, offset: 64)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2595, file: !2596, line: 55, baseType: !1093, size: 64, offset: 128)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2595, file: !2596, line: 56, baseType: !1093, size: 64, offset: 192)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2595, file: !2596, line: 57, baseType: !1093, size: 64, offset: 256)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2595, file: !2596, line: 58, baseType: !1093, size: 64, offset: 320)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2595, file: !2596, line: 59, baseType: !1093, size: 64, offset: 384)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2595, file: !2596, line: 60, baseType: !1093, size: 64, offset: 448)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2595, file: !2596, line: 61, baseType: !1093, size: 64, offset: 512)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2595, file: !2596, line: 64, baseType: !1093, size: 64, offset: 576)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2595, file: !2596, line: 65, baseType: !1093, size: 64, offset: 640)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2595, file: !2596, line: 66, baseType: !1093, size: 64, offset: 704)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2595, file: !2596, line: 68, baseType: !2611, size: 64, offset: 768)
!2611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2612, size: 64)
!2612 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2596, line: 36, flags: DIFlagFwdDecl)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2595, file: !2596, line: 70, baseType: !2614, size: 64, offset: 832)
!2614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2595, size: 64)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2595, file: !2596, line: 72, baseType: !990, size: 32, offset: 896)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2595, file: !2596, line: 73, baseType: !990, size: 32, offset: 928)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2595, file: !2596, line: 74, baseType: !2618, size: 64, offset: 960)
!2618 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2619, line: 152, baseType: !1087)
!2619 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2595, file: !2596, line: 77, baseType: !2621, size: 16, offset: 1024)
!2621 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2595, file: !2596, line: 78, baseType: !1910, size: 8, offset: 1040)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2595, file: !2596, line: 79, baseType: !1212, size: 8, offset: 1048)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2595, file: !2596, line: 81, baseType: !2625, size: 64, offset: 1088)
!2625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2626, size: 64)
!2626 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2596, line: 43, baseType: null)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2595, file: !2596, line: 89, baseType: !2628, size: 64, offset: 1152)
!2628 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2619, line: 153, baseType: !1087)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2595, file: !2596, line: 91, baseType: !2630, size: 64, offset: 1216)
!2630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2631, size: 64)
!2631 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2596, line: 37, flags: DIFlagFwdDecl)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2595, file: !2596, line: 92, baseType: !2633, size: 64, offset: 1280)
!2633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2634, size: 64)
!2634 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2596, line: 38, flags: DIFlagFwdDecl)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2595, file: !2596, line: 93, baseType: !2614, size: 64, offset: 1344)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2595, file: !2596, line: 94, baseType: !992, size: 64, offset: 1408)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2595, file: !2596, line: 95, baseType: !1474, size: 64, offset: 1472)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2595, file: !2596, line: 96, baseType: !990, size: 32, offset: 1536)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2595, file: !2596, line: 98, baseType: !2640, size: 160, offset: 1568)
!2640 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1025, size: 160, elements: !2641)
!2641 = !{!2642}
!2642 = !DISubrange(count: 20)
!2643 = !DILocalVariable(name: "f", arg: 1, scope: !2589, file: !3, line: 426, type: !2592)
!2644 = !DILocation(line: 426, column: 24, scope: !2589)
!2645 = !DILocalVariable(name: "rgn", arg: 2, scope: !2589, file: !3, line: 426, type: !990)
!2646 = !DILocation(line: 426, column: 31, scope: !2589)
!2647 = !DILocalVariable(name: "i", scope: !2589, file: !3, line: 428, type: !990)
!2648 = !DILocation(line: 428, column: 7, scope: !2589)
!2649 = !DILocation(line: 430, column: 12, scope: !2589)
!2650 = !DILocation(line: 430, column: 40, scope: !2589)
!2651 = !DILocation(line: 430, column: 3, scope: !2589)
!2652 = !DILocation(line: 434, column: 20, scope: !2589)
!2653 = !DILocation(line: 434, column: 18, scope: !2589)
!2654 = !DILocation(line: 436, column: 10, scope: !2655)
!2655 = distinct !DILexicalBlock(scope: !2589, file: !3, line: 436, column: 3)
!2656 = !DILocation(line: 436, column: 8, scope: !2655)
!2657 = !DILocation(line: 436, column: 15, scope: !2658)
!2658 = distinct !DILexicalBlock(scope: !2655, file: !3, line: 436, column: 3)
!2659 = !DILocation(line: 436, column: 19, scope: !2658)
!2660 = !DILocation(line: 436, column: 29, scope: !2658)
!2661 = !DILocation(line: 436, column: 34, scope: !2658)
!2662 = !DILocation(line: 436, column: 17, scope: !2658)
!2663 = !DILocation(line: 436, column: 3, scope: !2655)
!2664 = !DILocalVariable(name: "e", scope: !2665, file: !3, line: 438, type: !1553)
!2665 = distinct !DILexicalBlock(scope: !2658, file: !3, line: 437, column: 5)
!2666 = !DILocation(line: 438, column: 12, scope: !2665)
!2667 = !DILocalVariable(name: "ei", scope: !2665, file: !3, line: 439, type: !2177)
!2668 = !DILocation(line: 439, column: 21, scope: !2665)
!2669 = !DILocalVariable(name: "src_bb_num", scope: !2665, file: !3, line: 440, type: !990)
!2670 = !DILocation(line: 440, column: 11, scope: !2665)
!2671 = !DILocation(line: 440, column: 24, scope: !2665)
!2672 = !DILocation(line: 440, column: 37, scope: !2665)
!2673 = !DILocation(line: 440, column: 54, scope: !2665)
!2674 = !DILocation(line: 440, column: 52, scope: !2665)
!2675 = !DILocalVariable(name: "bb", scope: !2665, file: !3, line: 441, type: !1537)
!2676 = !DILocation(line: 441, column: 31, scope: !2665)
!2677 = !DILocation(line: 441, column: 36, scope: !2665)
!2678 = !DILocation(line: 443, column: 7, scope: !2679)
!2679 = distinct !DILexicalBlock(scope: !2665, file: !3, line: 443, column: 7)
!2680 = !DILocation(line: 443, column: 7, scope: !2681)
!2681 = distinct !DILexicalBlock(scope: !2679, file: !3, line: 443, column: 7)
!2682 = !DILocation(line: 444, column: 29, scope: !2683)
!2683 = distinct !DILexicalBlock(scope: !2681, file: !3, line: 444, column: 13)
!2684 = !DILocation(line: 444, column: 32, scope: !2683)
!2685 = !DILocation(line: 444, column: 38, scope: !2683)
!2686 = !DILocation(line: 444, column: 45, scope: !2683)
!2687 = !DILocation(line: 444, column: 13, scope: !2683)
!2688 = !DILocation(line: 444, column: 13, scope: !2681)
!2689 = !DILocation(line: 445, column: 13, scope: !2683)
!2690 = !DILocation(line: 445, column: 32, scope: !2683)
!2691 = !DILocation(line: 445, column: 44, scope: !2683)
!2692 = !DILocation(line: 445, column: 47, scope: !2683)
!2693 = !DILocation(line: 445, column: 53, scope: !2683)
!2694 = !DILocation(line: 445, column: 4, scope: !2683)
!2695 = !DILocation(line: 444, column: 48, scope: !2683)
!2696 = distinct !{!2696, !2678, !2697}
!2697 = !DILocation(line: 445, column: 58, scope: !2679)
!2698 = !DILocation(line: 446, column: 5, scope: !2665)
!2699 = !DILocation(line: 436, column: 50, scope: !2658)
!2700 = !DILocation(line: 436, column: 3, scope: !2658)
!2701 = distinct !{!2701, !2663, !2702}
!2702 = !DILocation(line: 446, column: 5, scope: !2655)
!2703 = !DILocation(line: 447, column: 12, scope: !2589)
!2704 = !DILocation(line: 447, column: 3, scope: !2589)
!2705 = !DILocation(line: 448, column: 1, scope: !2589)
!2706 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !142, file: !142, line: 281, type: !2707, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2707 = !DISubroutineType(types: !2708)
!2708 = !{!1536, !2709, !7}
!2709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2710, size: 64)
!2710 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1617)
!2711 = !DILocalVariable(name: "vec_", arg: 1, scope: !2706, file: !142, line: 281, type: !2709)
!2712 = !DILocation(line: 281, column: 1, scope: !2706)
!2713 = !DILocalVariable(name: "ix_", arg: 2, scope: !2706, file: !142, line: 281, type: !7)
!2714 = !DILocation(line: 0, scope: !2706)
!2715 = distinct !DISubprogram(name: "ei_start_1", scope: !142, file: !142, line: 696, type: !2716, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2716 = !DISubroutineType(types: !2717)
!2717 = !{!2177, !2182}
!2718 = !DILocalVariable(name: "ev", arg: 1, scope: !2715, file: !142, line: 696, type: !2182)
!2719 = !DILocation(line: 696, column: 28, scope: !2715)
!2720 = !DILocalVariable(name: "i", scope: !2715, file: !142, line: 698, type: !2177)
!2721 = !DILocation(line: 698, column: 17, scope: !2715)
!2722 = !DILocation(line: 700, column: 5, scope: !2715)
!2723 = !DILocation(line: 700, column: 11, scope: !2715)
!2724 = !DILocation(line: 701, column: 17, scope: !2715)
!2725 = !DILocation(line: 701, column: 5, scope: !2715)
!2726 = !DILocation(line: 701, column: 15, scope: !2715)
!2727 = !DILocation(line: 703, column: 3, scope: !2715)
!2728 = distinct !DISubprogram(name: "ei_cond", scope: !142, file: !142, line: 771, type: !2729, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2729 = !DISubroutineType(types: !2730)
!2730 = !{!1230, !2177, !2167}
!2731 = !DILocalVariable(name: "ei", arg: 1, scope: !2728, file: !142, line: 771, type: !2177)
!2732 = !DILocation(line: 771, column: 24, scope: !2728)
!2733 = !DILocalVariable(name: "p", arg: 2, scope: !2728, file: !142, line: 771, type: !2167)
!2734 = !DILocation(line: 771, column: 34, scope: !2728)
!2735 = !DILocation(line: 773, column: 8, scope: !2736)
!2736 = distinct !DILexicalBlock(scope: !2728, file: !142, line: 773, column: 7)
!2737 = !DILocation(line: 773, column: 7, scope: !2728)
!2738 = !DILocation(line: 775, column: 12, scope: !2739)
!2739 = distinct !DILexicalBlock(scope: !2736, file: !142, line: 774, column: 5)
!2740 = !DILocation(line: 775, column: 8, scope: !2739)
!2741 = !DILocation(line: 775, column: 10, scope: !2739)
!2742 = !DILocation(line: 776, column: 7, scope: !2739)
!2743 = !DILocation(line: 780, column: 8, scope: !2744)
!2744 = distinct !DILexicalBlock(scope: !2736, file: !142, line: 779, column: 5)
!2745 = !DILocation(line: 780, column: 10, scope: !2744)
!2746 = !DILocation(line: 781, column: 7, scope: !2744)
!2747 = !DILocation(line: 783, column: 1, scope: !2728)
!2748 = distinct !DISubprogram(name: "bb_in_region_p", scope: !3, file: !3, line: 413, type: !2749, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2749 = !DISubroutineType(types: !2750)
!2750 = !{!1230, !990, !990}
!2751 = !DILocalVariable(name: "bb_index", arg: 1, scope: !2748, file: !3, line: 413, type: !990)
!2752 = !DILocation(line: 413, column: 21, scope: !2748)
!2753 = !DILocalVariable(name: "rgn", arg: 2, scope: !2748, file: !3, line: 413, type: !990)
!2754 = !DILocation(line: 413, column: 35, scope: !2748)
!2755 = !DILocalVariable(name: "i", scope: !2748, file: !3, line: 415, type: !990)
!2756 = !DILocation(line: 415, column: 7, scope: !2748)
!2757 = !DILocation(line: 417, column: 10, scope: !2758)
!2758 = distinct !DILexicalBlock(scope: !2748, file: !3, line: 417, column: 3)
!2759 = !DILocation(line: 417, column: 8, scope: !2758)
!2760 = !DILocation(line: 417, column: 15, scope: !2761)
!2761 = distinct !DILexicalBlock(scope: !2758, file: !3, line: 417, column: 3)
!2762 = !DILocation(line: 417, column: 19, scope: !2761)
!2763 = !DILocation(line: 417, column: 29, scope: !2761)
!2764 = !DILocation(line: 417, column: 34, scope: !2761)
!2765 = !DILocation(line: 417, column: 17, scope: !2761)
!2766 = !DILocation(line: 417, column: 3, scope: !2758)
!2767 = !DILocation(line: 418, column: 9, scope: !2768)
!2768 = distinct !DILexicalBlock(scope: !2761, file: !3, line: 418, column: 9)
!2769 = !DILocation(line: 418, column: 22, scope: !2768)
!2770 = !DILocation(line: 418, column: 39, scope: !2768)
!2771 = !DILocation(line: 418, column: 37, scope: !2768)
!2772 = !DILocation(line: 418, column: 45, scope: !2768)
!2773 = !DILocation(line: 418, column: 42, scope: !2768)
!2774 = !DILocation(line: 418, column: 9, scope: !2761)
!2775 = !DILocation(line: 419, column: 7, scope: !2768)
!2776 = !DILocation(line: 417, column: 50, scope: !2761)
!2777 = !DILocation(line: 417, column: 3, scope: !2761)
!2778 = distinct !{!2778, !2766, !2779}
!2779 = !DILocation(line: 419, column: 14, scope: !2758)
!2780 = !DILocation(line: 421, column: 3, scope: !2748)
!2781 = !DILocation(line: 422, column: 1, scope: !2748)
!2782 = distinct !DISubprogram(name: "ei_next", scope: !142, file: !142, line: 736, type: !2783, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2783 = !DISubroutineType(types: !2784)
!2784 = !{null, !2176}
!2785 = !DILocalVariable(name: "i", arg: 1, scope: !2782, file: !142, line: 736, type: !2176)
!2786 = !DILocation(line: 736, column: 25, scope: !2782)
!2787 = !DILocation(line: 738, column: 3, scope: !2782)
!2788 = !DILocation(line: 739, column: 3, scope: !2782)
!2789 = !DILocation(line: 739, column: 6, scope: !2782)
!2790 = !DILocation(line: 739, column: 11, scope: !2782)
!2791 = !DILocation(line: 740, column: 1, scope: !2782)
!2792 = distinct !DISubprogram(name: "dump_region_dot_file", scope: !3, file: !3, line: 452, type: !2793, scopeLine: 453, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2793 = !DISubroutineType(types: !2794)
!2794 = !{null, !1023, !990}
!2795 = !DILocalVariable(name: "fname", arg: 1, scope: !2792, file: !3, line: 452, type: !1023)
!2796 = !DILocation(line: 452, column: 35, scope: !2792)
!2797 = !DILocalVariable(name: "rgn", arg: 2, scope: !2792, file: !3, line: 452, type: !990)
!2798 = !DILocation(line: 452, column: 46, scope: !2792)
!2799 = !DILocalVariable(name: "f", scope: !2792, file: !3, line: 454, type: !2592)
!2800 = !DILocation(line: 454, column: 9, scope: !2792)
!2801 = !DILocation(line: 454, column: 13, scope: !2792)
!2802 = !DILocation(line: 455, column: 20, scope: !2792)
!2803 = !DILocation(line: 455, column: 23, scope: !2792)
!2804 = !DILocation(line: 455, column: 3, scope: !2792)
!2805 = !DILocation(line: 456, column: 11, scope: !2792)
!2806 = !DILocation(line: 456, column: 3, scope: !2792)
!2807 = !DILocation(line: 457, column: 1, scope: !2792)
!2808 = distinct !DISubprogram(name: "extend_rgns", scope: !3, file: !3, line: 1154, type: !2809, scopeLine: 1155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!2809 = !DISubroutineType(types: !2810)
!2810 = !{null, !991, !991, !2258, !991}
!2811 = !DILocalVariable(name: "degree", arg: 1, scope: !2808, file: !3, line: 1154, type: !991)
!2812 = !DILocation(line: 1154, column: 19, scope: !2808)
!2813 = !DILocalVariable(name: "idxp", arg: 2, scope: !2808, file: !3, line: 1154, type: !991)
!2814 = !DILocation(line: 1154, column: 32, scope: !2808)
!2815 = !DILocalVariable(name: "header", arg: 3, scope: !2808, file: !3, line: 1154, type: !2258)
!2816 = !DILocation(line: 1154, column: 46, scope: !2808)
!2817 = !DILocalVariable(name: "loop_hdr", arg: 4, scope: !2808, file: !3, line: 1154, type: !991)
!2818 = !DILocation(line: 1154, column: 59, scope: !2808)
!2819 = !DILocalVariable(name: "order", scope: !2808, file: !3, line: 1156, type: !991)
!2820 = !DILocation(line: 1156, column: 8, scope: !2808)
!2821 = !DILocalVariable(name: "i", scope: !2808, file: !3, line: 1156, type: !990)
!2822 = !DILocation(line: 1156, column: 15, scope: !2808)
!2823 = !DILocalVariable(name: "rescan", scope: !2808, file: !3, line: 1156, type: !990)
!2824 = !DILocation(line: 1156, column: 18, scope: !2808)
!2825 = !DILocalVariable(name: "idx", scope: !2808, file: !3, line: 1156, type: !990)
!2826 = !DILocation(line: 1156, column: 30, scope: !2808)
!2827 = !DILocation(line: 1156, column: 37, scope: !2808)
!2828 = !DILocation(line: 1156, column: 36, scope: !2808)
!2829 = !DILocalVariable(name: "iter", scope: !2808, file: !3, line: 1156, type: !990)
!2830 = !DILocation(line: 1156, column: 43, scope: !2808)
!2831 = !DILocalVariable(name: "max_iter", scope: !2808, file: !3, line: 1156, type: !990)
!2832 = !DILocation(line: 1156, column: 53, scope: !2808)
!2833 = !DILocalVariable(name: "max_hdr", scope: !2808, file: !3, line: 1156, type: !991)
!2834 = !DILocation(line: 1156, column: 64, scope: !2808)
!2835 = !DILocalVariable(name: "nblocks", scope: !2808, file: !3, line: 1157, type: !990)
!2836 = !DILocation(line: 1157, column: 7, scope: !2808)
!2837 = !DILocation(line: 1157, column: 17, scope: !2808)
!2838 = !DILocation(line: 1157, column: 32, scope: !2808)
!2839 = !DILocation(line: 1159, column: 14, scope: !2808)
!2840 = !DILocation(line: 1159, column: 12, scope: !2808)
!2841 = !DILocation(line: 1161, column: 13, scope: !2808)
!2842 = !DILocation(line: 1161, column: 11, scope: !2808)
!2843 = !DILocation(line: 1163, column: 11, scope: !2808)
!2844 = !DILocation(line: 1163, column: 9, scope: !2808)
!2845 = !DILocation(line: 1164, column: 23, scope: !2808)
!2846 = !DILocation(line: 1164, column: 3, scope: !2808)
!2847 = !DILocation(line: 1166, column: 12, scope: !2848)
!2848 = distinct !DILexicalBlock(scope: !2808, file: !3, line: 1166, column: 3)
!2849 = !DILocation(line: 1166, column: 20, scope: !2848)
!2850 = !DILocation(line: 1166, column: 10, scope: !2848)
!2851 = !DILocation(line: 1166, column: 8, scope: !2848)
!2852 = !DILocation(line: 1166, column: 25, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2848, file: !3, line: 1166, column: 3)
!2854 = !DILocation(line: 1166, column: 27, scope: !2853)
!2855 = !DILocation(line: 1166, column: 3, scope: !2848)
!2856 = !DILocalVariable(name: "bbn", scope: !2857, file: !3, line: 1168, type: !990)
!2857 = distinct !DILexicalBlock(scope: !2853, file: !3, line: 1167, column: 5)
!2858 = !DILocation(line: 1168, column: 11, scope: !2857)
!2859 = !DILocation(line: 1168, column: 17, scope: !2857)
!2860 = !DILocation(line: 1168, column: 23, scope: !2857)
!2861 = !DILocation(line: 1169, column: 11, scope: !2862)
!2862 = distinct !DILexicalBlock(scope: !2857, file: !3, line: 1169, column: 11)
!2863 = !DILocation(line: 1169, column: 18, scope: !2862)
!2864 = !DILocation(line: 1169, column: 23, scope: !2862)
!2865 = !DILocation(line: 1169, column: 11, scope: !2857)
!2866 = !DILocation(line: 1171, column: 19, scope: !2867)
!2867 = distinct !DILexicalBlock(scope: !2862, file: !3, line: 1170, column: 2)
!2868 = !DILocation(line: 1171, column: 4, scope: !2867)
!2869 = !DILocation(line: 1171, column: 12, scope: !2867)
!2870 = !DILocation(line: 1171, column: 17, scope: !2867)
!2871 = !DILocation(line: 1172, column: 11, scope: !2867)
!2872 = !DILocation(line: 1173, column: 2, scope: !2867)
!2873 = !DILocation(line: 1176, column: 9, scope: !2862)
!2874 = !DILocation(line: 1176, column: 17, scope: !2862)
!2875 = !DILocation(line: 1176, column: 22, scope: !2862)
!2876 = !DILocation(line: 1177, column: 5, scope: !2857)
!2877 = !DILocation(line: 1166, column: 34, scope: !2853)
!2878 = !DILocation(line: 1166, column: 3, scope: !2853)
!2879 = distinct !{!2879, !2855, !2880}
!2880 = !DILocation(line: 1177, column: 5, scope: !2848)
!2881 = !DILocation(line: 1190, column: 3, scope: !2808)
!2882 = !DILocation(line: 1190, column: 10, scope: !2808)
!2883 = !DILocation(line: 1190, column: 17, scope: !2808)
!2884 = !DILocation(line: 1190, column: 20, scope: !2808)
!2885 = !DILocation(line: 1190, column: 27, scope: !2808)
!2886 = !DILocation(line: 1190, column: 25, scope: !2808)
!2887 = !DILocation(line: 0, scope: !2808)
!2888 = !DILocation(line: 1192, column: 14, scope: !2889)
!2889 = distinct !DILexicalBlock(scope: !2808, file: !3, line: 1191, column: 5)
!2890 = !DILocation(line: 1194, column: 16, scope: !2891)
!2891 = distinct !DILexicalBlock(scope: !2889, file: !3, line: 1194, column: 7)
!2892 = !DILocation(line: 1194, column: 24, scope: !2891)
!2893 = !DILocation(line: 1194, column: 14, scope: !2891)
!2894 = !DILocation(line: 1194, column: 12, scope: !2891)
!2895 = !DILocation(line: 1194, column: 29, scope: !2896)
!2896 = distinct !DILexicalBlock(scope: !2891, file: !3, line: 1194, column: 7)
!2897 = !DILocation(line: 1194, column: 31, scope: !2896)
!2898 = !DILocation(line: 1194, column: 7, scope: !2891)
!2899 = !DILocalVariable(name: "e", scope: !2900, file: !3, line: 1196, type: !1553)
!2900 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 1195, column: 2)
!2901 = !DILocation(line: 1196, column: 9, scope: !2900)
!2902 = !DILocalVariable(name: "ei", scope: !2900, file: !3, line: 1197, type: !2177)
!2903 = !DILocation(line: 1197, column: 18, scope: !2900)
!2904 = !DILocalVariable(name: "bbn", scope: !2900, file: !3, line: 1198, type: !990)
!2905 = !DILocation(line: 1198, column: 8, scope: !2900)
!2906 = !DILocation(line: 1198, column: 14, scope: !2900)
!2907 = !DILocation(line: 1198, column: 20, scope: !2900)
!2908 = !DILocation(line: 1200, column: 8, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2900, file: !3, line: 1200, column: 8)
!2910 = !DILocation(line: 1200, column: 16, scope: !2909)
!2911 = !DILocation(line: 1200, column: 21, scope: !2909)
!2912 = !DILocation(line: 1200, column: 27, scope: !2909)
!2913 = !DILocation(line: 1200, column: 31, scope: !2909)
!2914 = !DILocation(line: 1200, column: 8, scope: !2900)
!2915 = !DILocalVariable(name: "hdr", scope: !2916, file: !3, line: 1202, type: !990)
!2916 = distinct !DILexicalBlock(scope: !2909, file: !3, line: 1201, column: 6)
!2917 = !DILocation(line: 1202, column: 12, scope: !2916)
!2918 = !DILocation(line: 1204, column: 8, scope: !2919)
!2919 = distinct !DILexicalBlock(scope: !2916, file: !3, line: 1204, column: 8)
!2920 = !DILocation(line: 1204, column: 8, scope: !2921)
!2921 = distinct !DILexicalBlock(scope: !2919, file: !3, line: 1204, column: 8)
!2922 = !DILocalVariable(name: "predn", scope: !2923, file: !3, line: 1206, type: !990)
!2923 = distinct !DILexicalBlock(scope: !2921, file: !3, line: 1205, column: 3)
!2924 = !DILocation(line: 1206, column: 9, scope: !2923)
!2925 = !DILocation(line: 1206, column: 17, scope: !2923)
!2926 = !DILocation(line: 1206, column: 20, scope: !2923)
!2927 = !DILocation(line: 1206, column: 25, scope: !2923)
!2928 = !DILocation(line: 1208, column: 9, scope: !2929)
!2929 = distinct !DILexicalBlock(scope: !2923, file: !3, line: 1208, column: 9)
!2930 = !DILocation(line: 1208, column: 15, scope: !2929)
!2931 = !DILocation(line: 1210, column: 9, scope: !2929)
!2932 = !DILocation(line: 1210, column: 12, scope: !2929)
!2933 = !DILocation(line: 1210, column: 20, scope: !2929)
!2934 = !DILocation(line: 1210, column: 27, scope: !2929)
!2935 = !DILocation(line: 1213, column: 9, scope: !2929)
!2936 = !DILocation(line: 1213, column: 12, scope: !2929)
!2937 = !DILocation(line: 1213, column: 21, scope: !2929)
!2938 = !DILocation(line: 1213, column: 29, scope: !2929)
!2939 = !DILocation(line: 1213, column: 38, scope: !2929)
!2940 = !DILocation(line: 1213, column: 26, scope: !2929)
!2941 = !DILocation(line: 1208, column: 9, scope: !2923)
!2942 = !DILocation(line: 1215, column: 13, scope: !2943)
!2943 = distinct !DILexicalBlock(scope: !2944, file: !3, line: 1215, column: 13)
!2944 = distinct !DILexicalBlock(scope: !2929, file: !3, line: 1214, column: 7)
!2945 = !DILocation(line: 1215, column: 17, scope: !2943)
!2946 = !DILocation(line: 1215, column: 13, scope: !2944)
!2947 = !DILocation(line: 1217, column: 10, scope: !2943)
!2948 = !DILocation(line: 1217, column: 18, scope: !2943)
!2949 = !DILocation(line: 1217, column: 8, scope: !2943)
!2950 = !DILocation(line: 1217, column: 4, scope: !2943)
!2951 = !DILocation(line: 1218, column: 18, scope: !2952)
!2952 = distinct !DILexicalBlock(scope: !2943, file: !3, line: 1218, column: 18)
!2953 = !DILocation(line: 1218, column: 25, scope: !2952)
!2954 = !DILocation(line: 1218, column: 33, scope: !2952)
!2955 = !DILocation(line: 1218, column: 22, scope: !2952)
!2956 = !DILocation(line: 1218, column: 18, scope: !2943)
!2957 = !DILocation(line: 1223, column: 12, scope: !2958)
!2958 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 1222, column: 4)
!2959 = !DILocation(line: 1223, column: 10, scope: !2958)
!2960 = !DILocation(line: 1224, column: 6, scope: !2958)
!2961 = !DILocation(line: 1226, column: 7, scope: !2944)
!2962 = !DILocation(line: 1230, column: 15, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2929, file: !3, line: 1229, column: 7)
!2964 = !DILocation(line: 1230, column: 13, scope: !2963)
!2965 = !DILocation(line: 1231, column: 9, scope: !2963)
!2966 = !DILocation(line: 1233, column: 3, scope: !2923)
!2967 = distinct !{!2967, !2918, !2968}
!2968 = !DILocation(line: 1233, column: 3, scope: !2919)
!2969 = !DILocation(line: 1235, column: 12, scope: !2970)
!2970 = distinct !DILexicalBlock(scope: !2916, file: !3, line: 1235, column: 12)
!2971 = !DILocation(line: 1235, column: 19, scope: !2970)
!2972 = !DILocation(line: 1235, column: 16, scope: !2970)
!2973 = !DILocation(line: 1235, column: 12, scope: !2916)
!2974 = !DILocation(line: 1239, column: 14, scope: !2975)
!2975 = distinct !DILexicalBlock(scope: !2970, file: !3, line: 1236, column: 3)
!2976 = !DILocation(line: 1239, column: 22, scope: !2975)
!2977 = !DILocation(line: 1239, column: 5, scope: !2975)
!2978 = !DILocation(line: 1240, column: 12, scope: !2975)
!2979 = !DILocation(line: 1241, column: 3, scope: !2975)
!2980 = !DILocation(line: 1243, column: 3, scope: !2970)
!2981 = !DILocation(line: 1245, column: 23, scope: !2916)
!2982 = !DILocation(line: 1245, column: 8, scope: !2916)
!2983 = !DILocation(line: 1245, column: 16, scope: !2916)
!2984 = !DILocation(line: 1245, column: 21, scope: !2916)
!2985 = !DILocation(line: 1246, column: 6, scope: !2916)
!2986 = !DILocation(line: 1247, column: 2, scope: !2900)
!2987 = !DILocation(line: 1194, column: 38, scope: !2896)
!2988 = !DILocation(line: 1194, column: 7, scope: !2896)
!2989 = distinct !{!2989, !2898, !2990}
!2990 = !DILocation(line: 1247, column: 2, scope: !2891)
!2991 = !DILocation(line: 1249, column: 11, scope: !2889)
!2992 = distinct !{!2992, !2881, !2993}
!2993 = !DILocation(line: 1250, column: 5, scope: !2808)
!2994 = !DILocation(line: 1274, column: 7, scope: !2995)
!2995 = distinct !DILexicalBlock(scope: !2808, file: !3, line: 1274, column: 7)
!2996 = !DILocation(line: 1274, column: 21, scope: !2995)
!2997 = !DILocation(line: 1274, column: 24, scope: !2995)
!2998 = !DILocation(line: 1274, column: 29, scope: !2995)
!2999 = !DILocation(line: 1274, column: 7, scope: !2808)
!3000 = !DILocation(line: 1275, column: 14, scope: !2995)
!3001 = !DILocation(line: 1275, column: 68, scope: !2995)
!3002 = !DILocation(line: 1276, column: 7, scope: !2995)
!3003 = !DILocation(line: 1275, column: 5, scope: !2995)
!3004 = !DILocation(line: 1278, column: 8, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !2808, file: !3, line: 1278, column: 7)
!3006 = !DILocation(line: 1278, column: 15, scope: !3005)
!3007 = !DILocation(line: 1278, column: 18, scope: !3005)
!3008 = !DILocation(line: 1278, column: 23, scope: !3005)
!3009 = !DILocation(line: 1278, column: 7, scope: !2808)
!3010 = !DILocalVariable(name: "s1", scope: !3011, file: !3, line: 1280, type: !991)
!3011 = distinct !DILexicalBlock(scope: !3005, file: !3, line: 1279, column: 5)
!3012 = !DILocation(line: 1280, column: 12, scope: !3011)
!3013 = !DILocalVariable(name: "s1_sz", scope: !3011, file: !3, line: 1280, type: !990)
!3014 = !DILocation(line: 1280, column: 23, scope: !3011)
!3015 = !DILocation(line: 1283, column: 11, scope: !3016)
!3016 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 1283, column: 11)
!3017 = !DILocation(line: 1283, column: 25, scope: !3016)
!3018 = !DILocation(line: 1283, column: 11, scope: !3011)
!3019 = !DILocation(line: 1284, column: 10, scope: !3016)
!3020 = !DILocation(line: 1284, column: 8, scope: !3016)
!3021 = !DILocation(line: 1284, column: 2, scope: !3016)
!3022 = !DILocation(line: 1287, column: 16, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 1287, column: 7)
!3024 = !DILocation(line: 1287, column: 24, scope: !3023)
!3025 = !DILocation(line: 1287, column: 14, scope: !3023)
!3026 = !DILocation(line: 1287, column: 12, scope: !3023)
!3027 = !DILocation(line: 1287, column: 29, scope: !3028)
!3028 = distinct !DILexicalBlock(scope: !3023, file: !3, line: 1287, column: 7)
!3029 = !DILocation(line: 1287, column: 31, scope: !3028)
!3030 = !DILocation(line: 1287, column: 7, scope: !3023)
!3031 = !DILocalVariable(name: "bbn", scope: !3032, file: !3, line: 1289, type: !990)
!3032 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 1288, column: 2)
!3033 = !DILocation(line: 1289, column: 8, scope: !3032)
!3034 = !DILocation(line: 1289, column: 14, scope: !3032)
!3035 = !DILocation(line: 1289, column: 20, scope: !3032)
!3036 = !DILocation(line: 1291, column: 8, scope: !3037)
!3037 = distinct !DILexicalBlock(scope: !3032, file: !3, line: 1291, column: 8)
!3038 = !DILocation(line: 1291, column: 16, scope: !3037)
!3039 = !DILocation(line: 1291, column: 24, scope: !3037)
!3040 = !DILocation(line: 1291, column: 21, scope: !3037)
!3041 = !DILocation(line: 1291, column: 8, scope: !3032)
!3042 = !DILocalVariable(name: "e", scope: !3043, file: !3, line: 1294, type: !1553)
!3043 = distinct !DILexicalBlock(scope: !3037, file: !3, line: 1293, column: 6)
!3044 = !DILocation(line: 1294, column: 13, scope: !3043)
!3045 = !DILocalVariable(name: "ei", scope: !3043, file: !3, line: 1295, type: !2177)
!3046 = !DILocation(line: 1295, column: 22, scope: !3043)
!3047 = !DILocalVariable(name: "num_bbs", scope: !3043, file: !3, line: 1296, type: !990)
!3048 = !DILocation(line: 1296, column: 12, scope: !3043)
!3049 = !DILocalVariable(name: "j", scope: !3043, file: !3, line: 1296, type: !990)
!3050 = !DILocation(line: 1296, column: 25, scope: !3043)
!3051 = !DILocalVariable(name: "num_insns", scope: !3043, file: !3, line: 1296, type: !990)
!3052 = !DILocation(line: 1296, column: 28, scope: !3043)
!3053 = !DILocalVariable(name: "large", scope: !3043, file: !3, line: 1296, type: !990)
!3054 = !DILocation(line: 1296, column: 43, scope: !3043)
!3055 = !DILocation(line: 1298, column: 27, scope: !3043)
!3056 = !DILocation(line: 1298, column: 16, scope: !3043)
!3057 = !DILocation(line: 1298, column: 14, scope: !3043)
!3058 = !DILocation(line: 1300, column: 8, scope: !3043)
!3059 = !DILocation(line: 1300, column: 15, scope: !3043)
!3060 = !DILocation(line: 1300, column: 20, scope: !3043)
!3061 = !DILocation(line: 1301, column: 28, scope: !3043)
!3062 = !DILocation(line: 1301, column: 8, scope: !3043)
!3063 = !DILocation(line: 1301, column: 21, scope: !3043)
!3064 = !DILocation(line: 1301, column: 26, scope: !3043)
!3065 = !DILocation(line: 1302, column: 37, scope: !3043)
!3066 = !DILocation(line: 1302, column: 8, scope: !3043)
!3067 = !DILocation(line: 1302, column: 32, scope: !3043)
!3068 = !DILocation(line: 1303, column: 8, scope: !3043)
!3069 = !DILocation(line: 1303, column: 40, scope: !3043)
!3070 = !DILocation(line: 1304, column: 8, scope: !3043)
!3071 = !DILocation(line: 1304, column: 38, scope: !3043)
!3072 = !DILocation(line: 1305, column: 31, scope: !3043)
!3073 = !DILocation(line: 1305, column: 8, scope: !3043)
!3074 = !DILocation(line: 1305, column: 29, scope: !3043)
!3075 = !DILocation(line: 1306, column: 8, scope: !3043)
!3076 = !DILocation(line: 1306, column: 26, scope: !3043)
!3077 = !DILocation(line: 1308, column: 8, scope: !3078)
!3078 = distinct !DILexicalBlock(scope: !3043, file: !3, line: 1308, column: 8)
!3079 = !DILocation(line: 1308, column: 8, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3078, file: !3, line: 1308, column: 8)
!3081 = !DILocation(line: 1309, column: 7, scope: !3082)
!3082 = distinct !DILexicalBlock(scope: !3080, file: !3, line: 1309, column: 7)
!3083 = !DILocation(line: 1309, column: 10, scope: !3082)
!3084 = !DILocation(line: 1309, column: 18, scope: !3082)
!3085 = !DILocation(line: 1309, column: 15, scope: !3082)
!3086 = !DILocation(line: 1309, column: 7, scope: !3080)
!3087 = !DILocation(line: 1310, column: 5, scope: !3082)
!3088 = !DILocation(line: 1310, column: 12, scope: !3082)
!3089 = !DILocation(line: 1310, column: 15, scope: !3082)
!3090 = !DILocation(line: 1310, column: 21, scope: !3082)
!3091 = !DILocation(line: 1310, column: 27, scope: !3082)
!3092 = distinct !{!3092, !3077, !3093}
!3093 = !DILocation(line: 1310, column: 27, scope: !3078)
!3094 = !DILocation(line: 1312, column: 13, scope: !3095)
!3095 = distinct !DILexicalBlock(scope: !3043, file: !3, line: 1312, column: 12)
!3096 = !DILocation(line: 1312, column: 12, scope: !3043)
!3097 = !DILocation(line: 1314, column: 12, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !3095, file: !3, line: 1314, column: 3)
!3099 = !DILocation(line: 1314, column: 14, scope: !3098)
!3100 = !DILocation(line: 1314, column: 10, scope: !3098)
!3101 = !DILocation(line: 1314, column: 8, scope: !3098)
!3102 = !DILocation(line: 1314, column: 19, scope: !3103)
!3103 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 1314, column: 3)
!3104 = !DILocation(line: 1314, column: 21, scope: !3103)
!3105 = !DILocation(line: 1314, column: 3, scope: !3098)
!3106 = !DILocalVariable(name: "succn", scope: !3107, file: !3, line: 1316, type: !990)
!3107 = distinct !DILexicalBlock(scope: !3103, file: !3, line: 1315, column: 5)
!3108 = !DILocation(line: 1316, column: 11, scope: !3107)
!3109 = !DILocation(line: 1316, column: 19, scope: !3107)
!3110 = !DILocation(line: 1316, column: 25, scope: !3107)
!3111 = !DILocation(line: 1317, column: 11, scope: !3112)
!3112 = distinct !DILexicalBlock(scope: !3107, file: !3, line: 1317, column: 11)
!3113 = !DILocation(line: 1317, column: 19, scope: !3112)
!3114 = !DILocation(line: 1317, column: 29, scope: !3112)
!3115 = !DILocation(line: 1317, column: 26, scope: !3112)
!3116 = !DILocation(line: 1317, column: 11, scope: !3107)
!3117 = !DILocation(line: 1319, column: 28, scope: !3118)
!3118 = distinct !DILexicalBlock(scope: !3119, file: !3, line: 1319, column: 8)
!3119 = distinct !DILexicalBlock(scope: !3112, file: !3, line: 1318, column: 9)
!3120 = !DILocation(line: 1319, column: 17, scope: !3118)
!3121 = !DILocation(line: 1319, column: 15, scope: !3118)
!3122 = !DILocation(line: 1319, column: 8, scope: !3119)
!3123 = !DILocation(line: 1320, column: 6, scope: !3118)
!3124 = !DILocation(line: 1321, column: 9, scope: !3119)
!3125 = !DILocation(line: 1322, column: 5, scope: !3107)
!3126 = !DILocation(line: 1314, column: 28, scope: !3103)
!3127 = !DILocation(line: 1314, column: 3, scope: !3103)
!3128 = distinct !{!3128, !3105, !3129}
!3129 = !DILocation(line: 1322, column: 5, scope: !3098)
!3130 = !DILocation(line: 1324, column: 12, scope: !3131)
!3131 = distinct !DILexicalBlock(scope: !3043, file: !3, line: 1324, column: 12)
!3132 = !DILocation(line: 1324, column: 12, scope: !3043)
!3133 = !DILocation(line: 1330, column: 5, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3131, file: !3, line: 1329, column: 3)
!3135 = !DILocation(line: 1330, column: 32, scope: !3134)
!3136 = !DILocation(line: 1331, column: 15, scope: !3134)
!3137 = !DILocation(line: 1332, column: 3, scope: !3134)
!3138 = !DILocation(line: 1334, column: 16, scope: !3043)
!3139 = !DILocation(line: 1336, column: 17, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !3043, file: !3, line: 1336, column: 8)
!3141 = !DILocation(line: 1336, column: 19, scope: !3140)
!3142 = !DILocation(line: 1336, column: 15, scope: !3140)
!3143 = !DILocation(line: 1336, column: 13, scope: !3140)
!3144 = !DILocation(line: 1336, column: 24, scope: !3145)
!3145 = distinct !DILexicalBlock(scope: !3140, file: !3, line: 1336, column: 8)
!3146 = !DILocation(line: 1336, column: 26, scope: !3145)
!3147 = !DILocation(line: 1336, column: 8, scope: !3140)
!3148 = !DILocalVariable(name: "succn", scope: !3149, file: !3, line: 1338, type: !990)
!3149 = distinct !DILexicalBlock(scope: !3145, file: !3, line: 1337, column: 3)
!3150 = !DILocation(line: 1338, column: 9, scope: !3149)
!3151 = !DILocation(line: 1338, column: 17, scope: !3149)
!3152 = !DILocation(line: 1338, column: 23, scope: !3149)
!3153 = !DILocation(line: 1340, column: 9, scope: !3154)
!3154 = distinct !DILexicalBlock(scope: !3149, file: !3, line: 1340, column: 9)
!3155 = !DILocation(line: 1340, column: 17, scope: !3154)
!3156 = !DILocation(line: 1340, column: 27, scope: !3154)
!3157 = !DILocation(line: 1340, column: 24, scope: !3154)
!3158 = !DILocation(line: 1340, column: 9, scope: !3149)
!3159 = !DILocation(line: 1346, column: 9, scope: !3160)
!3160 = distinct !DILexicalBlock(scope: !3154, file: !3, line: 1345, column: 7)
!3161 = !DILocation(line: 1348, column: 9, scope: !3160)
!3162 = !DILocation(line: 1348, column: 16, scope: !3160)
!3163 = !DILocation(line: 1348, column: 23, scope: !3160)
!3164 = !DILocation(line: 1349, column: 29, scope: !3160)
!3165 = !DILocation(line: 1349, column: 9, scope: !3160)
!3166 = !DILocation(line: 1349, column: 22, scope: !3160)
!3167 = !DILocation(line: 1349, column: 27, scope: !3160)
!3168 = !DILocation(line: 1350, column: 31, scope: !3160)
!3169 = !DILocation(line: 1350, column: 50, scope: !3160)
!3170 = !DILocation(line: 1350, column: 9, scope: !3160)
!3171 = !DILocation(line: 1350, column: 29, scope: !3160)
!3172 = !DILocation(line: 1351, column: 34, scope: !3160)
!3173 = !DILocation(line: 1351, column: 9, scope: !3160)
!3174 = !DILocation(line: 1351, column: 32, scope: !3160)
!3175 = !DILocation(line: 1353, column: 13, scope: !3176)
!3176 = distinct !DILexicalBlock(scope: !3160, file: !3, line: 1353, column: 13)
!3177 = !DILocation(line: 1353, column: 13, scope: !3160)
!3178 = !DILocation(line: 1356, column: 32, scope: !3179)
!3179 = distinct !DILexicalBlock(scope: !3176, file: !3, line: 1355, column: 4)
!3180 = !DILocation(line: 1356, column: 6, scope: !3179)
!3181 = !DILocation(line: 1356, column: 30, scope: !3179)
!3182 = !DILocation(line: 1357, column: 6, scope: !3179)
!3183 = !DILocation(line: 1357, column: 33, scope: !3179)
!3184 = !DILocation(line: 1358, column: 6, scope: !3179)
!3185 = !DILocation(line: 1358, column: 38, scope: !3179)
!3186 = !DILocation(line: 1359, column: 6, scope: !3179)
!3187 = !DILocation(line: 1359, column: 36, scope: !3179)
!3188 = !DILocation(line: 1360, column: 16, scope: !3179)
!3189 = !DILocation(line: 1361, column: 4, scope: !3179)
!3190 = !DILocation(line: 1363, column: 12, scope: !3160)
!3191 = !DILocation(line: 1365, column: 9, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3160, file: !3, line: 1365, column: 9)
!3193 = !DILocation(line: 1365, column: 9, scope: !3194)
!3194 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 1365, column: 9)
!3195 = !DILocation(line: 1366, column: 8, scope: !3196)
!3196 = distinct !DILexicalBlock(scope: !3194, file: !3, line: 1366, column: 8)
!3197 = !DILocation(line: 1366, column: 11, scope: !3196)
!3198 = !DILocation(line: 1366, column: 19, scope: !3196)
!3199 = !DILocation(line: 1366, column: 16, scope: !3196)
!3200 = !DILocation(line: 1366, column: 8, scope: !3194)
!3201 = !DILocation(line: 1367, column: 6, scope: !3196)
!3202 = !DILocation(line: 1367, column: 13, scope: !3196)
!3203 = !DILocation(line: 1367, column: 16, scope: !3196)
!3204 = !DILocation(line: 1367, column: 22, scope: !3196)
!3205 = !DILocation(line: 1367, column: 28, scope: !3196)
!3206 = distinct !{!3206, !3191, !3207}
!3207 = !DILocation(line: 1367, column: 28, scope: !3192)
!3208 = !DILocation(line: 1368, column: 7, scope: !3160)
!3209 = !DILocation(line: 1369, column: 3, scope: !3149)
!3210 = !DILocation(line: 1336, column: 33, scope: !3145)
!3211 = !DILocation(line: 1336, column: 8, scope: !3145)
!3212 = distinct !{!3212, !3147, !3213}
!3213 = !DILocation(line: 1369, column: 3, scope: !3140)
!3214 = !DILocation(line: 1371, column: 13, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3043, file: !3, line: 1371, column: 12)
!3216 = !DILocation(line: 1371, column: 12, scope: !3043)
!3217 = !DILocation(line: 1373, column: 34, scope: !3218)
!3218 = distinct !DILexicalBlock(scope: !3215, file: !3, line: 1372, column: 3)
!3219 = !DILocation(line: 1373, column: 5, scope: !3218)
!3220 = !DILocation(line: 1373, column: 32, scope: !3218)
!3221 = !DILocation(line: 1374, column: 15, scope: !3218)
!3222 = !DILocation(line: 1375, column: 3, scope: !3218)
!3223 = !DILocation(line: 1376, column: 6, scope: !3043)
!3224 = !DILocation(line: 1377, column: 2, scope: !3032)
!3225 = !DILocation(line: 1287, column: 38, scope: !3028)
!3226 = !DILocation(line: 1287, column: 7, scope: !3028)
!3227 = distinct !{!3227, !3030, !3228}
!3228 = !DILocation(line: 1377, column: 2, scope: !3023)
!3229 = !DILocation(line: 1379, column: 11, scope: !3230)
!3230 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 1379, column: 11)
!3231 = !DILocation(line: 1379, column: 25, scope: !3230)
!3232 = !DILocation(line: 1379, column: 11, scope: !3011)
!3233 = !DILocalVariable(name: "s2", scope: !3234, file: !3, line: 1381, type: !991)
!3234 = distinct !DILexicalBlock(scope: !3230, file: !3, line: 1380, column: 2)
!3235 = !DILocation(line: 1381, column: 9, scope: !3234)
!3236 = !DILocalVariable(name: "s2_sz", scope: !3234, file: !3, line: 1381, type: !990)
!3237 = !DILocation(line: 1381, column: 13, scope: !3234)
!3238 = !DILocation(line: 1385, column: 12, scope: !3234)
!3239 = !DILocation(line: 1385, column: 10, scope: !3234)
!3240 = !DILocation(line: 1386, column: 29, scope: !3234)
!3241 = !DILocation(line: 1386, column: 33, scope: !3234)
!3242 = !DILocation(line: 1386, column: 40, scope: !3234)
!3243 = !DILocation(line: 1386, column: 44, scope: !3234)
!3244 = !DILocation(line: 1386, column: 4, scope: !3234)
!3245 = !DILocation(line: 1387, column: 10, scope: !3234)
!3246 = !DILocation(line: 1387, column: 4, scope: !3234)
!3247 = !DILocation(line: 1388, column: 10, scope: !3234)
!3248 = !DILocation(line: 1388, column: 4, scope: !3234)
!3249 = !DILocation(line: 1389, column: 2, scope: !3234)
!3250 = !DILocation(line: 1390, column: 5, scope: !3011)
!3251 = !DILocation(line: 1392, column: 9, scope: !2808)
!3252 = !DILocation(line: 1392, column: 3, scope: !2808)
!3253 = !DILocation(line: 1393, column: 9, scope: !2808)
!3254 = !DILocation(line: 1393, column: 3, scope: !2808)
!3255 = !DILocation(line: 1395, column: 11, scope: !2808)
!3256 = !DILocation(line: 1395, column: 4, scope: !2808)
!3257 = !DILocation(line: 1395, column: 9, scope: !2808)
!3258 = !DILocation(line: 1396, column: 1, scope: !2808)
!3259 = distinct !DISubprogram(name: "SET_BIT", scope: !2259, file: !2259, line: 63, type: !3260, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3260 = !DISubroutineType(types: !3261)
!3261 = !{null, !2258, !7}
!3262 = !DILocalVariable(name: "map", arg: 1, scope: !3259, file: !2259, line: 63, type: !2258)
!3263 = !DILocation(line: 63, column: 18, scope: !3259)
!3264 = !DILocalVariable(name: "bitno", arg: 2, scope: !3259, file: !2259, line: 63, type: !7)
!3265 = !DILocation(line: 63, column: 36, scope: !3259)
!3266 = !DILocation(line: 65, column: 7, scope: !3267)
!3267 = distinct !DILexicalBlock(scope: !3259, file: !2259, line: 65, column: 7)
!3268 = !DILocation(line: 65, column: 12, scope: !3267)
!3269 = !DILocation(line: 65, column: 7, scope: !3259)
!3270 = !DILocalVariable(name: "oldbit", scope: !3271, file: !2259, line: 67, type: !1230)
!3271 = distinct !DILexicalBlock(scope: !3267, file: !2259, line: 66, column: 5)
!3272 = !DILocation(line: 67, column: 12, scope: !3271)
!3273 = !DILocation(line: 68, column: 16, scope: !3271)
!3274 = !DILocation(line: 68, column: 14, scope: !3271)
!3275 = !DILocation(line: 69, column: 12, scope: !3276)
!3276 = distinct !DILexicalBlock(scope: !3271, file: !2259, line: 69, column: 11)
!3277 = !DILocation(line: 69, column: 11, scope: !3271)
!3278 = !DILocation(line: 70, column: 2, scope: !3276)
!3279 = !DILocation(line: 70, column: 7, scope: !3276)
!3280 = !DILocation(line: 70, column: 16, scope: !3276)
!3281 = !DILocation(line: 70, column: 22, scope: !3276)
!3282 = !DILocation(line: 70, column: 41, scope: !3276)
!3283 = !DILocation(line: 71, column: 5, scope: !3271)
!3284 = !DILocation(line: 73, column: 33, scope: !3259)
!3285 = !DILocation(line: 73, column: 40, scope: !3259)
!3286 = !DILocation(line: 73, column: 29, scope: !3259)
!3287 = !DILocation(line: 72, column: 3, scope: !3259)
!3288 = !DILocation(line: 72, column: 8, scope: !3259)
!3289 = !DILocation(line: 72, column: 13, scope: !3259)
!3290 = !DILocation(line: 72, column: 19, scope: !3259)
!3291 = !DILocation(line: 73, column: 5, scope: !3259)
!3292 = !DILocation(line: 74, column: 1, scope: !3259)
!3293 = distinct !DISubprogram(name: "gather_region_statistics", scope: !3, file: !3, line: 1091, type: !3294, scopeLine: 1092, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3294 = !DISubroutineType(types: !3295)
!3295 = !{!990, !3296}
!3296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !991, size: 64)
!3297 = !DILocalVariable(name: "rsp", arg: 1, scope: !3293, file: !3, line: 1091, type: !3296)
!3298 = !DILocation(line: 1091, column: 33, scope: !3293)
!3299 = !DILocalVariable(name: "i", scope: !3293, file: !3, line: 1093, type: !990)
!3300 = !DILocation(line: 1093, column: 7, scope: !3293)
!3301 = !DILocalVariable(name: "a", scope: !3293, file: !3, line: 1093, type: !991)
!3302 = !DILocation(line: 1093, column: 11, scope: !3293)
!3303 = !DILocalVariable(name: "a_sz", scope: !3293, file: !3, line: 1093, type: !990)
!3304 = !DILocation(line: 1093, column: 18, scope: !3293)
!3305 = !DILocation(line: 1096, column: 10, scope: !3306)
!3306 = distinct !DILexicalBlock(scope: !3293, file: !3, line: 1096, column: 3)
!3307 = !DILocation(line: 1096, column: 8, scope: !3306)
!3308 = !DILocation(line: 1096, column: 15, scope: !3309)
!3309 = distinct !DILexicalBlock(scope: !3306, file: !3, line: 1096, column: 3)
!3310 = !DILocation(line: 1096, column: 19, scope: !3309)
!3311 = !DILocation(line: 1096, column: 17, scope: !3309)
!3312 = !DILocation(line: 1096, column: 3, scope: !3306)
!3313 = !DILocalVariable(name: "nr_blocks", scope: !3314, file: !3, line: 1098, type: !990)
!3314 = distinct !DILexicalBlock(scope: !3309, file: !3, line: 1097, column: 5)
!3315 = !DILocation(line: 1098, column: 11, scope: !3314)
!3316 = !DILocation(line: 1098, column: 23, scope: !3314)
!3317 = !DILocation(line: 1100, column: 7, scope: !3314)
!3318 = !DILocation(line: 1102, column: 11, scope: !3319)
!3319 = distinct !DILexicalBlock(scope: !3314, file: !3, line: 1102, column: 11)
!3320 = !DILocation(line: 1102, column: 23, scope: !3319)
!3321 = !DILocation(line: 1102, column: 21, scope: !3319)
!3322 = !DILocation(line: 1102, column: 11, scope: !3314)
!3323 = !DILocation(line: 1104, column: 8, scope: !3324)
!3324 = distinct !DILexicalBlock(scope: !3319, file: !3, line: 1103, column: 2)
!3325 = !DILocation(line: 1104, column: 6, scope: !3324)
!3326 = !DILocation(line: 1105, column: 4, scope: !3324)
!3327 = !DILocation(line: 1106, column: 6, scope: !3324)
!3328 = !DILocation(line: 1106, column: 12, scope: !3324)
!3329 = !DILocation(line: 1106, column: 16, scope: !3324)
!3330 = !DILocation(line: 1107, column: 11, scope: !3324)
!3331 = !DILocation(line: 1107, column: 19, scope: !3324)
!3332 = !DILocation(line: 1107, column: 16, scope: !3324)
!3333 = distinct !{!3333, !3326, !3334}
!3334 = !DILocation(line: 1107, column: 28, scope: !3324)
!3335 = !DILocation(line: 1108, column: 2, scope: !3324)
!3336 = !DILocation(line: 1110, column: 7, scope: !3314)
!3337 = !DILocation(line: 1110, column: 9, scope: !3314)
!3338 = !DILocation(line: 1110, column: 19, scope: !3314)
!3339 = !DILocation(line: 1110, column: 23, scope: !3314)
!3340 = !DILocation(line: 1111, column: 5, scope: !3314)
!3341 = !DILocation(line: 1096, column: 32, scope: !3309)
!3342 = !DILocation(line: 1096, column: 3, scope: !3309)
!3343 = distinct !{!3343, !3312, !3344}
!3344 = !DILocation(line: 1111, column: 5, scope: !3306)
!3345 = !DILocation(line: 1113, column: 10, scope: !3293)
!3346 = !DILocation(line: 1113, column: 4, scope: !3293)
!3347 = !DILocation(line: 1113, column: 8, scope: !3293)
!3348 = !DILocation(line: 1114, column: 10, scope: !3293)
!3349 = !DILocation(line: 1114, column: 3, scope: !3293)
!3350 = distinct !DISubprogram(name: "too_large", scope: !3, file: !3, line: 554, type: !3351, scopeLine: 555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3351 = !DISubroutineType(types: !3352)
!3352 = !{!1230, !990, !991, !991}
!3353 = !DILocalVariable(name: "block", arg: 1, scope: !3350, file: !3, line: 554, type: !990)
!3354 = !DILocation(line: 554, column: 16, scope: !3350)
!3355 = !DILocalVariable(name: "num_bbs", arg: 2, scope: !3350, file: !3, line: 554, type: !991)
!3356 = !DILocation(line: 554, column: 28, scope: !3350)
!3357 = !DILocalVariable(name: "num_insns", arg: 3, scope: !3350, file: !3, line: 554, type: !991)
!3358 = !DILocation(line: 554, column: 42, scope: !3350)
!3359 = !DILocation(line: 556, column: 5, scope: !3350)
!3360 = !DILocation(line: 556, column: 13, scope: !3350)
!3361 = !DILocation(line: 557, column: 20, scope: !3350)
!3362 = !DILocation(line: 557, column: 39, scope: !3350)
!3363 = !DILocation(line: 558, column: 21, scope: !3350)
!3364 = !DILocation(line: 557, column: 5, scope: !3350)
!3365 = !DILocation(line: 557, column: 16, scope: !3350)
!3366 = !DILocation(line: 560, column: 13, scope: !3350)
!3367 = !DILocation(line: 560, column: 12, scope: !3350)
!3368 = !DILocation(line: 560, column: 23, scope: !3350)
!3369 = !DILocation(line: 560, column: 21, scope: !3350)
!3370 = !DILocation(line: 561, column: 4, scope: !3350)
!3371 = !DILocation(line: 561, column: 9, scope: !3350)
!3372 = !DILocation(line: 561, column: 8, scope: !3350)
!3373 = !DILocation(line: 561, column: 21, scope: !3350)
!3374 = !DILocation(line: 561, column: 19, scope: !3350)
!3375 = !DILocation(line: 560, column: 10, scope: !3350)
!3376 = !DILocation(line: 560, column: 3, scope: !3350)
!3377 = distinct !DISubprogram(name: "print_region_statistics", scope: !3, file: !3, line: 1120, type: !3378, scopeLine: 1121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3378 = !DISubroutineType(types: !3379)
!3379 = !{null, !991, !990, !991, !990}
!3380 = !DILocalVariable(name: "s1", arg: 1, scope: !3377, file: !3, line: 1120, type: !991)
!3381 = !DILocation(line: 1120, column: 31, scope: !3377)
!3382 = !DILocalVariable(name: "s1_sz", arg: 2, scope: !3377, file: !3, line: 1120, type: !990)
!3383 = !DILocation(line: 1120, column: 39, scope: !3377)
!3384 = !DILocalVariable(name: "s2", arg: 3, scope: !3377, file: !3, line: 1120, type: !991)
!3385 = !DILocation(line: 1120, column: 51, scope: !3377)
!3386 = !DILocalVariable(name: "s2_sz", arg: 4, scope: !3377, file: !3, line: 1120, type: !990)
!3387 = !DILocation(line: 1120, column: 59, scope: !3377)
!3388 = !DILocalVariable(name: "i", scope: !3377, file: !3, line: 1122, type: !990)
!3389 = !DILocation(line: 1122, column: 7, scope: !3377)
!3390 = !DILocation(line: 1126, column: 10, scope: !3391)
!3391 = distinct !DILexicalBlock(scope: !3377, file: !3, line: 1126, column: 3)
!3392 = !DILocation(line: 1126, column: 8, scope: !3391)
!3393 = !DILocation(line: 1126, column: 15, scope: !3394)
!3394 = distinct !DILexicalBlock(scope: !3391, file: !3, line: 1126, column: 3)
!3395 = !DILocation(line: 1126, column: 19, scope: !3394)
!3396 = !DILocation(line: 1126, column: 17, scope: !3394)
!3397 = !DILocation(line: 1126, column: 3, scope: !3391)
!3398 = !DILocalVariable(name: "n1", scope: !3399, file: !3, line: 1128, type: !990)
!3399 = distinct !DILexicalBlock(scope: !3394, file: !3, line: 1127, column: 5)
!3400 = !DILocation(line: 1128, column: 11, scope: !3399)
!3401 = !DILocalVariable(name: "n2", scope: !3399, file: !3, line: 1128, type: !990)
!3402 = !DILocation(line: 1128, column: 15, scope: !3399)
!3403 = !DILocation(line: 1130, column: 12, scope: !3399)
!3404 = !DILocation(line: 1130, column: 15, scope: !3399)
!3405 = !DILocation(line: 1130, column: 10, scope: !3399)
!3406 = !DILocation(line: 1132, column: 11, scope: !3407)
!3407 = distinct !DILexicalBlock(scope: !3399, file: !3, line: 1132, column: 11)
!3408 = !DILocation(line: 1132, column: 14, scope: !3407)
!3409 = !DILocation(line: 1132, column: 11, scope: !3399)
!3410 = !DILocation(line: 1133, column: 2, scope: !3407)
!3411 = !DILocation(line: 1135, column: 11, scope: !3412)
!3412 = distinct !DILexicalBlock(scope: !3399, file: !3, line: 1135, column: 11)
!3413 = !DILocation(line: 1135, column: 16, scope: !3412)
!3414 = !DILocation(line: 1135, column: 13, scope: !3412)
!3415 = !DILocation(line: 1135, column: 11, scope: !3399)
!3416 = !DILocation(line: 1136, column: 5, scope: !3412)
!3417 = !DILocation(line: 1136, column: 2, scope: !3412)
!3418 = !DILocation(line: 1138, column: 7, scope: !3412)
!3419 = !DILocation(line: 1138, column: 10, scope: !3412)
!3420 = !DILocation(line: 1138, column: 5, scope: !3412)
!3421 = !DILocation(line: 1140, column: 16, scope: !3399)
!3422 = !DILocation(line: 1141, column: 31, scope: !3399)
!3423 = !DILocation(line: 1141, column: 33, scope: !3399)
!3424 = !DILocation(line: 1141, column: 38, scope: !3399)
!3425 = !DILocation(line: 1141, column: 42, scope: !3399)
!3426 = !DILocation(line: 1141, column: 47, scope: !3399)
!3427 = !DILocation(line: 1141, column: 45, scope: !3399)
!3428 = !DILocation(line: 1140, column: 7, scope: !3399)
!3429 = !DILocation(line: 1142, column: 5, scope: !3399)
!3430 = !DILocation(line: 1126, column: 27, scope: !3394)
!3431 = !DILocation(line: 1126, column: 3, scope: !3394)
!3432 = distinct !{!3432, !3397, !3433}
!3433 = !DILocation(line: 1142, column: 5, scope: !3391)
!3434 = !DILocation(line: 1143, column: 1, scope: !3377)
!3435 = distinct !DISubprogram(name: "debug_candidate", scope: !3, file: !3, line: 1598, type: !2327, scopeLine: 1599, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3436 = !DILocalVariable(name: "i", arg: 1, scope: !3435, file: !3, line: 1598, type: !990)
!3437 = !DILocation(line: 1598, column: 22, scope: !3435)
!3438 = !DILocation(line: 1600, column: 8, scope: !3439)
!3439 = distinct !DILexicalBlock(scope: !3435, file: !3, line: 1600, column: 7)
!3440 = !DILocation(line: 1600, column: 24, scope: !3439)
!3441 = !DILocation(line: 1600, column: 27, scope: !3439)
!3442 = !DILocation(line: 1600, column: 7, scope: !3435)
!3443 = !DILocation(line: 1601, column: 5, scope: !3439)
!3444 = !DILocation(line: 1603, column: 7, scope: !3445)
!3445 = distinct !DILexicalBlock(scope: !3435, file: !3, line: 1603, column: 7)
!3446 = !DILocation(line: 1603, column: 23, scope: !3445)
!3447 = !DILocation(line: 1603, column: 26, scope: !3445)
!3448 = !DILocation(line: 1603, column: 7, scope: !3435)
!3449 = !DILocalVariable(name: "j", scope: !3450, file: !3, line: 1605, type: !990)
!3450 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 1604, column: 5)
!3451 = !DILocation(line: 1605, column: 11, scope: !3450)
!3452 = !DILocation(line: 1606, column: 16, scope: !3450)
!3453 = !DILocation(line: 1606, column: 61, scope: !3450)
!3454 = !DILocation(line: 1606, column: 78, scope: !3450)
!3455 = !DILocation(line: 1606, column: 7, scope: !3450)
!3456 = !DILocation(line: 1608, column: 16, scope: !3450)
!3457 = !DILocation(line: 1608, column: 7, scope: !3450)
!3458 = !DILocation(line: 1609, column: 14, scope: !3459)
!3459 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 1609, column: 7)
!3460 = !DILocation(line: 1609, column: 12, scope: !3459)
!3461 = !DILocation(line: 1609, column: 19, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3459, file: !3, line: 1609, column: 7)
!3463 = !DILocation(line: 1609, column: 23, scope: !3462)
!3464 = !DILocation(line: 1609, column: 39, scope: !3462)
!3465 = !DILocation(line: 1609, column: 42, scope: !3462)
!3466 = !DILocation(line: 1609, column: 52, scope: !3462)
!3467 = !DILocation(line: 1609, column: 21, scope: !3462)
!3468 = !DILocation(line: 1609, column: 7, scope: !3459)
!3469 = !DILocalVariable(name: "b", scope: !3470, file: !3, line: 1611, type: !990)
!3470 = distinct !DILexicalBlock(scope: !3462, file: !3, line: 1610, column: 2)
!3471 = !DILocation(line: 1611, column: 8, scope: !3470)
!3472 = !DILocation(line: 1611, column: 12, scope: !3470)
!3473 = !DILocation(line: 1611, column: 28, scope: !3470)
!3474 = !DILocation(line: 1611, column: 31, scope: !3470)
!3475 = !DILocation(line: 1611, column: 41, scope: !3470)
!3476 = !DILocation(line: 1611, column: 54, scope: !3470)
!3477 = !DILocation(line: 1611, column: 58, scope: !3470)
!3478 = !DILocation(line: 1613, column: 13, scope: !3470)
!3479 = !DILocation(line: 1613, column: 33, scope: !3470)
!3480 = !DILocation(line: 1613, column: 4, scope: !3470)
!3481 = !DILocation(line: 1614, column: 2, scope: !3470)
!3482 = !DILocation(line: 1609, column: 65, scope: !3462)
!3483 = !DILocation(line: 1609, column: 7, scope: !3462)
!3484 = distinct !{!3484, !3468, !3485}
!3485 = !DILocation(line: 1614, column: 2, scope: !3459)
!3486 = !DILocation(line: 1615, column: 16, scope: !3450)
!3487 = !DILocation(line: 1615, column: 7, scope: !3450)
!3488 = !DILocation(line: 1617, column: 16, scope: !3450)
!3489 = !DILocation(line: 1617, column: 7, scope: !3450)
!3490 = !DILocation(line: 1618, column: 14, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 1618, column: 7)
!3492 = !DILocation(line: 1618, column: 12, scope: !3491)
!3493 = !DILocation(line: 1618, column: 19, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3491, file: !3, line: 1618, column: 7)
!3495 = !DILocation(line: 1618, column: 23, scope: !3494)
!3496 = !DILocation(line: 1618, column: 39, scope: !3494)
!3497 = !DILocation(line: 1618, column: 42, scope: !3494)
!3498 = !DILocation(line: 1618, column: 53, scope: !3494)
!3499 = !DILocation(line: 1618, column: 21, scope: !3494)
!3500 = !DILocation(line: 1618, column: 7, scope: !3491)
!3501 = !DILocalVariable(name: "b", scope: !3502, file: !3, line: 1620, type: !990)
!3502 = distinct !DILexicalBlock(scope: !3494, file: !3, line: 1619, column: 2)
!3503 = !DILocation(line: 1620, column: 8, scope: !3502)
!3504 = !DILocation(line: 1620, column: 12, scope: !3502)
!3505 = !DILocation(line: 1620, column: 28, scope: !3502)
!3506 = !DILocation(line: 1620, column: 31, scope: !3502)
!3507 = !DILocation(line: 1620, column: 42, scope: !3502)
!3508 = !DILocation(line: 1620, column: 55, scope: !3502)
!3509 = !DILocation(line: 1620, column: 59, scope: !3502)
!3510 = !DILocation(line: 1622, column: 13, scope: !3502)
!3511 = !DILocation(line: 1622, column: 33, scope: !3502)
!3512 = !DILocation(line: 1622, column: 4, scope: !3502)
!3513 = !DILocation(line: 1623, column: 2, scope: !3502)
!3514 = !DILocation(line: 1618, column: 66, scope: !3494)
!3515 = !DILocation(line: 1618, column: 7, scope: !3494)
!3516 = distinct !{!3516, !3500, !3517}
!3517 = !DILocation(line: 1623, column: 2, scope: !3491)
!3518 = !DILocation(line: 1624, column: 16, scope: !3450)
!3519 = !DILocation(line: 1624, column: 7, scope: !3450)
!3520 = !DILocation(line: 1625, column: 5, scope: !3450)
!3521 = !DILocation(line: 1628, column: 16, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 1627, column: 5)
!3523 = !DILocation(line: 1628, column: 52, scope: !3522)
!3524 = !DILocation(line: 1628, column: 7, scope: !3522)
!3525 = !DILocation(line: 1630, column: 1, scope: !3435)
!3526 = distinct !DISubprogram(name: "debug_candidates", scope: !3, file: !3, line: 1635, type: !2327, scopeLine: 1636, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3527 = !DILocalVariable(name: "trg", arg: 1, scope: !3526, file: !3, line: 1635, type: !990)
!3528 = !DILocation(line: 1635, column: 23, scope: !3526)
!3529 = !DILocalVariable(name: "i", scope: !3526, file: !3, line: 1637, type: !990)
!3530 = !DILocation(line: 1637, column: 7, scope: !3526)
!3531 = !DILocation(line: 1639, column: 12, scope: !3526)
!3532 = !DILocation(line: 1640, column: 5, scope: !3526)
!3533 = !DILocation(line: 1640, column: 24, scope: !3526)
!3534 = !DILocation(line: 1639, column: 3, scope: !3526)
!3535 = !DILocation(line: 1641, column: 12, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3526, file: !3, line: 1641, column: 3)
!3537 = !DILocation(line: 1641, column: 16, scope: !3536)
!3538 = !DILocation(line: 1641, column: 10, scope: !3536)
!3539 = !DILocation(line: 1641, column: 8, scope: !3536)
!3540 = !DILocation(line: 1641, column: 21, scope: !3541)
!3541 = distinct !DILexicalBlock(scope: !3536, file: !3, line: 1641, column: 3)
!3542 = !DILocation(line: 1641, column: 25, scope: !3541)
!3543 = !DILocation(line: 1641, column: 23, scope: !3541)
!3544 = !DILocation(line: 1641, column: 3, scope: !3536)
!3545 = !DILocation(line: 1642, column: 22, scope: !3541)
!3546 = !DILocation(line: 1642, column: 5, scope: !3541)
!3547 = !DILocation(line: 1641, column: 45, scope: !3541)
!3548 = !DILocation(line: 1641, column: 3, scope: !3541)
!3549 = distinct !{!3549, !3544, !3550}
!3550 = !DILocation(line: 1642, column: 23, scope: !3536)
!3551 = !DILocation(line: 1643, column: 1, scope: !3526)
!3552 = distinct !DISubprogram(name: "contributes_to_priority", scope: !3, file: !3, line: 2307, type: !2358, scopeLine: 2308, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3553 = !DILocalVariable(name: "next", arg: 1, scope: !3552, file: !3, line: 2307, type: !997)
!3554 = !DILocation(line: 2307, column: 30, scope: !3552)
!3555 = !DILocalVariable(name: "insn", arg: 2, scope: !3552, file: !3, line: 2307, type: !997)
!3556 = !DILocation(line: 2307, column: 40, scope: !3552)
!3557 = !DILocation(line: 2310, column: 10, scope: !3552)
!3558 = !DILocation(line: 2310, column: 44, scope: !3552)
!3559 = !DILocation(line: 2310, column: 41, scope: !3552)
!3560 = !DILocation(line: 2310, column: 3, scope: !3552)
!3561 = distinct !DISubprogram(name: "get_rgn_sched_max_insns_priority", scope: !3, file: !3, line: 2398, type: !2350, scopeLine: 2399, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3562 = !DILocation(line: 2400, column: 25, scope: !3561)
!3563 = !DILocation(line: 2400, column: 3, scope: !3561)
!3564 = distinct !DISubprogram(name: "deps_join", scope: !3, file: !3, line: 2604, type: !3565, scopeLine: 2605, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3565 = !DISubroutineType(types: !3566)
!3566 = !{null, !993, !993}
!3567 = !DILocalVariable(name: "succ_deps", arg: 1, scope: !3564, file: !3, line: 2604, type: !993)
!3568 = !DILocation(line: 2604, column: 25, scope: !3564)
!3569 = !DILocalVariable(name: "pred_deps", arg: 2, scope: !3564, file: !3, line: 2604, type: !993)
!3570 = !DILocation(line: 2604, column: 49, scope: !3564)
!3571 = !DILocalVariable(name: "reg", scope: !3564, file: !3, line: 2606, type: !7)
!3572 = !DILocation(line: 2606, column: 12, scope: !3564)
!3573 = !DILocalVariable(name: "rsi", scope: !3564, file: !3, line: 2607, type: !3574)
!3574 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_set_iterator", file: !142, line: 90, baseType: !3575)
!3575 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1056, line: 218, baseType: !3576)
!3576 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1056, line: 203, size: 256, elements: !3577)
!3577 = !{!3578, !3579, !3580, !3581}
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !3576, file: !1056, line: 206, baseType: !1059, size: 64)
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !3576, file: !1056, line: 209, baseType: !1059, size: 64, offset: 64)
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !3576, file: !1056, line: 212, baseType: !7, size: 32, offset: 128)
!3581 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !3576, file: !1056, line: 217, baseType: !1069, size: 64, offset: 192)
!3582 = !DILocation(line: 2607, column: 20, scope: !3564)
!3583 = !DILocation(line: 2610, column: 3, scope: !3584)
!3584 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 2610, column: 3)
!3585 = !DILocation(line: 2610, column: 3, scope: !3586)
!3586 = distinct !DILexicalBlock(scope: !3584, file: !3, line: 2610, column: 3)
!3587 = !DILocalVariable(name: "pred_rl", scope: !3588, file: !3, line: 2612, type: !2152)
!3588 = distinct !DILexicalBlock(scope: !3586, file: !3, line: 2611, column: 5)
!3589 = !DILocation(line: 2612, column: 24, scope: !3588)
!3590 = !DILocation(line: 2612, column: 35, scope: !3588)
!3591 = !DILocation(line: 2612, column: 46, scope: !3588)
!3592 = !DILocation(line: 2612, column: 55, scope: !3588)
!3593 = !DILocalVariable(name: "succ_rl", scope: !3588, file: !3, line: 2613, type: !2152)
!3594 = !DILocation(line: 2613, column: 24, scope: !3588)
!3595 = !DILocation(line: 2613, column: 35, scope: !3588)
!3596 = !DILocation(line: 2613, column: 46, scope: !3588)
!3597 = !DILocation(line: 2613, column: 55, scope: !3588)
!3598 = !DILocation(line: 2615, column: 41, scope: !3588)
!3599 = !DILocation(line: 2615, column: 50, scope: !3588)
!3600 = !DILocation(line: 2615, column: 56, scope: !3588)
!3601 = !DILocation(line: 2615, column: 65, scope: !3588)
!3602 = !DILocation(line: 2615, column: 23, scope: !3588)
!3603 = !DILocation(line: 2615, column: 7, scope: !3588)
!3604 = !DILocation(line: 2615, column: 16, scope: !3588)
!3605 = !DILocation(line: 2615, column: 21, scope: !3588)
!3606 = !DILocation(line: 2616, column: 41, scope: !3588)
!3607 = !DILocation(line: 2616, column: 50, scope: !3588)
!3608 = !DILocation(line: 2616, column: 56, scope: !3588)
!3609 = !DILocation(line: 2616, column: 65, scope: !3588)
!3610 = !DILocation(line: 2616, column: 23, scope: !3588)
!3611 = !DILocation(line: 2616, column: 7, scope: !3588)
!3612 = !DILocation(line: 2616, column: 16, scope: !3588)
!3613 = !DILocation(line: 2616, column: 21, scope: !3588)
!3614 = !DILocation(line: 2618, column: 22, scope: !3588)
!3615 = !DILocation(line: 2618, column: 31, scope: !3588)
!3616 = !DILocation(line: 2618, column: 46, scope: !3588)
!3617 = !DILocation(line: 2618, column: 55, scope: !3588)
!3618 = !DILocation(line: 2618, column: 4, scope: !3588)
!3619 = !DILocation(line: 2617, column: 7, scope: !3588)
!3620 = !DILocation(line: 2617, column: 16, scope: !3588)
!3621 = !DILocation(line: 2618, column: 2, scope: !3588)
!3622 = !DILocation(line: 2619, column: 45, scope: !3588)
!3623 = !DILocation(line: 2619, column: 54, scope: !3588)
!3624 = !DILocation(line: 2620, column: 45, scope: !3588)
!3625 = !DILocation(line: 2620, column: 54, scope: !3588)
!3626 = !DILocation(line: 2619, column: 27, scope: !3588)
!3627 = !DILocation(line: 2619, column: 7, scope: !3588)
!3628 = !DILocation(line: 2619, column: 16, scope: !3588)
!3629 = !DILocation(line: 2619, column: 25, scope: !3588)
!3630 = !DILocation(line: 2621, column: 31, scope: !3588)
!3631 = !DILocation(line: 2621, column: 40, scope: !3588)
!3632 = !DILocation(line: 2621, column: 7, scope: !3588)
!3633 = !DILocation(line: 2621, column: 16, scope: !3588)
!3634 = !DILocation(line: 2621, column: 28, scope: !3588)
!3635 = !DILocation(line: 2622, column: 35, scope: !3588)
!3636 = !DILocation(line: 2622, column: 44, scope: !3588)
!3637 = !DILocation(line: 2622, column: 7, scope: !3588)
!3638 = !DILocation(line: 2622, column: 16, scope: !3588)
!3639 = !DILocation(line: 2622, column: 32, scope: !3588)
!3640 = !DILocation(line: 2623, column: 5, scope: !3588)
!3641 = distinct !{!3641, !3583, !3642}
!3642 = !DILocation(line: 2623, column: 5, scope: !3584)
!3643 = !DILocation(line: 2624, column: 3, scope: !3564)
!3644 = !DILocation(line: 2627, column: 25, scope: !3564)
!3645 = !DILocation(line: 2627, column: 36, scope: !3564)
!3646 = !DILocation(line: 2628, column: 25, scope: !3564)
!3647 = !DILocation(line: 2628, column: 36, scope: !3564)
!3648 = !DILocation(line: 2629, column: 26, scope: !3564)
!3649 = !DILocation(line: 2629, column: 37, scope: !3564)
!3650 = !DILocation(line: 2630, column: 26, scope: !3564)
!3651 = !DILocation(line: 2630, column: 37, scope: !3564)
!3652 = !DILocation(line: 2627, column: 3, scope: !3564)
!3653 = !DILocation(line: 2631, column: 25, scope: !3564)
!3654 = !DILocation(line: 2631, column: 36, scope: !3564)
!3655 = !DILocation(line: 2632, column: 25, scope: !3564)
!3656 = !DILocation(line: 2632, column: 36, scope: !3564)
!3657 = !DILocation(line: 2633, column: 26, scope: !3564)
!3658 = !DILocation(line: 2633, column: 37, scope: !3564)
!3659 = !DILocation(line: 2634, column: 26, scope: !3564)
!3660 = !DILocation(line: 2634, column: 37, scope: !3564)
!3661 = !DILocation(line: 2631, column: 3, scope: !3564)
!3662 = !DILocation(line: 2637, column: 25, scope: !3564)
!3663 = !DILocation(line: 2637, column: 36, scope: !3564)
!3664 = !DILocation(line: 2638, column: 25, scope: !3564)
!3665 = !DILocation(line: 2638, column: 36, scope: !3564)
!3666 = !DILocation(line: 2637, column: 7, scope: !3564)
!3667 = !DILocation(line: 2636, column: 3, scope: !3564)
!3668 = !DILocation(line: 2636, column: 14, scope: !3564)
!3669 = !DILocation(line: 2637, column: 5, scope: !3564)
!3670 = !DILocation(line: 2640, column: 42, scope: !3564)
!3671 = !DILocation(line: 2640, column: 53, scope: !3564)
!3672 = !DILocation(line: 2640, column: 3, scope: !3564)
!3673 = !DILocation(line: 2640, column: 14, scope: !3564)
!3674 = !DILocation(line: 2640, column: 39, scope: !3564)
!3675 = !DILocation(line: 2641, column: 43, scope: !3564)
!3676 = !DILocation(line: 2641, column: 54, scope: !3564)
!3677 = !DILocation(line: 2641, column: 3, scope: !3564)
!3678 = !DILocation(line: 2641, column: 14, scope: !3564)
!3679 = !DILocation(line: 2641, column: 40, scope: !3564)
!3680 = !DILocation(line: 2642, column: 38, scope: !3564)
!3681 = !DILocation(line: 2642, column: 49, scope: !3564)
!3682 = !DILocation(line: 2642, column: 3, scope: !3564)
!3683 = !DILocation(line: 2642, column: 14, scope: !3564)
!3684 = !DILocation(line: 2642, column: 35, scope: !3564)
!3685 = !DILocation(line: 2646, column: 25, scope: !3564)
!3686 = !DILocation(line: 2646, column: 36, scope: !3564)
!3687 = !DILocation(line: 2647, column: 25, scope: !3564)
!3688 = !DILocation(line: 2647, column: 36, scope: !3564)
!3689 = !DILocation(line: 2646, column: 7, scope: !3564)
!3690 = !DILocation(line: 2645, column: 3, scope: !3564)
!3691 = !DILocation(line: 2645, column: 14, scope: !3564)
!3692 = !DILocation(line: 2646, column: 5, scope: !3564)
!3693 = !DILocation(line: 2651, column: 25, scope: !3564)
!3694 = !DILocation(line: 2651, column: 36, scope: !3564)
!3695 = !DILocation(line: 2652, column: 25, scope: !3564)
!3696 = !DILocation(line: 2652, column: 36, scope: !3564)
!3697 = !DILocation(line: 2651, column: 7, scope: !3564)
!3698 = !DILocation(line: 2650, column: 3, scope: !3564)
!3699 = !DILocation(line: 2650, column: 14, scope: !3564)
!3700 = !DILocation(line: 2651, column: 5, scope: !3564)
!3701 = !DILocation(line: 2656, column: 25, scope: !3564)
!3702 = !DILocation(line: 2656, column: 36, scope: !3564)
!3703 = !DILocation(line: 2657, column: 25, scope: !3564)
!3704 = !DILocation(line: 2657, column: 36, scope: !3564)
!3705 = !DILocation(line: 2656, column: 7, scope: !3564)
!3706 = !DILocation(line: 2655, column: 3, scope: !3564)
!3707 = !DILocation(line: 2655, column: 14, scope: !3564)
!3708 = !DILocation(line: 2656, column: 5, scope: !3564)
!3709 = !DILocation(line: 2658, column: 1, scope: !3564)
!3710 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1056, file: !1056, line: 224, type: !3711, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3711 = !DISubroutineType(types: !3712)
!3712 = !{null, !3713, !3714, !7, !3717}
!3713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3575, size: 64)
!3714 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !998, line: 48, baseType: !3715)
!3715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3716, size: 64)
!3716 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1055)
!3717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!3718 = !DILocalVariable(name: "bi", arg: 1, scope: !3710, file: !1056, line: 224, type: !3713)
!3719 = !DILocation(line: 224, column: 37, scope: !3710)
!3720 = !DILocalVariable(name: "map", arg: 2, scope: !3710, file: !1056, line: 224, type: !3714)
!3721 = !DILocation(line: 224, column: 54, scope: !3710)
!3722 = !DILocalVariable(name: "start_bit", arg: 3, scope: !3710, file: !1056, line: 225, type: !7)
!3723 = !DILocation(line: 225, column: 15, scope: !3710)
!3724 = !DILocalVariable(name: "bit_no", arg: 4, scope: !3710, file: !1056, line: 225, type: !3717)
!3725 = !DILocation(line: 225, column: 36, scope: !3710)
!3726 = !DILocation(line: 227, column: 14, scope: !3710)
!3727 = !DILocation(line: 227, column: 19, scope: !3710)
!3728 = !DILocation(line: 227, column: 3, scope: !3710)
!3729 = !DILocation(line: 227, column: 7, scope: !3710)
!3730 = !DILocation(line: 227, column: 12, scope: !3710)
!3731 = !DILocation(line: 228, column: 3, scope: !3710)
!3732 = !DILocation(line: 228, column: 7, scope: !3710)
!3733 = !DILocation(line: 228, column: 12, scope: !3710)
!3734 = !DILocation(line: 231, column: 3, scope: !3710)
!3735 = !DILocation(line: 233, column: 12, scope: !3736)
!3736 = distinct !DILexicalBlock(scope: !3737, file: !1056, line: 233, column: 11)
!3737 = distinct !DILexicalBlock(scope: !3710, file: !1056, line: 232, column: 5)
!3738 = !DILocation(line: 233, column: 16, scope: !3736)
!3739 = !DILocation(line: 233, column: 11, scope: !3737)
!3740 = !DILocation(line: 235, column: 4, scope: !3741)
!3741 = distinct !DILexicalBlock(scope: !3736, file: !1056, line: 234, column: 2)
!3742 = !DILocation(line: 235, column: 8, scope: !3741)
!3743 = !DILocation(line: 235, column: 13, scope: !3741)
!3744 = !DILocation(line: 236, column: 4, scope: !3741)
!3745 = !DILocation(line: 239, column: 11, scope: !3746)
!3746 = distinct !DILexicalBlock(scope: !3737, file: !1056, line: 239, column: 11)
!3747 = !DILocation(line: 239, column: 15, scope: !3746)
!3748 = !DILocation(line: 239, column: 21, scope: !3746)
!3749 = !DILocation(line: 239, column: 29, scope: !3746)
!3750 = !DILocation(line: 239, column: 39, scope: !3746)
!3751 = !DILocation(line: 239, column: 26, scope: !3746)
!3752 = !DILocation(line: 239, column: 11, scope: !3737)
!3753 = !DILocation(line: 240, column: 2, scope: !3746)
!3754 = !DILocation(line: 241, column: 18, scope: !3737)
!3755 = !DILocation(line: 241, column: 22, scope: !3737)
!3756 = !DILocation(line: 241, column: 28, scope: !3737)
!3757 = !DILocation(line: 241, column: 7, scope: !3737)
!3758 = !DILocation(line: 241, column: 11, scope: !3737)
!3759 = !DILocation(line: 241, column: 16, scope: !3737)
!3760 = distinct !{!3760, !3734, !3761}
!3761 = !DILocation(line: 242, column: 5, scope: !3710)
!3762 = !DILocation(line: 245, column: 7, scope: !3763)
!3763 = distinct !DILexicalBlock(scope: !3710, file: !1056, line: 245, column: 7)
!3764 = !DILocation(line: 245, column: 11, scope: !3763)
!3765 = !DILocation(line: 245, column: 17, scope: !3763)
!3766 = !DILocation(line: 245, column: 25, scope: !3763)
!3767 = !DILocation(line: 245, column: 35, scope: !3763)
!3768 = !DILocation(line: 245, column: 22, scope: !3763)
!3769 = !DILocation(line: 245, column: 7, scope: !3710)
!3770 = !DILocation(line: 246, column: 17, scope: !3763)
!3771 = !DILocation(line: 246, column: 21, scope: !3763)
!3772 = !DILocation(line: 246, column: 27, scope: !3763)
!3773 = !DILocation(line: 246, column: 32, scope: !3763)
!3774 = !DILocation(line: 246, column: 15, scope: !3763)
!3775 = !DILocation(line: 246, column: 5, scope: !3763)
!3776 = !DILocation(line: 249, column: 17, scope: !3710)
!3777 = !DILocation(line: 249, column: 27, scope: !3710)
!3778 = !DILocation(line: 249, column: 46, scope: !3710)
!3779 = !DILocation(line: 249, column: 3, scope: !3710)
!3780 = !DILocation(line: 249, column: 7, scope: !3710)
!3781 = !DILocation(line: 249, column: 15, scope: !3710)
!3782 = !DILocation(line: 250, column: 14, scope: !3710)
!3783 = !DILocation(line: 250, column: 18, scope: !3710)
!3784 = !DILocation(line: 250, column: 24, scope: !3710)
!3785 = !DILocation(line: 250, column: 29, scope: !3710)
!3786 = !DILocation(line: 250, column: 33, scope: !3710)
!3787 = !DILocation(line: 250, column: 3, scope: !3710)
!3788 = !DILocation(line: 250, column: 7, scope: !3710)
!3789 = !DILocation(line: 250, column: 12, scope: !3710)
!3790 = !DILocation(line: 251, column: 16, scope: !3710)
!3791 = !DILocation(line: 251, column: 26, scope: !3710)
!3792 = !DILocation(line: 251, column: 3, scope: !3710)
!3793 = !DILocation(line: 251, column: 7, scope: !3710)
!3794 = !DILocation(line: 251, column: 12, scope: !3710)
!3795 = !DILocation(line: 257, column: 17, scope: !3710)
!3796 = !DILocation(line: 257, column: 21, scope: !3710)
!3797 = !DILocation(line: 257, column: 16, scope: !3710)
!3798 = !DILocation(line: 257, column: 13, scope: !3710)
!3799 = !DILocation(line: 259, column: 13, scope: !3710)
!3800 = !DILocation(line: 259, column: 4, scope: !3710)
!3801 = !DILocation(line: 259, column: 11, scope: !3710)
!3802 = !DILocation(line: 260, column: 1, scope: !3710)
!3803 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1056, file: !1056, line: 393, type: !3804, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3804 = !DISubroutineType(types: !3805)
!3805 = !{!1230, !3713, !3717}
!3806 = !DILocalVariable(name: "bi", arg: 1, scope: !3803, file: !1056, line: 393, type: !3713)
!3807 = !DILocation(line: 393, column: 32, scope: !3803)
!3808 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3803, file: !1056, line: 393, type: !3717)
!3809 = !DILocation(line: 393, column: 46, scope: !3803)
!3810 = !DILocation(line: 396, column: 7, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3803, file: !1056, line: 396, column: 7)
!3812 = !DILocation(line: 396, column: 11, scope: !3811)
!3813 = !DILocation(line: 396, column: 7, scope: !3803)
!3814 = !DILocation(line: 397, column: 5, scope: !3811)
!3815 = !DILabel(scope: !3816, name: "next_bit", file: !1056, line: 398)
!3816 = distinct !DILexicalBlock(scope: !3811, file: !1056, line: 397, column: 5)
!3817 = !DILocation(line: 398, column: 5, scope: !3816)
!3818 = !DILocation(line: 399, column: 7, scope: !3816)
!3819 = !DILocation(line: 399, column: 16, scope: !3816)
!3820 = !DILocation(line: 399, column: 20, scope: !3816)
!3821 = !DILocation(line: 399, column: 25, scope: !3816)
!3822 = !DILocation(line: 399, column: 14, scope: !3816)
!3823 = !DILocation(line: 401, column: 4, scope: !3824)
!3824 = distinct !DILexicalBlock(scope: !3816, file: !1056, line: 400, column: 2)
!3825 = !DILocation(line: 401, column: 8, scope: !3824)
!3826 = !DILocation(line: 401, column: 13, scope: !3824)
!3827 = !DILocation(line: 402, column: 5, scope: !3824)
!3828 = !DILocation(line: 402, column: 12, scope: !3824)
!3829 = distinct !{!3829, !3818, !3830}
!3830 = !DILocation(line: 403, column: 2, scope: !3816)
!3831 = !DILocation(line: 404, column: 7, scope: !3816)
!3832 = !DILocation(line: 410, column: 16, scope: !3803)
!3833 = !DILocation(line: 410, column: 15, scope: !3803)
!3834 = !DILocation(line: 410, column: 23, scope: !3803)
!3835 = !DILocation(line: 410, column: 42, scope: !3803)
!3836 = !DILocation(line: 411, column: 7, scope: !3803)
!3837 = !DILocation(line: 411, column: 26, scope: !3803)
!3838 = !DILocation(line: 410, column: 4, scope: !3803)
!3839 = !DILocation(line: 410, column: 11, scope: !3803)
!3840 = !DILocation(line: 412, column: 3, scope: !3803)
!3841 = !DILocation(line: 412, column: 7, scope: !3803)
!3842 = !DILocation(line: 412, column: 14, scope: !3803)
!3843 = !DILocation(line: 414, column: 3, scope: !3803)
!3844 = !DILocation(line: 417, column: 7, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3803, file: !1056, line: 415, column: 5)
!3846 = !DILocation(line: 417, column: 14, scope: !3845)
!3847 = !DILocation(line: 417, column: 18, scope: !3845)
!3848 = !DILocation(line: 417, column: 26, scope: !3845)
!3849 = !DILocation(line: 419, column: 15, scope: !3850)
!3850 = distinct !DILexicalBlock(scope: !3845, file: !1056, line: 418, column: 2)
!3851 = !DILocation(line: 419, column: 19, scope: !3850)
!3852 = !DILocation(line: 419, column: 25, scope: !3850)
!3853 = !DILocation(line: 419, column: 30, scope: !3850)
!3854 = !DILocation(line: 419, column: 34, scope: !3850)
!3855 = !DILocation(line: 419, column: 4, scope: !3850)
!3856 = !DILocation(line: 419, column: 8, scope: !3850)
!3857 = !DILocation(line: 419, column: 13, scope: !3850)
!3858 = !DILocation(line: 420, column: 8, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3850, file: !1056, line: 420, column: 8)
!3860 = !DILocation(line: 420, column: 12, scope: !3859)
!3861 = !DILocation(line: 420, column: 8, scope: !3850)
!3862 = !DILocation(line: 421, column: 6, scope: !3859)
!3863 = !DILocation(line: 422, column: 5, scope: !3850)
!3864 = !DILocation(line: 422, column: 12, scope: !3850)
!3865 = !DILocation(line: 423, column: 4, scope: !3850)
!3866 = !DILocation(line: 423, column: 8, scope: !3850)
!3867 = !DILocation(line: 423, column: 15, scope: !3850)
!3868 = distinct !{!3868, !3844, !3869}
!3869 = !DILocation(line: 424, column: 2, scope: !3845)
!3870 = !DILocation(line: 427, column: 18, scope: !3845)
!3871 = !DILocation(line: 427, column: 22, scope: !3845)
!3872 = !DILocation(line: 427, column: 28, scope: !3845)
!3873 = !DILocation(line: 427, column: 7, scope: !3845)
!3874 = !DILocation(line: 427, column: 11, scope: !3845)
!3875 = !DILocation(line: 427, column: 16, scope: !3845)
!3876 = !DILocation(line: 428, column: 12, scope: !3877)
!3877 = distinct !DILexicalBlock(scope: !3845, file: !1056, line: 428, column: 11)
!3878 = !DILocation(line: 428, column: 16, scope: !3877)
!3879 = !DILocation(line: 428, column: 11, scope: !3845)
!3880 = !DILocation(line: 429, column: 2, scope: !3877)
!3881 = !DILocation(line: 430, column: 17, scope: !3845)
!3882 = !DILocation(line: 430, column: 21, scope: !3845)
!3883 = !DILocation(line: 430, column: 27, scope: !3845)
!3884 = !DILocation(line: 430, column: 32, scope: !3845)
!3885 = !DILocation(line: 430, column: 8, scope: !3845)
!3886 = !DILocation(line: 430, column: 15, scope: !3845)
!3887 = !DILocation(line: 431, column: 7, scope: !3845)
!3888 = !DILocation(line: 431, column: 11, scope: !3845)
!3889 = !DILocation(line: 431, column: 19, scope: !3845)
!3890 = distinct !{!3890, !3843, !3891}
!3891 = !DILocation(line: 432, column: 5, scope: !3803)
!3892 = !DILocation(line: 433, column: 1, scope: !3803)
!3893 = distinct !DISubprogram(name: "concat_INSN_LIST", scope: !3, file: !3, line: 2575, type: !3894, scopeLine: 2576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3894 = !DISubroutineType(types: !3895)
!3895 = !{!997, !997, !997}
!3896 = !DILocalVariable(name: "copy", arg: 1, scope: !3893, file: !3, line: 2575, type: !997)
!3897 = !DILocation(line: 2575, column: 23, scope: !3893)
!3898 = !DILocalVariable(name: "old", arg: 2, scope: !3893, file: !3, line: 2575, type: !997)
!3899 = !DILocation(line: 2575, column: 33, scope: !3893)
!3900 = !DILocalVariable(name: "new_rtx", scope: !3893, file: !3, line: 2577, type: !997)
!3901 = !DILocation(line: 2577, column: 7, scope: !3893)
!3902 = !DILocation(line: 2577, column: 17, scope: !3893)
!3903 = !DILocation(line: 2578, column: 3, scope: !3893)
!3904 = !DILocation(line: 2578, column: 10, scope: !3905)
!3905 = distinct !DILexicalBlock(scope: !3906, file: !3, line: 2578, column: 3)
!3906 = distinct !DILexicalBlock(scope: !3893, file: !3, line: 2578, column: 3)
!3907 = !DILocation(line: 2578, column: 3, scope: !3906)
!3908 = !DILocation(line: 2579, column: 32, scope: !3905)
!3909 = !DILocation(line: 2579, column: 48, scope: !3905)
!3910 = !DILocation(line: 2579, column: 15, scope: !3905)
!3911 = !DILocation(line: 2579, column: 13, scope: !3905)
!3912 = !DILocation(line: 2579, column: 5, scope: !3905)
!3913 = !DILocation(line: 2578, column: 24, scope: !3905)
!3914 = !DILocation(line: 2578, column: 22, scope: !3905)
!3915 = !DILocation(line: 2578, column: 3, scope: !3905)
!3916 = distinct !{!3916, !3907, !3917}
!3917 = !DILocation(line: 2579, column: 55, scope: !3906)
!3918 = !DILocation(line: 2580, column: 10, scope: !3893)
!3919 = !DILocation(line: 2580, column: 3, scope: !3893)
!3920 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1056, file: !1056, line: 382, type: !3921, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3921 = !DISubroutineType(types: !3922)
!3922 = !{null, !3713, !3717}
!3923 = !DILocalVariable(name: "bi", arg: 1, scope: !3920, file: !1056, line: 382, type: !3713)
!3924 = !DILocation(line: 382, column: 33, scope: !3920)
!3925 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3920, file: !1056, line: 382, type: !3717)
!3926 = !DILocation(line: 382, column: 47, scope: !3920)
!3927 = !DILocation(line: 384, column: 3, scope: !3920)
!3928 = !DILocation(line: 384, column: 7, scope: !3920)
!3929 = !DILocation(line: 384, column: 12, scope: !3920)
!3930 = !DILocation(line: 385, column: 4, scope: !3920)
!3931 = !DILocation(line: 385, column: 11, scope: !3920)
!3932 = !DILocation(line: 386, column: 1, scope: !3920)
!3933 = distinct !DISubprogram(name: "concat_insn_mem_list", scope: !3, file: !3, line: 2584, type: !3934, scopeLine: 2586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3934 = !DISubroutineType(types: !3935)
!3935 = !{null, !997, !997, !3936, !3936}
!3936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !997, size: 64)
!3937 = !DILocalVariable(name: "copy_insns", arg: 1, scope: !3933, file: !3, line: 2584, type: !997)
!3938 = !DILocation(line: 2584, column: 27, scope: !3933)
!3939 = !DILocalVariable(name: "copy_mems", arg: 2, scope: !3933, file: !3, line: 2584, type: !997)
!3940 = !DILocation(line: 2584, column: 43, scope: !3933)
!3941 = !DILocalVariable(name: "old_insns_p", arg: 3, scope: !3933, file: !3, line: 2584, type: !3936)
!3942 = !DILocation(line: 2584, column: 59, scope: !3933)
!3943 = !DILocalVariable(name: "old_mems_p", arg: 4, scope: !3933, file: !3, line: 2585, type: !3936)
!3944 = !DILocation(line: 2585, column: 14, scope: !3933)
!3945 = !DILocalVariable(name: "new_insns", scope: !3933, file: !3, line: 2587, type: !997)
!3946 = !DILocation(line: 2587, column: 7, scope: !3933)
!3947 = !DILocation(line: 2587, column: 20, scope: !3933)
!3948 = !DILocation(line: 2587, column: 19, scope: !3933)
!3949 = !DILocalVariable(name: "new_mems", scope: !3933, file: !3, line: 2588, type: !997)
!3950 = !DILocation(line: 2588, column: 7, scope: !3933)
!3951 = !DILocation(line: 2588, column: 19, scope: !3933)
!3952 = !DILocation(line: 2588, column: 18, scope: !3933)
!3953 = !DILocation(line: 2590, column: 3, scope: !3933)
!3954 = !DILocation(line: 2590, column: 10, scope: !3933)
!3955 = !DILocation(line: 2592, column: 36, scope: !3956)
!3956 = distinct !DILexicalBlock(scope: !3933, file: !3, line: 2591, column: 5)
!3957 = !DILocation(line: 2592, column: 58, scope: !3956)
!3958 = !DILocation(line: 2592, column: 19, scope: !3956)
!3959 = !DILocation(line: 2592, column: 17, scope: !3956)
!3960 = !DILocation(line: 2593, column: 45, scope: !3956)
!3961 = !DILocation(line: 2593, column: 66, scope: !3956)
!3962 = !DILocation(line: 2593, column: 18, scope: !3956)
!3963 = !DILocation(line: 2593, column: 16, scope: !3956)
!3964 = !DILocation(line: 2594, column: 20, scope: !3956)
!3965 = !DILocation(line: 2594, column: 18, scope: !3956)
!3966 = !DILocation(line: 2595, column: 19, scope: !3956)
!3967 = !DILocation(line: 2595, column: 17, scope: !3956)
!3968 = distinct !{!3968, !3953, !3969}
!3969 = !DILocation(line: 2596, column: 5, scope: !3933)
!3970 = !DILocation(line: 2598, column: 18, scope: !3933)
!3971 = !DILocation(line: 2598, column: 4, scope: !3933)
!3972 = !DILocation(line: 2598, column: 16, scope: !3933)
!3973 = !DILocation(line: 2599, column: 17, scope: !3933)
!3974 = !DILocation(line: 2599, column: 4, scope: !3933)
!3975 = !DILocation(line: 2599, column: 15, scope: !3933)
!3976 = !DILocation(line: 2600, column: 1, scope: !3933)
!3977 = distinct !DISubprogram(name: "debug_rgn_dependencies", scope: !3, file: !3, line: 2779, type: !2327, scopeLine: 2780, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!3978 = !DILocalVariable(name: "from_bb", arg: 1, scope: !3977, file: !3, line: 2779, type: !990)
!3979 = !DILocation(line: 2779, column: 29, scope: !3977)
!3980 = !DILocalVariable(name: "bb", scope: !3977, file: !3, line: 2781, type: !990)
!3981 = !DILocation(line: 2781, column: 7, scope: !3977)
!3982 = !DILocation(line: 2783, column: 12, scope: !3977)
!3983 = !DILocation(line: 2783, column: 3, scope: !3977)
!3984 = !DILocation(line: 2786, column: 13, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3977, file: !3, line: 2786, column: 3)
!3986 = !DILocation(line: 2786, column: 11, scope: !3985)
!3987 = !DILocation(line: 2786, column: 8, scope: !3985)
!3988 = !DILocation(line: 2786, column: 22, scope: !3989)
!3989 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 2786, column: 3)
!3990 = !DILocation(line: 2786, column: 27, scope: !3989)
!3991 = !DILocation(line: 2786, column: 25, scope: !3989)
!3992 = !DILocation(line: 2786, column: 3, scope: !3985)
!3993 = !DILocalVariable(name: "head", scope: !3994, file: !3, line: 2788, type: !997)
!3994 = distinct !DILexicalBlock(scope: !3989, file: !3, line: 2787, column: 5)
!3995 = !DILocation(line: 2788, column: 11, scope: !3994)
!3996 = !DILocalVariable(name: "tail", scope: !3994, file: !3, line: 2788, type: !997)
!3997 = !DILocation(line: 2788, column: 17, scope: !3994)
!3998 = !DILocation(line: 2790, column: 26, scope: !3994)
!3999 = !DILocation(line: 2790, column: 45, scope: !3994)
!4000 = !DILocation(line: 2790, column: 7, scope: !3994)
!4001 = !DILocation(line: 2791, column: 16, scope: !3994)
!4002 = !DILocation(line: 2792, column: 9, scope: !3994)
!4003 = !DILocation(line: 2792, column: 27, scope: !3994)
!4004 = !DILocation(line: 2791, column: 7, scope: !3994)
!4005 = !DILocation(line: 2794, column: 27, scope: !3994)
!4006 = !DILocation(line: 2794, column: 33, scope: !3994)
!4007 = !DILocation(line: 2794, column: 7, scope: !3994)
!4008 = !DILocation(line: 2795, column: 5, scope: !3994)
!4009 = !DILocation(line: 2786, column: 48, scope: !3989)
!4010 = !DILocation(line: 2786, column: 3, scope: !3989)
!4011 = distinct !{!4011, !3992, !4012}
!4012 = !DILocation(line: 2795, column: 5, scope: !3985)
!4013 = !DILocation(line: 2796, column: 1, scope: !3977)
!4014 = distinct !DISubprogram(name: "debug_dependencies", scope: !3, file: !3, line: 2800, type: !2384, scopeLine: 2801, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4015 = !DILocalVariable(name: "head", arg: 1, scope: !4014, file: !3, line: 2800, type: !997)
!4016 = !DILocation(line: 2800, column: 30, scope: !4014)
!4017 = !DILocalVariable(name: "tail", arg: 2, scope: !4014, file: !3, line: 2800, type: !997)
!4018 = !DILocation(line: 2800, column: 40, scope: !4014)
!4019 = !DILocalVariable(name: "insn", scope: !4014, file: !3, line: 2802, type: !997)
!4020 = !DILocation(line: 2802, column: 7, scope: !4014)
!4021 = !DILocalVariable(name: "next_tail", scope: !4014, file: !3, line: 2803, type: !997)
!4022 = !DILocation(line: 2803, column: 7, scope: !4014)
!4023 = !DILocation(line: 2803, column: 19, scope: !4014)
!4024 = !DILocation(line: 2805, column: 12, scope: !4014)
!4025 = !DILocation(line: 2805, column: 3, scope: !4014)
!4026 = !DILocation(line: 2808, column: 12, scope: !4014)
!4027 = !DILocation(line: 2808, column: 3, scope: !4014)
!4028 = !DILocation(line: 2812, column: 15, scope: !4029)
!4029 = distinct !DILexicalBlock(scope: !4014, file: !3, line: 2812, column: 3)
!4030 = !DILocation(line: 2812, column: 13, scope: !4029)
!4031 = !DILocation(line: 2812, column: 8, scope: !4029)
!4032 = !DILocation(line: 2812, column: 21, scope: !4033)
!4033 = distinct !DILexicalBlock(scope: !4029, file: !3, line: 2812, column: 3)
!4034 = !DILocation(line: 2812, column: 29, scope: !4033)
!4035 = !DILocation(line: 2812, column: 26, scope: !4033)
!4036 = !DILocation(line: 2812, column: 3, scope: !4029)
!4037 = !DILocation(line: 2814, column: 13, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4039, file: !3, line: 2814, column: 11)
!4039 = distinct !DILexicalBlock(scope: !4033, file: !3, line: 2813, column: 5)
!4040 = !DILocation(line: 2814, column: 11, scope: !4039)
!4041 = !DILocalVariable(name: "n", scope: !4042, file: !3, line: 2816, type: !990)
!4042 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 2815, column: 2)
!4043 = !DILocation(line: 2816, column: 8, scope: !4042)
!4044 = !DILocation(line: 2817, column: 13, scope: !4042)
!4045 = !DILocation(line: 2817, column: 38, scope: !4042)
!4046 = !DILocation(line: 2817, column: 4, scope: !4042)
!4047 = !DILocation(line: 2818, column: 8, scope: !4048)
!4048 = distinct !DILexicalBlock(scope: !4042, file: !3, line: 2818, column: 8)
!4049 = !DILocation(line: 2818, column: 8, scope: !4042)
!4050 = !DILocation(line: 2820, column: 12, scope: !4051)
!4051 = distinct !DILexicalBlock(scope: !4048, file: !3, line: 2819, column: 6)
!4052 = !DILocation(line: 2820, column: 10, scope: !4051)
!4053 = !DILocation(line: 2821, column: 17, scope: !4051)
!4054 = !DILocation(line: 2821, column: 37, scope: !4051)
!4055 = !DILocation(line: 2821, column: 8, scope: !4051)
!4056 = !DILocation(line: 2822, column: 6, scope: !4051)
!4057 = !DILocation(line: 2824, column: 15, scope: !4048)
!4058 = !DILocation(line: 2824, column: 38, scope: !4048)
!4059 = !DILocation(line: 2824, column: 6, scope: !4048)
!4060 = !DILocation(line: 2825, column: 4, scope: !4042)
!4061 = !DILocation(line: 2828, column: 16, scope: !4039)
!4062 = !DILocation(line: 2830, column: 10, scope: !4039)
!4063 = !DILocation(line: 2831, column: 9, scope: !4039)
!4064 = !DILocation(line: 2832, column: 9, scope: !4039)
!4065 = !DILocation(line: 2833, column: 9, scope: !4039)
!4066 = !DILocation(line: 2834, column: 9, scope: !4039)
!4067 = !DILocation(line: 2834, column: 53, scope: !4039)
!4068 = !DILocation(line: 2834, column: 38, scope: !4039)
!4069 = !DILocation(line: 2835, column: 10, scope: !4039)
!4070 = !DILocation(line: 2835, column: 28, scope: !4039)
!4071 = !DILocation(line: 2836, column: 13, scope: !4039)
!4072 = !DILocation(line: 2837, column: 5, scope: !4039)
!4073 = !DILocation(line: 2838, column: 10, scope: !4039)
!4074 = !DILocation(line: 2838, column: 28, scope: !4039)
!4075 = !DILocation(line: 2839, column: 24, scope: !4039)
!4076 = !DILocation(line: 2839, column: 13, scope: !4039)
!4077 = !DILocation(line: 2840, column: 16, scope: !4039)
!4078 = !DILocation(line: 2840, column: 5, scope: !4039)
!4079 = !DILocation(line: 2828, column: 7, scope: !4039)
!4080 = !DILocation(line: 2842, column: 27, scope: !4081)
!4081 = distinct !DILexicalBlock(scope: !4039, file: !3, line: 2842, column: 11)
!4082 = !DILocation(line: 2842, column: 11, scope: !4081)
!4083 = !DILocation(line: 2842, column: 33, scope: !4081)
!4084 = !DILocation(line: 2842, column: 11, scope: !4039)
!4085 = !DILocation(line: 2843, column: 11, scope: !4081)
!4086 = !DILocation(line: 2843, column: 2, scope: !4081)
!4087 = !DILocation(line: 2845, column: 21, scope: !4081)
!4088 = !DILocation(line: 2845, column: 33, scope: !4081)
!4089 = !DILocation(line: 2845, column: 2, scope: !4081)
!4090 = !DILocation(line: 2847, column: 16, scope: !4039)
!4091 = !DILocation(line: 2847, column: 7, scope: !4039)
!4092 = !DILocalVariable(name: "sd_it", scope: !4093, file: !3, line: 2849, type: !2402)
!4093 = distinct !DILexicalBlock(scope: !4039, file: !3, line: 2848, column: 7)
!4094 = !DILocation(line: 2849, column: 18, scope: !4093)
!4095 = !DILocalVariable(name: "dep", scope: !4093, file: !3, line: 2850, type: !4096)
!4096 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_t", file: !508, line: 245, baseType: !4097)
!4097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4098, size: 64)
!4098 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_def", file: !508, line: 244, baseType: !2421)
!4099 = !DILocation(line: 2850, column: 8, scope: !4093)
!4100 = !DILocation(line: 2852, column: 2, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !4093, file: !3, line: 2852, column: 2)
!4102 = !DILocation(line: 2852, column: 2, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !4101, file: !3, line: 2852, column: 2)
!4104 = !DILocation(line: 2853, column: 13, scope: !4103)
!4105 = !DILocation(line: 2853, column: 32, scope: !4103)
!4106 = !DILocation(line: 2853, column: 4, scope: !4103)
!4107 = distinct !{!4107, !4100, !4108}
!4108 = !DILocation(line: 2853, column: 56, scope: !4101)
!4109 = !DILocation(line: 2855, column: 16, scope: !4039)
!4110 = !DILocation(line: 2855, column: 7, scope: !4039)
!4111 = !DILocation(line: 2856, column: 5, scope: !4039)
!4112 = !DILocation(line: 2812, column: 47, scope: !4033)
!4113 = !DILocation(line: 2812, column: 45, scope: !4033)
!4114 = !DILocation(line: 2812, column: 3, scope: !4033)
!4115 = distinct !{!4115, !4036, !4116}
!4116 = !DILocation(line: 2856, column: 5, scope: !4029)
!4117 = !DILocation(line: 2858, column: 12, scope: !4014)
!4118 = !DILocation(line: 2858, column: 3, scope: !4014)
!4119 = !DILocation(line: 2859, column: 1, scope: !4014)
!4120 = distinct !DISubprogram(name: "sel_sched_p", scope: !508, file: !508, line: 117, type: !2222, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4121 = !DILocation(line: 119, column: 10, scope: !4120)
!4122 = !DILocation(line: 119, column: 29, scope: !4120)
!4123 = !DILocation(line: 119, column: 43, scope: !4120)
!4124 = !DILocation(line: 119, column: 3, scope: !4120)
!4125 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_base_index", scope: !508, file: !508, line: 825, type: !4126, scopeLine: 825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4126 = !DISubroutineType(types: !4127)
!4127 = !{!4128, !4172, !7}
!4128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4129, size: 64)
!4129 = !DIDerivedType(tag: DW_TAG_typedef, name: "haifa_insn_data_def", file: !508, line: 822, baseType: !4130)
!4130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_haifa_insn_data", file: !508, line: 751, size: 768, elements: !4131)
!4131 = !{!4132, !4133, !4134, !4135, !4136, !4137, !4139, !4140, !4141, !4142, !4143, !4144, !4145, !4146, !4147, !4155, !4156, !4164, !4171}
!4132 = !DIDerivedType(tag: DW_TAG_member, name: "luid", scope: !4130, file: !508, line: 758, baseType: !990, size: 32)
!4133 = !DIDerivedType(tag: DW_TAG_member, name: "priority", scope: !4130, file: !508, line: 761, baseType: !990, size: 32, offset: 32)
!4134 = !DIDerivedType(tag: DW_TAG_member, name: "tick", scope: !4130, file: !508, line: 765, baseType: !990, size: 32, offset: 64)
!4135 = !DIDerivedType(tag: DW_TAG_member, name: "inter_tick", scope: !4130, file: !508, line: 769, baseType: !990, size: 32, offset: 96)
!4136 = !DIDerivedType(tag: DW_TAG_member, name: "queue_index", scope: !4130, file: !508, line: 772, baseType: !990, size: 32, offset: 128)
!4137 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !4130, file: !508, line: 774, baseType: !4138, size: 16, offset: 160)
!4138 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!4139 = !DIDerivedType(tag: DW_TAG_member, name: "fed_by_spec_load", scope: !4130, file: !508, line: 778, baseType: !7, size: 1, offset: 176, flags: DIFlagBitField, extraData: i64 176)
!4140 = !DIDerivedType(tag: DW_TAG_member, name: "is_load_insn", scope: !4130, file: !508, line: 779, baseType: !7, size: 1, offset: 177, flags: DIFlagBitField, extraData: i64 176)
!4141 = !DIDerivedType(tag: DW_TAG_member, name: "priority_status", scope: !4130, file: !508, line: 784, baseType: !1910, size: 8, offset: 184)
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "todo_spec", scope: !4130, file: !508, line: 787, baseType: !2184, size: 32, offset: 192)
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "done_spec", scope: !4130, file: !508, line: 790, baseType: !2184, size: 32, offset: 224)
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "check_spec", scope: !4130, file: !508, line: 793, baseType: !2184, size: 32, offset: 256)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "recovery_block", scope: !4130, file: !508, line: 796, baseType: !1536, size: 64, offset: 320)
!4146 = !DIDerivedType(tag: DW_TAG_member, name: "orig_pat", scope: !4130, file: !508, line: 799, baseType: !997, size: 64, offset: 384)
!4147 = !DIDerivedType(tag: DW_TAG_member, name: "reg_pressure", scope: !4130, file: !508, line: 804, baseType: !4148, size: 64, offset: 448)
!4148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4149, size: 64)
!4149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_pressure_data", file: !508, line: 711, size: 32, elements: !4150)
!4150 = !{!4151, !4152, !4153, !4154}
!4151 = !DIDerivedType(tag: DW_TAG_member, name: "clobber_increase", scope: !4149, file: !508, line: 714, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!4152 = !DIDerivedType(tag: DW_TAG_member, name: "set_increase", scope: !4149, file: !508, line: 717, baseType: !7, size: 8, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!4153 = !DIDerivedType(tag: DW_TAG_member, name: "unused_set_increase", scope: !4149, file: !508, line: 720, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!4154 = !DIDerivedType(tag: DW_TAG_member, name: "change", scope: !4149, file: !508, line: 722, baseType: !990, size: 8, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!4155 = !DIDerivedType(tag: DW_TAG_member, name: "max_reg_pressure", scope: !4130, file: !508, line: 810, baseType: !991, size: 64, offset: 512)
!4156 = !DIDerivedType(tag: DW_TAG_member, name: "reg_use_list", scope: !4130, file: !508, line: 813, baseType: !4157, size: 64, offset: 576)
!4157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4158, size: 64)
!4158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_use_data", file: !508, line: 726, size: 256, elements: !4159)
!4159 = !{!4160, !4161, !4162, !4163}
!4160 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !4158, file: !508, line: 729, baseType: !990, size: 32)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !4158, file: !508, line: 731, baseType: !997, size: 64, offset: 64)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "next_regno_use", scope: !4158, file: !508, line: 733, baseType: !4157, size: 64, offset: 128)
!4163 = !DIDerivedType(tag: DW_TAG_member, name: "next_insn_use", scope: !4158, file: !508, line: 735, baseType: !4157, size: 64, offset: 192)
!4164 = !DIDerivedType(tag: DW_TAG_member, name: "reg_set_list", scope: !4130, file: !508, line: 816, baseType: !4165, size: 64, offset: 640)
!4165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4166, size: 64)
!4166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_set_data", file: !508, line: 741, size: 192, elements: !4167)
!4167 = !{!4168, !4169, !4170}
!4168 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !4166, file: !508, line: 744, baseType: !990, size: 32)
!4169 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !4166, file: !508, line: 746, baseType: !997, size: 64, offset: 64)
!4170 = !DIDerivedType(tag: DW_TAG_member, name: "next_insn_set", scope: !4166, file: !508, line: 748, baseType: !4165, size: 64, offset: 128)
!4171 = !DIDerivedType(tag: DW_TAG_member, name: "reg_pressure_excess_cost_change", scope: !4130, file: !508, line: 819, baseType: !990, size: 32, offset: 704)
!4172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4173, size: 64)
!4173 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_haifa_insn_data_def_base", file: !508, line: 825, baseType: !4174)
!4174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_haifa_insn_data_def_base", file: !508, line: 825, size: 832, elements: !4175)
!4175 = !{!4176, !4177, !4178}
!4176 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4174, file: !508, line: 825, baseType: !7, size: 32)
!4177 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4174, file: !508, line: 825, baseType: !7, size: 32, offset: 32)
!4178 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4174, file: !508, line: 825, baseType: !4179, size: 768, offset: 64)
!4179 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4129, size: 768, elements: !1035)
!4180 = !DILocalVariable(name: "vec_", arg: 1, scope: !4125, file: !508, line: 825, type: !4172)
!4181 = !DILocation(line: 825, column: 1, scope: !4125)
!4182 = !DILocalVariable(name: "ix_", arg: 2, scope: !4125, file: !508, line: 825, type: !7)
!4183 = !DILocation(line: 0, scope: !4125)
!4184 = distinct !DISubprogram(name: "recog_memoized", scope: !4185, file: !4185, line: 150, type: !2300, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4185 = !DIFile(filename: "./recog.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4186 = !DILocalVariable(name: "insn", arg: 1, scope: !4184, file: !4185, line: 150, type: !997)
!4187 = !DILocation(line: 150, column: 21, scope: !4184)
!4188 = !DILocation(line: 152, column: 7, scope: !4189)
!4189 = distinct !DILexicalBlock(scope: !4184, file: !4185, line: 152, column: 7)
!4190 = !DILocation(line: 152, column: 24, scope: !4189)
!4191 = !DILocation(line: 152, column: 7, scope: !4184)
!4192 = !DILocation(line: 153, column: 31, scope: !4189)
!4193 = !DILocation(line: 153, column: 47, scope: !4189)
!4194 = !DILocation(line: 153, column: 24, scope: !4189)
!4195 = !DILocation(line: 153, column: 5, scope: !4189)
!4196 = !DILocation(line: 153, column: 22, scope: !4189)
!4197 = !DILocation(line: 154, column: 10, scope: !4184)
!4198 = !DILocation(line: 154, column: 3, scope: !4184)
!4199 = !DILocalVariable(name: "insn", arg: 1, scope: !2399, file: !508, line: 1427, type: !997)
!4200 = !DILocation(line: 1427, column: 24, scope: !2399)
!4201 = !DILocalVariable(name: "types", arg: 2, scope: !2399, file: !508, line: 1427, type: !2406)
!4202 = !DILocation(line: 1427, column: 48, scope: !2399)
!4203 = !DILocalVariable(name: "i", scope: !2399, file: !508, line: 1432, type: !2402)
!4204 = !DILocation(line: 1432, column: 19, scope: !2399)
!4205 = !DILocation(line: 1434, column: 13, scope: !2399)
!4206 = !DILocation(line: 1434, column: 5, scope: !2399)
!4207 = !DILocation(line: 1434, column: 11, scope: !2399)
!4208 = !DILocation(line: 1435, column: 12, scope: !2399)
!4209 = !DILocation(line: 1435, column: 5, scope: !2399)
!4210 = !DILocation(line: 1435, column: 10, scope: !2399)
!4211 = !DILocation(line: 1436, column: 5, scope: !2399)
!4212 = !DILocation(line: 1436, column: 11, scope: !2399)
!4213 = !DILocation(line: 1439, column: 5, scope: !2399)
!4214 = !DILocation(line: 1439, column: 16, scope: !2399)
!4215 = !DILocation(line: 1441, column: 3, scope: !2399)
!4216 = distinct !DISubprogram(name: "sd_iterator_cond", scope: !508, file: !508, line: 1446, type: !4217, scopeLine: 1447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4217 = !DISubroutineType(types: !4218)
!4218 = !{!1230, !4219, !4220}
!4219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2402, size: 64)
!4220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4096, size: 64)
!4221 = !DILocalVariable(name: "it_ptr", arg: 1, scope: !4216, file: !508, line: 1446, type: !4219)
!4222 = !DILocation(line: 1446, column: 36, scope: !4216)
!4223 = !DILocalVariable(name: "dep_ptr", arg: 2, scope: !4216, file: !508, line: 1446, type: !4220)
!4224 = !DILocation(line: 1446, column: 51, scope: !4216)
!4225 = !DILocalVariable(name: "link", scope: !4216, file: !508, line: 1448, type: !2410)
!4226 = !DILocation(line: 1448, column: 14, scope: !4216)
!4227 = !DILocation(line: 1448, column: 22, scope: !4216)
!4228 = !DILocation(line: 1448, column: 30, scope: !4216)
!4229 = !DILocation(line: 1448, column: 21, scope: !4216)
!4230 = !DILocation(line: 1450, column: 7, scope: !4231)
!4231 = distinct !DILexicalBlock(scope: !4216, file: !508, line: 1450, column: 7)
!4232 = !DILocation(line: 1450, column: 12, scope: !4231)
!4233 = !DILocation(line: 1450, column: 7, scope: !4216)
!4234 = !DILocation(line: 1452, column: 18, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4231, file: !508, line: 1451, column: 5)
!4236 = !DILocation(line: 1452, column: 8, scope: !4235)
!4237 = !DILocation(line: 1452, column: 16, scope: !4235)
!4238 = !DILocation(line: 1453, column: 7, scope: !4235)
!4239 = !DILocalVariable(name: "types", scope: !4240, file: !508, line: 1457, type: !2406)
!4240 = distinct !DILexicalBlock(scope: !4231, file: !508, line: 1456, column: 5)
!4241 = !DILocation(line: 1457, column: 25, scope: !4240)
!4242 = !DILocation(line: 1457, column: 33, scope: !4240)
!4243 = !DILocation(line: 1457, column: 41, scope: !4240)
!4244 = !DILocation(line: 1459, column: 11, scope: !4245)
!4245 = distinct !DILexicalBlock(scope: !4240, file: !508, line: 1459, column: 11)
!4246 = !DILocation(line: 1459, column: 17, scope: !4245)
!4247 = !DILocation(line: 1459, column: 11, scope: !4240)
!4248 = !DILocalVariable(name: "list", scope: !4249, file: !508, line: 1462, type: !4250)
!4249 = distinct !DILexicalBlock(scope: !4245, file: !508, line: 1461, column: 2)
!4250 = !DIDerivedType(tag: DW_TAG_typedef, name: "deps_list_t", file: !508, line: 305, baseType: !4251)
!4251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4252, size: 64)
!4252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_deps_list", file: !508, line: 297, size: 128, elements: !4253)
!4253 = !{!4254, !4255}
!4254 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !4252, file: !508, line: 300, baseType: !2410, size: 64)
!4255 = !DIDerivedType(tag: DW_TAG_member, name: "n_links", scope: !4252, file: !508, line: 303, baseType: !990, size: 32, offset: 64)
!4256 = !DILocation(line: 1462, column: 16, scope: !4249)
!4257 = !DILocation(line: 1464, column: 18, scope: !4249)
!4258 = !DILocation(line: 1464, column: 26, scope: !4249)
!4259 = !DILocation(line: 1465, column: 5, scope: !4249)
!4260 = !DILocation(line: 1465, column: 13, scope: !4249)
!4261 = !DILocation(line: 1465, column: 28, scope: !4249)
!4262 = !DILocation(line: 1465, column: 36, scope: !4249)
!4263 = !DILocation(line: 1464, column: 4, scope: !4249)
!4264 = !DILocation(line: 1467, column: 21, scope: !4249)
!4265 = !DILocation(line: 1467, column: 4, scope: !4249)
!4266 = !DILocation(line: 1467, column: 12, scope: !4249)
!4267 = !DILocation(line: 1467, column: 18, scope: !4249)
!4268 = !DILocation(line: 1469, column: 8, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4249, file: !508, line: 1469, column: 8)
!4270 = !DILocation(line: 1469, column: 8, scope: !4249)
!4271 = !DILocation(line: 1470, column: 31, scope: !4269)
!4272 = !DILocation(line: 1470, column: 39, scope: !4269)
!4273 = !DILocation(line: 1470, column: 13, scope: !4269)
!4274 = !DILocation(line: 1470, column: 6, scope: !4269)
!4275 = !DILocation(line: 1471, column: 2, scope: !4249)
!4276 = !DILocation(line: 1473, column: 8, scope: !4240)
!4277 = !DILocation(line: 1473, column: 16, scope: !4240)
!4278 = !DILocation(line: 1474, column: 7, scope: !4240)
!4279 = !DILocation(line: 1476, column: 1, scope: !4216)
!4280 = distinct !DISubprogram(name: "sd_iterator_next", scope: !508, file: !508, line: 1480, type: !4281, scopeLine: 1481, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4281 = !DISubroutineType(types: !4282)
!4282 = !{null, !4219}
!4283 = !DILocalVariable(name: "it_ptr", arg: 1, scope: !4280, file: !508, line: 1480, type: !4219)
!4284 = !DILocation(line: 1480, column: 36, scope: !4280)
!4285 = !DILocation(line: 1482, column: 20, scope: !4280)
!4286 = !DILocation(line: 1482, column: 3, scope: !4280)
!4287 = !DILocation(line: 1482, column: 11, scope: !4280)
!4288 = !DILocation(line: 1482, column: 17, scope: !4280)
!4289 = !DILocation(line: 1483, column: 1, scope: !4280)
!4290 = distinct !DISubprogram(name: "sched_is_disabled_for_current_region_p", scope: !3, file: !3, line: 2864, type: !2222, scopeLine: 2865, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4291 = !DILocalVariable(name: "bb", scope: !4290, file: !3, line: 2866, type: !990)
!4292 = !DILocation(line: 2866, column: 7, scope: !4290)
!4293 = !DILocation(line: 2868, column: 11, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4290, file: !3, line: 2868, column: 3)
!4295 = !DILocation(line: 2868, column: 8, scope: !4294)
!4296 = !DILocation(line: 2868, column: 16, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4294, file: !3, line: 2868, column: 3)
!4298 = !DILocation(line: 2868, column: 21, scope: !4297)
!4299 = !DILocation(line: 2868, column: 19, scope: !4297)
!4300 = !DILocation(line: 2868, column: 3, scope: !4294)
!4301 = !DILocation(line: 2869, column: 11, scope: !4302)
!4302 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 2869, column: 9)
!4303 = !DILocation(line: 2869, column: 43, scope: !4302)
!4304 = !DILocation(line: 2869, column: 49, scope: !4302)
!4305 = !DILocation(line: 2869, column: 9, scope: !4297)
!4306 = !DILocation(line: 2870, column: 7, scope: !4302)
!4307 = !DILocation(line: 2869, column: 70, scope: !4302)
!4308 = !DILocation(line: 2868, column: 42, scope: !4297)
!4309 = !DILocation(line: 2868, column: 3, scope: !4297)
!4310 = distinct !{!4310, !4300, !4311}
!4311 = !DILocation(line: 2870, column: 14, scope: !4294)
!4312 = !DILocation(line: 2872, column: 3, scope: !4290)
!4313 = !DILocation(line: 2873, column: 1, scope: !4290)
!4314 = distinct !DISubprogram(name: "free_rgn_deps", scope: !3, file: !3, line: 2880, type: !2319, scopeLine: 2881, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4315 = !DILocalVariable(name: "bb", scope: !4314, file: !3, line: 2882, type: !990)
!4316 = !DILocation(line: 2882, column: 7, scope: !4314)
!4317 = !DILocation(line: 2884, column: 11, scope: !4318)
!4318 = distinct !DILexicalBlock(scope: !4314, file: !3, line: 2884, column: 3)
!4319 = !DILocation(line: 2884, column: 8, scope: !4318)
!4320 = !DILocation(line: 2884, column: 16, scope: !4321)
!4321 = distinct !DILexicalBlock(scope: !4318, file: !3, line: 2884, column: 3)
!4322 = !DILocation(line: 2884, column: 21, scope: !4321)
!4323 = !DILocation(line: 2884, column: 19, scope: !4321)
!4324 = !DILocation(line: 2884, column: 3, scope: !4318)
!4325 = !DILocalVariable(name: "head", scope: !4326, file: !3, line: 2886, type: !997)
!4326 = distinct !DILexicalBlock(scope: !4321, file: !3, line: 2885, column: 5)
!4327 = !DILocation(line: 2886, column: 11, scope: !4326)
!4328 = !DILocalVariable(name: "tail", scope: !4326, file: !3, line: 2886, type: !997)
!4329 = !DILocation(line: 2886, column: 17, scope: !4326)
!4330 = !DILocation(line: 2888, column: 7, scope: !4326)
!4331 = !DILocation(line: 2889, column: 26, scope: !4326)
!4332 = !DILocation(line: 2889, column: 45, scope: !4326)
!4333 = !DILocation(line: 2889, column: 7, scope: !4326)
!4334 = !DILocation(line: 2891, column: 24, scope: !4326)
!4335 = !DILocation(line: 2891, column: 30, scope: !4326)
!4336 = !DILocation(line: 2891, column: 7, scope: !4326)
!4337 = !DILocation(line: 2892, column: 5, scope: !4326)
!4338 = !DILocation(line: 2884, column: 42, scope: !4321)
!4339 = !DILocation(line: 2884, column: 3, scope: !4321)
!4340 = distinct !{!4340, !4324, !4341}
!4341 = !DILocation(line: 2892, column: 5, scope: !4318)
!4342 = !DILocation(line: 2893, column: 1, scope: !4314)
!4343 = distinct !DISubprogram(name: "compute_priorities", scope: !3, file: !3, line: 2899, type: !2319, scopeLine: 2900, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4344 = !DILocalVariable(name: "bb", scope: !4343, file: !3, line: 2901, type: !990)
!4345 = !DILocation(line: 2901, column: 7, scope: !4343)
!4346 = !DILocation(line: 2903, column: 3, scope: !4343)
!4347 = !DILocation(line: 2903, column: 23, scope: !4343)
!4348 = !DILocation(line: 2903, column: 48, scope: !4343)
!4349 = !DILocation(line: 2904, column: 11, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4343, file: !3, line: 2904, column: 3)
!4351 = !DILocation(line: 2904, column: 8, scope: !4350)
!4352 = !DILocation(line: 2904, column: 16, scope: !4353)
!4353 = distinct !DILexicalBlock(scope: !4350, file: !3, line: 2904, column: 3)
!4354 = !DILocation(line: 2904, column: 21, scope: !4353)
!4355 = !DILocation(line: 2904, column: 19, scope: !4353)
!4356 = !DILocation(line: 2904, column: 3, scope: !4350)
!4357 = !DILocalVariable(name: "head", scope: !4358, file: !3, line: 2906, type: !997)
!4358 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 2905, column: 5)
!4359 = !DILocation(line: 2906, column: 11, scope: !4358)
!4360 = !DILocalVariable(name: "tail", scope: !4358, file: !3, line: 2906, type: !997)
!4361 = !DILocation(line: 2906, column: 17, scope: !4358)
!4362 = !DILocation(line: 2908, column: 7, scope: !4358)
!4363 = !DILocation(line: 2909, column: 26, scope: !4358)
!4364 = !DILocation(line: 2909, column: 45, scope: !4358)
!4365 = !DILocation(line: 2909, column: 7, scope: !4358)
!4366 = !DILocation(line: 2911, column: 28, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4358, file: !3, line: 2911, column: 11)
!4368 = !DILocation(line: 2911, column: 34, scope: !4367)
!4369 = !DILocation(line: 2911, column: 11, scope: !4367)
!4370 = !DILocation(line: 2911, column: 11, scope: !4358)
!4371 = !DILocation(line: 2912, column: 2, scope: !4367)
!4372 = !DILocation(line: 2914, column: 38, scope: !4358)
!4373 = !DILocation(line: 2914, column: 44, scope: !4358)
!4374 = !DILocation(line: 2914, column: 22, scope: !4358)
!4375 = !DILocation(line: 2914, column: 19, scope: !4358)
!4376 = !DILocation(line: 2915, column: 5, scope: !4358)
!4377 = !DILocation(line: 2904, column: 42, scope: !4353)
!4378 = !DILocation(line: 2904, column: 3, scope: !4353)
!4379 = distinct !{!4379, !4356, !4380}
!4380 = !DILocation(line: 2915, column: 5, scope: !4350)
!4381 = !DILocation(line: 2916, column: 3, scope: !4343)
!4382 = !DILocation(line: 2916, column: 23, scope: !4343)
!4383 = !DILocation(line: 2916, column: 47, scope: !4343)
!4384 = !DILocation(line: 2917, column: 1, scope: !4343)
!4385 = distinct !DISubprogram(name: "sched_rgn_init", scope: !3, file: !3, line: 3034, type: !4386, scopeLine: 3035, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4386 = !DISubroutineType(types: !4387)
!4387 = !{null, !1230}
!4388 = !DILocalVariable(name: "single_blocks_p", arg: 1, scope: !4385, file: !3, line: 3034, type: !1230)
!4389 = !DILocation(line: 3034, column: 22, scope: !4385)
!4390 = !DILocation(line: 3036, column: 21, scope: !4385)
!4391 = !DILocation(line: 3036, column: 55, scope: !4385)
!4392 = !DILocation(line: 3037, column: 7, scope: !4385)
!4393 = !DILocation(line: 3036, column: 17, scope: !4385)
!4394 = !DILocation(line: 3039, column: 12, scope: !4385)
!4395 = !DILocation(line: 3040, column: 11, scope: !4385)
!4396 = !DILocation(line: 3042, column: 3, scope: !4385)
!4397 = !DILocation(line: 3044, column: 3, scope: !4385)
!4398 = !DILocation(line: 3044, column: 32, scope: !4385)
!4399 = !DILocation(line: 3045, column: 3, scope: !4385)
!4400 = !DILocation(line: 3045, column: 31, scope: !4385)
!4401 = !DILocation(line: 3048, column: 7, scope: !4402)
!4402 = distinct !DILexicalBlock(scope: !4385, file: !3, line: 3048, column: 7)
!4403 = !DILocation(line: 3049, column: 7, scope: !4402)
!4404 = !DILocation(line: 3049, column: 10, scope: !4402)
!4405 = !DILocation(line: 3049, column: 25, scope: !4402)
!4406 = !DILocation(line: 3050, column: 7, scope: !4402)
!4407 = !DILocation(line: 3050, column: 11, scope: !4402)
!4408 = !DILocation(line: 3051, column: 7, scope: !4402)
!4409 = !DILocation(line: 3051, column: 10, scope: !4402)
!4410 = !DILocation(line: 3048, column: 7, scope: !4385)
!4411 = !DILocation(line: 3053, column: 33, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4402, file: !3, line: 3052, column: 5)
!4413 = !DILocation(line: 3053, column: 7, scope: !4412)
!4414 = !DILocation(line: 3054, column: 5, scope: !4412)
!4415 = !DILocation(line: 3058, column: 12, scope: !4416)
!4416 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 3058, column: 11)
!4417 = distinct !DILexicalBlock(scope: !4402, file: !3, line: 3056, column: 5)
!4418 = !DILocation(line: 3058, column: 11, scope: !4417)
!4419 = !DILocation(line: 3059, column: 2, scope: !4416)
!4420 = !DILocation(line: 3062, column: 7, scope: !4417)
!4421 = !DILocation(line: 3064, column: 11, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 3064, column: 11)
!4423 = !DILocation(line: 3064, column: 25, scope: !4422)
!4424 = !DILocation(line: 3064, column: 11, scope: !4417)
!4425 = !DILocation(line: 3065, column: 2, scope: !4422)
!4426 = !DILocation(line: 3069, column: 12, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 3069, column: 11)
!4428 = !DILocation(line: 3069, column: 11, scope: !4417)
!4429 = !DILocation(line: 3070, column: 2, scope: !4427)
!4430 = !DILocation(line: 3073, column: 3, scope: !4385)
!4431 = !DILocation(line: 3075, column: 30, scope: !4385)
!4432 = !DILocation(line: 3076, column: 9, scope: !4385)
!4433 = !DILocation(line: 3075, column: 58, scope: !4385)
!4434 = !DILocation(line: 3075, column: 3, scope: !4385)
!4435 = !DILocation(line: 3075, column: 27, scope: !4385)
!4436 = !DILocation(line: 3077, column: 1, scope: !4385)
!4437 = distinct !DISubprogram(name: "extend_regions", scope: !3, file: !3, line: 3351, type: !2319, scopeLine: 3352, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4438 = !DILocation(line: 3353, column: 15, scope: !4437)
!4439 = !DILocation(line: 3353, column: 13, scope: !4437)
!4440 = !DILocation(line: 3354, column: 18, scope: !4437)
!4441 = !DILocation(line: 3354, column: 16, scope: !4437)
!4442 = !DILocation(line: 3355, column: 17, scope: !4437)
!4443 = !DILocation(line: 3355, column: 15, scope: !4437)
!4444 = !DILocation(line: 3356, column: 20, scope: !4437)
!4445 = !DILocation(line: 3356, column: 18, scope: !4437)
!4446 = !DILocation(line: 3357, column: 1, scope: !4437)
!4447 = distinct !DISubprogram(name: "is_cfg_nonregular", scope: !3, file: !3, line: 252, type: !2350, scopeLine: 253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4448 = !DILocalVariable(name: "b", scope: !4447, file: !3, line: 254, type: !1536)
!4449 = !DILocation(line: 254, column: 15, scope: !4447)
!4450 = !DILocalVariable(name: "insn", scope: !4447, file: !3, line: 255, type: !997)
!4451 = !DILocation(line: 255, column: 7, scope: !4447)
!4452 = !DILocation(line: 259, column: 7, scope: !4453)
!4453 = distinct !DILexicalBlock(scope: !4447, file: !3, line: 259, column: 7)
!4454 = !DILocation(line: 259, column: 7, scope: !4447)
!4455 = !DILocation(line: 260, column: 5, scope: !4453)
!4456 = !DILocation(line: 263, column: 7, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !4447, file: !3, line: 263, column: 7)
!4458 = !DILocation(line: 263, column: 7, scope: !4447)
!4459 = !DILocation(line: 264, column: 5, scope: !4457)
!4460 = !DILocation(line: 269, column: 7, scope: !4461)
!4461 = distinct !DILexicalBlock(scope: !4447, file: !3, line: 269, column: 7)
!4462 = !DILocation(line: 269, column: 7, scope: !4447)
!4463 = !DILocation(line: 270, column: 5, scope: !4461)
!4464 = !DILocation(line: 274, column: 3, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4447, file: !3, line: 274, column: 3)
!4466 = !DILocation(line: 274, column: 3, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4465, file: !3, line: 274, column: 3)
!4468 = !DILocation(line: 275, column: 5, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4467, file: !3, line: 275, column: 5)
!4470 = !DILocation(line: 275, column: 5, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 275, column: 5)
!4472 = !DILocation(line: 0, scope: !4471)
!4473 = !DILocalVariable(name: "note", scope: !4474, file: !3, line: 277, type: !997)
!4474 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 276, column: 7)
!4475 = !DILocation(line: 277, column: 6, scope: !4474)
!4476 = !DILocalVariable(name: "next", scope: !4474, file: !3, line: 277, type: !997)
!4477 = !DILocation(line: 277, column: 12, scope: !4474)
!4478 = !DILocalVariable(name: "set", scope: !4474, file: !3, line: 277, type: !997)
!4479 = !DILocation(line: 277, column: 18, scope: !4474)
!4480 = !DILocalVariable(name: "dest", scope: !4474, file: !3, line: 277, type: !997)
!4481 = !DILocation(line: 277, column: 23, scope: !4474)
!4482 = !DILocation(line: 281, column: 6, scope: !4483)
!4483 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 281, column: 6)
!4484 = !DILocation(line: 281, column: 20, scope: !4483)
!4485 = !DILocation(line: 281, column: 40, scope: !4483)
!4486 = !DILocation(line: 281, column: 23, scope: !4483)
!4487 = !DILocation(line: 281, column: 6, scope: !4474)
!4488 = !DILocation(line: 282, column: 4, scope: !4483)
!4489 = !DILocation(line: 284, column: 7, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 284, column: 6)
!4491 = !DILocation(line: 284, column: 6, scope: !4474)
!4492 = !DILocation(line: 285, column: 4, scope: !4490)
!4493 = !DILocation(line: 287, column: 24, scope: !4474)
!4494 = !DILocation(line: 287, column: 9, scope: !4474)
!4495 = !DILocation(line: 287, column: 7, scope: !4474)
!4496 = !DILocation(line: 288, column: 6, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 288, column: 6)
!4498 = !DILocation(line: 288, column: 11, scope: !4497)
!4499 = !DILocation(line: 288, column: 6, scope: !4474)
!4500 = !DILocation(line: 289, column: 4, scope: !4497)
!4501 = !DILocation(line: 295, column: 28, scope: !4474)
!4502 = !DILocation(line: 295, column: 9, scope: !4474)
!4503 = !DILocation(line: 295, column: 7, scope: !4474)
!4504 = !DILocation(line: 296, column: 6, scope: !4505)
!4505 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 296, column: 6)
!4506 = !DILocation(line: 296, column: 11, scope: !4505)
!4507 = !DILocation(line: 297, column: 6, scope: !4505)
!4508 = !DILocation(line: 297, column: 10, scope: !4505)
!4509 = !DILocation(line: 298, column: 6, scope: !4505)
!4510 = !DILocation(line: 298, column: 10, scope: !4505)
!4511 = !DILocation(line: 298, column: 31, scope: !4505)
!4512 = !DILocation(line: 298, column: 28, scope: !4505)
!4513 = !DILocation(line: 299, column: 3, scope: !4505)
!4514 = !DILocation(line: 299, column: 21, scope: !4505)
!4515 = !DILocation(line: 300, column: 7, scope: !4505)
!4516 = !DILocation(line: 299, column: 6, scope: !4505)
!4517 = !DILocation(line: 300, column: 23, scope: !4505)
!4518 = !DILocation(line: 301, column: 6, scope: !4505)
!4519 = !DILocation(line: 301, column: 9, scope: !4505)
!4520 = !DILocation(line: 301, column: 34, scope: !4505)
!4521 = !DILocation(line: 301, column: 31, scope: !4505)
!4522 = !DILocation(line: 296, column: 6, scope: !4474)
!4523 = !DILocation(line: 302, column: 4, scope: !4505)
!4524 = !DILocation(line: 304, column: 8, scope: !4474)
!4525 = !DILocation(line: 304, column: 6, scope: !4474)
!4526 = !DILocation(line: 305, column: 6, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 305, column: 6)
!4528 = !DILocation(line: 305, column: 10, scope: !4527)
!4529 = !DILocation(line: 305, column: 6, scope: !4474)
!4530 = !DILocation(line: 306, column: 4, scope: !4527)
!4531 = !DILocation(line: 308, column: 9, scope: !4474)
!4532 = !DILocation(line: 308, column: 7, scope: !4474)
!4533 = !DILocation(line: 309, column: 7, scope: !4534)
!4534 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 309, column: 6)
!4535 = !DILocation(line: 309, column: 20, scope: !4534)
!4536 = !DILocation(line: 309, column: 39, scope: !4534)
!4537 = !DILocation(line: 309, column: 45, scope: !4534)
!4538 = !DILocation(line: 309, column: 24, scope: !4534)
!4539 = !DILocation(line: 309, column: 6, scope: !4474)
!4540 = !DILocation(line: 310, column: 4, scope: !4534)
!4541 = !DILocation(line: 311, column: 7, scope: !4474)
!4542 = distinct !{!4542, !4468, !4543}
!4543 = !DILocation(line: 311, column: 7, scope: !4469)
!4544 = distinct !{!4544, !4464, !4545}
!4545 = !DILocation(line: 311, column: 7, scope: !4465)
!4546 = !DILocation(line: 319, column: 3, scope: !4547)
!4547 = distinct !DILexicalBlock(scope: !4447, file: !3, line: 319, column: 3)
!4548 = !DILocation(line: 319, column: 3, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4547, file: !3, line: 319, column: 3)
!4550 = !DILocation(line: 321, column: 11, scope: !4551)
!4551 = distinct !DILexicalBlock(scope: !4552, file: !3, line: 321, column: 11)
!4552 = distinct !DILexicalBlock(scope: !4549, file: !3, line: 320, column: 5)
!4553 = !DILocation(line: 321, column: 33, scope: !4551)
!4554 = !DILocation(line: 322, column: 4, scope: !4551)
!4555 = !DILocation(line: 322, column: 23, scope: !4551)
!4556 = !DILocation(line: 322, column: 8, scope: !4551)
!4557 = !DILocation(line: 323, column: 8, scope: !4551)
!4558 = !DILocation(line: 323, column: 24, scope: !4551)
!4559 = !DILocation(line: 323, column: 11, scope: !4551)
!4560 = !DILocation(line: 323, column: 30, scope: !4551)
!4561 = !DILocation(line: 323, column: 27, scope: !4551)
!4562 = !DILocation(line: 321, column: 11, scope: !4552)
!4563 = !DILocation(line: 324, column: 2, scope: !4551)
!4564 = !DILocation(line: 325, column: 5, scope: !4552)
!4565 = distinct !{!4565, !4546, !4566}
!4566 = !DILocation(line: 325, column: 5, scope: !4547)
!4567 = !DILocation(line: 328, column: 3, scope: !4447)
!4568 = !DILocation(line: 329, column: 1, scope: !4447)
!4569 = distinct !DISubprogram(name: "find_single_block_region", scope: !3, file: !3, line: 464, type: !4386, scopeLine: 465, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4570 = !DILocalVariable(name: "ebbs_p", arg: 1, scope: !4569, file: !3, line: 464, type: !1230)
!4571 = !DILocation(line: 464, column: 32, scope: !4569)
!4572 = !DILocalVariable(name: "bb", scope: !4569, file: !3, line: 466, type: !1536)
!4573 = !DILocation(line: 466, column: 15, scope: !4569)
!4574 = !DILocalVariable(name: "ebb_start", scope: !4569, file: !3, line: 466, type: !1536)
!4575 = !DILocation(line: 466, column: 19, scope: !4569)
!4576 = !DILocalVariable(name: "i", scope: !4569, file: !3, line: 467, type: !990)
!4577 = !DILocation(line: 467, column: 7, scope: !4569)
!4578 = !DILocation(line: 469, column: 14, scope: !4569)
!4579 = !DILocation(line: 471, column: 7, scope: !4580)
!4580 = distinct !DILexicalBlock(scope: !4569, file: !3, line: 471, column: 7)
!4581 = !DILocation(line: 471, column: 7, scope: !4569)
!4582 = !DILocalVariable(name: "probability_cutoff", scope: !4583, file: !3, line: 472, type: !990)
!4583 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 471, column: 15)
!4584 = !DILocation(line: 472, column: 9, scope: !4583)
!4585 = !DILocation(line: 473, column: 9, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 473, column: 9)
!4587 = !DILocation(line: 473, column: 22, scope: !4586)
!4588 = !DILocation(line: 473, column: 25, scope: !4586)
!4589 = !DILocation(line: 473, column: 9, scope: !4583)
!4590 = !DILocation(line: 474, column: 28, scope: !4586)
!4591 = !DILocation(line: 474, column: 26, scope: !4586)
!4592 = !DILocation(line: 474, column: 7, scope: !4586)
!4593 = !DILocation(line: 476, column: 28, scope: !4586)
!4594 = !DILocation(line: 476, column: 26, scope: !4586)
!4595 = !DILocation(line: 477, column: 51, scope: !4583)
!4596 = !DILocation(line: 477, column: 49, scope: !4583)
!4597 = !DILocation(line: 477, column: 24, scope: !4583)
!4598 = !DILocation(line: 479, column: 5, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 479, column: 5)
!4600 = !DILocation(line: 479, column: 5, scope: !4601)
!4601 = distinct !DILexicalBlock(scope: !4599, file: !3, line: 479, column: 5)
!4602 = !DILocation(line: 481, column: 9, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4601, file: !3, line: 480, column: 7)
!4604 = !DILocation(line: 481, column: 36, scope: !4603)
!4605 = !DILocation(line: 482, column: 35, scope: !4603)
!4606 = !DILocation(line: 482, column: 9, scope: !4603)
!4607 = !DILocation(line: 482, column: 33, scope: !4603)
!4608 = !DILocation(line: 483, column: 9, scope: !4603)
!4609 = !DILocation(line: 483, column: 41, scope: !4603)
!4610 = !DILocation(line: 484, column: 9, scope: !4603)
!4611 = !DILocation(line: 484, column: 39, scope: !4603)
!4612 = !DILocation(line: 486, column: 19, scope: !4613)
!4613 = distinct !DILexicalBlock(scope: !4603, file: !3, line: 486, column: 9)
!4614 = !DILocation(line: 486, column: 17, scope: !4613)
!4615 = !DILocation(line: 486, column: 14, scope: !4613)
!4616 = !DILocalVariable(name: "e", scope: !4617, file: !3, line: 488, type: !1553)
!4617 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 487, column: 11)
!4618 = distinct !DILexicalBlock(scope: !4613, file: !3, line: 486, column: 9)
!4619 = !DILocation(line: 488, column: 18, scope: !4617)
!4620 = !DILocalVariable(name: "ei", scope: !4617, file: !3, line: 489, type: !2177)
!4621 = !DILocation(line: 489, column: 27, scope: !4617)
!4622 = !DILocation(line: 491, column: 31, scope: !4617)
!4623 = !DILocation(line: 491, column: 35, scope: !4617)
!4624 = !DILocation(line: 491, column: 13, scope: !4617)
!4625 = !DILocation(line: 491, column: 26, scope: !4617)
!4626 = !DILocation(line: 491, column: 29, scope: !4617)
!4627 = !DILocation(line: 492, column: 13, scope: !4617)
!4628 = !DILocation(line: 492, column: 39, scope: !4617)
!4629 = !DILocation(line: 493, column: 42, scope: !4617)
!4630 = !DILocation(line: 493, column: 13, scope: !4617)
!4631 = !DILocation(line: 493, column: 40, scope: !4617)
!4632 = !DILocation(line: 494, column: 39, scope: !4617)
!4633 = !DILocation(line: 494, column: 43, scope: !4617)
!4634 = !DILocation(line: 494, column: 41, scope: !4617)
!4635 = !DILocation(line: 494, column: 13, scope: !4617)
!4636 = !DILocation(line: 494, column: 37, scope: !4617)
!4637 = !DILocation(line: 495, column: 14, scope: !4617)
!4638 = !DILocation(line: 497, column: 17, scope: !4639)
!4639 = distinct !DILexicalBlock(scope: !4617, file: !3, line: 497, column: 17)
!4640 = !DILocation(line: 497, column: 21, scope: !4639)
!4641 = !DILocation(line: 497, column: 32, scope: !4639)
!4642 = !DILocation(line: 497, column: 29, scope: !4639)
!4643 = !DILocation(line: 498, column: 17, scope: !4639)
!4644 = !DILocation(line: 498, column: 20, scope: !4639)
!4645 = !DILocation(line: 497, column: 17, scope: !4617)
!4646 = !DILocation(line: 499, column: 15, scope: !4639)
!4647 = !DILocation(line: 501, column: 13, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4617, file: !3, line: 501, column: 13)
!4649 = !DILocation(line: 501, column: 13, scope: !4650)
!4650 = distinct !DILexicalBlock(scope: !4648, file: !3, line: 501, column: 13)
!4651 = !DILocation(line: 502, column: 19, scope: !4652)
!4652 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 502, column: 18)
!4653 = !DILocation(line: 502, column: 22, scope: !4652)
!4654 = !DILocation(line: 502, column: 28, scope: !4652)
!4655 = !DILocation(line: 502, column: 45, scope: !4652)
!4656 = !DILocation(line: 502, column: 18, scope: !4650)
!4657 = !DILocation(line: 503, column: 16, scope: !4652)
!4658 = !DILocation(line: 502, column: 48, scope: !4652)
!4659 = distinct !{!4659, !4647, !4660}
!4660 = !DILocation(line: 503, column: 16, scope: !4648)
!4661 = !DILocation(line: 504, column: 19, scope: !4662)
!4662 = distinct !DILexicalBlock(scope: !4617, file: !3, line: 504, column: 17)
!4663 = !DILocation(line: 504, column: 17, scope: !4617)
!4664 = !DILocation(line: 505, column: 15, scope: !4662)
!4665 = !DILocation(line: 506, column: 17, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4617, file: !3, line: 506, column: 17)
!4667 = !DILocation(line: 506, column: 20, scope: !4666)
!4668 = !DILocation(line: 506, column: 35, scope: !4666)
!4669 = !DILocation(line: 506, column: 32, scope: !4666)
!4670 = !DILocation(line: 506, column: 17, scope: !4617)
!4671 = !DILocation(line: 507, column: 15, scope: !4666)
!4672 = !DILocation(line: 508, column: 11, scope: !4617)
!4673 = !DILocation(line: 486, column: 37, scope: !4618)
!4674 = !DILocation(line: 486, column: 41, scope: !4618)
!4675 = !DILocation(line: 486, column: 35, scope: !4618)
!4676 = !DILocation(line: 486, column: 9, scope: !4618)
!4677 = distinct !{!4677, !4678, !4679}
!4678 = !DILocation(line: 486, column: 9, scope: !4613)
!4679 = !DILocation(line: 508, column: 11, scope: !4613)
!4680 = !DILocation(line: 510, column: 21, scope: !4603)
!4681 = !DILocation(line: 510, column: 19, scope: !4603)
!4682 = !DILocation(line: 511, column: 19, scope: !4603)
!4683 = !DILocation(line: 512, column: 7, scope: !4603)
!4684 = distinct !{!4684, !4598, !4685}
!4685 = !DILocation(line: 512, column: 7, scope: !4599)
!4686 = !DILocation(line: 513, column: 3, scope: !4583)
!4687 = !DILocation(line: 515, column: 5, scope: !4688)
!4688 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 515, column: 5)
!4689 = !DILocation(line: 515, column: 5, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4688, file: !3, line: 515, column: 5)
!4691 = !DILocation(line: 517, column: 36, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4690, file: !3, line: 516, column: 7)
!4693 = !DILocation(line: 517, column: 40, scope: !4692)
!4694 = !DILocation(line: 517, column: 9, scope: !4692)
!4695 = !DILocation(line: 517, column: 22, scope: !4692)
!4696 = !DILocation(line: 517, column: 34, scope: !4692)
!4697 = !DILocation(line: 518, column: 9, scope: !4692)
!4698 = !DILocation(line: 518, column: 36, scope: !4692)
!4699 = !DILocation(line: 519, column: 35, scope: !4692)
!4700 = !DILocation(line: 519, column: 9, scope: !4692)
!4701 = !DILocation(line: 519, column: 33, scope: !4692)
!4702 = !DILocation(line: 520, column: 9, scope: !4692)
!4703 = !DILocation(line: 520, column: 41, scope: !4692)
!4704 = !DILocation(line: 521, column: 9, scope: !4692)
!4705 = !DILocation(line: 521, column: 39, scope: !4692)
!4706 = !DILocation(line: 523, column: 38, scope: !4692)
!4707 = !DILocation(line: 523, column: 9, scope: !4692)
!4708 = !DILocation(line: 523, column: 36, scope: !4692)
!4709 = !DILocation(line: 524, column: 9, scope: !4692)
!4710 = !DILocation(line: 524, column: 33, scope: !4692)
!4711 = !DILocation(line: 525, column: 19, scope: !4692)
!4712 = !DILocation(line: 526, column: 7, scope: !4692)
!4713 = distinct !{!4713, !4687, !4714}
!4714 = !DILocation(line: 526, column: 7, scope: !4688)
!4715 = !DILocation(line: 527, column: 1, scope: !4569)
!4716 = distinct !DISubprogram(name: "find_rgns", scope: !3, file: !3, line: 1076, type: !2319, scopeLine: 1077, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4717 = !DILocation(line: 1078, column: 7, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4716, file: !3, line: 1078, column: 7)
!4719 = !DILocation(line: 1078, column: 22, scope: !4718)
!4720 = !DILocation(line: 1078, column: 25, scope: !4718)
!4721 = !DILocation(line: 1078, column: 7, scope: !4716)
!4722 = !DILocation(line: 1079, column: 5, scope: !4718)
!4723 = !DILocation(line: 1081, column: 5, scope: !4718)
!4724 = !DILocation(line: 1082, column: 1, scope: !4716)
!4725 = distinct !DISubprogram(name: "sched_rgn_finish", scope: !3, file: !3, line: 3081, type: !2319, scopeLine: 3082, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4726 = !DILocation(line: 3085, column: 7, scope: !4727)
!4727 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 3085, column: 7)
!4728 = !DILocation(line: 3085, column: 7, scope: !4725)
!4729 = !DILocation(line: 3086, column: 5, scope: !4727)
!4730 = !DILocation(line: 3088, column: 7, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 3088, column: 7)
!4732 = !DILocation(line: 3088, column: 7, scope: !4725)
!4733 = !DILocation(line: 3090, column: 11, scope: !4734)
!4734 = distinct !DILexicalBlock(scope: !4735, file: !3, line: 3090, column: 11)
!4735 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 3089, column: 5)
!4736 = !DILocation(line: 3090, column: 28, scope: !4734)
!4737 = !DILocation(line: 3091, column: 4, scope: !4734)
!4738 = !DILocation(line: 3091, column: 7, scope: !4734)
!4739 = !DILocation(line: 3090, column: 11, scope: !4735)
!4740 = !DILocation(line: 3093, column: 13, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 3092, column: 2)
!4742 = !DILocation(line: 3095, column: 6, scope: !4741)
!4743 = !DILocation(line: 3095, column: 16, scope: !4741)
!4744 = !DILocation(line: 3093, column: 4, scope: !4741)
!4745 = !DILocation(line: 3096, column: 2, scope: !4741)
!4746 = !DILocation(line: 3098, column: 2, scope: !4734)
!4747 = !DILocation(line: 3099, column: 16, scope: !4735)
!4748 = !DILocation(line: 3099, column: 7, scope: !4735)
!4749 = !DILocation(line: 3100, column: 5, scope: !4735)
!4750 = !DILocation(line: 3102, column: 14, scope: !4725)
!4751 = !DILocation(line: 3104, column: 9, scope: !4725)
!4752 = !DILocation(line: 3104, column: 3, scope: !4725)
!4753 = !DILocation(line: 3105, column: 13, scope: !4725)
!4754 = !DILocation(line: 3107, column: 9, scope: !4725)
!4755 = !DILocation(line: 3107, column: 3, scope: !4725)
!4756 = !DILocation(line: 3108, column: 16, scope: !4725)
!4757 = !DILocation(line: 3110, column: 9, scope: !4725)
!4758 = !DILocation(line: 3110, column: 3, scope: !4725)
!4759 = !DILocation(line: 3111, column: 15, scope: !4725)
!4760 = !DILocation(line: 3113, column: 9, scope: !4725)
!4761 = !DILocation(line: 3113, column: 3, scope: !4725)
!4762 = !DILocation(line: 3114, column: 18, scope: !4725)
!4763 = !DILocation(line: 3116, column: 9, scope: !4725)
!4764 = !DILocation(line: 3116, column: 3, scope: !4725)
!4765 = !DILocation(line: 3117, column: 12, scope: !4725)
!4766 = !DILocation(line: 3118, column: 1, scope: !4725)
!4767 = distinct !DISubprogram(name: "rgn_setup_region", scope: !3, file: !3, line: 3123, type: !2327, scopeLine: 3124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4768 = !DILocalVariable(name: "rgn", arg: 1, scope: !4767, file: !3, line: 3123, type: !990)
!4769 = !DILocation(line: 3123, column: 23, scope: !4767)
!4770 = !DILocalVariable(name: "bb", scope: !4767, file: !3, line: 3125, type: !990)
!4771 = !DILocation(line: 3125, column: 7, scope: !4767)
!4772 = !DILocation(line: 3128, column: 23, scope: !4767)
!4773 = !DILocation(line: 3128, column: 21, scope: !4767)
!4774 = !DILocation(line: 3129, column: 20, scope: !4767)
!4775 = !DILocation(line: 3129, column: 18, scope: !4767)
!4776 = !DILocation(line: 3134, column: 14, scope: !4767)
!4777 = !DILocation(line: 3134, column: 12, scope: !4767)
!4778 = !DILocation(line: 3135, column: 11, scope: !4779)
!4779 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 3135, column: 3)
!4780 = !DILocation(line: 3135, column: 8, scope: !4779)
!4781 = !DILocation(line: 3135, column: 16, scope: !4782)
!4782 = distinct !DILexicalBlock(scope: !4779, file: !3, line: 3135, column: 3)
!4783 = !DILocation(line: 3135, column: 22, scope: !4782)
!4784 = !DILocation(line: 3135, column: 19, scope: !4782)
!4785 = !DILocation(line: 3135, column: 3, scope: !4779)
!4786 = !DILocation(line: 3136, column: 20, scope: !4782)
!4787 = !DILocation(line: 3136, column: 37, scope: !4782)
!4788 = !DILocation(line: 3136, column: 35, scope: !4782)
!4789 = !DILocation(line: 3136, column: 5, scope: !4782)
!4790 = !DILocation(line: 3136, column: 14, scope: !4782)
!4791 = !DILocation(line: 3136, column: 18, scope: !4782)
!4792 = !DILocation(line: 3135, column: 43, scope: !4782)
!4793 = !DILocation(line: 3135, column: 3, scope: !4782)
!4794 = distinct !{!4794, !4785, !4795}
!4795 = !DILocation(line: 3136, column: 37, scope: !4779)
!4796 = !DILocation(line: 3137, column: 1, scope: !4767)
!4797 = distinct !DISubprogram(name: "sched_rgn_compute_dependencies", scope: !3, file: !3, line: 3141, type: !2327, scopeLine: 3142, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4798 = !DILocalVariable(name: "rgn", arg: 1, scope: !4797, file: !3, line: 3141, type: !990)
!4799 = !DILocation(line: 3141, column: 37, scope: !4797)
!4800 = !DILocation(line: 3143, column: 8, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4797, file: !3, line: 3143, column: 7)
!4802 = !DILocation(line: 3143, column: 7, scope: !4797)
!4803 = !DILocalVariable(name: "bb", scope: !4804, file: !3, line: 3145, type: !990)
!4804 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 3144, column: 5)
!4805 = !DILocation(line: 3145, column: 11, scope: !4804)
!4806 = !DILocation(line: 3147, column: 11, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4804, file: !3, line: 3147, column: 11)
!4808 = !DILocation(line: 3147, column: 11, scope: !4804)
!4809 = !DILocation(line: 3148, column: 24, scope: !4807)
!4810 = !DILocation(line: 3148, column: 2, scope: !4807)
!4811 = !DILocation(line: 3150, column: 7, scope: !4804)
!4812 = !DILocation(line: 3153, column: 17, scope: !4804)
!4813 = !DILocation(line: 3153, column: 15, scope: !4804)
!4814 = !DILocation(line: 3154, column: 15, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4804, file: !3, line: 3154, column: 7)
!4816 = !DILocation(line: 3154, column: 12, scope: !4815)
!4817 = !DILocation(line: 3154, column: 20, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4815, file: !3, line: 3154, column: 7)
!4819 = !DILocation(line: 3154, column: 25, scope: !4818)
!4820 = !DILocation(line: 3154, column: 23, scope: !4818)
!4821 = !DILocation(line: 3154, column: 7, scope: !4815)
!4822 = !DILocation(line: 3155, column: 13, scope: !4818)
!4823 = !DILocation(line: 3155, column: 23, scope: !4818)
!4824 = !DILocation(line: 3155, column: 21, scope: !4818)
!4825 = !DILocation(line: 3155, column: 2, scope: !4818)
!4826 = !DILocation(line: 3154, column: 46, scope: !4818)
!4827 = !DILocation(line: 3154, column: 7, scope: !4818)
!4828 = distinct !{!4828, !4821, !4829}
!4829 = !DILocation(line: 3155, column: 32, scope: !4815)
!4830 = !DILocation(line: 3158, column: 40, scope: !4804)
!4831 = !DILocation(line: 3158, column: 25, scope: !4804)
!4832 = !DILocation(line: 3158, column: 23, scope: !4804)
!4833 = !DILocation(line: 3159, column: 21, scope: !4804)
!4834 = !DILocation(line: 3159, column: 7, scope: !4804)
!4835 = !DILocation(line: 3162, column: 15, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4804, file: !3, line: 3162, column: 7)
!4837 = !DILocation(line: 3162, column: 12, scope: !4836)
!4838 = !DILocation(line: 3162, column: 20, scope: !4839)
!4839 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 3162, column: 7)
!4840 = !DILocation(line: 3162, column: 25, scope: !4839)
!4841 = !DILocation(line: 3162, column: 23, scope: !4839)
!4842 = !DILocation(line: 3162, column: 7, scope: !4836)
!4843 = !DILocation(line: 3163, column: 29, scope: !4839)
!4844 = !DILocation(line: 3163, column: 2, scope: !4839)
!4845 = !DILocation(line: 3162, column: 46, scope: !4839)
!4846 = !DILocation(line: 3162, column: 7, scope: !4839)
!4847 = distinct !{!4847, !4842, !4848}
!4848 = !DILocation(line: 3163, column: 31, scope: !4836)
!4849 = !DILocation(line: 3165, column: 7, scope: !4804)
!4850 = !DILocation(line: 3166, column: 7, scope: !4804)
!4851 = !DILocation(line: 3167, column: 7, scope: !4804)
!4852 = !DILocation(line: 3168, column: 13, scope: !4804)
!4853 = !DILocation(line: 3168, column: 7, scope: !4804)
!4854 = !DILocation(line: 3171, column: 7, scope: !4804)
!4855 = !DILocation(line: 3171, column: 32, scope: !4804)
!4856 = !DILocation(line: 3173, column: 11, scope: !4857)
!4857 = distinct !DILexicalBlock(scope: !4804, file: !3, line: 3173, column: 11)
!4858 = !DILocation(line: 3173, column: 11, scope: !4804)
!4859 = !DILocation(line: 3174, column: 24, scope: !4857)
!4860 = !DILocation(line: 3174, column: 2, scope: !4857)
!4861 = !DILocation(line: 3175, column: 5, scope: !4804)
!4862 = !DILocation(line: 3179, column: 5, scope: !4801)
!4863 = !DILocation(line: 3180, column: 1, scope: !4797)
!4864 = distinct !DISubprogram(name: "compute_block_dependences", scope: !3, file: !3, line: 2715, type: !2327, scopeLine: 2716, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4865 = !DILocalVariable(name: "bb", arg: 1, scope: !4864, file: !3, line: 2715, type: !990)
!4866 = !DILocation(line: 2715, column: 32, scope: !4864)
!4867 = !DILocalVariable(name: "head", scope: !4864, file: !3, line: 2717, type: !997)
!4868 = !DILocation(line: 2717, column: 7, scope: !4864)
!4869 = !DILocalVariable(name: "tail", scope: !4864, file: !3, line: 2717, type: !997)
!4870 = !DILocation(line: 2717, column: 13, scope: !4864)
!4871 = !DILocalVariable(name: "tmp_deps", scope: !4864, file: !3, line: 2718, type: !994)
!4872 = !DILocation(line: 2718, column: 15, scope: !4864)
!4873 = !DILocation(line: 2720, column: 14, scope: !4864)
!4874 = !DILocation(line: 2720, column: 22, scope: !4864)
!4875 = !DILocation(line: 2723, column: 3, scope: !4864)
!4876 = !DILocation(line: 2724, column: 22, scope: !4864)
!4877 = !DILocation(line: 2724, column: 41, scope: !4864)
!4878 = !DILocation(line: 2724, column: 3, scope: !4864)
!4879 = !DILocation(line: 2726, column: 29, scope: !4864)
!4880 = !DILocation(line: 2726, column: 35, scope: !4864)
!4881 = !DILocation(line: 2726, column: 3, scope: !4864)
!4882 = !DILocation(line: 2729, column: 8, scope: !4883)
!4883 = distinct !DILexicalBlock(scope: !4864, file: !3, line: 2729, column: 7)
!4884 = !DILocation(line: 2729, column: 7, scope: !4864)
!4885 = !DILocation(line: 2730, column: 29, scope: !4883)
!4886 = !DILocation(line: 2730, column: 35, scope: !4883)
!4887 = !DILocation(line: 2730, column: 5, scope: !4883)
!4888 = !DILocation(line: 2732, column: 7, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4864, file: !3, line: 2732, column: 7)
!4890 = !DILocation(line: 2732, column: 25, scope: !4889)
!4891 = !DILocation(line: 2732, column: 7, scope: !4864)
!4892 = !DILocation(line: 2733, column: 21, scope: !4889)
!4893 = !DILocation(line: 2733, column: 5, scope: !4889)
!4894 = !DILocation(line: 2736, column: 3, scope: !4864)
!4895 = !DILocation(line: 2738, column: 21, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4864, file: !3, line: 2738, column: 7)
!4897 = !DILocation(line: 2738, column: 7, scope: !4896)
!4898 = !DILocation(line: 2738, column: 7, scope: !4864)
!4899 = !DILocation(line: 2739, column: 19, scope: !4896)
!4900 = !DILocation(line: 2739, column: 49, scope: !4896)
!4901 = !DILocation(line: 2739, column: 55, scope: !4896)
!4902 = !DILocation(line: 2739, column: 5, scope: !4896)
!4903 = !DILocation(line: 2740, column: 1, scope: !4864)
!4904 = distinct !DISubprogram(name: "free_pending_lists", scope: !3, file: !3, line: 2761, type: !2319, scopeLine: 2762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4905 = !DILocalVariable(name: "bb", scope: !4904, file: !3, line: 2763, type: !990)
!4906 = !DILocation(line: 2763, column: 7, scope: !4904)
!4907 = !DILocation(line: 2765, column: 11, scope: !4908)
!4908 = distinct !DILexicalBlock(scope: !4904, file: !3, line: 2765, column: 3)
!4909 = !DILocation(line: 2765, column: 8, scope: !4908)
!4910 = !DILocation(line: 2765, column: 16, scope: !4911)
!4911 = distinct !DILexicalBlock(scope: !4908, file: !3, line: 2765, column: 3)
!4912 = !DILocation(line: 2765, column: 21, scope: !4911)
!4913 = !DILocation(line: 2765, column: 19, scope: !4911)
!4914 = !DILocation(line: 2765, column: 3, scope: !4908)
!4915 = !DILocation(line: 2767, column: 29, scope: !4916)
!4916 = distinct !DILexicalBlock(scope: !4911, file: !3, line: 2766, column: 5)
!4917 = !DILocation(line: 2767, column: 37, scope: !4916)
!4918 = !DILocation(line: 2767, column: 41, scope: !4916)
!4919 = !DILocation(line: 2767, column: 7, scope: !4916)
!4920 = !DILocation(line: 2768, column: 29, scope: !4916)
!4921 = !DILocation(line: 2768, column: 37, scope: !4916)
!4922 = !DILocation(line: 2768, column: 41, scope: !4916)
!4923 = !DILocation(line: 2768, column: 7, scope: !4916)
!4924 = !DILocation(line: 2769, column: 29, scope: !4916)
!4925 = !DILocation(line: 2769, column: 37, scope: !4916)
!4926 = !DILocation(line: 2769, column: 41, scope: !4916)
!4927 = !DILocation(line: 2769, column: 7, scope: !4916)
!4928 = !DILocation(line: 2770, column: 29, scope: !4916)
!4929 = !DILocation(line: 2770, column: 37, scope: !4916)
!4930 = !DILocation(line: 2770, column: 41, scope: !4916)
!4931 = !DILocation(line: 2770, column: 7, scope: !4916)
!4932 = !DILocation(line: 2771, column: 5, scope: !4916)
!4933 = !DILocation(line: 2765, column: 42, scope: !4911)
!4934 = !DILocation(line: 2765, column: 3, scope: !4911)
!4935 = distinct !{!4935, !4914, !4936}
!4936 = !DILocation(line: 2771, column: 5, scope: !4908)
!4937 = !DILocation(line: 2772, column: 1, scope: !4904)
!4938 = distinct !DISubprogram(name: "sched_rgn_local_init", scope: !3, file: !3, line: 3185, type: !2327, scopeLine: 3186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!4939 = !DILocalVariable(name: "rgn", arg: 1, scope: !4938, file: !3, line: 3185, type: !990)
!4940 = !DILocation(line: 3185, column: 27, scope: !4938)
!4941 = !DILocalVariable(name: "bb", scope: !4938, file: !3, line: 3187, type: !990)
!4942 = !DILocation(line: 3187, column: 7, scope: !4938)
!4943 = !DILocation(line: 3190, column: 7, scope: !4944)
!4944 = distinct !DILexicalBlock(scope: !4938, file: !3, line: 3190, column: 7)
!4945 = !DILocation(line: 3190, column: 25, scope: !4944)
!4946 = !DILocation(line: 3190, column: 7, scope: !4938)
!4947 = !DILocalVariable(name: "block", scope: !4948, file: !3, line: 3192, type: !1536)
!4948 = distinct !DILexicalBlock(scope: !4944, file: !3, line: 3191, column: 5)
!4949 = !DILocation(line: 3192, column: 19, scope: !4948)
!4950 = !DILocalVariable(name: "e", scope: !4948, file: !3, line: 3193, type: !1553)
!4951 = !DILocation(line: 3193, column: 12, scope: !4948)
!4952 = !DILocalVariable(name: "ei", scope: !4948, file: !3, line: 3194, type: !2177)
!4953 = !DILocation(line: 3194, column: 21, scope: !4948)
!4954 = !DILocation(line: 3196, column: 14, scope: !4948)
!4955 = !DILocation(line: 3196, column: 12, scope: !4948)
!4956 = !DILocation(line: 3198, column: 35, scope: !4948)
!4957 = !DILocation(line: 3198, column: 54, scope: !4948)
!4958 = !DILocation(line: 3198, column: 13, scope: !4948)
!4959 = !DILocation(line: 3198, column: 11, scope: !4948)
!4960 = !DILocation(line: 3199, column: 28, scope: !4948)
!4961 = !DILocation(line: 3199, column: 33, scope: !4948)
!4962 = !DILocation(line: 3199, column: 7, scope: !4948)
!4963 = !DILocation(line: 3202, column: 20, scope: !4948)
!4964 = !DILocation(line: 3203, column: 7, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 3203, column: 7)
!4966 = !DILocation(line: 3203, column: 7, scope: !4967)
!4967 = distinct !DILexicalBlock(scope: !4965, file: !3, line: 3203, column: 7)
!4968 = !DILocation(line: 3205, column: 8, scope: !4969)
!4969 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 3205, column: 8)
!4970 = distinct !DILexicalBlock(scope: !4967, file: !3, line: 3204, column: 2)
!4971 = !DILocation(line: 3205, column: 41, scope: !4969)
!4972 = !DILocation(line: 3205, column: 38, scope: !4969)
!4973 = !DILocation(line: 3205, column: 8, scope: !4970)
!4974 = !DILocation(line: 3206, column: 6, scope: !4969)
!4975 = !DILocation(line: 3207, column: 4, scope: !4976)
!4976 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 3207, column: 4)
!4977 = !DILocation(line: 3207, column: 4, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4976, file: !3, line: 3207, column: 4)
!4979 = !DILocation(line: 3208, column: 6, scope: !4978)
!4980 = distinct !{!4980, !4975, !4981}
!4981 = !DILocation(line: 3208, column: 6, scope: !4976)
!4982 = !DILocation(line: 3209, column: 2, scope: !4970)
!4983 = distinct !{!4983, !4964, !4984}
!4984 = !DILocation(line: 3209, column: 2, scope: !4965)
!4985 = !DILocation(line: 3211, column: 19, scope: !4948)
!4986 = !DILocation(line: 3211, column: 17, scope: !4948)
!4987 = !DILocation(line: 3212, column: 20, scope: !4948)
!4988 = !DILocation(line: 3213, column: 7, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 3213, column: 7)
!4990 = !DILocation(line: 3213, column: 7, scope: !4991)
!4991 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 3213, column: 7)
!4992 = !DILocation(line: 3215, column: 8, scope: !4993)
!4993 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 3215, column: 8)
!4994 = distinct !DILexicalBlock(scope: !4991, file: !3, line: 3214, column: 2)
!4995 = !DILocation(line: 3215, column: 41, scope: !4993)
!4996 = !DILocation(line: 3215, column: 38, scope: !4993)
!4997 = !DILocation(line: 3215, column: 8, scope: !4994)
!4998 = !DILocation(line: 3216, column: 6, scope: !4993)
!4999 = !DILocation(line: 3217, column: 4, scope: !5000)
!5000 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 3217, column: 4)
!5001 = !DILocation(line: 3217, column: 4, scope: !5002)
!5002 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 3217, column: 4)
!5003 = !DILocation(line: 3218, column: 34, scope: !5002)
!5004 = !DILocation(line: 3218, column: 6, scope: !5002)
!5005 = !DILocation(line: 3218, column: 28, scope: !5002)
!5006 = !DILocation(line: 3218, column: 32, scope: !5002)
!5007 = distinct !{!5007, !4999, !5008}
!5008 = !DILocation(line: 3218, column: 34, scope: !5000)
!5009 = !DILocation(line: 3219, column: 2, scope: !4994)
!5010 = distinct !{!5010, !4988, !5011}
!5011 = !DILocation(line: 3219, column: 2, scope: !4989)
!5012 = !DILocation(line: 3222, column: 41, scope: !4948)
!5013 = !DILocation(line: 3222, column: 60, scope: !4948)
!5014 = !DILocation(line: 3222, column: 19, scope: !4948)
!5015 = !DILocation(line: 3222, column: 17, scope: !4948)
!5016 = !DILocation(line: 3223, column: 28, scope: !4948)
!5017 = !DILocation(line: 3223, column: 39, scope: !4948)
!5018 = !DILocation(line: 3223, column: 7, scope: !4948)
!5019 = !DILocation(line: 3224, column: 46, scope: !4948)
!5020 = !DILocation(line: 3224, column: 65, scope: !4948)
!5021 = !DILocation(line: 3224, column: 24, scope: !4948)
!5022 = !DILocation(line: 3224, column: 22, scope: !4948)
!5023 = !DILocation(line: 3225, column: 28, scope: !4948)
!5024 = !DILocation(line: 3225, column: 44, scope: !4948)
!5025 = !DILocation(line: 3225, column: 7, scope: !4948)
!5026 = !DILocation(line: 3228, column: 15, scope: !5027)
!5027 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 3228, column: 7)
!5028 = !DILocation(line: 3228, column: 12, scope: !5027)
!5029 = !DILocation(line: 3228, column: 20, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !5027, file: !3, line: 3228, column: 7)
!5031 = !DILocation(line: 3228, column: 25, scope: !5030)
!5032 = !DILocation(line: 3228, column: 23, scope: !5030)
!5033 = !DILocation(line: 3228, column: 7, scope: !5027)
!5034 = !DILocation(line: 3229, column: 23, scope: !5030)
!5035 = !DILocation(line: 3229, column: 2, scope: !5030)
!5036 = !DILocation(line: 3228, column: 46, scope: !5030)
!5037 = !DILocation(line: 3228, column: 7, scope: !5030)
!5038 = distinct !{!5038, !5033, !5039}
!5039 = !DILocation(line: 3229, column: 25, scope: !5027)
!5040 = !DILocation(line: 3234, column: 7, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 3234, column: 7)
!5042 = !DILocation(line: 3234, column: 7, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !5041, file: !3, line: 3234, column: 7)
!5044 = !DILocation(line: 3236, column: 8, scope: !5045)
!5045 = distinct !DILexicalBlock(scope: !5046, file: !3, line: 3236, column: 8)
!5046 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 3235, column: 2)
!5047 = !DILocation(line: 3236, column: 41, scope: !5045)
!5048 = !DILocation(line: 3236, column: 38, scope: !5045)
!5049 = !DILocation(line: 3236, column: 8, scope: !5046)
!5050 = !DILocation(line: 3237, column: 6, scope: !5045)
!5051 = !DILocation(line: 3238, column: 4, scope: !5052)
!5052 = distinct !DILexicalBlock(scope: !5046, file: !3, line: 3238, column: 4)
!5053 = !DILocation(line: 3238, column: 4, scope: !5054)
!5054 = distinct !DILexicalBlock(scope: !5052, file: !3, line: 3238, column: 4)
!5055 = !DILocation(line: 3239, column: 6, scope: !5054)
!5056 = !DILocation(line: 3239, column: 9, scope: !5054)
!5057 = !DILocation(line: 3239, column: 13, scope: !5054)
!5058 = distinct !{!5058, !5051, !5059}
!5059 = !DILocation(line: 3239, column: 15, scope: !5052)
!5060 = !DILocation(line: 3240, column: 9, scope: !5046)
!5061 = distinct !{!5061, !5040, !5062}
!5062 = !DILocation(line: 3240, column: 9, scope: !5041)
!5063 = !DILocation(line: 3241, column: 5, scope: !4948)
!5064 = !DILocation(line: 3242, column: 1, scope: !4938)
!5065 = distinct !DISubprogram(name: "compute_dom_prob_ps", scope: !3, file: !3, line: 1404, type: !2327, scopeLine: 1405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5066 = !DILocalVariable(name: "bb", arg: 1, scope: !5065, file: !3, line: 1404, type: !990)
!5067 = !DILocation(line: 1404, column: 26, scope: !5065)
!5068 = !DILocalVariable(name: "in_ei", scope: !5065, file: !3, line: 1406, type: !2177)
!5069 = !DILocation(line: 1406, column: 17, scope: !5065)
!5070 = !DILocalVariable(name: "in_edge", scope: !5065, file: !3, line: 1407, type: !1553)
!5071 = !DILocation(line: 1407, column: 8, scope: !5065)
!5072 = !DILocation(line: 1410, column: 3, scope: !5065)
!5073 = !DILocation(line: 1412, column: 7, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 1412, column: 7)
!5075 = !DILocation(line: 1412, column: 7, scope: !5065)
!5076 = !DILocation(line: 1414, column: 16, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !5074, file: !3, line: 1413, column: 5)
!5078 = !DILocation(line: 1414, column: 20, scope: !5077)
!5079 = !DILocation(line: 1414, column: 7, scope: !5077)
!5080 = !DILocation(line: 1415, column: 7, scope: !5077)
!5081 = !DILocation(line: 1415, column: 12, scope: !5077)
!5082 = !DILocation(line: 1415, column: 16, scope: !5077)
!5083 = !DILocation(line: 1416, column: 7, scope: !5077)
!5084 = !DILocation(line: 1419, column: 3, scope: !5065)
!5085 = !DILocation(line: 1419, column: 8, scope: !5065)
!5086 = !DILocation(line: 1419, column: 12, scope: !5065)
!5087 = !DILocation(line: 1422, column: 17, scope: !5065)
!5088 = !DILocation(line: 1422, column: 21, scope: !5065)
!5089 = !DILocation(line: 1422, column: 3, scope: !5065)
!5090 = !DILocation(line: 1424, column: 3, scope: !5091)
!5091 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 1424, column: 3)
!5092 = !DILocation(line: 1424, column: 3, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5091, file: !3, line: 1424, column: 3)
!5094 = !DILocalVariable(name: "pred_bb", scope: !5095, file: !3, line: 1426, type: !990)
!5095 = distinct !DILexicalBlock(scope: !5093, file: !3, line: 1425, column: 5)
!5096 = !DILocation(line: 1426, column: 11, scope: !5095)
!5097 = !DILocalVariable(name: "out_edge", scope: !5095, file: !3, line: 1427, type: !1553)
!5098 = !DILocation(line: 1427, column: 12, scope: !5095)
!5099 = !DILocalVariable(name: "out_ei", scope: !5095, file: !3, line: 1428, type: !2177)
!5100 = !DILocation(line: 1428, column: 21, scope: !5095)
!5101 = !DILocation(line: 1430, column: 11, scope: !5102)
!5102 = distinct !DILexicalBlock(scope: !5095, file: !3, line: 1430, column: 11)
!5103 = !DILocation(line: 1430, column: 20, scope: !5102)
!5104 = !DILocation(line: 1430, column: 27, scope: !5102)
!5105 = !DILocation(line: 1430, column: 24, scope: !5102)
!5106 = !DILocation(line: 1430, column: 11, scope: !5095)
!5107 = !DILocation(line: 1431, column: 2, scope: !5102)
!5108 = !DILocation(line: 1433, column: 17, scope: !5095)
!5109 = !DILocation(line: 1433, column: 15, scope: !5095)
!5110 = !DILocation(line: 1434, column: 24, scope: !5095)
!5111 = !DILocation(line: 1434, column: 28, scope: !5095)
!5112 = !DILocation(line: 1434, column: 33, scope: !5095)
!5113 = !DILocation(line: 1434, column: 37, scope: !5095)
!5114 = !DILocation(line: 1434, column: 42, scope: !5095)
!5115 = !DILocation(line: 1434, column: 46, scope: !5095)
!5116 = !DILocation(line: 1434, column: 7, scope: !5095)
!5117 = !DILocation(line: 1435, column: 23, scope: !5095)
!5118 = !DILocation(line: 1435, column: 38, scope: !5095)
!5119 = !DILocation(line: 1436, column: 9, scope: !5095)
!5120 = !DILocation(line: 1436, column: 24, scope: !5095)
!5121 = !DILocation(line: 1436, column: 29, scope: !5095)
!5122 = !DILocation(line: 1436, column: 44, scope: !5095)
!5123 = !DILocation(line: 1435, column: 7, scope: !5095)
!5124 = !DILocation(line: 1438, column: 16, scope: !5095)
!5125 = !DILocation(line: 1438, column: 31, scope: !5095)
!5126 = !DILocation(line: 1438, column: 36, scope: !5095)
!5127 = !DILocation(line: 1438, column: 7, scope: !5095)
!5128 = !DILocation(line: 1440, column: 23, scope: !5095)
!5129 = !DILocation(line: 1440, column: 33, scope: !5095)
!5130 = !DILocation(line: 1440, column: 38, scope: !5095)
!5131 = !DILocation(line: 1440, column: 48, scope: !5095)
!5132 = !DILocation(line: 1440, column: 53, scope: !5095)
!5133 = !DILocation(line: 1440, column: 63, scope: !5095)
!5134 = !DILocation(line: 1440, column: 7, scope: !5095)
!5135 = !DILocation(line: 1442, column: 7, scope: !5136)
!5136 = distinct !DILexicalBlock(scope: !5095, file: !3, line: 1442, column: 7)
!5137 = !DILocation(line: 1442, column: 7, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !5136, file: !3, line: 1442, column: 7)
!5139 = !DILocation(line: 1443, column: 11, scope: !5138)
!5140 = !DILocation(line: 1443, column: 21, scope: !5138)
!5141 = !DILocation(line: 1443, column: 26, scope: !5138)
!5142 = !DILocation(line: 1443, column: 2, scope: !5138)
!5143 = distinct !{!5143, !5135, !5144}
!5144 = !DILocation(line: 1443, column: 48, scope: !5136)
!5145 = !DILocation(line: 1445, column: 21, scope: !5095)
!5146 = !DILocation(line: 1445, column: 26, scope: !5095)
!5147 = !DILocation(line: 1445, column: 37, scope: !5095)
!5148 = !DILocation(line: 1445, column: 46, scope: !5095)
!5149 = !DILocation(line: 1445, column: 35, scope: !5095)
!5150 = !DILocation(line: 1445, column: 59, scope: !5095)
!5151 = !DILocation(line: 1445, column: 7, scope: !5095)
!5152 = !DILocation(line: 1445, column: 12, scope: !5095)
!5153 = !DILocation(line: 1445, column: 16, scope: !5095)
!5154 = !DILocation(line: 1446, column: 5, scope: !5095)
!5155 = distinct !{!5155, !5090, !5156}
!5156 = !DILocation(line: 1446, column: 5, scope: !5091)
!5157 = !DILocation(line: 1448, column: 12, scope: !5065)
!5158 = !DILocation(line: 1448, column: 16, scope: !5065)
!5159 = !DILocation(line: 1448, column: 21, scope: !5065)
!5160 = !DILocation(line: 1448, column: 3, scope: !5065)
!5161 = !DILocation(line: 1449, column: 23, scope: !5065)
!5162 = !DILocation(line: 1449, column: 33, scope: !5065)
!5163 = !DILocation(line: 1449, column: 38, scope: !5065)
!5164 = !DILocation(line: 1449, column: 48, scope: !5065)
!5165 = !DILocation(line: 1449, column: 53, scope: !5065)
!5166 = !DILocation(line: 1449, column: 68, scope: !5065)
!5167 = !DILocation(line: 1449, column: 3, scope: !5065)
!5168 = !DILocation(line: 1451, column: 7, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 1451, column: 7)
!5170 = !DILocation(line: 1451, column: 21, scope: !5169)
!5171 = !DILocation(line: 1451, column: 7, scope: !5065)
!5172 = !DILocation(line: 1452, column: 14, scope: !5169)
!5173 = !DILocation(line: 1452, column: 57, scope: !5169)
!5174 = !DILocation(line: 1452, column: 61, scope: !5169)
!5175 = !DILocation(line: 1453, column: 14, scope: !5169)
!5176 = !DILocation(line: 1453, column: 19, scope: !5169)
!5177 = !DILocation(line: 1453, column: 12, scope: !5169)
!5178 = !DILocation(line: 1453, column: 24, scope: !5169)
!5179 = !DILocation(line: 1452, column: 5, scope: !5169)
!5180 = !DILocation(line: 1454, column: 1, scope: !5065)
!5181 = distinct !DISubprogram(name: "sched_rgn_local_free", scope: !3, file: !3, line: 3246, type: !2319, scopeLine: 3247, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5182 = !DILocation(line: 3248, column: 9, scope: !5181)
!5183 = !DILocation(line: 3248, column: 3, scope: !5181)
!5184 = !DILocation(line: 3249, column: 3, scope: !5181)
!5185 = !DILocation(line: 3250, column: 3, scope: !5181)
!5186 = !DILocation(line: 3251, column: 3, scope: !5181)
!5187 = !DILocation(line: 3252, column: 9, scope: !5181)
!5188 = !DILocation(line: 3252, column: 3, scope: !5181)
!5189 = !DILocation(line: 3253, column: 1, scope: !5181)
!5190 = distinct !DISubprogram(name: "sched_rgn_local_finish", scope: !3, file: !3, line: 3257, type: !2319, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5191 = !DILocation(line: 3259, column: 7, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !5190, file: !3, line: 3259, column: 7)
!5193 = !DILocation(line: 3259, column: 25, scope: !5192)
!5194 = !DILocation(line: 3259, column: 29, scope: !5192)
!5195 = !DILocation(line: 3259, column: 33, scope: !5192)
!5196 = !DILocation(line: 3259, column: 7, scope: !5190)
!5197 = !DILocation(line: 3261, column: 7, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 3260, column: 5)
!5199 = !DILocation(line: 3262, column: 5, scope: !5198)
!5200 = !DILocation(line: 3263, column: 1, scope: !5190)
!5201 = distinct !DISubprogram(name: "rgn_setup_common_sched_info", scope: !3, file: !3, line: 3267, type: !2319, scopeLine: 3268, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5202 = !DILocation(line: 3269, column: 3, scope: !5201)
!5203 = !DILocation(line: 3272, column: 42, scope: !5201)
!5204 = !DILocation(line: 3273, column: 35, scope: !5201)
!5205 = !DILocation(line: 3275, column: 5, scope: !5201)
!5206 = !DILocation(line: 3276, column: 39, scope: !5201)
!5207 = !DILocation(line: 3278, column: 21, scope: !5201)
!5208 = !DILocation(line: 3279, column: 1, scope: !5201)
!5209 = distinct !DISubprogram(name: "rgn_fix_recovery_cfg", scope: !3, file: !3, line: 3449, type: !2288, scopeLine: 3450, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5210 = !DILocalVariable(name: "bbi", arg: 1, scope: !5209, file: !3, line: 3449, type: !990)
!5211 = !DILocation(line: 3449, column: 27, scope: !5209)
!5212 = !DILocalVariable(name: "check_bbi", arg: 2, scope: !5209, file: !3, line: 3449, type: !990)
!5213 = !DILocation(line: 3449, column: 36, scope: !5209)
!5214 = !DILocalVariable(name: "check_bb_nexti", arg: 3, scope: !5209, file: !3, line: 3449, type: !990)
!5215 = !DILocation(line: 3449, column: 51, scope: !5209)
!5216 = !DILocalVariable(name: "old_pos", scope: !5209, file: !3, line: 3451, type: !990)
!5217 = !DILocation(line: 3451, column: 7, scope: !5209)
!5218 = !DILocalVariable(name: "new_pos", scope: !5209, file: !3, line: 3451, type: !990)
!5219 = !DILocation(line: 3451, column: 16, scope: !5209)
!5220 = !DILocalVariable(name: "i", scope: !5209, file: !3, line: 3451, type: !990)
!5221 = !DILocation(line: 3451, column: 25, scope: !5209)
!5222 = !DILocation(line: 3453, column: 34, scope: !5209)
!5223 = !DILocation(line: 3453, column: 3, scope: !5209)
!5224 = !DILocation(line: 3453, column: 32, scope: !5209)
!5225 = !DILocation(line: 3455, column: 18, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5209, file: !3, line: 3455, column: 3)
!5227 = !DILocation(line: 3455, column: 27, scope: !5226)
!5228 = !DILocation(line: 3455, column: 51, scope: !5226)
!5229 = !DILocation(line: 3455, column: 56, scope: !5226)
!5230 = !DILocation(line: 3455, column: 16, scope: !5226)
!5231 = !DILocation(line: 3455, column: 8, scope: !5226)
!5232 = !DILocation(line: 3456, column: 8, scope: !5233)
!5233 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 3455, column: 3)
!5234 = !DILocation(line: 3456, column: 21, scope: !5233)
!5235 = !DILocation(line: 3456, column: 33, scope: !5233)
!5236 = !DILocation(line: 3456, column: 30, scope: !5233)
!5237 = !DILocation(line: 3455, column: 3, scope: !5226)
!5238 = !DILocation(line: 3457, column: 15, scope: !5233)
!5239 = !DILocation(line: 3455, column: 3, scope: !5233)
!5240 = distinct !{!5240, !5237, !5241}
!5241 = !DILocation(line: 3457, column: 18, scope: !5226)
!5242 = !DILocation(line: 3458, column: 3, scope: !5209)
!5243 = !DILocation(line: 3460, column: 18, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5209, file: !3, line: 3460, column: 3)
!5245 = !DILocation(line: 3460, column: 27, scope: !5244)
!5246 = !DILocation(line: 3460, column: 45, scope: !5244)
!5247 = !DILocation(line: 3460, column: 50, scope: !5244)
!5248 = !DILocation(line: 3460, column: 16, scope: !5244)
!5249 = !DILocation(line: 3460, column: 8, scope: !5244)
!5250 = !DILocation(line: 3461, column: 8, scope: !5251)
!5251 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 3460, column: 3)
!5252 = !DILocation(line: 3461, column: 21, scope: !5251)
!5253 = !DILocation(line: 3461, column: 33, scope: !5251)
!5254 = !DILocation(line: 3461, column: 30, scope: !5251)
!5255 = !DILocation(line: 3460, column: 3, scope: !5244)
!5256 = !DILocation(line: 3462, column: 15, scope: !5251)
!5257 = !DILocation(line: 3460, column: 3, scope: !5251)
!5258 = distinct !{!5258, !5255, !5259}
!5259 = !DILocation(line: 3462, column: 18, scope: !5244)
!5260 = !DILocation(line: 3463, column: 10, scope: !5209)
!5261 = !DILocation(line: 3464, column: 3, scope: !5209)
!5262 = !DILocation(line: 3466, column: 3, scope: !5209)
!5263 = !DILocation(line: 3468, column: 12, scope: !5209)
!5264 = !DILocation(line: 3468, column: 27, scope: !5209)
!5265 = !DILocation(line: 3468, column: 25, scope: !5209)
!5266 = !DILocation(line: 3468, column: 35, scope: !5209)
!5267 = !DILocation(line: 3468, column: 3, scope: !5209)
!5268 = !DILocation(line: 3469, column: 5, scope: !5209)
!5269 = !DILocation(line: 3469, column: 20, scope: !5209)
!5270 = !DILocation(line: 3469, column: 18, scope: !5209)
!5271 = !DILocation(line: 3470, column: 6, scope: !5209)
!5272 = !DILocation(line: 3470, column: 16, scope: !5209)
!5273 = !DILocation(line: 3470, column: 14, scope: !5209)
!5274 = !DILocation(line: 3470, column: 5, scope: !5209)
!5275 = !DILocation(line: 3470, column: 25, scope: !5209)
!5276 = !DILocation(line: 3472, column: 27, scope: !5209)
!5277 = !DILocation(line: 3472, column: 3, scope: !5209)
!5278 = !DILocation(line: 3472, column: 16, scope: !5209)
!5279 = !DILocation(line: 3472, column: 25, scope: !5209)
!5280 = !DILocation(line: 3474, column: 12, scope: !5281)
!5281 = distinct !DILexicalBlock(scope: !5209, file: !3, line: 3474, column: 3)
!5282 = !DILocation(line: 3474, column: 30, scope: !5281)
!5283 = !DILocation(line: 3474, column: 10, scope: !5281)
!5284 = !DILocation(line: 3474, column: 8, scope: !5281)
!5285 = !DILocation(line: 3474, column: 35, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5281, file: !3, line: 3474, column: 3)
!5287 = !DILocation(line: 3474, column: 40, scope: !5286)
!5288 = !DILocation(line: 3474, column: 37, scope: !5286)
!5289 = !DILocation(line: 3474, column: 3, scope: !5281)
!5290 = !DILocation(line: 3475, column: 5, scope: !5286)
!5291 = !DILocation(line: 3475, column: 14, scope: !5286)
!5292 = !DILocation(line: 3475, column: 16, scope: !5286)
!5293 = !DILocation(line: 3474, column: 66, scope: !5286)
!5294 = !DILocation(line: 3474, column: 3, scope: !5286)
!5295 = distinct !{!5295, !5289, !5296}
!5296 = !DILocation(line: 3475, column: 16, scope: !5281)
!5297 = !DILocation(line: 3476, column: 1, scope: !5209)
!5298 = distinct !DISubprogram(name: "rgn_add_block", scope: !3, file: !3, line: 3381, type: !2292, scopeLine: 3382, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5299 = !DILocalVariable(name: "bb", arg: 1, scope: !5298, file: !3, line: 3381, type: !1536)
!5300 = !DILocation(line: 3381, column: 28, scope: !5298)
!5301 = !DILocalVariable(name: "after", arg: 2, scope: !5298, file: !3, line: 3381, type: !1536)
!5302 = !DILocation(line: 3381, column: 44, scope: !5298)
!5303 = !DILocation(line: 3383, column: 3, scope: !5298)
!5304 = !DILocation(line: 3384, column: 31, scope: !5298)
!5305 = !DILocation(line: 3384, column: 35, scope: !5298)
!5306 = !DILocation(line: 3384, column: 3, scope: !5298)
!5307 = !DILocation(line: 3386, column: 7, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5298, file: !3, line: 3386, column: 7)
!5309 = !DILocation(line: 3386, column: 13, scope: !5308)
!5310 = !DILocation(line: 3386, column: 18, scope: !5308)
!5311 = !DILocation(line: 3386, column: 21, scope: !5308)
!5312 = !DILocation(line: 3386, column: 30, scope: !5308)
!5313 = !DILocation(line: 3386, column: 27, scope: !5308)
!5314 = !DILocation(line: 3386, column: 7, scope: !5298)
!5315 = !DILocation(line: 3388, column: 45, scope: !5316)
!5316 = distinct !DILexicalBlock(scope: !5308, file: !3, line: 3387, column: 5)
!5317 = !DILocation(line: 3388, column: 7, scope: !5316)
!5318 = !DILocation(line: 3389, column: 46, scope: !5316)
!5319 = !DILocation(line: 3389, column: 55, scope: !5316)
!5320 = !DILocation(line: 3389, column: 52, scope: !5316)
!5321 = !DILocation(line: 3389, column: 7, scope: !5316)
!5322 = !DILocation(line: 3389, column: 43, scope: !5316)
!5323 = !DILocation(line: 3390, column: 5, scope: !5316)
!5324 = !DILocalVariable(name: "i", scope: !5325, file: !3, line: 3393, type: !990)
!5325 = distinct !DILexicalBlock(scope: !5308, file: !3, line: 3392, column: 5)
!5326 = !DILocation(line: 3393, column: 11, scope: !5325)
!5327 = !DILocalVariable(name: "pos", scope: !5325, file: !3, line: 3393, type: !990)
!5328 = !DILocation(line: 3393, column: 14, scope: !5325)
!5329 = !DILocation(line: 3398, column: 33, scope: !5325)
!5330 = !DILocation(line: 3398, column: 7, scope: !5325)
!5331 = !DILocation(line: 3398, column: 31, scope: !5325)
!5332 = !DILocation(line: 3405, column: 11, scope: !5325)
!5333 = !DILocation(line: 3405, column: 38, scope: !5325)
!5334 = !DILocation(line: 3405, column: 9, scope: !5325)
!5335 = !DILocation(line: 3406, column: 13, scope: !5325)
!5336 = !DILocation(line: 3406, column: 22, scope: !5325)
!5337 = !DILocation(line: 3406, column: 25, scope: !5325)
!5338 = !DILocation(line: 3406, column: 11, scope: !5325)
!5339 = !DILocation(line: 3410, column: 7, scope: !5325)
!5340 = !DILocation(line: 3410, column: 14, scope: !5341)
!5341 = distinct !DILexicalBlock(scope: !5342, file: !3, line: 3410, column: 7)
!5342 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 3410, column: 7)
!5343 = !DILocation(line: 3410, column: 27, scope: !5341)
!5344 = !DILocation(line: 3410, column: 35, scope: !5341)
!5345 = !DILocation(line: 3410, column: 42, scope: !5341)
!5346 = !DILocation(line: 3410, column: 32, scope: !5341)
!5347 = !DILocation(line: 3410, column: 7, scope: !5342)
!5348 = !DILocation(line: 3410, column: 52, scope: !5341)
!5349 = !DILocation(line: 3410, column: 7, scope: !5341)
!5350 = distinct !{!5350, !5347, !5351}
!5351 = !DILocation(line: 3410, column: 55, scope: !5342)
!5352 = !DILocation(line: 3412, column: 10, scope: !5325)
!5353 = !DILocation(line: 3413, column: 7, scope: !5325)
!5354 = !DILocation(line: 3425, column: 16, scope: !5325)
!5355 = !DILocation(line: 3425, column: 31, scope: !5325)
!5356 = !DILocation(line: 3425, column: 29, scope: !5325)
!5357 = !DILocation(line: 3425, column: 35, scope: !5325)
!5358 = !DILocation(line: 3425, column: 7, scope: !5325)
!5359 = !DILocation(line: 3426, column: 9, scope: !5325)
!5360 = !DILocation(line: 3426, column: 24, scope: !5325)
!5361 = !DILocation(line: 3426, column: 22, scope: !5325)
!5362 = !DILocation(line: 3427, column: 11, scope: !5325)
!5363 = !DILocation(line: 3427, column: 35, scope: !5325)
!5364 = !DILocation(line: 3427, column: 43, scope: !5325)
!5365 = !DILocation(line: 3427, column: 40, scope: !5325)
!5366 = !DILocation(line: 3427, column: 48, scope: !5325)
!5367 = !DILocation(line: 3427, column: 9, scope: !5325)
!5368 = !DILocation(line: 3428, column: 9, scope: !5325)
!5369 = !DILocation(line: 3430, column: 27, scope: !5325)
!5370 = !DILocation(line: 3430, column: 31, scope: !5325)
!5371 = !DILocation(line: 3430, column: 7, scope: !5325)
!5372 = !DILocation(line: 3430, column: 20, scope: !5325)
!5373 = !DILocation(line: 3430, column: 25, scope: !5325)
!5374 = !DILocation(line: 3432, column: 7, scope: !5325)
!5375 = !DILocation(line: 3432, column: 14, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5377, file: !3, line: 3432, column: 7)
!5377 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 3432, column: 7)
!5378 = !DILocation(line: 3432, column: 19, scope: !5376)
!5379 = !DILocation(line: 3432, column: 16, scope: !5376)
!5380 = !DILocation(line: 3432, column: 7, scope: !5377)
!5381 = !DILocation(line: 3433, column: 2, scope: !5376)
!5382 = !DILocation(line: 3433, column: 12, scope: !5376)
!5383 = !DILocation(line: 3433, column: 14, scope: !5376)
!5384 = !DILocation(line: 3432, column: 39, scope: !5376)
!5385 = !DILocation(line: 3432, column: 7, scope: !5376)
!5386 = distinct !{!5386, !5380, !5387}
!5387 = !DILocation(line: 3433, column: 14, scope: !5377)
!5388 = !DILocation(line: 3435, column: 11, scope: !5325)
!5389 = !DILocation(line: 3435, column: 9, scope: !5325)
!5390 = !DILocation(line: 3436, column: 36, scope: !5325)
!5391 = !DILocation(line: 3436, column: 7, scope: !5325)
!5392 = !DILocation(line: 3436, column: 34, scope: !5325)
!5393 = !DILocation(line: 3438, column: 7, scope: !5325)
!5394 = !DILocation(line: 3438, column: 28, scope: !5325)
!5395 = !DILocation(line: 3440, column: 12, scope: !5396)
!5396 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 3440, column: 7)
!5397 = !DILocation(line: 3440, column: 17, scope: !5398)
!5398 = distinct !DILexicalBlock(scope: !5396, file: !3, line: 3440, column: 7)
!5399 = !DILocation(line: 3440, column: 22, scope: !5398)
!5400 = !DILocation(line: 3440, column: 19, scope: !5398)
!5401 = !DILocation(line: 3440, column: 7, scope: !5396)
!5402 = !DILocation(line: 3441, column: 2, scope: !5398)
!5403 = !DILocation(line: 3441, column: 16, scope: !5398)
!5404 = !DILocation(line: 3440, column: 35, scope: !5398)
!5405 = !DILocation(line: 3440, column: 7, scope: !5398)
!5406 = distinct !{!5406, !5401, !5407}
!5407 = !DILocation(line: 3441, column: 16, scope: !5396)
!5408 = !DILocation(line: 3443, column: 1, scope: !5298)
!5409 = distinct !DISubprogram(name: "rgn_estimate_number_of_insns", scope: !3, file: !3, line: 531, type: !2296, scopeLine: 532, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5410 = !DILocalVariable(name: "bb", arg: 1, scope: !5409, file: !3, line: 531, type: !1536)
!5411 = !DILocation(line: 531, column: 43, scope: !5409)
!5412 = !DILocalVariable(name: "count", scope: !5409, file: !3, line: 533, type: !990)
!5413 = !DILocation(line: 533, column: 7, scope: !5409)
!5414 = !DILocation(line: 535, column: 11, scope: !5409)
!5415 = !DILocation(line: 535, column: 37, scope: !5409)
!5416 = !DILocation(line: 535, column: 35, scope: !5409)
!5417 = !DILocation(line: 535, column: 9, scope: !5409)
!5418 = !DILocation(line: 537, column: 7, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5409, file: !3, line: 537, column: 7)
!5420 = !DILocation(line: 537, column: 7, scope: !5409)
!5421 = !DILocalVariable(name: "insn", scope: !5422, file: !3, line: 539, type: !997)
!5422 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 538, column: 5)
!5423 = !DILocation(line: 539, column: 11, scope: !5422)
!5424 = !DILocation(line: 541, column: 7, scope: !5425)
!5425 = distinct !DILexicalBlock(scope: !5422, file: !3, line: 541, column: 7)
!5426 = !DILocation(line: 541, column: 7, scope: !5427)
!5427 = distinct !DILexicalBlock(scope: !5425, file: !3, line: 541, column: 7)
!5428 = !DILocation(line: 0, scope: !5427)
!5429 = !DILocation(line: 542, column: 6, scope: !5430)
!5430 = distinct !DILexicalBlock(scope: !5427, file: !3, line: 542, column: 6)
!5431 = !DILocation(line: 542, column: 6, scope: !5427)
!5432 = !DILocation(line: 543, column: 9, scope: !5430)
!5433 = !DILocation(line: 543, column: 4, scope: !5430)
!5434 = distinct !{!5434, !5424, !5435}
!5435 = !DILocation(line: 543, column: 9, scope: !5425)
!5436 = !DILocation(line: 544, column: 5, scope: !5422)
!5437 = !DILocation(line: 546, column: 10, scope: !5409)
!5438 = !DILocation(line: 546, column: 3, scope: !5409)
!5439 = distinct !DISubprogram(name: "rgn_setup_sched_infos", scope: !3, file: !3, line: 3284, type: !2319, scopeLine: 3285, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5440 = !DILocation(line: 3286, column: 8, scope: !5441)
!5441 = distinct !DILexicalBlock(scope: !5439, file: !3, line: 3286, column: 7)
!5442 = !DILocation(line: 3286, column: 7, scope: !5439)
!5443 = !DILocation(line: 3287, column: 5, scope: !5441)
!5444 = !DILocation(line: 3290, column: 5, scope: !5441)
!5445 = !DILocation(line: 3293, column: 19, scope: !5439)
!5446 = !DILocation(line: 3295, column: 3, scope: !5439)
!5447 = !DILocation(line: 3296, column: 22, scope: !5439)
!5448 = !DILocation(line: 3297, column: 1, scope: !5439)
!5449 = distinct !DISubprogram(name: "schedule_insns", scope: !3, file: !3, line: 3301, type: !2319, scopeLine: 3302, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5450 = !DILocalVariable(name: "rgn", scope: !5449, file: !3, line: 3303, type: !990)
!5451 = !DILocation(line: 3303, column: 7, scope: !5449)
!5452 = !DILocation(line: 3307, column: 7, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5449, file: !3, line: 3307, column: 7)
!5454 = !DILocation(line: 3307, column: 22, scope: !5453)
!5455 = !DILocation(line: 3307, column: 7, scope: !5449)
!5456 = !DILocation(line: 3308, column: 5, scope: !5453)
!5457 = !DILocation(line: 3310, column: 3, scope: !5449)
!5458 = !DILocation(line: 3311, column: 3, scope: !5449)
!5459 = !DILocation(line: 3313, column: 3, scope: !5449)
!5460 = !DILocation(line: 3314, column: 19, scope: !5449)
!5461 = !DILocation(line: 3314, column: 3, scope: !5449)
!5462 = !DILocation(line: 3316, column: 3, scope: !5449)
!5463 = !DILocation(line: 3317, column: 3, scope: !5449)
!5464 = !DILocation(line: 3320, column: 12, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5449, file: !3, line: 3320, column: 3)
!5466 = !DILocation(line: 3320, column: 8, scope: !5465)
!5467 = !DILocation(line: 3320, column: 17, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 3320, column: 3)
!5469 = !DILocation(line: 3320, column: 23, scope: !5468)
!5470 = !DILocation(line: 3320, column: 21, scope: !5468)
!5471 = !DILocation(line: 3320, column: 3, scope: !5465)
!5472 = !DILocation(line: 3321, column: 9, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !5468, file: !3, line: 3321, column: 9)
!5474 = !DILocation(line: 3321, column: 9, scope: !5468)
!5475 = !DILocation(line: 3322, column: 24, scope: !5473)
!5476 = !DILocation(line: 3322, column: 7, scope: !5473)
!5477 = !DILocation(line: 3321, column: 30, scope: !5473)
!5478 = !DILocation(line: 3320, column: 38, scope: !5468)
!5479 = !DILocation(line: 3320, column: 3, scope: !5468)
!5480 = distinct !{!5480, !5471, !5481}
!5481 = !DILocation(line: 3322, column: 27, scope: !5465)
!5482 = !DILocation(line: 3325, column: 3, scope: !5449)
!5483 = !DILocation(line: 3326, column: 3, scope: !5449)
!5484 = !DILocation(line: 3328, column: 3, scope: !5449)
!5485 = !DILocation(line: 3329, column: 1, scope: !5449)
!5486 = distinct !DISubprogram(name: "bitmap_initialize_stat", scope: !1056, file: !1056, line: 165, type: !5487, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5487 = !DISubroutineType(types: !5488)
!5488 = !{null, !2312, !1076}
!5489 = !DILocalVariable(name: "head", arg: 1, scope: !5486, file: !1056, line: 165, type: !2312)
!5490 = !DILocation(line: 165, column: 32, scope: !5486)
!5491 = !DILocalVariable(name: "obstack", arg: 2, scope: !5486, file: !1056, line: 165, type: !1076)
!5492 = !DILocation(line: 165, column: 54, scope: !5486)
!5493 = !DILocation(line: 167, column: 17, scope: !5486)
!5494 = !DILocation(line: 167, column: 23, scope: !5486)
!5495 = !DILocation(line: 167, column: 31, scope: !5486)
!5496 = !DILocation(line: 167, column: 3, scope: !5486)
!5497 = !DILocation(line: 167, column: 9, scope: !5486)
!5498 = !DILocation(line: 167, column: 15, scope: !5486)
!5499 = !DILocation(line: 168, column: 19, scope: !5486)
!5500 = !DILocation(line: 168, column: 3, scope: !5486)
!5501 = !DILocation(line: 168, column: 9, scope: !5486)
!5502 = !DILocation(line: 168, column: 17, scope: !5486)
!5503 = !DILocation(line: 172, column: 1, scope: !5486)
!5504 = distinct !DISubprogram(name: "schedule_region", scope: !3, file: !3, line: 2924, type: !2327, scopeLine: 2925, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5505 = !DILocalVariable(name: "rgn", arg: 1, scope: !5504, file: !3, line: 2924, type: !990)
!5506 = !DILocation(line: 2924, column: 22, scope: !5504)
!5507 = !DILocalVariable(name: "bb", scope: !5504, file: !3, line: 2926, type: !990)
!5508 = !DILocation(line: 2926, column: 7, scope: !5504)
!5509 = !DILocalVariable(name: "sched_rgn_n_insns", scope: !5504, file: !3, line: 2927, type: !990)
!5510 = !DILocation(line: 2927, column: 7, scope: !5504)
!5511 = !DILocation(line: 2929, column: 15, scope: !5504)
!5512 = !DILocation(line: 2931, column: 21, scope: !5504)
!5513 = !DILocation(line: 2931, column: 3, scope: !5504)
!5514 = !DILocation(line: 2935, column: 7, scope: !5515)
!5515 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 2935, column: 7)
!5516 = !DILocation(line: 2935, column: 7, scope: !5504)
!5517 = !DILocation(line: 2936, column: 5, scope: !5515)
!5518 = !DILocation(line: 2938, column: 35, scope: !5504)
!5519 = !DILocation(line: 2938, column: 3, scope: !5504)
!5520 = !DILocation(line: 2940, column: 25, scope: !5504)
!5521 = !DILocation(line: 2940, column: 3, scope: !5504)
!5522 = !DILocation(line: 2943, column: 3, scope: !5504)
!5523 = !DILocation(line: 2945, column: 28, scope: !5504)
!5524 = !DILocation(line: 2945, column: 3, scope: !5504)
!5525 = !DILocation(line: 2947, column: 7, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 2947, column: 7)
!5527 = !DILocation(line: 2947, column: 7, scope: !5504)
!5528 = !DILocation(line: 2949, column: 7, scope: !5529)
!5529 = distinct !DILexicalBlock(scope: !5526, file: !3, line: 2948, column: 5)
!5530 = !DILocation(line: 2950, column: 15, scope: !5531)
!5531 = distinct !DILexicalBlock(scope: !5529, file: !3, line: 2950, column: 7)
!5532 = !DILocation(line: 2950, column: 12, scope: !5531)
!5533 = !DILocation(line: 2950, column: 20, scope: !5534)
!5534 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 2950, column: 7)
!5535 = !DILocation(line: 2950, column: 25, scope: !5534)
!5536 = !DILocation(line: 2950, column: 23, scope: !5534)
!5537 = !DILocation(line: 2950, column: 7, scope: !5531)
!5538 = !DILocalVariable(name: "first_bb", scope: !5539, file: !3, line: 2952, type: !1536)
!5539 = distinct !DILexicalBlock(scope: !5534, file: !3, line: 2951, column: 2)
!5540 = !DILocation(line: 2952, column: 16, scope: !5539)
!5541 = !DILocalVariable(name: "last_bb", scope: !5539, file: !3, line: 2952, type: !1536)
!5542 = !DILocation(line: 2952, column: 26, scope: !5539)
!5543 = !DILocalVariable(name: "head", scope: !5539, file: !3, line: 2953, type: !997)
!5544 = !DILocation(line: 2953, column: 8, scope: !5539)
!5545 = !DILocalVariable(name: "tail", scope: !5539, file: !3, line: 2953, type: !997)
!5546 = !DILocation(line: 2953, column: 14, scope: !5539)
!5547 = !DILocation(line: 2955, column: 15, scope: !5539)
!5548 = !DILocation(line: 2955, column: 13, scope: !5539)
!5549 = !DILocation(line: 2956, column: 14, scope: !5539)
!5550 = !DILocation(line: 2956, column: 12, scope: !5539)
!5551 = !DILocation(line: 2958, column: 23, scope: !5539)
!5552 = !DILocation(line: 2958, column: 33, scope: !5539)
!5553 = !DILocation(line: 2958, column: 4, scope: !5539)
!5554 = !DILocation(line: 2960, column: 25, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5539, file: !3, line: 2960, column: 8)
!5556 = !DILocation(line: 2960, column: 31, scope: !5555)
!5557 = !DILocation(line: 2960, column: 8, scope: !5555)
!5558 = !DILocation(line: 2960, column: 8, scope: !5539)
!5559 = !DILocation(line: 2962, column: 8, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 2961, column: 6)
!5561 = !DILocation(line: 2963, column: 8, scope: !5560)
!5562 = !DILocation(line: 2965, column: 38, scope: !5539)
!5563 = !DILocation(line: 2965, column: 48, scope: !5539)
!5564 = !DILocation(line: 2965, column: 4, scope: !5539)
!5565 = !DILocation(line: 2966, column: 2, scope: !5539)
!5566 = !DILocation(line: 2950, column: 46, scope: !5534)
!5567 = !DILocation(line: 2950, column: 7, scope: !5534)
!5568 = distinct !{!5568, !5537, !5569}
!5569 = !DILocation(line: 2966, column: 2, scope: !5531)
!5570 = !DILocation(line: 2967, column: 5, scope: !5529)
!5571 = !DILocation(line: 2970, column: 11, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 2970, column: 3)
!5573 = !DILocation(line: 2970, column: 8, scope: !5572)
!5574 = !DILocation(line: 2970, column: 16, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 2970, column: 3)
!5576 = !DILocation(line: 2970, column: 21, scope: !5575)
!5577 = !DILocation(line: 2970, column: 19, scope: !5575)
!5578 = !DILocation(line: 2970, column: 3, scope: !5572)
!5579 = !DILocalVariable(name: "first_bb", scope: !5580, file: !3, line: 2972, type: !1536)
!5580 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 2971, column: 5)
!5581 = !DILocation(line: 2972, column: 19, scope: !5580)
!5582 = !DILocalVariable(name: "last_bb", scope: !5580, file: !3, line: 2972, type: !1536)
!5583 = !DILocation(line: 2972, column: 29, scope: !5580)
!5584 = !DILocalVariable(name: "curr_bb", scope: !5580, file: !3, line: 2972, type: !1536)
!5585 = !DILocation(line: 2972, column: 38, scope: !5580)
!5586 = !DILocalVariable(name: "head", scope: !5580, file: !3, line: 2973, type: !997)
!5587 = !DILocation(line: 2973, column: 11, scope: !5580)
!5588 = !DILocalVariable(name: "tail", scope: !5580, file: !3, line: 2973, type: !997)
!5589 = !DILocation(line: 2973, column: 17, scope: !5580)
!5590 = !DILocation(line: 2975, column: 18, scope: !5580)
!5591 = !DILocation(line: 2975, column: 16, scope: !5580)
!5592 = !DILocation(line: 2976, column: 17, scope: !5580)
!5593 = !DILocation(line: 2976, column: 15, scope: !5580)
!5594 = !DILocation(line: 2978, column: 26, scope: !5580)
!5595 = !DILocation(line: 2978, column: 36, scope: !5580)
!5596 = !DILocation(line: 2978, column: 7, scope: !5580)
!5597 = !DILocation(line: 2980, column: 28, scope: !5598)
!5598 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 2980, column: 11)
!5599 = !DILocation(line: 2980, column: 34, scope: !5598)
!5600 = !DILocation(line: 2980, column: 11, scope: !5598)
!5601 = !DILocation(line: 2980, column: 11, scope: !5580)
!5602 = !DILocation(line: 2982, column: 4, scope: !5603)
!5603 = distinct !DILexicalBlock(scope: !5598, file: !3, line: 2981, column: 2)
!5604 = !DILocation(line: 2983, column: 4, scope: !5603)
!5605 = !DILocation(line: 2986, column: 39, scope: !5580)
!5606 = !DILocation(line: 2986, column: 7, scope: !5580)
!5607 = !DILocation(line: 2986, column: 27, scope: !5580)
!5608 = !DILocation(line: 2986, column: 37, scope: !5580)
!5609 = !DILocation(line: 2987, column: 39, scope: !5580)
!5610 = !DILocation(line: 2987, column: 7, scope: !5580)
!5611 = !DILocation(line: 2987, column: 27, scope: !5580)
!5612 = !DILocation(line: 2987, column: 37, scope: !5580)
!5613 = !DILocation(line: 2989, column: 21, scope: !5580)
!5614 = !DILocation(line: 2989, column: 27, scope: !5580)
!5615 = !DILocation(line: 2989, column: 7, scope: !5580)
!5616 = !DILocation(line: 2991, column: 24, scope: !5580)
!5617 = !DILocation(line: 2991, column: 34, scope: !5580)
!5618 = !DILocation(line: 2991, column: 7, scope: !5580)
!5619 = !DILocation(line: 2993, column: 19, scope: !5580)
!5620 = !DILocation(line: 2993, column: 17, scope: !5580)
!5621 = !DILocation(line: 2995, column: 7, scope: !5580)
!5622 = !DILocation(line: 2996, column: 53, scope: !5580)
!5623 = !DILocation(line: 2996, column: 71, scope: !5580)
!5624 = !DILocation(line: 2996, column: 7, scope: !5580)
!5625 = !DILocation(line: 2996, column: 27, scope: !5580)
!5626 = !DILocation(line: 2996, column: 51, scope: !5580)
!5627 = !DILocation(line: 2998, column: 17, scope: !5580)
!5628 = !DILocation(line: 2998, column: 15, scope: !5580)
!5629 = !DILocation(line: 2999, column: 11, scope: !5630)
!5630 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 2999, column: 11)
!5631 = !DILocation(line: 2999, column: 11, scope: !5580)
!5632 = !DILocation(line: 3001, column: 11, scope: !5633)
!5633 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 3000, column: 9)
!5634 = !DILocation(line: 3002, column: 11, scope: !5633)
!5635 = !DILocation(line: 3003, column: 32, scope: !5633)
!5636 = !DILocation(line: 3003, column: 29, scope: !5633)
!5637 = !DILocation(line: 3004, column: 9, scope: !5633)
!5638 = !DILocation(line: 3007, column: 32, scope: !5639)
!5639 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 3006, column: 9)
!5640 = !DILocation(line: 3007, column: 29, scope: !5639)
!5641 = !DILocation(line: 3011, column: 11, scope: !5642)
!5642 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 3011, column: 11)
!5643 = !DILocation(line: 3011, column: 29, scope: !5642)
!5644 = !DILocation(line: 3011, column: 11, scope: !5580)
!5645 = !DILocation(line: 3012, column: 2, scope: !5642)
!5646 = !DILocation(line: 3013, column: 5, scope: !5580)
!5647 = !DILocation(line: 2970, column: 42, scope: !5575)
!5648 = !DILocation(line: 2970, column: 3, scope: !5575)
!5649 = distinct !{!5649, !5578, !5650}
!5650 = !DILocation(line: 3013, column: 5, scope: !5572)
!5651 = !DILocation(line: 3016, column: 3, scope: !5504)
!5652 = !DILocation(line: 3018, column: 3, scope: !5504)
!5653 = !DILocation(line: 3021, column: 3, scope: !5504)
!5654 = !DILocation(line: 3024, column: 11, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 3024, column: 3)
!5656 = !DILocation(line: 3024, column: 8, scope: !5655)
!5657 = !DILocation(line: 3024, column: 16, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !5655, file: !3, line: 3024, column: 3)
!5659 = !DILocation(line: 3024, column: 21, scope: !5658)
!5660 = !DILocation(line: 3024, column: 19, scope: !5658)
!5661 = !DILocation(line: 3024, column: 3, scope: !5655)
!5662 = !DILocation(line: 3025, column: 30, scope: !5658)
!5663 = !DILocation(line: 3025, column: 5, scope: !5658)
!5664 = !DILocation(line: 3024, column: 40, scope: !5658)
!5665 = !DILocation(line: 3024, column: 3, scope: !5658)
!5666 = distinct !{!5666, !5661, !5667}
!5667 = !DILocation(line: 3025, column: 32, scope: !5655)
!5668 = !DILocation(line: 3027, column: 3, scope: !5504)
!5669 = !DILocation(line: 3029, column: 1, scope: !5504)
!5670 = distinct !DISubprogram(name: "rgn_make_new_region_out_of_new_block", scope: !3, file: !3, line: 3360, type: !5671, scopeLine: 3361, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5671 = !DISubroutineType(types: !5672)
!5672 = !{null, !1536}
!5673 = !DILocalVariable(name: "bb", arg: 1, scope: !5670, file: !3, line: 3360, type: !1536)
!5674 = !DILocation(line: 3360, column: 51, scope: !5670)
!5675 = !DILocalVariable(name: "i", scope: !5670, file: !3, line: 3362, type: !990)
!5676 = !DILocation(line: 3362, column: 7, scope: !5670)
!5677 = !DILocation(line: 3364, column: 7, scope: !5670)
!5678 = !DILocation(line: 3364, column: 5, scope: !5670)
!5679 = !DILocation(line: 3367, column: 21, scope: !5670)
!5680 = !DILocation(line: 3367, column: 25, scope: !5670)
!5681 = !DILocation(line: 3367, column: 3, scope: !5670)
!5682 = !DILocation(line: 3367, column: 16, scope: !5670)
!5683 = !DILocation(line: 3367, column: 19, scope: !5670)
!5684 = !DILocation(line: 3368, column: 3, scope: !5670)
!5685 = !DILocation(line: 3368, column: 30, scope: !5670)
!5686 = !DILocation(line: 3369, column: 3, scope: !5670)
!5687 = !DILocation(line: 3369, column: 33, scope: !5670)
!5688 = !DILocation(line: 3370, column: 3, scope: !5670)
!5689 = !DILocation(line: 3370, column: 35, scope: !5670)
!5690 = !DILocation(line: 3371, column: 32, scope: !5670)
!5691 = !DILocation(line: 3371, column: 3, scope: !5670)
!5692 = !DILocation(line: 3371, column: 30, scope: !5670)
!5693 = !DILocation(line: 3372, column: 3, scope: !5670)
!5694 = !DILocation(line: 3372, column: 27, scope: !5670)
!5695 = !DILocation(line: 3374, column: 13, scope: !5670)
!5696 = !DILocation(line: 3376, column: 29, scope: !5670)
!5697 = !DILocation(line: 3376, column: 31, scope: !5670)
!5698 = !DILocation(line: 3376, column: 3, scope: !5670)
!5699 = !DILocation(line: 3376, column: 27, scope: !5670)
!5700 = !DILocation(line: 3377, column: 1, scope: !5670)
!5701 = distinct !DISubprogram(name: "gate_handle_sched", scope: !3, file: !3, line: 3494, type: !2222, scopeLine: 3495, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5702 = !DILocation(line: 3497, column: 10, scope: !5701)
!5703 = !DILocation(line: 3497, column: 30, scope: !5701)
!5704 = !DILocation(line: 3497, column: 33, scope: !5701)
!5705 = !DILocation(line: 0, scope: !5701)
!5706 = !DILocation(line: 3497, column: 3, scope: !5701)
!5707 = distinct !DISubprogram(name: "rest_of_handle_sched", scope: !3, file: !3, line: 3505, type: !2226, scopeLine: 3506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5708 = !DILocation(line: 3508, column: 7, scope: !5709)
!5709 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 3508, column: 7)
!5710 = !DILocation(line: 3509, column: 7, scope: !5709)
!5711 = !DILocation(line: 3509, column: 12, scope: !5709)
!5712 = !DILocation(line: 3508, column: 7, scope: !5707)
!5713 = !DILocation(line: 3510, column: 5, scope: !5709)
!5714 = !DILocation(line: 3512, column: 5, scope: !5709)
!5715 = !DILocation(line: 3514, column: 3, scope: !5707)
!5716 = distinct !DISubprogram(name: "gate_handle_sched2", scope: !3, file: !3, line: 3518, type: !2222, scopeLine: 3519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5717 = !DILocation(line: 3521, column: 10, scope: !5716)
!5718 = !DILocation(line: 3521, column: 19, scope: !5716)
!5719 = !DILocation(line: 3521, column: 23, scope: !5716)
!5720 = !DILocation(line: 3521, column: 26, scope: !5716)
!5721 = !DILocation(line: 3522, column: 5, scope: !5716)
!5722 = !DILocation(line: 3522, column: 8, scope: !5716)
!5723 = !DILocation(line: 0, scope: !5716)
!5724 = !DILocation(line: 3521, column: 3, scope: !5716)
!5725 = distinct !DISubprogram(name: "rest_of_handle_sched2", scope: !3, file: !3, line: 3530, type: !2226, scopeLine: 3531, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5726 = !DILocation(line: 3533, column: 7, scope: !5727)
!5727 = distinct !DILexicalBlock(scope: !5725, file: !3, line: 3533, column: 7)
!5728 = !DILocation(line: 3534, column: 7, scope: !5727)
!5729 = !DILocation(line: 3534, column: 12, scope: !5727)
!5730 = !DILocation(line: 3533, column: 7, scope: !5725)
!5731 = !DILocation(line: 3535, column: 5, scope: !5727)
!5732 = !DILocation(line: 3540, column: 11, scope: !5733)
!5733 = distinct !DILexicalBlock(scope: !5734, file: !3, line: 3540, column: 11)
!5734 = distinct !DILexicalBlock(scope: !5727, file: !3, line: 3537, column: 5)
!5735 = !DILocation(line: 3540, column: 11, scope: !5734)
!5736 = !DILocation(line: 3541, column: 2, scope: !5733)
!5737 = !DILocation(line: 3543, column: 2, scope: !5733)
!5738 = !DILocation(line: 3546, column: 3, scope: !5725)
!5739 = distinct !DISubprogram(name: "ei_end_p", scope: !142, file: !142, line: 721, type: !5740, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5740 = !DISubroutineType(types: !5741)
!5741 = !{!1230, !2177}
!5742 = !DILocalVariable(name: "i", arg: 1, scope: !5739, file: !142, line: 721, type: !2177)
!5743 = !DILocation(line: 721, column: 25, scope: !5739)
!5744 = !DILocation(line: 723, column: 13, scope: !5739)
!5745 = !DILocation(line: 723, column: 22, scope: !5739)
!5746 = !DILocation(line: 723, column: 19, scope: !5739)
!5747 = !DILocation(line: 723, column: 10, scope: !5739)
!5748 = !DILocation(line: 723, column: 3, scope: !5739)
!5749 = distinct !DISubprogram(name: "ei_edge", scope: !142, file: !142, line: 752, type: !5750, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5750 = !DISubroutineType(types: !5751)
!5751 = !{!1553, !2177}
!5752 = !DILocalVariable(name: "i", arg: 1, scope: !5749, file: !142, line: 752, type: !2177)
!5753 = !DILocation(line: 752, column: 24, scope: !5749)
!5754 = !DILocation(line: 754, column: 10, scope: !5749)
!5755 = !DILocation(line: 754, column: 3, scope: !5749)
!5756 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !142, file: !142, line: 150, type: !5757, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5757 = !DISubroutineType(types: !5758)
!5758 = !{!7, !5759}
!5759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5760, size: 64)
!5760 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1546)
!5761 = !DILocalVariable(name: "vec_", arg: 1, scope: !5756, file: !142, line: 150, type: !5759)
!5762 = !DILocation(line: 150, column: 1, scope: !5756)
!5763 = distinct !DISubprogram(name: "ei_container", scope: !142, file: !142, line: 685, type: !5764, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5764 = !DISubroutineType(types: !5765)
!5765 = !{!1541, !2177}
!5766 = !DILocalVariable(name: "i", arg: 1, scope: !5763, file: !142, line: 685, type: !2177)
!5767 = !DILocation(line: 685, column: 29, scope: !5763)
!5768 = !DILocation(line: 687, column: 3, scope: !5763)
!5769 = !DILocation(line: 688, column: 13, scope: !5763)
!5770 = !DILocation(line: 688, column: 10, scope: !5763)
!5771 = !DILocation(line: 688, column: 3, scope: !5763)
!5772 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !142, file: !142, line: 150, type: !5773, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5773 = !DISubroutineType(types: !5774)
!5774 = !{!1553, !5759, !7}
!5775 = !DILocalVariable(name: "vec_", arg: 1, scope: !5772, file: !142, line: 150, type: !5759)
!5776 = !DILocation(line: 150, column: 1, scope: !5772)
!5777 = !DILocalVariable(name: "ix_", arg: 2, scope: !5772, file: !142, line: 150, type: !7)
!5778 = !DILocation(line: 0, scope: !5772)
!5779 = distinct !DISubprogram(name: "single_pred_p", scope: !142, file: !142, line: 634, type: !5780, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5780 = !DISubroutineType(types: !5781)
!5781 = !{!1230, !5782}
!5782 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !998, line: 112, baseType: !5783)
!5783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5784, size: 64)
!5784 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1538)
!5785 = !DILocalVariable(name: "bb", arg: 1, scope: !5779, file: !142, line: 634, type: !5782)
!5786 = !DILocation(line: 634, column: 34, scope: !5779)
!5787 = !DILocation(line: 636, column: 10, scope: !5779)
!5788 = !DILocation(line: 636, column: 33, scope: !5779)
!5789 = !DILocation(line: 636, column: 3, scope: !5779)
!5790 = distinct !DISubprogram(name: "single_pred", scope: !142, file: !142, line: 672, type: !5791, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5791 = !DISubroutineType(types: !5792)
!5792 = !{!1536, !5782}
!5793 = !DILocalVariable(name: "bb", arg: 1, scope: !5790, file: !142, line: 672, type: !5782)
!5794 = !DILocation(line: 672, column: 32, scope: !5790)
!5795 = !DILocation(line: 674, column: 28, scope: !5790)
!5796 = !DILocation(line: 674, column: 10, scope: !5790)
!5797 = !DILocation(line: 674, column: 33, scope: !5790)
!5798 = !DILocation(line: 674, column: 3, scope: !5790)
!5799 = distinct !DISubprogram(name: "single_pred_edge", scope: !142, file: !142, line: 653, type: !5800, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5800 = !DISubroutineType(types: !5801)
!5801 = !{!1553, !5782}
!5802 = !DILocalVariable(name: "bb", arg: 1, scope: !5799, file: !142, line: 653, type: !5782)
!5803 = !DILocation(line: 653, column: 37, scope: !5799)
!5804 = !DILocation(line: 655, column: 3, scope: !5799)
!5805 = !DILocation(line: 656, column: 10, scope: !5799)
!5806 = !DILocation(line: 656, column: 3, scope: !5799)
!5807 = distinct !DISubprogram(name: "haifa_find_rgns", scope: !3, file: !3, line: 611, type: !2319, scopeLine: 612, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!5808 = !DILocalVariable(name: "max_hdr", scope: !5807, file: !3, line: 613, type: !991)
!5809 = !DILocation(line: 613, column: 8, scope: !5807)
!5810 = !DILocalVariable(name: "dfs_nr", scope: !5807, file: !3, line: 613, type: !991)
!5811 = !DILocation(line: 613, column: 18, scope: !5807)
!5812 = !DILocalVariable(name: "degree", scope: !5807, file: !3, line: 613, type: !991)
!5813 = !DILocation(line: 613, column: 27, scope: !5807)
!5814 = !DILocalVariable(name: "no_loops", scope: !5807, file: !3, line: 614, type: !1025)
!5815 = !DILocation(line: 614, column: 8, scope: !5807)
!5816 = !DILocalVariable(name: "node", scope: !5807, file: !3, line: 615, type: !990)
!5817 = !DILocation(line: 615, column: 7, scope: !5807)
!5818 = !DILocalVariable(name: "child", scope: !5807, file: !3, line: 615, type: !990)
!5819 = !DILocation(line: 615, column: 13, scope: !5807)
!5820 = !DILocalVariable(name: "loop_head", scope: !5807, file: !3, line: 615, type: !990)
!5821 = !DILocation(line: 615, column: 20, scope: !5807)
!5822 = !DILocalVariable(name: "i", scope: !5807, file: !3, line: 615, type: !990)
!5823 = !DILocation(line: 615, column: 31, scope: !5807)
!5824 = !DILocalVariable(name: "head", scope: !5807, file: !3, line: 615, type: !990)
!5825 = !DILocation(line: 615, column: 34, scope: !5807)
!5826 = !DILocalVariable(name: "tail", scope: !5807, file: !3, line: 615, type: !990)
!5827 = !DILocation(line: 615, column: 40, scope: !5807)
!5828 = !DILocalVariable(name: "count", scope: !5807, file: !3, line: 616, type: !990)
!5829 = !DILocation(line: 616, column: 7, scope: !5807)
!5830 = !DILocalVariable(name: "sp", scope: !5807, file: !3, line: 616, type: !990)
!5831 = !DILocation(line: 616, column: 18, scope: !5807)
!5832 = !DILocalVariable(name: "idx", scope: !5807, file: !3, line: 616, type: !990)
!5833 = !DILocation(line: 616, column: 22, scope: !5807)
!5834 = !DILocalVariable(name: "current_edge", scope: !5807, file: !3, line: 617, type: !2177)
!5835 = !DILocation(line: 617, column: 17, scope: !5807)
!5836 = !DILocalVariable(name: "stack", scope: !5807, file: !3, line: 618, type: !2176)
!5837 = !DILocation(line: 618, column: 18, scope: !5807)
!5838 = !DILocalVariable(name: "num_bbs", scope: !5807, file: !3, line: 619, type: !990)
!5839 = !DILocation(line: 619, column: 7, scope: !5807)
!5840 = !DILocalVariable(name: "num_insns", scope: !5807, file: !3, line: 619, type: !990)
!5841 = !DILocation(line: 619, column: 16, scope: !5807)
!5842 = !DILocalVariable(name: "unreachable", scope: !5807, file: !3, line: 619, type: !990)
!5843 = !DILocation(line: 619, column: 27, scope: !5807)
!5844 = !DILocalVariable(name: "too_large_failure", scope: !5807, file: !3, line: 620, type: !990)
!5845 = !DILocation(line: 620, column: 7, scope: !5807)
!5846 = !DILocalVariable(name: "bb", scope: !5807, file: !3, line: 621, type: !1536)
!5847 = !DILocation(line: 621, column: 15, scope: !5807)
!5848 = !DILocalVariable(name: "header", scope: !5807, file: !3, line: 624, type: !2258)
!5849 = !DILocation(line: 624, column: 11, scope: !5807)
!5850 = !DILocalVariable(name: "inner", scope: !5807, file: !3, line: 627, type: !2258)
!5851 = !DILocation(line: 627, column: 11, scope: !5807)
!5852 = !DILocalVariable(name: "in_queue", scope: !5807, file: !3, line: 630, type: !2258)
!5853 = !DILocation(line: 630, column: 11, scope: !5807)
!5854 = !DILocalVariable(name: "in_stack", scope: !5807, file: !3, line: 633, type: !2258)
!5855 = !DILocation(line: 633, column: 11, scope: !5807)
!5856 = !DILocation(line: 645, column: 13, scope: !5807)
!5857 = !DILocation(line: 645, column: 11, scope: !5807)
!5858 = !DILocation(line: 646, column: 12, scope: !5807)
!5859 = !DILocation(line: 646, column: 10, scope: !5807)
!5860 = !DILocation(line: 647, column: 11, scope: !5807)
!5861 = !DILocation(line: 647, column: 9, scope: !5807)
!5862 = !DILocation(line: 649, column: 26, scope: !5807)
!5863 = !DILocation(line: 649, column: 11, scope: !5807)
!5864 = !DILocation(line: 649, column: 9, scope: !5807)
!5865 = !DILocation(line: 650, column: 17, scope: !5807)
!5866 = !DILocation(line: 650, column: 3, scope: !5807)
!5867 = !DILocation(line: 652, column: 27, scope: !5807)
!5868 = !DILocation(line: 652, column: 12, scope: !5807)
!5869 = !DILocation(line: 652, column: 10, scope: !5807)
!5870 = !DILocation(line: 653, column: 17, scope: !5807)
!5871 = !DILocation(line: 653, column: 3, scope: !5807)
!5872 = !DILocation(line: 655, column: 29, scope: !5807)
!5873 = !DILocation(line: 655, column: 14, scope: !5807)
!5874 = !DILocation(line: 655, column: 12, scope: !5807)
!5875 = !DILocation(line: 656, column: 17, scope: !5807)
!5876 = !DILocation(line: 656, column: 3, scope: !5807)
!5877 = !DILocation(line: 658, column: 29, scope: !5807)
!5878 = !DILocation(line: 658, column: 14, scope: !5807)
!5879 = !DILocation(line: 658, column: 12, scope: !5807)
!5880 = !DILocation(line: 659, column: 17, scope: !5807)
!5881 = !DILocation(line: 659, column: 3, scope: !5807)
!5882 = !DILocation(line: 661, column: 10, scope: !5883)
!5883 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 661, column: 3)
!5884 = !DILocation(line: 661, column: 8, scope: !5883)
!5885 = !DILocation(line: 661, column: 15, scope: !5886)
!5886 = distinct !DILexicalBlock(scope: !5883, file: !3, line: 661, column: 3)
!5887 = !DILocation(line: 661, column: 19, scope: !5886)
!5888 = !DILocation(line: 661, column: 17, scope: !5886)
!5889 = !DILocation(line: 661, column: 3, scope: !5883)
!5890 = !DILocation(line: 662, column: 5, scope: !5886)
!5891 = !DILocation(line: 662, column: 13, scope: !5886)
!5892 = !DILocation(line: 662, column: 16, scope: !5886)
!5893 = !DILocation(line: 661, column: 38, scope: !5886)
!5894 = !DILocation(line: 661, column: 3, scope: !5886)
!5895 = distinct !{!5895, !5889, !5896}
!5896 = !DILocation(line: 662, column: 19, scope: !5883)
!5897 = !DILocation(line: 669, column: 18, scope: !5807)
!5898 = !DILocation(line: 670, column: 6, scope: !5807)
!5899 = !DILocation(line: 672, column: 3, scope: !5807)
!5900 = !DILocation(line: 674, column: 11, scope: !5901)
!5901 = distinct !DILexicalBlock(scope: !5902, file: !3, line: 674, column: 11)
!5902 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 673, column: 5)
!5903 = !DILocation(line: 674, column: 11, scope: !5902)
!5904 = !DILocation(line: 679, column: 4, scope: !5905)
!5905 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 675, column: 2)
!5906 = !DILocation(line: 679, column: 11, scope: !5905)
!5907 = !DILocation(line: 679, column: 14, scope: !5905)
!5908 = !DILocation(line: 679, column: 19, scope: !5905)
!5909 = !DILocation(line: 679, column: 22, scope: !5905)
!5910 = !DILocation(line: 0, scope: !5905)
!5911 = !DILocation(line: 682, column: 23, scope: !5912)
!5912 = distinct !DILexicalBlock(scope: !5905, file: !3, line: 680, column: 6)
!5913 = !DILocation(line: 682, column: 31, scope: !5912)
!5914 = !DILocation(line: 683, column: 15, scope: !5912)
!5915 = !DILocation(line: 683, column: 39, scope: !5912)
!5916 = !DILocation(line: 683, column: 44, scope: !5912)
!5917 = !DILocation(line: 683, column: 13, scope: !5912)
!5918 = !DILocation(line: 684, column: 8, scope: !5912)
!5919 = !DILocation(line: 685, column: 16, scope: !5912)
!5920 = !DILocation(line: 685, column: 40, scope: !5912)
!5921 = !DILocation(line: 685, column: 46, scope: !5912)
!5922 = !DILocation(line: 685, column: 14, scope: !5912)
!5923 = !DILocation(line: 686, column: 8, scope: !5912)
!5924 = !DILocation(line: 687, column: 19, scope: !5912)
!5925 = !DILocation(line: 687, column: 29, scope: !5912)
!5926 = !DILocation(line: 687, column: 8, scope: !5912)
!5927 = !DILocation(line: 688, column: 12, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5912, file: !3, line: 688, column: 12)
!5929 = !DILocation(line: 688, column: 20, scope: !5928)
!5930 = !DILocation(line: 688, column: 27, scope: !5928)
!5931 = !DILocation(line: 688, column: 32, scope: !5928)
!5932 = !DILocation(line: 688, column: 35, scope: !5928)
!5933 = !DILocation(line: 688, column: 12, scope: !5912)
!5934 = !DILocation(line: 689, column: 3, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5936, file: !3, line: 689, column: 3)
!5936 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 689, column: 3)
!5937 = !DILocation(line: 689, column: 3, scope: !5936)
!5938 = !DILocation(line: 689, column: 3, scope: !5939)
!5939 = distinct !DILexicalBlock(scope: !5935, file: !3, line: 689, column: 3)
!5940 = !DILocation(line: 689, column: 3, scope: !5941)
!5941 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 689, column: 3)
!5942 = !DILocation(line: 689, column: 3, scope: !5943)
!5943 = distinct !DILexicalBlock(scope: !5941, file: !3, line: 689, column: 3)
!5944 = !DILocation(line: 690, column: 8, scope: !5912)
!5945 = distinct !{!5945, !5904, !5946}
!5946 = !DILocation(line: 691, column: 6, scope: !5905)
!5947 = !DILocation(line: 694, column: 8, scope: !5948)
!5948 = distinct !DILexicalBlock(scope: !5905, file: !3, line: 694, column: 8)
!5949 = !DILocation(line: 694, column: 11, scope: !5948)
!5950 = !DILocation(line: 694, column: 15, scope: !5948)
!5951 = !DILocation(line: 694, column: 18, scope: !5948)
!5952 = !DILocation(line: 694, column: 8, scope: !5905)
!5953 = !DILocation(line: 695, column: 6, scope: !5948)
!5954 = !DILocation(line: 698, column: 4, scope: !5905)
!5955 = distinct !{!5955, !5899, !5956}
!5956 = !DILocation(line: 745, column: 5, scope: !5807)
!5957 = !DILocation(line: 702, column: 14, scope: !5902)
!5958 = !DILocation(line: 702, column: 38, scope: !5902)
!5959 = !DILocation(line: 702, column: 43, scope: !5902)
!5960 = !DILocation(line: 702, column: 12, scope: !5902)
!5961 = !DILocation(line: 703, column: 7, scope: !5902)
!5962 = !DILocation(line: 704, column: 16, scope: !5902)
!5963 = !DILocation(line: 704, column: 26, scope: !5902)
!5964 = !DILocation(line: 704, column: 7, scope: !5902)
!5965 = !DILocation(line: 705, column: 22, scope: !5902)
!5966 = !DILocation(line: 705, column: 7, scope: !5902)
!5967 = !DILocation(line: 705, column: 14, scope: !5902)
!5968 = !DILocation(line: 705, column: 20, scope: !5902)
!5969 = !DILocation(line: 708, column: 15, scope: !5902)
!5970 = !DILocation(line: 708, column: 39, scope: !5902)
!5971 = !DILocation(line: 708, column: 45, scope: !5902)
!5972 = !DILocation(line: 708, column: 13, scope: !5902)
!5973 = !DILocation(line: 709, column: 11, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5902, file: !3, line: 709, column: 11)
!5975 = !DILocation(line: 709, column: 17, scope: !5974)
!5976 = !DILocation(line: 709, column: 11, scope: !5902)
!5977 = !DILocation(line: 711, column: 4, scope: !5978)
!5978 = distinct !DILexicalBlock(scope: !5974, file: !3, line: 710, column: 2)
!5979 = !DILocation(line: 712, column: 4, scope: !5978)
!5980 = !DILocation(line: 713, column: 4, scope: !5978)
!5981 = !DILocation(line: 719, column: 11, scope: !5982)
!5982 = distinct !DILexicalBlock(scope: !5902, file: !3, line: 719, column: 11)
!5983 = !DILocation(line: 719, column: 11, scope: !5902)
!5984 = !DILocation(line: 721, column: 13, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5982, file: !3, line: 720, column: 2)
!5986 = !DILocation(line: 722, column: 13, scope: !5985)
!5987 = !DILocation(line: 722, column: 21, scope: !5985)
!5988 = !DILocation(line: 722, column: 4, scope: !5985)
!5989 = !DILocation(line: 723, column: 4, scope: !5990)
!5990 = distinct !DILexicalBlock(scope: !5991, file: !3, line: 723, column: 4)
!5991 = distinct !DILexicalBlock(scope: !5985, file: !3, line: 723, column: 4)
!5992 = !DILocation(line: 723, column: 4, scope: !5991)
!5993 = !DILocation(line: 723, column: 4, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5990, file: !3, line: 723, column: 4)
!5995 = !DILocation(line: 723, column: 4, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5994, file: !3, line: 723, column: 4)
!5997 = !DILocation(line: 723, column: 4, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5996, file: !3, line: 723, column: 4)
!5999 = !DILocation(line: 724, column: 4, scope: !5985)
!6000 = !DILocation(line: 725, column: 4, scope: !5985)
!6001 = !DILocation(line: 726, column: 4, scope: !5985)
!6002 = !DILocation(line: 732, column: 11, scope: !6003)
!6003 = distinct !DILexicalBlock(scope: !5902, file: !3, line: 732, column: 11)
!6004 = !DILocation(line: 732, column: 18, scope: !6003)
!6005 = !DILocation(line: 732, column: 11, scope: !5902)
!6006 = !DILocation(line: 734, column: 8, scope: !6007)
!6007 = distinct !DILexicalBlock(scope: !6008, file: !3, line: 734, column: 8)
!6008 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 733, column: 2)
!6009 = !DILocation(line: 734, column: 16, scope: !6007)
!6010 = !DILocation(line: 734, column: 23, scope: !6007)
!6011 = !DILocation(line: 734, column: 28, scope: !6007)
!6012 = !DILocation(line: 734, column: 31, scope: !6007)
!6013 = !DILocation(line: 734, column: 8, scope: !6008)
!6014 = !DILocation(line: 735, column: 6, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !6016, file: !3, line: 735, column: 6)
!6016 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 735, column: 6)
!6017 = !DILocation(line: 735, column: 6, scope: !6016)
!6018 = !DILocation(line: 735, column: 6, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !6015, file: !3, line: 735, column: 6)
!6020 = !DILocation(line: 735, column: 6, scope: !6021)
!6021 = distinct !DILexicalBlock(scope: !6019, file: !3, line: 735, column: 6)
!6022 = !DILocation(line: 735, column: 6, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !6021, file: !3, line: 735, column: 6)
!6024 = !DILocation(line: 736, column: 4, scope: !6008)
!6025 = !DILocation(line: 737, column: 4, scope: !6008)
!6026 = !DILocation(line: 738, column: 4, scope: !6008)
!6027 = !DILocation(line: 742, column: 7, scope: !5902)
!6028 = !DILocation(line: 742, column: 13, scope: !5902)
!6029 = !DILocation(line: 742, column: 21, scope: !5902)
!6030 = !DILocation(line: 743, column: 7, scope: !5902)
!6031 = !DILocation(line: 744, column: 22, scope: !5902)
!6032 = !DILocation(line: 748, column: 3, scope: !6033)
!6033 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 748, column: 3)
!6034 = !DILocation(line: 748, column: 3, scope: !6035)
!6035 = distinct !DILexicalBlock(scope: !6033, file: !3, line: 748, column: 3)
!6036 = !DILocalVariable(name: "ei", scope: !6037, file: !3, line: 750, type: !2177)
!6037 = distinct !DILexicalBlock(scope: !6035, file: !3, line: 749, column: 5)
!6038 = !DILocation(line: 750, column: 21, scope: !6037)
!6039 = !DILocalVariable(name: "e", scope: !6037, file: !3, line: 751, type: !1553)
!6040 = !DILocation(line: 751, column: 12, scope: !6037)
!6041 = !DILocation(line: 752, column: 7, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6037, file: !3, line: 752, column: 7)
!6043 = !DILocation(line: 752, column: 7, scope: !6044)
!6044 = distinct !DILexicalBlock(scope: !6042, file: !3, line: 752, column: 7)
!6045 = !DILocation(line: 753, column: 2, scope: !6044)
!6046 = !DILocation(line: 753, column: 5, scope: !6044)
!6047 = !DILocation(line: 753, column: 9, scope: !6044)
!6048 = distinct !{!6048, !6041, !6049}
!6049 = !DILocation(line: 753, column: 11, scope: !6042)
!6050 = !DILocation(line: 754, column: 5, scope: !6037)
!6051 = distinct !{!6051, !6032, !6052}
!6052 = !DILocation(line: 754, column: 5, scope: !6033)
!6053 = !DILocation(line: 764, column: 15, scope: !5807)
!6054 = !DILocation(line: 765, column: 3, scope: !6055)
!6055 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 765, column: 3)
!6056 = !DILocation(line: 765, column: 3, scope: !6057)
!6057 = distinct !DILexicalBlock(scope: !6055, file: !3, line: 765, column: 3)
!6058 = !DILocation(line: 766, column: 9, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !6057, file: !3, line: 766, column: 9)
!6060 = !DILocation(line: 766, column: 16, scope: !6059)
!6061 = !DILocation(line: 766, column: 20, scope: !6059)
!6062 = !DILocation(line: 766, column: 27, scope: !6059)
!6063 = !DILocation(line: 766, column: 9, scope: !6057)
!6064 = !DILocation(line: 768, column: 14, scope: !6065)
!6065 = distinct !DILexicalBlock(scope: !6059, file: !3, line: 767, column: 7)
!6066 = !DILocation(line: 769, column: 2, scope: !6065)
!6067 = !DILocation(line: 766, column: 30, scope: !6059)
!6068 = distinct !{!6068, !6054, !6069}
!6069 = !DILocation(line: 770, column: 7, scope: !6055)
!6070 = !DILocation(line: 774, column: 12, scope: !5807)
!6071 = !DILocation(line: 774, column: 10, scope: !5807)
!6072 = !DILocation(line: 776, column: 3, scope: !6073)
!6073 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 776, column: 3)
!6074 = !DILocation(line: 776, column: 3, scope: !6075)
!6075 = distinct !DILexicalBlock(scope: !6073, file: !3, line: 776, column: 3)
!6076 = !DILocation(line: 777, column: 25, scope: !6075)
!6077 = !DILocation(line: 777, column: 5, scope: !6075)
!6078 = !DILocation(line: 777, column: 12, scope: !6075)
!6079 = !DILocation(line: 777, column: 16, scope: !6075)
!6080 = !DILocation(line: 777, column: 23, scope: !6075)
!6081 = distinct !{!6081, !6072, !6082}
!6082 = !DILocation(line: 777, column: 25, scope: !6073)
!6083 = !DILocation(line: 781, column: 8, scope: !6084)
!6084 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 781, column: 7)
!6085 = !DILocation(line: 781, column: 7, scope: !5807)
!6086 = !DILocalVariable(name: "queue", scope: !6087, file: !3, line: 783, type: !991)
!6087 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 782, column: 5)
!6088 = !DILocation(line: 783, column: 12, scope: !6087)
!6089 = !DILocalVariable(name: "degree1", scope: !6087, file: !3, line: 783, type: !991)
!6090 = !DILocation(line: 783, column: 20, scope: !6087)
!6091 = !DILocalVariable(name: "extended_rgn_header", scope: !6087, file: !3, line: 788, type: !2258)
!6092 = !DILocation(line: 788, column: 15, scope: !6087)
!6093 = !DILocalVariable(name: "extend_regions_p", scope: !6087, file: !3, line: 789, type: !1230)
!6094 = !DILocation(line: 789, column: 12, scope: !6087)
!6095 = !DILocation(line: 791, column: 11, scope: !6096)
!6096 = distinct !DILexicalBlock(scope: !6087, file: !3, line: 791, column: 11)
!6097 = !DILocation(line: 791, column: 11, scope: !6087)
!6098 = !DILocation(line: 792, column: 11, scope: !6096)
!6099 = !DILocation(line: 792, column: 2, scope: !6096)
!6100 = !DILocation(line: 797, column: 15, scope: !6087)
!6101 = !DILocation(line: 797, column: 13, scope: !6087)
!6102 = !DILocation(line: 799, column: 26, scope: !6087)
!6103 = !DILocation(line: 799, column: 77, scope: !6087)
!6104 = !DILocation(line: 799, column: 24, scope: !6087)
!6105 = !DILocation(line: 800, column: 11, scope: !6106)
!6106 = distinct !DILexicalBlock(scope: !6087, file: !3, line: 800, column: 11)
!6107 = !DILocation(line: 800, column: 11, scope: !6087)
!6108 = !DILocation(line: 802, column: 21, scope: !6109)
!6109 = distinct !DILexicalBlock(scope: !6106, file: !3, line: 801, column: 9)
!6110 = !DILocation(line: 802, column: 19, scope: !6109)
!6111 = !DILocation(line: 803, column: 48, scope: !6109)
!6112 = !DILocation(line: 803, column: 33, scope: !6109)
!6113 = !DILocation(line: 803, column: 31, scope: !6109)
!6114 = !DILocation(line: 804, column: 25, scope: !6109)
!6115 = !DILocation(line: 804, column: 11, scope: !6109)
!6116 = !DILocation(line: 805, column: 2, scope: !6109)
!6117 = !DILocation(line: 809, column: 7, scope: !6118)
!6118 = distinct !DILexicalBlock(scope: !6087, file: !3, line: 809, column: 7)
!6119 = !DILocation(line: 809, column: 7, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6118, file: !3, line: 809, column: 7)
!6121 = !DILocation(line: 811, column: 8, scope: !6122)
!6122 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 811, column: 8)
!6123 = distinct !DILexicalBlock(scope: !6120, file: !3, line: 810, column: 2)
!6124 = !DILocation(line: 811, column: 37, scope: !6122)
!6125 = !DILocation(line: 811, column: 40, scope: !6122)
!6126 = !DILocation(line: 811, column: 8, scope: !6123)
!6127 = !DILocalVariable(name: "e", scope: !6128, file: !3, line: 813, type: !1553)
!6128 = distinct !DILexicalBlock(scope: !6122, file: !3, line: 812, column: 6)
!6129 = !DILocation(line: 813, column: 13, scope: !6128)
!6130 = !DILocalVariable(name: "ei", scope: !6128, file: !3, line: 814, type: !2177)
!6131 = !DILocation(line: 814, column: 22, scope: !6128)
!6132 = !DILocalVariable(name: "jbb", scope: !6128, file: !3, line: 815, type: !1536)
!6133 = !DILocation(line: 815, column: 20, scope: !6128)
!6134 = !DILocation(line: 828, column: 8, scope: !6135)
!6135 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 828, column: 8)
!6136 = !DILocation(line: 828, column: 8, scope: !6137)
!6137 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 828, column: 8)
!6138 = !DILocation(line: 832, column: 9, scope: !6139)
!6139 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 832, column: 9)
!6140 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 829, column: 3)
!6141 = !DILocation(line: 832, column: 13, scope: !6139)
!6142 = !DILocation(line: 832, column: 22, scope: !6139)
!6143 = !DILocation(line: 832, column: 30, scope: !6139)
!6144 = !DILocation(line: 832, column: 35, scope: !6139)
!6145 = !DILocation(line: 832, column: 19, scope: !6139)
!6146 = !DILocation(line: 832, column: 42, scope: !6139)
!6147 = !DILocation(line: 832, column: 45, scope: !6139)
!6148 = !DILocation(line: 832, column: 51, scope: !6139)
!6149 = !DILocation(line: 832, column: 48, scope: !6139)
!6150 = !DILocation(line: 832, column: 9, scope: !6140)
!6151 = !DILocation(line: 836, column: 46, scope: !6152)
!6152 = distinct !DILexicalBlock(scope: !6153, file: !3, line: 836, column: 13)
!6153 = distinct !DILexicalBlock(scope: !6139, file: !3, line: 833, column: 7)
!6154 = !DILocation(line: 836, column: 51, scope: !6152)
!6155 = !DILocation(line: 836, column: 14, scope: !6152)
!6156 = !DILocation(line: 836, column: 13, scope: !6153)
!6157 = !DILocation(line: 837, column: 4, scope: !6152)
!6158 = !DILocation(line: 838, column: 7, scope: !6153)
!6159 = !DILocation(line: 839, column: 3, scope: !6140)
!6160 = distinct !{!6160, !6134, !6161}
!6161 = !DILocation(line: 839, column: 3, scope: !6135)
!6162 = !DILocation(line: 844, column: 12, scope: !6163)
!6163 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 844, column: 12)
!6164 = !DILocation(line: 844, column: 19, scope: !6163)
!6165 = !DILocation(line: 844, column: 16, scope: !6163)
!6166 = !DILocation(line: 844, column: 12, scope: !6128)
!6167 = !DILocation(line: 845, column: 3, scope: !6163)
!6168 = !DILocation(line: 849, column: 20, scope: !6128)
!6169 = !DILocation(line: 849, column: 13, scope: !6128)
!6170 = !DILocation(line: 850, column: 26, scope: !6128)
!6171 = !DILocation(line: 851, column: 20, scope: !6128)
!6172 = !DILocation(line: 851, column: 28, scope: !6128)
!6173 = !DILocation(line: 851, column: 32, scope: !6128)
!6174 = !DILocation(line: 851, column: 18, scope: !6128)
!6175 = !DILocation(line: 853, column: 19, scope: !6176)
!6176 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 853, column: 19)
!6177 = !DILocation(line: 853, column: 19, scope: !6128)
!6178 = !DILocation(line: 857, column: 25, scope: !6176)
!6179 = !DILocation(line: 857, column: 17, scope: !6176)
!6180 = !DILocation(line: 857, column: 34, scope: !6176)
!6181 = !DILocation(line: 857, column: 42, scope: !6176)
!6182 = !DILocation(line: 857, column: 59, scope: !6176)
!6183 = !DILocation(line: 861, column: 8, scope: !6184)
!6184 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 861, column: 8)
!6185 = !DILocation(line: 861, column: 8, scope: !6186)
!6186 = distinct !DILexicalBlock(scope: !6184, file: !3, line: 861, column: 8)
!6187 = !DILocation(line: 862, column: 7, scope: !6188)
!6188 = distinct !DILexicalBlock(scope: !6186, file: !3, line: 862, column: 7)
!6189 = !DILocation(line: 862, column: 10, scope: !6188)
!6190 = !DILocation(line: 862, column: 18, scope: !6188)
!6191 = !DILocation(line: 862, column: 15, scope: !6188)
!6192 = !DILocation(line: 862, column: 7, scope: !6186)
!6193 = !DILocation(line: 863, column: 7, scope: !6188)
!6194 = !DILocation(line: 863, column: 14, scope: !6188)
!6195 = !DILocation(line: 863, column: 17, scope: !6188)
!6196 = !DILocation(line: 863, column: 23, scope: !6188)
!6197 = !DILocation(line: 863, column: 5, scope: !6188)
!6198 = distinct !{!6198, !6183, !6199}
!6199 = !DILocation(line: 863, column: 28, scope: !6184)
!6200 = !DILocation(line: 866, column: 16, scope: !6128)
!6201 = !DILocation(line: 867, column: 20, scope: !6128)
!6202 = !DILocation(line: 867, column: 39, scope: !6128)
!6203 = !DILocation(line: 867, column: 65, scope: !6128)
!6204 = !DILocation(line: 867, column: 18, scope: !6128)
!6205 = !DILocation(line: 873, column: 12, scope: !6206)
!6206 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 873, column: 12)
!6207 = !DILocation(line: 873, column: 12, scope: !6128)
!6208 = !DILocation(line: 875, column: 5, scope: !6209)
!6209 = distinct !DILexicalBlock(scope: !6210, file: !3, line: 875, column: 5)
!6210 = distinct !DILexicalBlock(scope: !6206, file: !3, line: 874, column: 3)
!6211 = !DILocation(line: 875, column: 5, scope: !6212)
!6212 = distinct !DILexicalBlock(scope: !6209, file: !3, line: 875, column: 5)
!6213 = !DILocation(line: 878, column: 26, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 878, column: 11)
!6215 = !DILocation(line: 878, column: 11, scope: !6214)
!6216 = !DILocation(line: 879, column: 4, scope: !6214)
!6217 = !DILocation(line: 879, column: 20, scope: !6214)
!6218 = !DILocation(line: 879, column: 7, scope: !6214)
!6219 = !DILocation(line: 879, column: 28, scope: !6214)
!6220 = !DILocation(line: 879, column: 25, scope: !6214)
!6221 = !DILocation(line: 878, column: 11, scope: !6212)
!6222 = !DILocation(line: 881, column: 20, scope: !6223)
!6223 = distinct !DILexicalBlock(scope: !6214, file: !3, line: 880, column: 9)
!6224 = !DILocation(line: 881, column: 25, scope: !6223)
!6225 = !DILocation(line: 881, column: 4, scope: !6223)
!6226 = !DILocation(line: 881, column: 10, scope: !6223)
!6227 = !DILocation(line: 881, column: 18, scope: !6223)
!6228 = !DILocation(line: 882, column: 13, scope: !6223)
!6229 = !DILocation(line: 882, column: 23, scope: !6223)
!6230 = !DILocation(line: 882, column: 28, scope: !6223)
!6231 = !DILocation(line: 882, column: 4, scope: !6223)
!6232 = !DILocation(line: 884, column: 19, scope: !6233)
!6233 = distinct !DILexicalBlock(scope: !6223, file: !3, line: 884, column: 8)
!6234 = !DILocation(line: 884, column: 24, scope: !6233)
!6235 = !DILocation(line: 884, column: 8, scope: !6233)
!6236 = !DILocation(line: 884, column: 8, scope: !6223)
!6237 = !DILocation(line: 886, column: 26, scope: !6238)
!6238 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 885, column: 6)
!6239 = !DILocation(line: 887, column: 8, scope: !6238)
!6240 = !DILocation(line: 889, column: 9, scope: !6223)
!6241 = distinct !{!6241, !6208, !6242}
!6242 = !DILocation(line: 889, column: 9, scope: !6209)
!6243 = !DILocation(line: 890, column: 3, scope: !6210)
!6244 = !DILocalVariable(name: "e", scope: !6245, file: !3, line: 893, type: !1553)
!6245 = distinct !DILexicalBlock(scope: !6206, file: !3, line: 892, column: 3)
!6246 = !DILocation(line: 893, column: 10, scope: !6245)
!6247 = !DILocation(line: 895, column: 5, scope: !6248)
!6248 = distinct !DILexicalBlock(scope: !6245, file: !3, line: 895, column: 5)
!6249 = !DILocation(line: 895, column: 5, scope: !6250)
!6250 = distinct !DILexicalBlock(scope: !6248, file: !3, line: 895, column: 5)
!6251 = !DILocation(line: 897, column: 13, scope: !6252)
!6252 = distinct !DILexicalBlock(scope: !6253, file: !3, line: 897, column: 13)
!6253 = distinct !DILexicalBlock(scope: !6250, file: !3, line: 896, column: 7)
!6254 = !DILocation(line: 897, column: 16, scope: !6252)
!6255 = !DILocation(line: 897, column: 23, scope: !6252)
!6256 = !DILocation(line: 897, column: 20, scope: !6252)
!6257 = !DILocation(line: 897, column: 13, scope: !6253)
!6258 = !DILocation(line: 898, column: 4, scope: !6252)
!6259 = !DILocation(line: 900, column: 16, scope: !6253)
!6260 = !DILocation(line: 900, column: 19, scope: !6253)
!6261 = !DILocation(line: 900, column: 24, scope: !6253)
!6262 = !DILocation(line: 900, column: 14, scope: !6253)
!6263 = !DILocation(line: 902, column: 13, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6253, file: !3, line: 902, column: 13)
!6265 = !DILocation(line: 902, column: 21, scope: !6264)
!6266 = !DILocation(line: 902, column: 30, scope: !6264)
!6267 = !DILocation(line: 902, column: 27, scope: !6264)
!6268 = !DILocation(line: 902, column: 40, scope: !6264)
!6269 = !DILocation(line: 902, column: 43, scope: !6264)
!6270 = !DILocation(line: 902, column: 51, scope: !6264)
!6271 = !DILocation(line: 902, column: 55, scope: !6264)
!6272 = !DILocation(line: 902, column: 48, scope: !6264)
!6273 = !DILocation(line: 902, column: 13, scope: !6253)
!6274 = !DILocation(line: 905, column: 22, scope: !6275)
!6275 = distinct !DILexicalBlock(scope: !6264, file: !3, line: 903, column: 4)
!6276 = !DILocation(line: 905, column: 6, scope: !6275)
!6277 = !DILocation(line: 905, column: 12, scope: !6275)
!6278 = !DILocation(line: 905, column: 20, scope: !6275)
!6279 = !DILocation(line: 906, column: 15, scope: !6275)
!6280 = !DILocation(line: 906, column: 25, scope: !6275)
!6281 = !DILocation(line: 906, column: 6, scope: !6275)
!6282 = !DILocation(line: 908, column: 21, scope: !6283)
!6283 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 908, column: 10)
!6284 = !DILocation(line: 908, column: 10, scope: !6283)
!6285 = !DILocation(line: 908, column: 10, scope: !6275)
!6286 = !DILocation(line: 910, column: 28, scope: !6287)
!6287 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 909, column: 8)
!6288 = !DILocation(line: 911, column: 10, scope: !6287)
!6289 = !DILocation(line: 913, column: 4, scope: !6275)
!6290 = !DILocation(line: 914, column: 7, scope: !6253)
!6291 = distinct !{!6291, !6247, !6292}
!6292 = !DILocation(line: 914, column: 7, scope: !6248)
!6293 = !DILocation(line: 947, column: 8, scope: !6128)
!6294 = !DILocation(line: 947, column: 15, scope: !6128)
!6295 = !DILocation(line: 947, column: 22, scope: !6128)
!6296 = !DILocation(line: 947, column: 20, scope: !6128)
!6297 = !DILocation(line: 947, column: 27, scope: !6128)
!6298 = !DILocation(line: 947, column: 31, scope: !6128)
!6299 = !DILocation(line: 947, column: 30, scope: !6128)
!6300 = !DILocation(line: 0, scope: !6128)
!6301 = !DILocalVariable(name: "e", scope: !6302, file: !3, line: 949, type: !1553)
!6302 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 948, column: 3)
!6303 = !DILocation(line: 949, column: 10, scope: !6302)
!6304 = !DILocation(line: 950, column: 13, scope: !6302)
!6305 = !DILocation(line: 950, column: 19, scope: !6302)
!6306 = !DILocation(line: 950, column: 11, scope: !6302)
!6307 = !DILocation(line: 952, column: 5, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 952, column: 5)
!6309 = !DILocation(line: 952, column: 5, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6308, file: !3, line: 952, column: 5)
!6311 = !DILocation(line: 954, column: 16, scope: !6312)
!6312 = distinct !DILexicalBlock(scope: !6310, file: !3, line: 953, column: 7)
!6313 = !DILocation(line: 954, column: 19, scope: !6312)
!6314 = !DILocation(line: 954, column: 24, scope: !6312)
!6315 = !DILocation(line: 954, column: 14, scope: !6312)
!6316 = !DILocation(line: 958, column: 13, scope: !6317)
!6317 = distinct !DILexicalBlock(scope: !6312, file: !3, line: 958, column: 13)
!6318 = !DILocation(line: 958, column: 16, scope: !6317)
!6319 = !DILocation(line: 958, column: 23, scope: !6317)
!6320 = !DILocation(line: 958, column: 20, scope: !6317)
!6321 = !DILocation(line: 959, column: 6, scope: !6317)
!6322 = !DILocation(line: 959, column: 9, scope: !6317)
!6323 = !DILocation(line: 959, column: 17, scope: !6317)
!6324 = !DILocation(line: 959, column: 26, scope: !6317)
!6325 = !DILocation(line: 959, column: 23, scope: !6317)
!6326 = !DILocation(line: 958, column: 13, scope: !6312)
!6327 = !DILocation(line: 961, column: 11, scope: !6328)
!6328 = distinct !DILexicalBlock(scope: !6317, file: !3, line: 960, column: 4)
!6329 = !DILocation(line: 962, column: 6, scope: !6328)
!6330 = !DILocation(line: 964, column: 19, scope: !6331)
!6331 = distinct !DILexicalBlock(scope: !6317, file: !3, line: 964, column: 18)
!6332 = !DILocation(line: 964, column: 45, scope: !6331)
!6333 = !DILocation(line: 964, column: 48, scope: !6331)
!6334 = !DILocation(line: 964, column: 56, scope: !6331)
!6335 = !DILocation(line: 964, column: 60, scope: !6331)
!6336 = !DILocation(line: 964, column: 53, scope: !6331)
!6337 = !DILocation(line: 964, column: 18, scope: !6317)
!6338 = !DILocation(line: 966, column: 22, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6331, file: !3, line: 965, column: 4)
!6340 = !DILocation(line: 966, column: 6, scope: !6339)
!6341 = !DILocation(line: 966, column: 12, scope: !6339)
!6342 = !DILocation(line: 966, column: 20, scope: !6339)
!6343 = !DILocation(line: 967, column: 15, scope: !6339)
!6344 = !DILocation(line: 967, column: 25, scope: !6339)
!6345 = !DILocation(line: 967, column: 6, scope: !6339)
!6346 = !DILocation(line: 969, column: 21, scope: !6347)
!6347 = distinct !DILexicalBlock(scope: !6339, file: !3, line: 969, column: 10)
!6348 = !DILocation(line: 969, column: 10, scope: !6347)
!6349 = !DILocation(line: 969, column: 10, scope: !6339)
!6350 = !DILocation(line: 971, column: 28, scope: !6351)
!6351 = distinct !DILexicalBlock(scope: !6347, file: !3, line: 970, column: 8)
!6352 = !DILocation(line: 972, column: 10, scope: !6351)
!6353 = !DILocation(line: 974, column: 4, scope: !6339)
!6354 = !DILocation(line: 975, column: 7, scope: !6312)
!6355 = distinct !{!6355, !6307, !6356}
!6356 = !DILocation(line: 975, column: 7, scope: !6308)
!6357 = distinct !{!6357, !6293, !6358}
!6358 = !DILocation(line: 976, column: 3, scope: !6128)
!6359 = !DILocation(line: 978, column: 12, scope: !6360)
!6360 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 978, column: 12)
!6361 = !DILocation(line: 978, column: 17, scope: !6360)
!6362 = !DILocation(line: 978, column: 22, scope: !6360)
!6363 = !DILocation(line: 978, column: 26, scope: !6360)
!6364 = !DILocation(line: 978, column: 12, scope: !6128)
!6365 = !DILocation(line: 981, column: 5, scope: !6366)
!6366 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 979, column: 3)
!6367 = !DILocation(line: 981, column: 12, scope: !6366)
!6368 = !DILocation(line: 981, column: 16, scope: !6366)
!6369 = !DILocation(line: 981, column: 23, scope: !6366)
!6370 = !DILocation(line: 982, column: 25, scope: !6366)
!6371 = !DILocation(line: 982, column: 29, scope: !6366)
!6372 = !DILocation(line: 982, column: 5, scope: !6366)
!6373 = !DILocation(line: 982, column: 18, scope: !6366)
!6374 = !DILocation(line: 982, column: 23, scope: !6366)
!6375 = !DILocation(line: 983, column: 34, scope: !6366)
!6376 = !DILocation(line: 983, column: 5, scope: !6366)
!6377 = !DILocation(line: 983, column: 32, scope: !6366)
!6378 = !DILocation(line: 984, column: 34, scope: !6366)
!6379 = !DILocation(line: 984, column: 5, scope: !6366)
!6380 = !DILocation(line: 984, column: 29, scope: !6366)
!6381 = !DILocation(line: 985, column: 19, scope: !6366)
!6382 = !DILocation(line: 985, column: 51, scope: !6366)
!6383 = !DILocation(line: 986, column: 5, scope: !6366)
!6384 = !DILocation(line: 986, column: 35, scope: !6366)
!6385 = !DILocation(line: 987, column: 34, scope: !6366)
!6386 = !DILocation(line: 987, column: 5, scope: !6366)
!6387 = !DILocation(line: 987, column: 32, scope: !6366)
!6388 = !DILocation(line: 988, column: 37, scope: !6366)
!6389 = !DILocation(line: 988, column: 5, scope: !6366)
!6390 = !DILocation(line: 988, column: 29, scope: !6366)
!6391 = !DILocation(line: 994, column: 5, scope: !6366)
!6392 = !DILocation(line: 994, column: 12, scope: !6366)
!6393 = !DILocation(line: 994, column: 17, scope: !6366)
!6394 = !DILocation(line: 996, column: 13, scope: !6395)
!6395 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 996, column: 13)
!6396 = distinct !DILexicalBlock(scope: !6366, file: !3, line: 995, column: 7)
!6397 = !DILocation(line: 996, column: 18, scope: !6395)
!6398 = !DILocation(line: 996, column: 13, scope: !6396)
!6399 = !DILocation(line: 997, column: 11, scope: !6395)
!6400 = !DILocation(line: 997, column: 9, scope: !6395)
!6401 = !DILocation(line: 997, column: 4, scope: !6395)
!6402 = !DILocation(line: 998, column: 17, scope: !6396)
!6403 = !DILocation(line: 998, column: 23, scope: !6396)
!6404 = !DILocation(line: 998, column: 15, scope: !6396)
!6405 = !DILocation(line: 999, column: 13, scope: !6406)
!6406 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 999, column: 13)
!6407 = !DILocation(line: 999, column: 20, scope: !6406)
!6408 = !DILocation(line: 999, column: 27, scope: !6406)
!6409 = !DILocation(line: 999, column: 13, scope: !6396)
!6410 = !DILocalVariable(name: "e", scope: !6411, file: !3, line: 1001, type: !1553)
!6411 = distinct !DILexicalBlock(scope: !6406, file: !3, line: 1000, column: 4)
!6412 = !DILocation(line: 1001, column: 11, scope: !6411)
!6413 = !DILocation(line: 1003, column: 6, scope: !6411)
!6414 = !DILocation(line: 1003, column: 13, scope: !6411)
!6415 = !DILocation(line: 1003, column: 20, scope: !6411)
!6416 = !DILocation(line: 1004, column: 28, scope: !6411)
!6417 = !DILocation(line: 1004, column: 6, scope: !6411)
!6418 = !DILocation(line: 1004, column: 22, scope: !6411)
!6419 = !DILocation(line: 1004, column: 26, scope: !6411)
!6420 = !DILocation(line: 1005, column: 28, scope: !6411)
!6421 = !DILocation(line: 1005, column: 6, scope: !6411)
!6422 = !DILocation(line: 1005, column: 26, scope: !6411)
!6423 = !DILocation(line: 1006, column: 31, scope: !6411)
!6424 = !DILocation(line: 1006, column: 6, scope: !6411)
!6425 = !DILocation(line: 1006, column: 29, scope: !6411)
!6426 = !DILocation(line: 1007, column: 20, scope: !6411)
!6427 = !DILocation(line: 1007, column: 30, scope: !6411)
!6428 = !DILocation(line: 1007, column: 6, scope: !6411)
!6429 = !DILocation(line: 1007, column: 12, scope: !6411)
!6430 = !DILocation(line: 1007, column: 18, scope: !6411)
!6431 = !DILocation(line: 1009, column: 6, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6411, file: !3, line: 1009, column: 6)
!6433 = !DILocation(line: 1009, column: 6, scope: !6434)
!6434 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 1009, column: 6)
!6435 = !DILocation(line: 1010, column: 12, scope: !6436)
!6436 = distinct !DILexicalBlock(scope: !6434, file: !3, line: 1010, column: 12)
!6437 = !DILocation(line: 1010, column: 15, scope: !6436)
!6438 = !DILocation(line: 1010, column: 23, scope: !6436)
!6439 = !DILocation(line: 1010, column: 20, scope: !6436)
!6440 = !DILocation(line: 1010, column: 12, scope: !6434)
!6441 = !DILocation(line: 1011, column: 12, scope: !6436)
!6442 = !DILocation(line: 1011, column: 19, scope: !6436)
!6443 = !DILocation(line: 1011, column: 22, scope: !6436)
!6444 = !DILocation(line: 1011, column: 28, scope: !6436)
!6445 = !DILocation(line: 1011, column: 10, scope: !6436)
!6446 = distinct !{!6446, !6431, !6447}
!6447 = !DILocation(line: 1011, column: 33, scope: !6432)
!6448 = !DILocation(line: 1012, column: 4, scope: !6411)
!6449 = !DILocation(line: 1014, column: 4, scope: !6406)
!6450 = distinct !{!6450, !6391, !6451}
!6451 = !DILocation(line: 1015, column: 7, scope: !6366)
!6452 = !DILocation(line: 1016, column: 5, scope: !6366)
!6453 = !DILocation(line: 1017, column: 3, scope: !6366)
!6454 = !DILocation(line: 1018, column: 24, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 1018, column: 24)
!6456 = !DILocation(line: 1018, column: 24, scope: !6360)
!6457 = !DILocalVariable(name: "t", scope: !6458, file: !3, line: 1021, type: !991)
!6458 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 1019, column: 17)
!6459 = !DILocation(line: 1021, column: 24, scope: !6458)
!6460 = !DILocation(line: 1021, column: 28, scope: !6458)
!6461 = !DILocation(line: 1023, column: 28, scope: !6458)
!6462 = !DILocation(line: 1023, column: 26, scope: !6458)
!6463 = !DILocation(line: 1024, column: 29, scope: !6458)
!6464 = !DILocation(line: 1024, column: 27, scope: !6458)
!6465 = !DILocation(line: 1029, column: 19, scope: !6466)
!6466 = distinct !DILexicalBlock(scope: !6458, file: !3, line: 1029, column: 19)
!6467 = !DILocation(line: 1029, column: 19, scope: !6468)
!6468 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 1029, column: 19)
!6469 = !DILocation(line: 1030, column: 25, scope: !6470)
!6470 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 1030, column: 25)
!6471 = !DILocation(line: 1030, column: 28, scope: !6470)
!6472 = !DILocation(line: 1030, column: 36, scope: !6470)
!6473 = !DILocation(line: 1030, column: 33, scope: !6470)
!6474 = !DILocation(line: 1030, column: 25, scope: !6468)
!6475 = !DILocation(line: 1031, column: 32, scope: !6470)
!6476 = !DILocation(line: 1031, column: 53, scope: !6470)
!6477 = !DILocation(line: 1031, column: 56, scope: !6470)
!6478 = !DILocation(line: 1031, column: 62, scope: !6470)
!6479 = !DILocation(line: 1031, column: 23, scope: !6470)
!6480 = distinct !{!6480, !6465, !6481}
!6481 = !DILocation(line: 1031, column: 67, scope: !6466)
!6482 = !DILocation(line: 1032, column: 17, scope: !6458)
!6483 = !DILocation(line: 1033, column: 6, scope: !6128)
!6484 = !DILocation(line: 1034, column: 2, scope: !6123)
!6485 = distinct !{!6485, !6117, !6486}
!6486 = !DILocation(line: 1034, column: 2, scope: !6118)
!6487 = !DILocation(line: 1035, column: 13, scope: !6087)
!6488 = !DILocation(line: 1035, column: 7, scope: !6087)
!6489 = !DILocation(line: 1037, column: 11, scope: !6490)
!6490 = distinct !DILexicalBlock(scope: !6087, file: !3, line: 1037, column: 11)
!6491 = !DILocation(line: 1037, column: 11, scope: !6087)
!6492 = !DILocation(line: 1039, column: 17, scope: !6493)
!6493 = distinct !DILexicalBlock(scope: !6490, file: !3, line: 1038, column: 9)
!6494 = !DILocation(line: 1039, column: 11, scope: !6493)
!6495 = !DILocation(line: 1041, column: 27, scope: !6493)
!6496 = !DILocation(line: 1041, column: 35, scope: !6493)
!6497 = !DILocation(line: 1041, column: 43, scope: !6493)
!6498 = !DILocation(line: 1041, column: 11, scope: !6493)
!6499 = !DILocation(line: 1042, column: 11, scope: !6493)
!6500 = !DILocation(line: 1044, column: 24, scope: !6493)
!6501 = !DILocation(line: 1044, column: 38, scope: !6493)
!6502 = !DILocation(line: 1044, column: 46, scope: !6493)
!6503 = !DILocation(line: 1044, column: 11, scope: !6493)
!6504 = !DILocation(line: 1045, column: 9, scope: !6493)
!6505 = !DILocation(line: 1046, column: 5, scope: !6087)
!6506 = !DILocation(line: 1050, column: 3, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 1050, column: 3)
!6508 = !DILocation(line: 1050, column: 3, scope: !6509)
!6509 = distinct !DILexicalBlock(scope: !6507, file: !3, line: 1050, column: 3)
!6510 = !DILocation(line: 1051, column: 9, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6509, file: !3, line: 1051, column: 9)
!6512 = !DILocation(line: 1051, column: 16, scope: !6511)
!6513 = !DILocation(line: 1051, column: 20, scope: !6511)
!6514 = !DILocation(line: 1051, column: 27, scope: !6511)
!6515 = !DILocation(line: 1051, column: 9, scope: !6509)
!6516 = !DILocation(line: 1053, column: 22, scope: !6517)
!6517 = distinct !DILexicalBlock(scope: !6511, file: !3, line: 1052, column: 7)
!6518 = !DILocation(line: 1053, column: 26, scope: !6517)
!6519 = !DILocation(line: 1053, column: 2, scope: !6517)
!6520 = !DILocation(line: 1053, column: 15, scope: !6517)
!6521 = !DILocation(line: 1053, column: 20, scope: !6517)
!6522 = !DILocation(line: 1054, column: 2, scope: !6517)
!6523 = !DILocation(line: 1054, column: 29, scope: !6517)
!6524 = !DILocation(line: 1055, column: 31, scope: !6517)
!6525 = !DILocation(line: 1055, column: 2, scope: !6517)
!6526 = !DILocation(line: 1055, column: 26, scope: !6517)
!6527 = !DILocation(line: 1056, column: 9, scope: !6517)
!6528 = !DILocation(line: 1056, column: 41, scope: !6517)
!6529 = !DILocation(line: 1057, column: 2, scope: !6517)
!6530 = !DILocation(line: 1057, column: 32, scope: !6517)
!6531 = !DILocation(line: 1058, column: 41, scope: !6517)
!6532 = !DILocation(line: 1058, column: 2, scope: !6517)
!6533 = !DILocation(line: 1058, column: 29, scope: !6517)
!6534 = !DILocation(line: 1059, column: 2, scope: !6517)
!6535 = !DILocation(line: 1059, column: 26, scope: !6517)
!6536 = !DILocation(line: 1060, column: 7, scope: !6517)
!6537 = !DILocation(line: 1051, column: 30, scope: !6511)
!6538 = distinct !{!6538, !6506, !6539}
!6539 = !DILocation(line: 1060, column: 7, scope: !6507)
!6540 = !DILocation(line: 1062, column: 9, scope: !5807)
!6541 = !DILocation(line: 1062, column: 3, scope: !5807)
!6542 = !DILocation(line: 1063, column: 9, scope: !5807)
!6543 = !DILocation(line: 1063, column: 3, scope: !5807)
!6544 = !DILocation(line: 1064, column: 9, scope: !5807)
!6545 = !DILocation(line: 1064, column: 3, scope: !5807)
!6546 = !DILocation(line: 1065, column: 3, scope: !5807)
!6547 = !DILocation(line: 1066, column: 3, scope: !5807)
!6548 = !DILocation(line: 1067, column: 3, scope: !5807)
!6549 = !DILocation(line: 1068, column: 3, scope: !5807)
!6550 = !DILocation(line: 1069, column: 1, scope: !5807)
!6551 = distinct !DISubprogram(name: "single_succ", scope: !142, file: !142, line: 663, type: !5791, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6552 = !DILocalVariable(name: "bb", arg: 1, scope: !6551, file: !142, line: 663, type: !5782)
!6553 = !DILocation(line: 663, column: 32, scope: !6551)
!6554 = !DILocation(line: 665, column: 28, scope: !6551)
!6555 = !DILocation(line: 665, column: 10, scope: !6551)
!6556 = !DILocation(line: 665, column: 33, scope: !6551)
!6557 = !DILocation(line: 665, column: 3, scope: !6551)
!6558 = distinct !DISubprogram(name: "RESET_BIT", scope: !2259, file: !2259, line: 82, type: !3260, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6559 = !DILocalVariable(name: "map", arg: 1, scope: !6558, file: !2259, line: 82, type: !2258)
!6560 = !DILocation(line: 82, column: 20, scope: !6558)
!6561 = !DILocalVariable(name: "bitno", arg: 2, scope: !6558, file: !2259, line: 82, type: !7)
!6562 = !DILocation(line: 82, column: 39, scope: !6558)
!6563 = !DILocation(line: 84, column: 7, scope: !6564)
!6564 = distinct !DILexicalBlock(scope: !6558, file: !2259, line: 84, column: 7)
!6565 = !DILocation(line: 84, column: 12, scope: !6564)
!6566 = !DILocation(line: 84, column: 7, scope: !6558)
!6567 = !DILocalVariable(name: "oldbit", scope: !6568, file: !2259, line: 86, type: !1230)
!6568 = distinct !DILexicalBlock(scope: !6564, file: !2259, line: 85, column: 5)
!6569 = !DILocation(line: 86, column: 12, scope: !6568)
!6570 = !DILocation(line: 87, column: 16, scope: !6568)
!6571 = !DILocation(line: 87, column: 14, scope: !6568)
!6572 = !DILocation(line: 88, column: 11, scope: !6573)
!6573 = distinct !DILexicalBlock(scope: !6568, file: !2259, line: 88, column: 11)
!6574 = !DILocation(line: 88, column: 11, scope: !6568)
!6575 = !DILocation(line: 89, column: 2, scope: !6573)
!6576 = !DILocation(line: 89, column: 7, scope: !6573)
!6577 = !DILocation(line: 89, column: 16, scope: !6573)
!6578 = !DILocation(line: 89, column: 22, scope: !6573)
!6579 = !DILocation(line: 89, column: 41, scope: !6573)
!6580 = !DILocation(line: 90, column: 5, scope: !6568)
!6581 = !DILocation(line: 92, column: 35, scope: !6558)
!6582 = !DILocation(line: 92, column: 42, scope: !6558)
!6583 = !DILocation(line: 92, column: 31, scope: !6558)
!6584 = !DILocation(line: 92, column: 8, scope: !6558)
!6585 = !DILocation(line: 91, column: 3, scope: !6558)
!6586 = !DILocation(line: 91, column: 8, scope: !6558)
!6587 = !DILocation(line: 91, column: 13, scope: !6558)
!6588 = !DILocation(line: 91, column: 19, scope: !6558)
!6589 = !DILocation(line: 92, column: 5, scope: !6558)
!6590 = !DILocation(line: 93, column: 1, scope: !6558)
!6591 = distinct !DISubprogram(name: "single_succ_p", scope: !142, file: !142, line: 626, type: !5780, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6592 = !DILocalVariable(name: "bb", arg: 1, scope: !6591, file: !142, line: 626, type: !5782)
!6593 = !DILocation(line: 626, column: 34, scope: !6591)
!6594 = !DILocation(line: 628, column: 10, scope: !6591)
!6595 = !DILocation(line: 628, column: 33, scope: !6591)
!6596 = !DILocation(line: 628, column: 3, scope: !6591)
!6597 = distinct !DISubprogram(name: "single_succ_edge", scope: !142, file: !142, line: 643, type: !5800, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6598 = !DILocalVariable(name: "bb", arg: 1, scope: !6597, file: !142, line: 643, type: !5782)
!6599 = !DILocation(line: 643, column: 37, scope: !6597)
!6600 = !DILocation(line: 645, column: 3, scope: !6597)
!6601 = !DILocation(line: 646, column: 10, scope: !6597)
!6602 = !DILocation(line: 646, column: 3, scope: !6597)
!6603 = distinct !DISubprogram(name: "add_branch_dependences", scope: !3, file: !3, line: 2432, type: !2384, scopeLine: 2433, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6604 = !DILocalVariable(name: "head", arg: 1, scope: !6603, file: !3, line: 2432, type: !997)
!6605 = !DILocation(line: 2432, column: 29, scope: !6603)
!6606 = !DILocalVariable(name: "tail", arg: 2, scope: !6603, file: !3, line: 2432, type: !997)
!6607 = !DILocation(line: 2432, column: 39, scope: !6603)
!6608 = !DILocalVariable(name: "insn", scope: !6603, file: !3, line: 2434, type: !997)
!6609 = !DILocation(line: 2434, column: 7, scope: !6603)
!6610 = !DILocalVariable(name: "last", scope: !6603, file: !3, line: 2434, type: !997)
!6611 = !DILocation(line: 2434, column: 13, scope: !6603)
!6612 = !DILocation(line: 2454, column: 3, scope: !6603)
!6613 = !DILocation(line: 2454, column: 10, scope: !6603)
!6614 = !DILocation(line: 2454, column: 18, scope: !6603)
!6615 = !DILocation(line: 2454, column: 15, scope: !6603)
!6616 = !DILocation(line: 2454, column: 23, scope: !6603)
!6617 = !DILocation(line: 2454, column: 26, scope: !6603)
!6618 = !DILocation(line: 0, scope: !6603)
!6619 = !DILocation(line: 2455, column: 12, scope: !6603)
!6620 = !DILocation(line: 2455, column: 10, scope: !6603)
!6621 = distinct !{!6621, !6612, !6619}
!6622 = !DILocation(line: 2457, column: 10, scope: !6603)
!6623 = !DILocation(line: 2457, column: 8, scope: !6603)
!6624 = !DILocation(line: 2458, column: 8, scope: !6603)
!6625 = !DILocation(line: 2459, column: 3, scope: !6603)
!6626 = !DILocation(line: 2459, column: 10, scope: !6603)
!6627 = !DILocation(line: 2460, column: 3, scope: !6603)
!6628 = !DILocation(line: 2460, column: 6, scope: !6603)
!6629 = !DILocation(line: 2461, column: 3, scope: !6603)
!6630 = !DILocation(line: 2461, column: 7, scope: !6603)
!6631 = !DILocation(line: 2462, column: 7, scope: !6603)
!6632 = !DILocation(line: 2462, column: 11, scope: !6603)
!6633 = !DILocation(line: 2462, column: 37, scope: !6603)
!6634 = !DILocation(line: 2463, column: 4, scope: !6603)
!6635 = !DILocation(line: 2463, column: 7, scope: !6603)
!6636 = !DILocation(line: 2463, column: 33, scope: !6603)
!6637 = !DILocation(line: 2464, column: 4, scope: !6603)
!6638 = !DILocation(line: 2464, column: 27, scope: !6603)
!6639 = !DILocation(line: 2464, column: 7, scope: !6603)
!6640 = !DILocation(line: 2468, column: 4, scope: !6603)
!6641 = !DILocation(line: 2468, column: 9, scope: !6603)
!6642 = !DILocation(line: 2469, column: 8, scope: !6603)
!6643 = !DILocation(line: 2469, column: 32, scope: !6603)
!6644 = !DILocation(line: 2469, column: 11, scope: !6603)
!6645 = !DILocation(line: 2470, column: 3, scope: !6603)
!6646 = !DILocation(line: 2470, column: 6, scope: !6603)
!6647 = !DILocation(line: 2472, column: 12, scope: !6648)
!6648 = distinct !DILexicalBlock(scope: !6649, file: !3, line: 2472, column: 11)
!6649 = distinct !DILexicalBlock(scope: !6603, file: !3, line: 2471, column: 5)
!6650 = !DILocation(line: 2472, column: 11, scope: !6649)
!6651 = !DILocation(line: 2474, column: 8, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6653, file: !3, line: 2474, column: 8)
!6653 = distinct !DILexicalBlock(scope: !6648, file: !3, line: 2473, column: 2)
!6654 = !DILocation(line: 2474, column: 13, scope: !6652)
!6655 = !DILocation(line: 2475, column: 8, scope: !6652)
!6656 = !DILocation(line: 2475, column: 32, scope: !6652)
!6657 = !DILocation(line: 2475, column: 38, scope: !6652)
!6658 = !DILocation(line: 2475, column: 11, scope: !6652)
!6659 = !DILocation(line: 2475, column: 51, scope: !6652)
!6660 = !DILocation(line: 2474, column: 8, scope: !6653)
!6661 = !DILocation(line: 2477, column: 46, scope: !6662)
!6662 = distinct !DILexicalBlock(scope: !6663, file: !3, line: 2477, column: 12)
!6663 = distinct !DILexicalBlock(scope: !6652, file: !3, line: 2476, column: 6)
!6664 = !DILocation(line: 2477, column: 52, scope: !6662)
!6665 = !DILocation(line: 2477, column: 14, scope: !6662)
!6666 = !DILocation(line: 2477, column: 12, scope: !6663)
!6667 = !DILocation(line: 2478, column: 19, scope: !6662)
!6668 = !DILocation(line: 2478, column: 25, scope: !6662)
!6669 = !DILocation(line: 2478, column: 3, scope: !6662)
!6670 = !DILocation(line: 2479, column: 17, scope: !6663)
!6671 = !DILocation(line: 2479, column: 34, scope: !6663)
!6672 = !DILocation(line: 2479, column: 8, scope: !6663)
!6673 = !DILocation(line: 2480, column: 6, scope: !6663)
!6674 = !DILocation(line: 2482, column: 4, scope: !6653)
!6675 = !DILocation(line: 2482, column: 21, scope: !6653)
!6676 = !DILocation(line: 2484, column: 11, scope: !6653)
!6677 = !DILocation(line: 2484, column: 9, scope: !6653)
!6678 = !DILocation(line: 2485, column: 2, scope: !6653)
!6679 = !DILocation(line: 2488, column: 11, scope: !6680)
!6680 = distinct !DILexicalBlock(scope: !6649, file: !3, line: 2488, column: 11)
!6681 = !DILocation(line: 2488, column: 19, scope: !6680)
!6682 = !DILocation(line: 2488, column: 16, scope: !6680)
!6683 = !DILocation(line: 2488, column: 11, scope: !6649)
!6684 = !DILocation(line: 2489, column: 2, scope: !6680)
!6685 = !DILocation(line: 2491, column: 7, scope: !6649)
!6686 = !DILocation(line: 2492, column: 9, scope: !6649)
!6687 = !DILocation(line: 2492, column: 7, scope: !6649)
!6688 = !DILocation(line: 2492, column: 2, scope: !6649)
!6689 = !DILocation(line: 2493, column: 14, scope: !6649)
!6690 = !DILocation(line: 2493, column: 22, scope: !6649)
!6691 = !DILocation(line: 2493, column: 19, scope: !6649)
!6692 = !DILocation(line: 2493, column: 27, scope: !6649)
!6693 = !DILocation(line: 2493, column: 30, scope: !6649)
!6694 = !DILocation(line: 0, scope: !6649)
!6695 = distinct !{!6695, !6685, !6696}
!6696 = !DILocation(line: 2493, column: 49, scope: !6649)
!6697 = distinct !{!6697, !6625, !6698}
!6698 = !DILocation(line: 2494, column: 5, scope: !6603)
!6699 = !DILocation(line: 2497, column: 10, scope: !6603)
!6700 = !DILocation(line: 2497, column: 8, scope: !6603)
!6701 = !DILocation(line: 2498, column: 7, scope: !6702)
!6702 = distinct !DILexicalBlock(scope: !6603, file: !3, line: 2498, column: 7)
!6703 = !DILocation(line: 2498, column: 12, scope: !6702)
!6704 = !DILocation(line: 2498, column: 7, scope: !6603)
!6705 = !DILocation(line: 2499, column: 5, scope: !6702)
!6706 = !DILocation(line: 2499, column: 12, scope: !6702)
!6707 = !DILocation(line: 2499, column: 20, scope: !6702)
!6708 = !DILocation(line: 2499, column: 17, scope: !6702)
!6709 = !DILocation(line: 2501, column: 28, scope: !6710)
!6710 = distinct !DILexicalBlock(scope: !6702, file: !3, line: 2500, column: 7)
!6711 = !DILocation(line: 2501, column: 9, scope: !6710)
!6712 = !DILocation(line: 2501, column: 7, scope: !6710)
!6713 = !DILocation(line: 2503, column: 6, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !6710, file: !3, line: 2503, column: 6)
!6715 = !DILocation(line: 2504, column: 6, scope: !6714)
!6716 = !DILocation(line: 2504, column: 9, scope: !6714)
!6717 = !DILocation(line: 2503, column: 6, scope: !6710)
!6718 = !DILocation(line: 2505, column: 4, scope: !6714)
!6719 = distinct !{!6719, !6705, !6720}
!6720 = !DILocation(line: 2509, column: 7, scope: !6702)
!6721 = !DILocation(line: 2507, column: 40, scope: !6722)
!6722 = distinct !DILexicalBlock(scope: !6710, file: !3, line: 2507, column: 6)
!6723 = !DILocation(line: 2507, column: 46, scope: !6722)
!6724 = !DILocation(line: 2507, column: 8, scope: !6722)
!6725 = !DILocation(line: 2507, column: 6, scope: !6710)
!6726 = !DILocation(line: 2508, column: 20, scope: !6722)
!6727 = !DILocation(line: 2508, column: 26, scope: !6722)
!6728 = !DILocation(line: 2508, column: 4, scope: !6722)
!6729 = !DILocation(line: 2511, column: 16, scope: !6730)
!6730 = distinct !DILexicalBlock(scope: !6603, file: !3, line: 2511, column: 7)
!6731 = !DILocation(line: 2511, column: 8, scope: !6730)
!6732 = !DILocation(line: 2511, column: 7, scope: !6603)
!6733 = !DILocation(line: 2512, column: 5, scope: !6730)
!6734 = !DILocation(line: 2547, column: 8, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6603, file: !3, line: 2547, column: 7)
!6736 = !DILocation(line: 2547, column: 25, scope: !6735)
!6737 = !DILocation(line: 2547, column: 30, scope: !6735)
!6738 = !DILocation(line: 2547, column: 7, scope: !6603)
!6739 = !DILocation(line: 2548, column: 5, scope: !6735)
!6740 = !DILocation(line: 2550, column: 10, scope: !6603)
!6741 = !DILocation(line: 2550, column: 8, scope: !6603)
!6742 = !DILocation(line: 2551, column: 3, scope: !6603)
!6743 = !DILocation(line: 2551, column: 10, scope: !6603)
!6744 = !DILocation(line: 2551, column: 18, scope: !6603)
!6745 = !DILocation(line: 2551, column: 15, scope: !6603)
!6746 = !DILocation(line: 2553, column: 14, scope: !6747)
!6747 = distinct !DILexicalBlock(scope: !6603, file: !3, line: 2552, column: 5)
!6748 = !DILocation(line: 2553, column: 12, scope: !6747)
!6749 = !DILocation(line: 2559, column: 11, scope: !6750)
!6750 = distinct !DILexicalBlock(scope: !6747, file: !3, line: 2559, column: 11)
!6751 = !DILocation(line: 2559, column: 25, scope: !6750)
!6752 = !DILocation(line: 2559, column: 28, scope: !6750)
!6753 = !DILocation(line: 2559, column: 54, scope: !6750)
!6754 = !DILocation(line: 2559, column: 11, scope: !6747)
!6755 = !DILocation(line: 2560, column: 18, scope: !6750)
!6756 = !DILocation(line: 2560, column: 24, scope: !6750)
!6757 = !DILocation(line: 2560, column: 2, scope: !6750)
!6758 = distinct !{!6758, !6742, !6759}
!6759 = !DILocation(line: 2561, column: 5, scope: !6603)
!6760 = !DILocation(line: 2562, column: 1, scope: !6603)
!6761 = distinct !DISubprogram(name: "propagate_deps", scope: !3, file: !3, line: 2663, type: !6762, scopeLine: 2664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6762 = !DISubroutineType(types: !6763)
!6763 = !{null, !990, !993}
!6764 = !DILocalVariable(name: "bb", arg: 1, scope: !6761, file: !3, line: 2663, type: !990)
!6765 = !DILocation(line: 2663, column: 21, scope: !6761)
!6766 = !DILocalVariable(name: "pred_deps", arg: 2, scope: !6761, file: !3, line: 2663, type: !993)
!6767 = !DILocation(line: 2663, column: 38, scope: !6761)
!6768 = !DILocalVariable(name: "block", scope: !6761, file: !3, line: 2665, type: !1536)
!6769 = !DILocation(line: 2665, column: 15, scope: !6761)
!6770 = !DILocation(line: 2665, column: 23, scope: !6761)
!6771 = !DILocalVariable(name: "ei", scope: !6761, file: !3, line: 2666, type: !2177)
!6772 = !DILocation(line: 2666, column: 17, scope: !6761)
!6773 = !DILocalVariable(name: "e", scope: !6761, file: !3, line: 2667, type: !1553)
!6774 = !DILocation(line: 2667, column: 8, scope: !6761)
!6775 = !DILocation(line: 2670, column: 3, scope: !6776)
!6776 = distinct !DILexicalBlock(scope: !6761, file: !3, line: 2670, column: 3)
!6777 = !DILocation(line: 2670, column: 3, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6776, file: !3, line: 2670, column: 3)
!6779 = !DILocation(line: 2673, column: 11, scope: !6780)
!6780 = distinct !DILexicalBlock(scope: !6781, file: !3, line: 2673, column: 11)
!6781 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 2671, column: 5)
!6782 = !DILocation(line: 2673, column: 14, scope: !6780)
!6783 = !DILocation(line: 2673, column: 22, scope: !6780)
!6784 = !DILocation(line: 2673, column: 19, scope: !6780)
!6785 = !DILocation(line: 2674, column: 4, scope: !6780)
!6786 = !DILocation(line: 2674, column: 7, scope: !6780)
!6787 = !DILocation(line: 2674, column: 40, scope: !6780)
!6788 = !DILocation(line: 2674, column: 37, scope: !6780)
!6789 = !DILocation(line: 2675, column: 4, scope: !6780)
!6790 = !DILocation(line: 2675, column: 7, scope: !6780)
!6791 = !DILocation(line: 2675, column: 39, scope: !6780)
!6792 = !DILocation(line: 2675, column: 36, scope: !6780)
!6793 = !DILocation(line: 2673, column: 11, scope: !6781)
!6794 = !DILocation(line: 2676, column: 2, scope: !6780)
!6795 = !DILocation(line: 2678, column: 18, scope: !6781)
!6796 = !DILocation(line: 2678, column: 28, scope: !6781)
!6797 = !DILocation(line: 2678, column: 26, scope: !6781)
!6798 = !DILocation(line: 2678, column: 58, scope: !6781)
!6799 = !DILocation(line: 2678, column: 7, scope: !6781)
!6800 = !DILocation(line: 2679, column: 5, scope: !6781)
!6801 = distinct !{!6801, !6775, !6802}
!6802 = !DILocation(line: 2679, column: 5, scope: !6776)
!6803 = !DILocation(line: 2683, column: 36, scope: !6761)
!6804 = !DILocation(line: 2683, column: 47, scope: !6761)
!6805 = !DILocation(line: 2683, column: 3, scope: !6761)
!6806 = !DILocation(line: 2683, column: 11, scope: !6761)
!6807 = !DILocation(line: 2683, column: 15, scope: !6761)
!6808 = !DILocation(line: 2683, column: 34, scope: !6761)
!6809 = !DILocation(line: 2684, column: 35, scope: !6761)
!6810 = !DILocation(line: 2684, column: 46, scope: !6761)
!6811 = !DILocation(line: 2684, column: 3, scope: !6761)
!6812 = !DILocation(line: 2684, column: 11, scope: !6761)
!6813 = !DILocation(line: 2684, column: 15, scope: !6761)
!6814 = !DILocation(line: 2684, column: 33, scope: !6761)
!6815 = !DILocation(line: 2685, column: 37, scope: !6761)
!6816 = !DILocation(line: 2685, column: 48, scope: !6761)
!6817 = !DILocation(line: 2685, column: 3, scope: !6761)
!6818 = !DILocation(line: 2685, column: 11, scope: !6761)
!6819 = !DILocation(line: 2685, column: 15, scope: !6761)
!6820 = !DILocation(line: 2685, column: 35, scope: !6761)
!6821 = !DILocation(line: 2686, column: 36, scope: !6761)
!6822 = !DILocation(line: 2686, column: 47, scope: !6761)
!6823 = !DILocation(line: 2686, column: 3, scope: !6761)
!6824 = !DILocation(line: 2686, column: 11, scope: !6761)
!6825 = !DILocation(line: 2686, column: 15, scope: !6761)
!6826 = !DILocation(line: 2686, column: 34, scope: !6761)
!6827 = !DILocation(line: 2689, column: 3, scope: !6761)
!6828 = !DILocation(line: 2689, column: 14, scope: !6761)
!6829 = !DILocation(line: 2689, column: 33, scope: !6761)
!6830 = !DILocation(line: 2690, column: 3, scope: !6761)
!6831 = !DILocation(line: 2690, column: 14, scope: !6761)
!6832 = !DILocation(line: 2690, column: 32, scope: !6761)
!6833 = !DILocation(line: 2691, column: 3, scope: !6761)
!6834 = !DILocation(line: 2691, column: 14, scope: !6761)
!6835 = !DILocation(line: 2691, column: 34, scope: !6761)
!6836 = !DILocation(line: 2692, column: 3, scope: !6761)
!6837 = !DILocation(line: 2692, column: 14, scope: !6761)
!6838 = !DILocation(line: 2692, column: 33, scope: !6761)
!6839 = !DILocation(line: 2693, column: 1, scope: !6761)
!6840 = distinct !DISubprogram(name: "sets_likely_spilled", scope: !3, file: !3, line: 2406, type: !2370, scopeLine: 2407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6841 = !DILocalVariable(name: "pat", arg: 1, scope: !6840, file: !3, line: 2406, type: !997)
!6842 = !DILocation(line: 2406, column: 26, scope: !6840)
!6843 = !DILocalVariable(name: "ret", scope: !6840, file: !3, line: 2408, type: !1230)
!6844 = !DILocation(line: 2408, column: 8, scope: !6840)
!6845 = !DILocation(line: 2409, column: 16, scope: !6840)
!6846 = !DILocation(line: 2409, column: 3, scope: !6840)
!6847 = !DILocation(line: 2410, column: 10, scope: !6840)
!6848 = !DILocation(line: 2410, column: 3, scope: !6840)
!6849 = distinct !DISubprogram(name: "VEC_int_base_index", scope: !1519, file: !1519, line: 31, type: !6850, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6850 = !DISubroutineType(types: !6851)
!6851 = !{!990, !6852, !7}
!6852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6853, size: 64)
!6853 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6854)
!6854 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !1519, line: 31, baseType: !6855)
!6855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !1519, line: 31, size: 96, elements: !6856)
!6856 = !{!6857, !6858, !6859}
!6857 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !6855, file: !1519, line: 31, baseType: !7, size: 32)
!6858 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !6855, file: !1519, line: 31, baseType: !7, size: 32, offset: 32)
!6859 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !6855, file: !1519, line: 31, baseType: !6860, size: 32, offset: 64)
!6860 = !DICompositeType(tag: DW_TAG_array_type, baseType: !990, size: 32, elements: !1035)
!6861 = !DILocalVariable(name: "vec_", arg: 1, scope: !6849, file: !1519, line: 31, type: !6852)
!6862 = !DILocation(line: 31, column: 1, scope: !6849)
!6863 = !DILocalVariable(name: "ix_", arg: 2, scope: !6849, file: !1519, line: 31, type: !7)
!6864 = !DILocation(line: 0, scope: !6849)
!6865 = distinct !DISubprogram(name: "VEC_haifa_deps_insn_data_def_base_index", scope: !508, file: !508, line: 846, type: !6866, scopeLine: 846, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6866 = !DISubroutineType(types: !6867)
!6867 = !{!6868, !6880, !7}
!6868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6869, size: 64)
!6869 = !DIDerivedType(tag: DW_TAG_typedef, name: "haifa_deps_insn_data_def", file: !508, line: 843, baseType: !6870)
!6870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_haifa_deps_insn_data", file: !508, line: 663, size: 448, elements: !6871)
!6871 = !{!6872, !6873, !6874, !6875, !6876, !6877, !6878, !6879}
!6872 = !DIDerivedType(tag: DW_TAG_member, name: "dep_count", scope: !6870, file: !508, line: 668, baseType: !990, size: 32)
!6873 = !DIDerivedType(tag: DW_TAG_member, name: "has_internal_dep", scope: !6870, file: !508, line: 672, baseType: !7, size: 32, offset: 32)
!6874 = !DIDerivedType(tag: DW_TAG_member, name: "hard_back_deps", scope: !6870, file: !508, line: 682, baseType: !4250, size: 64, offset: 64)
!6875 = !DIDerivedType(tag: DW_TAG_member, name: "spec_back_deps", scope: !6870, file: !508, line: 686, baseType: !4250, size: 64, offset: 128)
!6876 = !DIDerivedType(tag: DW_TAG_member, name: "forw_deps", scope: !6870, file: !508, line: 690, baseType: !4250, size: 64, offset: 192)
!6877 = !DIDerivedType(tag: DW_TAG_member, name: "resolved_back_deps", scope: !6870, file: !508, line: 694, baseType: !4250, size: 64, offset: 256)
!6878 = !DIDerivedType(tag: DW_TAG_member, name: "resolved_forw_deps", scope: !6870, file: !508, line: 699, baseType: !4250, size: 64, offset: 320)
!6879 = !DIDerivedType(tag: DW_TAG_member, name: "cant_move", scope: !6870, file: !508, line: 702, baseType: !7, size: 1, offset: 384, flags: DIFlagBitField, extraData: i64 384)
!6880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6881, size: 64)
!6881 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_haifa_deps_insn_data_def_base", file: !508, line: 846, baseType: !6882)
!6882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_haifa_deps_insn_data_def_base", file: !508, line: 846, size: 512, elements: !6883)
!6883 = !{!6884, !6885, !6886}
!6884 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !6882, file: !508, line: 846, baseType: !7, size: 32)
!6885 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !6882, file: !508, line: 846, baseType: !7, size: 32, offset: 32)
!6886 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !6882, file: !508, line: 846, baseType: !6887, size: 448, offset: 64)
!6887 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6869, size: 448, elements: !1035)
!6888 = !DILocalVariable(name: "vec_", arg: 1, scope: !6865, file: !508, line: 846, type: !6880)
!6889 = !DILocation(line: 846, column: 1, scope: !6865)
!6890 = !DILocalVariable(name: "ix_", arg: 2, scope: !6865, file: !508, line: 846, type: !7)
!6891 = !DILocation(line: 0, scope: !6865)
!6892 = distinct !DISubprogram(name: "sets_likely_spilled_1", scope: !3, file: !3, line: 2414, type: !6893, scopeLine: 2415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6893 = !DISubroutineType(types: !6894)
!6894 = !{null, !997, !2364, !992}
!6895 = !DILocalVariable(name: "x", arg: 1, scope: !6892, file: !3, line: 2414, type: !997)
!6896 = !DILocation(line: 2414, column: 28, scope: !6892)
!6897 = !DILocalVariable(name: "pat", arg: 2, scope: !6892, file: !3, line: 2414, type: !2364)
!6898 = !DILocation(line: 2414, column: 41, scope: !6892)
!6899 = !DILocalVariable(name: "data", arg: 3, scope: !6892, file: !3, line: 2414, type: !992)
!6900 = !DILocation(line: 2414, column: 52, scope: !6892)
!6901 = !DILocalVariable(name: "ret", scope: !6892, file: !3, line: 2416, type: !2183)
!6902 = !DILocation(line: 2416, column: 9, scope: !6892)
!6903 = !DILocation(line: 2416, column: 24, scope: !6892)
!6904 = !DILocation(line: 2418, column: 7, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6892, file: !3, line: 2418, column: 7)
!6906 = !DILocation(line: 2418, column: 22, scope: !6905)
!6907 = !DILocation(line: 2419, column: 7, scope: !6905)
!6908 = !DILocation(line: 2419, column: 10, scope: !6905)
!6909 = !DILocation(line: 2420, column: 7, scope: !6905)
!6910 = !DILocation(line: 2420, column: 10, scope: !6905)
!6911 = !DILocation(line: 2420, column: 20, scope: !6905)
!6912 = !DILocation(line: 2421, column: 7, scope: !6905)
!6913 = !DILocation(line: 2421, column: 10, scope: !6905)
!6914 = !DILocation(line: 2418, column: 7, scope: !6892)
!6915 = !DILocation(line: 2422, column: 6, scope: !6905)
!6916 = !DILocation(line: 2422, column: 10, scope: !6905)
!6917 = !DILocation(line: 2422, column: 5, scope: !6905)
!6918 = !DILocation(line: 2423, column: 1, scope: !6892)
!6919 = distinct !DISubprogram(name: "rhs_regno", scope: !519, file: !519, line: 1051, type: !6920, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6920 = !DISubroutineType(types: !6921)
!6921 = !{!7, !2364}
!6922 = !DILocalVariable(name: "x", arg: 1, scope: !6919, file: !519, line: 1051, type: !2364)
!6923 = !DILocation(line: 1051, column: 22, scope: !6919)
!6924 = !DILocation(line: 1053, column: 10, scope: !6919)
!6925 = !DILocation(line: 1053, column: 3, scope: !6919)
!6926 = distinct !DISubprogram(name: "compute_jump_reg_dependencies", scope: !3, file: !3, line: 2319, type: !2309, scopeLine: 2323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6927 = !DILocalVariable(name: "insn", arg: 1, scope: !6926, file: !3, line: 2319, type: !997)
!6928 = !DILocation(line: 2319, column: 36, scope: !6926)
!6929 = !DILocalVariable(name: "cond_exec", arg: 2, scope: !6926, file: !3, line: 2320, type: !2311)
!6930 = !DILocation(line: 2320, column: 18, scope: !6926)
!6931 = !DILocalVariable(name: "used", arg: 3, scope: !6926, file: !3, line: 2321, type: !2311)
!6932 = !DILocation(line: 2321, column: 18, scope: !6926)
!6933 = !DILocalVariable(name: "set", arg: 4, scope: !6926, file: !3, line: 2322, type: !2311)
!6934 = !DILocation(line: 2322, column: 18, scope: !6926)
!6935 = !DILocation(line: 2326, column: 1, scope: !6926)
!6936 = distinct !DISubprogram(name: "init_ready_list", scope: !3, file: !3, line: 2100, type: !2319, scopeLine: 2101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!6937 = !DILocalVariable(name: "prev_head", scope: !6936, file: !3, line: 2102, type: !997)
!6938 = !DILocation(line: 2102, column: 7, scope: !6936)
!6939 = !DILocation(line: 2102, column: 19, scope: !6936)
!6940 = !DILocation(line: 2102, column: 39, scope: !6936)
!6941 = !DILocalVariable(name: "next_tail", scope: !6936, file: !3, line: 2103, type: !997)
!6942 = !DILocation(line: 2103, column: 7, scope: !6936)
!6943 = !DILocation(line: 2103, column: 19, scope: !6936)
!6944 = !DILocation(line: 2103, column: 39, scope: !6936)
!6945 = !DILocalVariable(name: "bb_src", scope: !6936, file: !3, line: 2104, type: !990)
!6946 = !DILocation(line: 2104, column: 7, scope: !6936)
!6947 = !DILocalVariable(name: "insn", scope: !6936, file: !3, line: 2105, type: !997)
!6948 = !DILocation(line: 2105, column: 7, scope: !6936)
!6949 = !DILocation(line: 2107, column: 18, scope: !6936)
!6950 = !DILocation(line: 2108, column: 24, scope: !6936)
!6951 = !DILocation(line: 2109, column: 17, scope: !6936)
!6952 = !DILocation(line: 2112, column: 7, scope: !6953)
!6953 = distinct !DILexicalBlock(scope: !6936, file: !3, line: 2112, column: 7)
!6954 = !DILocation(line: 2112, column: 21, scope: !6953)
!6955 = !DILocation(line: 2112, column: 7, scope: !6936)
!6956 = !DILocation(line: 2113, column: 29, scope: !6953)
!6957 = !DILocation(line: 2113, column: 5, scope: !6953)
!6958 = !DILocation(line: 2116, column: 7, scope: !6959)
!6959 = distinct !DILexicalBlock(scope: !6936, file: !3, line: 2116, column: 7)
!6960 = !DILocation(line: 2116, column: 25, scope: !6959)
!6961 = !DILocation(line: 2116, column: 7, scope: !6936)
!6962 = !DILocation(line: 2117, column: 23, scope: !6959)
!6963 = !DILocation(line: 2117, column: 5, scope: !6959)
!6964 = !DILocation(line: 2121, column: 15, scope: !6965)
!6965 = distinct !DILexicalBlock(scope: !6936, file: !3, line: 2121, column: 3)
!6966 = !DILocation(line: 2121, column: 13, scope: !6965)
!6967 = !DILocation(line: 2121, column: 8, scope: !6965)
!6968 = !DILocation(line: 2121, column: 38, scope: !6969)
!6969 = distinct !DILexicalBlock(scope: !6965, file: !3, line: 2121, column: 3)
!6970 = !DILocation(line: 2121, column: 46, scope: !6969)
!6971 = !DILocation(line: 2121, column: 43, scope: !6969)
!6972 = !DILocation(line: 2121, column: 3, scope: !6965)
!6973 = !DILocation(line: 2123, column: 18, scope: !6974)
!6974 = distinct !DILexicalBlock(scope: !6969, file: !3, line: 2122, column: 5)
!6975 = !DILocation(line: 2123, column: 7, scope: !6974)
!6976 = !DILocation(line: 2124, column: 21, scope: !6974)
!6977 = !DILocation(line: 2126, column: 7, scope: !6974)
!6978 = !DILocation(line: 2127, column: 5, scope: !6974)
!6979 = !DILocation(line: 2121, column: 64, scope: !6969)
!6980 = !DILocation(line: 2121, column: 62, scope: !6969)
!6981 = !DILocation(line: 2121, column: 3, scope: !6969)
!6982 = distinct !{!6982, !6972, !6983}
!6983 = !DILocation(line: 2127, column: 5, scope: !6965)
!6984 = !DILocation(line: 2132, column: 17, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6936, file: !3, line: 2132, column: 3)
!6986 = !DILocation(line: 2132, column: 27, scope: !6985)
!6987 = !DILocation(line: 2132, column: 15, scope: !6985)
!6988 = !DILocation(line: 2132, column: 8, scope: !6985)
!6989 = !DILocation(line: 2132, column: 32, scope: !6990)
!6990 = distinct !DILexicalBlock(scope: !6985, file: !3, line: 2132, column: 3)
!6991 = !DILocation(line: 2132, column: 41, scope: !6990)
!6992 = !DILocation(line: 2132, column: 39, scope: !6990)
!6993 = !DILocation(line: 2132, column: 3, scope: !6985)
!6994 = !DILocation(line: 2133, column: 9, scope: !6995)
!6995 = distinct !DILexicalBlock(scope: !6990, file: !3, line: 2133, column: 9)
!6996 = !DILocation(line: 2133, column: 9, scope: !6990)
!6997 = !DILocalVariable(name: "src_head", scope: !6998, file: !3, line: 2135, type: !997)
!6998 = distinct !DILexicalBlock(scope: !6995, file: !3, line: 2134, column: 7)
!6999 = !DILocation(line: 2135, column: 6, scope: !6998)
!7000 = !DILocalVariable(name: "src_next_tail", scope: !6998, file: !3, line: 2136, type: !997)
!7001 = !DILocation(line: 2136, column: 6, scope: !6998)
!7002 = !DILocalVariable(name: "tail", scope: !6998, file: !3, line: 2137, type: !997)
!7003 = !DILocation(line: 2137, column: 6, scope: !6998)
!7004 = !DILocalVariable(name: "head", scope: !6998, file: !3, line: 2137, type: !997)
!7005 = !DILocation(line: 2137, column: 12, scope: !6998)
!7006 = !DILocation(line: 2139, column: 21, scope: !6998)
!7007 = !DILocation(line: 2139, column: 44, scope: !6998)
!7008 = !DILocation(line: 2139, column: 2, scope: !6998)
!7009 = !DILocation(line: 2141, column: 18, scope: !6998)
!7010 = !DILocation(line: 2141, column: 16, scope: !6998)
!7011 = !DILocation(line: 2142, column: 13, scope: !6998)
!7012 = !DILocation(line: 2142, column: 11, scope: !6998)
!7013 = !DILocation(line: 2144, column: 14, scope: !7014)
!7014 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 2144, column: 2)
!7015 = !DILocation(line: 2144, column: 12, scope: !7014)
!7016 = !DILocation(line: 2144, column: 7, scope: !7014)
!7017 = !DILocation(line: 2144, column: 24, scope: !7018)
!7018 = distinct !DILexicalBlock(scope: !7014, file: !3, line: 2144, column: 2)
!7019 = !DILocation(line: 2144, column: 32, scope: !7018)
!7020 = !DILocation(line: 2144, column: 29, scope: !7018)
!7021 = !DILocation(line: 2144, column: 2, scope: !7014)
!7022 = !DILocation(line: 2145, column: 8, scope: !7023)
!7023 = distinct !DILexicalBlock(scope: !7018, file: !3, line: 2145, column: 8)
!7024 = !DILocation(line: 2145, column: 22, scope: !7023)
!7025 = !DILocation(line: 2145, column: 26, scope: !7023)
!7026 = !DILocation(line: 2145, column: 8, scope: !7018)
!7027 = !DILocation(line: 2146, column: 17, scope: !7023)
!7028 = !DILocation(line: 2146, column: 6, scope: !7023)
!7029 = !DILocation(line: 2144, column: 54, scope: !7018)
!7030 = !DILocation(line: 2144, column: 52, scope: !7018)
!7031 = !DILocation(line: 2144, column: 2, scope: !7018)
!7032 = distinct !{!7032, !7021, !7033}
!7033 = !DILocation(line: 2146, column: 21, scope: !7014)
!7034 = !DILocation(line: 2147, column: 7, scope: !6998)
!7035 = !DILocation(line: 2132, column: 66, scope: !6990)
!7036 = !DILocation(line: 2132, column: 3, scope: !6990)
!7037 = distinct !{!7037, !6993, !7038}
!7038 = !DILocation(line: 2147, column: 7, scope: !6985)
!7039 = !DILocation(line: 2148, column: 1, scope: !6936)
!7040 = distinct !DISubprogram(name: "can_schedule_ready_p", scope: !3, file: !3, line: 2154, type: !2300, scopeLine: 2155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7041 = !DILocalVariable(name: "insn", arg: 1, scope: !7040, file: !3, line: 2154, type: !997)
!7042 = !DILocation(line: 2154, column: 27, scope: !7040)
!7043 = !DILocation(line: 2157, column: 7, scope: !7044)
!7044 = distinct !DILexicalBlock(scope: !7040, file: !3, line: 2157, column: 7)
!7045 = !DILocation(line: 2157, column: 25, scope: !7044)
!7046 = !DILocation(line: 2157, column: 22, scope: !7044)
!7047 = !DILocation(line: 2158, column: 7, scope: !7044)
!7048 = !DILocation(line: 2158, column: 10, scope: !7044)
!7049 = !DILocation(line: 2159, column: 7, scope: !7044)
!7050 = !DILocation(line: 2159, column: 23, scope: !7044)
!7051 = !DILocation(line: 2159, column: 29, scope: !7044)
!7052 = !DILocation(line: 2159, column: 11, scope: !7044)
!7053 = !DILocation(line: 2157, column: 7, scope: !7040)
!7054 = !DILocation(line: 2160, column: 5, scope: !7044)
!7055 = !DILocation(line: 2162, column: 5, scope: !7044)
!7056 = !DILocation(line: 2163, column: 1, scope: !7040)
!7057 = distinct !DISubprogram(name: "schedule_more_p", scope: !3, file: !3, line: 2091, type: !2350, scopeLine: 2092, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7058 = !DILocation(line: 2093, column: 10, scope: !7057)
!7059 = !DILocation(line: 2093, column: 33, scope: !7057)
!7060 = !DILocation(line: 2093, column: 31, scope: !7057)
!7061 = !DILocation(line: 2093, column: 3, scope: !7057)
!7062 = distinct !DISubprogram(name: "new_ready", scope: !3, file: !3, line: 2202, type: !2354, scopeLine: 2203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7063 = !DILocalVariable(name: "next", arg: 1, scope: !7062, file: !3, line: 2202, type: !997)
!7064 = !DILocation(line: 2202, column: 16, scope: !7062)
!7065 = !DILocalVariable(name: "ts", arg: 2, scope: !7062, file: !3, line: 2202, type: !2184)
!7066 = !DILocation(line: 2202, column: 27, scope: !7062)
!7067 = !DILocation(line: 2204, column: 7, scope: !7068)
!7068 = distinct !DILexicalBlock(scope: !7062, file: !3, line: 2204, column: 7)
!7069 = !DILocation(line: 2204, column: 25, scope: !7068)
!7070 = !DILocation(line: 2204, column: 22, scope: !7068)
!7071 = !DILocation(line: 2204, column: 7, scope: !7062)
!7072 = !DILocalVariable(name: "not_ex_free", scope: !7073, file: !3, line: 2206, type: !990)
!7073 = distinct !DILexicalBlock(scope: !7068, file: !3, line: 2205, column: 5)
!7074 = !DILocation(line: 2206, column: 11, scope: !7073)
!7075 = !DILocation(line: 2210, column: 12, scope: !7076)
!7076 = distinct !DILexicalBlock(scope: !7073, file: !3, line: 2210, column: 11)
!7077 = !DILocation(line: 2211, column: 4, scope: !7076)
!7078 = !DILocation(line: 2211, column: 7, scope: !7076)
!7079 = !DILocation(line: 2212, column: 4, scope: !7076)
!7080 = !DILocation(line: 2212, column: 8, scope: !7076)
!7081 = !DILocation(line: 2213, column: 8, scope: !7076)
!7082 = !DILocation(line: 2213, column: 29, scope: !7076)
!7083 = !DILocation(line: 2213, column: 13, scope: !7076)
!7084 = !DILocation(line: 2213, column: 35, scope: !7076)
!7085 = !DILocation(line: 2214, column: 6, scope: !7076)
!7086 = !DILocation(line: 2214, column: 34, scope: !7076)
!7087 = !DILocation(line: 2214, column: 46, scope: !7076)
!7088 = !DILocation(line: 2214, column: 52, scope: !7076)
!7089 = !DILocation(line: 2214, column: 9, scope: !7076)
!7090 = !DILocation(line: 2215, column: 22, scope: !7076)
!7091 = !DILocation(line: 2215, column: 20, scope: !7076)
!7092 = !DILocation(line: 2216, column: 19, scope: !7076)
!7093 = !DILocation(line: 2216, column: 22, scope: !7076)
!7094 = !DILocation(line: 2217, column: 5, scope: !7076)
!7095 = !DILocation(line: 2217, column: 21, scope: !7076)
!7096 = !DILocation(line: 2217, column: 27, scope: !7076)
!7097 = !DILocation(line: 2217, column: 9, scope: !7076)
!7098 = !DILocation(line: 2218, column: 5, scope: !7076)
!7099 = !DILocation(line: 2218, column: 43, scope: !7076)
!7100 = !DILocation(line: 2218, column: 49, scope: !7076)
!7101 = !DILocation(line: 2219, column: 8, scope: !7076)
!7102 = !DILocation(line: 2218, column: 24, scope: !7076)
!7103 = !DILocation(line: 2218, column: 23, scope: !7076)
!7104 = !DILocation(line: 2218, column: 21, scope: !7076)
!7105 = !DILocation(line: 2210, column: 11, scope: !7073)
!7106 = !DILocation(line: 2221, column: 8, scope: !7107)
!7107 = distinct !DILexicalBlock(scope: !7108, file: !3, line: 2221, column: 8)
!7108 = distinct !DILexicalBlock(scope: !7076, file: !3, line: 2220, column: 2)
!7109 = !DILocation(line: 2224, column: 8, scope: !7107)
!7110 = !DILocation(line: 2224, column: 11, scope: !7107)
!7111 = !DILocation(line: 2224, column: 28, scope: !7107)
!7112 = !DILocation(line: 2225, column: 8, scope: !7107)
!7113 = !DILocation(line: 2225, column: 11, scope: !7107)
!7114 = !DILocation(line: 2225, column: 22, scope: !7107)
!7115 = !DILocation(line: 2225, column: 27, scope: !7107)
!7116 = !DILocation(line: 2221, column: 8, scope: !7108)
!7117 = !DILocalVariable(name: "new_ds", scope: !7118, file: !3, line: 2227, type: !2184)
!7118 = distinct !DILexicalBlock(scope: !7107, file: !3, line: 2226, column: 6)
!7119 = !DILocation(line: 2227, column: 13, scope: !7118)
!7120 = !DILocation(line: 2230, column: 31, scope: !7118)
!7121 = !DILocation(line: 2230, column: 17, scope: !7118)
!7122 = !DILocation(line: 2230, column: 15, scope: !7118)
!7123 = !DILocation(line: 2233, column: 56, scope: !7124)
!7124 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 2233, column: 12)
!7125 = !DILocation(line: 2233, column: 62, scope: !7124)
!7126 = !DILocation(line: 2233, column: 12, scope: !7124)
!7127 = !DILocation(line: 2233, column: 12, scope: !7118)
!7128 = !DILocation(line: 2235, column: 8, scope: !7124)
!7129 = !DILocation(line: 2235, column: 6, scope: !7124)
!7130 = !DILocation(line: 2235, column: 3, scope: !7124)
!7131 = !DILocation(line: 2238, column: 9, scope: !7124)
!7132 = !DILocation(line: 2238, column: 12, scope: !7124)
!7133 = !DILocation(line: 2238, column: 28, scope: !7124)
!7134 = !DILocation(line: 2238, column: 6, scope: !7124)
!7135 = !DILocation(line: 2239, column: 6, scope: !7118)
!7136 = !DILocation(line: 2242, column: 19, scope: !7107)
!7137 = !DILocation(line: 2242, column: 22, scope: !7107)
!7138 = !DILocation(line: 2242, column: 38, scope: !7107)
!7139 = !DILocation(line: 2242, column: 16, scope: !7107)
!7140 = !DILocation(line: 2243, column: 2, scope: !7108)
!7141 = !DILocation(line: 2244, column: 5, scope: !7073)
!7142 = !DILocation(line: 2246, column: 10, scope: !7062)
!7143 = !DILocation(line: 2246, column: 3, scope: !7062)
!7144 = distinct !DISubprogram(name: "rgn_rank", scope: !3, file: !3, line: 2276, type: !2358, scopeLine: 2277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7145 = !DILocalVariable(name: "insn1", arg: 1, scope: !7144, file: !3, line: 2276, type: !997)
!7146 = !DILocation(line: 2276, column: 15, scope: !7144)
!7147 = !DILocalVariable(name: "insn2", arg: 2, scope: !7144, file: !3, line: 2276, type: !997)
!7148 = !DILocation(line: 2276, column: 26, scope: !7144)
!7149 = !DILocation(line: 2279, column: 7, scope: !7150)
!7150 = distinct !DILexicalBlock(scope: !7144, file: !3, line: 2279, column: 7)
!7151 = !DILocation(line: 2279, column: 26, scope: !7150)
!7152 = !DILocation(line: 2279, column: 23, scope: !7150)
!7153 = !DILocation(line: 2279, column: 7, scope: !7144)
!7154 = !DILocalVariable(name: "spec_val", scope: !7155, file: !3, line: 2281, type: !990)
!7155 = distinct !DILexicalBlock(scope: !7150, file: !3, line: 2280, column: 5)
!7156 = !DILocation(line: 2281, column: 11, scope: !7155)
!7157 = !DILocalVariable(name: "prob_val", scope: !7155, file: !3, line: 2281, type: !990)
!7158 = !DILocation(line: 2281, column: 21, scope: !7155)
!7159 = !DILocation(line: 2284, column: 12, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 2284, column: 11)
!7161 = !DILocation(line: 2284, column: 31, scope: !7160)
!7162 = !DILocation(line: 2284, column: 28, scope: !7160)
!7163 = !DILocation(line: 2284, column: 42, scope: !7160)
!7164 = !DILocation(line: 2284, column: 46, scope: !7160)
!7165 = !DILocation(line: 2284, column: 65, scope: !7160)
!7166 = !DILocation(line: 2284, column: 62, scope: !7160)
!7167 = !DILocation(line: 2284, column: 11, scope: !7155)
!7168 = !DILocation(line: 2285, column: 2, scope: !7160)
!7169 = !DILocation(line: 2286, column: 12, scope: !7170)
!7170 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 2286, column: 11)
!7171 = !DILocation(line: 2286, column: 31, scope: !7170)
!7172 = !DILocation(line: 2286, column: 28, scope: !7170)
!7173 = !DILocation(line: 2286, column: 42, scope: !7170)
!7174 = !DILocation(line: 2286, column: 46, scope: !7170)
!7175 = !DILocation(line: 2286, column: 65, scope: !7170)
!7176 = !DILocation(line: 2286, column: 62, scope: !7170)
!7177 = !DILocation(line: 2286, column: 11, scope: !7155)
!7178 = !DILocation(line: 2287, column: 2, scope: !7170)
!7179 = !DILocation(line: 2290, column: 18, scope: !7155)
!7180 = !DILocation(line: 2290, column: 48, scope: !7155)
!7181 = !DILocation(line: 2290, column: 46, scope: !7155)
!7182 = !DILocation(line: 2290, column: 16, scope: !7155)
!7183 = !DILocation(line: 2291, column: 11, scope: !7184)
!7184 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 2291, column: 11)
!7185 = !DILocation(line: 2291, column: 11, scope: !7155)
!7186 = !DILocation(line: 2292, column: 9, scope: !7184)
!7187 = !DILocation(line: 2292, column: 2, scope: !7184)
!7188 = !DILocation(line: 2295, column: 18, scope: !7155)
!7189 = !DILocation(line: 2295, column: 45, scope: !7155)
!7190 = !DILocation(line: 2295, column: 43, scope: !7155)
!7191 = !DILocation(line: 2295, column: 16, scope: !7155)
!7192 = !DILocation(line: 2296, column: 11, scope: !7193)
!7193 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 2296, column: 11)
!7194 = !DILocation(line: 2296, column: 11, scope: !7155)
!7195 = !DILocation(line: 2297, column: 9, scope: !7193)
!7196 = !DILocation(line: 2297, column: 2, scope: !7193)
!7197 = !DILocation(line: 2298, column: 5, scope: !7155)
!7198 = !DILocation(line: 2299, column: 3, scope: !7144)
!7199 = !DILocation(line: 2300, column: 1, scope: !7144)
!7200 = !DILocalVariable(name: "insn", arg: 1, scope: !2459, file: !3, line: 2255, type: !2364)
!7201 = !DILocation(line: 2255, column: 27, scope: !2459)
!7202 = !DILocalVariable(name: "aligned", arg: 2, scope: !2459, file: !3, line: 2255, type: !990)
!7203 = !DILocation(line: 2255, column: 37, scope: !2459)
!7204 = !DILocation(line: 2259, column: 7, scope: !7205)
!7205 = distinct !DILexicalBlock(scope: !2459, file: !3, line: 2259, column: 7)
!7206 = !DILocation(line: 2259, column: 7, scope: !2459)
!7207 = !DILocation(line: 2260, column: 33, scope: !7205)
!7208 = !DILocation(line: 2260, column: 49, scope: !7205)
!7209 = !DILocation(line: 2260, column: 5, scope: !7205)
!7210 = !DILocation(line: 2263, column: 11, scope: !7211)
!7211 = distinct !DILexicalBlock(scope: !7212, file: !3, line: 2263, column: 11)
!7212 = distinct !DILexicalBlock(scope: !7205, file: !3, line: 2262, column: 5)
!7213 = !DILocation(line: 2263, column: 29, scope: !7211)
!7214 = !DILocation(line: 2263, column: 33, scope: !7211)
!7215 = !DILocation(line: 2263, column: 36, scope: !7211)
!7216 = !DILocation(line: 2263, column: 54, scope: !7211)
!7217 = !DILocation(line: 2263, column: 51, scope: !7211)
!7218 = !DILocation(line: 2263, column: 11, scope: !7212)
!7219 = !DILocation(line: 2264, column: 26, scope: !7211)
!7220 = !DILocation(line: 2264, column: 43, scope: !7211)
!7221 = !DILocation(line: 2264, column: 2, scope: !7211)
!7222 = !DILocation(line: 2266, column: 22, scope: !7211)
!7223 = !DILocation(line: 2266, column: 2, scope: !7211)
!7224 = !DILocation(line: 2268, column: 3, scope: !2459)
!7225 = distinct !DISubprogram(name: "rgn_insn_finishes_block_p", scope: !3, file: !3, line: 2357, type: !2370, scopeLine: 2358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7226 = !DILocalVariable(name: "insn", arg: 1, scope: !7225, file: !3, line: 2357, type: !997)
!7227 = !DILocation(line: 2357, column: 32, scope: !7225)
!7228 = !DILocation(line: 2359, column: 7, scope: !7229)
!7229 = distinct !DILexicalBlock(scope: !7225, file: !3, line: 2359, column: 7)
!7230 = !DILocation(line: 2359, column: 25, scope: !7229)
!7231 = !DILocation(line: 2359, column: 22, scope: !7229)
!7232 = !DILocation(line: 2360, column: 7, scope: !7229)
!7233 = !DILocation(line: 2360, column: 10, scope: !7229)
!7234 = !DILocation(line: 2360, column: 31, scope: !7229)
!7235 = !DILocation(line: 2360, column: 38, scope: !7229)
!7236 = !DILocation(line: 2360, column: 35, scope: !7229)
!7237 = !DILocation(line: 2359, column: 7, scope: !7225)
!7238 = !DILocation(line: 2362, column: 5, scope: !7229)
!7239 = !DILocation(line: 2364, column: 3, scope: !7225)
!7240 = !DILocation(line: 2365, column: 1, scope: !7225)
!7241 = distinct !DISubprogram(name: "rgn_add_remove_insn", scope: !3, file: !3, line: 3333, type: !2380, scopeLine: 3334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7242 = !DILocalVariable(name: "insn", arg: 1, scope: !7241, file: !3, line: 3333, type: !997)
!7243 = !DILocation(line: 3333, column: 26, scope: !7241)
!7244 = !DILocalVariable(name: "remove_p", arg: 2, scope: !7241, file: !3, line: 3333, type: !990)
!7245 = !DILocation(line: 3333, column: 36, scope: !7241)
!7246 = !DILocation(line: 3335, column: 8, scope: !7247)
!7247 = distinct !DILexicalBlock(scope: !7241, file: !3, line: 3335, column: 7)
!7248 = !DILocation(line: 3335, column: 7, scope: !7241)
!7249 = !DILocation(line: 3336, column: 16, scope: !7247)
!7250 = !DILocation(line: 3336, column: 5, scope: !7247)
!7251 = !DILocation(line: 3338, column: 16, scope: !7247)
!7252 = !DILocation(line: 3340, column: 7, scope: !7253)
!7253 = distinct !DILexicalBlock(scope: !7241, file: !3, line: 3340, column: 7)
!7254 = !DILocation(line: 3340, column: 25, scope: !7253)
!7255 = !DILocation(line: 3340, column: 22, scope: !7253)
!7256 = !DILocation(line: 3340, column: 7, scope: !7241)
!7257 = !DILocation(line: 3342, column: 12, scope: !7258)
!7258 = distinct !DILexicalBlock(scope: !7259, file: !3, line: 3342, column: 11)
!7259 = distinct !DILexicalBlock(scope: !7253, file: !3, line: 3341, column: 5)
!7260 = !DILocation(line: 3342, column: 11, scope: !7259)
!7261 = !DILocation(line: 3343, column: 16, scope: !7258)
!7262 = !DILocation(line: 3343, column: 2, scope: !7258)
!7263 = !DILocation(line: 3345, column: 16, scope: !7258)
!7264 = !DILocation(line: 3346, column: 5, scope: !7259)
!7265 = !DILocation(line: 3347, column: 1, scope: !7241)
!7266 = distinct !DISubprogram(name: "begin_schedule_ready", scope: !3, file: !3, line: 2170, type: !2384, scopeLine: 2171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7267 = !DILocalVariable(name: "insn", arg: 1, scope: !7266, file: !3, line: 2170, type: !997)
!7268 = !DILocation(line: 2170, column: 27, scope: !7266)
!7269 = !DILocalVariable(name: "last", arg: 2, scope: !7266, file: !3, line: 2170, type: !997)
!7270 = !DILocation(line: 2170, column: 37, scope: !7266)
!7271 = !DILocation(line: 2173, column: 7, scope: !7272)
!7272 = distinct !DILexicalBlock(scope: !7266, file: !3, line: 2173, column: 7)
!7273 = !DILocation(line: 2173, column: 25, scope: !7272)
!7274 = !DILocation(line: 2173, column: 22, scope: !7272)
!7275 = !DILocation(line: 2173, column: 7, scope: !7266)
!7276 = !DILocation(line: 2175, column: 11, scope: !7277)
!7277 = distinct !DILexicalBlock(scope: !7278, file: !3, line: 2175, column: 11)
!7278 = distinct !DILexicalBlock(scope: !7272, file: !3, line: 2174, column: 5)
!7279 = !DILocation(line: 2175, column: 11, scope: !7278)
!7280 = !DILocation(line: 2177, column: 4, scope: !7281)
!7281 = distinct !DILexicalBlock(scope: !7277, file: !3, line: 2176, column: 2)
!7282 = !DILocation(line: 2179, column: 17, scope: !7281)
!7283 = !DILocation(line: 2179, column: 23, scope: !7281)
!7284 = !DILocation(line: 2179, column: 4, scope: !7281)
!7285 = !DILocation(line: 2182, column: 8, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7281, file: !3, line: 2182, column: 8)
!7287 = !DILocation(line: 2182, column: 28, scope: !7286)
!7288 = !DILocation(line: 2182, column: 31, scope: !7286)
!7289 = !DILocation(line: 2182, column: 8, scope: !7281)
!7290 = !DILocation(line: 2183, column: 20, scope: !7286)
!7291 = !DILocation(line: 2183, column: 6, scope: !7286)
!7292 = !DILocation(line: 2185, column: 11, scope: !7281)
!7293 = !DILocation(line: 2186, column: 2, scope: !7281)
!7294 = !DILocation(line: 2187, column: 15, scope: !7278)
!7295 = !DILocation(line: 2188, column: 5, scope: !7278)
!7296 = !DILocation(line: 2192, column: 27, scope: !7297)
!7297 = distinct !DILexicalBlock(scope: !7272, file: !3, line: 2190, column: 5)
!7298 = !DILocation(line: 2194, column: 16, scope: !7266)
!7299 = !DILocation(line: 2195, column: 1, scope: !7266)
!7300 = distinct !DISubprogram(name: "advance_target_bb", scope: !3, file: !3, line: 3481, type: !2388, scopeLine: 3482, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7301 = !DILocalVariable(name: "bb", arg: 1, scope: !7300, file: !3, line: 3481, type: !1536)
!7302 = !DILocation(line: 3481, column: 32, scope: !7300)
!7303 = !DILocalVariable(name: "insn", arg: 2, scope: !7300, file: !3, line: 3481, type: !997)
!7304 = !DILocation(line: 3481, column: 40, scope: !7300)
!7305 = !DILocation(line: 3483, column: 7, scope: !7306)
!7306 = distinct !DILexicalBlock(scope: !7300, file: !3, line: 3483, column: 7)
!7307 = !DILocation(line: 3483, column: 7, scope: !7300)
!7308 = !DILocation(line: 3484, column: 5, scope: !7306)
!7309 = !DILocation(line: 3486, column: 3, scope: !7300)
!7310 = !DILocation(line: 3488, column: 10, scope: !7300)
!7311 = !DILocation(line: 3488, column: 14, scope: !7300)
!7312 = !DILocation(line: 3488, column: 3, scope: !7300)
!7313 = !DILocation(line: 3489, column: 1, scope: !7300)
!7314 = distinct !DISubprogram(name: "compute_trg_info", scope: !3, file: !3, line: 1477, type: !2327, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7315 = !DILocalVariable(name: "trg", arg: 1, scope: !7314, file: !3, line: 1477, type: !990)
!7316 = !DILocation(line: 1477, column: 23, scope: !7314)
!7317 = !DILocalVariable(name: "sp", scope: !7314, file: !3, line: 1479, type: !2185)
!7318 = !DILocation(line: 1479, column: 14, scope: !7314)
!7319 = !DILocalVariable(name: "el", scope: !7314, file: !3, line: 1480, type: !7320)
!7320 = !DIDerivedType(tag: DW_TAG_typedef, name: "edgelst", file: !3, line: 169, baseType: !7321)
!7321 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 164, size: 128, elements: !7322)
!7322 = !{!7323, !7324}
!7323 = !DIDerivedType(tag: DW_TAG_member, name: "first_member", scope: !7321, file: !3, line: 166, baseType: !2167, size: 64)
!7324 = !DIDerivedType(tag: DW_TAG_member, name: "nr_members", scope: !7321, file: !3, line: 167, baseType: !990, size: 32, offset: 64)
!7325 = !DILocation(line: 1480, column: 11, scope: !7314)
!7326 = !DILocalVariable(name: "i", scope: !7314, file: !3, line: 1481, type: !990)
!7327 = !DILocation(line: 1481, column: 7, scope: !7314)
!7328 = !DILocalVariable(name: "j", scope: !7314, file: !3, line: 1481, type: !990)
!7329 = !DILocation(line: 1481, column: 10, scope: !7314)
!7330 = !DILocalVariable(name: "k", scope: !7314, file: !3, line: 1481, type: !990)
!7331 = !DILocation(line: 1481, column: 13, scope: !7314)
!7332 = !DILocalVariable(name: "update_idx", scope: !7314, file: !3, line: 1481, type: !990)
!7333 = !DILocation(line: 1481, column: 16, scope: !7314)
!7334 = !DILocalVariable(name: "block", scope: !7314, file: !3, line: 1482, type: !1536)
!7335 = !DILocation(line: 1482, column: 15, scope: !7314)
!7336 = !DILocalVariable(name: "visited", scope: !7314, file: !3, line: 1483, type: !2258)
!7337 = !DILocation(line: 1483, column: 11, scope: !7314)
!7338 = !DILocalVariable(name: "ei", scope: !7314, file: !3, line: 1484, type: !2177)
!7339 = !DILocation(line: 1484, column: 17, scope: !7314)
!7340 = !DILocalVariable(name: "e", scope: !7314, file: !3, line: 1485, type: !1553)
!7341 = !DILocation(line: 1485, column: 8, scope: !7314)
!7342 = !DILocation(line: 1487, column: 21, scope: !7314)
!7343 = !DILocation(line: 1487, column: 19, scope: !7314)
!7344 = !DILocation(line: 1489, column: 14, scope: !7314)
!7345 = !DILocation(line: 1494, column: 17, scope: !7314)
!7346 = !DILocation(line: 1494, column: 37, scope: !7314)
!7347 = !DILocation(line: 1494, column: 35, scope: !7314)
!7348 = !DILocation(line: 1494, column: 50, scope: !7314)
!7349 = !DILocation(line: 1494, column: 48, scope: !7314)
!7350 = !DILocation(line: 1494, column: 14, scope: !7314)
!7351 = !DILocation(line: 1495, column: 17, scope: !7314)
!7352 = !DILocation(line: 1495, column: 15, scope: !7314)
!7353 = !DILocation(line: 1497, column: 16, scope: !7314)
!7354 = !DILocation(line: 1498, column: 19, scope: !7314)
!7355 = !DILocation(line: 1498, column: 17, scope: !7314)
!7356 = !DILocation(line: 1501, column: 8, scope: !7314)
!7357 = !DILocation(line: 1501, column: 26, scope: !7314)
!7358 = !DILocation(line: 1501, column: 24, scope: !7314)
!7359 = !DILocation(line: 1501, column: 6, scope: !7314)
!7360 = !DILocation(line: 1502, column: 3, scope: !7314)
!7361 = !DILocation(line: 1502, column: 7, scope: !7314)
!7362 = !DILocation(line: 1502, column: 16, scope: !7314)
!7363 = !DILocation(line: 1503, column: 3, scope: !7314)
!7364 = !DILocation(line: 1503, column: 7, scope: !7314)
!7365 = !DILocation(line: 1503, column: 22, scope: !7314)
!7366 = !DILocation(line: 1504, column: 3, scope: !7314)
!7367 = !DILocation(line: 1504, column: 7, scope: !7314)
!7368 = !DILocation(line: 1504, column: 16, scope: !7314)
!7369 = !DILocation(line: 1506, column: 28, scope: !7314)
!7370 = !DILocation(line: 1506, column: 13, scope: !7314)
!7371 = !DILocation(line: 1506, column: 11, scope: !7314)
!7372 = !DILocation(line: 1508, column: 12, scope: !7373)
!7373 = distinct !DILexicalBlock(scope: !7314, file: !3, line: 1508, column: 3)
!7374 = !DILocation(line: 1508, column: 16, scope: !7373)
!7375 = !DILocation(line: 1508, column: 10, scope: !7373)
!7376 = !DILocation(line: 1508, column: 8, scope: !7373)
!7377 = !DILocation(line: 1508, column: 21, scope: !7378)
!7378 = distinct !DILexicalBlock(scope: !7373, file: !3, line: 1508, column: 3)
!7379 = !DILocation(line: 1508, column: 25, scope: !7378)
!7380 = !DILocation(line: 1508, column: 23, scope: !7378)
!7381 = !DILocation(line: 1508, column: 3, scope: !7373)
!7382 = !DILocation(line: 1510, column: 12, scope: !7383)
!7383 = distinct !DILexicalBlock(scope: !7378, file: !3, line: 1509, column: 5)
!7384 = !DILocation(line: 1510, column: 30, scope: !7383)
!7385 = !DILocation(line: 1510, column: 28, scope: !7383)
!7386 = !DILocation(line: 1510, column: 10, scope: !7383)
!7387 = !DILocation(line: 1512, column: 22, scope: !7383)
!7388 = !DILocation(line: 1512, column: 7, scope: !7383)
!7389 = !DILocation(line: 1512, column: 11, scope: !7383)
!7390 = !DILocation(line: 1512, column: 20, scope: !7383)
!7391 = !DILocation(line: 1513, column: 11, scope: !7392)
!7392 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 1513, column: 11)
!7393 = !DILocation(line: 1513, column: 15, scope: !7392)
!7394 = !DILocation(line: 1513, column: 11, scope: !7383)
!7395 = !DILocalVariable(name: "tf", scope: !7396, file: !3, line: 1515, type: !990)
!7396 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 1514, column: 2)
!7397 = !DILocation(line: 1515, column: 8, scope: !7396)
!7398 = !DILocation(line: 1515, column: 13, scope: !7396)
!7399 = !DILocation(line: 1515, column: 18, scope: !7396)
!7400 = !DILocalVariable(name: "cf", scope: !7396, file: !3, line: 1515, type: !990)
!7401 = !DILocation(line: 1515, column: 24, scope: !7396)
!7402 = !DILocation(line: 1515, column: 29, scope: !7396)
!7403 = !DILocation(line: 1515, column: 34, scope: !7396)
!7404 = !DILocation(line: 1518, column: 20, scope: !7396)
!7405 = !DILocation(line: 1518, column: 27, scope: !7396)
!7406 = !DILocation(line: 1518, column: 30, scope: !7396)
!7407 = !DILocation(line: 1518, column: 52, scope: !7396)
!7408 = !DILocation(line: 1518, column: 50, scope: !7396)
!7409 = !DILocation(line: 1518, column: 4, scope: !7396)
!7410 = !DILocation(line: 1518, column: 8, scope: !7396)
!7411 = !DILocation(line: 1518, column: 17, scope: !7396)
!7412 = !DILocation(line: 1519, column: 20, scope: !7396)
!7413 = !DILocation(line: 1519, column: 24, scope: !7396)
!7414 = !DILocation(line: 1519, column: 36, scope: !7396)
!7415 = !DILocation(line: 1519, column: 33, scope: !7396)
!7416 = !DILocation(line: 1519, column: 19, scope: !7396)
!7417 = !DILocation(line: 1519, column: 4, scope: !7396)
!7418 = !DILocation(line: 1519, column: 8, scope: !7396)
!7419 = !DILocation(line: 1519, column: 17, scope: !7396)
!7420 = !DILocation(line: 1520, column: 2, scope: !7396)
!7421 = !DILocation(line: 1522, column: 11, scope: !7422)
!7422 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 1522, column: 11)
!7423 = !DILocation(line: 1522, column: 15, scope: !7422)
!7424 = !DILocation(line: 1522, column: 11, scope: !7383)
!7425 = !DILocation(line: 1524, column: 17, scope: !7426)
!7426 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 1523, column: 2)
!7427 = !DILocation(line: 1524, column: 20, scope: !7426)
!7428 = !DILocation(line: 1524, column: 4, scope: !7426)
!7429 = !DILocation(line: 1525, column: 29, scope: !7426)
!7430 = !DILocation(line: 1525, column: 25, scope: !7426)
!7431 = !DILocation(line: 1525, column: 4, scope: !7426)
!7432 = !DILocation(line: 1525, column: 8, scope: !7426)
!7433 = !DILocation(line: 1525, column: 23, scope: !7426)
!7434 = !DILocation(line: 1526, column: 8, scope: !7435)
!7435 = distinct !DILexicalBlock(scope: !7426, file: !3, line: 1526, column: 8)
!7436 = !DILocation(line: 1526, column: 12, scope: !7435)
!7437 = !DILocation(line: 1526, column: 27, scope: !7435)
!7438 = !DILocation(line: 1526, column: 31, scope: !7435)
!7439 = !DILocation(line: 1526, column: 8, scope: !7426)
!7440 = !DILocation(line: 1527, column: 6, scope: !7435)
!7441 = !DILocation(line: 1527, column: 10, scope: !7435)
!7442 = !DILocation(line: 1527, column: 19, scope: !7435)
!7443 = !DILocation(line: 1528, column: 2, scope: !7426)
!7444 = !DILocation(line: 1530, column: 11, scope: !7445)
!7445 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 1530, column: 11)
!7446 = !DILocation(line: 1530, column: 15, scope: !7445)
!7447 = !DILocation(line: 1530, column: 11, scope: !7383)
!7448 = !DILocation(line: 1534, column: 34, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7445, file: !3, line: 1531, column: 2)
!7450 = !DILocation(line: 1534, column: 46, scope: !7449)
!7451 = !DILocation(line: 1534, column: 4, scope: !7449)
!7452 = !DILocation(line: 1534, column: 8, scope: !7449)
!7453 = !DILocation(line: 1534, column: 18, scope: !7449)
!7454 = !DILocation(line: 1534, column: 31, scope: !7449)
!7455 = !DILocation(line: 1535, column: 34, scope: !7449)
!7456 = !DILocation(line: 1535, column: 4, scope: !7449)
!7457 = !DILocation(line: 1535, column: 8, scope: !7449)
!7458 = !DILocation(line: 1535, column: 18, scope: !7449)
!7459 = !DILocation(line: 1535, column: 29, scope: !7449)
!7460 = !DILocation(line: 1536, column: 11, scope: !7461)
!7461 = distinct !DILexicalBlock(scope: !7449, file: !3, line: 1536, column: 4)
!7462 = !DILocation(line: 1536, column: 9, scope: !7461)
!7463 = !DILocation(line: 1536, column: 16, scope: !7464)
!7464 = distinct !DILexicalBlock(scope: !7461, file: !3, line: 1536, column: 4)
!7465 = !DILocation(line: 1536, column: 23, scope: !7464)
!7466 = !DILocation(line: 1536, column: 18, scope: !7464)
!7467 = !DILocation(line: 1536, column: 4, scope: !7461)
!7468 = !DILocation(line: 1537, column: 35, scope: !7464)
!7469 = !DILocation(line: 1537, column: 48, scope: !7464)
!7470 = !DILocation(line: 1537, column: 32, scope: !7464)
!7471 = !DILocation(line: 1537, column: 52, scope: !7464)
!7472 = !DILocation(line: 1537, column: 6, scope: !7464)
!7473 = !DILocation(line: 1537, column: 18, scope: !7464)
!7474 = !DILocation(line: 1537, column: 30, scope: !7464)
!7475 = !DILocation(line: 1536, column: 45, scope: !7464)
!7476 = !DILocation(line: 1536, column: 50, scope: !7464)
!7477 = !DILocation(line: 1536, column: 4, scope: !7464)
!7478 = distinct !{!7478, !7467, !7479}
!7479 = !DILocation(line: 1537, column: 52, scope: !7461)
!7480 = !DILocation(line: 1538, column: 35, scope: !7449)
!7481 = !DILocation(line: 1538, column: 47, scope: !7449)
!7482 = !DILocation(line: 1538, column: 4, scope: !7449)
!7483 = !DILocation(line: 1538, column: 8, scope: !7449)
!7484 = !DILocation(line: 1538, column: 19, scope: !7449)
!7485 = !DILocation(line: 1538, column: 32, scope: !7449)
!7486 = !DILocation(line: 1547, column: 15, scope: !7449)
!7487 = !DILocation(line: 1548, column: 18, scope: !7449)
!7488 = !DILocation(line: 1548, column: 4, scope: !7449)
!7489 = !DILocation(line: 1549, column: 11, scope: !7490)
!7490 = distinct !DILexicalBlock(scope: !7449, file: !3, line: 1549, column: 4)
!7491 = !DILocation(line: 1549, column: 9, scope: !7490)
!7492 = !DILocation(line: 1549, column: 16, scope: !7493)
!7493 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 1549, column: 4)
!7494 = !DILocation(line: 1549, column: 23, scope: !7493)
!7495 = !DILocation(line: 1549, column: 18, scope: !7493)
!7496 = !DILocation(line: 1549, column: 4, scope: !7490)
!7497 = !DILocation(line: 1551, column: 19, scope: !7498)
!7498 = distinct !DILexicalBlock(scope: !7493, file: !3, line: 1550, column: 6)
!7499 = !DILocation(line: 1551, column: 32, scope: !7498)
!7500 = !DILocation(line: 1551, column: 16, scope: !7498)
!7501 = !DILocation(line: 1551, column: 36, scope: !7498)
!7502 = !DILocation(line: 1551, column: 14, scope: !7498)
!7503 = !DILocation(line: 1552, column: 8, scope: !7504)
!7504 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 1552, column: 8)
!7505 = !DILocation(line: 1552, column: 8, scope: !7506)
!7506 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 1552, column: 8)
!7507 = !DILocation(line: 1554, column: 10, scope: !7508)
!7508 = distinct !DILexicalBlock(scope: !7509, file: !3, line: 1554, column: 9)
!7509 = distinct !DILexicalBlock(scope: !7506, file: !3, line: 1553, column: 3)
!7510 = !DILocation(line: 1554, column: 9, scope: !7509)
!7511 = !DILocation(line: 1556, column: 16, scope: !7512)
!7512 = distinct !DILexicalBlock(scope: !7513, file: !3, line: 1556, column: 9)
!7513 = distinct !DILexicalBlock(scope: !7508, file: !3, line: 1555, column: 7)
!7514 = !DILocation(line: 1556, column: 14, scope: !7512)
!7515 = !DILocation(line: 1556, column: 21, scope: !7516)
!7516 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 1556, column: 9)
!7517 = !DILocation(line: 1556, column: 28, scope: !7516)
!7518 = !DILocation(line: 1556, column: 23, scope: !7516)
!7519 = !DILocation(line: 1556, column: 9, scope: !7512)
!7520 = !DILocation(line: 1557, column: 8, scope: !7521)
!7521 = distinct !DILexicalBlock(scope: !7516, file: !3, line: 1557, column: 8)
!7522 = !DILocation(line: 1557, column: 16, scope: !7521)
!7523 = !DILocation(line: 1557, column: 29, scope: !7521)
!7524 = !DILocation(line: 1557, column: 13, scope: !7521)
!7525 = !DILocation(line: 1557, column: 10, scope: !7521)
!7526 = !DILocation(line: 1557, column: 8, scope: !7516)
!7527 = !DILocation(line: 1558, column: 6, scope: !7521)
!7528 = !DILocation(line: 1557, column: 30, scope: !7521)
!7529 = !DILocation(line: 1556, column: 41, scope: !7516)
!7530 = !DILocation(line: 1556, column: 9, scope: !7516)
!7531 = distinct !{!7531, !7519, !7532}
!7532 = !DILocation(line: 1558, column: 6, scope: !7512)
!7533 = !DILocation(line: 1560, column: 13, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7513, file: !3, line: 1560, column: 13)
!7535 = !DILocation(line: 1560, column: 21, scope: !7534)
!7536 = !DILocation(line: 1560, column: 15, scope: !7534)
!7537 = !DILocation(line: 1560, column: 13, scope: !7513)
!7538 = !DILocation(line: 1562, column: 34, scope: !7539)
!7539 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 1561, column: 4)
!7540 = !DILocation(line: 1562, column: 37, scope: !7539)
!7541 = !DILocation(line: 1562, column: 6, scope: !7539)
!7542 = !DILocation(line: 1562, column: 28, scope: !7539)
!7543 = !DILocation(line: 1562, column: 32, scope: !7539)
!7544 = !DILocation(line: 1563, column: 15, scope: !7539)
!7545 = !DILocation(line: 1563, column: 24, scope: !7539)
!7546 = !DILocation(line: 1563, column: 27, scope: !7539)
!7547 = !DILocation(line: 1563, column: 33, scope: !7539)
!7548 = !DILocation(line: 1563, column: 6, scope: !7539)
!7549 = !DILocation(line: 1564, column: 16, scope: !7539)
!7550 = !DILocation(line: 1565, column: 4, scope: !7539)
!7551 = !DILocation(line: 1566, column: 7, scope: !7513)
!7552 = !DILocation(line: 1567, column: 3, scope: !7509)
!7553 = distinct !{!7553, !7503, !7554}
!7554 = !DILocation(line: 1567, column: 3, scope: !7504)
!7555 = !DILocation(line: 1568, column: 6, scope: !7498)
!7556 = !DILocation(line: 1549, column: 36, scope: !7493)
!7557 = !DILocation(line: 1549, column: 4, scope: !7493)
!7558 = distinct !{!7558, !7496, !7559}
!7559 = !DILocation(line: 1568, column: 6, scope: !7490)
!7560 = !DILocation(line: 1569, column: 32, scope: !7449)
!7561 = !DILocation(line: 1569, column: 4, scope: !7449)
!7562 = !DILocation(line: 1569, column: 8, scope: !7449)
!7563 = !DILocation(line: 1569, column: 19, scope: !7449)
!7564 = !DILocation(line: 1569, column: 30, scope: !7449)
!7565 = !DILocation(line: 1572, column: 4, scope: !7449)
!7566 = !DILocation(line: 1573, column: 2, scope: !7449)
!7567 = !DILocation(line: 1576, column: 31, scope: !7568)
!7568 = distinct !DILexicalBlock(scope: !7445, file: !3, line: 1575, column: 2)
!7569 = !DILocation(line: 1576, column: 35, scope: !7568)
!7570 = !DILocation(line: 1576, column: 46, scope: !7568)
!7571 = !DILocation(line: 1576, column: 57, scope: !7568)
!7572 = !DILocation(line: 1576, column: 4, scope: !7568)
!7573 = !DILocation(line: 1576, column: 8, scope: !7568)
!7574 = !DILocation(line: 1576, column: 18, scope: !7568)
!7575 = !DILocation(line: 1576, column: 29, scope: !7568)
!7576 = !DILocation(line: 1578, column: 4, scope: !7568)
!7577 = !DILocation(line: 1578, column: 8, scope: !7568)
!7578 = !DILocation(line: 1578, column: 23, scope: !7568)
!7579 = !DILocation(line: 1579, column: 4, scope: !7568)
!7580 = !DILocation(line: 1579, column: 8, scope: !7568)
!7581 = !DILocation(line: 1579, column: 17, scope: !7568)
!7582 = !DILocation(line: 1581, column: 5, scope: !7383)
!7583 = !DILocation(line: 1508, column: 45, scope: !7378)
!7584 = !DILocation(line: 1508, column: 3, scope: !7378)
!7585 = distinct !{!7585, !7381, !7586}
!7586 = !DILocation(line: 1581, column: 5, scope: !7373)
!7587 = !DILocation(line: 1583, column: 3, scope: !7314)
!7588 = !DILocation(line: 1584, column: 1, scope: !7314)
!7589 = distinct !DISubprogram(name: "split_edges", scope: !3, file: !3, line: 1462, type: !7590, scopeLine: 1463, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7590 = !DISubroutineType(types: !7591)
!7591 = !{null, !990, !990, !7592}
!7592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7320, size: 64)
!7593 = !DILocalVariable(name: "bb_src", arg: 1, scope: !7589, file: !3, line: 1462, type: !990)
!7594 = !DILocation(line: 1462, column: 18, scope: !7589)
!7595 = !DILocalVariable(name: "bb_trg", arg: 2, scope: !7589, file: !3, line: 1462, type: !990)
!7596 = !DILocation(line: 1462, column: 30, scope: !7589)
!7597 = !DILocalVariable(name: "bl", arg: 3, scope: !7589, file: !3, line: 1462, type: !7592)
!7598 = !DILocation(line: 1462, column: 47, scope: !7589)
!7599 = !DILocalVariable(name: "src", scope: !7589, file: !3, line: 1464, type: !2258)
!7600 = !DILocation(line: 1464, column: 11, scope: !7589)
!7601 = !DILocation(line: 1464, column: 32, scope: !7589)
!7602 = !DILocation(line: 1464, column: 42, scope: !7589)
!7603 = !DILocation(line: 1464, column: 51, scope: !7589)
!7604 = !DILocation(line: 1464, column: 17, scope: !7589)
!7605 = !DILocation(line: 1465, column: 17, scope: !7589)
!7606 = !DILocation(line: 1465, column: 22, scope: !7589)
!7607 = !DILocation(line: 1465, column: 32, scope: !7589)
!7608 = !DILocation(line: 1465, column: 3, scope: !7589)
!7609 = !DILocation(line: 1467, column: 23, scope: !7589)
!7610 = !DILocation(line: 1467, column: 28, scope: !7589)
!7611 = !DILocation(line: 1467, column: 33, scope: !7589)
!7612 = !DILocation(line: 1467, column: 43, scope: !7589)
!7613 = !DILocation(line: 1467, column: 3, scope: !7589)
!7614 = !DILocation(line: 1468, column: 20, scope: !7589)
!7615 = !DILocation(line: 1468, column: 25, scope: !7589)
!7616 = !DILocation(line: 1468, column: 3, scope: !7589)
!7617 = !DILocation(line: 1469, column: 3, scope: !7589)
!7618 = !DILocation(line: 1470, column: 1, scope: !7589)
!7619 = distinct !DISubprogram(name: "extract_edgelst", scope: !3, file: !3, line: 334, type: !7620, scopeLine: 335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7620 = !DISubroutineType(types: !7621)
!7621 = !{null, !2258, !7592}
!7622 = !DILocalVariable(name: "set", arg: 1, scope: !7619, file: !3, line: 334, type: !2258)
!7623 = !DILocation(line: 334, column: 26, scope: !7619)
!7624 = !DILocalVariable(name: "el", arg: 2, scope: !7619, file: !3, line: 334, type: !7592)
!7625 = !DILocation(line: 334, column: 40, scope: !7619)
!7626 = !DILocalVariable(name: "i", scope: !7619, file: !3, line: 336, type: !7)
!7627 = !DILocation(line: 336, column: 16, scope: !7619)
!7628 = !DILocalVariable(name: "sbi", scope: !7619, file: !3, line: 337, type: !7629)
!7629 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap_iterator", file: !2259, line: 111, baseType: !7630)
!7630 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2259, line: 96, size: 256, elements: !7631)
!7631 = !{!7632, !7635, !7636, !7637, !7638}
!7632 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !7630, file: !2259, line: 98, baseType: !7633, size: 64)
!7633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7634, size: 64)
!7634 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1070)
!7635 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !7630, file: !2259, line: 101, baseType: !7, size: 32, offset: 64)
!7636 = !DIDerivedType(tag: DW_TAG_member, name: "word_num", scope: !7630, file: !2259, line: 104, baseType: !7, size: 32, offset: 96)
!7637 = !DIDerivedType(tag: DW_TAG_member, name: "bit_num", scope: !7630, file: !2259, line: 107, baseType: !7, size: 32, offset: 128)
!7638 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !7630, file: !2259, line: 110, baseType: !1070, size: 64, offset: 192)
!7639 = !DILocation(line: 337, column: 20, scope: !7619)
!7640 = !DILocation(line: 340, column: 16, scope: !7619)
!7641 = !DILocation(line: 342, column: 23, scope: !7619)
!7642 = !DILocation(line: 342, column: 37, scope: !7619)
!7643 = !DILocation(line: 342, column: 3, scope: !7619)
!7644 = !DILocation(line: 342, column: 7, scope: !7619)
!7645 = !DILocation(line: 342, column: 20, scope: !7619)
!7646 = !DILocation(line: 343, column: 3, scope: !7619)
!7647 = !DILocation(line: 343, column: 7, scope: !7619)
!7648 = !DILocation(line: 343, column: 18, scope: !7619)
!7649 = !DILocation(line: 346, column: 3, scope: !7650)
!7650 = distinct !DILexicalBlock(scope: !7619, file: !3, line: 346, column: 3)
!7651 = !DILocation(line: 346, column: 3, scope: !7652)
!7652 = distinct !DILexicalBlock(scope: !7650, file: !3, line: 346, column: 3)
!7653 = !DILocation(line: 348, column: 39, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7652, file: !3, line: 347, column: 5)
!7655 = !DILocation(line: 348, column: 49, scope: !7654)
!7656 = !DILocation(line: 348, column: 7, scope: !7654)
!7657 = !DILocation(line: 348, column: 33, scope: !7654)
!7658 = !DILocation(line: 348, column: 37, scope: !7654)
!7659 = !DILocation(line: 349, column: 7, scope: !7654)
!7660 = !DILocation(line: 349, column: 11, scope: !7654)
!7661 = !DILocation(line: 349, column: 21, scope: !7654)
!7662 = !DILocation(line: 350, column: 5, scope: !7654)
!7663 = distinct !{!7663, !7649, !7664}
!7664 = !DILocation(line: 350, column: 5, scope: !7650)
!7665 = !DILocation(line: 351, column: 1, scope: !7619)
!7666 = distinct !DISubprogram(name: "sbitmap_iter_init", scope: !2259, file: !2259, line: 117, type: !7667, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7667 = !DISubroutineType(types: !7668)
!7668 = !{null, !7669, !7670, !7}
!7669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7629, size: 64)
!7670 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_sbitmap", file: !2259, line: 46, baseType: !7671)
!7671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7672, size: 64)
!7672 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2261)
!7673 = !DILocalVariable(name: "i", arg: 1, scope: !7666, file: !2259, line: 117, type: !7669)
!7674 = !DILocation(line: 117, column: 38, scope: !7666)
!7675 = !DILocalVariable(name: "bmp", arg: 2, scope: !7666, file: !2259, line: 117, type: !7670)
!7676 = !DILocation(line: 117, column: 55, scope: !7666)
!7677 = !DILocalVariable(name: "min", arg: 3, scope: !7666, file: !2259, line: 117, type: !7)
!7678 = !DILocation(line: 117, column: 73, scope: !7666)
!7679 = !DILocation(line: 119, column: 17, scope: !7666)
!7680 = !DILocation(line: 119, column: 21, scope: !7666)
!7681 = !DILocation(line: 119, column: 3, scope: !7666)
!7682 = !DILocation(line: 119, column: 6, scope: !7666)
!7683 = !DILocation(line: 119, column: 15, scope: !7666)
!7684 = !DILocation(line: 120, column: 16, scope: !7666)
!7685 = !DILocation(line: 120, column: 3, scope: !7666)
!7686 = !DILocation(line: 120, column: 6, scope: !7666)
!7687 = !DILocation(line: 120, column: 14, scope: !7666)
!7688 = !DILocation(line: 121, column: 13, scope: !7666)
!7689 = !DILocation(line: 121, column: 18, scope: !7666)
!7690 = !DILocation(line: 121, column: 3, scope: !7666)
!7691 = !DILocation(line: 121, column: 6, scope: !7666)
!7692 = !DILocation(line: 121, column: 11, scope: !7666)
!7693 = !DILocation(line: 122, column: 12, scope: !7666)
!7694 = !DILocation(line: 122, column: 17, scope: !7666)
!7695 = !DILocation(line: 122, column: 3, scope: !7666)
!7696 = !DILocation(line: 122, column: 6, scope: !7666)
!7697 = !DILocation(line: 122, column: 10, scope: !7666)
!7698 = !DILocation(line: 124, column: 7, scope: !7699)
!7699 = distinct !DILexicalBlock(scope: !7666, file: !2259, line: 124, column: 7)
!7700 = !DILocation(line: 124, column: 10, scope: !7699)
!7701 = !DILocation(line: 124, column: 22, scope: !7699)
!7702 = !DILocation(line: 124, column: 25, scope: !7699)
!7703 = !DILocation(line: 124, column: 19, scope: !7699)
!7704 = !DILocation(line: 124, column: 7, scope: !7666)
!7705 = !DILocation(line: 125, column: 5, scope: !7699)
!7706 = !DILocation(line: 125, column: 8, scope: !7699)
!7707 = !DILocation(line: 125, column: 13, scope: !7699)
!7708 = !DILocation(line: 127, column: 16, scope: !7699)
!7709 = !DILocation(line: 127, column: 19, scope: !7699)
!7710 = !DILocation(line: 127, column: 23, scope: !7699)
!7711 = !DILocation(line: 127, column: 26, scope: !7699)
!7712 = !DILocation(line: 128, column: 13, scope: !7699)
!7713 = !DILocation(line: 128, column: 16, scope: !7699)
!7714 = !DILocation(line: 128, column: 24, scope: !7699)
!7715 = !DILocation(line: 128, column: 9, scope: !7699)
!7716 = !DILocation(line: 127, column: 5, scope: !7699)
!7717 = !DILocation(line: 127, column: 8, scope: !7699)
!7718 = !DILocation(line: 127, column: 13, scope: !7699)
!7719 = !DILocation(line: 129, column: 1, scope: !7666)
!7720 = distinct !DISubprogram(name: "sbitmap_iter_cond", scope: !2259, file: !2259, line: 136, type: !7721, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7721 = !DISubroutineType(types: !7722)
!7722 = !{!1230, !7669, !3717}
!7723 = !DILocalVariable(name: "i", arg: 1, scope: !7720, file: !2259, line: 136, type: !7669)
!7724 = !DILocation(line: 136, column: 38, scope: !7720)
!7725 = !DILocalVariable(name: "n", arg: 2, scope: !7720, file: !2259, line: 136, type: !3717)
!7726 = !DILocation(line: 136, column: 55, scope: !7720)
!7727 = !DILocation(line: 139, column: 3, scope: !7720)
!7728 = !DILocation(line: 139, column: 10, scope: !7729)
!7729 = distinct !DILexicalBlock(scope: !7730, file: !2259, line: 139, column: 3)
!7730 = distinct !DILexicalBlock(scope: !7720, file: !2259, line: 139, column: 3)
!7731 = !DILocation(line: 139, column: 13, scope: !7729)
!7732 = !DILocation(line: 139, column: 18, scope: !7729)
!7733 = !DILocation(line: 139, column: 3, scope: !7730)
!7734 = !DILocation(line: 141, column: 7, scope: !7735)
!7735 = distinct !DILexicalBlock(scope: !7729, file: !2259, line: 140, column: 5)
!7736 = !DILocation(line: 141, column: 10, scope: !7735)
!7737 = !DILocation(line: 141, column: 18, scope: !7735)
!7738 = !DILocation(line: 144, column: 11, scope: !7739)
!7739 = distinct !DILexicalBlock(scope: !7735, file: !2259, line: 144, column: 11)
!7740 = !DILocation(line: 144, column: 14, scope: !7739)
!7741 = !DILocation(line: 144, column: 26, scope: !7739)
!7742 = !DILocation(line: 144, column: 29, scope: !7739)
!7743 = !DILocation(line: 144, column: 23, scope: !7739)
!7744 = !DILocation(line: 144, column: 11, scope: !7735)
!7745 = !DILocation(line: 145, column: 2, scope: !7739)
!7746 = !DILocation(line: 147, column: 20, scope: !7735)
!7747 = !DILocation(line: 147, column: 23, scope: !7735)
!7748 = !DILocation(line: 147, column: 32, scope: !7735)
!7749 = !DILocation(line: 147, column: 7, scope: !7735)
!7750 = !DILocation(line: 147, column: 10, scope: !7735)
!7751 = !DILocation(line: 147, column: 18, scope: !7735)
!7752 = !DILocation(line: 148, column: 5, scope: !7735)
!7753 = !DILocation(line: 139, column: 34, scope: !7729)
!7754 = !DILocation(line: 139, column: 37, scope: !7729)
!7755 = !DILocation(line: 139, column: 41, scope: !7729)
!7756 = !DILocation(line: 139, column: 44, scope: !7729)
!7757 = !DILocation(line: 139, column: 24, scope: !7729)
!7758 = !DILocation(line: 139, column: 27, scope: !7729)
!7759 = !DILocation(line: 139, column: 32, scope: !7729)
!7760 = !DILocation(line: 139, column: 3, scope: !7729)
!7761 = distinct !{!7761, !7733, !7762}
!7762 = !DILocation(line: 148, column: 5, scope: !7730)
!7763 = !DILocation(line: 151, column: 3, scope: !7720)
!7764 = !DILocation(line: 151, column: 11, scope: !7765)
!7765 = distinct !DILexicalBlock(scope: !7766, file: !2259, line: 151, column: 3)
!7766 = distinct !DILexicalBlock(scope: !7720, file: !2259, line: 151, column: 3)
!7767 = !DILocation(line: 151, column: 14, scope: !7765)
!7768 = !DILocation(line: 151, column: 19, scope: !7765)
!7769 = !DILocation(line: 151, column: 24, scope: !7765)
!7770 = !DILocation(line: 151, column: 3, scope: !7766)
!7771 = !DILocation(line: 152, column: 5, scope: !7765)
!7772 = !DILocation(line: 152, column: 8, scope: !7765)
!7773 = !DILocation(line: 152, column: 15, scope: !7765)
!7774 = !DILocation(line: 151, column: 30, scope: !7765)
!7775 = !DILocation(line: 151, column: 33, scope: !7765)
!7776 = !DILocation(line: 151, column: 38, scope: !7765)
!7777 = !DILocation(line: 151, column: 3, scope: !7765)
!7778 = distinct !{!7778, !7770, !7779}
!7779 = !DILocation(line: 152, column: 15, scope: !7766)
!7780 = !DILocation(line: 154, column: 8, scope: !7720)
!7781 = !DILocation(line: 154, column: 11, scope: !7720)
!7782 = !DILocation(line: 154, column: 4, scope: !7720)
!7783 = !DILocation(line: 154, column: 6, scope: !7720)
!7784 = !DILocation(line: 156, column: 3, scope: !7720)
!7785 = !DILocation(line: 157, column: 1, scope: !7720)
!7786 = distinct !DISubprogram(name: "sbitmap_iter_next", scope: !2259, file: !2259, line: 162, type: !7787, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7787 = !DISubroutineType(types: !7788)
!7788 = !{null, !7669}
!7789 = !DILocalVariable(name: "i", arg: 1, scope: !7786, file: !2259, line: 162, type: !7669)
!7790 = !DILocation(line: 162, column: 38, scope: !7786)
!7791 = !DILocation(line: 164, column: 3, scope: !7786)
!7792 = !DILocation(line: 164, column: 6, scope: !7786)
!7793 = !DILocation(line: 164, column: 11, scope: !7786)
!7794 = !DILocation(line: 165, column: 3, scope: !7786)
!7795 = !DILocation(line: 165, column: 6, scope: !7786)
!7796 = !DILocation(line: 165, column: 13, scope: !7786)
!7797 = !DILocation(line: 166, column: 1, scope: !7786)
!7798 = distinct !DISubprogram(name: "check_live", scope: !3, file: !3, line: 1801, type: !7799, scopeLine: 1802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7799 = !DISubroutineType(types: !7800)
!7800 = !{!990, !997, !990}
!7801 = !DILocalVariable(name: "insn", arg: 1, scope: !7798, file: !3, line: 1801, type: !997)
!7802 = !DILocation(line: 1801, column: 17, scope: !7798)
!7803 = !DILocalVariable(name: "src", arg: 2, scope: !7798, file: !3, line: 1801, type: !990)
!7804 = !DILocation(line: 1801, column: 27, scope: !7798)
!7805 = !DILocation(line: 1804, column: 7, scope: !7806)
!7806 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 1804, column: 7)
!7807 = !DILocation(line: 1804, column: 33, scope: !7806)
!7808 = !DILocation(line: 1805, column: 7, scope: !7806)
!7809 = !DILocation(line: 1805, column: 10, scope: !7806)
!7810 = !DILocation(line: 1805, column: 36, scope: !7806)
!7811 = !DILocation(line: 1804, column: 7, scope: !7798)
!7812 = !DILocation(line: 1806, column: 26, scope: !7806)
!7813 = !DILocation(line: 1806, column: 31, scope: !7806)
!7814 = !DILocation(line: 1806, column: 12, scope: !7806)
!7815 = !DILocation(line: 1806, column: 5, scope: !7806)
!7816 = !DILocation(line: 1807, column: 12, scope: !7817)
!7817 = distinct !DILexicalBlock(scope: !7806, file: !3, line: 1807, column: 12)
!7818 = !DILocation(line: 1807, column: 38, scope: !7817)
!7819 = !DILocation(line: 1807, column: 12, scope: !7806)
!7820 = !DILocalVariable(name: "j", scope: !7821, file: !3, line: 1809, type: !990)
!7821 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 1808, column: 5)
!7822 = !DILocation(line: 1809, column: 11, scope: !7821)
!7823 = !DILocation(line: 1810, column: 16, scope: !7824)
!7824 = distinct !DILexicalBlock(scope: !7821, file: !3, line: 1810, column: 7)
!7825 = !DILocation(line: 1810, column: 44, scope: !7824)
!7826 = !DILocation(line: 1810, column: 14, scope: !7824)
!7827 = !DILocation(line: 1810, column: 12, scope: !7824)
!7828 = !DILocation(line: 1810, column: 49, scope: !7829)
!7829 = distinct !DILexicalBlock(scope: !7824, file: !3, line: 1810, column: 7)
!7830 = !DILocation(line: 1810, column: 51, scope: !7829)
!7831 = !DILocation(line: 1810, column: 7, scope: !7824)
!7832 = !DILocation(line: 1811, column: 7, scope: !7833)
!7833 = distinct !DILexicalBlock(scope: !7829, file: !3, line: 1811, column: 6)
!7834 = !DILocation(line: 1811, column: 49, scope: !7833)
!7835 = !DILocation(line: 1812, column: 7, scope: !7833)
!7836 = !DILocation(line: 1812, column: 10, scope: !7833)
!7837 = !DILocation(line: 1812, column: 52, scope: !7833)
!7838 = !DILocation(line: 1813, column: 6, scope: !7833)
!7839 = !DILocation(line: 1813, column: 24, scope: !7833)
!7840 = !DILocation(line: 1813, column: 29, scope: !7833)
!7841 = !DILocation(line: 1813, column: 10, scope: !7833)
!7842 = !DILocation(line: 1811, column: 6, scope: !7829)
!7843 = !DILocation(line: 1814, column: 4, scope: !7833)
!7844 = !DILocation(line: 1813, column: 59, scope: !7833)
!7845 = !DILocation(line: 1810, column: 58, scope: !7829)
!7846 = !DILocation(line: 1810, column: 7, scope: !7829)
!7847 = distinct !{!7847, !7831, !7848}
!7848 = !DILocation(line: 1814, column: 11, scope: !7824)
!7849 = !DILocation(line: 1816, column: 7, scope: !7821)
!7850 = !DILocation(line: 1819, column: 3, scope: !7798)
!7851 = !DILocation(line: 1820, column: 1, scope: !7798)
!7852 = distinct !DISubprogram(name: "check_live_1", scope: !3, file: !3, line: 1653, type: !7853, scopeLine: 1654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!7853 = !DISubroutineType(types: !7854)
!7854 = !{!990, !990, !997}
!7855 = !DILocalVariable(name: "src", arg: 1, scope: !7852, file: !3, line: 1653, type: !990)
!7856 = !DILocation(line: 1653, column: 19, scope: !7852)
!7857 = !DILocalVariable(name: "x", arg: 2, scope: !7852, file: !3, line: 1653, type: !997)
!7858 = !DILocation(line: 1653, column: 28, scope: !7852)
!7859 = !DILocalVariable(name: "i", scope: !7852, file: !3, line: 1655, type: !990)
!7860 = !DILocation(line: 1655, column: 7, scope: !7852)
!7861 = !DILocalVariable(name: "regno", scope: !7852, file: !3, line: 1656, type: !990)
!7862 = !DILocation(line: 1656, column: 7, scope: !7852)
!7863 = !DILocalVariable(name: "reg", scope: !7852, file: !3, line: 1657, type: !997)
!7864 = !DILocation(line: 1657, column: 7, scope: !7852)
!7865 = !DILocation(line: 1657, column: 13, scope: !7852)
!7866 = !DILocation(line: 1659, column: 7, scope: !7867)
!7867 = distinct !DILexicalBlock(scope: !7852, file: !3, line: 1659, column: 7)
!7868 = !DILocation(line: 1659, column: 11, scope: !7867)
!7869 = !DILocation(line: 1659, column: 7, scope: !7852)
!7870 = !DILocation(line: 1660, column: 5, scope: !7867)
!7871 = !DILocation(line: 1662, column: 3, scope: !7852)
!7872 = !DILocation(line: 1662, column: 10, scope: !7852)
!7873 = !DILocation(line: 1662, column: 25, scope: !7852)
!7874 = !DILocation(line: 1663, column: 3, scope: !7852)
!7875 = !DILocation(line: 1663, column: 6, scope: !7852)
!7876 = !DILocation(line: 1663, column: 21, scope: !7852)
!7877 = !DILocation(line: 1664, column: 3, scope: !7852)
!7878 = !DILocation(line: 1664, column: 6, scope: !7852)
!7879 = !DILocation(line: 1664, column: 21, scope: !7852)
!7880 = !DILocation(line: 1665, column: 11, scope: !7852)
!7881 = !DILocation(line: 1665, column: 9, scope: !7852)
!7882 = distinct !{!7882, !7871, !7880}
!7883 = !DILocation(line: 1667, column: 7, scope: !7884)
!7884 = distinct !DILexicalBlock(scope: !7852, file: !3, line: 1667, column: 7)
!7885 = !DILocation(line: 1667, column: 22, scope: !7884)
!7886 = !DILocation(line: 1667, column: 7, scope: !7852)
!7887 = !DILocalVariable(name: "i", scope: !7888, file: !3, line: 1669, type: !990)
!7888 = distinct !DILexicalBlock(scope: !7884, file: !3, line: 1668, column: 5)
!7889 = !DILocation(line: 1669, column: 11, scope: !7888)
!7890 = !DILocation(line: 1671, column: 16, scope: !7891)
!7891 = distinct !DILexicalBlock(scope: !7888, file: !3, line: 1671, column: 7)
!7892 = !DILocation(line: 1671, column: 33, scope: !7891)
!7893 = !DILocation(line: 1671, column: 14, scope: !7891)
!7894 = !DILocation(line: 1671, column: 12, scope: !7891)
!7895 = !DILocation(line: 1671, column: 38, scope: !7896)
!7896 = distinct !DILexicalBlock(scope: !7891, file: !3, line: 1671, column: 7)
!7897 = !DILocation(line: 1671, column: 40, scope: !7896)
!7898 = !DILocation(line: 1671, column: 7, scope: !7891)
!7899 = !DILocation(line: 1672, column: 6, scope: !7900)
!7900 = distinct !DILexicalBlock(scope: !7896, file: !3, line: 1672, column: 6)
!7901 = !DILocation(line: 1672, column: 36, scope: !7900)
!7902 = !DILocation(line: 1672, column: 6, scope: !7896)
!7903 = !DILocation(line: 1673, column: 22, scope: !7904)
!7904 = distinct !DILexicalBlock(scope: !7900, file: !3, line: 1673, column: 8)
!7905 = !DILocation(line: 1673, column: 27, scope: !7904)
!7906 = !DILocation(line: 1673, column: 8, scope: !7904)
!7907 = !DILocation(line: 1673, column: 8, scope: !7900)
!7908 = !DILocation(line: 1674, column: 6, scope: !7904)
!7909 = !DILocation(line: 1673, column: 56, scope: !7904)
!7910 = !DILocation(line: 1672, column: 39, scope: !7900)
!7911 = !DILocation(line: 1671, column: 47, scope: !7896)
!7912 = !DILocation(line: 1671, column: 7, scope: !7896)
!7913 = distinct !{!7913, !7898, !7914}
!7914 = !DILocation(line: 1674, column: 13, scope: !7891)
!7915 = !DILocation(line: 1676, column: 7, scope: !7888)
!7916 = !DILocation(line: 1679, column: 8, scope: !7917)
!7917 = distinct !DILexicalBlock(scope: !7852, file: !3, line: 1679, column: 7)
!7918 = !DILocation(line: 1679, column: 7, scope: !7852)
!7919 = !DILocation(line: 1680, column: 5, scope: !7917)
!7920 = !DILocation(line: 1682, column: 11, scope: !7852)
!7921 = !DILocation(line: 1682, column: 9, scope: !7852)
!7922 = !DILocation(line: 1684, column: 7, scope: !7923)
!7923 = distinct !DILexicalBlock(scope: !7852, file: !3, line: 1684, column: 7)
!7924 = !DILocation(line: 1684, column: 13, scope: !7923)
!7925 = !DILocation(line: 1684, column: 37, scope: !7923)
!7926 = !DILocation(line: 1684, column: 52, scope: !7923)
!7927 = !DILocation(line: 1684, column: 40, scope: !7923)
!7928 = !DILocation(line: 1684, column: 7, scope: !7852)
!7929 = !DILocation(line: 1687, column: 7, scope: !7930)
!7930 = distinct !DILexicalBlock(scope: !7923, file: !3, line: 1685, column: 5)
!7931 = !DILocation(line: 1691, column: 11, scope: !7932)
!7932 = distinct !DILexicalBlock(scope: !7933, file: !3, line: 1691, column: 11)
!7933 = distinct !DILexicalBlock(scope: !7923, file: !3, line: 1690, column: 5)
!7934 = !DILocation(line: 1691, column: 17, scope: !7932)
!7935 = !DILocation(line: 1691, column: 11, scope: !7933)
!7936 = !DILocalVariable(name: "j", scope: !7937, file: !3, line: 1694, type: !990)
!7937 = distinct !DILexicalBlock(scope: !7932, file: !3, line: 1692, column: 2)
!7938 = !DILocation(line: 1694, column: 8, scope: !7937)
!7939 = !DILocation(line: 1694, column: 29, scope: !7937)
!7940 = !DILocation(line: 1694, column: 12, scope: !7937)
!7941 = !DILocation(line: 1694, column: 36, scope: !7937)
!7942 = !DILocation(line: 1695, column: 4, scope: !7937)
!7943 = !DILocation(line: 1695, column: 11, scope: !7937)
!7944 = !DILocation(line: 1695, column: 15, scope: !7937)
!7945 = !DILocation(line: 1697, column: 15, scope: !7946)
!7946 = distinct !DILexicalBlock(scope: !7947, file: !3, line: 1697, column: 8)
!7947 = distinct !DILexicalBlock(scope: !7937, file: !3, line: 1696, column: 6)
!7948 = !DILocation(line: 1697, column: 13, scope: !7946)
!7949 = !DILocation(line: 1697, column: 20, scope: !7950)
!7950 = distinct !DILexicalBlock(scope: !7946, file: !3, line: 1697, column: 8)
!7951 = !DILocation(line: 1697, column: 24, scope: !7950)
!7952 = !DILocation(line: 1697, column: 40, scope: !7950)
!7953 = !DILocation(line: 1697, column: 45, scope: !7950)
!7954 = !DILocation(line: 1697, column: 55, scope: !7950)
!7955 = !DILocation(line: 1697, column: 22, scope: !7950)
!7956 = !DILocation(line: 1697, column: 8, scope: !7946)
!7957 = !DILocalVariable(name: "b", scope: !7958, file: !3, line: 1699, type: !1536)
!7958 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 1698, column: 3)
!7959 = !DILocation(line: 1699, column: 17, scope: !7958)
!7960 = !DILocation(line: 1699, column: 21, scope: !7958)
!7961 = !DILocation(line: 1699, column: 37, scope: !7958)
!7962 = !DILocation(line: 1699, column: 42, scope: !7958)
!7963 = !DILocation(line: 1699, column: 52, scope: !7958)
!7964 = !DILocation(line: 1699, column: 65, scope: !7958)
!7965 = !DILocalVariable(name: "t", scope: !7958, file: !3, line: 1700, type: !990)
!7966 = !DILocation(line: 1700, column: 9, scope: !7958)
!7967 = !DILocation(line: 1700, column: 39, scope: !7958)
!7968 = !DILocation(line: 1700, column: 42, scope: !7958)
!7969 = !DILocation(line: 1700, column: 13, scope: !7958)
!7970 = !DILocation(line: 1704, column: 5, scope: !7958)
!7971 = !DILocation(line: 1707, column: 9, scope: !7972)
!7972 = distinct !DILexicalBlock(scope: !7958, file: !3, line: 1707, column: 9)
!7973 = !DILocation(line: 1707, column: 11, scope: !7972)
!7974 = !DILocation(line: 1707, column: 14, scope: !7972)
!7975 = !DILocation(line: 1707, column: 9, scope: !7958)
!7976 = !DILocation(line: 1708, column: 7, scope: !7972)
!7977 = !DILocation(line: 1709, column: 3, scope: !7958)
!7978 = !DILocation(line: 1697, column: 68, scope: !7950)
!7979 = !DILocation(line: 1697, column: 8, scope: !7950)
!7980 = distinct !{!7980, !7956, !7981}
!7981 = !DILocation(line: 1709, column: 3, scope: !7946)
!7982 = distinct !{!7982, !7942, !7983}
!7983 = !DILocation(line: 1710, column: 6, scope: !7937)
!7984 = !DILocation(line: 1711, column: 2, scope: !7937)
!7985 = !DILocation(line: 1715, column: 11, scope: !7986)
!7986 = distinct !DILexicalBlock(scope: !7987, file: !3, line: 1715, column: 4)
!7987 = distinct !DILexicalBlock(scope: !7932, file: !3, line: 1713, column: 2)
!7988 = !DILocation(line: 1715, column: 9, scope: !7986)
!7989 = !DILocation(line: 1715, column: 16, scope: !7990)
!7990 = distinct !DILexicalBlock(scope: !7986, file: !3, line: 1715, column: 4)
!7991 = !DILocation(line: 1715, column: 20, scope: !7990)
!7992 = !DILocation(line: 1715, column: 36, scope: !7990)
!7993 = !DILocation(line: 1715, column: 41, scope: !7990)
!7994 = !DILocation(line: 1715, column: 51, scope: !7990)
!7995 = !DILocation(line: 1715, column: 18, scope: !7990)
!7996 = !DILocation(line: 1715, column: 4, scope: !7986)
!7997 = !DILocalVariable(name: "b", scope: !7998, file: !3, line: 1717, type: !1536)
!7998 = distinct !DILexicalBlock(scope: !7990, file: !3, line: 1716, column: 6)
!7999 = !DILocation(line: 1717, column: 20, scope: !7998)
!8000 = !DILocation(line: 1717, column: 24, scope: !7998)
!8001 = !DILocation(line: 1717, column: 40, scope: !7998)
!8002 = !DILocation(line: 1717, column: 45, scope: !7998)
!8003 = !DILocation(line: 1717, column: 55, scope: !7998)
!8004 = !DILocation(line: 1717, column: 68, scope: !7998)
!8005 = !DILocalVariable(name: "t", scope: !7998, file: !3, line: 1718, type: !990)
!8006 = !DILocation(line: 1718, column: 12, scope: !7998)
!8007 = !DILocation(line: 1718, column: 42, scope: !7998)
!8008 = !DILocation(line: 1718, column: 45, scope: !7998)
!8009 = !DILocation(line: 1718, column: 16, scope: !7998)
!8010 = !DILocation(line: 1720, column: 8, scope: !7998)
!8011 = !DILocation(line: 1723, column: 12, scope: !8012)
!8012 = distinct !DILexicalBlock(scope: !7998, file: !3, line: 1723, column: 12)
!8013 = !DILocation(line: 1723, column: 14, scope: !8012)
!8014 = !DILocation(line: 1723, column: 17, scope: !8012)
!8015 = !DILocation(line: 1723, column: 12, scope: !7998)
!8016 = !DILocation(line: 1724, column: 3, scope: !8012)
!8017 = !DILocation(line: 1725, column: 6, scope: !7998)
!8018 = !DILocation(line: 1715, column: 64, scope: !7990)
!8019 = !DILocation(line: 1715, column: 4, scope: !7990)
!8020 = distinct !{!8020, !7996, !8021}
!8021 = !DILocation(line: 1725, column: 6, scope: !7986)
!8022 = !DILocation(line: 1729, column: 3, scope: !7852)
!8023 = !DILocation(line: 1730, column: 1, scope: !7852)
!8024 = distinct !DISubprogram(name: "is_exception_free", scope: !3, file: !3, line: 2026, type: !8025, scopeLine: 2027, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8025 = !DISubroutineType(types: !8026)
!8026 = !{!990, !997, !990, !990}
!8027 = !DILocalVariable(name: "insn", arg: 1, scope: !8024, file: !3, line: 2026, type: !997)
!8028 = !DILocation(line: 2026, column: 24, scope: !8024)
!8029 = !DILocalVariable(name: "bb_src", arg: 2, scope: !8024, file: !3, line: 2026, type: !990)
!8030 = !DILocation(line: 2026, column: 34, scope: !8024)
!8031 = !DILocalVariable(name: "bb_trg", arg: 3, scope: !8024, file: !3, line: 2026, type: !990)
!8032 = !DILocation(line: 2026, column: 46, scope: !8024)
!8033 = !DILocalVariable(name: "insn_class", scope: !8024, file: !3, line: 2028, type: !990)
!8034 = !DILocation(line: 2028, column: 7, scope: !8024)
!8035 = !DILocation(line: 2028, column: 41, scope: !8024)
!8036 = !DILocation(line: 2028, column: 20, scope: !8024)
!8037 = !DILocation(line: 2031, column: 11, scope: !8024)
!8038 = !DILocation(line: 2031, column: 3, scope: !8024)
!8039 = !DILocation(line: 2034, column: 7, scope: !8040)
!8040 = distinct !DILexicalBlock(scope: !8024, file: !3, line: 2032, column: 5)
!8041 = !DILocation(line: 2036, column: 7, scope: !8040)
!8042 = !DILocation(line: 2038, column: 5, scope: !8040)
!8043 = !DILocation(line: 2041, column: 8, scope: !8044)
!8044 = distinct !DILexicalBlock(scope: !8024, file: !3, line: 2041, column: 7)
!8045 = !DILocation(line: 2041, column: 7, scope: !8024)
!8046 = !DILocation(line: 2042, column: 5, scope: !8044)
!8047 = !DILocation(line: 2043, column: 3, scope: !8024)
!8048 = !DILocation(line: 2043, column: 23, scope: !8024)
!8049 = !DILocation(line: 2044, column: 11, scope: !8024)
!8050 = !DILocation(line: 2044, column: 3, scope: !8024)
!8051 = !DILocation(line: 2047, column: 7, scope: !8052)
!8052 = distinct !DILexicalBlock(scope: !8024, file: !3, line: 2045, column: 5)
!8053 = !DILocation(line: 2049, column: 7, scope: !8052)
!8054 = !DILocation(line: 2051, column: 21, scope: !8055)
!8055 = distinct !DILexicalBlock(scope: !8052, file: !3, line: 2051, column: 11)
!8056 = !DILocation(line: 2051, column: 27, scope: !8055)
!8057 = !DILocation(line: 2051, column: 35, scope: !8055)
!8058 = !DILocation(line: 2051, column: 11, scope: !8055)
!8059 = !DILocation(line: 2051, column: 11, scope: !8052)
!8060 = !DILocation(line: 2052, column: 2, scope: !8055)
!8061 = !DILocation(line: 2051, column: 41, scope: !8055)
!8062 = !DILocation(line: 2055, column: 12, scope: !8063)
!8063 = distinct !DILexicalBlock(scope: !8052, file: !3, line: 2055, column: 11)
!8064 = !DILocation(line: 2056, column: 4, scope: !8063)
!8065 = !DILocation(line: 2056, column: 18, scope: !8063)
!8066 = !DILocation(line: 2056, column: 24, scope: !8063)
!8067 = !DILocation(line: 2056, column: 32, scope: !8063)
!8068 = !DILocation(line: 2056, column: 7, scope: !8063)
!8069 = !DILocation(line: 2055, column: 11, scope: !8052)
!8070 = !DILocation(line: 2057, column: 2, scope: !8063)
!8071 = !DILocation(line: 2058, column: 7, scope: !8052)
!8072 = !DILocation(line: 2060, column: 5, scope: !8052)
!8073 = !DILocation(line: 2062, column: 10, scope: !8024)
!8074 = !DILocation(line: 2062, column: 3, scope: !8024)
!8075 = !DILocation(line: 2063, column: 1, scope: !8024)
!8076 = distinct !DISubprogram(name: "is_pfree", scope: !3, file: !3, line: 1954, type: !8025, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8077 = !DILocalVariable(name: "load_insn", arg: 1, scope: !8076, file: !3, line: 1954, type: !997)
!8078 = !DILocation(line: 1954, column: 15, scope: !8076)
!8079 = !DILocalVariable(name: "bb_src", arg: 2, scope: !8076, file: !3, line: 1954, type: !990)
!8080 = !DILocation(line: 1954, column: 30, scope: !8076)
!8081 = !DILocalVariable(name: "bb_trg", arg: 3, scope: !8076, file: !3, line: 1954, type: !990)
!8082 = !DILocation(line: 1954, column: 42, scope: !8076)
!8083 = !DILocalVariable(name: "back_sd_it", scope: !8076, file: !3, line: 1956, type: !2402)
!8084 = !DILocation(line: 1956, column: 19, scope: !8076)
!8085 = !DILocalVariable(name: "back_dep", scope: !8076, file: !3, line: 1957, type: !4096)
!8086 = !DILocation(line: 1957, column: 9, scope: !8076)
!8087 = !DILocalVariable(name: "candp", scope: !8076, file: !3, line: 1958, type: !2185)
!8088 = !DILocation(line: 1958, column: 14, scope: !8076)
!8089 = !DILocation(line: 1958, column: 22, scope: !8076)
!8090 = !DILocation(line: 1958, column: 40, scope: !8076)
!8091 = !DILocation(line: 1958, column: 38, scope: !8076)
!8092 = !DILocation(line: 1960, column: 7, scope: !8093)
!8093 = distinct !DILexicalBlock(scope: !8076, file: !3, line: 1960, column: 7)
!8094 = !DILocation(line: 1960, column: 14, scope: !8093)
!8095 = !DILocation(line: 1960, column: 24, scope: !8093)
!8096 = !DILocation(line: 1960, column: 35, scope: !8093)
!8097 = !DILocation(line: 1960, column: 7, scope: !8076)
!8098 = !DILocation(line: 1962, column: 5, scope: !8093)
!8099 = !DILocation(line: 1964, column: 3, scope: !8100)
!8100 = distinct !DILexicalBlock(scope: !8076, file: !3, line: 1964, column: 3)
!8101 = !DILocation(line: 1964, column: 3, scope: !8102)
!8102 = distinct !DILexicalBlock(scope: !8100, file: !3, line: 1964, column: 3)
!8103 = !DILocalVariable(name: "insn1", scope: !8104, file: !3, line: 1966, type: !997)
!8104 = distinct !DILexicalBlock(scope: !8102, file: !3, line: 1965, column: 5)
!8105 = !DILocation(line: 1966, column: 11, scope: !8104)
!8106 = !DILocation(line: 1966, column: 19, scope: !8104)
!8107 = !DILocation(line: 1968, column: 11, scope: !8108)
!8108 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 1968, column: 11)
!8109 = !DILocation(line: 1968, column: 31, scope: !8108)
!8110 = !DILocation(line: 1968, column: 11, scope: !8104)
!8111 = !DILocalVariable(name: "fore_sd_it", scope: !8112, file: !3, line: 1971, type: !2402)
!8112 = distinct !DILexicalBlock(scope: !8108, file: !3, line: 1970, column: 2)
!8113 = !DILocation(line: 1971, column: 20, scope: !8112)
!8114 = !DILocalVariable(name: "fore_dep", scope: !8112, file: !3, line: 1972, type: !4096)
!8115 = !DILocation(line: 1972, column: 10, scope: !8112)
!8116 = !DILocation(line: 1974, column: 4, scope: !8117)
!8117 = distinct !DILexicalBlock(scope: !8112, file: !3, line: 1974, column: 4)
!8118 = !DILocation(line: 1974, column: 4, scope: !8119)
!8119 = distinct !DILexicalBlock(scope: !8117, file: !3, line: 1974, column: 4)
!8120 = !DILocalVariable(name: "insn2", scope: !8121, file: !3, line: 1976, type: !997)
!8121 = distinct !DILexicalBlock(scope: !8119, file: !3, line: 1975, column: 6)
!8122 = !DILocation(line: 1976, column: 12, scope: !8121)
!8123 = !DILocation(line: 1976, column: 20, scope: !8121)
!8124 = !DILocation(line: 1978, column: 12, scope: !8125)
!8125 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 1978, column: 12)
!8126 = !DILocation(line: 1978, column: 32, scope: !8125)
!8127 = !DILocation(line: 1978, column: 12, scope: !8121)
!8128 = !DILocation(line: 1981, column: 30, scope: !8129)
!8129 = distinct !DILexicalBlock(scope: !8130, file: !3, line: 1981, column: 9)
!8130 = distinct !DILexicalBlock(scope: !8125, file: !3, line: 1979, column: 3)
!8131 = !DILocation(line: 1981, column: 9, scope: !8129)
!8132 = !DILocation(line: 1981, column: 37, scope: !8129)
!8133 = !DILocation(line: 1981, column: 9, scope: !8130)
!8134 = !DILocation(line: 1983, column: 7, scope: !8129)
!8135 = !DILocation(line: 1985, column: 9, scope: !8136)
!8136 = distinct !DILexicalBlock(scope: !8130, file: !3, line: 1985, column: 9)
!8137 = !DILocation(line: 1985, column: 28, scope: !8136)
!8138 = !DILocation(line: 1985, column: 25, scope: !8136)
!8139 = !DILocation(line: 1985, column: 9, scope: !8130)
!8140 = !DILocation(line: 1987, column: 7, scope: !8136)
!8141 = !DILocation(line: 1989, column: 11, scope: !8142)
!8142 = distinct !DILexicalBlock(scope: !8130, file: !3, line: 1989, column: 9)
!8143 = !DILocation(line: 1989, column: 18, scope: !8142)
!8144 = !DILocation(line: 1989, column: 28, scope: !8142)
!8145 = !DILocation(line: 1989, column: 9, scope: !8142)
!8146 = !DILocation(line: 1989, column: 45, scope: !8142)
!8147 = !DILocation(line: 1989, column: 42, scope: !8142)
!8148 = !DILocation(line: 1989, column: 9, scope: !8130)
!8149 = !DILocation(line: 1991, column: 7, scope: !8142)
!8150 = !DILocation(line: 1992, column: 3, scope: !8130)
!8151 = !DILocation(line: 1993, column: 6, scope: !8121)
!8152 = distinct !{!8152, !8116, !8153}
!8153 = !DILocation(line: 1993, column: 6, scope: !8117)
!8154 = !DILocation(line: 1994, column: 2, scope: !8112)
!8155 = !DILocation(line: 1995, column: 5, scope: !8104)
!8156 = distinct !{!8156, !8099, !8157}
!8157 = !DILocation(line: 1995, column: 5, scope: !8100)
!8158 = !DILocation(line: 1998, column: 3, scope: !8076)
!8159 = !DILocation(line: 1999, column: 1, scope: !8076)
!8160 = distinct !DISubprogram(name: "is_prisky", scope: !3, file: !3, line: 2006, type: !8025, scopeLine: 2007, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8161 = !DILocalVariable(name: "load_insn", arg: 1, scope: !8160, file: !3, line: 2006, type: !997)
!8162 = !DILocation(line: 2006, column: 16, scope: !8160)
!8163 = !DILocalVariable(name: "bb_src", arg: 2, scope: !8160, file: !3, line: 2006, type: !990)
!8164 = !DILocation(line: 2006, column: 31, scope: !8160)
!8165 = !DILocalVariable(name: "bb_trg", arg: 3, scope: !8160, file: !3, line: 2006, type: !990)
!8166 = !DILocation(line: 2006, column: 43, scope: !8160)
!8167 = !DILocation(line: 2008, column: 7, scope: !8168)
!8168 = distinct !DILexicalBlock(scope: !8160, file: !3, line: 2008, column: 7)
!8169 = !DILocation(line: 2008, column: 7, scope: !8160)
!8170 = !DILocation(line: 2009, column: 5, scope: !8168)
!8171 = !DILocation(line: 2011, column: 25, scope: !8172)
!8172 = distinct !DILexicalBlock(scope: !8160, file: !3, line: 2011, column: 7)
!8173 = !DILocation(line: 2011, column: 7, scope: !8172)
!8174 = !DILocation(line: 2011, column: 7, scope: !8160)
!8175 = !DILocation(line: 2013, column: 5, scope: !8172)
!8176 = !DILocation(line: 2015, column: 35, scope: !8177)
!8177 = distinct !DILexicalBlock(scope: !8160, file: !3, line: 2015, column: 7)
!8178 = !DILocation(line: 2015, column: 46, scope: !8177)
!8179 = !DILocation(line: 2015, column: 54, scope: !8177)
!8180 = !DILocation(line: 2015, column: 7, scope: !8177)
!8181 = !DILocation(line: 2015, column: 7, scope: !8160)
!8182 = !DILocation(line: 2016, column: 5, scope: !8177)
!8183 = !DILocation(line: 2018, column: 3, scope: !8160)
!8184 = !DILocation(line: 2019, column: 1, scope: !8160)
!8185 = distinct !DISubprogram(name: "is_conditionally_protected", scope: !3, file: !3, line: 1903, type: !8025, scopeLine: 1904, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8186 = !DILocalVariable(name: "load_insn", arg: 1, scope: !8185, file: !3, line: 1903, type: !997)
!8187 = !DILocation(line: 1903, column: 33, scope: !8185)
!8188 = !DILocalVariable(name: "bb_src", arg: 2, scope: !8185, file: !3, line: 1903, type: !990)
!8189 = !DILocation(line: 1903, column: 48, scope: !8185)
!8190 = !DILocalVariable(name: "bb_trg", arg: 3, scope: !8185, file: !3, line: 1903, type: !990)
!8191 = !DILocation(line: 1903, column: 60, scope: !8185)
!8192 = !DILocalVariable(name: "sd_it", scope: !8185, file: !3, line: 1905, type: !2402)
!8193 = !DILocation(line: 1905, column: 19, scope: !8185)
!8194 = !DILocalVariable(name: "dep", scope: !8185, file: !3, line: 1906, type: !4096)
!8195 = !DILocation(line: 1906, column: 9, scope: !8185)
!8196 = !DILocation(line: 1908, column: 3, scope: !8197)
!8197 = distinct !DILexicalBlock(scope: !8185, file: !3, line: 1908, column: 3)
!8198 = !DILocation(line: 1908, column: 3, scope: !8199)
!8199 = distinct !DILexicalBlock(scope: !8197, file: !3, line: 1908, column: 3)
!8200 = !DILocalVariable(name: "insn1", scope: !8201, file: !3, line: 1910, type: !997)
!8201 = distinct !DILexicalBlock(scope: !8199, file: !3, line: 1909, column: 5)
!8202 = !DILocation(line: 1910, column: 11, scope: !8201)
!8203 = !DILocation(line: 1910, column: 19, scope: !8201)
!8204 = !DILocation(line: 1913, column: 11, scope: !8205)
!8205 = distinct !DILexicalBlock(scope: !8201, file: !3, line: 1913, column: 11)
!8206 = !DILocation(line: 1913, column: 26, scope: !8205)
!8207 = !DILocation(line: 1914, column: 4, scope: !8205)
!8208 = !DILocation(line: 1914, column: 7, scope: !8205)
!8209 = !DILocation(line: 1913, column: 11, scope: !8201)
!8210 = !DILocation(line: 1915, column: 2, scope: !8205)
!8211 = !DILocation(line: 1918, column: 11, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !8201, file: !3, line: 1918, column: 11)
!8213 = !DILocation(line: 1918, column: 30, scope: !8212)
!8214 = !DILocation(line: 1918, column: 27, scope: !8212)
!8215 = !DILocation(line: 1919, column: 4, scope: !8212)
!8216 = !DILocation(line: 1919, column: 8, scope: !8212)
!8217 = !DILocation(line: 1920, column: 11, scope: !8212)
!8218 = !DILocation(line: 1920, column: 8, scope: !8212)
!8219 = !DILocation(line: 1921, column: 4, scope: !8212)
!8220 = !DILocation(line: 1921, column: 9, scope: !8212)
!8221 = !DILocation(line: 1922, column: 8, scope: !8212)
!8222 = !DILocation(line: 1922, column: 12, scope: !8212)
!8223 = !DILocation(line: 1918, column: 11, scope: !8201)
!8224 = !DILocation(line: 1923, column: 2, scope: !8212)
!8225 = !DILocation(line: 1926, column: 40, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !8201, file: !3, line: 1926, column: 11)
!8227 = !DILocation(line: 1926, column: 47, scope: !8226)
!8228 = !DILocation(line: 1926, column: 11, scope: !8226)
!8229 = !DILocation(line: 1926, column: 11, scope: !8201)
!8230 = !DILocation(line: 1927, column: 2, scope: !8226)
!8231 = !DILocation(line: 1930, column: 42, scope: !8201)
!8232 = !DILocation(line: 1930, column: 49, scope: !8201)
!8233 = !DILocation(line: 1930, column: 57, scope: !8201)
!8234 = !DILocation(line: 1930, column: 14, scope: !8201)
!8235 = !DILocation(line: 1930, column: 7, scope: !8201)
!8236 = distinct !{!8236, !8196, !8237}
!8237 = !DILocation(line: 1931, column: 5, scope: !8197)
!8238 = !DILocation(line: 1934, column: 3, scope: !8185)
!8239 = !DILocation(line: 1935, column: 1, scope: !8185)
!8240 = distinct !DISubprogram(name: "find_conditional_protection", scope: !3, file: !3, line: 1866, type: !7799, scopeLine: 1867, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8241 = !DILocalVariable(name: "insn", arg: 1, scope: !8240, file: !3, line: 1866, type: !997)
!8242 = !DILocation(line: 1866, column: 34, scope: !8240)
!8243 = !DILocalVariable(name: "load_insn_bb", arg: 2, scope: !8240, file: !3, line: 1866, type: !990)
!8244 = !DILocation(line: 1866, column: 44, scope: !8240)
!8245 = !DILocalVariable(name: "sd_it", scope: !8240, file: !3, line: 1868, type: !2402)
!8246 = !DILocation(line: 1868, column: 19, scope: !8240)
!8247 = !DILocalVariable(name: "dep", scope: !8240, file: !3, line: 1869, type: !4096)
!8248 = !DILocation(line: 1869, column: 9, scope: !8240)
!8249 = !DILocation(line: 1872, column: 3, scope: !8250)
!8250 = distinct !DILexicalBlock(scope: !8240, file: !3, line: 1872, column: 3)
!8251 = !DILocation(line: 1872, column: 3, scope: !8252)
!8252 = distinct !DILexicalBlock(scope: !8250, file: !3, line: 1872, column: 3)
!8253 = !DILocalVariable(name: "next", scope: !8254, file: !3, line: 1874, type: !997)
!8254 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 1873, column: 5)
!8255 = !DILocation(line: 1874, column: 11, scope: !8254)
!8256 = !DILocation(line: 1874, column: 18, scope: !8254)
!8257 = !DILocation(line: 1876, column: 12, scope: !8258)
!8258 = distinct !DILexicalBlock(scope: !8254, file: !3, line: 1876, column: 11)
!8259 = !DILocation(line: 1877, column: 5, scope: !8258)
!8260 = !DILocation(line: 1876, column: 46, scope: !8258)
!8261 = !DILocation(line: 1878, column: 4, scope: !8258)
!8262 = !DILocation(line: 1878, column: 7, scope: !8258)
!8263 = !DILocation(line: 1879, column: 4, scope: !8258)
!8264 = !DILocation(line: 1879, column: 7, scope: !8258)
!8265 = !DILocation(line: 1879, column: 23, scope: !8258)
!8266 = !DILocation(line: 1879, column: 20, scope: !8258)
!8267 = !DILocation(line: 1880, column: 4, scope: !8258)
!8268 = !DILocation(line: 1880, column: 7, scope: !8258)
!8269 = !DILocation(line: 1880, column: 22, scope: !8258)
!8270 = !DILocation(line: 1881, column: 4, scope: !8258)
!8271 = !DILocation(line: 1881, column: 8, scope: !8258)
!8272 = !DILocation(line: 1882, column: 8, scope: !8258)
!8273 = !DILocation(line: 1882, column: 40, scope: !8258)
!8274 = !DILocation(line: 1882, column: 46, scope: !8258)
!8275 = !DILocation(line: 1882, column: 11, scope: !8258)
!8276 = !DILocation(line: 1876, column: 11, scope: !8254)
!8277 = !DILocation(line: 1883, column: 2, scope: !8258)
!8278 = !DILocation(line: 1884, column: 5, scope: !8254)
!8279 = distinct !{!8279, !8249, !8280}
!8280 = !DILocation(line: 1884, column: 5, scope: !8250)
!8281 = !DILocation(line: 1885, column: 3, scope: !8240)
!8282 = !DILocation(line: 1886, column: 1, scope: !8240)
!8283 = distinct !DISubprogram(name: "update_live", scope: !3, file: !3, line: 1826, type: !2380, scopeLine: 1827, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8284 = !DILocalVariable(name: "insn", arg: 1, scope: !8283, file: !3, line: 1826, type: !997)
!8285 = !DILocation(line: 1826, column: 18, scope: !8283)
!8286 = !DILocalVariable(name: "src", arg: 2, scope: !8283, file: !3, line: 1826, type: !990)
!8287 = !DILocation(line: 1826, column: 28, scope: !8283)
!8288 = !DILocation(line: 1829, column: 7, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8283, file: !3, line: 1829, column: 7)
!8290 = !DILocation(line: 1829, column: 33, scope: !8289)
!8291 = !DILocation(line: 1830, column: 7, scope: !8289)
!8292 = !DILocation(line: 1830, column: 10, scope: !8289)
!8293 = !DILocation(line: 1830, column: 36, scope: !8289)
!8294 = !DILocation(line: 1829, column: 7, scope: !8283)
!8295 = !DILocation(line: 1831, column: 20, scope: !8289)
!8296 = !DILocation(line: 1831, column: 25, scope: !8289)
!8297 = !DILocation(line: 1831, column: 5, scope: !8289)
!8298 = !DILocation(line: 1832, column: 12, scope: !8299)
!8299 = distinct !DILexicalBlock(scope: !8289, file: !3, line: 1832, column: 12)
!8300 = !DILocation(line: 1832, column: 38, scope: !8299)
!8301 = !DILocation(line: 1832, column: 12, scope: !8289)
!8302 = !DILocalVariable(name: "j", scope: !8303, file: !3, line: 1834, type: !990)
!8303 = distinct !DILexicalBlock(scope: !8299, file: !3, line: 1833, column: 5)
!8304 = !DILocation(line: 1834, column: 11, scope: !8303)
!8305 = !DILocation(line: 1835, column: 16, scope: !8306)
!8306 = distinct !DILexicalBlock(scope: !8303, file: !3, line: 1835, column: 7)
!8307 = !DILocation(line: 1835, column: 44, scope: !8306)
!8308 = !DILocation(line: 1835, column: 14, scope: !8306)
!8309 = !DILocation(line: 1835, column: 12, scope: !8306)
!8310 = !DILocation(line: 1835, column: 49, scope: !8311)
!8311 = distinct !DILexicalBlock(scope: !8306, file: !3, line: 1835, column: 7)
!8312 = !DILocation(line: 1835, column: 51, scope: !8311)
!8313 = !DILocation(line: 1835, column: 7, scope: !8306)
!8314 = !DILocation(line: 1836, column: 6, scope: !8315)
!8315 = distinct !DILexicalBlock(scope: !8311, file: !3, line: 1836, column: 6)
!8316 = !DILocation(line: 1836, column: 48, scope: !8315)
!8317 = !DILocation(line: 1837, column: 6, scope: !8315)
!8318 = !DILocation(line: 1837, column: 9, scope: !8315)
!8319 = !DILocation(line: 1837, column: 51, scope: !8315)
!8320 = !DILocation(line: 1836, column: 6, scope: !8311)
!8321 = !DILocation(line: 1838, column: 19, scope: !8315)
!8322 = !DILocation(line: 1838, column: 24, scope: !8315)
!8323 = !DILocation(line: 1838, column: 4, scope: !8315)
!8324 = !DILocation(line: 1837, column: 54, scope: !8315)
!8325 = !DILocation(line: 1835, column: 58, scope: !8311)
!8326 = !DILocation(line: 1835, column: 7, scope: !8311)
!8327 = distinct !{!8327, !8313, !8328}
!8328 = !DILocation(line: 1838, column: 54, scope: !8306)
!8329 = !DILocation(line: 1839, column: 5, scope: !8303)
!8330 = !DILocation(line: 1840, column: 1, scope: !8283)
!8331 = distinct !DISubprogram(name: "set_spec_fed", scope: !3, file: !3, line: 1852, type: !2315, scopeLine: 1853, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8332 = !DILocalVariable(name: "load_insn", arg: 1, scope: !8331, file: !3, line: 1852, type: !997)
!8333 = !DILocation(line: 1852, column: 19, scope: !8331)
!8334 = !DILocalVariable(name: "sd_it", scope: !8331, file: !3, line: 1854, type: !2402)
!8335 = !DILocation(line: 1854, column: 19, scope: !8331)
!8336 = !DILocalVariable(name: "dep", scope: !8331, file: !3, line: 1855, type: !4096)
!8337 = !DILocation(line: 1855, column: 9, scope: !8331)
!8338 = !DILocation(line: 1857, column: 3, scope: !8339)
!8339 = distinct !DILexicalBlock(scope: !8331, file: !3, line: 1857, column: 3)
!8340 = !DILocation(line: 1857, column: 3, scope: !8341)
!8341 = distinct !DILexicalBlock(scope: !8339, file: !3, line: 1857, column: 3)
!8342 = !DILocation(line: 1858, column: 9, scope: !8343)
!8343 = distinct !DILexicalBlock(scope: !8341, file: !3, line: 1858, column: 9)
!8344 = !DILocation(line: 1858, column: 24, scope: !8343)
!8345 = !DILocation(line: 1858, column: 9, scope: !8341)
!8346 = !DILocation(line: 1859, column: 7, scope: !8343)
!8347 = !DILocation(line: 1859, column: 40, scope: !8343)
!8348 = !DILocation(line: 1858, column: 27, scope: !8343)
!8349 = distinct !{!8349, !8338, !8350}
!8350 = !DILocation(line: 1859, column: 42, scope: !8339)
!8351 = !DILocation(line: 1860, column: 1, scope: !8331)
!8352 = distinct !DISubprogram(name: "update_live_1", scope: !3, file: !3, line: 1736, type: !8353, scopeLine: 1737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8353 = !DISubroutineType(types: !8354)
!8354 = !{null, !990, !997}
!8355 = !DILocalVariable(name: "src", arg: 1, scope: !8352, file: !3, line: 1736, type: !990)
!8356 = !DILocation(line: 1736, column: 20, scope: !8352)
!8357 = !DILocalVariable(name: "x", arg: 2, scope: !8352, file: !3, line: 1736, type: !997)
!8358 = !DILocation(line: 1736, column: 29, scope: !8352)
!8359 = !DILocalVariable(name: "i", scope: !8352, file: !3, line: 1738, type: !990)
!8360 = !DILocation(line: 1738, column: 7, scope: !8352)
!8361 = !DILocalVariable(name: "regno", scope: !8352, file: !3, line: 1739, type: !990)
!8362 = !DILocation(line: 1739, column: 7, scope: !8352)
!8363 = !DILocalVariable(name: "reg", scope: !8352, file: !3, line: 1740, type: !997)
!8364 = !DILocation(line: 1740, column: 7, scope: !8352)
!8365 = !DILocation(line: 1740, column: 13, scope: !8352)
!8366 = !DILocation(line: 1742, column: 7, scope: !8367)
!8367 = distinct !DILexicalBlock(scope: !8352, file: !3, line: 1742, column: 7)
!8368 = !DILocation(line: 1742, column: 11, scope: !8367)
!8369 = !DILocation(line: 1742, column: 7, scope: !8352)
!8370 = !DILocation(line: 1743, column: 5, scope: !8367)
!8371 = !DILocation(line: 1745, column: 3, scope: !8352)
!8372 = !DILocation(line: 1745, column: 10, scope: !8352)
!8373 = !DILocation(line: 1745, column: 25, scope: !8352)
!8374 = !DILocation(line: 1746, column: 3, scope: !8352)
!8375 = !DILocation(line: 1746, column: 6, scope: !8352)
!8376 = !DILocation(line: 1746, column: 21, scope: !8352)
!8377 = !DILocation(line: 1747, column: 3, scope: !8352)
!8378 = !DILocation(line: 1747, column: 6, scope: !8352)
!8379 = !DILocation(line: 1747, column: 21, scope: !8352)
!8380 = !DILocation(line: 1748, column: 11, scope: !8352)
!8381 = !DILocation(line: 1748, column: 9, scope: !8352)
!8382 = distinct !{!8382, !8371, !8380}
!8383 = !DILocation(line: 1750, column: 7, scope: !8384)
!8384 = distinct !DILexicalBlock(scope: !8352, file: !3, line: 1750, column: 7)
!8385 = !DILocation(line: 1750, column: 22, scope: !8384)
!8386 = !DILocation(line: 1750, column: 7, scope: !8352)
!8387 = !DILocalVariable(name: "i", scope: !8388, file: !3, line: 1752, type: !990)
!8388 = distinct !DILexicalBlock(scope: !8384, file: !3, line: 1751, column: 5)
!8389 = !DILocation(line: 1752, column: 11, scope: !8388)
!8390 = !DILocation(line: 1754, column: 16, scope: !8391)
!8391 = distinct !DILexicalBlock(scope: !8388, file: !3, line: 1754, column: 7)
!8392 = !DILocation(line: 1754, column: 33, scope: !8391)
!8393 = !DILocation(line: 1754, column: 14, scope: !8391)
!8394 = !DILocation(line: 1754, column: 12, scope: !8391)
!8395 = !DILocation(line: 1754, column: 38, scope: !8396)
!8396 = distinct !DILexicalBlock(scope: !8391, file: !3, line: 1754, column: 7)
!8397 = !DILocation(line: 1754, column: 40, scope: !8396)
!8398 = !DILocation(line: 1754, column: 7, scope: !8391)
!8399 = !DILocation(line: 1755, column: 6, scope: !8400)
!8400 = distinct !DILexicalBlock(scope: !8396, file: !3, line: 1755, column: 6)
!8401 = !DILocation(line: 1755, column: 36, scope: !8400)
!8402 = !DILocation(line: 1755, column: 6, scope: !8396)
!8403 = !DILocation(line: 1756, column: 19, scope: !8400)
!8404 = !DILocation(line: 1756, column: 24, scope: !8400)
!8405 = !DILocation(line: 1756, column: 4, scope: !8400)
!8406 = !DILocation(line: 1755, column: 39, scope: !8400)
!8407 = !DILocation(line: 1754, column: 47, scope: !8396)
!8408 = !DILocation(line: 1754, column: 7, scope: !8396)
!8409 = distinct !{!8409, !8398, !8410}
!8410 = !DILocation(line: 1756, column: 53, scope: !8391)
!8411 = !DILocation(line: 1758, column: 7, scope: !8388)
!8412 = !DILocation(line: 1761, column: 8, scope: !8413)
!8413 = distinct !DILexicalBlock(scope: !8352, file: !3, line: 1761, column: 7)
!8414 = !DILocation(line: 1761, column: 7, scope: !8352)
!8415 = !DILocation(line: 1762, column: 5, scope: !8413)
!8416 = !DILocation(line: 1767, column: 11, scope: !8352)
!8417 = !DILocation(line: 1767, column: 9, scope: !8352)
!8418 = !DILocation(line: 1769, column: 7, scope: !8419)
!8419 = distinct !DILexicalBlock(scope: !8352, file: !3, line: 1769, column: 7)
!8420 = !DILocation(line: 1769, column: 13, scope: !8419)
!8421 = !DILocation(line: 1769, column: 38, scope: !8419)
!8422 = !DILocation(line: 1769, column: 54, scope: !8419)
!8423 = !DILocation(line: 1769, column: 42, scope: !8419)
!8424 = !DILocation(line: 1769, column: 7, scope: !8352)
!8425 = !DILocation(line: 1771, column: 11, scope: !8426)
!8426 = distinct !DILexicalBlock(scope: !8427, file: !3, line: 1771, column: 11)
!8427 = distinct !DILexicalBlock(scope: !8419, file: !3, line: 1770, column: 5)
!8428 = !DILocation(line: 1771, column: 17, scope: !8426)
!8429 = !DILocation(line: 1771, column: 11, scope: !8427)
!8430 = !DILocalVariable(name: "j", scope: !8431, file: !3, line: 1773, type: !990)
!8431 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 1772, column: 2)
!8432 = !DILocation(line: 1773, column: 8, scope: !8431)
!8433 = !DILocation(line: 1773, column: 29, scope: !8431)
!8434 = !DILocation(line: 1773, column: 12, scope: !8431)
!8435 = !DILocation(line: 1773, column: 36, scope: !8431)
!8436 = !DILocation(line: 1774, column: 4, scope: !8431)
!8437 = !DILocation(line: 1774, column: 11, scope: !8431)
!8438 = !DILocation(line: 1774, column: 15, scope: !8431)
!8439 = !DILocation(line: 1776, column: 15, scope: !8440)
!8440 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 1776, column: 8)
!8441 = distinct !DILexicalBlock(scope: !8431, file: !3, line: 1775, column: 6)
!8442 = !DILocation(line: 1776, column: 13, scope: !8440)
!8443 = !DILocation(line: 1776, column: 20, scope: !8444)
!8444 = distinct !DILexicalBlock(scope: !8440, file: !3, line: 1776, column: 8)
!8445 = !DILocation(line: 1776, column: 24, scope: !8444)
!8446 = !DILocation(line: 1776, column: 40, scope: !8444)
!8447 = !DILocation(line: 1776, column: 45, scope: !8444)
!8448 = !DILocation(line: 1776, column: 56, scope: !8444)
!8449 = !DILocation(line: 1776, column: 22, scope: !8444)
!8450 = !DILocation(line: 1776, column: 8, scope: !8440)
!8451 = !DILocalVariable(name: "b", scope: !8452, file: !3, line: 1778, type: !1536)
!8452 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 1777, column: 3)
!8453 = !DILocation(line: 1778, column: 17, scope: !8452)
!8454 = !DILocation(line: 1778, column: 21, scope: !8452)
!8455 = !DILocation(line: 1778, column: 37, scope: !8452)
!8456 = !DILocation(line: 1778, column: 42, scope: !8452)
!8457 = !DILocation(line: 1778, column: 53, scope: !8452)
!8458 = !DILocation(line: 1778, column: 66, scope: !8452)
!8459 = !DILocation(line: 1780, column: 5, scope: !8452)
!8460 = !DILocation(line: 1781, column: 3, scope: !8452)
!8461 = !DILocation(line: 1776, column: 69, scope: !8444)
!8462 = !DILocation(line: 1776, column: 8, scope: !8444)
!8463 = distinct !{!8463, !8450, !8464}
!8464 = !DILocation(line: 1781, column: 3, scope: !8440)
!8465 = distinct !{!8465, !8436, !8466}
!8466 = !DILocation(line: 1782, column: 6, scope: !8431)
!8467 = !DILocation(line: 1783, column: 2, scope: !8431)
!8468 = !DILocation(line: 1786, column: 11, scope: !8469)
!8469 = distinct !DILexicalBlock(scope: !8470, file: !3, line: 1786, column: 4)
!8470 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 1785, column: 2)
!8471 = !DILocation(line: 1786, column: 9, scope: !8469)
!8472 = !DILocation(line: 1786, column: 16, scope: !8473)
!8473 = distinct !DILexicalBlock(scope: !8469, file: !3, line: 1786, column: 4)
!8474 = !DILocation(line: 1786, column: 20, scope: !8473)
!8475 = !DILocation(line: 1786, column: 36, scope: !8473)
!8476 = !DILocation(line: 1786, column: 41, scope: !8473)
!8477 = !DILocation(line: 1786, column: 52, scope: !8473)
!8478 = !DILocation(line: 1786, column: 18, scope: !8473)
!8479 = !DILocation(line: 1786, column: 4, scope: !8469)
!8480 = !DILocalVariable(name: "b", scope: !8481, file: !3, line: 1788, type: !1536)
!8481 = distinct !DILexicalBlock(scope: !8473, file: !3, line: 1787, column: 6)
!8482 = !DILocation(line: 1788, column: 20, scope: !8481)
!8483 = !DILocation(line: 1788, column: 24, scope: !8481)
!8484 = !DILocation(line: 1788, column: 40, scope: !8481)
!8485 = !DILocation(line: 1788, column: 45, scope: !8481)
!8486 = !DILocation(line: 1788, column: 56, scope: !8481)
!8487 = !DILocation(line: 1788, column: 69, scope: !8481)
!8488 = !DILocation(line: 1790, column: 8, scope: !8481)
!8489 = !DILocation(line: 1791, column: 6, scope: !8481)
!8490 = !DILocation(line: 1786, column: 65, scope: !8473)
!8491 = !DILocation(line: 1786, column: 4, scope: !8473)
!8492 = distinct !{!8492, !8479, !8493}
!8493 = !DILocation(line: 1791, column: 6, scope: !8469)
!8494 = !DILocation(line: 1793, column: 5, scope: !8427)
!8495 = !DILocation(line: 1794, column: 1, scope: !8352)
!8496 = distinct !DISubprogram(name: "free_trg_info", scope: !3, file: !3, line: 1588, type: !2319, scopeLine: 1589, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8497 = !DILocation(line: 1590, column: 9, scope: !8496)
!8498 = !DILocation(line: 1590, column: 3, scope: !8496)
!8499 = !DILocation(line: 1591, column: 9, scope: !8496)
!8500 = !DILocation(line: 1591, column: 3, scope: !8496)
!8501 = !DILocation(line: 1592, column: 9, scope: !8496)
!8502 = !DILocation(line: 1592, column: 3, scope: !8496)
!8503 = !DILocation(line: 1593, column: 1, scope: !8496)
!8504 = distinct !DISubprogram(name: "free_block_dependencies", scope: !3, file: !3, line: 2744, type: !2327, scopeLine: 2745, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2432)
!8505 = !DILocalVariable(name: "bb", arg: 1, scope: !8504, file: !3, line: 2744, type: !990)
!8506 = !DILocation(line: 2744, column: 30, scope: !8504)
!8507 = !DILocalVariable(name: "head", scope: !8504, file: !3, line: 2746, type: !997)
!8508 = !DILocation(line: 2746, column: 7, scope: !8504)
!8509 = !DILocalVariable(name: "tail", scope: !8504, file: !3, line: 2747, type: !997)
!8510 = !DILocation(line: 2747, column: 7, scope: !8504)
!8511 = !DILocation(line: 2749, column: 22, scope: !8504)
!8512 = !DILocation(line: 2749, column: 41, scope: !8504)
!8513 = !DILocation(line: 2749, column: 3, scope: !8504)
!8514 = !DILocation(line: 2751, column: 24, scope: !8515)
!8515 = distinct !DILexicalBlock(scope: !8504, file: !3, line: 2751, column: 7)
!8516 = !DILocation(line: 2751, column: 30, scope: !8515)
!8517 = !DILocation(line: 2751, column: 7, scope: !8515)
!8518 = !DILocation(line: 2751, column: 7, scope: !8504)
!8519 = !DILocation(line: 2752, column: 5, scope: !8515)
!8520 = !DILocation(line: 2754, column: 20, scope: !8504)
!8521 = !DILocation(line: 2754, column: 26, scope: !8504)
!8522 = !DILocation(line: 2754, column: 3, scope: !8504)
!8523 = !DILocation(line: 2755, column: 1, scope: !8504)
