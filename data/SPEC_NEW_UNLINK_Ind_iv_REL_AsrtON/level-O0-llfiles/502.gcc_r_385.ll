; ModuleID = 'tree-ssa-structalias.c'
source_filename = "tree-ssa-structalias.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.anon = type { i64, i64, i64, i64 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.simple_ipa_opt_pass = type { %struct.opt_pass }
%struct.ggc_cache_tab = type { %struct.htab**, i64, i64, void (i8*)*, void (i8*)*, i32 (i8*)* }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.VEC_varinfo_t_heap = type { %struct.VEC_varinfo_t_base }
%struct.VEC_varinfo_t_base = type { i32, i32, [1 x %struct.variable_info*] }
%struct.variable_info = type { i32, i8, %struct.variable_info*, i64, i64, i64, i8*, %union.tree_node*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_constraint_t_heap = type { %struct.VEC_constraint_t_base }
%struct.VEC_constraint_t_base = type { i32, i32, [1 x %struct.constraint*] }
%struct.constraint = type { %struct.constraint_expr, %struct.constraint_expr }
%struct.constraint_expr = type { i32, i32, i64 }
%struct.constraint_graph = type { i32, %struct.bitmap_head_def**, %struct.bitmap_head_def**, %struct.bitmap_head_def**, i32*, i32*, i32*, i32*, i32*, i32*, i32*, %struct.bitmap_head_def**, %struct.bitmap_head_def**, %struct.simple_bitmap_def*, %struct.bitmap_head_def*, %struct.VEC_constraint_t_heap** }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.constraint_stats = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.var_ann_d = type { i8, i32, %union.tree_node* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.VEC_ce_s_heap = type { %struct.VEC_ce_s_base }
%struct.VEC_ce_s_base = type { i32, i32, [1 x %struct.constraint_expr] }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.scc_info = type { %struct.simple_bitmap_def*, %struct.simple_bitmap_def*, i32*, i32*, i32, %struct.VEC_unsigned_heap* }
%struct.VEC_unsigned_heap = type { %struct.VEC_unsigned_base }
%struct.VEC_unsigned_base = type { i32, i32, [1 x i32] }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.shared_bitmap_info = type { %struct.bitmap_head_def*, i32 }
%struct.heapvar_map = type { %struct.tree_map, i64 }
%struct.tree_map = type { %struct.tree_map_base, i32, %union.tree_node* }
%struct.tree_map_base = type { %union.tree_node* }
%struct.tree_var_decl = type { %struct.tree_decl_with_vis, %struct.var_ann_d* }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.tree_result_decl = type { %struct.tree_decl_with_rtl, %struct.var_ann_d* }
%struct.VEC_fieldoff_s_heap = type { %struct.VEC_fieldoff_s_base }
%struct.VEC_fieldoff_s_base = type { i32, i32, [1 x %struct.fieldoff] }
%struct.fieldoff = type { i64, i64, i8 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.topo_info = type { %struct.simple_bitmap_def*, %struct.VEC_unsigned_heap* }
%struct.equiv_class_label = type { i32, i32, %struct.bitmap_head_def* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [19 x i8] c"\0APTA query stats:\0A\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"  pt_solution_includes: %ld disambiguations, %ld queries\0A\00", align 1
@pta_stats = internal global %struct.anon zeroinitializer, align 8, !dbg !0
@.str.2 = private unnamed_addr constant [60 x i8] c"  pt_solutions_intersect: %ld disambiguations, %ld queries\0A\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.3 = private unnamed_addr constant [23 x i8] c"tree-ssa-structalias.c\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@heapvar_for_stmt = internal global %struct.htab* null, align 8, !dbg !3306
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.5 = private unnamed_addr constant [6 x i8] c"alias\00", align 1
@pass_build_alias = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8 ()* @gate_tree_pta, i32 ()* null, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 40, i32 0, i32 0, i32 0, i32 1048577 } }, align 8, !dbg !3241
@.str.6 = private unnamed_addr constant [7 x i8] c"ealias\00", align 1
@pass_build_ealias = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i8 ()* @gate_tree_pta, i32 ()* null, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 40, i32 0, i32 0, i32 0, i32 1048577 } }, align 8, !dbg !3269
@.str.7 = private unnamed_addr constant [4 x i8] c"pta\00", align 1
@pass_ipa_pta = dso_local global %struct.simple_ipa_opt_pass { %struct.opt_pass { i32 2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8 ()* @gate_ipa_pta, i32 ()* @ipa_pta_execute, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 19, i32 0, i32 0, i32 0, i32 0, i32 2048 } }, align 8, !dbg !3271
@gt_ggc_rc_gt_tree_ssa_structalias_h = dso_local constant [2 x %struct.ggc_cache_tab] [%struct.ggc_cache_tab { %struct.htab** @heapvar_for_stmt, i64 1, i64 8, void (i8*)* @gt_ggc_mx_tree_map, void (i8*)* @gt_pch_nx_tree_map, i32 (i8*)* @tree_map_base_marked_p }, %struct.ggc_cache_tab zeroinitializer], align 16, !dbg !3276
@gt_pch_rc_gt_tree_ssa_structalias_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.htab** @heapvar_for_stmt to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P8tree_map4htab, void (i8*)* @gt_pch_n_P8tree_map4htab }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !3295
@.str.8 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c" + UNKNOWN\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c" + %ld\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@varmap = internal global %struct.VEC_varinfo_t_heap* null, align 8, !dbg !3308
@constraints = internal global %struct.VEC_constraint_t_heap* null, align 8, !dbg !3310
@graph = internal global %struct.constraint_graph* null, align 8, !dbg !3312
@.str.15 = private unnamed_addr constant [48 x i8] c"\0A\0A/* Constraints used in the constraint graph:\0A\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"*/\0A\00", align 1
@.str.17 = private unnamed_addr constant [42 x i8] c"\0A\0A// The constraint graph in dot format:\0A\00", align 1
@.str.18 = private unnamed_addr constant [18 x i8] c"strict digraph {\0A\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"  node [\0A    shape = box\0A  ]\0A\00", align 1
@.str.20 = private unnamed_addr constant [34 x i8] c"  edge [\0A    fontsize = \2212\22\0A  ]\0A\00", align 1
@.str.21 = private unnamed_addr constant [46 x i8] c"\0A  // List of nodes in the constraint graph:\0A\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"  \22%s\22 ;\0A\00", align 1
@.str.23 = private unnamed_addr constant [29 x i8] c"\0A  // The constraint edges:\0A\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"}\0A\0A\0A\00", align 1
@.str.25 = private unnamed_addr constant [16 x i8] c"  \22%s\22 -> \22%s\22 \00", align 1
@.str.26 = private unnamed_addr constant [19 x i8] c" [ label=\22*=\22 ] ;\0A\00", align 1
@.str.27 = private unnamed_addr constant [19 x i8] c" [ label=\22=*\22 ] ;\0A\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c" [ label=\22+\22 ] ;\0A\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c" ;\0A\00", align 1
@.str.30 = private unnamed_addr constant [17 x i8] c"%s = same as %s\0A\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"%s = { \00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.34 = private unnamed_addr constant [18 x i8] c"\0APoints-to sets\0A\0A\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"Stats:\0A\00", align 1
@.str.36 = private unnamed_addr constant [30 x i8] c"Total vars:               %d\0A\00", align 1
@stats = internal global %struct.constraint_stats zeroinitializer, align 4, !dbg !3315
@.str.37 = private unnamed_addr constant [31 x i8] c"Non-pointer vars:          %d\0A\00", align 1
@.str.38 = private unnamed_addr constant [30 x i8] c"Statically unified vars:  %d\0A\00", align 1
@.str.39 = private unnamed_addr constant [30 x i8] c"Dynamically unified vars: %d\0A\00", align 1
@.str.40 = private unnamed_addr constant [30 x i8] c"Iterations:               %d\0A\00", align 1
@.str.41 = private unnamed_addr constant [30 x i8] c"Number of edges:          %d\0A\00", align 1
@.str.42 = private unnamed_addr constant [30 x i8] c"Number of implicit edges: %d\0A\00", align 1
@timevar_enable = external dso_local global i8, align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@use_field_sensitive = internal global i8 1, align 1, !dbg !3327
@pta_obstack = internal global %struct.bitmap_obstack zeroinitializer, align 8, !dbg !3329
@oldpta_obstack = internal global %struct.bitmap_obstack zeroinitializer, align 8, !dbg !3331
@predbitmap_obstack = internal global %struct.bitmap_obstack zeroinitializer, align 8, !dbg !3333
@.str.43 = private unnamed_addr constant [16 x i8] c"Constraint pool\00", align 1
@constraint_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !3335
@.str.44 = private unnamed_addr constant [19 x i8] c"Variable info pool\00", align 1
@variable_info_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !3358
@vi_for_tree = internal global %struct.pointer_map_t* null, align 8, !dbg !3360
@shared_bitmap_table = internal global %struct.htab* null, align 8, !dbg !3362
@.str.45 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.46 = private unnamed_addr constant [9 x i8] c"ANYTHING\00", align 1
@.str.47 = private unnamed_addr constant [9 x i8] c"READONLY\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"ESCAPED\00", align 1
@.str.49 = private unnamed_addr constant [9 x i8] c"NONLOCAL\00", align 1
@.str.50 = private unnamed_addr constant [9 x i8] c"CALLUSED\00", align 1
@.str.51 = private unnamed_addr constant [15 x i8] c"STOREDANYTHING\00", align 1
@.str.52 = private unnamed_addr constant [8 x i8] c"INTEGER\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.53 = private unnamed_addr constant [15 x i8] c"doubledereftmp\00", align 1
@.str.54 = private unnamed_addr constant [13 x i8] c"derefaddrtmp\00", align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.55 = private unnamed_addr constant [13 x i8] c"PARM_NOALIAS\00", align 1
@.str.56 = private unnamed_addr constant [14 x i8] c"PARM_RESTRICT\00", align 1
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@.str.57 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@flag_whole_program = external dso_local global i32, align 4
@in_ipa_mode = internal global i32 0, align 4, !dbg !3364
@.str.58 = private unnamed_addr constant [16 x i8] c"GLOBAL_RESTRICT\00", align 1
@.str.59 = private unnamed_addr constant [11 x i8] c"%s.%ld+%ld\00", align 1
@.str.60 = private unnamed_addr constant [6 x i8] c"%s_%u\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"D.%u\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@flag_delete_null_pointer_checks = external dso_local global i32, align 4
@.str.62 = private unnamed_addr constant [14 x i8] c"CAST_RESTRICT\00", align 1
@.str.63 = private unnamed_addr constant [48 x i8] c"Access to zero-sized part of variable,ignoring\0A\00", align 1
@.str.64 = private unnamed_addr constant [46 x i8] c"Access to past the end of variable, ignoring\0A\00", align 1
@.str.65 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.66 = private unnamed_addr constant [10 x i8] c"allalltmp\00", align 1
@.str.67 = private unnamed_addr constant [9 x i8] c"dereftmp\00", align 1
@.str.68 = private unnamed_addr constant [5 x i8] c"HEAP\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.69 = private unnamed_addr constant [35 x i8] c"Points-to analysis\0A\0AConstraints:\0A\0A\00", align 1
@.str.70 = private unnamed_addr constant [59 x i8] c"\0ACollapsing static cycles and doing variable substitution\0A\00", align 1
@.str.71 = private unnamed_addr constant [28 x i8] c"Building predecessor graph\0A\00", align 1
@.str.72 = private unnamed_addr constant [45 x i8] c"Detecting pointer and location equivalences\0A\00", align 1
@.str.73 = private unnamed_addr constant [46 x i8] c"Rewriting constraints and unifying variables\0A\00", align 1
@.str.74 = private unnamed_addr constant [55 x i8] c"Uniting pointer but not location equivalent variables\0A\00", align 1
@.str.75 = private unnamed_addr constant [25 x i8] c"Finding indirect cycles\0A\00", align 1
@.str.76 = private unnamed_addr constant [15 x i8] c"Solving graph\0A\00", align 1
@iteration_obstack = internal global %struct.bitmap_obstack zeroinitializer, align 8, !dbg !3366
@pointer_equiv_class_table = internal global %struct.htab* null, align 8, !dbg !3368
@location_equiv_class_table = internal global %struct.htab* null, align 8, !dbg !3370
@pointer_equiv_class = internal global i32 0, align 4, !dbg !3372
@location_equiv_class = internal global i32 0, align 4, !dbg !3374
@.str.77 = private unnamed_addr constant [40 x i8] c"Found location equivalence for node %s\0A\00", align 1
@.str.78 = private unnamed_addr constant [71 x i8] c"Equivalence classes for %s node id %d:%s are pointer: %d, location:%d\0A\00", align 1
@.str.79 = private unnamed_addr constant [12 x i8] c"Direct node\00", align 1
@.str.80 = private unnamed_addr constant [14 x i8] c"Indirect node\00", align 1
@.str.81 = private unnamed_addr constant [50 x i8] c"%s is a non-pointer variable, eliminating edges.\0A\00", align 1
@.str.82 = private unnamed_addr constant [50 x i8] c"%s is a non-pointer variable,ignoring constraint:\00", align 1
@.str.83 = private unnamed_addr constant [19 x i8] c"Unifying %s to %s\0A\00", align 1
@changed = internal global %struct.simple_bitmap_def* null, align 8, !dbg !3376
@changed_count = internal global i32 0, align 4, !dbg !3378
@.str.84 = private unnamed_addr constant [27 x i8] c"Points to sets created:%d\0A\00", align 1
@flag_tree_pta = external dso_local global i32, align 4
@optimize = external dso_local global i32, align 4
@flag_ipa_pta = external dso_local global i32, align 4
@global_dc = external dso_local global %struct.diagnostic_context*, align 8
@cgraph_nodes = external dso_local global %struct.cgraph_node*, align 8
@.str.85 = private unnamed_addr constant [31 x i8] c"Generating constraints for %s\0A\00", align 1
@.str.86 = private unnamed_addr constant [9 x i8] c"%s.arg%d\00", align 1
@.str.87 = private unnamed_addr constant [10 x i8] c"%s.result\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_constraint(%struct.constraint* %c) #0 !dbg !3390 {
entry:
  %c.addr = alloca %struct.constraint*, align 8
  store %struct.constraint* %c, %struct.constraint** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %c.addr, metadata !3394, metadata !DIExpression()), !dbg !3395
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3396
  %1 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3397
  call void @dump_constraint(%struct._IO_FILE* %0, %struct.constraint* %1), !dbg !3398
  ret void, !dbg !3399
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dump_constraint(%struct._IO_FILE* %file, %struct.constraint* %c) #0 !dbg !3400 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %c.addr = alloca %struct.constraint*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3454, metadata !DIExpression()), !dbg !3455
  store %struct.constraint* %c, %struct.constraint** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %c.addr, metadata !3456, metadata !DIExpression()), !dbg !3457
  %0 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3458
  %lhs = getelementptr inbounds %struct.constraint, %struct.constraint* %0, i32 0, i32 0, !dbg !3460
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !3461
  %1 = load i32, i32* %type, align 8, !dbg !3461
  %cmp = icmp eq i32 %1, 2, !dbg !3462
  br i1 %cmp, label %if.then, label %if.else, !dbg !3463

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3464
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !3465
  br label %if.end6, !dbg !3465

if.else:                                          ; preds = %entry
  %3 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3466
  %lhs1 = getelementptr inbounds %struct.constraint, %struct.constraint* %3, i32 0, i32 0, !dbg !3468
  %type2 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs1, i32 0, i32 0, !dbg !3469
  %4 = load i32, i32* %type2, align 8, !dbg !3469
  %cmp3 = icmp eq i32 %4, 1, !dbg !3470
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !3471

if.then4:                                         ; preds = %if.else
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3472
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3473
  br label %if.end, !dbg !3473

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3474
  %7 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3475
  %lhs7 = getelementptr inbounds %struct.constraint, %struct.constraint* %7, i32 0, i32 0, !dbg !3476
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs7, i32 0, i32 1, !dbg !3477
  %8 = load i32, i32* %var, align 4, !dbg !3477
  %call8 = call %struct.variable_info* @get_varinfo(i32 %8), !dbg !3478
  %name = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call8, i32 0, i32 6, !dbg !3479
  %9 = load i8*, i8** %name, align 8, !dbg !3479
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* %9), !dbg !3480
  %10 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3481
  %lhs10 = getelementptr inbounds %struct.constraint, %struct.constraint* %10, i32 0, i32 0, !dbg !3483
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs10, i32 0, i32 2, !dbg !3484
  %11 = load i64, i64* %offset, align 8, !dbg !3484
  %cmp11 = icmp eq i64 %11, -9223372036854775808, !dbg !3485
  br i1 %cmp11, label %if.then12, label %if.else14, !dbg !3486

if.then12:                                        ; preds = %if.end6
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3487
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0)), !dbg !3488
  br label %if.end23, !dbg !3488

if.else14:                                        ; preds = %if.end6
  %13 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3489
  %lhs15 = getelementptr inbounds %struct.constraint, %struct.constraint* %13, i32 0, i32 0, !dbg !3491
  %offset16 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs15, i32 0, i32 2, !dbg !3492
  %14 = load i64, i64* %offset16, align 8, !dbg !3492
  %cmp17 = icmp ne i64 %14, 0, !dbg !3493
  br i1 %cmp17, label %if.then18, label %if.end22, !dbg !3494

if.then18:                                        ; preds = %if.else14
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3495
  %16 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3496
  %lhs19 = getelementptr inbounds %struct.constraint, %struct.constraint* %16, i32 0, i32 0, !dbg !3497
  %offset20 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs19, i32 0, i32 2, !dbg !3498
  %17 = load i64, i64* %offset20, align 8, !dbg !3498
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0), i64 %17), !dbg !3499
  br label %if.end22, !dbg !3499

if.end22:                                         ; preds = %if.then18, %if.else14
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then12
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3500
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0)), !dbg !3501
  %19 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3502
  %rhs = getelementptr inbounds %struct.constraint, %struct.constraint* %19, i32 0, i32 1, !dbg !3504
  %type25 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !3505
  %20 = load i32, i32* %type25, align 8, !dbg !3505
  %cmp26 = icmp eq i32 %20, 2, !dbg !3506
  br i1 %cmp26, label %if.then27, label %if.else29, !dbg !3507

if.then27:                                        ; preds = %if.end23
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3508
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !3509
  br label %if.end36, !dbg !3509

if.else29:                                        ; preds = %if.end23
  %22 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3510
  %rhs30 = getelementptr inbounds %struct.constraint, %struct.constraint* %22, i32 0, i32 1, !dbg !3512
  %type31 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs30, i32 0, i32 0, !dbg !3513
  %23 = load i32, i32* %type31, align 8, !dbg !3513
  %cmp32 = icmp eq i32 %23, 1, !dbg !3514
  br i1 %cmp32, label %if.then33, label %if.end35, !dbg !3515

if.then33:                                        ; preds = %if.else29
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3516
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3517
  br label %if.end35, !dbg !3517

if.end35:                                         ; preds = %if.then33, %if.else29
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then27
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3518
  %26 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3519
  %rhs37 = getelementptr inbounds %struct.constraint, %struct.constraint* %26, i32 0, i32 1, !dbg !3520
  %var38 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs37, i32 0, i32 1, !dbg !3521
  %27 = load i32, i32* %var38, align 4, !dbg !3521
  %call39 = call %struct.variable_info* @get_varinfo(i32 %27), !dbg !3522
  %name40 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call39, i32 0, i32 6, !dbg !3523
  %28 = load i8*, i8** %name40, align 8, !dbg !3523
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* %28), !dbg !3524
  %29 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3525
  %rhs42 = getelementptr inbounds %struct.constraint, %struct.constraint* %29, i32 0, i32 1, !dbg !3527
  %offset43 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs42, i32 0, i32 2, !dbg !3528
  %30 = load i64, i64* %offset43, align 8, !dbg !3528
  %cmp44 = icmp eq i64 %30, -9223372036854775808, !dbg !3529
  br i1 %cmp44, label %if.then45, label %if.else47, !dbg !3530

if.then45:                                        ; preds = %if.end36
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3531
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0)), !dbg !3532
  br label %if.end56, !dbg !3532

if.else47:                                        ; preds = %if.end36
  %32 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3533
  %rhs48 = getelementptr inbounds %struct.constraint, %struct.constraint* %32, i32 0, i32 1, !dbg !3535
  %offset49 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs48, i32 0, i32 2, !dbg !3536
  %33 = load i64, i64* %offset49, align 8, !dbg !3536
  %cmp50 = icmp ne i64 %33, 0, !dbg !3537
  br i1 %cmp50, label %if.then51, label %if.end55, !dbg !3538

if.then51:                                        ; preds = %if.else47
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3539
  %35 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !3540
  %rhs52 = getelementptr inbounds %struct.constraint, %struct.constraint* %35, i32 0, i32 1, !dbg !3541
  %offset53 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs52, i32 0, i32 2, !dbg !3542
  %36 = load i64, i64* %offset53, align 8, !dbg !3542
  %call54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0), i64 %36), !dbg !3543
  br label %if.end55, !dbg !3543

if.end55:                                         ; preds = %if.then51, %if.else47
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.then45
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3544
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !3545
  ret void, !dbg !3546
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_constraints() #0 !dbg !3547 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3550
  call void @dump_constraints(%struct._IO_FILE* %0), !dbg !3551
  ret void, !dbg !3552
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_constraints(%struct._IO_FILE* %file) #0 !dbg !3553 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %c = alloca %struct.constraint*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3556, metadata !DIExpression()), !dbg !3557
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3558, metadata !DIExpression()), !dbg !3559
  call void @llvm.dbg.declare(metadata %struct.constraint** %c, metadata !3560, metadata !DIExpression()), !dbg !3561
  store i32 0, i32* %i, align 4, !dbg !3562
  br label %for.cond, !dbg !3564

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !3565
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %0, null, !dbg !3565
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3565

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !3565
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %1, i32 0, i32 0, !dbg !3565
  br label %cond.end, !dbg !3565

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3565

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3565
  %2 = load i32, i32* %i, align 4, !dbg !3565
  %call = call i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %cond, i32 %2, %struct.constraint** %c), !dbg !3565
  %tobool1 = icmp ne i32 %call, 0, !dbg !3567
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3567

for.body:                                         ; preds = %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3568
  %4 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !3569
  call void @dump_constraint(%struct._IO_FILE* %3, %struct.constraint* %4), !dbg !3570
  br label %for.inc, !dbg !3570

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !3571
  %inc = add nsw i32 %5, 1, !dbg !3571
  store i32 %inc, i32* %i, align 4, !dbg !3571
  br label %for.cond, !dbg !3572, !llvm.loop !3573

for.end:                                          ; preds = %cond.end
  ret void, !dbg !3575
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_constraint_graph() #0 !dbg !3576 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3577
  call void @dump_constraint_graph(%struct._IO_FILE* %0), !dbg !3578
  ret void, !dbg !3579
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_constraint_graph(%struct._IO_FILE* %file) #0 !dbg !3580 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %c = alloca %struct.constraint*, align 8
  %name = alloca i8*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3581, metadata !DIExpression()), !dbg !3582
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3583, metadata !DIExpression()), !dbg !3584
  store i32 0, i32* %i, align 4, !dbg !3584
  call void @llvm.dbg.declare(metadata i32* %size, metadata !3585, metadata !DIExpression()), !dbg !3586
  call void @llvm.dbg.declare(metadata %struct.constraint** %c, metadata !3587, metadata !DIExpression()), !dbg !3588
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !3589
  %tobool = icmp ne %struct.constraint_graph* %0, null, !dbg !3589
  br i1 %tobool, label %if.end, label %if.then, !dbg !3591

if.then:                                          ; preds = %entry
  br label %return, !dbg !3592

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3593
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.15, i64 0, i64 0)), !dbg !3594
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3595
  call void @dump_constraints(%struct._IO_FILE* %2), !dbg !3596
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3597
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0)), !dbg !3598
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3599
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.17, i64 0, i64 0)), !dbg !3600
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3601
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.18, i64 0, i64 0)), !dbg !3602
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3603
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i64 0, i64 0)), !dbg !3604
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3605
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.20, i64 0, i64 0)), !dbg !3606
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3607
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.21, i64 0, i64 0)), !dbg !3608
  %9 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !3609
  %tobool7 = icmp ne %struct.VEC_varinfo_t_heap* %9, null, !dbg !3609
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !3609

cond.true:                                        ; preds = %if.end
  %10 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !3609
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %10, i32 0, i32 0, !dbg !3609
  br label %cond.end, !dbg !3609

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3609

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3609
  %call8 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !3609
  store i32 %call8, i32* %size, align 4, !dbg !3610
  %11 = load i32, i32* %size, align 4, !dbg !3611
  %12 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !3612
  %size9 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %12, i32 0, i32 0, !dbg !3613
  %13 = load i32, i32* %size9, align 8, !dbg !3613
  %cmp = icmp ult i32 %11, %13, !dbg !3614
  br i1 %cmp, label %cond.true10, label %cond.false11, !dbg !3611

cond.true10:                                      ; preds = %cond.end
  %14 = load i32, i32* %size, align 4, !dbg !3615
  br label %cond.end13, !dbg !3611

cond.false11:                                     ; preds = %cond.end
  %15 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !3616
  %size12 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %15, i32 0, i32 0, !dbg !3617
  %16 = load i32, i32* %size12, align 8, !dbg !3617
  br label %cond.end13, !dbg !3611

cond.end13:                                       ; preds = %cond.false11, %cond.true10
  %cond14 = phi i32 [ %14, %cond.true10 ], [ %16, %cond.false11 ], !dbg !3611
  store i32 %cond14, i32* %size, align 4, !dbg !3618
  store i32 0, i32* %i, align 4, !dbg !3619
  br label %for.cond, !dbg !3621

for.cond:                                         ; preds = %for.inc, %cond.end13
  %17 = load i32, i32* %i, align 4, !dbg !3622
  %18 = load i32, i32* %size, align 4, !dbg !3624
  %cmp15 = icmp ult i32 %17, %18, !dbg !3625
  br i1 %cmp15, label %for.body, label %for.end, !dbg !3626

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %name, metadata !3627, metadata !DIExpression()), !dbg !3629
  %19 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !3630
  %rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %19, i32 0, i32 5, !dbg !3631
  %20 = load i32*, i32** %rep, align 8, !dbg !3631
  %21 = load i32, i32* %i, align 4, !dbg !3632
  %idxprom = zext i32 %21 to i64, !dbg !3630
  %arrayidx = getelementptr inbounds i32, i32* %20, i64 %idxprom, !dbg !3630
  %22 = load i32, i32* %arrayidx, align 4, !dbg !3630
  %call16 = call %struct.variable_info* @get_varinfo(i32 %22), !dbg !3633
  %name17 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call16, i32 0, i32 6, !dbg !3634
  %23 = load i8*, i8** %name17, align 8, !dbg !3634
  store i8* %23, i8** %name, align 8, !dbg !3629
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3635
  %25 = load i8*, i8** %name, align 8, !dbg !3636
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i64 0, i64 0), i8* %25), !dbg !3637
  br label %for.inc, !dbg !3638

for.inc:                                          ; preds = %for.body
  %26 = load i32, i32* %i, align 4, !dbg !3639
  %inc = add i32 %26, 1, !dbg !3639
  store i32 %inc, i32* %i, align 4, !dbg !3639
  br label %for.cond, !dbg !3640, !llvm.loop !3641

for.end:                                          ; preds = %for.cond
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3643
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.23, i64 0, i64 0)), !dbg !3644
  store i32 0, i32* %i, align 4, !dbg !3645
  br label %for.cond20, !dbg !3647

for.cond20:                                       ; preds = %for.inc33, %for.end
  %28 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !3648
  %tobool21 = icmp ne %struct.VEC_constraint_t_heap* %28, null, !dbg !3648
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !3648

cond.true22:                                      ; preds = %for.cond20
  %29 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !3648
  %base23 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %29, i32 0, i32 0, !dbg !3648
  br label %cond.end25, !dbg !3648

cond.false24:                                     ; preds = %for.cond20
  br label %cond.end25, !dbg !3648

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_constraint_t_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !3648
  %30 = load i32, i32* %i, align 4, !dbg !3648
  %call27 = call i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %cond26, i32 %30, %struct.constraint** %c), !dbg !3648
  %tobool28 = icmp ne i32 %call27, 0, !dbg !3650
  br i1 %tobool28, label %for.body29, label %for.end35, !dbg !3650

for.body29:                                       ; preds = %cond.end25
  %31 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !3651
  %tobool30 = icmp ne %struct.constraint* %31, null, !dbg !3651
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !3653

if.then31:                                        ; preds = %for.body29
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3654
  %33 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !3655
  call void @dump_constraint_edge(%struct._IO_FILE* %32, %struct.constraint* %33), !dbg !3656
  br label %if.end32, !dbg !3656

if.end32:                                         ; preds = %if.then31, %for.body29
  br label %for.inc33, !dbg !3651

for.inc33:                                        ; preds = %if.end32
  %34 = load i32, i32* %i, align 4, !dbg !3657
  %inc34 = add i32 %34, 1, !dbg !3657
  store i32 %inc34, i32* %i, align 4, !dbg !3657
  br label %for.cond20, !dbg !3658, !llvm.loop !3659

for.end35:                                        ; preds = %cond.end25
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3661
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0)), !dbg !3662
  br label %return, !dbg !3663

return:                                           ; preds = %for.end35, %if.then
  ret void, !dbg !3663
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_solution_for_var(i32 %var) #0 !dbg !3664 {
entry:
  %var.addr = alloca i32, align 4
  store i32 %var, i32* %var.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %var.addr, metadata !3667, metadata !DIExpression()), !dbg !3668
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !3669
  %1 = load i32, i32* %var.addr, align 4, !dbg !3670
  call void @dump_solution_for_var(%struct._IO_FILE* %0, i32 %1), !dbg !3671
  ret void, !dbg !3672
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_solution_for_var(%struct._IO_FILE* %file, i32 %var) #0 !dbg !3673 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %var.addr = alloca i32, align 4
  %vi = alloca %struct.variable_info*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %vipt = alloca %struct.variable_info*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3676, metadata !DIExpression()), !dbg !3677
  store i32 %var, i32* %var.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %var.addr, metadata !3678, metadata !DIExpression()), !dbg !3679
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !3680, metadata !DIExpression()), !dbg !3681
  %0 = load i32, i32* %var.addr, align 4, !dbg !3682
  %call = call %struct.variable_info* @get_varinfo(i32 %0), !dbg !3683
  store %struct.variable_info* %call, %struct.variable_info** %vi, align 8, !dbg !3681
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3684, metadata !DIExpression()), !dbg !3685
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3686, metadata !DIExpression()), !dbg !3694
  %1 = load i32, i32* %var.addr, align 4, !dbg !3695
  %call1 = call i32 @find(i32 %1), !dbg !3697
  %2 = load i32, i32* %var.addr, align 4, !dbg !3698
  %cmp = icmp ne i32 %call1, %2, !dbg !3699
  br i1 %cmp, label %if.then, label %if.else, !dbg !3700

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vipt, metadata !3701, metadata !DIExpression()), !dbg !3703
  %3 = load i32, i32* %var.addr, align 4, !dbg !3704
  %call2 = call i32 @find(i32 %3), !dbg !3705
  %call3 = call %struct.variable_info* @get_varinfo(i32 %call2), !dbg !3706
  store %struct.variable_info* %call3, %struct.variable_info** %vipt, align 8, !dbg !3703
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3707
  %5 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !3708
  %name = getelementptr inbounds %struct.variable_info, %struct.variable_info* %5, i32 0, i32 6, !dbg !3709
  %6 = load i8*, i8** %name, align 8, !dbg !3709
  %7 = load %struct.variable_info*, %struct.variable_info** %vipt, align 8, !dbg !3710
  %name4 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %7, i32 0, i32 6, !dbg !3711
  %8 = load i8*, i8** %name4, align 8, !dbg !3711
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.30, i64 0, i64 0), i8* %6, i8* %8), !dbg !3712
  br label %if.end, !dbg !3713

if.else:                                          ; preds = %entry
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3714
  %10 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !3716
  %name6 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %10, i32 0, i32 6, !dbg !3717
  %11 = load i8*, i8** %name6, align 8, !dbg !3717
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i64 0, i64 0), i8* %11), !dbg !3718
  %12 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !3719
  %solution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %12, i32 0, i32 8, !dbg !3719
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution, align 8, !dbg !3719
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %13, i32 0, i32* %i), !dbg !3719
  br label %for.cond, !dbg !3719

for.cond:                                         ; preds = %for.inc, %if.else
  %call8 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3721
  %tobool = icmp ne i8 %call8, 0, !dbg !3719
  br i1 %tobool, label %for.body, label %for.end, !dbg !3719

for.body:                                         ; preds = %for.cond
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3723
  %15 = load i32, i32* %i, align 4, !dbg !3725
  %call9 = call %struct.variable_info* @get_varinfo(i32 %15), !dbg !3726
  %name10 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call9, i32 0, i32 6, !dbg !3727
  %16 = load i8*, i8** %name10, align 8, !dbg !3727
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i8* %16), !dbg !3728
  br label %for.inc, !dbg !3729

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3721
  br label %for.cond, !dbg !3721, !llvm.loop !3730

for.end:                                          ; preds = %for.cond
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3732
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)), !dbg !3733
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret void, !dbg !3734
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_pta_stats(%struct._IO_FILE* %s) #0 !dbg !3735 {
entry:
  %s.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %s, %struct._IO_FILE** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %s.addr, metadata !3736, metadata !DIExpression()), !dbg !3737
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %s.addr, align 8, !dbg !3738
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0)), !dbg !3739
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %s.addr, align 8, !dbg !3740
  %2 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 1), align 8, !dbg !3741
  %3 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 1), align 8, !dbg !3742
  %4 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 0), align 8, !dbg !3743
  %add = add i64 %3, %4, !dbg !3744
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i64 %2, i64 %add), !dbg !3745
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %s.addr, align 8, !dbg !3746
  %6 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 3), align 8, !dbg !3747
  %7 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 3), align 8, !dbg !3748
  %8 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 2), align 8, !dbg !3749
  %add2 = add i64 %7, %8, !dbg !3750
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0), i64 %6, i64 %add2), !dbg !3751
  ret void, !dbg !3752
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @pt_solution_reset(%struct.pt_solution* %pt) #0 !dbg !3753 {
entry:
  %pt.addr = alloca %struct.pt_solution*, align 8
  store %struct.pt_solution* %pt, %struct.pt_solution** %pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt.addr, metadata !3757, metadata !DIExpression()), !dbg !3758
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !3759
  %1 = bitcast %struct.pt_solution* %0 to i8*, !dbg !3760
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 16, i1 false), !dbg !3760
  %2 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !3761
  %3 = bitcast %struct.pt_solution* %2 to i8*, !dbg !3762
  %bf.load = load i8, i8* %3, align 8, !dbg !3763
  %bf.clear = and i8 %bf.load, -2, !dbg !3763
  %bf.set = or i8 %bf.clear, 1, !dbg !3763
  store i8 %bf.set, i8* %3, align 8, !dbg !3763
  ret void, !dbg !3764
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @pt_solution_set(%struct.pt_solution* %pt, %struct.bitmap_head_def* %vars) #0 !dbg !3765 {
entry:
  %pt.addr = alloca %struct.pt_solution*, align 8
  %vars.addr = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  store %struct.pt_solution* %pt, %struct.pt_solution** %pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt.addr, metadata !3768, metadata !DIExpression()), !dbg !3769
  store %struct.bitmap_head_def* %vars, %struct.bitmap_head_def** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %vars.addr, metadata !3770, metadata !DIExpression()), !dbg !3771
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3772, metadata !DIExpression()), !dbg !3773
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3774, metadata !DIExpression()), !dbg !3775
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !3776
  %1 = bitcast %struct.pt_solution* %0 to i8*, !dbg !3777
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 16, i1 false), !dbg !3777
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars.addr, align 8, !dbg !3778
  %3 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !3779
  %vars1 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %3, i32 0, i32 1, !dbg !3780
  store %struct.bitmap_head_def* %2, %struct.bitmap_head_def** %vars1, align 8, !dbg !3781
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars.addr, align 8, !dbg !3782
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %4, i32 0, i32* %i), !dbg !3782
  br label %for.cond, !dbg !3782

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3784
  %tobool = icmp ne i8 %call, 0, !dbg !3782
  br i1 %tobool, label %for.body, label %for.end, !dbg !3782

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !3786, metadata !DIExpression()), !dbg !3788
  %5 = load i32, i32* %i, align 4, !dbg !3789
  %call2 = call %union.tree_node* @referenced_var_lookup(i32 %5), !dbg !3790
  store %union.tree_node* %call2, %union.tree_node** %var, align 8, !dbg !3788
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3791
  %call3 = call zeroext i8 @is_global_var(%union.tree_node* %6), !dbg !3793
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3793
  br i1 %tobool4, label %if.then, label %if.end, !dbg !3794

if.then:                                          ; preds = %for.body
  %7 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !3795
  %8 = bitcast %struct.pt_solution* %7 to i8*, !dbg !3797
  %bf.load = load i8, i8* %8, align 8, !dbg !3798
  %bf.clear = and i8 %bf.load, -17, !dbg !3798
  %bf.set = or i8 %bf.clear, 16, !dbg !3798
  store i8 %bf.set, i8* %8, align 8, !dbg !3798
  br label %for.end, !dbg !3799

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3800

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3784
  br label %for.cond, !dbg !3784, !llvm.loop !3801

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !3803
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !3804 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3811, metadata !DIExpression()), !dbg !3812
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !3813, metadata !DIExpression()), !dbg !3814
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !3815, metadata !DIExpression()), !dbg !3816
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3817, metadata !DIExpression()), !dbg !3818
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !3819
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !3820
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3820
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3821
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !3822
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !3823
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3824
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !3825
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !3826
  br label %while.body, !dbg !3827

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3828
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !3831
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !3831
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !3828
  br i1 %tobool, label %if.end, label %if.then, !dbg !3832

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3833
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !3835
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !3836
  br label %while.end, !dbg !3837

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3838
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !3840
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !3840
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !3841
  %9 = load i32, i32* %indx, align 8, !dbg !3841
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !3842
  %div = udiv i32 %10, 128, !dbg !3843
  %cmp = icmp uge i32 %9, %div, !dbg !3844
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !3845

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !3846

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3847
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !3848
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !3848
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !3849
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !3849
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3850
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !3851
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !3852
  br label %while.body, !dbg !3827, !llvm.loop !3853

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3855
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !3857
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !3857
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !3858
  %17 = load i32, i32* %indx9, align 8, !dbg !3858
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !3859
  %div10 = udiv i32 %18, 128, !dbg !3860
  %cmp11 = icmp ne i32 %17, %div10, !dbg !3861
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !3862

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3863
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !3864
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !3864
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !3865
  %21 = load i32, i32* %indx14, align 8, !dbg !3865
  %mul = mul i32 %21, 128, !dbg !3866
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !3867
  br label %if.end15, !dbg !3868

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !3869
  %div16 = udiv i32 %22, 64, !dbg !3870
  %rem = urem i32 %div16, 2, !dbg !3871
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3872
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !3873
  store i32 %rem, i32* %word_no, align 8, !dbg !3874
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3875
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !3876
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !3876
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !3877
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3878
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !3879
  %27 = load i32, i32* %word_no18, align 8, !dbg !3879
  %idxprom = zext i32 %27 to i64, !dbg !3875
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !3875
  %28 = load i64, i64* %arrayidx, align 8, !dbg !3875
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3880
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !3881
  store i64 %28, i64* %bits19, align 8, !dbg !3882
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !3883
  %rem20 = urem i32 %30, 64, !dbg !3884
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3885
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !3886
  %32 = load i64, i64* %bits21, align 8, !dbg !3887
  %sh_prom = zext i32 %rem20 to i64, !dbg !3887
  %shr = lshr i64 %32, %sh_prom, !dbg !3887
  store i64 %shr, i64* %bits21, align 8, !dbg !3887
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3888
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !3889
  %34 = load i64, i64* %bits22, align 8, !dbg !3889
  %tobool23 = icmp ne i64 %34, 0, !dbg !3890
  %lnot = xor i1 %tobool23, true, !dbg !3890
  %lnot.ext = zext i1 %lnot to i32, !dbg !3890
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !3891
  %add = add i32 %35, %lnot.ext, !dbg !3891
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !3891
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !3892
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !3893
  store i32 %36, i32* %37, align 4, !dbg !3894
  ret void, !dbg !3895
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !3896 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3899, metadata !DIExpression()), !dbg !3900
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3901, metadata !DIExpression()), !dbg !3902
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3903
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !3905
  %1 = load i64, i64* %bits, align 8, !dbg !3905
  %tobool = icmp ne i64 %1, 0, !dbg !3903
  br i1 %tobool, label %if.then, label %if.end, !dbg !3906

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !3907

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !3908), !dbg !3910
  br label %while.cond, !dbg !3911

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3912
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !3913
  %3 = load i64, i64* %bits1, align 8, !dbg !3913
  %and = and i64 %3, 1, !dbg !3914
  %tobool2 = icmp ne i64 %and, 0, !dbg !3915
  %lnot = xor i1 %tobool2, true, !dbg !3915
  br i1 %lnot, label %while.body, label %while.end, !dbg !3911

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3916
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !3918
  %5 = load i64, i64* %bits3, align 8, !dbg !3919
  %shr = lshr i64 %5, 1, !dbg !3919
  store i64 %shr, i64* %bits3, align 8, !dbg !3919
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !3920
  %7 = load i32, i32* %6, align 4, !dbg !3921
  %add = add i32 %7, 1, !dbg !3921
  store i32 %add, i32* %6, align 4, !dbg !3921
  br label %while.cond, !dbg !3911, !llvm.loop !3922

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !3924
  br label %return, !dbg !3924

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !3925
  %9 = load i32, i32* %8, align 4, !dbg !3926
  %add4 = add i32 %9, 64, !dbg !3927
  %sub = sub i32 %add4, 1, !dbg !3928
  %div = udiv i32 %sub, 64, !dbg !3929
  %mul = mul i32 %div, 64, !dbg !3930
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !3931
  store i32 %mul, i32* %10, align 4, !dbg !3932
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3933
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !3934
  %12 = load i32, i32* %word_no, align 8, !dbg !3935
  %inc = add i32 %12, 1, !dbg !3935
  store i32 %inc, i32* %word_no, align 8, !dbg !3935
  br label %while.body6, !dbg !3936

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !3937

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3939
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !3940
  %14 = load i32, i32* %word_no8, align 8, !dbg !3940
  %cmp = icmp ne i32 %14, 2, !dbg !3941
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !3937

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3942
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !3944
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !3944
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !3945
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3946
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !3947
  %18 = load i32, i32* %word_no11, align 8, !dbg !3947
  %idxprom = zext i32 %18 to i64, !dbg !3942
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !3942
  %19 = load i64, i64* %arrayidx, align 8, !dbg !3942
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3948
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !3949
  store i64 %19, i64* %bits12, align 8, !dbg !3950
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3951
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !3953
  %22 = load i64, i64* %bits13, align 8, !dbg !3953
  %tobool14 = icmp ne i64 %22, 0, !dbg !3951
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !3954

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !3955

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !3956
  %24 = load i32, i32* %23, align 4, !dbg !3957
  %add17 = add i32 %24, 64, !dbg !3957
  store i32 %add17, i32* %23, align 4, !dbg !3957
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3958
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !3959
  %26 = load i32, i32* %word_no18, align 8, !dbg !3960
  %inc19 = add i32 %26, 1, !dbg !3960
  store i32 %inc19, i32* %word_no18, align 8, !dbg !3960
  br label %while.cond7, !dbg !3937, !llvm.loop !3961

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3963
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !3964
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !3964
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !3965
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !3965
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3966
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !3967
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !3968
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3969
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !3971
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !3971
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !3969
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3972

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !3973
  br label %return, !dbg !3973

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3974
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !3975
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !3975
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !3976
  %35 = load i32, i32* %indx, align 8, !dbg !3976
  %mul28 = mul i32 %35, 128, !dbg !3977
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !3978
  store i32 %mul28, i32* %36, align 4, !dbg !3979
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3980
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !3981
  store i32 0, i32* %word_no29, align 8, !dbg !3982
  br label %while.body6, !dbg !3936, !llvm.loop !3983

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !3985
  ret i8 %38, !dbg !3985
}

declare dso_local %union.tree_node* @referenced_var_lookup(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_global_var(%union.tree_node* %t) #0 !dbg !3986 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3991, metadata !DIExpression()), !dbg !3992
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3993
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3993
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3993
  %bf.load = load i64, i64* %1, align 8, !dbg !3993
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !3993
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3993
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3993
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3993
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !3994

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3995
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !3995
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3995
  %3 = bitcast i40* %decl_flag_1 to i64*, !dbg !3995
  %bf.load1 = load i64, i64* %3, align 8, !dbg !3995
  %bf.lshr2 = lshr i64 %bf.load1, 25, !dbg !3995
  %bf.clear3 = and i64 %bf.lshr2, 1, !dbg !3995
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3995
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !3994
  br label %lor.end, !dbg !3994

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool5, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !3994
  %conv = trunc i32 %lor.ext to i8, !dbg !3996
  ret i8 %conv, !dbg !3997
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !3998 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4001, metadata !DIExpression()), !dbg !4002
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4003, metadata !DIExpression()), !dbg !4004
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4005
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4006
  %1 = load i64, i64* %bits, align 8, !dbg !4007
  %shr = lshr i64 %1, 1, !dbg !4007
  store i64 %shr, i64* %bits, align 8, !dbg !4007
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !4008
  %3 = load i32, i32* %2, align 4, !dbg !4009
  %add = add i32 %3, 1, !dbg !4009
  store i32 %add, i32* %2, align 4, !dbg !4009
  ret void, !dbg !4010
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @pt_solution_includes_global(%struct.pt_solution* %pt) #0 !dbg !4011 {
entry:
  %retval = alloca i8, align 1
  %pt.addr = alloca %struct.pt_solution*, align 8
  store %struct.pt_solution* %pt, %struct.pt_solution** %pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt.addr, metadata !4014, metadata !DIExpression()), !dbg !4015
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4016
  %1 = bitcast %struct.pt_solution* %0 to i8*, !dbg !4018
  %bf.load = load i8, i8* %1, align 8, !dbg !4018
  %bf.clear = and i8 %bf.load, 1, !dbg !4018
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4018
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4016
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4019

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4020
  %3 = bitcast %struct.pt_solution* %2 to i8*, !dbg !4021
  %bf.load1 = load i8, i8* %3, align 8, !dbg !4021
  %bf.lshr = lshr i8 %bf.load1, 1, !dbg !4021
  %bf.clear2 = and i8 %bf.lshr, 1, !dbg !4021
  %bf.cast3 = zext i8 %bf.clear2 to i32, !dbg !4021
  %tobool4 = icmp ne i32 %bf.cast3, 0, !dbg !4020
  br i1 %tobool4, label %if.then, label %lor.lhs.false5, !dbg !4022

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %4 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4023
  %5 = bitcast %struct.pt_solution* %4 to i8*, !dbg !4024
  %bf.load6 = load i8, i8* %5, align 8, !dbg !4024
  %bf.lshr7 = lshr i8 %bf.load6, 4, !dbg !4024
  %bf.clear8 = and i8 %bf.lshr7, 1, !dbg !4024
  %bf.cast9 = zext i8 %bf.clear8 to i32, !dbg !4024
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !4023
  br i1 %tobool10, label %if.then, label %if.end, !dbg !4025

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !4026
  br label %return, !dbg !4026

if.end:                                           ; preds = %lor.lhs.false5
  %6 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4027
  %7 = bitcast %struct.pt_solution* %6 to i8*, !dbg !4029
  %bf.load11 = load i8, i8* %7, align 8, !dbg !4029
  %bf.lshr12 = lshr i8 %bf.load11, 2, !dbg !4029
  %bf.clear13 = and i8 %bf.lshr12, 1, !dbg !4029
  %bf.cast14 = zext i8 %bf.clear13 to i32, !dbg !4029
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !4027
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !4030

if.then16:                                        ; preds = %if.end
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4031
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4031
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4032
  %9 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4032
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %9, i32 0, i32 4, !dbg !4033
  %call = call zeroext i8 @pt_solution_includes_global(%struct.pt_solution* %escaped), !dbg !4034
  store i8 %call, i8* %retval, align 1, !dbg !4035
  br label %return, !dbg !4035

if.end17:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4036
  br label %return, !dbg !4036

return:                                           ; preds = %if.end17, %if.then16, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !4037
  ret i8 %10, !dbg !4037
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @pt_solution_includes(%struct.pt_solution* %pt, %union.tree_node* %decl) #0 !dbg !4038 {
entry:
  %pt.addr = alloca %struct.pt_solution*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %res = alloca i8, align 1
  store %struct.pt_solution* %pt, %struct.pt_solution** %pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt.addr, metadata !4041, metadata !DIExpression()), !dbg !4042
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4043, metadata !DIExpression()), !dbg !4044
  call void @llvm.dbg.declare(metadata i8* %res, metadata !4045, metadata !DIExpression()), !dbg !4046
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4047
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4048
  %call = call zeroext i8 @pt_solution_includes_1(%struct.pt_solution* %0, %union.tree_node* %1), !dbg !4049
  store i8 %call, i8* %res, align 1, !dbg !4046
  %2 = load i8, i8* %res, align 1, !dbg !4050
  %tobool = icmp ne i8 %2, 0, !dbg !4050
  br i1 %tobool, label %if.then, label %if.else, !dbg !4052

if.then:                                          ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 0), align 8, !dbg !4053
  %inc = add i64 %3, 1, !dbg !4053
  store i64 %inc, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 0), align 8, !dbg !4053
  br label %if.end, !dbg !4053

if.else:                                          ; preds = %entry
  %4 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 1), align 8, !dbg !4054
  %inc1 = add i64 %4, 1, !dbg !4054
  store i64 %inc1, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 1), align 8, !dbg !4054
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i8, i8* %res, align 1, !dbg !4055
  ret i8 %5, !dbg !4056
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @pt_solution_includes_1(%struct.pt_solution* %pt, %union.tree_node* %decl) #0 !dbg !4057 {
entry:
  %retval = alloca i8, align 1
  %pt.addr = alloca %struct.pt_solution*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %struct.pt_solution* %pt, %struct.pt_solution** %pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt.addr, metadata !4058, metadata !DIExpression()), !dbg !4059
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4060, metadata !DIExpression()), !dbg !4061
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4062
  %1 = bitcast %struct.pt_solution* %0 to i8*, !dbg !4064
  %bf.load = load i8, i8* %1, align 8, !dbg !4064
  %bf.clear = and i8 %bf.load, 1, !dbg !4064
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4064
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4062
  br i1 %tobool, label %if.then, label %if.end, !dbg !4065

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4066
  br label %return, !dbg !4066

if.end:                                           ; preds = %entry
  %2 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4067
  %3 = bitcast %struct.pt_solution* %2 to i8*, !dbg !4069
  %bf.load1 = load i8, i8* %3, align 8, !dbg !4069
  %bf.lshr = lshr i8 %bf.load1, 1, !dbg !4069
  %bf.clear2 = and i8 %bf.lshr, 1, !dbg !4069
  %bf.cast3 = zext i8 %bf.clear2 to i32, !dbg !4069
  %tobool4 = icmp ne i32 %bf.cast3, 0, !dbg !4067
  br i1 %tobool4, label %land.lhs.true, label %if.end7, !dbg !4070

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4071
  %call = call zeroext i8 @is_global_var(%union.tree_node* %4), !dbg !4072
  %conv = zext i8 %call to i32, !dbg !4072
  %tobool5 = icmp ne i32 %conv, 0, !dbg !4072
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !4073

if.then6:                                         ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !4074
  br label %return, !dbg !4074

if.end7:                                          ; preds = %land.lhs.true, %if.end
  %5 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4075
  %vars = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %5, i32 0, i32 1, !dbg !4077
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !4077
  %tobool8 = icmp ne %struct.bitmap_head_def* %6, null, !dbg !4075
  br i1 %tobool8, label %land.lhs.true9, label %if.end14, !dbg !4078

land.lhs.true9:                                   ; preds = %if.end7
  %7 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4079
  %vars10 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %7, i32 0, i32 1, !dbg !4080
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars10, align 8, !dbg !4080
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4081
  %decl_minimal = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !4081
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4081
  %10 = load i32, i32* %uid, align 4, !dbg !4081
  %call11 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %8, i32 %10), !dbg !4082
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4082
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !4083

if.then13:                                        ; preds = %land.lhs.true9
  store i8 1, i8* %retval, align 1, !dbg !4084
  br label %return, !dbg !4084

if.end14:                                         ; preds = %land.lhs.true9, %if.end7
  %11 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !4085
  %12 = bitcast %struct.pt_solution* %11 to i8*, !dbg !4087
  %bf.load15 = load i8, i8* %12, align 8, !dbg !4087
  %bf.lshr16 = lshr i8 %bf.load15, 2, !dbg !4087
  %bf.clear17 = and i8 %bf.lshr16, 1, !dbg !4087
  %bf.cast18 = zext i8 %bf.clear17 to i32, !dbg !4087
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !4085
  br i1 %tobool19, label %land.lhs.true20, label %if.end25, !dbg !4088

land.lhs.true20:                                  ; preds = %if.end14
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4089
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !4089
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4090
  %14 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4090
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %14, i32 0, i32 4, !dbg !4091
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4092
  %call21 = call zeroext i8 @pt_solution_includes_1(%struct.pt_solution* %escaped, %union.tree_node* %15), !dbg !4093
  %conv22 = zext i8 %call21 to i32, !dbg !4093
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !4093
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !4094

if.then24:                                        ; preds = %land.lhs.true20
  store i8 1, i8* %retval, align 1, !dbg !4095
  br label %return, !dbg !4095

if.end25:                                         ; preds = %land.lhs.true20, %if.end14
  store i8 0, i8* %retval, align 1, !dbg !4096
  br label %return, !dbg !4096

return:                                           ; preds = %if.end25, %if.then24, %if.then13, %if.then6, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !4097
  ret i8 %16, !dbg !4097
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @pt_solutions_intersect(%struct.pt_solution* %pt1, %struct.pt_solution* %pt2) #0 !dbg !4098 {
entry:
  %pt1.addr = alloca %struct.pt_solution*, align 8
  %pt2.addr = alloca %struct.pt_solution*, align 8
  %res = alloca i8, align 1
  store %struct.pt_solution* %pt1, %struct.pt_solution** %pt1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt1.addr, metadata !4101, metadata !DIExpression()), !dbg !4102
  store %struct.pt_solution* %pt2, %struct.pt_solution** %pt2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt2.addr, metadata !4103, metadata !DIExpression()), !dbg !4104
  call void @llvm.dbg.declare(metadata i8* %res, metadata !4105, metadata !DIExpression()), !dbg !4106
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4107
  %1 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4108
  %call = call zeroext i8 @pt_solutions_intersect_1(%struct.pt_solution* %0, %struct.pt_solution* %1), !dbg !4109
  store i8 %call, i8* %res, align 1, !dbg !4106
  %2 = load i8, i8* %res, align 1, !dbg !4110
  %tobool = icmp ne i8 %2, 0, !dbg !4110
  br i1 %tobool, label %if.then, label %if.else, !dbg !4112

if.then:                                          ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 2), align 8, !dbg !4113
  %inc = add i64 %3, 1, !dbg !4113
  store i64 %inc, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 2), align 8, !dbg !4113
  br label %if.end, !dbg !4113

if.else:                                          ; preds = %entry
  %4 = load i64, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 3), align 8, !dbg !4114
  %inc1 = add i64 %4, 1, !dbg !4114
  store i64 %inc1, i64* getelementptr inbounds (%struct.anon, %struct.anon* @pta_stats, i32 0, i32 3), align 8, !dbg !4114
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i8, i8* %res, align 1, !dbg !4115
  ret i8 %5, !dbg !4116
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @pt_solutions_intersect_1(%struct.pt_solution* %pt1, %struct.pt_solution* %pt2) #0 !dbg !4117 {
entry:
  %retval = alloca i8, align 1
  %pt1.addr = alloca %struct.pt_solution*, align 8
  %pt2.addr = alloca %struct.pt_solution*, align 8
  store %struct.pt_solution* %pt1, %struct.pt_solution** %pt1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt1.addr, metadata !4118, metadata !DIExpression()), !dbg !4119
  store %struct.pt_solution* %pt2, %struct.pt_solution** %pt2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt2.addr, metadata !4120, metadata !DIExpression()), !dbg !4121
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4122
  %1 = bitcast %struct.pt_solution* %0 to i8*, !dbg !4124
  %bf.load = load i8, i8* %1, align 8, !dbg !4124
  %bf.clear = and i8 %bf.load, 1, !dbg !4124
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4124
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4122
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4125

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4126
  %3 = bitcast %struct.pt_solution* %2 to i8*, !dbg !4127
  %bf.load1 = load i8, i8* %3, align 8, !dbg !4127
  %bf.clear2 = and i8 %bf.load1, 1, !dbg !4127
  %bf.cast3 = zext i8 %bf.clear2 to i32, !dbg !4127
  %tobool4 = icmp ne i32 %bf.cast3, 0, !dbg !4126
  br i1 %tobool4, label %if.then, label %if.end, !dbg !4128

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !4129
  br label %return, !dbg !4129

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4130
  %5 = bitcast %struct.pt_solution* %4 to i8*, !dbg !4132
  %bf.load5 = load i8, i8* %5, align 8, !dbg !4132
  %bf.lshr = lshr i8 %bf.load5, 1, !dbg !4132
  %bf.clear6 = and i8 %bf.lshr, 1, !dbg !4132
  %bf.cast7 = zext i8 %bf.clear6 to i32, !dbg !4132
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !4130
  br i1 %tobool8, label %land.lhs.true, label %lor.lhs.false20, !dbg !4133

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4134
  %7 = bitcast %struct.pt_solution* %6 to i8*, !dbg !4135
  %bf.load9 = load i8, i8* %7, align 8, !dbg !4135
  %bf.lshr10 = lshr i8 %bf.load9, 1, !dbg !4135
  %bf.clear11 = and i8 %bf.lshr10, 1, !dbg !4135
  %bf.cast12 = zext i8 %bf.clear11 to i32, !dbg !4135
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !4134
  br i1 %tobool13, label %if.then32, label %lor.lhs.false14, !dbg !4136

lor.lhs.false14:                                  ; preds = %land.lhs.true
  %8 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4137
  %9 = bitcast %struct.pt_solution* %8 to i8*, !dbg !4138
  %bf.load15 = load i8, i8* %9, align 8, !dbg !4138
  %bf.lshr16 = lshr i8 %bf.load15, 4, !dbg !4138
  %bf.clear17 = and i8 %bf.lshr16, 1, !dbg !4138
  %bf.cast18 = zext i8 %bf.clear17 to i32, !dbg !4138
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !4137
  br i1 %tobool19, label %if.then32, label %lor.lhs.false20, !dbg !4139

lor.lhs.false20:                                  ; preds = %lor.lhs.false14, %if.end
  %10 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4140
  %11 = bitcast %struct.pt_solution* %10 to i8*, !dbg !4141
  %bf.load21 = load i8, i8* %11, align 8, !dbg !4141
  %bf.lshr22 = lshr i8 %bf.load21, 1, !dbg !4141
  %bf.clear23 = and i8 %bf.lshr22, 1, !dbg !4141
  %bf.cast24 = zext i8 %bf.clear23 to i32, !dbg !4141
  %tobool25 = icmp ne i32 %bf.cast24, 0, !dbg !4140
  br i1 %tobool25, label %land.lhs.true26, label %if.end33, !dbg !4142

land.lhs.true26:                                  ; preds = %lor.lhs.false20
  %12 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4143
  %13 = bitcast %struct.pt_solution* %12 to i8*, !dbg !4144
  %bf.load27 = load i8, i8* %13, align 8, !dbg !4144
  %bf.lshr28 = lshr i8 %bf.load27, 4, !dbg !4144
  %bf.clear29 = and i8 %bf.lshr28, 1, !dbg !4144
  %bf.cast30 = zext i8 %bf.clear29 to i32, !dbg !4144
  %tobool31 = icmp ne i32 %bf.cast30, 0, !dbg !4143
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !4145

if.then32:                                        ; preds = %land.lhs.true26, %lor.lhs.false14, %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !4146
  br label %return, !dbg !4146

if.end33:                                         ; preds = %land.lhs.true26, %lor.lhs.false20
  %14 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4147
  %15 = bitcast %struct.pt_solution* %14 to i8*, !dbg !4149
  %bf.load34 = load i8, i8* %15, align 8, !dbg !4149
  %bf.lshr35 = lshr i8 %bf.load34, 2, !dbg !4149
  %bf.clear36 = and i8 %bf.lshr35, 1, !dbg !4149
  %bf.cast37 = zext i8 %bf.clear36 to i32, !dbg !4149
  %tobool38 = icmp ne i32 %bf.cast37, 0, !dbg !4147
  br i1 %tobool38, label %land.lhs.true45, label %lor.lhs.false39, !dbg !4150

lor.lhs.false39:                                  ; preds = %if.end33
  %16 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4151
  %17 = bitcast %struct.pt_solution* %16 to i8*, !dbg !4152
  %bf.load40 = load i8, i8* %17, align 8, !dbg !4152
  %bf.lshr41 = lshr i8 %bf.load40, 2, !dbg !4152
  %bf.clear42 = and i8 %bf.lshr41, 1, !dbg !4152
  %bf.cast43 = zext i8 %bf.clear42 to i32, !dbg !4152
  %tobool44 = icmp ne i32 %bf.cast43, 0, !dbg !4151
  br i1 %tobool44, label %land.lhs.true45, label %if.end87, !dbg !4153

land.lhs.true45:                                  ; preds = %lor.lhs.false39, %if.end33
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4154
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !4154
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4155
  %19 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4155
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %19, i32 0, i32 4, !dbg !4156
  %call = call zeroext i8 @pt_solution_empty_p(%struct.pt_solution* %escaped), !dbg !4157
  %tobool46 = icmp ne i8 %call, 0, !dbg !4157
  br i1 %tobool46, label %if.end87, label %if.then47, !dbg !4158

if.then47:                                        ; preds = %land.lhs.true45
  %20 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4159
  %21 = bitcast %struct.pt_solution* %20 to i8*, !dbg !4162
  %bf.load48 = load i8, i8* %21, align 8, !dbg !4162
  %bf.lshr49 = lshr i8 %bf.load48, 2, !dbg !4162
  %bf.clear50 = and i8 %bf.lshr49, 1, !dbg !4162
  %bf.cast51 = zext i8 %bf.clear50 to i32, !dbg !4162
  %tobool52 = icmp ne i32 %bf.cast51, 0, !dbg !4159
  br i1 %tobool52, label %land.lhs.true53, label %if.end60, !dbg !4163

land.lhs.true53:                                  ; preds = %if.then47
  %22 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4164
  %23 = bitcast %struct.pt_solution* %22 to i8*, !dbg !4165
  %bf.load54 = load i8, i8* %23, align 8, !dbg !4165
  %bf.lshr55 = lshr i8 %bf.load54, 2, !dbg !4165
  %bf.clear56 = and i8 %bf.lshr55, 1, !dbg !4165
  %bf.cast57 = zext i8 %bf.clear56 to i32, !dbg !4165
  %tobool58 = icmp ne i32 %bf.cast57, 0, !dbg !4164
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !4166

if.then59:                                        ; preds = %land.lhs.true53
  store i8 1, i8* %retval, align 1, !dbg !4167
  br label %return, !dbg !4167

if.end60:                                         ; preds = %land.lhs.true53, %if.then47
  %24 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4168
  %25 = bitcast %struct.pt_solution* %24 to i8*, !dbg !4170
  %bf.load61 = load i8, i8* %25, align 8, !dbg !4170
  %bf.lshr62 = lshr i8 %bf.load61, 2, !dbg !4170
  %bf.clear63 = and i8 %bf.lshr62, 1, !dbg !4170
  %bf.cast64 = zext i8 %bf.clear63 to i32, !dbg !4170
  %tobool65 = icmp ne i32 %bf.cast64, 0, !dbg !4168
  br i1 %tobool65, label %land.lhs.true66, label %lor.lhs.false72, !dbg !4171

land.lhs.true66:                                  ; preds = %if.end60
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4172
  %add.ptr67 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !4172
  %gimple_df68 = getelementptr inbounds %struct.function, %struct.function* %add.ptr67, i32 0, i32 3, !dbg !4173
  %27 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df68, align 8, !dbg !4173
  %escaped69 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %27, i32 0, i32 4, !dbg !4174
  %28 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4175
  %call70 = call zeroext i8 @pt_solutions_intersect_1(%struct.pt_solution* %escaped69, %struct.pt_solution* %28), !dbg !4176
  %conv = zext i8 %call70 to i32, !dbg !4176
  %tobool71 = icmp ne i32 %conv, 0, !dbg !4176
  br i1 %tobool71, label %if.then85, label %lor.lhs.false72, !dbg !4177

lor.lhs.false72:                                  ; preds = %land.lhs.true66, %if.end60
  %29 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4178
  %30 = bitcast %struct.pt_solution* %29 to i8*, !dbg !4179
  %bf.load73 = load i8, i8* %30, align 8, !dbg !4179
  %bf.lshr74 = lshr i8 %bf.load73, 2, !dbg !4179
  %bf.clear75 = and i8 %bf.lshr74, 1, !dbg !4179
  %bf.cast76 = zext i8 %bf.clear75 to i32, !dbg !4179
  %tobool77 = icmp ne i32 %bf.cast76, 0, !dbg !4178
  br i1 %tobool77, label %land.lhs.true78, label %if.end86, !dbg !4180

land.lhs.true78:                                  ; preds = %lor.lhs.false72
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4181
  %add.ptr79 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !4181
  %gimple_df80 = getelementptr inbounds %struct.function, %struct.function* %add.ptr79, i32 0, i32 3, !dbg !4182
  %32 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df80, align 8, !dbg !4182
  %escaped81 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %32, i32 0, i32 4, !dbg !4183
  %33 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4184
  %call82 = call zeroext i8 @pt_solutions_intersect_1(%struct.pt_solution* %escaped81, %struct.pt_solution* %33), !dbg !4185
  %conv83 = zext i8 %call82 to i32, !dbg !4185
  %tobool84 = icmp ne i32 %conv83, 0, !dbg !4185
  br i1 %tobool84, label %if.then85, label %if.end86, !dbg !4186

if.then85:                                        ; preds = %land.lhs.true78, %land.lhs.true66
  store i8 1, i8* %retval, align 1, !dbg !4187
  br label %return, !dbg !4187

if.end86:                                         ; preds = %land.lhs.true78, %lor.lhs.false72
  br label %if.end87, !dbg !4188

if.end87:                                         ; preds = %if.end86, %land.lhs.true45, %lor.lhs.false39
  %34 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4189
  %vars = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %34, i32 0, i32 1, !dbg !4190
  %35 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !4190
  %tobool88 = icmp ne %struct.bitmap_head_def* %35, null, !dbg !4189
  br i1 %tobool88, label %land.lhs.true89, label %land.end, !dbg !4191

land.lhs.true89:                                  ; preds = %if.end87
  %36 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4192
  %vars90 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %36, i32 0, i32 1, !dbg !4193
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars90, align 8, !dbg !4193
  %tobool91 = icmp ne %struct.bitmap_head_def* %37, null, !dbg !4192
  br i1 %tobool91, label %land.rhs, label %land.end, !dbg !4194

land.rhs:                                         ; preds = %land.lhs.true89
  %38 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4195
  %vars92 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %38, i32 0, i32 1, !dbg !4196
  %39 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars92, align 8, !dbg !4196
  %40 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4197
  %vars93 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %40, i32 0, i32 1, !dbg !4198
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars93, align 8, !dbg !4198
  %call94 = call zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def* %39, %struct.bitmap_head_def* %41), !dbg !4199
  %conv95 = zext i8 %call94 to i32, !dbg !4199
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !4194
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true89, %if.end87
  %42 = phi i1 [ false, %land.lhs.true89 ], [ false, %if.end87 ], [ %tobool96, %land.rhs ], !dbg !4200
  %land.ext = zext i1 %42 to i32, !dbg !4194
  %conv97 = trunc i32 %land.ext to i8, !dbg !4201
  store i8 %conv97, i8* %retval, align 1, !dbg !4202
  br label %return, !dbg !4202

return:                                           ; preds = %land.end, %if.then85, %if.then59, %if.then32, %if.then
  %43 = load i8, i8* %retval, align 1, !dbg !4203
  ret i8 %43, !dbg !4203
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @pt_solutions_same_restrict_base(%struct.pt_solution* %pt1, %struct.pt_solution* %pt2) #0 !dbg !4204 {
entry:
  %retval = alloca i8, align 1
  %pt1.addr = alloca %struct.pt_solution*, align 8
  %pt2.addr = alloca %struct.pt_solution*, align 8
  store %struct.pt_solution* %pt1, %struct.pt_solution** %pt1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt1.addr, metadata !4205, metadata !DIExpression()), !dbg !4206
  store %struct.pt_solution* %pt2, %struct.pt_solution** %pt2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt2.addr, metadata !4207, metadata !DIExpression()), !dbg !4208
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4209
  %1 = bitcast %struct.pt_solution* %0 to i8*, !dbg !4211
  %bf.load = load i8, i8* %1, align 8, !dbg !4211
  %bf.lshr = lshr i8 %bf.load, 5, !dbg !4211
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4211
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4211
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4209
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4212

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4213
  %3 = bitcast %struct.pt_solution* %2 to i8*, !dbg !4214
  %bf.load1 = load i8, i8* %3, align 8, !dbg !4214
  %bf.lshr2 = lshr i8 %bf.load1, 5, !dbg !4214
  %bf.clear3 = and i8 %bf.lshr2, 1, !dbg !4214
  %bf.cast4 = zext i8 %bf.clear3 to i32, !dbg !4214
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !4213
  br i1 %tobool5, label %if.then, label %if.end, !dbg !4215

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4216
  %vars = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %4, i32 0, i32 1, !dbg !4216
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !4216
  %tobool6 = icmp ne %struct.bitmap_head_def* %5, null, !dbg !4216
  br i1 %tobool6, label %land.lhs.true7, label %cond.true, !dbg !4216

land.lhs.true7:                                   ; preds = %if.then
  %6 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4216
  %vars8 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %6, i32 0, i32 1, !dbg !4216
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars8, align 8, !dbg !4216
  %tobool9 = icmp ne %struct.bitmap_head_def* %7, null, !dbg !4216
  br i1 %tobool9, label %cond.false, label %cond.true, !dbg !4216

cond.true:                                        ; preds = %land.lhs.true7, %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5087, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4216
  br label %cond.end, !dbg !4216

cond.false:                                       ; preds = %land.lhs.true7
  br label %cond.end, !dbg !4216

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4216
  %8 = load %struct.pt_solution*, %struct.pt_solution** %pt1.addr, align 8, !dbg !4218
  %vars10 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %8, i32 0, i32 1, !dbg !4219
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars10, align 8, !dbg !4219
  %10 = load %struct.pt_solution*, %struct.pt_solution** %pt2.addr, align 8, !dbg !4220
  %vars11 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %10, i32 0, i32 1, !dbg !4221
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars11, align 8, !dbg !4221
  %call = call zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def* %9, %struct.bitmap_head_def* %11), !dbg !4222
  store i8 %call, i8* %retval, align 1, !dbg !4223
  br label %return, !dbg !4223

if.end:                                           ; preds = %land.lhs.true, %entry
  store i8 1, i8* %retval, align 1, !dbg !4224
  br label %return, !dbg !4224

return:                                           ; preds = %if.end, %cond.end
  %12 = load i8, i8* %retval, align 1, !dbg !4225
  ret i8 %12, !dbg !4225
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_sa_points_to_info() #0 !dbg !4226 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4227
  call void @dump_sa_points_to_info(%struct._IO_FILE* %0), !dbg !4228
  ret void, !dbg !4229
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_sa_points_to_info(%struct._IO_FILE* %outfile) #0 !dbg !4230 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !4231, metadata !DIExpression()), !dbg !4232
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4233, metadata !DIExpression()), !dbg !4234
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4235
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i64 0, i64 0)), !dbg !4236
  %1 = load i32, i32* @dump_flags, align 4, !dbg !4237
  %and = and i32 %1, 16, !dbg !4239
  %tobool = icmp ne i32 %and, 0, !dbg !4239
  br i1 %tobool, label %if.then, label %if.end, !dbg !4240

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4241
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i64 0, i64 0)), !dbg !4243
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4244
  %4 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !4245
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.36, i64 0, i64 0), i32 %4), !dbg !4246
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4247
  %6 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 1), align 4, !dbg !4248
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.37, i64 0, i64 0), i32 %6), !dbg !4249
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4250
  %8 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 2), align 4, !dbg !4251
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i64 0, i64 0), i32 %8), !dbg !4252
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4253
  %10 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 3), align 4, !dbg !4254
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.39, i64 0, i64 0), i32 %10), !dbg !4255
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4256
  %12 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 4), align 4, !dbg !4257
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.40, i64 0, i64 0), i32 %12), !dbg !4258
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4259
  %14 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 5), align 4, !dbg !4260
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.41, i64 0, i64 0), i32 %14), !dbg !4261
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4262
  %16 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 6), align 4, !dbg !4263
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.42, i64 0, i64 0), i32 %16), !dbg !4264
  br label %if.end, !dbg !4265

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !4266
  br label %for.cond, !dbg !4268

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load i32, i32* %i, align 4, !dbg !4269
  %18 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !4271
  %tobool9 = icmp ne %struct.VEC_varinfo_t_heap* %18, null, !dbg !4271
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !4271

cond.true:                                        ; preds = %for.cond
  %19 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !4271
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %19, i32 0, i32 0, !dbg !4271
  br label %cond.end, !dbg !4271

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4271

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4271
  %call10 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !4271
  %cmp = icmp ult i32 %17, %call10, !dbg !4272
  br i1 %cmp, label %for.body, label %for.end, !dbg !4273

for.body:                                         ; preds = %cond.end
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !4274
  %21 = load i32, i32* %i, align 4, !dbg !4275
  call void @dump_solution_for_var(%struct._IO_FILE* %20, i32 %21), !dbg !4276
  br label %for.inc, !dbg !4276

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4, !dbg !4277
  %inc = add i32 %22, 1, !dbg !4277
  store i32 %inc, i32* %i, align 4, !dbg !4277
  br label %for.cond, !dbg !4278, !llvm.loop !4279

for.end:                                          ; preds = %cond.end
  ret void, !dbg !4281
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @delete_alias_heapvars() #0 !dbg !4282 {
entry:
  %0 = load %struct.htab*, %struct.htab** @heapvar_for_stmt, align 8, !dbg !4283
  %tobool = icmp ne %struct.htab* %0, null, !dbg !4283
  br i1 %tobool, label %if.then, label %if.end, !dbg !4285

if.then:                                          ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @heapvar_for_stmt, align 8, !dbg !4286
  call void @htab_delete(%struct.htab* %1), !dbg !4287
  br label %if.end, !dbg !4287

if.end:                                           ; preds = %if.then, %entry
  store %struct.htab* null, %struct.htab** @heapvar_for_stmt, align 8, !dbg !4288
  ret void, !dbg !4289
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @compute_may_aliases() #0 !dbg !4290 {
entry:
  call void @compute_points_to_sets(), !dbg !4291
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4292
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !4292
  br i1 %tobool, label %if.then, label %if.end3, !dbg !4294

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4295
  call void @dump_alias_info(%struct._IO_FILE* %1), !dbg !4297
  %2 = load i32, i32* @dump_flags, align 4, !dbg !4298
  %and = and i32 %2, 8, !dbg !4300
  %tobool1 = icmp ne i32 %and, 0, !dbg !4300
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !4301

if.then2:                                         ; preds = %if.then
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4302
  call void @dump_referenced_vars(%struct._IO_FILE* %3), !dbg !4303
  br label %if.end, !dbg !4303

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end3, !dbg !4304

if.end3:                                          ; preds = %if.end, %entry
  call void @delete_points_to_sets(), !dbg !4305
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4306
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !4306
  %call = call zeroext i8 @need_ssa_update_p(%struct.function* %add.ptr), !dbg !4306
  %tobool4 = icmp ne i8 %call, 0, !dbg !4306
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !4306

cond.true:                                        ; preds = %if.end3
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5611, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4306
  br label %cond.end, !dbg !4306

cond.false:                                       ; preds = %if.end3
  br label %cond.end, !dbg !4306

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4306
  ret i32 0, !dbg !4307
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_points_to_sets() #0 !dbg !4308 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %vi = alloca %struct.variable_info*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %tmp12 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %ptr = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4309, metadata !DIExpression()), !dbg !4310
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4311, metadata !DIExpression()), !dbg !4312
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !4313, metadata !DIExpression()), !dbg !4314
  br label %do.body, !dbg !4315

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !4316
  %tobool = icmp ne i8 %0, 0, !dbg !4316
  br i1 %tobool, label %if.then, label %if.end, !dbg !4319

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 56), !dbg !4316
  br label %if.end, !dbg !4316

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !4319

do.end:                                           ; preds = %if.end
  call void @init_alias_vars(), !dbg !4320
  call void @init_alias_heapvars(), !dbg !4321
  call void @intra_create_variable_infos(), !dbg !4322
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4323
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !4323
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4323
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4323
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !4323
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4323
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 6, !dbg !4323
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4323
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !4323
  br label %for.cond, !dbg !4323

for.cond:                                         ; preds = %for.inc21, %do.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4325
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4325
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !4325
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4325
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4325
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !4325
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4325
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !4325
  br i1 %cmp, label %for.body, label %for.end23, !dbg !4323

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4327, metadata !DIExpression()), !dbg !4335
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4336
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %9), !dbg !4338
  %10 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4338
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4338
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !4338
  br label %for.cond3, !dbg !4339

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4340
  %tobool4 = icmp ne i8 %call, 0, !dbg !4342
  %lnot = xor i1 %tobool4, true, !dbg !4342
  br i1 %lnot, label %for.body5, label %for.end, !dbg !4343

for.body5:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4344, metadata !DIExpression()), !dbg !4346
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4347
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %phi, align 8, !dbg !4346
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4348
  %call7 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %12), !dbg !4350
  %call8 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call7), !dbg !4351
  %tobool9 = icmp ne i8 %call8, 0, !dbg !4351
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !4352

if.then10:                                        ; preds = %for.body5
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4353
  call void @find_func_aliases(%union.gimple_statement_d* %13), !dbg !4354
  br label %if.end11, !dbg !4354

if.end11:                                         ; preds = %if.then10, %for.body5
  br label %for.inc, !dbg !4355

for.inc:                                          ; preds = %if.end11
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4356
  br label %for.cond3, !dbg !4357, !llvm.loop !4358

for.end:                                          ; preds = %for.cond3
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4360
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp12, %struct.basic_block_def* %14), !dbg !4362
  %15 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4362
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp12 to i8*, !dbg !4362
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !4362
  br label %for.cond13, !dbg !4363

for.cond13:                                       ; preds = %for.inc19, %for.end
  %call14 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4364
  %tobool15 = icmp ne i8 %call14, 0, !dbg !4366
  %lnot16 = xor i1 %tobool15, true, !dbg !4366
  br i1 %lnot16, label %for.body17, label %for.end20, !dbg !4367

for.body17:                                       ; preds = %for.cond13
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4368, metadata !DIExpression()), !dbg !4370
  %call18 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4371
  store %union.gimple_statement_d* %call18, %union.gimple_statement_d** %stmt, align 8, !dbg !4370
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4372
  call void @find_func_aliases(%union.gimple_statement_d* %17), !dbg !4373
  br label %for.inc19, !dbg !4374

for.inc19:                                        ; preds = %for.body17
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4375
  br label %for.cond13, !dbg !4376, !llvm.loop !4377

for.end20:                                        ; preds = %for.cond13
  br label %for.inc21, !dbg !4379

for.inc21:                                        ; preds = %for.end20
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4325
  %next_bb22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 6, !dbg !4325
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb22, align 8, !dbg !4325
  store %struct.basic_block_def* %19, %struct.basic_block_def** %bb, align 8, !dbg !4325
  br label %for.cond, !dbg !4325, !llvm.loop !4380

for.end23:                                        ; preds = %for.cond
  call void @solve_constraints(), !dbg !4382
  %call24 = call %struct.variable_info* @get_varinfo(i32 3), !dbg !4383
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4384
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !4384
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 3, !dbg !4385
  %21 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4385
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %21, i32 0, i32 4, !dbg !4386
  call void @find_what_var_points_to(%struct.variable_info* %call24, %struct.pt_solution* %escaped), !dbg !4387
  %call26 = call %struct.variable_info* @get_varinfo(i32 5), !dbg !4388
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4389
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !4389
  %gimple_df28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 3, !dbg !4390
  %23 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df28, align 8, !dbg !4390
  %callused = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %23, i32 0, i32 5, !dbg !4391
  call void @find_what_var_points_to(%struct.variable_info* %call26, %struct.pt_solution* %callused), !dbg !4392
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4393
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !4393
  %gimple_df30 = getelementptr inbounds %struct.function, %struct.function* %add.ptr29, i32 0, i32 3, !dbg !4394
  %25 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df30, align 8, !dbg !4394
  %escaped31 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %25, i32 0, i32 4, !dbg !4395
  %26 = bitcast %struct.pt_solution* %escaped31 to i8*, !dbg !4396
  %bf.load = load i8, i8* %26, align 8, !dbg !4397
  %bf.clear = and i8 %bf.load, -5, !dbg !4397
  store i8 %bf.clear, i8* %26, align 8, !dbg !4397
  store i32 0, i32* %i, align 4, !dbg !4398
  br label %for.cond32, !dbg !4400

for.cond32:                                       ; preds = %for.inc66, %for.end23
  %27 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !4401
  %tobool33 = icmp ne %struct.VEC_varinfo_t_heap* %27, null, !dbg !4401
  br i1 %tobool33, label %cond.true, label %cond.false, !dbg !4401

cond.true:                                        ; preds = %for.cond32
  %28 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !4401
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %28, i32 0, i32 0, !dbg !4401
  br label %cond.end, !dbg !4401

cond.false:                                       ; preds = %for.cond32
  br label %cond.end, !dbg !4401

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4401
  %29 = load i32, i32* %i, align 4, !dbg !4401
  %call34 = call i32 @VEC_varinfo_t_base_iterate(%struct.VEC_varinfo_t_base* %cond, i32 %29, %struct.variable_info** %vi), !dbg !4401
  %tobool35 = icmp ne i32 %call34, 0, !dbg !4403
  br i1 %tobool35, label %for.body36, label %for.end67, !dbg !4403

for.body36:                                       ; preds = %cond.end
  %30 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !4404
  %is_heap_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %30, i32 0, i32 1, !dbg !4406
  %bf.load37 = load i8, i8* %is_heap_var, align 4, !dbg !4406
  %bf.lshr = lshr i8 %bf.load37, 4, !dbg !4406
  %bf.clear38 = and i8 %bf.lshr, 1, !dbg !4406
  %bf.cast = zext i8 %bf.clear38 to i32, !dbg !4406
  %tobool39 = icmp ne i32 %bf.cast, 0, !dbg !4404
  br i1 %tobool39, label %land.lhs.true, label %if.end65, !dbg !4407

land.lhs.true:                                    ; preds = %for.body36
  %31 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !4408
  %is_restrict_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %31, i32 0, i32 1, !dbg !4409
  %bf.load40 = load i8, i8* %is_restrict_var, align 4, !dbg !4409
  %bf.lshr41 = lshr i8 %bf.load40, 5, !dbg !4409
  %bf.clear42 = and i8 %bf.lshr41, 1, !dbg !4409
  %bf.cast43 = zext i8 %bf.clear42 to i32, !dbg !4409
  %tobool44 = icmp ne i32 %bf.cast43, 0, !dbg !4408
  br i1 %tobool44, label %if.end65, label %land.lhs.true45, !dbg !4410

land.lhs.true45:                                  ; preds = %land.lhs.true
  %32 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !4411
  %is_global_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %32, i32 0, i32 1, !dbg !4412
  %bf.load46 = load i8, i8* %is_global_var, align 4, !dbg !4412
  %bf.lshr47 = lshr i8 %bf.load46, 7, !dbg !4412
  %bf.cast48 = zext i8 %bf.lshr47 to i32, !dbg !4412
  %tobool49 = icmp ne i32 %bf.cast48, 0, !dbg !4411
  br i1 %tobool49, label %if.end65, label %if.then50, !dbg !4413

if.then50:                                        ; preds = %land.lhs.true45
  %33 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4414
  %add.ptr51 = getelementptr inbounds %struct.function, %struct.function* %33, i64 0, !dbg !4414
  %gimple_df52 = getelementptr inbounds %struct.function, %struct.function* %add.ptr51, i32 0, i32 3, !dbg !4415
  %34 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df52, align 8, !dbg !4415
  %escaped53 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %34, i32 0, i32 4, !dbg !4416
  %35 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !4417
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %35, i32 0, i32 7, !dbg !4418
  %36 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4418
  %call54 = call zeroext i8 @pt_solution_includes(%struct.pt_solution* %escaped53, %union.tree_node* %36), !dbg !4419
  %conv = zext i8 %call54 to i32, !dbg !4419
  %37 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !4420
  %is_global_var55 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %37, i32 0, i32 1, !dbg !4421
  %38 = trunc i32 %conv to i8, !dbg !4422
  %bf.load56 = load i8, i8* %is_global_var55, align 4, !dbg !4422
  %bf.value = and i8 %38, 1, !dbg !4422
  %bf.shl = shl i8 %bf.value, 7, !dbg !4422
  %bf.clear57 = and i8 %bf.load56, 127, !dbg !4422
  %bf.set = or i8 %bf.clear57, %bf.shl, !dbg !4422
  store i8 %bf.set, i8* %is_global_var55, align 4, !dbg !4422
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !4422
  %39 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !4423
  %decl58 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %39, i32 0, i32 7, !dbg !4423
  %40 = load %union.tree_node*, %union.tree_node** %decl58, align 8, !dbg !4423
  %decl_common = bitcast %union.tree_node* %40 to %struct.tree_decl_common*, !dbg !4423
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4423
  %41 = bitcast i40* %decl_flag_1 to i64*, !dbg !4423
  %42 = zext i32 %bf.result.cast to i64, !dbg !4424
  %bf.load59 = load i64, i64* %41, align 8, !dbg !4424
  %bf.value60 = and i64 %42, 1, !dbg !4424
  %bf.shl61 = shl i64 %bf.value60, 25, !dbg !4424
  %bf.clear62 = and i64 %bf.load59, -33554433, !dbg !4424
  %bf.set63 = or i64 %bf.clear62, %bf.shl61, !dbg !4424
  store i64 %bf.set63, i64* %41, align 8, !dbg !4424
  %bf.result.cast64 = trunc i64 %bf.value60 to i32, !dbg !4424
  br label %if.end65, !dbg !4423

if.end65:                                         ; preds = %if.then50, %land.lhs.true45, %land.lhs.true, %for.body36
  br label %for.inc66, !dbg !4412

for.inc66:                                        ; preds = %if.end65
  %43 = load i32, i32* %i, align 4, !dbg !4425
  %inc = add i32 %43, 1, !dbg !4425
  store i32 %inc, i32* %i, align 4, !dbg !4425
  br label %for.cond32, !dbg !4426, !llvm.loop !4427

for.end67:                                        ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !4429
  br label %for.cond68, !dbg !4431

for.cond68:                                       ; preds = %for.inc115, %for.end67
  %44 = load i32, i32* %i, align 4, !dbg !4432
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4434
  %add.ptr69 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !4434
  %gimple_df70 = getelementptr inbounds %struct.function, %struct.function* %add.ptr69, i32 0, i32 3, !dbg !4434
  %46 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df70, align 8, !dbg !4434
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %46, i32 0, i32 2, !dbg !4434
  %47 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4434
  %tobool71 = icmp ne %struct.VEC_tree_gc* %47, null, !dbg !4434
  br i1 %tobool71, label %cond.true72, label %cond.false77, !dbg !4434

cond.true72:                                      ; preds = %for.cond68
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4434
  %add.ptr73 = getelementptr inbounds %struct.function, %struct.function* %48, i64 0, !dbg !4434
  %gimple_df74 = getelementptr inbounds %struct.function, %struct.function* %add.ptr73, i32 0, i32 3, !dbg !4434
  %49 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df74, align 8, !dbg !4434
  %ssa_names75 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %49, i32 0, i32 2, !dbg !4434
  %50 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names75, align 8, !dbg !4434
  %base76 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %50, i32 0, i32 0, !dbg !4434
  br label %cond.end78, !dbg !4434

cond.false77:                                     ; preds = %for.cond68
  br label %cond.end78, !dbg !4434

cond.end78:                                       ; preds = %cond.false77, %cond.true72
  %cond79 = phi %struct.VEC_tree_base* [ %base76, %cond.true72 ], [ null, %cond.false77 ], !dbg !4434
  %call80 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond79), !dbg !4434
  %cmp81 = icmp ult i32 %44, %call80, !dbg !4435
  br i1 %cmp81, label %for.body83, label %for.end117, !dbg !4436

for.body83:                                       ; preds = %cond.end78
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr, metadata !4437, metadata !DIExpression()), !dbg !4439
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4440
  %add.ptr84 = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !4440
  %gimple_df85 = getelementptr inbounds %struct.function, %struct.function* %add.ptr84, i32 0, i32 3, !dbg !4440
  %52 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df85, align 8, !dbg !4440
  %ssa_names86 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %52, i32 0, i32 2, !dbg !4440
  %53 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names86, align 8, !dbg !4440
  %tobool87 = icmp ne %struct.VEC_tree_gc* %53, null, !dbg !4440
  br i1 %tobool87, label %cond.true88, label %cond.false93, !dbg !4440

cond.true88:                                      ; preds = %for.body83
  %54 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4440
  %add.ptr89 = getelementptr inbounds %struct.function, %struct.function* %54, i64 0, !dbg !4440
  %gimple_df90 = getelementptr inbounds %struct.function, %struct.function* %add.ptr89, i32 0, i32 3, !dbg !4440
  %55 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df90, align 8, !dbg !4440
  %ssa_names91 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %55, i32 0, i32 2, !dbg !4440
  %56 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names91, align 8, !dbg !4440
  %base92 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %56, i32 0, i32 0, !dbg !4440
  br label %cond.end94, !dbg !4440

cond.false93:                                     ; preds = %for.body83
  br label %cond.end94, !dbg !4440

cond.end94:                                       ; preds = %cond.false93, %cond.true88
  %cond95 = phi %struct.VEC_tree_base* [ %base92, %cond.true88 ], [ null, %cond.false93 ], !dbg !4440
  %57 = load i32, i32* %i, align 4, !dbg !4440
  %call96 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond95, i32 %57), !dbg !4440
  store %union.tree_node* %call96, %union.tree_node** %ptr, align 8, !dbg !4439
  %58 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !4441
  %tobool97 = icmp ne %union.tree_node* %58, null, !dbg !4441
  br i1 %tobool97, label %land.lhs.true98, label %if.end114, !dbg !4443

land.lhs.true98:                                  ; preds = %cond.end94
  %59 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !4444
  %common = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !4444
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4444
  %60 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4444
  %base99 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !4444
  %61 = bitcast %struct.tree_base* %base99 to i64*, !dbg !4444
  %bf.load100 = load i64, i64* %61, align 8, !dbg !4444
  %bf.clear101 = and i64 %bf.load100, 65535, !dbg !4444
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !4444
  %cmp103 = icmp eq i32 %bf.cast102, 10, !dbg !4444
  br i1 %cmp103, label %if.then113, label %lor.lhs.false, !dbg !4444

lor.lhs.false:                                    ; preds = %land.lhs.true98
  %62 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !4444
  %common105 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !4444
  %type106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2, !dbg !4444
  %63 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !4444
  %base107 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !4444
  %64 = bitcast %struct.tree_base* %base107 to i64*, !dbg !4444
  %bf.load108 = load i64, i64* %64, align 8, !dbg !4444
  %bf.clear109 = and i64 %bf.load108, 65535, !dbg !4444
  %bf.cast110 = trunc i64 %bf.clear109 to i32, !dbg !4444
  %cmp111 = icmp eq i32 %bf.cast110, 12, !dbg !4444
  br i1 %cmp111, label %if.then113, label %if.end114, !dbg !4445

if.then113:                                       ; preds = %lor.lhs.false, %land.lhs.true98
  %65 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !4446
  call void @find_what_p_points_to(%union.tree_node* %65), !dbg !4447
  br label %if.end114, !dbg !4447

if.end114:                                        ; preds = %if.then113, %lor.lhs.false, %cond.end94
  br label %for.inc115, !dbg !4448

for.inc115:                                       ; preds = %if.end114
  %66 = load i32, i32* %i, align 4, !dbg !4449
  %inc116 = add i32 %66, 1, !dbg !4449
  store i32 %inc116, i32* %i, align 4, !dbg !4449
  br label %for.cond68, !dbg !4450, !llvm.loop !4451

for.end117:                                       ; preds = %cond.end78
  br label %do.body118, !dbg !4453

do.body118:                                       ; preds = %for.end117
  %67 = load i8, i8* @timevar_enable, align 1, !dbg !4454
  %tobool119 = icmp ne i8 %67, 0, !dbg !4454
  br i1 %tobool119, label %if.then120, label %if.end121, !dbg !4457

if.then120:                                       ; preds = %do.body118
  call void @timevar_pop_1(i32 56), !dbg !4454
  br label %if.end121, !dbg !4454

if.end121:                                        ; preds = %if.then120, %do.body118
  br label %do.end122, !dbg !4457

do.end122:                                        ; preds = %if.end121
  ret void, !dbg !4458
}

declare dso_local void @dump_alias_info(%struct._IO_FILE*) #2

declare dso_local void @dump_referenced_vars(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @delete_points_to_sets() #0 !dbg !4459 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4460, metadata !DIExpression()), !dbg !4461
  %0 = load %struct.htab*, %struct.htab** @shared_bitmap_table, align 8, !dbg !4462
  call void @htab_delete(%struct.htab* %0), !dbg !4463
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4464
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !4464
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4466

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @dump_flags, align 4, !dbg !4467
  %and = and i32 %2, 16, !dbg !4468
  %tobool1 = icmp ne i32 %and, 0, !dbg !4468
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4469

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4470
  %4 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 7), align 4, !dbg !4471
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.84, i64 0, i64 0), i32 %4), !dbg !4472
  br label %if.end, !dbg !4472

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.pointer_map_t*, %struct.pointer_map_t** @vi_for_tree, align 8, !dbg !4473
  call void @pointer_map_destroy(%struct.pointer_map_t* %5), !dbg !4474
  call void @bitmap_obstack_release(%struct.bitmap_obstack* @pta_obstack), !dbg !4475
  call void @VEC_constraint_t_heap_free(%struct.VEC_constraint_t_heap** @constraints), !dbg !4476
  store i32 0, i32* %i, align 4, !dbg !4477
  br label %for.cond, !dbg !4479

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4, !dbg !4480
  %7 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4482
  %size = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %7, i32 0, i32 0, !dbg !4483
  %8 = load i32, i32* %size, align 8, !dbg !4483
  %cmp = icmp ult i32 %6, %8, !dbg !4484
  br i1 %cmp, label %for.body, label %for.end, !dbg !4485

for.body:                                         ; preds = %for.cond
  %9 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4486
  %complex = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %9, i32 0, i32 15, !dbg !4486
  %10 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex, align 8, !dbg !4486
  %11 = load i32, i32* %i, align 4, !dbg !4486
  %idxprom = zext i32 %11 to i64, !dbg !4486
  %arrayidx = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %10, i64 %idxprom, !dbg !4486
  call void @VEC_constraint_t_heap_free(%struct.VEC_constraint_t_heap** %arrayidx), !dbg !4486
  br label %for.inc, !dbg !4486

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !4487
  %inc = add i32 %12, 1, !dbg !4487
  store i32 %inc, i32* %i, align 4, !dbg !4487
  br label %for.cond, !dbg !4488, !llvm.loop !4489

for.end:                                          ; preds = %for.cond
  %13 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4491
  %complex2 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %13, i32 0, i32 15, !dbg !4492
  %14 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex2, align 8, !dbg !4492
  %15 = bitcast %struct.VEC_constraint_t_heap** %14 to i8*, !dbg !4491
  call void @free(i8* %15), !dbg !4493
  %16 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4494
  %rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %16, i32 0, i32 5, !dbg !4495
  %17 = load i32*, i32** %rep, align 8, !dbg !4495
  %18 = bitcast i32* %17 to i8*, !dbg !4494
  call void @free(i8* %18), !dbg !4496
  %19 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4497
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %19, i32 0, i32 1, !dbg !4498
  %20 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !4498
  %21 = bitcast %struct.bitmap_head_def** %20 to i8*, !dbg !4497
  call void @free(i8* %21), !dbg !4499
  %22 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4500
  %pe = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %22, i32 0, i32 7, !dbg !4501
  %23 = load i32*, i32** %pe, align 8, !dbg !4501
  %24 = bitcast i32* %23 to i8*, !dbg !4500
  call void @free(i8* %24), !dbg !4502
  %25 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4503
  %pe_rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %25, i32 0, i32 8, !dbg !4504
  %26 = load i32*, i32** %pe_rep, align 8, !dbg !4504
  %27 = bitcast i32* %26 to i8*, !dbg !4503
  call void @free(i8* %27), !dbg !4505
  %28 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4506
  %indirect_cycles = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %28, i32 0, i32 4, !dbg !4507
  %29 = load i32*, i32** %indirect_cycles, align 8, !dbg !4507
  %30 = bitcast i32* %29 to i8*, !dbg !4506
  call void @free(i8* %30), !dbg !4508
  %31 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4509
  %32 = bitcast %struct.constraint_graph* %31 to i8*, !dbg !4509
  call void @free(i8* %32), !dbg !4510
  call void @VEC_varinfo_t_heap_free(%struct.VEC_varinfo_t_heap** @varmap), !dbg !4511
  %33 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @variable_info_pool, align 8, !dbg !4512
  call void @free_alloc_pool(%struct.alloc_pool_def* %33), !dbg !4513
  %34 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @constraint_pool, align 8, !dbg !4514
  call void @free_alloc_pool(%struct.alloc_pool_def* %34), !dbg !4515
  ret void, !dbg !4516
}

declare dso_local zeroext i8 @need_ssa_update_p(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_tree_pta() #0 !dbg !4517 {
entry:
  %0 = load i32, i32* @flag_tree_pta, align 4, !dbg !4518
  %conv = trunc i32 %0 to i8, !dbg !4518
  ret i8 %conv, !dbg !4519
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_ipa_pta() #0 !dbg !4520 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !4521
  %tobool = icmp ne i32 %0, 0, !dbg !4521
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !4522

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_ipa_pta, align 4, !dbg !4523
  %tobool1 = icmp ne i32 %1, 0, !dbg !4523
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !4524

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !4525
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %2, i32 0, i32 1, !dbg !4525
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 4, !dbg !4525
  %3 = load i32, i32* %arrayidx, align 8, !dbg !4525
  %tobool2 = icmp ne i32 %3, 0, !dbg !4525
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !4526

lor.rhs:                                          ; preds = %land.rhs
  %4 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !4527
  %diagnostic_count3 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %4, i32 0, i32 1, !dbg !4527
  %arrayidx4 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count3, i64 0, i64 5, !dbg !4527
  %5 = load i32, i32* %arrayidx4, align 4, !dbg !4527
  %tobool5 = icmp ne i32 %5, 0, !dbg !4526
  br label %lor.end, !dbg !4526

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %tobool5, %lor.rhs ]
  %lnot = xor i1 %6, true, !dbg !4528
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true, %entry
  %7 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %lnot, %lor.end ], !dbg !4529
  %land.ext = zext i1 %7 to i32, !dbg !4524
  %conv = trunc i32 %land.ext to i8, !dbg !4530
  ret i8 %conv, !dbg !4531
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ipa_pta_execute() #0 !dbg !4532 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %func = alloca %struct.function*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %old_func_decl = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %tmp51 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !4533, metadata !DIExpression()), !dbg !4737
  store i32 1, i32* @in_ipa_mode, align 4, !dbg !4738
  call void @init_alias_heapvars(), !dbg !4739
  call void @init_alias_vars(), !dbg !4740
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4741
  store %struct.cgraph_node* %0, %struct.cgraph_node** %node, align 8, !dbg !4743
  br label %for.cond, !dbg !4744

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4745
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !4747
  br i1 %tobool, label %for.body, label %for.end, !dbg !4747

for.body:                                         ; preds = %for.cond
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4748
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !4751
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4751
  %call = call zeroext i8 @gimple_has_body_p(%union.tree_node* %3), !dbg !4752
  %tobool1 = icmp ne i8 %call, 0, !dbg !4752
  br i1 %tobool1, label %lor.lhs.false, label %if.then, !dbg !4753

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4754
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 12, !dbg !4755
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !4755
  %tobool2 = icmp ne %struct.cgraph_node* %5, null, !dbg !4754
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4756

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc, !dbg !4757

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4758
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 18, !dbg !4760
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !4761
  %bf.load = load i8, i8* %externally_visible, align 8, !dbg !4761
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !4761
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4761
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4761
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !4758
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !4762

if.then4:                                         ; preds = %if.end
  br label %for.inc, !dbg !4763

if.end5:                                          ; preds = %if.end
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4764
  %decl6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !4765
  %8 = load %union.tree_node*, %union.tree_node** %decl6, align 8, !dbg !4765
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4766
  %call7 = call i8* @cgraph_node_name(%struct.cgraph_node* %9), !dbg !4767
  %call8 = call i32 @create_function_info_for(%union.tree_node* %8, i8* %call7), !dbg !4768
  br label %for.inc, !dbg !4769

for.inc:                                          ; preds = %if.end5, %if.then4, %if.then
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4770
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 3, !dbg !4771
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !4771
  store %struct.cgraph_node* %11, %struct.cgraph_node** %node, align 8, !dbg !4772
  br label %for.cond, !dbg !4773, !llvm.loop !4774

for.end:                                          ; preds = %for.cond
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4776
  store %struct.cgraph_node* %12, %struct.cgraph_node** %node, align 8, !dbg !4778
  br label %for.cond9, !dbg !4779

for.cond9:                                        ; preds = %for.inc63, %for.end
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4780
  %tobool10 = icmp ne %struct.cgraph_node* %13, null, !dbg !4782
  br i1 %tobool10, label %for.body11, label %for.end65, !dbg !4782

for.body11:                                       ; preds = %for.cond9
  call void @llvm.dbg.declare(metadata %struct.function** %func, metadata !4783, metadata !DIExpression()), !dbg !4785
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4786, metadata !DIExpression()), !dbg !4787
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_func_decl, metadata !4788, metadata !DIExpression()), !dbg !4789
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4790
  %decl12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 0, !dbg !4792
  %15 = load %union.tree_node*, %union.tree_node** %decl12, align 8, !dbg !4792
  %call13 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %15), !dbg !4793
  %tobool14 = icmp ne i8 %call13, 0, !dbg !4793
  br i1 %tobool14, label %lor.lhs.false15, label %if.then18, !dbg !4794

lor.lhs.false15:                                  ; preds = %for.body11
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4795
  %clone_of16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 12, !dbg !4796
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of16, align 8, !dbg !4796
  %tobool17 = icmp ne %struct.cgraph_node* %17, null, !dbg !4795
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !4797

if.then18:                                        ; preds = %lor.lhs.false15, %for.body11
  br label %for.inc63, !dbg !4798

if.end19:                                         ; preds = %lor.lhs.false15
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4799
  %tobool20 = icmp ne %struct._IO_FILE* %18, null, !dbg !4799
  br i1 %tobool20, label %if.then21, label %if.end24, !dbg !4801

if.then21:                                        ; preds = %if.end19
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4802
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4803
  %call22 = call i8* @cgraph_node_name(%struct.cgraph_node* %20), !dbg !4804
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.85, i64 0, i64 0), i8* %call22), !dbg !4805
  br label %if.end24, !dbg !4805

if.end24:                                         ; preds = %if.then21, %if.end19
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4806
  %decl25 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 0, !dbg !4806
  %22 = load %union.tree_node*, %union.tree_node** %decl25, align 8, !dbg !4806
  %function_decl = bitcast %union.tree_node* %22 to %struct.tree_function_decl*, !dbg !4806
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !4806
  %23 = load %struct.function*, %struct.function** %f, align 8, !dbg !4806
  store %struct.function* %23, %struct.function** %func, align 8, !dbg !4807
  %24 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4808
  store %union.tree_node* %24, %union.tree_node** %old_func_decl, align 8, !dbg !4809
  %25 = load %struct.function*, %struct.function** %func, align 8, !dbg !4810
  call void @push_cfun(%struct.function* %25), !dbg !4811
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4812
  %decl26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 0, !dbg !4813
  %27 = load %union.tree_node*, %union.tree_node** %decl26, align 8, !dbg !4813
  store %union.tree_node* %27, %union.tree_node** @current_function_decl, align 8, !dbg !4814
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4815
  %local27 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 18, !dbg !4817
  %externally_visible28 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local27, i32 0, i32 2, !dbg !4818
  %bf.load29 = load i8, i8* %externally_visible28, align 8, !dbg !4818
  %bf.lshr30 = lshr i8 %bf.load29, 1, !dbg !4818
  %bf.clear31 = and i8 %bf.lshr30, 1, !dbg !4818
  %bf.cast32 = zext i8 %bf.clear31 to i32, !dbg !4818
  %tobool33 = icmp ne i32 %bf.cast32, 0, !dbg !4815
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !4819

if.then34:                                        ; preds = %if.end24
  call void @intra_create_variable_infos(), !dbg !4820
  br label %if.end35, !dbg !4820

if.end35:                                         ; preds = %if.then34, %if.end24
  %29 = load %struct.function*, %struct.function** %func, align 8, !dbg !4821
  %cfg = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 1, !dbg !4821
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4821
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 0, !dbg !4821
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4821
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 6, !dbg !4821
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4821
  store %struct.basic_block_def* %32, %struct.basic_block_def** %bb, align 8, !dbg !4821
  br label %for.cond36, !dbg !4821

for.cond36:                                       ; preds = %for.inc60, %if.end35
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4823
  %34 = load %struct.function*, %struct.function** %func, align 8, !dbg !4823
  %cfg37 = getelementptr inbounds %struct.function, %struct.function* %34, i32 0, i32 1, !dbg !4823
  %35 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg37, align 8, !dbg !4823
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %35, i32 0, i32 1, !dbg !4823
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4823
  %cmp = icmp ne %struct.basic_block_def* %33, %36, !dbg !4823
  br i1 %cmp, label %for.body38, label %for.end62, !dbg !4821

for.body38:                                       ; preds = %for.cond36
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4825, metadata !DIExpression()), !dbg !4827
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4828
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %37), !dbg !4830
  %38 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4830
  %39 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4830
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 24, i1 false), !dbg !4830
  br label %for.cond39, !dbg !4831

for.cond39:                                       ; preds = %for.inc49, %for.body38
  %call40 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4832
  %tobool41 = icmp ne i8 %call40, 0, !dbg !4834
  %lnot = xor i1 %tobool41, true, !dbg !4834
  br i1 %lnot, label %for.body42, label %for.end50, !dbg !4835

for.body42:                                       ; preds = %for.cond39
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4836, metadata !DIExpression()), !dbg !4838
  %call43 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4839
  store %union.gimple_statement_d* %call43, %union.gimple_statement_d** %phi, align 8, !dbg !4838
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4840
  %call44 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %40), !dbg !4842
  %call45 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call44), !dbg !4843
  %tobool46 = icmp ne i8 %call45, 0, !dbg !4843
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !4844

if.then47:                                        ; preds = %for.body42
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4845
  call void @find_func_aliases(%union.gimple_statement_d* %41), !dbg !4846
  br label %if.end48, !dbg !4846

if.end48:                                         ; preds = %if.then47, %for.body42
  br label %for.inc49, !dbg !4847

for.inc49:                                        ; preds = %if.end48
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4848
  br label %for.cond39, !dbg !4849, !llvm.loop !4850

for.end50:                                        ; preds = %for.cond39
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4852
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp51, %struct.basic_block_def* %42), !dbg !4854
  %43 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4854
  %44 = bitcast %struct.gimple_stmt_iterator* %tmp51 to i8*, !dbg !4854
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 24, i1 false), !dbg !4854
  br label %for.cond52, !dbg !4855

for.cond52:                                       ; preds = %for.inc58, %for.end50
  %call53 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4856
  %tobool54 = icmp ne i8 %call53, 0, !dbg !4858
  %lnot55 = xor i1 %tobool54, true, !dbg !4858
  br i1 %lnot55, label %for.body56, label %for.end59, !dbg !4859

for.body56:                                       ; preds = %for.cond52
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4860, metadata !DIExpression()), !dbg !4862
  %call57 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4863
  store %union.gimple_statement_d* %call57, %union.gimple_statement_d** %stmt, align 8, !dbg !4862
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4864
  call void @find_func_aliases(%union.gimple_statement_d* %45), !dbg !4865
  br label %for.inc58, !dbg !4866

for.inc58:                                        ; preds = %for.body56
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4867
  br label %for.cond52, !dbg !4868, !llvm.loop !4869

for.end59:                                        ; preds = %for.cond52
  br label %for.inc60, !dbg !4871

for.inc60:                                        ; preds = %for.end59
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4823
  %next_bb61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 6, !dbg !4823
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb61, align 8, !dbg !4823
  store %struct.basic_block_def* %47, %struct.basic_block_def** %bb, align 8, !dbg !4823
  br label %for.cond36, !dbg !4823, !llvm.loop !4872

for.end62:                                        ; preds = %for.cond36
  %48 = load %union.tree_node*, %union.tree_node** %old_func_decl, align 8, !dbg !4874
  store %union.tree_node* %48, %union.tree_node** @current_function_decl, align 8, !dbg !4875
  call void @pop_cfun(), !dbg !4876
  br label %for.inc63, !dbg !4877

for.inc63:                                        ; preds = %for.end62, %if.then18
  %49 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4878
  %next64 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %49, i32 0, i32 3, !dbg !4879
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %next64, align 8, !dbg !4879
  store %struct.cgraph_node* %50, %struct.cgraph_node** %node, align 8, !dbg !4880
  br label %for.cond9, !dbg !4881, !llvm.loop !4882

for.end65:                                        ; preds = %for.cond9
  call void @solve_constraints(), !dbg !4884
  call void @delete_points_to_sets(), !dbg !4885
  store i32 0, i32* @in_ipa_mode, align 4, !dbg !4886
  ret i32 0, !dbg !4887
}

declare dso_local void @gt_ggc_mx_tree_map(i8*) #2

declare dso_local void @gt_pch_nx_tree_map(i8*) #2

declare dso_local i32 @tree_map_base_marked_p(i8*) #2

declare dso_local void @gt_ggc_m_P8tree_map4htab(i8*) #2

declare dso_local void @gt_pch_n_P8tree_map4htab(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info* @get_varinfo(i32 %n) #0 !dbg !4888 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4891, metadata !DIExpression()), !dbg !4892
  %0 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !4893
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %0, null, !dbg !4893
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4893

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !4893
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %1, i32 0, i32 0, !dbg !4893
  br label %cond.end, !dbg !4893

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4893

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4893
  %2 = load i32, i32* %n.addr, align 4, !dbg !4893
  %call = call %struct.variable_info* @VEC_varinfo_t_base_index(%struct.VEC_varinfo_t_base* %cond, i32 %2), !dbg !4893
  ret %struct.variable_info* %call, !dbg !4894
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info* @VEC_varinfo_t_base_index(%struct.VEC_varinfo_t_base* %vec_, i32 %ix_) #0 !dbg !4895 {
entry:
  %vec_.addr = alloca %struct.VEC_varinfo_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_varinfo_t_base* %vec_, %struct.VEC_varinfo_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_varinfo_t_base** %vec_.addr, metadata !4900, metadata !DIExpression()), !dbg !4901
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4902, metadata !DIExpression()), !dbg !4901
  %0 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !4901
  %tobool = icmp ne %struct.VEC_varinfo_t_base* %0, null, !dbg !4901
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4901

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4901
  %2 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !4901
  %num = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %2, i32 0, i32 0, !dbg !4901
  %3 = load i32, i32* %num, align 8, !dbg !4901
  %cmp = icmp ult i32 %1, %3, !dbg !4901
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4903
  %land.ext = zext i1 %4 to i32, !dbg !4901
  %5 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !4901
  %vec = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %5, i32 0, i32 2, !dbg !4901
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4901
  %idxprom = zext i32 %6 to i64, !dbg !4901
  %arrayidx = getelementptr inbounds [1 x %struct.variable_info*], [1 x %struct.variable_info*]* %vec, i64 0, i64 %idxprom, !dbg !4901
  %7 = load %struct.variable_info*, %struct.variable_info** %arrayidx, align 8, !dbg !4901
  ret %struct.variable_info* %7, !dbg !4901
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %vec_, i32 %ix_, %struct.constraint** %ptr) #0 !dbg !4904 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_constraint_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.constraint**, align 8
  store %struct.VEC_constraint_t_base* %vec_, %struct.VEC_constraint_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_base** %vec_.addr, metadata !4910, metadata !DIExpression()), !dbg !4911
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4912, metadata !DIExpression()), !dbg !4911
  store %struct.constraint** %ptr, %struct.constraint*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint*** %ptr.addr, metadata !4913, metadata !DIExpression()), !dbg !4911
  %0 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !4914
  %tobool = icmp ne %struct.VEC_constraint_t_base* %0, null, !dbg !4914
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4914

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4914
  %2 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !4914
  %num = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %2, i32 0, i32 0, !dbg !4914
  %3 = load i32, i32* %num, align 8, !dbg !4914
  %cmp = icmp ult i32 %1, %3, !dbg !4914
  br i1 %cmp, label %if.then, label %if.else, !dbg !4911

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !4916
  %vec = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %4, i32 0, i32 2, !dbg !4916
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4916
  %idxprom = zext i32 %5 to i64, !dbg !4916
  %arrayidx = getelementptr inbounds [1 x %struct.constraint*], [1 x %struct.constraint*]* %vec, i64 0, i64 %idxprom, !dbg !4916
  %6 = load %struct.constraint*, %struct.constraint** %arrayidx, align 8, !dbg !4916
  %7 = load %struct.constraint**, %struct.constraint*** %ptr.addr, align 8, !dbg !4916
  store %struct.constraint* %6, %struct.constraint** %7, align 8, !dbg !4916
  store i32 1, i32* %retval, align 4, !dbg !4916
  br label %return, !dbg !4916

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.constraint**, %struct.constraint*** %ptr.addr, align 8, !dbg !4918
  store %struct.constraint* null, %struct.constraint** %8, align 8, !dbg !4918
  store i32 0, i32* %retval, align 4, !dbg !4918
  br label %return, !dbg !4918

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4911
  ret i32 %9, !dbg !4911
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %vec_) #0 !dbg !4920 {
entry:
  %vec_.addr = alloca %struct.VEC_varinfo_t_base*, align 8
  store %struct.VEC_varinfo_t_base* %vec_, %struct.VEC_varinfo_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_varinfo_t_base** %vec_.addr, metadata !4923, metadata !DIExpression()), !dbg !4924
  %0 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !4924
  %tobool = icmp ne %struct.VEC_varinfo_t_base* %0, null, !dbg !4924
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4924

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !4924
  %num = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %1, i32 0, i32 0, !dbg !4924
  %2 = load i32, i32* %num, align 8, !dbg !4924
  br label %cond.end, !dbg !4924

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4924

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4924
  ret i32 %cond, !dbg !4924
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_constraint_edge(%struct._IO_FILE* %file, %struct.constraint* %c) #0 !dbg !4925 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %c.addr = alloca %struct.constraint*, align 8
  %src = alloca i8*, align 8
  %dst = alloca i8*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !4926, metadata !DIExpression()), !dbg !4927
  store %struct.constraint* %c, %struct.constraint** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %c.addr, metadata !4928, metadata !DIExpression()), !dbg !4929
  %0 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !4930
  %rhs = getelementptr inbounds %struct.constraint, %struct.constraint* %0, i32 0, i32 1, !dbg !4932
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !4933
  %1 = load i32, i32* %type, align 8, !dbg !4933
  %cmp = icmp ne i32 %1, 2, !dbg !4934
  br i1 %cmp, label %if.then, label %if.end27, !dbg !4935

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %src, metadata !4936, metadata !DIExpression()), !dbg !4938
  %2 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !4939
  %rhs1 = getelementptr inbounds %struct.constraint, %struct.constraint* %2, i32 0, i32 1, !dbg !4940
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs1, i32 0, i32 1, !dbg !4941
  %3 = load i32, i32* %var, align 4, !dbg !4941
  %call = call %struct.variable_info* @get_varinfo(i32 %3), !dbg !4942
  %name = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call, i32 0, i32 6, !dbg !4943
  %4 = load i8*, i8** %name, align 8, !dbg !4943
  store i8* %4, i8** %src, align 8, !dbg !4938
  call void @llvm.dbg.declare(metadata i8** %dst, metadata !4944, metadata !DIExpression()), !dbg !4945
  %5 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !4946
  %lhs = getelementptr inbounds %struct.constraint, %struct.constraint* %5, i32 0, i32 0, !dbg !4947
  %var2 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !4948
  %6 = load i32, i32* %var2, align 4, !dbg !4948
  %call3 = call %struct.variable_info* @get_varinfo(i32 %6), !dbg !4949
  %name4 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call3, i32 0, i32 6, !dbg !4950
  %7 = load i8*, i8** %name4, align 8, !dbg !4950
  store i8* %7, i8** %dst, align 8, !dbg !4945
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4951
  %9 = load i8*, i8** %src, align 8, !dbg !4952
  %10 = load i8*, i8** %dst, align 8, !dbg !4953
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i64 0, i64 0), i8* %9, i8* %10), !dbg !4954
  %11 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !4955
  %lhs6 = getelementptr inbounds %struct.constraint, %struct.constraint* %11, i32 0, i32 0, !dbg !4957
  %type7 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs6, i32 0, i32 0, !dbg !4958
  %12 = load i32, i32* %type7, align 8, !dbg !4958
  %cmp8 = icmp eq i32 %12, 1, !dbg !4959
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !4960

if.then9:                                         ; preds = %if.then
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4961
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.26, i64 0, i64 0)), !dbg !4962
  br label %if.end26, !dbg !4962

if.else:                                          ; preds = %if.then
  %14 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !4963
  %rhs11 = getelementptr inbounds %struct.constraint, %struct.constraint* %14, i32 0, i32 1, !dbg !4965
  %type12 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs11, i32 0, i32 0, !dbg !4966
  %15 = load i32, i32* %type12, align 8, !dbg !4966
  %cmp13 = icmp eq i32 %15, 1, !dbg !4967
  br i1 %cmp13, label %if.then14, label %if.else16, !dbg !4968

if.then14:                                        ; preds = %if.else
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4969
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.27, i64 0, i64 0)), !dbg !4970
  br label %if.end25, !dbg !4970

if.else16:                                        ; preds = %if.else
  %17 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !4971
  %rhs17 = getelementptr inbounds %struct.constraint, %struct.constraint* %17, i32 0, i32 1, !dbg !4974
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs17, i32 0, i32 2, !dbg !4975
  %18 = load i64, i64* %offset, align 8, !dbg !4975
  %19 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !4976
  %lhs18 = getelementptr inbounds %struct.constraint, %struct.constraint* %19, i32 0, i32 0, !dbg !4977
  %offset19 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs18, i32 0, i32 2, !dbg !4978
  %20 = load i64, i64* %offset19, align 8, !dbg !4978
  %cmp20 = icmp ne i64 %18, %20, !dbg !4979
  br i1 %cmp20, label %if.then21, label %if.else23, !dbg !4980

if.then21:                                        ; preds = %if.else16
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4981
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0)), !dbg !4982
  br label %if.end, !dbg !4982

if.else23:                                        ; preds = %if.else16
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4983
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0)), !dbg !4984
  br label %if.end

if.end:                                           ; preds = %if.else23, %if.then21
  br label %if.end25

if.end25:                                         ; preds = %if.end, %if.then14
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then9
  br label %if.end27, !dbg !4985

if.end27:                                         ; preds = %if.end26, %entry
  ret void, !dbg !4986
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find(i32 %node) #0 !dbg !4987 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca i32, align 4
  store i32 %node, i32* %node.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %node.addr, metadata !4990, metadata !DIExpression()), !dbg !4991
  %0 = load i32, i32* %node.addr, align 4, !dbg !4992
  %1 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4992
  %size = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %1, i32 0, i32 0, !dbg !4992
  %2 = load i32, i32* %size, align 8, !dbg !4992
  %cmp = icmp ult i32 %0, %2, !dbg !4992
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4992

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 520, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4992
  br label %cond.end, !dbg !4992

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4992

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4992
  %3 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !4993
  %rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %3, i32 0, i32 5, !dbg !4995
  %4 = load i32*, i32** %rep, align 8, !dbg !4995
  %5 = load i32, i32* %node.addr, align 4, !dbg !4996
  %idxprom = zext i32 %5 to i64, !dbg !4993
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !4993
  %6 = load i32, i32* %arrayidx, align 4, !dbg !4993
  %7 = load i32, i32* %node.addr, align 4, !dbg !4997
  %cmp1 = icmp ne i32 %6, %7, !dbg !4998
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4999

if.then:                                          ; preds = %cond.end
  %8 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !5000
  %rep2 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %8, i32 0, i32 5, !dbg !5001
  %9 = load i32*, i32** %rep2, align 8, !dbg !5001
  %10 = load i32, i32* %node.addr, align 4, !dbg !5002
  %idxprom3 = zext i32 %10 to i64, !dbg !5000
  %arrayidx4 = getelementptr inbounds i32, i32* %9, i64 %idxprom3, !dbg !5000
  %11 = load i32, i32* %arrayidx4, align 4, !dbg !5000
  %call = call i32 @find(i32 %11), !dbg !5003
  %12 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !5004
  %rep5 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %12, i32 0, i32 5, !dbg !5005
  %13 = load i32*, i32** %rep5, align 8, !dbg !5005
  %14 = load i32, i32* %node.addr, align 4, !dbg !5006
  %idxprom6 = zext i32 %14 to i64, !dbg !5004
  %arrayidx7 = getelementptr inbounds i32, i32* %13, i64 %idxprom6, !dbg !5004
  store i32 %call, i32* %arrayidx7, align 4, !dbg !5007
  store i32 %call, i32* %retval, align 4, !dbg !5008
  br label %return, !dbg !5008

if.end:                                           ; preds = %cond.end
  %15 = load i32, i32* %node.addr, align 4, !dbg !5009
  store i32 %15, i32* %retval, align 4, !dbg !5010
  br label %return, !dbg !5010

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !5011
  ret i32 %16, !dbg !5011
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @pt_solution_empty_p(%struct.pt_solution* %pt) #0 !dbg !5012 {
entry:
  %retval = alloca i8, align 1
  %pt.addr = alloca %struct.pt_solution*, align 8
  store %struct.pt_solution* %pt, %struct.pt_solution** %pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt.addr, metadata !5013, metadata !DIExpression()), !dbg !5014
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !5015
  %1 = bitcast %struct.pt_solution* %0 to i8*, !dbg !5017
  %bf.load = load i8, i8* %1, align 8, !dbg !5017
  %bf.clear = and i8 %bf.load, 1, !dbg !5017
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5017
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5015
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5018

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !5019
  %3 = bitcast %struct.pt_solution* %2 to i8*, !dbg !5020
  %bf.load1 = load i8, i8* %3, align 8, !dbg !5020
  %bf.lshr = lshr i8 %bf.load1, 1, !dbg !5020
  %bf.clear2 = and i8 %bf.lshr, 1, !dbg !5020
  %bf.cast3 = zext i8 %bf.clear2 to i32, !dbg !5020
  %tobool4 = icmp ne i32 %bf.cast3, 0, !dbg !5019
  br i1 %tobool4, label %if.then, label %if.end, !dbg !5021

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !5022
  br label %return, !dbg !5022

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !5023
  %vars = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %4, i32 0, i32 1, !dbg !5025
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !5025
  %tobool5 = icmp ne %struct.bitmap_head_def* %5, null, !dbg !5023
  br i1 %tobool5, label %land.lhs.true, label %if.end9, !dbg !5026

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !5027
  %vars6 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %6, i32 0, i32 1, !dbg !5027
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars6, align 8, !dbg !5027
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %7, i32 0, i32 0, !dbg !5027
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5027
  %tobool7 = icmp ne %struct.bitmap_element_def* %8, null, !dbg !5027
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !5028

if.then8:                                         ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !5029
  br label %return, !dbg !5029

if.end9:                                          ; preds = %land.lhs.true, %if.end
  %9 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !5030
  %10 = bitcast %struct.pt_solution* %9 to i8*, !dbg !5032
  %bf.load10 = load i8, i8* %10, align 8, !dbg !5032
  %bf.lshr11 = lshr i8 %bf.load10, 2, !dbg !5032
  %bf.clear12 = and i8 %bf.lshr11, 1, !dbg !5032
  %bf.cast13 = zext i8 %bf.clear12 to i32, !dbg !5032
  %tobool14 = icmp ne i32 %bf.cast13, 0, !dbg !5030
  br i1 %tobool14, label %land.lhs.true15, label %if.end18, !dbg !5033

land.lhs.true15:                                  ; preds = %if.end9
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5034
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !5034
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !5035
  %12 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5035
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %12, i32 0, i32 4, !dbg !5036
  %call = call zeroext i8 @pt_solution_empty_p(%struct.pt_solution* %escaped), !dbg !5037
  %tobool16 = icmp ne i8 %call, 0, !dbg !5037
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !5038

if.then17:                                        ; preds = %land.lhs.true15
  store i8 0, i8* %retval, align 1, !dbg !5039
  br label %return, !dbg !5039

if.end18:                                         ; preds = %land.lhs.true15, %if.end9
  store i8 1, i8* %retval, align 1, !dbg !5040
  br label %return, !dbg !5040

return:                                           ; preds = %if.end18, %if.then17, %if.then8, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !5041
  ret i8 %13, !dbg !5041
}

declare dso_local void @timevar_push_1(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_alias_vars() #0 !dbg !5042 {
entry:
  %0 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5043
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %0, i64 95, !dbg !5043
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !5043
  %1 = load i32, i32* %value, align 8, !dbg !5043
  %conv = sext i32 %1 to i64, !dbg !5043
  %cmp = icmp ugt i64 %conv, 1, !dbg !5044
  %conv1 = zext i1 %cmp to i32, !dbg !5044
  %conv2 = trunc i32 %conv1 to i8, !dbg !5045
  store i8 %conv2, i8* @use_field_sensitive, align 1, !dbg !5046
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* @pta_obstack), !dbg !5047
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* @oldpta_obstack), !dbg !5048
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !5049
  %call = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.43, i64 0, i64 0), i64 32, i64 30), !dbg !5050
  store %struct.alloc_pool_def* %call, %struct.alloc_pool_def** @constraint_pool, align 8, !dbg !5051
  %call3 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.44, i64 0, i64 0), i64 72, i64 30), !dbg !5052
  store %struct.alloc_pool_def* %call3, %struct.alloc_pool_def** @variable_info_pool, align 8, !dbg !5053
  %call4 = call %struct.VEC_constraint_t_heap* @VEC_constraint_t_heap_alloc(i32 8), !dbg !5054
  store %struct.VEC_constraint_t_heap* %call4, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !5055
  %call5 = call %struct.VEC_varinfo_t_heap* @VEC_varinfo_t_heap_alloc(i32 8), !dbg !5056
  store %struct.VEC_varinfo_t_heap* %call5, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !5057
  %call6 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !5058
  store %struct.pointer_map_t* %call6, %struct.pointer_map_t** @vi_for_tree, align 8, !dbg !5059
  call void @llvm.memset.p0i8.i64(i8* align 4 bitcast (%struct.constraint_stats* @stats to i8*), i8 0, i64 32, i1 false), !dbg !5060
  %call7 = call %struct.htab* @htab_create(i64 511, i32 (i8*)* @shared_bitmap_hash, i32 (i8*, i8*)* @shared_bitmap_eq, void (i8*)* @free), !dbg !5061
  store %struct.htab* %call7, %struct.htab** @shared_bitmap_table, align 8, !dbg !5062
  call void @init_base_vars(), !dbg !5063
  ret void, !dbg !5064
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_alias_heapvars() #0 !dbg !5065 {
entry:
  %0 = load %struct.htab*, %struct.htab** @heapvar_for_stmt, align 8, !dbg !5066
  %tobool = icmp ne %struct.htab* %0, null, !dbg !5066
  br i1 %tobool, label %if.end, label %if.then, !dbg !5068

if.then:                                          ; preds = %entry
  %call = call %struct.htab* @htab_create_alloc(i64 11, i32 (i8*)* @tree_map_hash, i32 (i8*, i8*)* @heapvar_map_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !5069
  store %struct.htab* %call, %struct.htab** @heapvar_for_stmt, align 8, !dbg !5070
  br label %if.end, !dbg !5071

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5072
}

; Function Attrs: noinline nounwind uwtable
define internal void @intra_create_variable_infos() #0 !dbg !5073 {
entry:
  %t = alloca %union.tree_node*, align 8
  %p = alloca %struct.variable_info*, align 8
  %lhsc = alloca %struct.constraint_expr, align 8
  %rhsc = alloca %struct.constraint_expr, align 8
  %vi = alloca %struct.variable_info*, align 8
  %heapvar = alloca %union.tree_node*, align 8
  %ann = alloca %struct.var_ann_d*, align 8
  %p112 = alloca %struct.variable_info*, align 8
  %result_vi = alloca %struct.variable_info*, align 8
  %p128 = alloca %struct.variable_info*, align 8
  %chain_vi = alloca %struct.variable_info*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5074, metadata !DIExpression()), !dbg !5075
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5076
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !5076
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !5076
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !5076
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !5078
  br label %for.cond, !dbg !5079

for.cond:                                         ; preds = %for.inc93, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5080
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5082
  br i1 %tobool, label %for.body, label %for.end95, !dbg !5082

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %p, metadata !5083, metadata !DIExpression()), !dbg !5085
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5086
  %call = call zeroext i8 @could_have_pointers(%union.tree_node* %3), !dbg !5088
  %tobool1 = icmp ne i8 %call, 0, !dbg !5088
  br i1 %tobool1, label %if.end, label %if.then, !dbg !5089

if.then:                                          ; preds = %for.body
  br label %for.inc93, !dbg !5090

if.end:                                           ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5091
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !5091
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5091
  %5 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !5091
  %bf.load = load i64, i64* %5, align 8, !dbg !5091
  %bf.lshr = lshr i64 %bf.load, 28, !dbg !5091
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5091
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5091
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !5091
  br i1 %tobool2, label %land.lhs.true, label %if.end54, !dbg !5093

land.lhs.true:                                    ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5094
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !5094
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5094
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5094
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5094
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !5094
  %bf.load3 = load i64, i64* %8, align 8, !dbg !5094
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !5094
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !5094
  %cmp = icmp eq i32 %bf.cast5, 10, !dbg !5094
  br i1 %cmp, label %land.lhs.true13, label %lor.lhs.false, !dbg !5094

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5094
  %common6 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !5094
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !5094
  %10 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !5094
  %base8 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5094
  %11 = bitcast %struct.tree_base* %base8 to i64*, !dbg !5094
  %bf.load9 = load i64, i64* %11, align 8, !dbg !5094
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !5094
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !5094
  %cmp12 = icmp eq i32 %bf.cast11, 12, !dbg !5094
  br i1 %cmp12, label %land.lhs.true13, label %if.end54, !dbg !5095

land.lhs.true13:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5096
  %common14 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !5096
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !5096
  %13 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !5096
  %type16 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !5096
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 6, !dbg !5096
  %bf.load17 = load i32, i32* %restrict_flag, align 4, !dbg !5096
  %bf.lshr18 = lshr i32 %bf.load17, 13, !dbg !5096
  %bf.clear19 = and i32 %bf.lshr18, 1, !dbg !5096
  %tobool20 = icmp ne i32 %bf.clear19, 0, !dbg !5096
  br i1 %tobool20, label %if.then21, label %if.end54, !dbg !5097

if.then21:                                        ; preds = %land.lhs.true13
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhsc, metadata !5098, metadata !DIExpression()), !dbg !5100
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhsc, metadata !5101, metadata !DIExpression()), !dbg !5102
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !5103, metadata !DIExpression()), !dbg !5104
  call void @llvm.dbg.declare(metadata %union.tree_node** %heapvar, metadata !5105, metadata !DIExpression()), !dbg !5106
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5107
  %call22 = call %union.tree_node* @heapvar_lookup(%union.tree_node* %14, i64 0), !dbg !5108
  store %union.tree_node* %call22, %union.tree_node** %heapvar, align 8, !dbg !5106
  %15 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !5109
  %cmp23 = icmp eq %union.tree_node* %15, null, !dbg !5111
  br i1 %cmp23, label %if.then24, label %if.end37, !dbg !5112

if.then24:                                        ; preds = %if.then21
  call void @llvm.dbg.declare(metadata %struct.var_ann_d** %ann, metadata !5113, metadata !DIExpression()), !dbg !5116
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5117
  %common25 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !5117
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !5117
  %17 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !5117
  %common27 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !5117
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !5117
  %18 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !5117
  %call29 = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %18, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.55, i64 0, i64 0)), !dbg !5118
  store %union.tree_node* %call29, %union.tree_node** %heapvar, align 8, !dbg !5119
  %19 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !5120
  %decl_common30 = bitcast %union.tree_node* %19 to %struct.tree_decl_common*, !dbg !5120
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common30, i32 0, i32 2, !dbg !5120
  %20 = bitcast i40* %decl_flag_1 to i64*, !dbg !5120
  %bf.load31 = load i64, i64* %20, align 8, !dbg !5121
  %bf.clear32 = and i64 %bf.load31, -33554433, !dbg !5121
  %bf.set = or i64 %bf.clear32, 33554432, !dbg !5121
  store i64 %bf.set, i64* %20, align 8, !dbg !5121
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5122
  %22 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !5123
  call void @heapvar_insert(%union.tree_node* %21, i64 0, %union.tree_node* %22), !dbg !5124
  %23 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !5125
  %call33 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %23), !dbg !5126
  store %struct.var_ann_d* %call33, %struct.var_ann_d** %ann, align 8, !dbg !5127
  %24 = load %struct.var_ann_d*, %struct.var_ann_d** %ann, align 8, !dbg !5128
  %25 = bitcast %struct.var_ann_d* %24 to i8*, !dbg !5129
  %bf.load34 = load i8, i8* %25, align 8, !dbg !5130
  %bf.clear35 = and i8 %bf.load34, -17, !dbg !5130
  %bf.set36 = or i8 %bf.clear35, 16, !dbg !5130
  store i8 %bf.set36, i8* %25, align 8, !dbg !5130
  br label %if.end37, !dbg !5131

if.end37:                                         ; preds = %if.then24, %if.then21
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5132
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !5132
  %call38 = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr), !dbg !5134
  %tobool39 = icmp ne %struct.htab* %call38, null, !dbg !5134
  br i1 %tobool39, label %if.then40, label %if.end42, !dbg !5135

if.then40:                                        ; preds = %if.end37
  %27 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !5136
  %call41 = call zeroext i8 @add_referenced_var(%union.tree_node* %27), !dbg !5137
  br label %if.end42, !dbg !5137

if.end42:                                         ; preds = %if.then40, %if.end37
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5138
  %call43 = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %28), !dbg !5139
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call43, i32 0, i32 0, !dbg !5140
  %29 = load i32, i32* %id, align 8, !dbg !5140
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhsc, i32 0, i32 1, !dbg !5141
  store i32 %29, i32* %var, align 4, !dbg !5142
  %type44 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhsc, i32 0, i32 0, !dbg !5143
  store i32 0, i32* %type44, align 8, !dbg !5144
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhsc, i32 0, i32 2, !dbg !5145
  store i64 0, i64* %offset, align 8, !dbg !5146
  %30 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !5147
  %call45 = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %30), !dbg !5148
  store %struct.variable_info* %call45, %struct.variable_info** %vi, align 8, !dbg !5149
  %id46 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call45, i32 0, i32 0, !dbg !5150
  %31 = load i32, i32* %id46, align 8, !dbg !5150
  %var47 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 1, !dbg !5151
  store i32 %31, i32* %var47, align 4, !dbg !5152
  %type48 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 0, !dbg !5153
  store i32 2, i32* %type48, align 8, !dbg !5154
  %offset49 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 2, !dbg !5155
  store i64 0, i64* %offset49, align 8, !dbg !5156
  %32 = bitcast %struct.constraint_expr* %lhsc to { i64, i64 }*, !dbg !5157
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 0, !dbg !5157
  %34 = load i64, i64* %33, align 8, !dbg !5157
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 1, !dbg !5157
  %36 = load i64, i64* %35, align 8, !dbg !5157
  %37 = bitcast %struct.constraint_expr* %rhsc to { i64, i64 }*, !dbg !5157
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 0, !dbg !5157
  %39 = load i64, i64* %38, align 8, !dbg !5157
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 1, !dbg !5157
  %41 = load i64, i64* %40, align 8, !dbg !5157
  %call50 = call %struct.constraint* @new_constraint(i64 %34, i64 %36, i64 %39, i64 %41), !dbg !5157
  call void @process_constraint(%struct.constraint* %call50), !dbg !5158
  %42 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !5159
  %is_restrict_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %42, i32 0, i32 1, !dbg !5160
  %bf.load51 = load i8, i8* %is_restrict_var, align 4, !dbg !5161
  %bf.clear52 = and i8 %bf.load51, -33, !dbg !5161
  %bf.set53 = or i8 %bf.clear52, 32, !dbg !5161
  store i8 %bf.set53, i8* %is_restrict_var, align 4, !dbg !5161
  br label %for.inc93, !dbg !5162

if.end54:                                         ; preds = %land.lhs.true13, %lor.lhs.false, %if.end
  %43 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5163
  %call55 = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %43), !dbg !5165
  store %struct.variable_info* %call55, %struct.variable_info** %p, align 8, !dbg !5166
  br label %for.cond56, !dbg !5167

for.cond56:                                       ; preds = %for.inc, %if.end54
  %44 = load %struct.variable_info*, %struct.variable_info** %p, align 8, !dbg !5168
  %tobool57 = icmp ne %struct.variable_info* %44, null, !dbg !5170
  br i1 %tobool57, label %for.body58, label %for.end, !dbg !5170

for.body58:                                       ; preds = %for.cond56
  %45 = load %struct.variable_info*, %struct.variable_info** %p, align 8, !dbg !5171
  %may_have_pointers = getelementptr inbounds %struct.variable_info, %struct.variable_info* %45, i32 0, i32 1, !dbg !5173
  %bf.load59 = load i8, i8* %may_have_pointers, align 4, !dbg !5173
  %bf.lshr60 = lshr i8 %bf.load59, 6, !dbg !5173
  %bf.clear61 = and i8 %bf.lshr60, 1, !dbg !5173
  %bf.cast62 = zext i8 %bf.clear61 to i32, !dbg !5173
  %tobool63 = icmp ne i32 %bf.cast62, 0, !dbg !5171
  br i1 %tobool63, label %if.then64, label %if.end65, !dbg !5174

if.then64:                                        ; preds = %for.body58
  %46 = load %struct.variable_info*, %struct.variable_info** %p, align 8, !dbg !5175
  call void @make_constraint_from(%struct.variable_info* %46, i32 4), !dbg !5176
  br label %if.end65, !dbg !5176

if.end65:                                         ; preds = %if.then64, %for.body58
  br label %for.inc, !dbg !5173

for.inc:                                          ; preds = %if.end65
  %47 = load %struct.variable_info*, %struct.variable_info** %p, align 8, !dbg !5177
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %47, i32 0, i32 2, !dbg !5178
  %48 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !5178
  store %struct.variable_info* %48, %struct.variable_info** %p, align 8, !dbg !5179
  br label %for.cond56, !dbg !5180, !llvm.loop !5181

for.end:                                          ; preds = %for.cond56
  %49 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5183
  %common66 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !5183
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !5183
  %50 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !5183
  %base68 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !5183
  %51 = bitcast %struct.tree_base* %base68 to i64*, !dbg !5183
  %bf.load69 = load i64, i64* %51, align 8, !dbg !5183
  %bf.clear70 = and i64 %bf.load69, 65535, !dbg !5183
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !5183
  %cmp72 = icmp eq i32 %bf.cast71, 10, !dbg !5183
  br i1 %cmp72, label %land.lhs.true81, label %lor.lhs.false73, !dbg !5183

lor.lhs.false73:                                  ; preds = %for.end
  %52 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5183
  %common74 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !5183
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2, !dbg !5183
  %53 = load %union.tree_node*, %union.tree_node** %type75, align 8, !dbg !5183
  %base76 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !5183
  %54 = bitcast %struct.tree_base* %base76 to i64*, !dbg !5183
  %bf.load77 = load i64, i64* %54, align 8, !dbg !5183
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !5183
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !5183
  %cmp80 = icmp eq i32 %bf.cast79, 12, !dbg !5183
  br i1 %cmp80, label %land.lhs.true81, label %if.end92, !dbg !5185

land.lhs.true81:                                  ; preds = %lor.lhs.false73, %for.end
  %55 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5186
  %common82 = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !5186
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2, !dbg !5186
  %56 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !5186
  %type84 = bitcast %union.tree_node* %56 to %struct.tree_type*, !dbg !5186
  %restrict_flag85 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type84, i32 0, i32 6, !dbg !5186
  %bf.load86 = load i32, i32* %restrict_flag85, align 4, !dbg !5186
  %bf.lshr87 = lshr i32 %bf.load86, 13, !dbg !5186
  %bf.clear88 = and i32 %bf.lshr87, 1, !dbg !5186
  %tobool89 = icmp ne i32 %bf.clear88, 0, !dbg !5186
  br i1 %tobool89, label %if.then90, label %if.end92, !dbg !5187

if.then90:                                        ; preds = %land.lhs.true81
  %57 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5188
  %call91 = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %57), !dbg !5189
  call void @make_constraint_from_restrict(%struct.variable_info* %call91, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.56, i64 0, i64 0)), !dbg !5190
  br label %if.end92, !dbg !5190

if.end92:                                         ; preds = %if.then90, %land.lhs.true81, %lor.lhs.false73
  br label %for.inc93, !dbg !5191

for.inc93:                                        ; preds = %if.end92, %if.end42, %if.then
  %58 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5192
  %common94 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !5192
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common94, i32 0, i32 1, !dbg !5192
  %59 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5192
  store %union.tree_node* %59, %union.tree_node** %t, align 8, !dbg !5193
  br label %for.cond, !dbg !5194, !llvm.loop !5195

for.end95:                                        ; preds = %for.cond
  %60 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5197
  %add.ptr96 = getelementptr inbounds %struct.function, %struct.function* %60, i64 0, !dbg !5197
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr96, i32 0, i32 6, !dbg !5197
  %61 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5197
  %decl_non_common97 = bitcast %union.tree_node* %61 to %struct.tree_decl_non_common*, !dbg !5197
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common97, i32 0, i32 3, !dbg !5197
  %62 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5197
  %tobool98 = icmp ne %union.tree_node* %62, null, !dbg !5197
  br i1 %tobool98, label %land.lhs.true99, label %if.end124, !dbg !5199

land.lhs.true99:                                  ; preds = %for.end95
  %63 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5200
  %add.ptr100 = getelementptr inbounds %struct.function, %struct.function* %63, i64 0, !dbg !5200
  %decl101 = getelementptr inbounds %struct.function, %struct.function* %add.ptr100, i32 0, i32 6, !dbg !5200
  %64 = load %union.tree_node*, %union.tree_node** %decl101, align 8, !dbg !5200
  %decl_non_common102 = bitcast %union.tree_node* %64 to %struct.tree_decl_non_common*, !dbg !5200
  %result103 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common102, i32 0, i32 3, !dbg !5200
  %65 = load %union.tree_node*, %union.tree_node** %result103, align 8, !dbg !5200
  %decl_common104 = bitcast %union.tree_node* %65 to %struct.tree_decl_common*, !dbg !5200
  %decl_by_reference_flag105 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common104, i32 0, i32 2, !dbg !5200
  %66 = bitcast i40* %decl_by_reference_flag105 to i64*, !dbg !5200
  %bf.load106 = load i64, i64* %66, align 8, !dbg !5200
  %bf.lshr107 = lshr i64 %bf.load106, 28, !dbg !5200
  %bf.clear108 = and i64 %bf.lshr107, 1, !dbg !5200
  %bf.cast109 = trunc i64 %bf.clear108 to i32, !dbg !5200
  %tobool110 = icmp ne i32 %bf.cast109, 0, !dbg !5200
  br i1 %tobool110, label %if.then111, label %if.end124, !dbg !5201

if.then111:                                       ; preds = %land.lhs.true99
  call void @llvm.dbg.declare(metadata %struct.variable_info** %p112, metadata !5202, metadata !DIExpression()), !dbg !5204
  call void @llvm.dbg.declare(metadata %struct.variable_info** %result_vi, metadata !5205, metadata !DIExpression()), !dbg !5206
  %67 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5207
  %add.ptr113 = getelementptr inbounds %struct.function, %struct.function* %67, i64 0, !dbg !5207
  %decl114 = getelementptr inbounds %struct.function, %struct.function* %add.ptr113, i32 0, i32 6, !dbg !5207
  %68 = load %union.tree_node*, %union.tree_node** %decl114, align 8, !dbg !5207
  %decl_non_common115 = bitcast %union.tree_node* %68 to %struct.tree_decl_non_common*, !dbg !5207
  %result116 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common115, i32 0, i32 3, !dbg !5207
  %69 = load %union.tree_node*, %union.tree_node** %result116, align 8, !dbg !5207
  %call117 = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %69), !dbg !5208
  store %struct.variable_info* %call117, %struct.variable_info** %result_vi, align 8, !dbg !5206
  %70 = load %struct.variable_info*, %struct.variable_info** %result_vi, align 8, !dbg !5209
  store %struct.variable_info* %70, %struct.variable_info** %p112, align 8, !dbg !5211
  br label %for.cond118, !dbg !5212

for.cond118:                                      ; preds = %for.inc121, %if.then111
  %71 = load %struct.variable_info*, %struct.variable_info** %p112, align 8, !dbg !5213
  %tobool119 = icmp ne %struct.variable_info* %71, null, !dbg !5215
  br i1 %tobool119, label %for.body120, label %for.end123, !dbg !5215

for.body120:                                      ; preds = %for.cond118
  %72 = load %struct.variable_info*, %struct.variable_info** %p112, align 8, !dbg !5216
  call void @make_constraint_from(%struct.variable_info* %72, i32 4), !dbg !5217
  br label %for.inc121, !dbg !5217

for.inc121:                                       ; preds = %for.body120
  %73 = load %struct.variable_info*, %struct.variable_info** %p112, align 8, !dbg !5218
  %next122 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %73, i32 0, i32 2, !dbg !5219
  %74 = load %struct.variable_info*, %struct.variable_info** %next122, align 8, !dbg !5219
  store %struct.variable_info* %74, %struct.variable_info** %p112, align 8, !dbg !5220
  br label %for.cond118, !dbg !5221, !llvm.loop !5222

for.end123:                                       ; preds = %for.cond118
  br label %if.end124, !dbg !5224

if.end124:                                        ; preds = %for.end123, %land.lhs.true99, %for.end95
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5225
  %add.ptr125 = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, !dbg !5225
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr125, i32 0, i32 7, !dbg !5227
  %76 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !5227
  %cmp126 = icmp ne %union.tree_node* %76, null, !dbg !5228
  br i1 %cmp126, label %if.then127, label %if.end138, !dbg !5229

if.then127:                                       ; preds = %if.end124
  call void @llvm.dbg.declare(metadata %struct.variable_info** %p128, metadata !5230, metadata !DIExpression()), !dbg !5232
  call void @llvm.dbg.declare(metadata %struct.variable_info** %chain_vi, metadata !5233, metadata !DIExpression()), !dbg !5234
  %77 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5235
  %add.ptr129 = getelementptr inbounds %struct.function, %struct.function* %77, i64 0, !dbg !5235
  %static_chain_decl130 = getelementptr inbounds %struct.function, %struct.function* %add.ptr129, i32 0, i32 7, !dbg !5236
  %78 = load %union.tree_node*, %union.tree_node** %static_chain_decl130, align 8, !dbg !5236
  %call131 = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %78), !dbg !5237
  store %struct.variable_info* %call131, %struct.variable_info** %chain_vi, align 8, !dbg !5234
  %79 = load %struct.variable_info*, %struct.variable_info** %chain_vi, align 8, !dbg !5238
  store %struct.variable_info* %79, %struct.variable_info** %p128, align 8, !dbg !5240
  br label %for.cond132, !dbg !5241

for.cond132:                                      ; preds = %for.inc135, %if.then127
  %80 = load %struct.variable_info*, %struct.variable_info** %p128, align 8, !dbg !5242
  %tobool133 = icmp ne %struct.variable_info* %80, null, !dbg !5244
  br i1 %tobool133, label %for.body134, label %for.end137, !dbg !5244

for.body134:                                      ; preds = %for.cond132
  %81 = load %struct.variable_info*, %struct.variable_info** %p128, align 8, !dbg !5245
  call void @make_constraint_from(%struct.variable_info* %81, i32 4), !dbg !5246
  br label %for.inc135, !dbg !5246

for.inc135:                                       ; preds = %for.body134
  %82 = load %struct.variable_info*, %struct.variable_info** %p128, align 8, !dbg !5247
  %next136 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %82, i32 0, i32 2, !dbg !5248
  %83 = load %struct.variable_info*, %struct.variable_info** %next136, align 8, !dbg !5248
  store %struct.variable_info* %83, %struct.variable_info** %p128, align 8, !dbg !5249
  br label %for.cond132, !dbg !5250, !llvm.loop !5251

for.end137:                                       ; preds = %for.cond132
  br label %if.end138, !dbg !5253

if.end138:                                        ; preds = %for.end137, %if.end124
  ret void, !dbg !5254
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5255 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5258, metadata !DIExpression()), !dbg !5259
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5260
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5260
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5261
  %conv = zext i1 %cmp to i32, !dbg !5261
  %conv1 = trunc i32 %conv to i8, !dbg !5262
  ret i8 %conv1, !dbg !5263
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5264 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5267, metadata !DIExpression()), !dbg !5268
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5269
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5269
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5270
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5270
  ret %union.gimple_statement_d* %1, !dbg !5271
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !5272 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5276, metadata !DIExpression()), !dbg !5277
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5278
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !5279
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !5280
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5280
  ret %union.tree_node* %1, !dbg !5281
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_func_aliases(%union.gimple_statement_d* %origt) #0 !dbg !5282 {
entry:
  %origt.addr = alloca %union.gimple_statement_d*, align 8
  %t = alloca %union.gimple_statement_d*, align 8
  %lhsc = alloca %struct.VEC_ce_s_heap*, align 8
  %rhsc = alloca %struct.VEC_ce_s_heap*, align 8
  %c = alloca %struct.constraint_expr*, align 8
  %i = alloca i64, align 8
  %j = alloca i32, align 4
  %strippedrhs = alloca %union.tree_node*, align 8
  %c2 = alloca %struct.constraint_expr*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %dest = alloca %union.tree_node*, align 8
  %src = alloca %union.tree_node*, align 8
  %res136 = alloca %union.tree_node*, align 8
  %dest138 = alloca %union.tree_node*, align 8
  %i140 = alloca i32, align 4
  %lhsp = alloca %struct.constraint_expr*, align 8
  %ac = alloca %struct.constraint_expr, align 8
  %rhsc179 = alloca %struct.VEC_ce_s_heap*, align 8
  %flags = alloca i32, align 4
  %lhsop = alloca %union.tree_node*, align 8
  %fi = alloca %struct.variable_info*, align 8
  %i210 = alloca i32, align 4
  %j211 = alloca i64, align 8
  %decl = alloca %union.tree_node*, align 8
  %lhs = alloca %struct.constraint_expr, align 8
  %rhsp = alloca %struct.constraint_expr*, align 8
  %arg = alloca %union.tree_node*, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  %lhsp280 = alloca %struct.constraint_expr*, align 8
  %j281 = alloca i32, align 4
  %lhsop328 = alloca %union.tree_node*, align 8
  %rhsop = alloca %union.tree_node*, align 8
  %temp = alloca %struct.constraint_expr, align 8
  %i580 = alloca i32, align 4
  %noutputs = alloca i32, align 4
  %oconstraints = alloca i8**, align 8
  %constraint = alloca i8*, align 8
  %allows_mem = alloca i8, align 1
  %allows_reg = alloca i8, align 1
  %is_inout = alloca i8, align 1
  %link = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %lhsc607 = alloca %struct.VEC_ce_s_heap*, align 8
  %rhsc608 = alloca %struct.constraint_expr, align 8
  %lhsp609 = alloca %struct.constraint_expr*, align 8
  %j610 = alloca i32, align 4
  %link637 = alloca %union.tree_node*, align 8
  %op639 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %origt, %union.gimple_statement_d** %origt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %origt.addr, metadata !5285, metadata !DIExpression()), !dbg !5286
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t, metadata !5287, metadata !DIExpression()), !dbg !5288
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %origt.addr, align 8, !dbg !5289
  store %union.gimple_statement_d* %0, %union.gimple_statement_d** %t, align 8, !dbg !5288
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %lhsc, metadata !5290, metadata !DIExpression()), !dbg !5291
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5291
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %rhsc, metadata !5292, metadata !DIExpression()), !dbg !5293
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5293
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %c, metadata !5294, metadata !DIExpression()), !dbg !5296
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5297
  %call = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5299
  %cmp = icmp eq i32 %call, 16, !dbg !5300
  br i1 %cmp, label %if.then, label %if.else, !dbg !5301

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5302
  %call1 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %2), !dbg !5302
  %common = bitcast %union.tree_node* %call1 to %struct.tree_common*, !dbg !5302
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5302
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5302
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5302
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5302
  %bf.load = load i64, i64* %4, align 8, !dbg !5302
  %bf.clear = and i64 %bf.load, 65535, !dbg !5302
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5302
  %cmp2 = icmp eq i32 %bf.cast, 15, !dbg !5302
  br i1 %cmp2, label %cond.true, label %lor.lhs.false, !dbg !5302

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5302
  %call3 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %5), !dbg !5302
  %common4 = bitcast %union.tree_node* %call3 to %struct.tree_common*, !dbg !5302
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !5302
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !5302
  %base6 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5302
  %7 = bitcast %struct.tree_base* %base6 to i64*, !dbg !5302
  %bf.load7 = load i64, i64* %7, align 8, !dbg !5302
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !5302
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5302
  %cmp10 = icmp eq i32 %bf.cast9, 16, !dbg !5302
  br i1 %cmp10, label %cond.true, label %lor.lhs.false11, !dbg !5302

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5302
  %call12 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %8), !dbg !5302
  %common13 = bitcast %union.tree_node* %call12 to %struct.tree_common*, !dbg !5302
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !5302
  %9 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !5302
  %base15 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5302
  %10 = bitcast %struct.tree_base* %base15 to i64*, !dbg !5302
  %bf.load16 = load i64, i64* %10, align 8, !dbg !5302
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !5302
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !5302
  %cmp19 = icmp eq i32 %bf.cast18, 17, !dbg !5302
  br i1 %cmp19, label %cond.true, label %lor.lhs.false20, !dbg !5302

lor.lhs.false20:                                  ; preds = %lor.lhs.false11
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5302
  %call21 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %11), !dbg !5302
  %common22 = bitcast %union.tree_node* %call21 to %struct.tree_common*, !dbg !5302
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !5302
  %12 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !5302
  %base24 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5302
  %13 = bitcast %struct.tree_base* %base24 to i64*, !dbg !5302
  %bf.load25 = load i64, i64* %13, align 8, !dbg !5302
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !5302
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !5302
  %cmp28 = icmp eq i32 %bf.cast27, 18, !dbg !5302
  br i1 %cmp28, label %cond.true, label %cond.false, !dbg !5302

cond.true:                                        ; preds = %lor.lhs.false20, %lor.lhs.false11, %lor.lhs.false, %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 3630, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5302
  br label %cond.end, !dbg !5302

cond.false:                                       ; preds = %lor.lhs.false20
  br label %cond.end, !dbg !5302

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5302
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5304
  %call29 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %14), !dbg !5306
  %call30 = call zeroext i8 @could_have_pointers(%union.tree_node* %call29), !dbg !5307
  %tobool = icmp ne i8 %call30, 0, !dbg !5307
  br i1 %tobool, label %if.then31, label %if.end, !dbg !5308

if.then31:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5309, metadata !DIExpression()), !dbg !5311
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5312, metadata !DIExpression()), !dbg !5313
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5314
  %call32 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %15), !dbg !5315
  call void @get_constraint_for(%union.tree_node* %call32, %struct.VEC_ce_s_heap** %lhsc), !dbg !5316
  store i64 0, i64* %i, align 8, !dbg !5317
  br label %for.cond, !dbg !5319

for.cond:                                         ; preds = %for.inc74, %if.then31
  %16 = load i64, i64* %i, align 8, !dbg !5320
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5322
  %call33 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %17), !dbg !5323
  %conv = zext i32 %call33 to i64, !dbg !5323
  %cmp34 = icmp ult i64 %16, %conv, !dbg !5324
  br i1 %cmp34, label %for.body, label %for.end76, !dbg !5325

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %strippedrhs, metadata !5326, metadata !DIExpression()), !dbg !5328
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5329
  %19 = load i64, i64* %i, align 8, !dbg !5329
  %conv36 = trunc i64 %19 to i32, !dbg !5329
  %call37 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %18, i32 %conv36), !dbg !5329
  %call38 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call37), !dbg !5329
  store %union.tree_node* %call38, %union.tree_node** %strippedrhs, align 8, !dbg !5328
  %20 = load %union.tree_node*, %union.tree_node** %strippedrhs, align 8, !dbg !5330
  %call39 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %20), !dbg !5330
  store %union.tree_node* %call39, %union.tree_node** %strippedrhs, align 8, !dbg !5330
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5331
  %22 = load i64, i64* %i, align 8, !dbg !5332
  %call40 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %21, i64 %22), !dbg !5333
  call void @get_constraint_for(%union.tree_node* %call40, %struct.VEC_ce_s_heap** %rhsc), !dbg !5334
  store i32 0, i32* %j, align 4, !dbg !5335
  br label %for.cond41, !dbg !5337

for.cond41:                                       ; preds = %for.inc, %for.body
  %23 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5338
  %tobool42 = icmp ne %struct.VEC_ce_s_heap* %23, null, !dbg !5338
  br i1 %tobool42, label %cond.true43, label %cond.false45, !dbg !5338

cond.true43:                                      ; preds = %for.cond41
  %24 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5338
  %base44 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %24, i32 0, i32 0, !dbg !5338
  br label %cond.end46, !dbg !5338

cond.false45:                                     ; preds = %for.cond41
  br label %cond.end46, !dbg !5338

cond.end46:                                       ; preds = %cond.false45, %cond.true43
  %cond47 = phi %struct.VEC_ce_s_base* [ %base44, %cond.true43 ], [ null, %cond.false45 ], !dbg !5338
  %25 = load i32, i32* %j, align 4, !dbg !5338
  %call48 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond47, i32 %25, %struct.constraint_expr** %c), !dbg !5338
  %tobool49 = icmp ne i32 %call48, 0, !dbg !5340
  br i1 %tobool49, label %for.body50, label %for.end, !dbg !5340

for.body50:                                       ; preds = %cond.end46
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %c2, metadata !5341, metadata !DIExpression()), !dbg !5343
  br label %while.cond, !dbg !5344

while.cond:                                       ; preds = %cond.end72, %for.body50
  %26 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5345
  %tobool51 = icmp ne %struct.VEC_ce_s_heap* %26, null, !dbg !5345
  br i1 %tobool51, label %cond.true52, label %cond.false54, !dbg !5345

cond.true52:                                      ; preds = %while.cond
  %27 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5345
  %base53 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %27, i32 0, i32 0, !dbg !5345
  br label %cond.end55, !dbg !5345

cond.false54:                                     ; preds = %while.cond
  br label %cond.end55, !dbg !5345

cond.end55:                                       ; preds = %cond.false54, %cond.true52
  %cond56 = phi %struct.VEC_ce_s_base* [ %base53, %cond.true52 ], [ null, %cond.false54 ], !dbg !5345
  %call57 = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond56), !dbg !5345
  %cmp58 = icmp ugt i32 %call57, 0, !dbg !5346
  br i1 %cmp58, label %while.body, label %while.end, !dbg !5344

while.body:                                       ; preds = %cond.end55
  %28 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5347
  %tobool60 = icmp ne %struct.VEC_ce_s_heap* %28, null, !dbg !5347
  br i1 %tobool60, label %cond.true61, label %cond.false63, !dbg !5347

cond.true61:                                      ; preds = %while.body
  %29 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5347
  %base62 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %29, i32 0, i32 0, !dbg !5347
  br label %cond.end64, !dbg !5347

cond.false63:                                     ; preds = %while.body
  br label %cond.end64, !dbg !5347

cond.end64:                                       ; preds = %cond.false63, %cond.true61
  %cond65 = phi %struct.VEC_ce_s_base* [ %base62, %cond.true61 ], [ null, %cond.false63 ], !dbg !5347
  %call66 = call %struct.constraint_expr* @VEC_ce_s_base_last(%struct.VEC_ce_s_base* %cond65), !dbg !5347
  store %struct.constraint_expr* %call66, %struct.constraint_expr** %c2, align 8, !dbg !5349
  %30 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !5350
  %31 = load %struct.constraint_expr*, %struct.constraint_expr** %c2, align 8, !dbg !5351
  %32 = bitcast %struct.constraint_expr* %30 to { i64, i64 }*, !dbg !5352
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 0, !dbg !5352
  %34 = load i64, i64* %33, align 8, !dbg !5352
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 1, !dbg !5352
  %36 = load i64, i64* %35, align 8, !dbg !5352
  %37 = bitcast %struct.constraint_expr* %31 to { i64, i64 }*, !dbg !5352
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 0, !dbg !5352
  %39 = load i64, i64* %38, align 8, !dbg !5352
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 1, !dbg !5352
  %41 = load i64, i64* %40, align 8, !dbg !5352
  %call67 = call %struct.constraint* @new_constraint(i64 %34, i64 %36, i64 %39, i64 %41), !dbg !5352
  call void @process_constraint(%struct.constraint* %call67), !dbg !5353
  %42 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5354
  %tobool68 = icmp ne %struct.VEC_ce_s_heap* %42, null, !dbg !5354
  br i1 %tobool68, label %cond.true69, label %cond.false71, !dbg !5354

cond.true69:                                      ; preds = %cond.end64
  %43 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5354
  %base70 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %43, i32 0, i32 0, !dbg !5354
  br label %cond.end72, !dbg !5354

cond.false71:                                     ; preds = %cond.end64
  br label %cond.end72, !dbg !5354

cond.end72:                                       ; preds = %cond.false71, %cond.true69
  %cond73 = phi %struct.VEC_ce_s_base* [ %base70, %cond.true69 ], [ null, %cond.false71 ], !dbg !5354
  call void @VEC_ce_s_base_pop(%struct.VEC_ce_s_base* %cond73), !dbg !5354
  br label %while.cond, !dbg !5344, !llvm.loop !5355

while.end:                                        ; preds = %cond.end55
  br label %for.inc, !dbg !5357

for.inc:                                          ; preds = %while.end
  %44 = load i32, i32* %j, align 4, !dbg !5358
  %inc = add i32 %44, 1, !dbg !5358
  store i32 %inc, i32* %j, align 4, !dbg !5358
  br label %for.cond41, !dbg !5359, !llvm.loop !5360

for.end:                                          ; preds = %cond.end46
  br label %for.inc74, !dbg !5362

for.inc74:                                        ; preds = %for.end
  %45 = load i64, i64* %i, align 8, !dbg !5363
  %inc75 = add i64 %45, 1, !dbg !5363
  store i64 %inc75, i64* %i, align 8, !dbg !5363
  br label %for.cond, !dbg !5364, !llvm.loop !5365

for.end76:                                        ; preds = %for.cond
  br label %if.end, !dbg !5367

if.end:                                           ; preds = %for.end76, %cond.end
  br label %if.end673, !dbg !5368

if.else:                                          ; preds = %entry
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5369
  %call77 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %46), !dbg !5371
  %tobool78 = icmp ne i8 %call77, 0, !dbg !5371
  br i1 %tobool78, label %if.then79, label %if.else318, !dbg !5372

if.then79:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !5373, metadata !DIExpression()), !dbg !5375
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5376
  %call80 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %47), !dbg !5377
  store %union.tree_node* %call80, %union.tree_node** %fndecl, align 8, !dbg !5375
  %48 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5378
  %cmp81 = icmp ne %union.tree_node* %48, null, !dbg !5380
  br i1 %cmp81, label %land.lhs.true, label %if.end171, !dbg !5381

land.lhs.true:                                    ; preds = %if.then79
  %49 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5382
  %function_decl = bitcast %union.tree_node* %49 to %struct.tree_function_decl*, !dbg !5382
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5382
  %bf.load83 = load i32, i32* %built_in_class, align 8, !dbg !5382
  %bf.lshr = lshr i32 %bf.load83, 11, !dbg !5382
  %bf.clear84 = and i32 %bf.lshr, 3, !dbg !5382
  %cmp85 = icmp eq i32 %bf.clear84, 3, !dbg !5383
  br i1 %cmp85, label %if.then87, label %if.end171, !dbg !5384

if.then87:                                        ; preds = %land.lhs.true
  %50 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5385
  %function_decl88 = bitcast %union.tree_node* %50 to %struct.tree_function_decl*, !dbg !5385
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl88, i32 0, i32 5, !dbg !5385
  %bf.load89 = load i32, i32* %function_code, align 8, !dbg !5385
  %bf.clear90 = and i32 %bf.load89, 2047, !dbg !5385
  switch i32 %bf.clear90, label %sw.default [
    i32 341, label %sw.bb
    i32 349, label %sw.bb
    i32 325, label %sw.bb
    i32 330, label %sw.bb
    i32 331, label %sw.bb
    i32 332, label %sw.bb
    i32 335, label %sw.bb
    i32 336, label %sw.bb
    i32 338, label %sw.bb
    i32 347, label %sw.bb
    i32 333, label %sw.bb135
    i32 220, label %sw.bb170
    i32 221, label %sw.bb170
    i32 222, label %sw.bb170
    i32 78, label %sw.bb170
    i32 79, label %sw.bb170
    i32 80, label %sw.bb170
    i32 84, label %sw.bb170
    i32 85, label %sw.bb170
    i32 86, label %sw.bb170
    i32 123, label %sw.bb170
    i32 124, label %sw.bb170
    i32 125, label %sw.bb170
    i32 159, label %sw.bb170
    i32 160, label %sw.bb170
    i32 161, label %sw.bb170
    i32 192, label %sw.bb170
    i32 193, label %sw.bb170
    i32 194, label %sw.bb170
    i32 455, label %sw.bb170
  ], !dbg !5386

sw.bb:                                            ; preds = %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !5387, metadata !DIExpression()), !dbg !5390
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5391
  %call91 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %51), !dbg !5392
  store %union.tree_node* %call91, %union.tree_node** %res, align 8, !dbg !5390
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !5393, metadata !DIExpression()), !dbg !5394
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5395
  %53 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5396
  %function_decl92 = bitcast %union.tree_node* %53 to %struct.tree_function_decl*, !dbg !5396
  %function_code93 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl92, i32 0, i32 5, !dbg !5396
  %bf.load94 = load i32, i32* %function_code93, align 8, !dbg !5396
  %bf.clear95 = and i32 %bf.load94, 2047, !dbg !5396
  %cmp96 = icmp eq i32 %bf.clear95, 325, !dbg !5397
  %54 = zext i1 %cmp96 to i64, !dbg !5396
  %cond98 = select i1 %cmp96, i32 1, i32 0, !dbg !5396
  %call99 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %52, i32 %cond98), !dbg !5398
  store %union.tree_node* %call99, %union.tree_node** %dest, align 8, !dbg !5394
  call void @llvm.dbg.declare(metadata %union.tree_node** %src, metadata !5399, metadata !DIExpression()), !dbg !5400
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5401
  %56 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5402
  %function_decl100 = bitcast %union.tree_node* %56 to %struct.tree_function_decl*, !dbg !5402
  %function_code101 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl100, i32 0, i32 5, !dbg !5402
  %bf.load102 = load i32, i32* %function_code101, align 8, !dbg !5402
  %bf.clear103 = and i32 %bf.load102, 2047, !dbg !5402
  %cmp104 = icmp eq i32 %bf.clear103, 325, !dbg !5403
  %57 = zext i1 %cmp104 to i64, !dbg !5402
  %cond106 = select i1 %cmp104, i32 0, i32 1, !dbg !5402
  %call107 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %55, i32 %cond106), !dbg !5404
  store %union.tree_node* %call107, %union.tree_node** %src, align 8, !dbg !5400
  %58 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5405
  %cmp108 = icmp ne %union.tree_node* %58, null, !dbg !5407
  br i1 %cmp108, label %if.then110, label %if.end134, !dbg !5408

if.then110:                                       ; preds = %sw.bb
  %59 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5409
  call void @get_constraint_for(%union.tree_node* %59, %struct.VEC_ce_s_heap** %lhsc), !dbg !5411
  %60 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5412
  %function_decl111 = bitcast %union.tree_node* %60 to %struct.tree_function_decl*, !dbg !5412
  %function_code112 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl111, i32 0, i32 5, !dbg !5412
  %bf.load113 = load i32, i32* %function_code112, align 8, !dbg !5412
  %bf.clear114 = and i32 %bf.load113, 2047, !dbg !5412
  %cmp115 = icmp eq i32 %bf.clear114, 332, !dbg !5414
  br i1 %cmp115, label %if.then131, label %lor.lhs.false117, !dbg !5415

lor.lhs.false117:                                 ; preds = %if.then110
  %61 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5416
  %function_decl118 = bitcast %union.tree_node* %61 to %struct.tree_function_decl*, !dbg !5416
  %function_code119 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl118, i32 0, i32 5, !dbg !5416
  %bf.load120 = load i32, i32* %function_code119, align 8, !dbg !5416
  %bf.clear121 = and i32 %bf.load120, 2047, !dbg !5416
  %cmp122 = icmp eq i32 %bf.clear121, 335, !dbg !5417
  br i1 %cmp122, label %if.then131, label %lor.lhs.false124, !dbg !5418

lor.lhs.false124:                                 ; preds = %lor.lhs.false117
  %62 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5419
  %function_decl125 = bitcast %union.tree_node* %62 to %struct.tree_function_decl*, !dbg !5419
  %function_code126 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl125, i32 0, i32 5, !dbg !5419
  %bf.load127 = load i32, i32* %function_code126, align 8, !dbg !5419
  %bf.clear128 = and i32 %bf.load127, 2047, !dbg !5419
  %cmp129 = icmp eq i32 %bf.clear128, 336, !dbg !5420
  br i1 %cmp129, label %if.then131, label %if.else132, !dbg !5421

if.then131:                                       ; preds = %lor.lhs.false124, %lor.lhs.false117, %if.then110
  %63 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !5422
  call void @get_constraint_for_ptr_offset(%union.tree_node* %63, %union.tree_node* null, %struct.VEC_ce_s_heap** %rhsc), !dbg !5423
  br label %if.end133, !dbg !5423

if.else132:                                       ; preds = %lor.lhs.false124
  %64 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !5424
  call void @get_constraint_for(%union.tree_node* %64, %struct.VEC_ce_s_heap** %rhsc), !dbg !5425
  br label %if.end133

if.end133:                                        ; preds = %if.else132, %if.then131
  %65 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5426
  %66 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5427
  call void @process_all_all_constraints(%struct.VEC_ce_s_heap* %65, %struct.VEC_ce_s_heap* %66), !dbg !5428
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %lhsc), !dbg !5429
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %rhsc), !dbg !5430
  br label %if.end134, !dbg !5431

if.end134:                                        ; preds = %if.end133, %sw.bb
  %67 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !5432
  call void @get_constraint_for_ptr_offset(%union.tree_node* %67, %union.tree_node* null, %struct.VEC_ce_s_heap** %lhsc), !dbg !5433
  %68 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !5434
  call void @get_constraint_for_ptr_offset(%union.tree_node* %68, %union.tree_node* null, %struct.VEC_ce_s_heap** %rhsc), !dbg !5435
  call void @do_deref(%struct.VEC_ce_s_heap** %lhsc), !dbg !5436
  call void @do_deref(%struct.VEC_ce_s_heap** %rhsc), !dbg !5437
  %69 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5438
  %70 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5439
  call void @process_all_all_constraints(%struct.VEC_ce_s_heap* %69, %struct.VEC_ce_s_heap* %70), !dbg !5440
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %lhsc), !dbg !5441
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %rhsc), !dbg !5442
  br label %return, !dbg !5443

sw.bb135:                                         ; preds = %if.then87
  call void @llvm.dbg.declare(metadata %union.tree_node** %res136, metadata !5444, metadata !DIExpression()), !dbg !5446
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5447
  %call137 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %71), !dbg !5448
  store %union.tree_node* %call137, %union.tree_node** %res136, align 8, !dbg !5446
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest138, metadata !5449, metadata !DIExpression()), !dbg !5450
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5451
  %call139 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %72, i32 0), !dbg !5452
  store %union.tree_node* %call139, %union.tree_node** %dest138, align 8, !dbg !5450
  call void @llvm.dbg.declare(metadata i32* %i140, metadata !5453, metadata !DIExpression()), !dbg !5454
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %lhsp, metadata !5455, metadata !DIExpression()), !dbg !5457
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %ac, metadata !5458, metadata !DIExpression()), !dbg !5459
  %73 = load %union.tree_node*, %union.tree_node** %res136, align 8, !dbg !5460
  %cmp141 = icmp ne %union.tree_node* %73, null, !dbg !5462
  br i1 %cmp141, label %if.then143, label %if.end144, !dbg !5463

if.then143:                                       ; preds = %sw.bb135
  %74 = load %union.tree_node*, %union.tree_node** %res136, align 8, !dbg !5464
  call void @get_constraint_for(%union.tree_node* %74, %struct.VEC_ce_s_heap** %lhsc), !dbg !5466
  %75 = load %union.tree_node*, %union.tree_node** %dest138, align 8, !dbg !5467
  call void @get_constraint_for(%union.tree_node* %75, %struct.VEC_ce_s_heap** %rhsc), !dbg !5468
  %76 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5469
  %77 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5470
  call void @process_all_all_constraints(%struct.VEC_ce_s_heap* %76, %struct.VEC_ce_s_heap* %77), !dbg !5471
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %lhsc), !dbg !5472
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %rhsc), !dbg !5473
  br label %if.end144, !dbg !5474

if.end144:                                        ; preds = %if.then143, %sw.bb135
  %78 = load %union.tree_node*, %union.tree_node** %dest138, align 8, !dbg !5475
  call void @get_constraint_for_ptr_offset(%union.tree_node* %78, %union.tree_node* null, %struct.VEC_ce_s_heap** %lhsc), !dbg !5476
  call void @do_deref(%struct.VEC_ce_s_heap** %lhsc), !dbg !5477
  %79 = load i32, i32* @flag_delete_null_pointer_checks, align 4, !dbg !5478
  %tobool145 = icmp ne i32 %79, 0, !dbg !5478
  br i1 %tobool145, label %land.lhs.true146, label %if.else152, !dbg !5480

land.lhs.true146:                                 ; preds = %if.end144
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5481
  %call147 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %80, i32 1), !dbg !5482
  %call148 = call i32 @integer_zerop(%union.tree_node* %call147), !dbg !5483
  %tobool149 = icmp ne i32 %call148, 0, !dbg !5483
  br i1 %tobool149, label %if.then150, label %if.else152, !dbg !5484

if.then150:                                       ; preds = %land.lhs.true146
  %type151 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %ac, i32 0, i32 0, !dbg !5485
  store i32 2, i32* %type151, align 8, !dbg !5487
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %ac, i32 0, i32 1, !dbg !5488
  store i32 0, i32* %var, align 4, !dbg !5489
  br label %if.end155, !dbg !5490

if.else152:                                       ; preds = %land.lhs.true146, %if.end144
  %type153 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %ac, i32 0, i32 0, !dbg !5491
  store i32 0, i32* %type153, align 8, !dbg !5493
  %var154 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %ac, i32 0, i32 1, !dbg !5494
  store i32 7, i32* %var154, align 4, !dbg !5495
  br label %if.end155

if.end155:                                        ; preds = %if.else152, %if.then150
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %ac, i32 0, i32 2, !dbg !5496
  store i64 0, i64* %offset, align 8, !dbg !5497
  store i32 0, i32* %i140, align 4, !dbg !5498
  br label %for.cond156, !dbg !5500

for.cond156:                                      ; preds = %for.inc167, %if.end155
  %81 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5501
  %tobool157 = icmp ne %struct.VEC_ce_s_heap* %81, null, !dbg !5501
  br i1 %tobool157, label %cond.true158, label %cond.false160, !dbg !5501

cond.true158:                                     ; preds = %for.cond156
  %82 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5501
  %base159 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %82, i32 0, i32 0, !dbg !5501
  br label %cond.end161, !dbg !5501

cond.false160:                                    ; preds = %for.cond156
  br label %cond.end161, !dbg !5501

cond.end161:                                      ; preds = %cond.false160, %cond.true158
  %cond162 = phi %struct.VEC_ce_s_base* [ %base159, %cond.true158 ], [ null, %cond.false160 ], !dbg !5501
  %83 = load i32, i32* %i140, align 4, !dbg !5501
  %call163 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond162, i32 %83, %struct.constraint_expr** %lhsp), !dbg !5501
  %tobool164 = icmp ne i32 %call163, 0, !dbg !5503
  br i1 %tobool164, label %for.body165, label %for.end169, !dbg !5503

for.body165:                                      ; preds = %cond.end161
  %84 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp, align 8, !dbg !5504
  %85 = bitcast %struct.constraint_expr* %84 to { i64, i64 }*, !dbg !5505
  %86 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %85, i32 0, i32 0, !dbg !5505
  %87 = load i64, i64* %86, align 8, !dbg !5505
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %85, i32 0, i32 1, !dbg !5505
  %89 = load i64, i64* %88, align 8, !dbg !5505
  %90 = bitcast %struct.constraint_expr* %ac to { i64, i64 }*, !dbg !5505
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %90, i32 0, i32 0, !dbg !5505
  %92 = load i64, i64* %91, align 8, !dbg !5505
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %90, i32 0, i32 1, !dbg !5505
  %94 = load i64, i64* %93, align 8, !dbg !5505
  %call166 = call %struct.constraint* @new_constraint(i64 %87, i64 %89, i64 %92, i64 %94), !dbg !5505
  call void @process_constraint(%struct.constraint* %call166), !dbg !5506
  br label %for.inc167, !dbg !5506

for.inc167:                                       ; preds = %for.body165
  %95 = load i32, i32* %i140, align 4, !dbg !5507
  %inc168 = add i32 %95, 1, !dbg !5507
  store i32 %inc168, i32* %i140, align 4, !dbg !5507
  br label %for.cond156, !dbg !5508, !llvm.loop !5509

for.end169:                                       ; preds = %cond.end161
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %lhsc), !dbg !5511
  br label %return, !dbg !5512

sw.bb170:                                         ; preds = %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87, %if.then87
  br label %return, !dbg !5513

sw.default:                                       ; preds = %if.then87
  br label %sw.epilog, !dbg !5514

sw.epilog:                                        ; preds = %sw.default
  br label %if.end171, !dbg !5514

if.end171:                                        ; preds = %sw.epilog, %land.lhs.true, %if.then79
  %96 = load i32, i32* @in_ipa_mode, align 4, !dbg !5515
  %tobool172 = icmp ne i32 %96, 0, !dbg !5515
  br i1 %tobool172, label %lor.lhs.false173, label %if.then178, !dbg !5517

lor.lhs.false173:                                 ; preds = %if.end171
  %97 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5518
  %tobool174 = icmp ne %union.tree_node* %97, null, !dbg !5518
  br i1 %tobool174, label %land.lhs.true175, label %if.else209, !dbg !5519

land.lhs.true175:                                 ; preds = %lor.lhs.false173
  %98 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5520
  %call176 = call %struct.variable_info* @lookup_vi_for_tree(%union.tree_node* %98), !dbg !5521
  %tobool177 = icmp ne %struct.variable_info* %call176, null, !dbg !5521
  br i1 %tobool177, label %if.else209, label %if.then178, !dbg !5522

if.then178:                                       ; preds = %land.lhs.true175, %if.end171
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %rhsc179, metadata !5523, metadata !DIExpression()), !dbg !5525
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %rhsc179, align 8, !dbg !5525
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !5526, metadata !DIExpression()), !dbg !5527
  %99 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5528
  %call180 = call i32 @gimple_call_flags(%union.gimple_statement_d* %99), !dbg !5529
  store i32 %call180, i32* %flags, align 4, !dbg !5527
  %100 = load i32, i32* %flags, align 4, !dbg !5530
  %and = and i32 %100, 513, !dbg !5532
  %tobool181 = icmp ne i32 %and, 0, !dbg !5532
  br i1 %tobool181, label %if.then182, label %if.else192, !dbg !5533

if.then182:                                       ; preds = %if.then178
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5534
  %call183 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %101), !dbg !5537
  %tobool184 = icmp ne %union.tree_node* %call183, null, !dbg !5537
  br i1 %tobool184, label %land.lhs.true185, label %if.end191, !dbg !5538

land.lhs.true185:                                 ; preds = %if.then182
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5539
  %call186 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %102), !dbg !5540
  %call187 = call zeroext i8 @could_have_pointers(%union.tree_node* %call186), !dbg !5541
  %conv188 = zext i8 %call187 to i32, !dbg !5541
  %tobool189 = icmp ne i32 %conv188, 0, !dbg !5541
  br i1 %tobool189, label %if.then190, label %if.end191, !dbg !5542

if.then190:                                       ; preds = %land.lhs.true185
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5543
  call void @handle_const_call(%union.gimple_statement_d* %103, %struct.VEC_ce_s_heap** %rhsc179), !dbg !5544
  br label %if.end191, !dbg !5544

if.end191:                                        ; preds = %if.then190, %land.lhs.true185, %if.then182
  br label %if.end198, !dbg !5545

if.else192:                                       ; preds = %if.then178
  %104 = load i32, i32* %flags, align 4, !dbg !5546
  %and193 = and i32 %104, 6, !dbg !5548
  %tobool194 = icmp ne i32 %and193, 0, !dbg !5548
  br i1 %tobool194, label %if.then195, label %if.else196, !dbg !5549

if.then195:                                       ; preds = %if.else192
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5550
  call void @handle_pure_call(%union.gimple_statement_d* %105, %struct.VEC_ce_s_heap** %rhsc179), !dbg !5551
  br label %if.end197, !dbg !5551

if.else196:                                       ; preds = %if.else192
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5552
  call void @handle_rhs_call(%union.gimple_statement_d* %106, %struct.VEC_ce_s_heap** %rhsc179), !dbg !5553
  br label %if.end197

if.end197:                                        ; preds = %if.else196, %if.then195
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %if.end191
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5554
  %call199 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %107), !dbg !5556
  %tobool200 = icmp ne %union.tree_node* %call199, null, !dbg !5556
  br i1 %tobool200, label %land.lhs.true201, label %if.end208, !dbg !5557

land.lhs.true201:                                 ; preds = %if.end198
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5558
  %call202 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %108), !dbg !5559
  %call203 = call zeroext i8 @could_have_pointers(%union.tree_node* %call202), !dbg !5560
  %conv204 = zext i8 %call203 to i32, !dbg !5560
  %tobool205 = icmp ne i32 %conv204, 0, !dbg !5560
  br i1 %tobool205, label %if.then206, label %if.end208, !dbg !5561

if.then206:                                       ; preds = %land.lhs.true201
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5562
  %call207 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %109), !dbg !5563
  %110 = load i32, i32* %flags, align 4, !dbg !5564
  %111 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc179, align 8, !dbg !5565
  %112 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5566
  call void @handle_lhs_call(%union.tree_node* %call207, i32 %110, %struct.VEC_ce_s_heap* %111, %union.tree_node* %112), !dbg !5567
  br label %if.end208, !dbg !5567

if.end208:                                        ; preds = %if.then206, %land.lhs.true201, %if.end198
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %rhsc179), !dbg !5568
  br label %if.end317, !dbg !5569

if.else209:                                       ; preds = %land.lhs.true175, %lor.lhs.false173
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhsop, metadata !5570, metadata !DIExpression()), !dbg !5572
  call void @llvm.dbg.declare(metadata %struct.variable_info** %fi, metadata !5573, metadata !DIExpression()), !dbg !5574
  call void @llvm.dbg.declare(metadata i32* %i210, metadata !5575, metadata !DIExpression()), !dbg !5576
  store i32 1, i32* %i210, align 4, !dbg !5576
  call void @llvm.dbg.declare(metadata i64* %j211, metadata !5577, metadata !DIExpression()), !dbg !5578
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !5579, metadata !DIExpression()), !dbg !5580
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5581
  %call212 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %113), !dbg !5582
  store %union.tree_node* %call212, %union.tree_node** %lhsop, align 8, !dbg !5583
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5584
  %call213 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %114), !dbg !5585
  store %union.tree_node* %call213, %union.tree_node** %decl, align 8, !dbg !5586
  %115 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5587
  %tobool214 = icmp ne %union.tree_node* %115, null, !dbg !5587
  br i1 %tobool214, label %if.then215, label %if.else217, !dbg !5589

if.then215:                                       ; preds = %if.else209
  %116 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5590
  %call216 = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %116), !dbg !5591
  store %struct.variable_info* %call216, %struct.variable_info** %fi, align 8, !dbg !5592
  br label %if.end220, !dbg !5593

if.else217:                                       ; preds = %if.else209
  %117 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5594
  %call218 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %117), !dbg !5596
  store %union.tree_node* %call218, %union.tree_node** %decl, align 8, !dbg !5597
  %118 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5598
  %call219 = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %118), !dbg !5599
  store %struct.variable_info* %call219, %struct.variable_info** %fi, align 8, !dbg !5600
  br label %if.end220

if.end220:                                        ; preds = %if.else217, %if.then215
  store i64 0, i64* %j211, align 8, !dbg !5601
  br label %for.cond221, !dbg !5603

for.cond221:                                      ; preds = %for.inc275, %if.end220
  %119 = load i64, i64* %j211, align 8, !dbg !5604
  %120 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5606
  %call222 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %120), !dbg !5607
  %conv223 = zext i32 %call222 to i64, !dbg !5607
  %cmp224 = icmp ult i64 %119, %conv223, !dbg !5608
  br i1 %cmp224, label %for.body226, label %for.end277, !dbg !5609

for.body226:                                      ; preds = %for.cond221
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !5610, metadata !DIExpression()), !dbg !5612
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %rhsp, metadata !5613, metadata !DIExpression()), !dbg !5614
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !5615, metadata !DIExpression()), !dbg !5616
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5617
  %122 = load i64, i64* %j211, align 8, !dbg !5618
  %conv227 = trunc i64 %122 to i32, !dbg !5618
  %call228 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %121, i32 %conv227), !dbg !5619
  store %union.tree_node* %call228, %union.tree_node** %arg, align 8, !dbg !5616
  %123 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5620
  call void @get_constraint_for(%union.tree_node* %123, %struct.VEC_ce_s_heap** %rhsc), !dbg !5621
  %124 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5622
  %base229 = bitcast %union.tree_node* %124 to %struct.tree_base*, !dbg !5622
  %125 = bitcast %struct.tree_base* %base229 to i64*, !dbg !5622
  %bf.load230 = load i64, i64* %125, align 8, !dbg !5622
  %bf.clear231 = and i64 %bf.load230, 65535, !dbg !5622
  %bf.cast232 = trunc i64 %bf.clear231 to i32, !dbg !5622
  %cmp233 = icmp ne i32 %bf.cast232, 29, !dbg !5624
  br i1 %cmp233, label %if.then235, label %if.else240, !dbg !5625

if.then235:                                       ; preds = %for.body226
  %type236 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !5626
  store i32 1, i32* %type236, align 8, !dbg !5628
  %126 = load %struct.variable_info*, %struct.variable_info** %fi, align 8, !dbg !5629
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %126, i32 0, i32 0, !dbg !5630
  %127 = load i32, i32* %id, align 8, !dbg !5630
  %var237 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !5631
  store i32 %127, i32* %var237, align 4, !dbg !5632
  %128 = load i32, i32* %i210, align 4, !dbg !5633
  %conv238 = sext i32 %128 to i64, !dbg !5633
  %offset239 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !5634
  store i64 %conv238, i64* %offset239, align 8, !dbg !5635
  br label %if.end247, !dbg !5636

if.else240:                                       ; preds = %for.body226
  %type241 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !5637
  store i32 0, i32* %type241, align 8, !dbg !5639
  %129 = load %struct.variable_info*, %struct.variable_info** %fi, align 8, !dbg !5640
  %130 = load i32, i32* %i210, align 4, !dbg !5641
  %conv242 = sext i32 %130 to i64, !dbg !5641
  %call243 = call %struct.variable_info* @first_vi_for_offset(%struct.variable_info* %129, i64 %conv242), !dbg !5642
  %id244 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call243, i32 0, i32 0, !dbg !5643
  %131 = load i32, i32* %id244, align 8, !dbg !5643
  %var245 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !5644
  store i32 %131, i32* %var245, align 4, !dbg !5645
  %offset246 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !5646
  store i64 0, i64* %offset246, align 8, !dbg !5647
  br label %if.end247

if.end247:                                        ; preds = %if.else240, %if.then235
  br label %while.cond248, !dbg !5648

while.cond248:                                    ; preds = %cond.end271, %if.end247
  %132 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5649
  %tobool249 = icmp ne %struct.VEC_ce_s_heap* %132, null, !dbg !5649
  br i1 %tobool249, label %cond.true250, label %cond.false252, !dbg !5649

cond.true250:                                     ; preds = %while.cond248
  %133 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5649
  %base251 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %133, i32 0, i32 0, !dbg !5649
  br label %cond.end253, !dbg !5649

cond.false252:                                    ; preds = %while.cond248
  br label %cond.end253, !dbg !5649

cond.end253:                                      ; preds = %cond.false252, %cond.true250
  %cond254 = phi %struct.VEC_ce_s_base* [ %base251, %cond.true250 ], [ null, %cond.false252 ], !dbg !5649
  %call255 = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond254), !dbg !5649
  %cmp256 = icmp ne i32 %call255, 0, !dbg !5650
  br i1 %cmp256, label %while.body258, label %while.end273, !dbg !5648

while.body258:                                    ; preds = %cond.end253
  %134 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5651
  %tobool259 = icmp ne %struct.VEC_ce_s_heap* %134, null, !dbg !5651
  br i1 %tobool259, label %cond.true260, label %cond.false262, !dbg !5651

cond.true260:                                     ; preds = %while.body258
  %135 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5651
  %base261 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %135, i32 0, i32 0, !dbg !5651
  br label %cond.end263, !dbg !5651

cond.false262:                                    ; preds = %while.body258
  br label %cond.end263, !dbg !5651

cond.end263:                                      ; preds = %cond.false262, %cond.true260
  %cond264 = phi %struct.VEC_ce_s_base* [ %base261, %cond.true260 ], [ null, %cond.false262 ], !dbg !5651
  %call265 = call %struct.constraint_expr* @VEC_ce_s_base_last(%struct.VEC_ce_s_base* %cond264), !dbg !5651
  store %struct.constraint_expr* %call265, %struct.constraint_expr** %rhsp, align 8, !dbg !5653
  %136 = load %struct.constraint_expr*, %struct.constraint_expr** %rhsp, align 8, !dbg !5654
  %137 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !5655
  %138 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %137, i32 0, i32 0, !dbg !5655
  %139 = load i64, i64* %138, align 8, !dbg !5655
  %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %137, i32 0, i32 1, !dbg !5655
  %141 = load i64, i64* %140, align 8, !dbg !5655
  %142 = bitcast %struct.constraint_expr* %136 to { i64, i64 }*, !dbg !5655
  %143 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %142, i32 0, i32 0, !dbg !5655
  %144 = load i64, i64* %143, align 8, !dbg !5655
  %145 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %142, i32 0, i32 1, !dbg !5655
  %146 = load i64, i64* %145, align 8, !dbg !5655
  %call266 = call %struct.constraint* @new_constraint(i64 %139, i64 %141, i64 %144, i64 %146), !dbg !5655
  call void @process_constraint(%struct.constraint* %call266), !dbg !5656
  %147 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5657
  %tobool267 = icmp ne %struct.VEC_ce_s_heap* %147, null, !dbg !5657
  br i1 %tobool267, label %cond.true268, label %cond.false270, !dbg !5657

cond.true268:                                     ; preds = %cond.end263
  %148 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5657
  %base269 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %148, i32 0, i32 0, !dbg !5657
  br label %cond.end271, !dbg !5657

cond.false270:                                    ; preds = %cond.end263
  br label %cond.end271, !dbg !5657

cond.end271:                                      ; preds = %cond.false270, %cond.true268
  %cond272 = phi %struct.VEC_ce_s_base* [ %base269, %cond.true268 ], [ null, %cond.false270 ], !dbg !5657
  call void @VEC_ce_s_base_pop(%struct.VEC_ce_s_base* %cond272), !dbg !5657
  br label %while.cond248, !dbg !5648, !llvm.loop !5658

while.end273:                                     ; preds = %cond.end253
  %149 = load i32, i32* %i210, align 4, !dbg !5660
  %inc274 = add nsw i32 %149, 1, !dbg !5660
  store i32 %inc274, i32* %i210, align 4, !dbg !5660
  br label %for.inc275, !dbg !5661

for.inc275:                                       ; preds = %while.end273
  %150 = load i64, i64* %j211, align 8, !dbg !5662
  %inc276 = add i64 %150, 1, !dbg !5662
  store i64 %inc276, i64* %j211, align 8, !dbg !5662
  br label %for.cond221, !dbg !5663, !llvm.loop !5664

for.end277:                                       ; preds = %for.cond221
  %151 = load %union.tree_node*, %union.tree_node** %lhsop, align 8, !dbg !5666
  %tobool278 = icmp ne %union.tree_node* %151, null, !dbg !5666
  br i1 %tobool278, label %if.then279, label %if.end316, !dbg !5668

if.then279:                                       ; preds = %for.end277
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !5669, metadata !DIExpression()), !dbg !5671
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %lhsp280, metadata !5672, metadata !DIExpression()), !dbg !5673
  call void @llvm.dbg.declare(metadata i32* %j281, metadata !5674, metadata !DIExpression()), !dbg !5675
  store i32 0, i32* %j281, align 4, !dbg !5675
  %152 = load %union.tree_node*, %union.tree_node** %lhsop, align 8, !dbg !5676
  call void @get_constraint_for(%union.tree_node* %152, %struct.VEC_ce_s_heap** %lhsc), !dbg !5677
  %153 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5678
  %base282 = bitcast %union.tree_node* %153 to %struct.tree_base*, !dbg !5678
  %154 = bitcast %struct.tree_base* %base282 to i64*, !dbg !5678
  %bf.load283 = load i64, i64* %154, align 8, !dbg !5678
  %bf.clear284 = and i64 %bf.load283, 65535, !dbg !5678
  %bf.cast285 = trunc i64 %bf.clear284 to i32, !dbg !5678
  %cmp286 = icmp ne i32 %bf.cast285, 29, !dbg !5680
  br i1 %cmp286, label %if.then288, label %if.else294, !dbg !5681

if.then288:                                       ; preds = %if.then279
  %type289 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !5682
  store i32 1, i32* %type289, align 8, !dbg !5684
  %155 = load %struct.variable_info*, %struct.variable_info** %fi, align 8, !dbg !5685
  %id290 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %155, i32 0, i32 0, !dbg !5686
  %156 = load i32, i32* %id290, align 8, !dbg !5686
  %var291 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !5687
  store i32 %156, i32* %var291, align 4, !dbg !5688
  %157 = load i32, i32* %i210, align 4, !dbg !5689
  %conv292 = sext i32 %157 to i64, !dbg !5689
  %offset293 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !5690
  store i64 %conv292, i64* %offset293, align 8, !dbg !5691
  br label %if.end301, !dbg !5692

if.else294:                                       ; preds = %if.then279
  %type295 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !5693
  store i32 0, i32* %type295, align 8, !dbg !5695
  %158 = load %struct.variable_info*, %struct.variable_info** %fi, align 8, !dbg !5696
  %159 = load i32, i32* %i210, align 4, !dbg !5697
  %conv296 = sext i32 %159 to i64, !dbg !5697
  %call297 = call %struct.variable_info* @first_vi_for_offset(%struct.variable_info* %158, i64 %conv296), !dbg !5698
  %id298 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call297, i32 0, i32 0, !dbg !5699
  %160 = load i32, i32* %id298, align 8, !dbg !5699
  %var299 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !5700
  store i32 %160, i32* %var299, align 4, !dbg !5701
  %offset300 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !5702
  store i64 0, i64* %offset300, align 8, !dbg !5703
  br label %if.end301

if.end301:                                        ; preds = %if.else294, %if.then288
  store i32 0, i32* %j281, align 4, !dbg !5704
  br label %for.cond302, !dbg !5706

for.cond302:                                      ; preds = %for.inc313, %if.end301
  %161 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5707
  %tobool303 = icmp ne %struct.VEC_ce_s_heap* %161, null, !dbg !5707
  br i1 %tobool303, label %cond.true304, label %cond.false306, !dbg !5707

cond.true304:                                     ; preds = %for.cond302
  %162 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5707
  %base305 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %162, i32 0, i32 0, !dbg !5707
  br label %cond.end307, !dbg !5707

cond.false306:                                    ; preds = %for.cond302
  br label %cond.end307, !dbg !5707

cond.end307:                                      ; preds = %cond.false306, %cond.true304
  %cond308 = phi %struct.VEC_ce_s_base* [ %base305, %cond.true304 ], [ null, %cond.false306 ], !dbg !5707
  %163 = load i32, i32* %j281, align 4, !dbg !5707
  %call309 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond308, i32 %163, %struct.constraint_expr** %lhsp280), !dbg !5707
  %tobool310 = icmp ne i32 %call309, 0, !dbg !5709
  br i1 %tobool310, label %for.body311, label %for.end315, !dbg !5709

for.body311:                                      ; preds = %cond.end307
  %164 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp280, align 8, !dbg !5710
  %165 = bitcast %struct.constraint_expr* %164 to { i64, i64 }*, !dbg !5711
  %166 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %165, i32 0, i32 0, !dbg !5711
  %167 = load i64, i64* %166, align 8, !dbg !5711
  %168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %165, i32 0, i32 1, !dbg !5711
  %169 = load i64, i64* %168, align 8, !dbg !5711
  %170 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !5711
  %171 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %170, i32 0, i32 0, !dbg !5711
  %172 = load i64, i64* %171, align 8, !dbg !5711
  %173 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %170, i32 0, i32 1, !dbg !5711
  %174 = load i64, i64* %173, align 8, !dbg !5711
  %call312 = call %struct.constraint* @new_constraint(i64 %167, i64 %169, i64 %172, i64 %174), !dbg !5711
  call void @process_constraint(%struct.constraint* %call312), !dbg !5712
  br label %for.inc313, !dbg !5712

for.inc313:                                       ; preds = %for.body311
  %175 = load i32, i32* %j281, align 4, !dbg !5713
  %inc314 = add i32 %175, 1, !dbg !5713
  store i32 %inc314, i32* %j281, align 4, !dbg !5713
  br label %for.cond302, !dbg !5714, !llvm.loop !5715

for.end315:                                       ; preds = %cond.end307
  br label %if.end316, !dbg !5717

if.end316:                                        ; preds = %for.end315, %for.end277
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %if.end208
  br label %if.end672, !dbg !5718

if.else318:                                       ; preds = %if.else
  %176 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5719
  %call319 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %176), !dbg !5721
  %conv320 = zext i8 %call319 to i32, !dbg !5721
  %tobool321 = icmp ne i32 %conv320, 0, !dbg !5721
  br i1 %tobool321, label %land.lhs.true322, label %if.else514, !dbg !5722

land.lhs.true322:                                 ; preds = %if.else318
  %177 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5723
  %call323 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %177), !dbg !5724
  %call324 = call zeroext i8 @could_have_pointers(%union.tree_node* %call323), !dbg !5725
  %conv325 = zext i8 %call324 to i32, !dbg !5725
  %tobool326 = icmp ne i32 %conv325, 0, !dbg !5725
  br i1 %tobool326, label %if.then327, label %if.else514, !dbg !5726

if.then327:                                       ; preds = %land.lhs.true322
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhsop328, metadata !5727, metadata !DIExpression()), !dbg !5729
  %178 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5730
  %call329 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %178), !dbg !5731
  store %union.tree_node* %call329, %union.tree_node** %lhsop328, align 8, !dbg !5729
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhsop, metadata !5732, metadata !DIExpression()), !dbg !5733
  %179 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5734
  %call330 = call i32 @gimple_num_ops(%union.gimple_statement_d* %179), !dbg !5735
  %cmp331 = icmp eq i32 %call330, 2, !dbg !5736
  br i1 %cmp331, label %cond.true333, label %cond.false335, !dbg !5737

cond.true333:                                     ; preds = %if.then327
  %180 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5738
  %call334 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %180), !dbg !5739
  br label %cond.end336, !dbg !5737

cond.false335:                                    ; preds = %if.then327
  br label %cond.end336, !dbg !5737

cond.end336:                                      ; preds = %cond.false335, %cond.true333
  %cond337 = phi %union.tree_node* [ %call334, %cond.true333 ], [ null, %cond.false335 ], !dbg !5737
  store %union.tree_node* %cond337, %union.tree_node** %rhsop, align 8, !dbg !5733
  %181 = load %union.tree_node*, %union.tree_node** %rhsop, align 8, !dbg !5740
  %tobool338 = icmp ne %union.tree_node* %181, null, !dbg !5740
  br i1 %tobool338, label %land.lhs.true339, label %if.else376, !dbg !5742

land.lhs.true339:                                 ; preds = %cond.end336
  %182 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5743
  %common340 = bitcast %union.tree_node* %182 to %struct.tree_common*, !dbg !5743
  %type341 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common340, i32 0, i32 2, !dbg !5743
  %183 = load %union.tree_node*, %union.tree_node** %type341, align 8, !dbg !5743
  %base342 = bitcast %union.tree_node* %183 to %struct.tree_base*, !dbg !5743
  %184 = bitcast %struct.tree_base* %base342 to i64*, !dbg !5743
  %bf.load343 = load i64, i64* %184, align 8, !dbg !5743
  %bf.clear344 = and i64 %bf.load343, 65535, !dbg !5743
  %bf.cast345 = trunc i64 %bf.clear344 to i32, !dbg !5743
  %cmp346 = icmp eq i32 %bf.cast345, 15, !dbg !5743
  br i1 %cmp346, label %if.then375, label %lor.lhs.false348, !dbg !5743

lor.lhs.false348:                                 ; preds = %land.lhs.true339
  %185 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5743
  %common349 = bitcast %union.tree_node* %185 to %struct.tree_common*, !dbg !5743
  %type350 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common349, i32 0, i32 2, !dbg !5743
  %186 = load %union.tree_node*, %union.tree_node** %type350, align 8, !dbg !5743
  %base351 = bitcast %union.tree_node* %186 to %struct.tree_base*, !dbg !5743
  %187 = bitcast %struct.tree_base* %base351 to i64*, !dbg !5743
  %bf.load352 = load i64, i64* %187, align 8, !dbg !5743
  %bf.clear353 = and i64 %bf.load352, 65535, !dbg !5743
  %bf.cast354 = trunc i64 %bf.clear353 to i32, !dbg !5743
  %cmp355 = icmp eq i32 %bf.cast354, 16, !dbg !5743
  br i1 %cmp355, label %if.then375, label %lor.lhs.false357, !dbg !5743

lor.lhs.false357:                                 ; preds = %lor.lhs.false348
  %188 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5743
  %common358 = bitcast %union.tree_node* %188 to %struct.tree_common*, !dbg !5743
  %type359 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common358, i32 0, i32 2, !dbg !5743
  %189 = load %union.tree_node*, %union.tree_node** %type359, align 8, !dbg !5743
  %base360 = bitcast %union.tree_node* %189 to %struct.tree_base*, !dbg !5743
  %190 = bitcast %struct.tree_base* %base360 to i64*, !dbg !5743
  %bf.load361 = load i64, i64* %190, align 8, !dbg !5743
  %bf.clear362 = and i64 %bf.load361, 65535, !dbg !5743
  %bf.cast363 = trunc i64 %bf.clear362 to i32, !dbg !5743
  %cmp364 = icmp eq i32 %bf.cast363, 17, !dbg !5743
  br i1 %cmp364, label %if.then375, label %lor.lhs.false366, !dbg !5743

lor.lhs.false366:                                 ; preds = %lor.lhs.false357
  %191 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5743
  %common367 = bitcast %union.tree_node* %191 to %struct.tree_common*, !dbg !5743
  %type368 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common367, i32 0, i32 2, !dbg !5743
  %192 = load %union.tree_node*, %union.tree_node** %type368, align 8, !dbg !5743
  %base369 = bitcast %union.tree_node* %192 to %struct.tree_base*, !dbg !5743
  %193 = bitcast %struct.tree_base* %base369 to i64*, !dbg !5743
  %bf.load370 = load i64, i64* %193, align 8, !dbg !5743
  %bf.clear371 = and i64 %bf.load370, 65535, !dbg !5743
  %bf.cast372 = trunc i64 %bf.clear371 to i32, !dbg !5743
  %cmp373 = icmp eq i32 %bf.cast372, 18, !dbg !5743
  br i1 %cmp373, label %if.then375, label %if.else376, !dbg !5744

if.then375:                                       ; preds = %lor.lhs.false366, %lor.lhs.false357, %lor.lhs.false348, %land.lhs.true339
  %194 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5745
  %195 = load %union.tree_node*, %union.tree_node** %rhsop, align 8, !dbg !5746
  call void @do_structure_copy(%union.tree_node* %194, %union.tree_node* %195), !dbg !5747
  br label %if.end437, !dbg !5747

if.else376:                                       ; preds = %lor.lhs.false366, %cond.end336
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %temp, metadata !5748, metadata !DIExpression()), !dbg !5750
  %196 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5751
  call void @get_constraint_for(%union.tree_node* %196, %struct.VEC_ce_s_heap** %lhsc), !dbg !5752
  %197 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5753
  %call377 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %197), !dbg !5755
  %cmp378 = icmp eq i32 %call377, 66, !dbg !5756
  br i1 %cmp378, label %if.then380, label %if.else383, !dbg !5757

if.then380:                                       ; preds = %if.else376
  %198 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5758
  %call381 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %198), !dbg !5759
  %199 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5760
  %call382 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %199), !dbg !5761
  call void @get_constraint_for_ptr_offset(%union.tree_node* %call381, %union.tree_node* %call382, %struct.VEC_ce_s_heap** %rhsc), !dbg !5762
  br label %if.end436, !dbg !5762

if.else383:                                       ; preds = %if.else376
  %200 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5763
  %call384 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %200), !dbg !5763
  %cmp385 = icmp eq i32 %call384, 116, !dbg !5763
  br i1 %cmp385, label %land.lhs.true391, label %lor.lhs.false387, !dbg !5763

lor.lhs.false387:                                 ; preds = %if.else383
  %201 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5763
  %call388 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %201), !dbg !5763
  %cmp389 = icmp eq i32 %call388, 113, !dbg !5763
  br i1 %cmp389, label %land.lhs.true391, label %lor.lhs.false425, !dbg !5765

land.lhs.true391:                                 ; preds = %lor.lhs.false387, %if.else383
  %202 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5766
  %call392 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %202), !dbg !5766
  %base393 = bitcast %union.tree_node* %call392 to %struct.tree_base*, !dbg !5766
  %203 = bitcast %struct.tree_base* %base393 to i64*, !dbg !5766
  %bf.load394 = load i64, i64* %203, align 8, !dbg !5766
  %bf.clear395 = and i64 %bf.load394, 65535, !dbg !5766
  %bf.cast396 = trunc i64 %bf.clear395 to i32, !dbg !5766
  %cmp397 = icmp eq i32 %bf.cast396, 10, !dbg !5766
  br i1 %cmp397, label %land.lhs.true407, label %lor.lhs.false399, !dbg !5766

lor.lhs.false399:                                 ; preds = %land.lhs.true391
  %204 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5766
  %call400 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %204), !dbg !5766
  %base401 = bitcast %union.tree_node* %call400 to %struct.tree_base*, !dbg !5766
  %205 = bitcast %struct.tree_base* %base401 to i64*, !dbg !5766
  %bf.load402 = load i64, i64* %205, align 8, !dbg !5766
  %bf.clear403 = and i64 %bf.load402, 65535, !dbg !5766
  %bf.cast404 = trunc i64 %bf.clear403 to i32, !dbg !5766
  %cmp405 = icmp eq i32 %bf.cast404, 12, !dbg !5766
  br i1 %cmp405, label %land.lhs.true407, label %if.then429, !dbg !5767

land.lhs.true407:                                 ; preds = %lor.lhs.false399, %land.lhs.true391
  %206 = load %union.tree_node*, %union.tree_node** %rhsop, align 8, !dbg !5768
  %common408 = bitcast %union.tree_node* %206 to %struct.tree_common*, !dbg !5768
  %type409 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common408, i32 0, i32 2, !dbg !5768
  %207 = load %union.tree_node*, %union.tree_node** %type409, align 8, !dbg !5768
  %base410 = bitcast %union.tree_node* %207 to %struct.tree_base*, !dbg !5768
  %208 = bitcast %struct.tree_base* %base410 to i64*, !dbg !5768
  %bf.load411 = load i64, i64* %208, align 8, !dbg !5768
  %bf.clear412 = and i64 %bf.load411, 65535, !dbg !5768
  %bf.cast413 = trunc i64 %bf.clear412 to i32, !dbg !5768
  %cmp414 = icmp eq i32 %bf.cast413, 10, !dbg !5768
  br i1 %cmp414, label %if.then429, label %lor.lhs.false416, !dbg !5768

lor.lhs.false416:                                 ; preds = %land.lhs.true407
  %209 = load %union.tree_node*, %union.tree_node** %rhsop, align 8, !dbg !5768
  %common417 = bitcast %union.tree_node* %209 to %struct.tree_common*, !dbg !5768
  %type418 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common417, i32 0, i32 2, !dbg !5768
  %210 = load %union.tree_node*, %union.tree_node** %type418, align 8, !dbg !5768
  %base419 = bitcast %union.tree_node* %210 to %struct.tree_base*, !dbg !5768
  %211 = bitcast %struct.tree_base* %base419 to i64*, !dbg !5768
  %bf.load420 = load i64, i64* %211, align 8, !dbg !5768
  %bf.clear421 = and i64 %bf.load420, 65535, !dbg !5768
  %bf.cast422 = trunc i64 %bf.clear421 to i32, !dbg !5768
  %cmp423 = icmp eq i32 %bf.cast422, 12, !dbg !5768
  br i1 %cmp423, label %if.then429, label %lor.lhs.false425, !dbg !5769

lor.lhs.false425:                                 ; preds = %lor.lhs.false416, %lor.lhs.false387
  %212 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5770
  %call426 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %212), !dbg !5771
  %conv427 = zext i8 %call426 to i32, !dbg !5771
  %tobool428 = icmp ne i32 %conv427, 0, !dbg !5771
  br i1 %tobool428, label %if.then429, label %if.else430, !dbg !5772

if.then429:                                       ; preds = %lor.lhs.false425, %lor.lhs.false416, %land.lhs.true407, %lor.lhs.false399
  %213 = load %union.tree_node*, %union.tree_node** %rhsop, align 8, !dbg !5773
  call void @get_constraint_for(%union.tree_node* %213, %struct.VEC_ce_s_heap** %rhsc), !dbg !5774
  br label %if.end435, !dbg !5774

if.else430:                                       ; preds = %lor.lhs.false425
  %type431 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 0, !dbg !5775
  store i32 2, i32* %type431, align 8, !dbg !5777
  %var432 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 1, !dbg !5778
  store i32 1, i32* %var432, align 4, !dbg !5779
  %offset433 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 2, !dbg !5780
  store i64 0, i64* %offset433, align 8, !dbg !5781
  %call434 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %rhsc, %struct.constraint_expr* %temp), !dbg !5782
  br label %if.end435

if.end435:                                        ; preds = %if.else430, %if.then429
  br label %if.end436

if.end436:                                        ; preds = %if.end435, %if.then380
  %214 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !5783
  %215 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !5784
  call void @process_all_all_constraints(%struct.VEC_ce_s_heap* %214, %struct.VEC_ce_s_heap* %215), !dbg !5785
  br label %if.end437

if.end437:                                        ; preds = %if.end436, %if.then375
  %216 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5786
  %call438 = call %union.tree_node* @get_base_address(%union.tree_node* %216), !dbg !5788
  store %union.tree_node* %call438, %union.tree_node** %lhsop328, align 8, !dbg !5789
  %cmp439 = icmp ne %union.tree_node* %call438, null, !dbg !5790
  br i1 %cmp439, label %land.lhs.true441, label %if.else453, !dbg !5791

land.lhs.true441:                                 ; preds = %if.end437
  %217 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5792
  %base442 = bitcast %union.tree_node* %217 to %struct.tree_base*, !dbg !5792
  %218 = bitcast %struct.tree_base* %base442 to i64*, !dbg !5792
  %bf.load443 = load i64, i64* %218, align 8, !dbg !5792
  %bf.clear444 = and i64 %bf.load443, 65535, !dbg !5792
  %bf.cast445 = trunc i64 %bf.clear444 to i32, !dbg !5792
  %idxprom = sext i32 %bf.cast445 to i64, !dbg !5792
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5792
  %219 = load i32, i32* %arrayidx, align 4, !dbg !5792
  %cmp446 = icmp eq i32 %219, 3, !dbg !5792
  br i1 %cmp446, label %land.lhs.true448, label %if.else453, !dbg !5793

land.lhs.true448:                                 ; preds = %land.lhs.true441
  %220 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5794
  %call449 = call zeroext i8 @is_global_var(%union.tree_node* %220), !dbg !5795
  %conv450 = zext i8 %call449 to i32, !dbg !5795
  %tobool451 = icmp ne i32 %conv450, 0, !dbg !5795
  br i1 %tobool451, label %if.then452, label %if.else453, !dbg !5796

if.then452:                                       ; preds = %land.lhs.true448
  %221 = load %union.tree_node*, %union.tree_node** %rhsop, align 8, !dbg !5797
  call void @make_escape_constraint(%union.tree_node* %221), !dbg !5798
  br label %if.end513, !dbg !5798

if.else453:                                       ; preds = %land.lhs.true448, %land.lhs.true441, %if.end437
  %222 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5799
  %call454 = call zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %222), !dbg !5801
  %conv455 = zext i8 %call454 to i32, !dbg !5801
  %tobool456 = icmp ne i32 %conv455, 0, !dbg !5801
  br i1 %tobool456, label %land.lhs.true457, label %if.end512, !dbg !5802

land.lhs.true457:                                 ; preds = %if.else453
  %223 = load %union.tree_node*, %union.tree_node** %rhsop, align 8, !dbg !5803
  %common458 = bitcast %union.tree_node* %223 to %struct.tree_common*, !dbg !5803
  %type459 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common458, i32 0, i32 2, !dbg !5803
  %224 = load %union.tree_node*, %union.tree_node** %type459, align 8, !dbg !5803
  %base460 = bitcast %union.tree_node* %224 to %struct.tree_base*, !dbg !5803
  %225 = bitcast %struct.tree_base* %base460 to i64*, !dbg !5803
  %bf.load461 = load i64, i64* %225, align 8, !dbg !5803
  %bf.clear462 = and i64 %bf.load461, 65535, !dbg !5803
  %bf.cast463 = trunc i64 %bf.clear462 to i32, !dbg !5803
  %cmp464 = icmp eq i32 %bf.cast463, 10, !dbg !5803
  br i1 %cmp464, label %land.lhs.true475, label %lor.lhs.false466, !dbg !5803

lor.lhs.false466:                                 ; preds = %land.lhs.true457
  %226 = load %union.tree_node*, %union.tree_node** %rhsop, align 8, !dbg !5803
  %common467 = bitcast %union.tree_node* %226 to %struct.tree_common*, !dbg !5803
  %type468 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common467, i32 0, i32 2, !dbg !5803
  %227 = load %union.tree_node*, %union.tree_node** %type468, align 8, !dbg !5803
  %base469 = bitcast %union.tree_node* %227 to %struct.tree_base*, !dbg !5803
  %228 = bitcast %struct.tree_base* %base469 to i64*, !dbg !5803
  %bf.load470 = load i64, i64* %228, align 8, !dbg !5803
  %bf.clear471 = and i64 %bf.load470, 65535, !dbg !5803
  %bf.cast472 = trunc i64 %bf.clear471 to i32, !dbg !5803
  %cmp473 = icmp eq i32 %bf.cast472, 12, !dbg !5803
  br i1 %cmp473, label %land.lhs.true475, label %if.end512, !dbg !5804

land.lhs.true475:                                 ; preds = %lor.lhs.false466, %land.lhs.true457
  %229 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5805
  %common476 = bitcast %union.tree_node* %229 to %struct.tree_common*, !dbg !5805
  %type477 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common476, i32 0, i32 2, !dbg !5805
  %230 = load %union.tree_node*, %union.tree_node** %type477, align 8, !dbg !5805
  %base478 = bitcast %union.tree_node* %230 to %struct.tree_base*, !dbg !5805
  %231 = bitcast %struct.tree_base* %base478 to i64*, !dbg !5805
  %bf.load479 = load i64, i64* %231, align 8, !dbg !5805
  %bf.clear480 = and i64 %bf.load479, 65535, !dbg !5805
  %bf.cast481 = trunc i64 %bf.clear480 to i32, !dbg !5805
  %cmp482 = icmp eq i32 %bf.cast481, 10, !dbg !5805
  br i1 %cmp482, label %land.lhs.true493, label %lor.lhs.false484, !dbg !5805

lor.lhs.false484:                                 ; preds = %land.lhs.true475
  %232 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5805
  %common485 = bitcast %union.tree_node* %232 to %struct.tree_common*, !dbg !5805
  %type486 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common485, i32 0, i32 2, !dbg !5805
  %233 = load %union.tree_node*, %union.tree_node** %type486, align 8, !dbg !5805
  %base487 = bitcast %union.tree_node* %233 to %struct.tree_base*, !dbg !5805
  %234 = bitcast %struct.tree_base* %base487 to i64*, !dbg !5805
  %bf.load488 = load i64, i64* %234, align 8, !dbg !5805
  %bf.clear489 = and i64 %bf.load488, 65535, !dbg !5805
  %bf.cast490 = trunc i64 %bf.clear489 to i32, !dbg !5805
  %cmp491 = icmp eq i32 %bf.cast490, 12, !dbg !5805
  br i1 %cmp491, label %land.lhs.true493, label %if.end512, !dbg !5806

land.lhs.true493:                                 ; preds = %lor.lhs.false484, %land.lhs.true475
  %235 = load %union.tree_node*, %union.tree_node** %rhsop, align 8, !dbg !5807
  %common494 = bitcast %union.tree_node* %235 to %struct.tree_common*, !dbg !5807
  %type495 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common494, i32 0, i32 2, !dbg !5807
  %236 = load %union.tree_node*, %union.tree_node** %type495, align 8, !dbg !5807
  %type496 = bitcast %union.tree_node* %236 to %struct.tree_type*, !dbg !5807
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type496, i32 0, i32 6, !dbg !5807
  %bf.load497 = load i32, i32* %restrict_flag, align 4, !dbg !5807
  %bf.lshr498 = lshr i32 %bf.load497, 13, !dbg !5807
  %bf.clear499 = and i32 %bf.lshr498, 1, !dbg !5807
  %tobool500 = icmp ne i32 %bf.clear499, 0, !dbg !5807
  br i1 %tobool500, label %if.end512, label %land.lhs.true501, !dbg !5808

land.lhs.true501:                                 ; preds = %land.lhs.true493
  %237 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5809
  %common502 = bitcast %union.tree_node* %237 to %struct.tree_common*, !dbg !5809
  %type503 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common502, i32 0, i32 2, !dbg !5809
  %238 = load %union.tree_node*, %union.tree_node** %type503, align 8, !dbg !5809
  %type504 = bitcast %union.tree_node* %238 to %struct.tree_type*, !dbg !5809
  %restrict_flag505 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type504, i32 0, i32 6, !dbg !5809
  %bf.load506 = load i32, i32* %restrict_flag505, align 4, !dbg !5809
  %bf.lshr507 = lshr i32 %bf.load506, 13, !dbg !5809
  %bf.clear508 = and i32 %bf.lshr507, 1, !dbg !5809
  %tobool509 = icmp ne i32 %bf.clear508, 0, !dbg !5809
  br i1 %tobool509, label %if.then510, label %if.end512, !dbg !5810

if.then510:                                       ; preds = %land.lhs.true501
  %239 = load %union.tree_node*, %union.tree_node** %lhsop328, align 8, !dbg !5811
  %call511 = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %239), !dbg !5812
  call void @make_constraint_from_restrict(%struct.variable_info* %call511, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.62, i64 0, i64 0)), !dbg !5813
  br label %if.end512, !dbg !5813

if.end512:                                        ; preds = %if.then510, %land.lhs.true501, %land.lhs.true493, %lor.lhs.false484, %lor.lhs.false466, %if.else453
  br label %if.end513

if.end513:                                        ; preds = %if.end512, %if.then452
  br label %if.end671, !dbg !5814

if.else514:                                       ; preds = %land.lhs.true322, %if.else318
  %240 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5815
  %call515 = call zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %240), !dbg !5817
  %conv516 = zext i8 %call515 to i32, !dbg !5817
  %tobool517 = icmp ne i32 %conv516, 0, !dbg !5817
  br i1 %tobool517, label %land.lhs.true518, label %if.else560, !dbg !5818

land.lhs.true518:                                 ; preds = %if.else514
  %241 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5819
  %call519 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %241), !dbg !5819
  %common520 = bitcast %union.tree_node* %call519 to %struct.tree_common*, !dbg !5819
  %type521 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common520, i32 0, i32 2, !dbg !5819
  %242 = load %union.tree_node*, %union.tree_node** %type521, align 8, !dbg !5819
  %base522 = bitcast %union.tree_node* %242 to %struct.tree_base*, !dbg !5819
  %243 = bitcast %struct.tree_base* %base522 to i64*, !dbg !5819
  %bf.load523 = load i64, i64* %243, align 8, !dbg !5819
  %bf.clear524 = and i64 %bf.load523, 65535, !dbg !5819
  %bf.cast525 = trunc i64 %bf.clear524 to i32, !dbg !5819
  %cmp526 = icmp eq i32 %bf.cast525, 10, !dbg !5819
  br i1 %cmp526, label %land.lhs.true538, label %lor.lhs.false528, !dbg !5819

lor.lhs.false528:                                 ; preds = %land.lhs.true518
  %244 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5819
  %call529 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %244), !dbg !5819
  %common530 = bitcast %union.tree_node* %call529 to %struct.tree_common*, !dbg !5819
  %type531 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common530, i32 0, i32 2, !dbg !5819
  %245 = load %union.tree_node*, %union.tree_node** %type531, align 8, !dbg !5819
  %base532 = bitcast %union.tree_node* %245 to %struct.tree_base*, !dbg !5819
  %246 = bitcast %struct.tree_base* %base532 to i64*, !dbg !5819
  %bf.load533 = load i64, i64* %246, align 8, !dbg !5819
  %bf.clear534 = and i64 %bf.load533, 65535, !dbg !5819
  %bf.cast535 = trunc i64 %bf.clear534 to i32, !dbg !5819
  %cmp536 = icmp eq i32 %bf.cast535, 12, !dbg !5819
  br i1 %cmp536, label %land.lhs.true538, label %if.else560, !dbg !5820

land.lhs.true538:                                 ; preds = %lor.lhs.false528, %land.lhs.true518
  %247 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5821
  %call539 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %247), !dbg !5821
  %common540 = bitcast %union.tree_node* %call539 to %struct.tree_common*, !dbg !5821
  %type541 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common540, i32 0, i32 2, !dbg !5821
  %248 = load %union.tree_node*, %union.tree_node** %type541, align 8, !dbg !5821
  %base542 = bitcast %union.tree_node* %248 to %struct.tree_base*, !dbg !5821
  %249 = bitcast %struct.tree_base* %base542 to i64*, !dbg !5821
  %bf.load543 = load i64, i64* %249, align 8, !dbg !5821
  %bf.clear544 = and i64 %bf.load543, 65535, !dbg !5821
  %bf.cast545 = trunc i64 %bf.clear544 to i32, !dbg !5821
  %cmp546 = icmp eq i32 %bf.cast545, 10, !dbg !5821
  br i1 %cmp546, label %if.else560, label %lor.lhs.false548, !dbg !5821

lor.lhs.false548:                                 ; preds = %land.lhs.true538
  %250 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5821
  %call549 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %250), !dbg !5821
  %common550 = bitcast %union.tree_node* %call549 to %struct.tree_common*, !dbg !5821
  %type551 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common550, i32 0, i32 2, !dbg !5821
  %251 = load %union.tree_node*, %union.tree_node** %type551, align 8, !dbg !5821
  %base552 = bitcast %union.tree_node* %251 to %struct.tree_base*, !dbg !5821
  %252 = bitcast %struct.tree_base* %base552 to i64*, !dbg !5821
  %bf.load553 = load i64, i64* %252, align 8, !dbg !5821
  %bf.clear554 = and i64 %bf.load553, 65535, !dbg !5821
  %bf.cast555 = trunc i64 %bf.clear554 to i32, !dbg !5821
  %cmp556 = icmp eq i32 %bf.cast555, 12, !dbg !5821
  br i1 %cmp556, label %if.else560, label %if.then558, !dbg !5822

if.then558:                                       ; preds = %lor.lhs.false548
  %253 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5823
  %call559 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %253), !dbg !5825
  call void @make_escape_constraint(%union.tree_node* %call559), !dbg !5826
  br label %if.end670, !dbg !5827

if.else560:                                       ; preds = %lor.lhs.false548, %land.lhs.true538, %lor.lhs.false528, %if.else514
  %254 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5828
  %call561 = call i32 @gimple_code(%union.gimple_statement_d* %254), !dbg !5830
  %cmp562 = icmp eq i32 %call561, 9, !dbg !5831
  br i1 %cmp562, label %land.lhs.true564, label %if.else575, !dbg !5832

land.lhs.true564:                                 ; preds = %if.else560
  %255 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5833
  %call565 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %255), !dbg !5834
  %cmp566 = icmp ne %union.tree_node* %call565, null, !dbg !5835
  br i1 %cmp566, label %land.lhs.true568, label %if.else575, !dbg !5836

land.lhs.true568:                                 ; preds = %land.lhs.true564
  %256 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5837
  %call569 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %256), !dbg !5838
  %call570 = call zeroext i8 @could_have_pointers(%union.tree_node* %call569), !dbg !5839
  %conv571 = zext i8 %call570 to i32, !dbg !5839
  %tobool572 = icmp ne i32 %conv571, 0, !dbg !5839
  br i1 %tobool572, label %if.then573, label %if.else575, !dbg !5840

if.then573:                                       ; preds = %land.lhs.true568
  %257 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5841
  %call574 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %257), !dbg !5843
  call void @make_escape_constraint(%union.tree_node* %call574), !dbg !5844
  br label %if.end669, !dbg !5845

if.else575:                                       ; preds = %land.lhs.true568, %land.lhs.true564, %if.else560
  %258 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5846
  %call576 = call i32 @gimple_code(%union.gimple_statement_d* %258), !dbg !5848
  %cmp577 = icmp eq i32 %call576, 7, !dbg !5849
  br i1 %cmp577, label %if.then579, label %if.end668, !dbg !5850

if.then579:                                       ; preds = %if.else575
  call void @llvm.dbg.declare(metadata i32* %i580, metadata !5851, metadata !DIExpression()), !dbg !5853
  call void @llvm.dbg.declare(metadata i32* %noutputs, metadata !5854, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.declare(metadata i8*** %oconstraints, metadata !5856, metadata !DIExpression()), !dbg !5857
  call void @llvm.dbg.declare(metadata i8** %constraint, metadata !5858, metadata !DIExpression()), !dbg !5859
  call void @llvm.dbg.declare(metadata i8* %allows_mem, metadata !5860, metadata !DIExpression()), !dbg !5861
  call void @llvm.dbg.declare(metadata i8* %allows_reg, metadata !5862, metadata !DIExpression()), !dbg !5863
  call void @llvm.dbg.declare(metadata i8* %is_inout, metadata !5864, metadata !DIExpression()), !dbg !5865
  %259 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5866
  %call581 = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %259), !dbg !5867
  store i32 %call581, i32* %noutputs, align 4, !dbg !5868
  %260 = load i32, i32* %noutputs, align 4, !dbg !5869
  %conv582 = zext i32 %260 to i64, !dbg !5869
  %mul = mul i64 8, %conv582, !dbg !5869
  %261 = alloca i8, i64 %mul, align 16, !dbg !5869
  %262 = bitcast i8* %261 to i8**, !dbg !5869
  store i8** %262, i8*** %oconstraints, align 8, !dbg !5870
  store i32 0, i32* %i580, align 4, !dbg !5871
  br label %for.cond583, !dbg !5873

for.cond583:                                      ; preds = %for.inc629, %if.then579
  %263 = load i32, i32* %i580, align 4, !dbg !5874
  %264 = load i32, i32* %noutputs, align 4, !dbg !5876
  %cmp584 = icmp ult i32 %263, %264, !dbg !5877
  br i1 %cmp584, label %for.body586, label %for.end631, !dbg !5878

for.body586:                                      ; preds = %for.cond583
  call void @llvm.dbg.declare(metadata %union.tree_node** %link, metadata !5879, metadata !DIExpression()), !dbg !5881
  %265 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5882
  %266 = load i32, i32* %i580, align 4, !dbg !5883
  %call587 = call %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %265, i32 %266), !dbg !5884
  store %union.tree_node* %call587, %union.tree_node** %link, align 8, !dbg !5881
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !5885, metadata !DIExpression()), !dbg !5886
  %267 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !5887
  %list = bitcast %union.tree_node* %267 to %struct.tree_list*, !dbg !5887
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !5887
  %268 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5887
  store %union.tree_node* %268, %union.tree_node** %op, align 8, !dbg !5886
  %269 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !5888
  %list588 = bitcast %union.tree_node* %269 to %struct.tree_list*, !dbg !5888
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list588, i32 0, i32 1, !dbg !5888
  %270 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !5888
  %list589 = bitcast %union.tree_node* %270 to %struct.tree_list*, !dbg !5888
  %value590 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list589, i32 0, i32 2, !dbg !5888
  %271 = load %union.tree_node*, %union.tree_node** %value590, align 8, !dbg !5888
  %string = bitcast %union.tree_node* %271 to %struct.tree_string*, !dbg !5888
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !5888
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !5888
  store i8* %arraydecay, i8** %constraint, align 8, !dbg !5889
  %272 = load i8*, i8** %constraint, align 8, !dbg !5890
  %273 = load i8**, i8*** %oconstraints, align 8, !dbg !5891
  %274 = load i32, i32* %i580, align 4, !dbg !5892
  %idxprom591 = zext i32 %274 to i64, !dbg !5891
  %arrayidx592 = getelementptr inbounds i8*, i8** %273, i64 %idxprom591, !dbg !5891
  store i8* %272, i8** %arrayidx592, align 8, !dbg !5893
  %275 = load i32, i32* %i580, align 4, !dbg !5894
  %call593 = call zeroext i8 @parse_output_constraint(i8** %constraint, i32 %275, i32 0, i32 0, i8* %allows_mem, i8* %allows_reg, i8* %is_inout), !dbg !5895
  %276 = load i8, i8* %allows_reg, align 1, !dbg !5896
  %tobool594 = icmp ne i8 %276, 0, !dbg !5896
  br i1 %tobool594, label %if.end600, label %land.lhs.true595, !dbg !5898

land.lhs.true595:                                 ; preds = %for.body586
  %277 = load i8, i8* %allows_mem, align 1, !dbg !5899
  %conv596 = zext i8 %277 to i32, !dbg !5899
  %tobool597 = icmp ne i32 %conv596, 0, !dbg !5899
  br i1 %tobool597, label %if.then598, label %if.end600, !dbg !5900

if.then598:                                       ; preds = %land.lhs.true595
  %278 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5901
  %call599 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %278), !dbg !5901
  call void @make_escape_constraint(%union.tree_node* %call599), !dbg !5902
  br label %if.end600, !dbg !5902

if.end600:                                        ; preds = %if.then598, %land.lhs.true595, %for.body586
  %279 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5903
  %tobool601 = icmp ne %union.tree_node* %279, null, !dbg !5903
  br i1 %tobool601, label %land.lhs.true602, label %if.end628, !dbg !5905

land.lhs.true602:                                 ; preds = %if.end600
  %280 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5906
  %call603 = call zeroext i8 @could_have_pointers(%union.tree_node* %280), !dbg !5907
  %conv604 = zext i8 %call603 to i32, !dbg !5907
  %tobool605 = icmp ne i32 %conv604, 0, !dbg !5907
  br i1 %tobool605, label %if.then606, label %if.end628, !dbg !5908

if.then606:                                       ; preds = %land.lhs.true602
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %lhsc607, metadata !5909, metadata !DIExpression()), !dbg !5911
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %lhsc607, align 8, !dbg !5911
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhsc608, metadata !5912, metadata !DIExpression()), !dbg !5913
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %lhsp609, metadata !5914, metadata !DIExpression()), !dbg !5915
  call void @llvm.dbg.declare(metadata i32* %j610, metadata !5916, metadata !DIExpression()), !dbg !5917
  %281 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5918
  call void @get_constraint_for(%union.tree_node* %281, %struct.VEC_ce_s_heap** %lhsc607), !dbg !5919
  %var611 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc608, i32 0, i32 1, !dbg !5920
  store i32 4, i32* %var611, align 4, !dbg !5921
  %offset612 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc608, i32 0, i32 2, !dbg !5922
  store i64 0, i64* %offset612, align 8, !dbg !5923
  %type613 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc608, i32 0, i32 0, !dbg !5924
  store i32 0, i32* %type613, align 8, !dbg !5925
  store i32 0, i32* %j610, align 4, !dbg !5926
  br label %for.cond614, !dbg !5928

for.cond614:                                      ; preds = %for.inc625, %if.then606
  %282 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc607, align 8, !dbg !5929
  %tobool615 = icmp ne %struct.VEC_ce_s_heap* %282, null, !dbg !5929
  br i1 %tobool615, label %cond.true616, label %cond.false618, !dbg !5929

cond.true616:                                     ; preds = %for.cond614
  %283 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc607, align 8, !dbg !5929
  %base617 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %283, i32 0, i32 0, !dbg !5929
  br label %cond.end619, !dbg !5929

cond.false618:                                    ; preds = %for.cond614
  br label %cond.end619, !dbg !5929

cond.end619:                                      ; preds = %cond.false618, %cond.true616
  %cond620 = phi %struct.VEC_ce_s_base* [ %base617, %cond.true616 ], [ null, %cond.false618 ], !dbg !5929
  %284 = load i32, i32* %j610, align 4, !dbg !5929
  %call621 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond620, i32 %284, %struct.constraint_expr** %lhsp609), !dbg !5929
  %tobool622 = icmp ne i32 %call621, 0, !dbg !5931
  br i1 %tobool622, label %for.body623, label %for.end627, !dbg !5931

for.body623:                                      ; preds = %cond.end619
  %285 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp609, align 8, !dbg !5932
  %286 = bitcast %struct.constraint_expr* %285 to { i64, i64 }*, !dbg !5933
  %287 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %286, i32 0, i32 0, !dbg !5933
  %288 = load i64, i64* %287, align 8, !dbg !5933
  %289 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %286, i32 0, i32 1, !dbg !5933
  %290 = load i64, i64* %289, align 8, !dbg !5933
  %291 = bitcast %struct.constraint_expr* %rhsc608 to { i64, i64 }*, !dbg !5933
  %292 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %291, i32 0, i32 0, !dbg !5933
  %293 = load i64, i64* %292, align 8, !dbg !5933
  %294 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %291, i32 0, i32 1, !dbg !5933
  %295 = load i64, i64* %294, align 8, !dbg !5933
  %call624 = call %struct.constraint* @new_constraint(i64 %288, i64 %290, i64 %293, i64 %295), !dbg !5933
  call void @process_constraint(%struct.constraint* %call624), !dbg !5934
  br label %for.inc625, !dbg !5934

for.inc625:                                       ; preds = %for.body623
  %296 = load i32, i32* %j610, align 4, !dbg !5935
  %inc626 = add i32 %296, 1, !dbg !5935
  store i32 %inc626, i32* %j610, align 4, !dbg !5935
  br label %for.cond614, !dbg !5936, !llvm.loop !5937

for.end627:                                       ; preds = %cond.end619
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %lhsc607), !dbg !5939
  br label %if.end628, !dbg !5940

if.end628:                                        ; preds = %for.end627, %land.lhs.true602, %if.end600
  br label %for.inc629, !dbg !5941

for.inc629:                                       ; preds = %if.end628
  %297 = load i32, i32* %i580, align 4, !dbg !5942
  %inc630 = add i32 %297, 1, !dbg !5942
  store i32 %inc630, i32* %i580, align 4, !dbg !5942
  br label %for.cond583, !dbg !5943, !llvm.loop !5944

for.end631:                                       ; preds = %for.cond583
  store i32 0, i32* %i580, align 4, !dbg !5946
  br label %for.cond632, !dbg !5948

for.cond632:                                      ; preds = %for.inc665, %for.end631
  %298 = load i32, i32* %i580, align 4, !dbg !5949
  %299 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5951
  %call633 = call i32 @gimple_asm_ninputs(%union.gimple_statement_d* %299), !dbg !5952
  %cmp634 = icmp ult i32 %298, %call633, !dbg !5953
  br i1 %cmp634, label %for.body636, label %for.end667, !dbg !5954

for.body636:                                      ; preds = %for.cond632
  call void @llvm.dbg.declare(metadata %union.tree_node** %link637, metadata !5955, metadata !DIExpression()), !dbg !5957
  %300 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !5958
  %301 = load i32, i32* %i580, align 4, !dbg !5959
  %call638 = call %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %300, i32 %301), !dbg !5960
  store %union.tree_node* %call638, %union.tree_node** %link637, align 8, !dbg !5957
  call void @llvm.dbg.declare(metadata %union.tree_node** %op639, metadata !5961, metadata !DIExpression()), !dbg !5962
  %302 = load %union.tree_node*, %union.tree_node** %link637, align 8, !dbg !5963
  %list640 = bitcast %union.tree_node* %302 to %struct.tree_list*, !dbg !5963
  %value641 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list640, i32 0, i32 2, !dbg !5963
  %303 = load %union.tree_node*, %union.tree_node** %value641, align 8, !dbg !5963
  store %union.tree_node* %303, %union.tree_node** %op639, align 8, !dbg !5962
  %304 = load %union.tree_node*, %union.tree_node** %link637, align 8, !dbg !5964
  %list642 = bitcast %union.tree_node* %304 to %struct.tree_list*, !dbg !5964
  %purpose643 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list642, i32 0, i32 1, !dbg !5964
  %305 = load %union.tree_node*, %union.tree_node** %purpose643, align 8, !dbg !5964
  %list644 = bitcast %union.tree_node* %305 to %struct.tree_list*, !dbg !5964
  %value645 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list644, i32 0, i32 2, !dbg !5964
  %306 = load %union.tree_node*, %union.tree_node** %value645, align 8, !dbg !5964
  %string646 = bitcast %union.tree_node* %306 to %struct.tree_string*, !dbg !5964
  %str647 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string646, i32 0, i32 2, !dbg !5964
  %arraydecay648 = getelementptr inbounds [1 x i8], [1 x i8]* %str647, i64 0, i64 0, !dbg !5964
  store i8* %arraydecay648, i8** %constraint, align 8, !dbg !5965
  %307 = load i32, i32* %noutputs, align 4, !dbg !5966
  %308 = load i8**, i8*** %oconstraints, align 8, !dbg !5967
  %call649 = call zeroext i8 @parse_input_constraint(i8** %constraint, i32 0, i32 0, i32 %307, i32 0, i8** %308, i8* %allows_mem, i8* %allows_reg), !dbg !5968
  %309 = load i8, i8* %allows_reg, align 1, !dbg !5969
  %tobool650 = icmp ne i8 %309, 0, !dbg !5969
  br i1 %tobool650, label %if.else656, label %land.lhs.true651, !dbg !5971

land.lhs.true651:                                 ; preds = %for.body636
  %310 = load i8, i8* %allows_mem, align 1, !dbg !5972
  %conv652 = zext i8 %310 to i32, !dbg !5972
  %tobool653 = icmp ne i32 %conv652, 0, !dbg !5972
  br i1 %tobool653, label %if.then654, label %if.else656, !dbg !5973

if.then654:                                       ; preds = %land.lhs.true651
  %311 = load %union.tree_node*, %union.tree_node** %op639, align 8, !dbg !5974
  %call655 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %311), !dbg !5974
  call void @make_escape_constraint(%union.tree_node* %call655), !dbg !5975
  br label %if.end664, !dbg !5975

if.else656:                                       ; preds = %land.lhs.true651, %for.body636
  %312 = load %union.tree_node*, %union.tree_node** %op639, align 8, !dbg !5976
  %tobool657 = icmp ne %union.tree_node* %312, null, !dbg !5976
  br i1 %tobool657, label %land.lhs.true658, label %if.end663, !dbg !5978

land.lhs.true658:                                 ; preds = %if.else656
  %313 = load %union.tree_node*, %union.tree_node** %op639, align 8, !dbg !5979
  %call659 = call zeroext i8 @could_have_pointers(%union.tree_node* %313), !dbg !5980
  %conv660 = zext i8 %call659 to i32, !dbg !5980
  %tobool661 = icmp ne i32 %conv660, 0, !dbg !5980
  br i1 %tobool661, label %if.then662, label %if.end663, !dbg !5981

if.then662:                                       ; preds = %land.lhs.true658
  %314 = load %union.tree_node*, %union.tree_node** %op639, align 8, !dbg !5982
  call void @make_escape_constraint(%union.tree_node* %314), !dbg !5983
  br label %if.end663, !dbg !5983

if.end663:                                        ; preds = %if.then662, %land.lhs.true658, %if.else656
  br label %if.end664

if.end664:                                        ; preds = %if.end663, %if.then654
  br label %for.inc665, !dbg !5984

for.inc665:                                       ; preds = %if.end664
  %315 = load i32, i32* %i580, align 4, !dbg !5985
  %inc666 = add i32 %315, 1, !dbg !5985
  store i32 %inc666, i32* %i580, align 4, !dbg !5985
  br label %for.cond632, !dbg !5986, !llvm.loop !5987

for.end667:                                       ; preds = %for.cond632
  br label %if.end668, !dbg !5989

if.end668:                                        ; preds = %for.end667, %if.else575
  br label %if.end669

if.end669:                                        ; preds = %if.end668, %if.then573
  br label %if.end670

if.end670:                                        ; preds = %if.end669, %if.then558
  br label %if.end671

if.end671:                                        ; preds = %if.end670, %if.end513
  br label %if.end672

if.end672:                                        ; preds = %if.end671, %if.end317
  br label %if.end673

if.end673:                                        ; preds = %if.end672, %if.end
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %rhsc), !dbg !5990
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %lhsc), !dbg !5991
  br label %return, !dbg !5992

return:                                           ; preds = %if.end673, %sw.bb170, %for.end169, %if.end134
  ret void, !dbg !5992
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5993 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5997, metadata !DIExpression()), !dbg !5998
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5999
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6000
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6000
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6001
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6001
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6002
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6003
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6004
  ret void, !dbg !6005
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6006 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6009, metadata !DIExpression()), !dbg !6010
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6011, metadata !DIExpression()), !dbg !6012
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6013, metadata !DIExpression()), !dbg !6014
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6015
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6016
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6017
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6018
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6019
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6020
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6021
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6022
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6023
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6024
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6025
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6026
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6027
  ret void, !dbg !6028
}

; Function Attrs: noinline nounwind uwtable
define internal void @solve_constraints() #0 !dbg !6029 {
entry:
  %si = alloca %struct.scc_info*, align 8
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si, metadata !6030, metadata !DIExpression()), !dbg !6031
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6032
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !6032
  br i1 %tobool, label %if.then, label %if.end, !dbg !6034

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6035
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.69, i64 0, i64 0)), !dbg !6037
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6038
  call void @dump_constraints(%struct._IO_FILE* %2), !dbg !6039
  br label %if.end, !dbg !6040

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6041
  %tobool1 = icmp ne %struct._IO_FILE* %3, null, !dbg !6041
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !6043

if.then2:                                         ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6044
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.70, i64 0, i64 0)), !dbg !6045
  br label %if.end4, !dbg !6045

if.end4:                                          ; preds = %if.then2, %if.end
  %5 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !6046
  %tobool5 = icmp ne %struct.VEC_varinfo_t_heap* %5, null, !dbg !6046
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !6046

cond.true:                                        ; preds = %if.end4
  %6 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !6046
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %6, i32 0, i32 0, !dbg !6046
  br label %cond.end, !dbg !6046

cond.false:                                       ; preds = %if.end4
  br label %cond.end, !dbg !6046

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6046
  %call6 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !6046
  %mul = mul i32 %call6, 2, !dbg !6047
  call void @init_graph(i32 %mul), !dbg !6048
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6049
  %tobool7 = icmp ne %struct._IO_FILE* %7, null, !dbg !6049
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !6051

if.then8:                                         ; preds = %cond.end
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6052
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.71, i64 0, i64 0)), !dbg !6053
  br label %if.end10, !dbg !6053

if.end10:                                         ; preds = %if.then8, %cond.end
  call void @build_pred_graph(), !dbg !6054
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6055
  %tobool11 = icmp ne %struct._IO_FILE* %9, null, !dbg !6055
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !6057

if.then12:                                        ; preds = %if.end10
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6058
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.72, i64 0, i64 0)), !dbg !6059
  br label %if.end14, !dbg !6059

if.end14:                                         ; preds = %if.then12, %if.end10
  %11 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !6060
  %call15 = call %struct.scc_info* @perform_var_substitution(%struct.constraint_graph* %11), !dbg !6061
  store %struct.scc_info* %call15, %struct.scc_info** %si, align 8, !dbg !6062
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6063
  %tobool16 = icmp ne %struct._IO_FILE* %12, null, !dbg !6063
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !6065

if.then17:                                        ; preds = %if.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6066
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.73, i64 0, i64 0)), !dbg !6067
  br label %if.end19, !dbg !6067

if.end19:                                         ; preds = %if.then17, %if.end14
  %14 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !6068
  %15 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !6069
  call void @rewrite_constraints(%struct.constraint_graph* %14, %struct.scc_info* %15), !dbg !6070
  call void @build_succ_graph(), !dbg !6071
  %16 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !6072
  call void @free_var_substitution_info(%struct.scc_info* %16), !dbg !6073
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6074
  %tobool20 = icmp ne %struct._IO_FILE* %17, null, !dbg !6074
  br i1 %tobool20, label %land.lhs.true, label %if.end23, !dbg !6076

land.lhs.true:                                    ; preds = %if.end19
  %18 = load i32, i32* @dump_flags, align 4, !dbg !6077
  %and = and i32 %18, 8192, !dbg !6078
  %tobool21 = icmp ne i32 %and, 0, !dbg !6078
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !6079

if.then22:                                        ; preds = %land.lhs.true
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6080
  call void @dump_constraint_graph(%struct._IO_FILE* %19), !dbg !6081
  br label %if.end23, !dbg !6081

if.end23:                                         ; preds = %if.then22, %land.lhs.true, %if.end19
  %20 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !6082
  call void @move_complex_constraints(%struct.constraint_graph* %20), !dbg !6083
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6084
  %tobool24 = icmp ne %struct._IO_FILE* %21, null, !dbg !6084
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !6086

if.then25:                                        ; preds = %if.end23
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6087
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.74, i64 0, i64 0)), !dbg !6088
  br label %if.end27, !dbg !6088

if.end27:                                         ; preds = %if.then25, %if.end23
  %23 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !6089
  call void @unite_pointer_equivalences(%struct.constraint_graph* %23), !dbg !6090
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6091
  %tobool28 = icmp ne %struct._IO_FILE* %24, null, !dbg !6091
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !6093

if.then29:                                        ; preds = %if.end27
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6094
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.75, i64 0, i64 0)), !dbg !6095
  br label %if.end31, !dbg !6095

if.end31:                                         ; preds = %if.then29, %if.end27
  %26 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !6096
  call void @find_indirect_cycles(%struct.constraint_graph* %26), !dbg !6097
  %27 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !6098
  call void @remove_preds_and_fake_succs(%struct.constraint_graph* %27), !dbg !6099
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6100
  %tobool32 = icmp ne %struct._IO_FILE* %28, null, !dbg !6100
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !6102

if.then33:                                        ; preds = %if.end31
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6103
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.76, i64 0, i64 0)), !dbg !6104
  br label %if.end35, !dbg !6104

if.end35:                                         ; preds = %if.then33, %if.end31
  %30 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !6105
  call void @solve_graph(%struct.constraint_graph* %30), !dbg !6106
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6107
  %tobool36 = icmp ne %struct._IO_FILE* %31, null, !dbg !6107
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !6109

if.then37:                                        ; preds = %if.end35
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6110
  call void @dump_sa_points_to_info(%struct._IO_FILE* %32), !dbg !6111
  br label %if.end38, !dbg !6111

if.end38:                                         ; preds = %if.then37, %if.end35
  ret void, !dbg !6112
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_what_var_points_to(%struct.variable_info* %orig_vi, %struct.pt_solution* %pt) #0 !dbg !6113 {
entry:
  %orig_vi.addr = alloca %struct.variable_info*, align 8
  %pt.addr = alloca %struct.pt_solution*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %finished_solution = alloca %struct.bitmap_head_def*, align 8
  %result = alloca %struct.bitmap_head_def*, align 8
  %vi = alloca %struct.variable_info*, align 8
  %vi3 = alloca %struct.variable_info*, align 8
  store %struct.variable_info* %orig_vi, %struct.variable_info** %orig_vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %orig_vi.addr, metadata !6116, metadata !DIExpression()), !dbg !6117
  store %struct.pt_solution* %pt, %struct.pt_solution** %pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt.addr, metadata !6118, metadata !DIExpression()), !dbg !6119
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6120, metadata !DIExpression()), !dbg !6121
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !6122, metadata !DIExpression()), !dbg !6123
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %finished_solution, metadata !6124, metadata !DIExpression()), !dbg !6125
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %result, metadata !6126, metadata !DIExpression()), !dbg !6127
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !6128, metadata !DIExpression()), !dbg !6129
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6130
  %1 = bitcast %struct.pt_solution* %0 to i8*, !dbg !6131
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 16, i1 false), !dbg !6131
  %2 = load %struct.variable_info*, %struct.variable_info** %orig_vi.addr, align 8, !dbg !6132
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %2, i32 0, i32 0, !dbg !6133
  %3 = load i32, i32* %id, align 8, !dbg !6133
  %call = call i32 @find(i32 %3), !dbg !6134
  %call1 = call %struct.variable_info* @get_varinfo(i32 %call), !dbg !6135
  store %struct.variable_info* %call1, %struct.variable_info** %vi, align 8, !dbg !6136
  %4 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !6137
  %solution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %4, i32 0, i32 8, !dbg !6137
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution, align 8, !dbg !6137
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %5, i32 0, i32* %i), !dbg !6137
  br label %for.cond, !dbg !6137

for.cond:                                         ; preds = %for.inc, %entry
  %call2 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6139
  %tobool = icmp ne i8 %call2, 0, !dbg !6137
  br i1 %tobool, label %for.body, label %for.end, !dbg !6137

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi3, metadata !6141, metadata !DIExpression()), !dbg !6143
  %6 = load i32, i32* %i, align 4, !dbg !6144
  %call4 = call %struct.variable_info* @get_varinfo(i32 %6), !dbg !6145
  store %struct.variable_info* %call4, %struct.variable_info** %vi3, align 8, !dbg !6143
  %7 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6146
  %is_artificial_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %7, i32 0, i32 1, !dbg !6148
  %bf.load = load i8, i8* %is_artificial_var, align 4, !dbg !6148
  %bf.clear = and i8 %bf.load, 1, !dbg !6148
  %bf.cast = zext i8 %bf.clear to i32, !dbg !6148
  %tobool5 = icmp ne i32 %bf.cast, 0, !dbg !6146
  br i1 %tobool5, label %if.then, label %if.end52, !dbg !6149

if.then:                                          ; preds = %for.body
  %8 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6150
  %id6 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %8, i32 0, i32 0, !dbg !6153
  %9 = load i32, i32* %id6, align 8, !dbg !6153
  %cmp = icmp eq i32 %9, 0, !dbg !6154
  br i1 %cmp, label %if.then7, label %if.else, !dbg !6155

if.then7:                                         ; preds = %if.then
  %10 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6156
  %11 = bitcast %struct.pt_solution* %10 to i8*, !dbg !6157
  %bf.load8 = load i8, i8* %11, align 8, !dbg !6158
  %bf.clear9 = and i8 %bf.load8, -9, !dbg !6158
  %bf.set = or i8 %bf.clear9, 8, !dbg !6158
  store i8 %bf.set, i8* %11, align 8, !dbg !6158
  br label %if.end51, !dbg !6156

if.else:                                          ; preds = %if.then
  %12 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6159
  %id10 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %12, i32 0, i32 0, !dbg !6161
  %13 = load i32, i32* %id10, align 8, !dbg !6161
  %cmp11 = icmp eq i32 %13, 3, !dbg !6162
  br i1 %cmp11, label %if.then12, label %if.else16, !dbg !6163

if.then12:                                        ; preds = %if.else
  %14 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6164
  %15 = bitcast %struct.pt_solution* %14 to i8*, !dbg !6165
  %bf.load13 = load i8, i8* %15, align 8, !dbg !6166
  %bf.clear14 = and i8 %bf.load13, -5, !dbg !6166
  %bf.set15 = or i8 %bf.clear14, 4, !dbg !6166
  store i8 %bf.set15, i8* %15, align 8, !dbg !6166
  br label %if.end50, !dbg !6164

if.else16:                                        ; preds = %if.else
  %16 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6167
  %id17 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %16, i32 0, i32 0, !dbg !6169
  %17 = load i32, i32* %id17, align 8, !dbg !6169
  %cmp18 = icmp eq i32 %17, 5, !dbg !6170
  br i1 %cmp18, label %if.then19, label %if.else20, !dbg !6171

if.then19:                                        ; preds = %if.else16
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 4820, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6172
  br label %if.end49, !dbg !6172

if.else20:                                        ; preds = %if.else16
  %18 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6173
  %id21 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %18, i32 0, i32 0, !dbg !6175
  %19 = load i32, i32* %id21, align 8, !dbg !6175
  %cmp22 = icmp eq i32 %19, 4, !dbg !6176
  br i1 %cmp22, label %if.then23, label %if.else27, !dbg !6177

if.then23:                                        ; preds = %if.else20
  %20 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6178
  %21 = bitcast %struct.pt_solution* %20 to i8*, !dbg !6179
  %bf.load24 = load i8, i8* %21, align 8, !dbg !6180
  %bf.clear25 = and i8 %bf.load24, -3, !dbg !6180
  %bf.set26 = or i8 %bf.clear25, 2, !dbg !6180
  store i8 %bf.set26, i8* %21, align 8, !dbg !6180
  br label %if.end48, !dbg !6178

if.else27:                                        ; preds = %if.else20
  %22 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6181
  %is_heap_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %22, i32 0, i32 1, !dbg !6183
  %bf.load28 = load i8, i8* %is_heap_var, align 4, !dbg !6183
  %bf.lshr = lshr i8 %bf.load28, 4, !dbg !6183
  %bf.clear29 = and i8 %bf.lshr, 1, !dbg !6183
  %bf.cast30 = zext i8 %bf.clear29 to i32, !dbg !6183
  %tobool31 = icmp ne i32 %bf.cast30, 0, !dbg !6181
  br i1 %tobool31, label %if.then32, label %if.else33, !dbg !6184

if.then32:                                        ; preds = %if.else27
  br label %if.end47, !dbg !6184

if.else33:                                        ; preds = %if.else27
  %23 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6185
  %id34 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %23, i32 0, i32 0, !dbg !6187
  %24 = load i32, i32* %id34, align 8, !dbg !6187
  %cmp35 = icmp eq i32 %24, 2, !dbg !6188
  br i1 %cmp35, label %if.then36, label %if.else37, !dbg !6189

if.then36:                                        ; preds = %if.else33
  br label %if.end46, !dbg !6189

if.else37:                                        ; preds = %if.else33
  %25 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6190
  %id38 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %25, i32 0, i32 0, !dbg !6192
  %26 = load i32, i32* %id38, align 8, !dbg !6192
  %cmp39 = icmp eq i32 %26, 1, !dbg !6193
  br i1 %cmp39, label %if.then42, label %lor.lhs.false, !dbg !6194

lor.lhs.false:                                    ; preds = %if.else37
  %27 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6195
  %id40 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %27, i32 0, i32 0, !dbg !6196
  %28 = load i32, i32* %id40, align 8, !dbg !6196
  %cmp41 = icmp eq i32 %28, 7, !dbg !6197
  br i1 %cmp41, label %if.then42, label %if.end, !dbg !6198

if.then42:                                        ; preds = %lor.lhs.false, %if.else37
  %29 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6199
  %30 = bitcast %struct.pt_solution* %29 to i8*, !dbg !6200
  %bf.load43 = load i8, i8* %30, align 8, !dbg !6201
  %bf.clear44 = and i8 %bf.load43, -2, !dbg !6201
  %bf.set45 = or i8 %bf.clear44, 1, !dbg !6201
  store i8 %bf.set45, i8* %30, align 8, !dbg !6201
  br label %if.end, !dbg !6199

if.end:                                           ; preds = %if.then42, %lor.lhs.false
  br label %if.end46

if.end46:                                         ; preds = %if.end, %if.then36
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then32
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then23
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then19
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then12
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then7
  br label %if.end52, !dbg !6202

if.end52:                                         ; preds = %if.end51, %for.body
  %31 = load %struct.variable_info*, %struct.variable_info** %vi3, align 8, !dbg !6203
  %is_restrict_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %31, i32 0, i32 1, !dbg !6205
  %bf.load53 = load i8, i8* %is_restrict_var, align 4, !dbg !6205
  %bf.lshr54 = lshr i8 %bf.load53, 5, !dbg !6205
  %bf.clear55 = and i8 %bf.lshr54, 1, !dbg !6205
  %bf.cast56 = zext i8 %bf.clear55 to i32, !dbg !6205
  %tobool57 = icmp ne i32 %bf.cast56, 0, !dbg !6203
  br i1 %tobool57, label %if.then58, label %if.end62, !dbg !6206

if.then58:                                        ; preds = %if.end52
  %32 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6207
  %33 = bitcast %struct.pt_solution* %32 to i8*, !dbg !6208
  %bf.load59 = load i8, i8* %33, align 8, !dbg !6209
  %bf.clear60 = and i8 %bf.load59, -33, !dbg !6209
  %bf.set61 = or i8 %bf.clear60, 32, !dbg !6209
  store i8 %bf.set61, i8* %33, align 8, !dbg !6209
  br label %if.end62, !dbg !6207

if.end62:                                         ; preds = %if.then58, %if.end52
  br label %for.inc, !dbg !6210

for.inc:                                          ; preds = %if.end62
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6139
  br label %for.cond, !dbg !6139, !llvm.loop !6211

for.end:                                          ; preds = %for.cond
  %34 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6213
  %35 = bitcast %struct.pt_solution* %34 to i8*, !dbg !6215
  %bf.load63 = load i8, i8* %35, align 8, !dbg !6215
  %bf.clear64 = and i8 %bf.load63, 1, !dbg !6215
  %bf.cast65 = zext i8 %bf.clear64 to i32, !dbg !6215
  %tobool66 = icmp ne i32 %bf.cast65, 0, !dbg !6213
  br i1 %tobool66, label %land.lhs.true, label %if.end79, !dbg !6216

land.lhs.true:                                    ; preds = %for.end
  %36 = load %struct.variable_info*, %struct.variable_info** %orig_vi.addr, align 8, !dbg !6217
  %is_artificial_var67 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %36, i32 0, i32 1, !dbg !6218
  %bf.load68 = load i8, i8* %is_artificial_var67, align 4, !dbg !6218
  %bf.clear69 = and i8 %bf.load68, 1, !dbg !6218
  %bf.cast70 = zext i8 %bf.clear69 to i32, !dbg !6218
  %tobool71 = icmp ne i32 %bf.cast70, 0, !dbg !6217
  br i1 %tobool71, label %if.then78, label %lor.lhs.false72, !dbg !6219

lor.lhs.false72:                                  ; preds = %land.lhs.true
  %37 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6220
  %38 = bitcast %struct.pt_solution* %37 to i8*, !dbg !6221
  %bf.load73 = load i8, i8* %38, align 8, !dbg !6221
  %bf.lshr74 = lshr i8 %bf.load73, 5, !dbg !6221
  %bf.clear75 = and i8 %bf.lshr74, 1, !dbg !6221
  %bf.cast76 = zext i8 %bf.clear75 to i32, !dbg !6221
  %tobool77 = icmp ne i32 %bf.cast76, 0, !dbg !6220
  br i1 %tobool77, label %if.end79, label %if.then78, !dbg !6222

if.then78:                                        ; preds = %lor.lhs.false72, %land.lhs.true
  br label %if.end87, !dbg !6223

if.end79:                                         ; preds = %lor.lhs.false72, %for.end
  %call80 = call %struct.bitmap_head_def* @bitmap_gc_alloc_stat(), !dbg !6224
  store %struct.bitmap_head_def* %call80, %struct.bitmap_head_def** %finished_solution, align 8, !dbg !6225
  %39 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 7), align 4, !dbg !6226
  %inc = add i32 %39, 1, !dbg !6226
  store i32 %inc, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 7), align 4, !dbg !6226
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %finished_solution, align 8, !dbg !6227
  %41 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !6228
  %solution81 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %41, i32 0, i32 8, !dbg !6229
  %42 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution81, align 8, !dbg !6229
  %43 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6230
  call void @set_uids_in_ptset(%struct.bitmap_head_def* %40, %struct.bitmap_head_def* %42, %struct.pt_solution* %43), !dbg !6231
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %finished_solution, align 8, !dbg !6232
  %call82 = call %struct.bitmap_head_def* @shared_bitmap_lookup(%struct.bitmap_head_def* %44), !dbg !6233
  store %struct.bitmap_head_def* %call82, %struct.bitmap_head_def** %result, align 8, !dbg !6234
  %45 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %result, align 8, !dbg !6235
  %tobool83 = icmp ne %struct.bitmap_head_def* %45, null, !dbg !6235
  br i1 %tobool83, label %if.else85, label %if.then84, !dbg !6237

if.then84:                                        ; preds = %if.end79
  %46 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %finished_solution, align 8, !dbg !6238
  call void @shared_bitmap_add(%struct.bitmap_head_def* %46), !dbg !6240
  %47 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %finished_solution, align 8, !dbg !6241
  %48 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6242
  %vars = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %48, i32 0, i32 1, !dbg !6243
  store %struct.bitmap_head_def* %47, %struct.bitmap_head_def** %vars, align 8, !dbg !6244
  br label %if.end87, !dbg !6245

if.else85:                                        ; preds = %if.end79
  %49 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %result, align 8, !dbg !6246
  %50 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !6248
  %vars86 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %50, i32 0, i32 1, !dbg !6249
  store %struct.bitmap_head_def* %49, %struct.bitmap_head_def** %vars86, align 8, !dbg !6250
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %finished_solution, align 8, !dbg !6251
  call void @bitmap_clear(%struct.bitmap_head_def* %51), !dbg !6252
  br label %if.end87

if.end87:                                         ; preds = %if.then78, %if.else85, %if.then84
  ret void, !dbg !6253
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_varinfo_t_base_iterate(%struct.VEC_varinfo_t_base* %vec_, i32 %ix_, %struct.variable_info** %ptr) #0 !dbg !6254 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_varinfo_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.variable_info**, align 8
  store %struct.VEC_varinfo_t_base* %vec_, %struct.VEC_varinfo_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_varinfo_t_base** %vec_.addr, metadata !6258, metadata !DIExpression()), !dbg !6259
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6260, metadata !DIExpression()), !dbg !6259
  store %struct.variable_info** %ptr, %struct.variable_info*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info*** %ptr.addr, metadata !6261, metadata !DIExpression()), !dbg !6259
  %0 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6262
  %tobool = icmp ne %struct.VEC_varinfo_t_base* %0, null, !dbg !6262
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6262

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6262
  %2 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6262
  %num = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %2, i32 0, i32 0, !dbg !6262
  %3 = load i32, i32* %num, align 8, !dbg !6262
  %cmp = icmp ult i32 %1, %3, !dbg !6262
  br i1 %cmp, label %if.then, label %if.else, !dbg !6259

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6264
  %vec = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %4, i32 0, i32 2, !dbg !6264
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6264
  %idxprom = zext i32 %5 to i64, !dbg !6264
  %arrayidx = getelementptr inbounds [1 x %struct.variable_info*], [1 x %struct.variable_info*]* %vec, i64 0, i64 %idxprom, !dbg !6264
  %6 = load %struct.variable_info*, %struct.variable_info** %arrayidx, align 8, !dbg !6264
  %7 = load %struct.variable_info**, %struct.variable_info*** %ptr.addr, align 8, !dbg !6264
  store %struct.variable_info* %6, %struct.variable_info** %7, align 8, !dbg !6264
  store i32 1, i32* %retval, align 4, !dbg !6264
  br label %return, !dbg !6264

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.variable_info**, %struct.variable_info*** %ptr.addr, align 8, !dbg !6266
  store %struct.variable_info* null, %struct.variable_info** %8, align 8, !dbg !6266
  store i32 0, i32* %retval, align 4, !dbg !6266
  br label %return, !dbg !6266

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6259
  ret i32 %9, !dbg !6259
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !6268 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6273, metadata !DIExpression()), !dbg !6274
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6274
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6274
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6274

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6274
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !6274
  %2 = load i32, i32* %num, align 8, !dbg !6274
  br label %cond.end, !dbg !6274

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6274

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6274
  ret i32 %cond, !dbg !6274
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !6275 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6278, metadata !DIExpression()), !dbg !6279
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6280, metadata !DIExpression()), !dbg !6279
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6279
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6279
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6279

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6279
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6279
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !6279
  %3 = load i32, i32* %num, align 8, !dbg !6279
  %cmp = icmp ult i32 %1, %3, !dbg !6279
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6281
  %land.ext = zext i1 %4 to i32, !dbg !6279
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6279
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !6279
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6279
  %idxprom = zext i32 %6 to i64, !dbg !6279
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6279
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6279
  ret %union.tree_node* %7, !dbg !6279
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_what_p_points_to(%union.tree_node* %p) #0 !dbg !6282 {
entry:
  %p.addr = alloca %union.tree_node*, align 8
  %pi = alloca %struct.ptr_info_def*, align 8
  %lookup_p = alloca %union.tree_node*, align 8
  %vi = alloca %struct.variable_info*, align 8
  store %union.tree_node* %p, %union.tree_node** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %p.addr, metadata !6285, metadata !DIExpression()), !dbg !6286
  call void @llvm.dbg.declare(metadata %struct.ptr_info_def** %pi, metadata !6287, metadata !DIExpression()), !dbg !6288
  call void @llvm.dbg.declare(metadata %union.tree_node** %lookup_p, metadata !6289, metadata !DIExpression()), !dbg !6290
  %0 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !6291
  store %union.tree_node* %0, %union.tree_node** %lookup_p, align 8, !dbg !6290
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !6292, metadata !DIExpression()), !dbg !6293
  %1 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !6294
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6294
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6294
  %bf.load = load i64, i64* %2, align 8, !dbg !6294
  %bf.clear = and i64 %bf.load, 65535, !dbg !6294
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6294
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6296
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6297

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !6298
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !6298
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6298
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6298
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6298
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6298
  %bf.load2 = load i64, i64* %5, align 8, !dbg !6298
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6298
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6298
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !6299
  br i1 %cmp5, label %land.lhs.true6, label %if.end, !dbg !6300

land.lhs.true6:                                   ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !6301
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6301
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6301
  %bf.load8 = load i64, i64* %7, align 8, !dbg !6301
  %bf.lshr = lshr i64 %bf.load8, 32, !dbg !6301
  %bf.clear9 = and i64 %bf.lshr, 1, !dbg !6301
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6301
  %tobool = icmp ne i32 %bf.cast10, 0, !dbg !6301
  br i1 %tobool, label %if.then, label %if.end, !dbg !6302

if.then:                                          ; preds = %land.lhs.true6
  %8 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !6303
  %ssa_name11 = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !6303
  %var12 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name11, i32 0, i32 1, !dbg !6303
  %9 = load %union.tree_node*, %union.tree_node** %var12, align 8, !dbg !6303
  store %union.tree_node* %9, %union.tree_node** %lookup_p, align 8, !dbg !6304
  br label %if.end, !dbg !6305

if.end:                                           ; preds = %if.then, %land.lhs.true6, %land.lhs.true, %entry
  %10 = load %union.tree_node*, %union.tree_node** %lookup_p, align 8, !dbg !6306
  %call = call %struct.variable_info* @lookup_vi_for_tree(%union.tree_node* %10), !dbg !6307
  store %struct.variable_info* %call, %struct.variable_info** %vi, align 8, !dbg !6308
  %11 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !6309
  %tobool13 = icmp ne %struct.variable_info* %11, null, !dbg !6309
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !6311

if.then14:                                        ; preds = %if.end
  br label %return, !dbg !6312

if.end15:                                         ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !6313
  %call16 = call %struct.ptr_info_def* @get_ptr_info(%union.tree_node* %12), !dbg !6314
  store %struct.ptr_info_def* %call16, %struct.ptr_info_def** %pi, align 8, !dbg !6315
  %13 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !6316
  %14 = load %struct.ptr_info_def*, %struct.ptr_info_def** %pi, align 8, !dbg !6317
  %pt = getelementptr inbounds %struct.ptr_info_def, %struct.ptr_info_def* %14, i32 0, i32 0, !dbg !6318
  call void @find_what_var_points_to(%struct.variable_info* %13, %struct.pt_solution* %pt), !dbg !6319
  br label %return, !dbg !6320

return:                                           ; preds = %if.end15, %if.then14
  ret void, !dbg !6320
}

declare dso_local void @timevar_pop_1(i32) #2

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_constraint_t_heap* @VEC_constraint_t_heap_alloc(i32 %alloc_) #0 !dbg !6321 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6324, metadata !DIExpression()), !dbg !6325
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6325
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6325
  %1 = bitcast i8* %call to %struct.VEC_constraint_t_heap*, !dbg !6325
  ret %struct.VEC_constraint_t_heap* %1, !dbg !6325
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_varinfo_t_heap* @VEC_varinfo_t_heap_alloc(i32 %alloc_) #0 !dbg !6326 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6329, metadata !DIExpression()), !dbg !6330
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6330
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6330
  %1 = bitcast i8* %call to %struct.VEC_varinfo_t_heap*, !dbg !6330
  ret %struct.VEC_varinfo_t_heap* %1, !dbg !6330
}

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @shared_bitmap_hash(i8* %p) #0 !dbg !6331 {
entry:
  %p.addr = alloca i8*, align 8
  %bi = alloca %struct.shared_bitmap_info*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !6332, metadata !DIExpression()), !dbg !6333
  call void @llvm.dbg.declare(metadata %struct.shared_bitmap_info** %bi, metadata !6334, metadata !DIExpression()), !dbg !6336
  %0 = load i8*, i8** %p.addr, align 8, !dbg !6337
  %1 = bitcast i8* %0 to %struct.shared_bitmap_info*, !dbg !6338
  store %struct.shared_bitmap_info* %1, %struct.shared_bitmap_info** %bi, align 8, !dbg !6336
  %2 = load %struct.shared_bitmap_info*, %struct.shared_bitmap_info** %bi, align 8, !dbg !6339
  %hashcode = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %2, i32 0, i32 1, !dbg !6340
  %3 = load i32, i32* %hashcode, align 8, !dbg !6340
  ret i32 %3, !dbg !6341
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @shared_bitmap_eq(i8* %p1, i8* %p2) #0 !dbg !6342 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %sbi1 = alloca %struct.shared_bitmap_info*, align 8
  %sbi2 = alloca %struct.shared_bitmap_info*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6343, metadata !DIExpression()), !dbg !6344
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !6345, metadata !DIExpression()), !dbg !6346
  call void @llvm.dbg.declare(metadata %struct.shared_bitmap_info** %sbi1, metadata !6347, metadata !DIExpression()), !dbg !6348
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !6349
  %1 = bitcast i8* %0 to %struct.shared_bitmap_info*, !dbg !6350
  store %struct.shared_bitmap_info* %1, %struct.shared_bitmap_info** %sbi1, align 8, !dbg !6348
  call void @llvm.dbg.declare(metadata %struct.shared_bitmap_info** %sbi2, metadata !6351, metadata !DIExpression()), !dbg !6352
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !6353
  %3 = bitcast i8* %2 to %struct.shared_bitmap_info*, !dbg !6354
  store %struct.shared_bitmap_info* %3, %struct.shared_bitmap_info** %sbi2, align 8, !dbg !6352
  %4 = load %struct.shared_bitmap_info*, %struct.shared_bitmap_info** %sbi1, align 8, !dbg !6355
  %pt_vars = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %4, i32 0, i32 0, !dbg !6356
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pt_vars, align 8, !dbg !6356
  %6 = load %struct.shared_bitmap_info*, %struct.shared_bitmap_info** %sbi2, align 8, !dbg !6357
  %pt_vars1 = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %6, i32 0, i32 0, !dbg !6358
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pt_vars1, align 8, !dbg !6358
  %call = call zeroext i8 @bitmap_equal_p(%struct.bitmap_head_def* %5, %struct.bitmap_head_def* %7), !dbg !6359
  %conv = zext i8 %call to i32, !dbg !6359
  ret i32 %conv, !dbg !6360
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_base_vars() #0 !dbg !6361 {
entry:
  %lhs = alloca %struct.constraint_expr, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  %var_anything = alloca %struct.variable_info*, align 8
  %var_nothing = alloca %struct.variable_info*, align 8
  %var_readonly = alloca %struct.variable_info*, align 8
  %var_escaped = alloca %struct.variable_info*, align 8
  %var_nonlocal = alloca %struct.variable_info*, align 8
  %var_callused = alloca %struct.variable_info*, align 8
  %var_storedanything = alloca %struct.variable_info*, align 8
  %var_integer = alloca %struct.variable_info*, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !6362, metadata !DIExpression()), !dbg !6363
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !6364, metadata !DIExpression()), !dbg !6365
  call void @llvm.dbg.declare(metadata %struct.variable_info** %var_anything, metadata !6366, metadata !DIExpression()), !dbg !6367
  call void @llvm.dbg.declare(metadata %struct.variable_info** %var_nothing, metadata !6368, metadata !DIExpression()), !dbg !6369
  call void @llvm.dbg.declare(metadata %struct.variable_info** %var_readonly, metadata !6370, metadata !DIExpression()), !dbg !6371
  call void @llvm.dbg.declare(metadata %struct.variable_info** %var_escaped, metadata !6372, metadata !DIExpression()), !dbg !6373
  call void @llvm.dbg.declare(metadata %struct.variable_info** %var_nonlocal, metadata !6374, metadata !DIExpression()), !dbg !6375
  call void @llvm.dbg.declare(metadata %struct.variable_info** %var_callused, metadata !6376, metadata !DIExpression()), !dbg !6377
  call void @llvm.dbg.declare(metadata %struct.variable_info** %var_storedanything, metadata !6378, metadata !DIExpression()), !dbg !6379
  call void @llvm.dbg.declare(metadata %struct.variable_info** %var_integer, metadata !6380, metadata !DIExpression()), !dbg !6381
  %call = call %struct.variable_info* @new_var_info(%union.tree_node* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i64 0, i64 0)), !dbg !6382
  store %struct.variable_info* %call, %struct.variable_info** %var_nothing, align 8, !dbg !6383
  %0 = load %struct.variable_info*, %struct.variable_info** %var_nothing, align 8, !dbg !6384
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %0, i32 0, i32 0, !dbg !6384
  %1 = load i32, i32* %id, align 8, !dbg !6384
  %cmp = icmp eq i32 %1, 0, !dbg !6384
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6384

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5153, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6384
  br label %cond.end, !dbg !6384

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6384

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6384
  %2 = load %struct.variable_info*, %struct.variable_info** %var_nothing, align 8, !dbg !6385
  %is_artificial_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %2, i32 0, i32 1, !dbg !6386
  %bf.load = load i8, i8* %is_artificial_var, align 4, !dbg !6387
  %bf.clear = and i8 %bf.load, -2, !dbg !6387
  %bf.set = or i8 %bf.clear, 1, !dbg !6387
  store i8 %bf.set, i8* %is_artificial_var, align 4, !dbg !6387
  %3 = load %struct.variable_info*, %struct.variable_info** %var_nothing, align 8, !dbg !6388
  %offset = getelementptr inbounds %struct.variable_info, %struct.variable_info* %3, i32 0, i32 3, !dbg !6389
  store i64 0, i64* %offset, align 8, !dbg !6390
  %4 = load %struct.variable_info*, %struct.variable_info** %var_nothing, align 8, !dbg !6391
  %size = getelementptr inbounds %struct.variable_info, %struct.variable_info* %4, i32 0, i32 4, !dbg !6392
  store i64 -1, i64* %size, align 8, !dbg !6393
  %5 = load %struct.variable_info*, %struct.variable_info** %var_nothing, align 8, !dbg !6394
  %fullsize = getelementptr inbounds %struct.variable_info, %struct.variable_info* %5, i32 0, i32 5, !dbg !6395
  store i64 -1, i64* %fullsize, align 8, !dbg !6396
  %6 = load %struct.variable_info*, %struct.variable_info** %var_nothing, align 8, !dbg !6397
  %is_special_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %6, i32 0, i32 1, !dbg !6398
  %bf.load1 = load i8, i8* %is_special_var, align 4, !dbg !6399
  %bf.clear2 = and i8 %bf.load1, -3, !dbg !6399
  %bf.set3 = or i8 %bf.clear2, 2, !dbg !6399
  store i8 %bf.set3, i8* %is_special_var, align 4, !dbg !6399
  %call4 = call %struct.variable_info* @new_var_info(%union.tree_node* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.46, i64 0, i64 0)), !dbg !6400
  store %struct.variable_info* %call4, %struct.variable_info** %var_anything, align 8, !dbg !6401
  %7 = load %struct.variable_info*, %struct.variable_info** %var_anything, align 8, !dbg !6402
  %id5 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %7, i32 0, i32 0, !dbg !6402
  %8 = load i32, i32* %id5, align 8, !dbg !6402
  %cmp6 = icmp eq i32 %8, 1, !dbg !6402
  br i1 %cmp6, label %cond.false8, label %cond.true7, !dbg !6402

cond.true7:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5163, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6402
  br label %cond.end9, !dbg !6402

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !6402

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !6402
  %9 = load %struct.variable_info*, %struct.variable_info** %var_anything, align 8, !dbg !6403
  %is_artificial_var11 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %9, i32 0, i32 1, !dbg !6404
  %bf.load12 = load i8, i8* %is_artificial_var11, align 4, !dbg !6405
  %bf.clear13 = and i8 %bf.load12, -2, !dbg !6405
  %bf.set14 = or i8 %bf.clear13, 1, !dbg !6405
  store i8 %bf.set14, i8* %is_artificial_var11, align 4, !dbg !6405
  %10 = load %struct.variable_info*, %struct.variable_info** %var_anything, align 8, !dbg !6406
  %size15 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %10, i32 0, i32 4, !dbg !6407
  store i64 -1, i64* %size15, align 8, !dbg !6408
  %11 = load %struct.variable_info*, %struct.variable_info** %var_anything, align 8, !dbg !6409
  %offset16 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %11, i32 0, i32 3, !dbg !6410
  store i64 0, i64* %offset16, align 8, !dbg !6411
  %12 = load %struct.variable_info*, %struct.variable_info** %var_anything, align 8, !dbg !6412
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %12, i32 0, i32 2, !dbg !6413
  store %struct.variable_info* null, %struct.variable_info** %next, align 8, !dbg !6414
  %13 = load %struct.variable_info*, %struct.variable_info** %var_anything, align 8, !dbg !6415
  %fullsize17 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %13, i32 0, i32 5, !dbg !6416
  store i64 -1, i64* %fullsize17, align 8, !dbg !6417
  %14 = load %struct.variable_info*, %struct.variable_info** %var_anything, align 8, !dbg !6418
  %is_special_var18 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %14, i32 0, i32 1, !dbg !6419
  %bf.load19 = load i8, i8* %is_special_var18, align 4, !dbg !6420
  %bf.clear20 = and i8 %bf.load19, -3, !dbg !6420
  %bf.set21 = or i8 %bf.clear20, 2, !dbg !6420
  store i8 %bf.set21, i8* %is_special_var18, align 4, !dbg !6420
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6421
  store i32 0, i32* %type, align 8, !dbg !6422
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6423
  store i32 1, i32* %var, align 4, !dbg !6424
  %offset22 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !6425
  store i64 0, i64* %offset22, align 8, !dbg !6426
  %type23 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6427
  store i32 2, i32* %type23, align 8, !dbg !6428
  %var24 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6429
  store i32 1, i32* %var24, align 4, !dbg !6430
  %offset25 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6431
  store i64 0, i64* %offset25, align 8, !dbg !6432
  %15 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6433
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i32 0, i32 0, !dbg !6433
  %17 = load i64, i64* %16, align 8, !dbg !6433
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i32 0, i32 1, !dbg !6433
  %19 = load i64, i64* %18, align 8, !dbg !6433
  %20 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6433
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 0, !dbg !6433
  %22 = load i64, i64* %21, align 8, !dbg !6433
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1, !dbg !6433
  %24 = load i64, i64* %23, align 8, !dbg !6433
  %call26 = call %struct.constraint* @new_constraint(i64 %17, i64 %19, i64 %22, i64 %24), !dbg !6433
  %call27 = call %struct.constraint** @VEC_constraint_t_heap_safe_push(%struct.VEC_constraint_t_heap** @constraints, %struct.constraint* %call26), !dbg !6433
  %call28 = call %struct.variable_info* @new_var_info(%union.tree_node* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.47, i64 0, i64 0)), !dbg !6434
  store %struct.variable_info* %call28, %struct.variable_info** %var_readonly, align 8, !dbg !6435
  %25 = load %struct.variable_info*, %struct.variable_info** %var_readonly, align 8, !dbg !6436
  %id29 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %25, i32 0, i32 0, !dbg !6436
  %26 = load i32, i32* %id29, align 8, !dbg !6436
  %cmp30 = icmp eq i32 %26, 2, !dbg !6436
  br i1 %cmp30, label %cond.false32, label %cond.true31, !dbg !6436

cond.true31:                                      ; preds = %cond.end9
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5189, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6436
  br label %cond.end33, !dbg !6436

cond.false32:                                     ; preds = %cond.end9
  br label %cond.end33, !dbg !6436

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi i32 [ 0, %cond.true31 ], [ 0, %cond.false32 ], !dbg !6436
  %27 = load %struct.variable_info*, %struct.variable_info** %var_readonly, align 8, !dbg !6437
  %is_artificial_var35 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %27, i32 0, i32 1, !dbg !6438
  %bf.load36 = load i8, i8* %is_artificial_var35, align 4, !dbg !6439
  %bf.clear37 = and i8 %bf.load36, -2, !dbg !6439
  %bf.set38 = or i8 %bf.clear37, 1, !dbg !6439
  store i8 %bf.set38, i8* %is_artificial_var35, align 4, !dbg !6439
  %28 = load %struct.variable_info*, %struct.variable_info** %var_readonly, align 8, !dbg !6440
  %offset39 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %28, i32 0, i32 3, !dbg !6441
  store i64 0, i64* %offset39, align 8, !dbg !6442
  %29 = load %struct.variable_info*, %struct.variable_info** %var_readonly, align 8, !dbg !6443
  %size40 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %29, i32 0, i32 4, !dbg !6444
  store i64 -1, i64* %size40, align 8, !dbg !6445
  %30 = load %struct.variable_info*, %struct.variable_info** %var_readonly, align 8, !dbg !6446
  %fullsize41 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %30, i32 0, i32 5, !dbg !6447
  store i64 -1, i64* %fullsize41, align 8, !dbg !6448
  %31 = load %struct.variable_info*, %struct.variable_info** %var_readonly, align 8, !dbg !6449
  %next42 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %31, i32 0, i32 2, !dbg !6450
  store %struct.variable_info* null, %struct.variable_info** %next42, align 8, !dbg !6451
  %32 = load %struct.variable_info*, %struct.variable_info** %var_readonly, align 8, !dbg !6452
  %is_special_var43 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %32, i32 0, i32 1, !dbg !6453
  %bf.load44 = load i8, i8* %is_special_var43, align 4, !dbg !6454
  %bf.clear45 = and i8 %bf.load44, -3, !dbg !6454
  %bf.set46 = or i8 %bf.clear45, 2, !dbg !6454
  store i8 %bf.set46, i8* %is_special_var43, align 4, !dbg !6454
  %type47 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6455
  store i32 0, i32* %type47, align 8, !dbg !6456
  %var48 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6457
  store i32 2, i32* %var48, align 4, !dbg !6458
  %offset49 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !6459
  store i64 0, i64* %offset49, align 8, !dbg !6460
  %type50 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6461
  store i32 2, i32* %type50, align 8, !dbg !6462
  %var51 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6463
  store i32 2, i32* %var51, align 4, !dbg !6464
  %offset52 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6465
  store i64 0, i64* %offset52, align 8, !dbg !6466
  %33 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6467
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %33, i32 0, i32 0, !dbg !6467
  %35 = load i64, i64* %34, align 8, !dbg !6467
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %33, i32 0, i32 1, !dbg !6467
  %37 = load i64, i64* %36, align 8, !dbg !6467
  %38 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6467
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %38, i32 0, i32 0, !dbg !6467
  %40 = load i64, i64* %39, align 8, !dbg !6467
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %38, i32 0, i32 1, !dbg !6467
  %42 = load i64, i64* %41, align 8, !dbg !6467
  %call53 = call %struct.constraint* @new_constraint(i64 %35, i64 %37, i64 %40, i64 %42), !dbg !6467
  call void @process_constraint(%struct.constraint* %call53), !dbg !6468
  %call54 = call %struct.variable_info* @new_var_info(%union.tree_node* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i64 0, i64 0)), !dbg !6469
  store %struct.variable_info* %call54, %struct.variable_info** %var_escaped, align 8, !dbg !6470
  %43 = load %struct.variable_info*, %struct.variable_info** %var_escaped, align 8, !dbg !6471
  %id55 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %43, i32 0, i32 0, !dbg !6471
  %44 = load i32, i32* %id55, align 8, !dbg !6471
  %cmp56 = icmp eq i32 %44, 3, !dbg !6471
  br i1 %cmp56, label %cond.false58, label %cond.true57, !dbg !6471

cond.true57:                                      ; preds = %cond.end33
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5212, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6471
  br label %cond.end59, !dbg !6471

cond.false58:                                     ; preds = %cond.end33
  br label %cond.end59, !dbg !6471

cond.end59:                                       ; preds = %cond.false58, %cond.true57
  %cond60 = phi i32 [ 0, %cond.true57 ], [ 0, %cond.false58 ], !dbg !6471
  %45 = load %struct.variable_info*, %struct.variable_info** %var_escaped, align 8, !dbg !6472
  %is_artificial_var61 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %45, i32 0, i32 1, !dbg !6473
  %bf.load62 = load i8, i8* %is_artificial_var61, align 4, !dbg !6474
  %bf.clear63 = and i8 %bf.load62, -2, !dbg !6474
  %bf.set64 = or i8 %bf.clear63, 1, !dbg !6474
  store i8 %bf.set64, i8* %is_artificial_var61, align 4, !dbg !6474
  %46 = load %struct.variable_info*, %struct.variable_info** %var_escaped, align 8, !dbg !6475
  %offset65 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %46, i32 0, i32 3, !dbg !6476
  store i64 0, i64* %offset65, align 8, !dbg !6477
  %47 = load %struct.variable_info*, %struct.variable_info** %var_escaped, align 8, !dbg !6478
  %size66 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %47, i32 0, i32 4, !dbg !6479
  store i64 -1, i64* %size66, align 8, !dbg !6480
  %48 = load %struct.variable_info*, %struct.variable_info** %var_escaped, align 8, !dbg !6481
  %fullsize67 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %48, i32 0, i32 5, !dbg !6482
  store i64 -1, i64* %fullsize67, align 8, !dbg !6483
  %49 = load %struct.variable_info*, %struct.variable_info** %var_escaped, align 8, !dbg !6484
  %is_special_var68 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %49, i32 0, i32 1, !dbg !6485
  %bf.load69 = load i8, i8* %is_special_var68, align 4, !dbg !6486
  %bf.clear70 = and i8 %bf.load69, -3, !dbg !6486
  store i8 %bf.clear70, i8* %is_special_var68, align 4, !dbg !6486
  %call71 = call %struct.variable_info* @new_var_info(%union.tree_node* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49, i64 0, i64 0)), !dbg !6487
  store %struct.variable_info* %call71, %struct.variable_info** %var_nonlocal, align 8, !dbg !6488
  %50 = load %struct.variable_info*, %struct.variable_info** %var_nonlocal, align 8, !dbg !6489
  %id72 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %50, i32 0, i32 0, !dbg !6489
  %51 = load i32, i32* %id72, align 8, !dbg !6489
  %cmp73 = icmp eq i32 %51, 4, !dbg !6489
  br i1 %cmp73, label %cond.false75, label %cond.true74, !dbg !6489

cond.true74:                                      ; preds = %cond.end59
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5222, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6489
  br label %cond.end76, !dbg !6489

cond.false75:                                     ; preds = %cond.end59
  br label %cond.end76, !dbg !6489

cond.end76:                                       ; preds = %cond.false75, %cond.true74
  %cond77 = phi i32 [ 0, %cond.true74 ], [ 0, %cond.false75 ], !dbg !6489
  %52 = load %struct.variable_info*, %struct.variable_info** %var_nonlocal, align 8, !dbg !6490
  %is_artificial_var78 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %52, i32 0, i32 1, !dbg !6491
  %bf.load79 = load i8, i8* %is_artificial_var78, align 4, !dbg !6492
  %bf.clear80 = and i8 %bf.load79, -2, !dbg !6492
  %bf.set81 = or i8 %bf.clear80, 1, !dbg !6492
  store i8 %bf.set81, i8* %is_artificial_var78, align 4, !dbg !6492
  %53 = load %struct.variable_info*, %struct.variable_info** %var_nonlocal, align 8, !dbg !6493
  %offset82 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %53, i32 0, i32 3, !dbg !6494
  store i64 0, i64* %offset82, align 8, !dbg !6495
  %54 = load %struct.variable_info*, %struct.variable_info** %var_nonlocal, align 8, !dbg !6496
  %size83 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %54, i32 0, i32 4, !dbg !6497
  store i64 -1, i64* %size83, align 8, !dbg !6498
  %55 = load %struct.variable_info*, %struct.variable_info** %var_nonlocal, align 8, !dbg !6499
  %fullsize84 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %55, i32 0, i32 5, !dbg !6500
  store i64 -1, i64* %fullsize84, align 8, !dbg !6501
  %56 = load %struct.variable_info*, %struct.variable_info** %var_nonlocal, align 8, !dbg !6502
  %is_special_var85 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %56, i32 0, i32 1, !dbg !6503
  %bf.load86 = load i8, i8* %is_special_var85, align 4, !dbg !6504
  %bf.clear87 = and i8 %bf.load86, -3, !dbg !6504
  %bf.set88 = or i8 %bf.clear87, 2, !dbg !6504
  store i8 %bf.set88, i8* %is_special_var85, align 4, !dbg !6504
  %type89 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6505
  store i32 0, i32* %type89, align 8, !dbg !6506
  %var90 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6507
  store i32 3, i32* %var90, align 4, !dbg !6508
  %offset91 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !6509
  store i64 0, i64* %offset91, align 8, !dbg !6510
  %type92 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6511
  store i32 1, i32* %type92, align 8, !dbg !6512
  %var93 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6513
  store i32 3, i32* %var93, align 4, !dbg !6514
  %offset94 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6515
  store i64 0, i64* %offset94, align 8, !dbg !6516
  %57 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6517
  %58 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %57, i32 0, i32 0, !dbg !6517
  %59 = load i64, i64* %58, align 8, !dbg !6517
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %57, i32 0, i32 1, !dbg !6517
  %61 = load i64, i64* %60, align 8, !dbg !6517
  %62 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6517
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %62, i32 0, i32 0, !dbg !6517
  %64 = load i64, i64* %63, align 8, !dbg !6517
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %62, i32 0, i32 1, !dbg !6517
  %66 = load i64, i64* %65, align 8, !dbg !6517
  %call95 = call %struct.constraint* @new_constraint(i64 %59, i64 %61, i64 %64, i64 %66), !dbg !6517
  call void @process_constraint(%struct.constraint* %call95), !dbg !6518
  %type96 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6519
  store i32 0, i32* %type96, align 8, !dbg !6520
  %var97 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6521
  store i32 3, i32* %var97, align 4, !dbg !6522
  %offset98 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !6523
  store i64 0, i64* %offset98, align 8, !dbg !6524
  %type99 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6525
  store i32 0, i32* %type99, align 8, !dbg !6526
  %var100 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6527
  store i32 3, i32* %var100, align 4, !dbg !6528
  %offset101 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6529
  store i64 -9223372036854775808, i64* %offset101, align 8, !dbg !6530
  %67 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6531
  %68 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %67, i32 0, i32 0, !dbg !6531
  %69 = load i64, i64* %68, align 8, !dbg !6531
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %67, i32 0, i32 1, !dbg !6531
  %71 = load i64, i64* %70, align 8, !dbg !6531
  %72 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6531
  %73 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %72, i32 0, i32 0, !dbg !6531
  %74 = load i64, i64* %73, align 8, !dbg !6531
  %75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %72, i32 0, i32 1, !dbg !6531
  %76 = load i64, i64* %75, align 8, !dbg !6531
  %call102 = call %struct.constraint* @new_constraint(i64 %69, i64 %71, i64 %74, i64 %76), !dbg !6531
  call void @process_constraint(%struct.constraint* %call102), !dbg !6532
  %type103 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6533
  store i32 1, i32* %type103, align 8, !dbg !6534
  %var104 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6535
  store i32 3, i32* %var104, align 4, !dbg !6536
  %offset105 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !6537
  store i64 0, i64* %offset105, align 8, !dbg !6538
  %type106 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6539
  store i32 0, i32* %type106, align 8, !dbg !6540
  %var107 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6541
  store i32 4, i32* %var107, align 4, !dbg !6542
  %offset108 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6543
  store i64 0, i64* %offset108, align 8, !dbg !6544
  %77 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6545
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %77, i32 0, i32 0, !dbg !6545
  %79 = load i64, i64* %78, align 8, !dbg !6545
  %80 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %77, i32 0, i32 1, !dbg !6545
  %81 = load i64, i64* %80, align 8, !dbg !6545
  %82 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6545
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %82, i32 0, i32 0, !dbg !6545
  %84 = load i64, i64* %83, align 8, !dbg !6545
  %85 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %82, i32 0, i32 1, !dbg !6545
  %86 = load i64, i64* %85, align 8, !dbg !6545
  %call109 = call %struct.constraint* @new_constraint(i64 %79, i64 %81, i64 %84, i64 %86), !dbg !6545
  call void @process_constraint(%struct.constraint* %call109), !dbg !6546
  %type110 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6547
  store i32 0, i32* %type110, align 8, !dbg !6548
  %var111 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6549
  store i32 4, i32* %var111, align 4, !dbg !6550
  %offset112 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !6551
  store i64 0, i64* %offset112, align 8, !dbg !6552
  %type113 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6553
  store i32 2, i32* %type113, align 8, !dbg !6554
  %var114 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6555
  store i32 4, i32* %var114, align 4, !dbg !6556
  %offset115 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6557
  store i64 0, i64* %offset115, align 8, !dbg !6558
  %87 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6559
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %87, i32 0, i32 0, !dbg !6559
  %89 = load i64, i64* %88, align 8, !dbg !6559
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %87, i32 0, i32 1, !dbg !6559
  %91 = load i64, i64* %90, align 8, !dbg !6559
  %92 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6559
  %93 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %92, i32 0, i32 0, !dbg !6559
  %94 = load i64, i64* %93, align 8, !dbg !6559
  %95 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %92, i32 0, i32 1, !dbg !6559
  %96 = load i64, i64* %95, align 8, !dbg !6559
  %call116 = call %struct.constraint* @new_constraint(i64 %89, i64 %91, i64 %94, i64 %96), !dbg !6559
  call void @process_constraint(%struct.constraint* %call116), !dbg !6560
  %type117 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6561
  store i32 2, i32* %type117, align 8, !dbg !6562
  %var118 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6563
  store i32 3, i32* %var118, align 4, !dbg !6564
  %offset119 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6565
  store i64 0, i64* %offset119, align 8, !dbg !6566
  %97 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6567
  %98 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %97, i32 0, i32 0, !dbg !6567
  %99 = load i64, i64* %98, align 8, !dbg !6567
  %100 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %97, i32 0, i32 1, !dbg !6567
  %101 = load i64, i64* %100, align 8, !dbg !6567
  %102 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6567
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %102, i32 0, i32 0, !dbg !6567
  %104 = load i64, i64* %103, align 8, !dbg !6567
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %102, i32 0, i32 1, !dbg !6567
  %106 = load i64, i64* %105, align 8, !dbg !6567
  %call120 = call %struct.constraint* @new_constraint(i64 %99, i64 %101, i64 %104, i64 %106), !dbg !6567
  call void @process_constraint(%struct.constraint* %call120), !dbg !6568
  %call121 = call %struct.variable_info* @new_var_info(%union.tree_node* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i64 0, i64 0)), !dbg !6569
  store %struct.variable_info* %call121, %struct.variable_info** %var_callused, align 8, !dbg !6570
  %107 = load %struct.variable_info*, %struct.variable_info** %var_callused, align 8, !dbg !6571
  %id122 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %107, i32 0, i32 0, !dbg !6571
  %108 = load i32, i32* %id122, align 8, !dbg !6571
  %cmp123 = icmp eq i32 %108, 5, !dbg !6571
  br i1 %cmp123, label %cond.false125, label %cond.true124, !dbg !6571

cond.true124:                                     ; preds = %cond.end76
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5276, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6571
  br label %cond.end126, !dbg !6571

cond.false125:                                    ; preds = %cond.end76
  br label %cond.end126, !dbg !6571

cond.end126:                                      ; preds = %cond.false125, %cond.true124
  %cond127 = phi i32 [ 0, %cond.true124 ], [ 0, %cond.false125 ], !dbg !6571
  %109 = load %struct.variable_info*, %struct.variable_info** %var_callused, align 8, !dbg !6572
  %is_artificial_var128 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %109, i32 0, i32 1, !dbg !6573
  %bf.load129 = load i8, i8* %is_artificial_var128, align 4, !dbg !6574
  %bf.clear130 = and i8 %bf.load129, -2, !dbg !6574
  %bf.set131 = or i8 %bf.clear130, 1, !dbg !6574
  store i8 %bf.set131, i8* %is_artificial_var128, align 4, !dbg !6574
  %110 = load %struct.variable_info*, %struct.variable_info** %var_callused, align 8, !dbg !6575
  %offset132 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %110, i32 0, i32 3, !dbg !6576
  store i64 0, i64* %offset132, align 8, !dbg !6577
  %111 = load %struct.variable_info*, %struct.variable_info** %var_callused, align 8, !dbg !6578
  %size133 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %111, i32 0, i32 4, !dbg !6579
  store i64 -1, i64* %size133, align 8, !dbg !6580
  %112 = load %struct.variable_info*, %struct.variable_info** %var_callused, align 8, !dbg !6581
  %fullsize134 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %112, i32 0, i32 5, !dbg !6582
  store i64 -1, i64* %fullsize134, align 8, !dbg !6583
  %113 = load %struct.variable_info*, %struct.variable_info** %var_callused, align 8, !dbg !6584
  %is_special_var135 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %113, i32 0, i32 1, !dbg !6585
  %bf.load136 = load i8, i8* %is_special_var135, align 4, !dbg !6586
  %bf.clear137 = and i8 %bf.load136, -3, !dbg !6586
  store i8 %bf.clear137, i8* %is_special_var135, align 4, !dbg !6586
  %type138 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6587
  store i32 0, i32* %type138, align 8, !dbg !6588
  %var139 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6589
  store i32 5, i32* %var139, align 4, !dbg !6590
  %offset140 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !6591
  store i64 0, i64* %offset140, align 8, !dbg !6592
  %type141 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6593
  store i32 1, i32* %type141, align 8, !dbg !6594
  %var142 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6595
  store i32 5, i32* %var142, align 4, !dbg !6596
  %offset143 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6597
  store i64 0, i64* %offset143, align 8, !dbg !6598
  %114 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6599
  %115 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %114, i32 0, i32 0, !dbg !6599
  %116 = load i64, i64* %115, align 8, !dbg !6599
  %117 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %114, i32 0, i32 1, !dbg !6599
  %118 = load i64, i64* %117, align 8, !dbg !6599
  %119 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6599
  %120 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %119, i32 0, i32 0, !dbg !6599
  %121 = load i64, i64* %120, align 8, !dbg !6599
  %122 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %119, i32 0, i32 1, !dbg !6599
  %123 = load i64, i64* %122, align 8, !dbg !6599
  %call144 = call %struct.constraint* @new_constraint(i64 %116, i64 %118, i64 %121, i64 %123), !dbg !6599
  call void @process_constraint(%struct.constraint* %call144), !dbg !6600
  %type145 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6601
  store i32 0, i32* %type145, align 8, !dbg !6602
  %var146 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6603
  store i32 5, i32* %var146, align 4, !dbg !6604
  %offset147 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !6605
  store i64 0, i64* %offset147, align 8, !dbg !6606
  %type148 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6607
  store i32 0, i32* %type148, align 8, !dbg !6608
  %var149 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6609
  store i32 5, i32* %var149, align 4, !dbg !6610
  %offset150 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6611
  store i64 -9223372036854775808, i64* %offset150, align 8, !dbg !6612
  %124 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6613
  %125 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %124, i32 0, i32 0, !dbg !6613
  %126 = load i64, i64* %125, align 8, !dbg !6613
  %127 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %124, i32 0, i32 1, !dbg !6613
  %128 = load i64, i64* %127, align 8, !dbg !6613
  %129 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6613
  %130 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %129, i32 0, i32 0, !dbg !6613
  %131 = load i64, i64* %130, align 8, !dbg !6613
  %132 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %129, i32 0, i32 1, !dbg !6613
  %133 = load i64, i64* %132, align 8, !dbg !6613
  %call151 = call %struct.constraint* @new_constraint(i64 %126, i64 %128, i64 %131, i64 %133), !dbg !6613
  call void @process_constraint(%struct.constraint* %call151), !dbg !6614
  %call152 = call %struct.variable_info* @new_var_info(%union.tree_node* null, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.51, i64 0, i64 0)), !dbg !6615
  store %struct.variable_info* %call152, %struct.variable_info** %var_storedanything, align 8, !dbg !6616
  %134 = load %struct.variable_info*, %struct.variable_info** %var_storedanything, align 8, !dbg !6617
  %id153 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %134, i32 0, i32 0, !dbg !6617
  %135 = load i32, i32* %id153, align 8, !dbg !6617
  %cmp154 = icmp eq i32 %135, 6, !dbg !6617
  br i1 %cmp154, label %cond.false156, label %cond.true155, !dbg !6617

cond.true155:                                     ; preds = %cond.end126
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5305, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6617
  br label %cond.end157, !dbg !6617

cond.false156:                                    ; preds = %cond.end126
  br label %cond.end157, !dbg !6617

cond.end157:                                      ; preds = %cond.false156, %cond.true155
  %cond158 = phi i32 [ 0, %cond.true155 ], [ 0, %cond.false156 ], !dbg !6617
  %136 = load %struct.variable_info*, %struct.variable_info** %var_storedanything, align 8, !dbg !6618
  %is_artificial_var159 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %136, i32 0, i32 1, !dbg !6619
  %bf.load160 = load i8, i8* %is_artificial_var159, align 4, !dbg !6620
  %bf.clear161 = and i8 %bf.load160, -2, !dbg !6620
  %bf.set162 = or i8 %bf.clear161, 1, !dbg !6620
  store i8 %bf.set162, i8* %is_artificial_var159, align 4, !dbg !6620
  %137 = load %struct.variable_info*, %struct.variable_info** %var_storedanything, align 8, !dbg !6621
  %offset163 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %137, i32 0, i32 3, !dbg !6622
  store i64 0, i64* %offset163, align 8, !dbg !6623
  %138 = load %struct.variable_info*, %struct.variable_info** %var_storedanything, align 8, !dbg !6624
  %size164 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %138, i32 0, i32 4, !dbg !6625
  store i64 -1, i64* %size164, align 8, !dbg !6626
  %139 = load %struct.variable_info*, %struct.variable_info** %var_storedanything, align 8, !dbg !6627
  %fullsize165 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %139, i32 0, i32 5, !dbg !6628
  store i64 -1, i64* %fullsize165, align 8, !dbg !6629
  %140 = load %struct.variable_info*, %struct.variable_info** %var_storedanything, align 8, !dbg !6630
  %is_special_var166 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %140, i32 0, i32 1, !dbg !6631
  %bf.load167 = load i8, i8* %is_special_var166, align 4, !dbg !6632
  %bf.clear168 = and i8 %bf.load167, -3, !dbg !6632
  store i8 %bf.clear168, i8* %is_special_var166, align 4, !dbg !6632
  %call169 = call %struct.variable_info* @new_var_info(%union.tree_node* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.52, i64 0, i64 0)), !dbg !6633
  store %struct.variable_info* %call169, %struct.variable_info** %var_integer, align 8, !dbg !6634
  %141 = load %struct.variable_info*, %struct.variable_info** %var_integer, align 8, !dbg !6635
  %id170 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %141, i32 0, i32 0, !dbg !6635
  %142 = load i32, i32* %id170, align 8, !dbg !6635
  %cmp171 = icmp eq i32 %142, 7, !dbg !6635
  br i1 %cmp171, label %cond.false173, label %cond.true172, !dbg !6635

cond.true172:                                     ; preds = %cond.end157
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 5315, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6635
  br label %cond.end174, !dbg !6635

cond.false173:                                    ; preds = %cond.end157
  br label %cond.end174, !dbg !6635

cond.end174:                                      ; preds = %cond.false173, %cond.true172
  %cond175 = phi i32 [ 0, %cond.true172 ], [ 0, %cond.false173 ], !dbg !6635
  %143 = load %struct.variable_info*, %struct.variable_info** %var_integer, align 8, !dbg !6636
  %is_artificial_var176 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %143, i32 0, i32 1, !dbg !6637
  %bf.load177 = load i8, i8* %is_artificial_var176, align 4, !dbg !6638
  %bf.clear178 = and i8 %bf.load177, -2, !dbg !6638
  %bf.set179 = or i8 %bf.clear178, 1, !dbg !6638
  store i8 %bf.set179, i8* %is_artificial_var176, align 4, !dbg !6638
  %144 = load %struct.variable_info*, %struct.variable_info** %var_integer, align 8, !dbg !6639
  %size180 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %144, i32 0, i32 4, !dbg !6640
  store i64 -1, i64* %size180, align 8, !dbg !6641
  %145 = load %struct.variable_info*, %struct.variable_info** %var_integer, align 8, !dbg !6642
  %fullsize181 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %145, i32 0, i32 5, !dbg !6643
  store i64 -1, i64* %fullsize181, align 8, !dbg !6644
  %146 = load %struct.variable_info*, %struct.variable_info** %var_integer, align 8, !dbg !6645
  %offset182 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %146, i32 0, i32 3, !dbg !6646
  store i64 0, i64* %offset182, align 8, !dbg !6647
  %147 = load %struct.variable_info*, %struct.variable_info** %var_integer, align 8, !dbg !6648
  %next183 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %147, i32 0, i32 2, !dbg !6649
  store %struct.variable_info* null, %struct.variable_info** %next183, align 8, !dbg !6650
  %148 = load %struct.variable_info*, %struct.variable_info** %var_integer, align 8, !dbg !6651
  %is_special_var184 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %148, i32 0, i32 1, !dbg !6652
  %bf.load185 = load i8, i8* %is_special_var184, align 4, !dbg !6653
  %bf.clear186 = and i8 %bf.load185, -3, !dbg !6653
  %bf.set187 = or i8 %bf.clear186, 2, !dbg !6653
  store i8 %bf.set187, i8* %is_special_var184, align 4, !dbg !6653
  %type188 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6654
  store i32 0, i32* %type188, align 8, !dbg !6655
  %var189 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6656
  store i32 7, i32* %var189, align 4, !dbg !6657
  %offset190 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !6658
  store i64 0, i64* %offset190, align 8, !dbg !6659
  %type191 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6660
  store i32 2, i32* %type191, align 8, !dbg !6661
  %var192 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6662
  store i32 1, i32* %var192, align 4, !dbg !6663
  %offset193 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6664
  store i64 0, i64* %offset193, align 8, !dbg !6665
  %149 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6666
  %150 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %149, i32 0, i32 0, !dbg !6666
  %151 = load i64, i64* %150, align 8, !dbg !6666
  %152 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %149, i32 0, i32 1, !dbg !6666
  %153 = load i64, i64* %152, align 8, !dbg !6666
  %154 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6666
  %155 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %154, i32 0, i32 0, !dbg !6666
  %156 = load i64, i64* %155, align 8, !dbg !6666
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %154, i32 0, i32 1, !dbg !6666
  %158 = load i64, i64* %157, align 8, !dbg !6666
  %call194 = call %struct.constraint* @new_constraint(i64 %151, i64 %153, i64 %156, i64 %158), !dbg !6666
  call void @process_constraint(%struct.constraint* %call194), !dbg !6667
  ret void, !dbg !6668
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local zeroext i8 @bitmap_equal_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info* @new_var_info(%union.tree_node* %t, i8* %name) #0 !dbg !6669 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %index = alloca i32, align 4
  %ret = alloca %struct.variable_info*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6672, metadata !DIExpression()), !dbg !6673
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6674, metadata !DIExpression()), !dbg !6675
  call void @llvm.dbg.declare(metadata i32* %index, metadata !6676, metadata !DIExpression()), !dbg !6677
  %0 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !6678
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %0, null, !dbg !6678
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6678

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !6678
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %1, i32 0, i32 0, !dbg !6678
  br label %cond.end, !dbg !6678

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6678

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6678
  %call = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !6678
  store i32 %call, i32* %index, align 4, !dbg !6677
  call void @llvm.dbg.declare(metadata %struct.variable_info** %ret, metadata !6679, metadata !DIExpression()), !dbg !6680
  %2 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @variable_info_pool, align 8, !dbg !6681
  %call1 = call i8* @pool_alloc(%struct.alloc_pool_def* %2), !dbg !6682
  %3 = bitcast i8* %call1 to %struct.variable_info*, !dbg !6683
  store %struct.variable_info* %3, %struct.variable_info** %ret, align 8, !dbg !6680
  %4 = load i32, i32* %index, align 4, !dbg !6684
  %5 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6685
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %5, i32 0, i32 0, !dbg !6686
  store i32 %4, i32* %id, align 8, !dbg !6687
  %6 = load i8*, i8** %name.addr, align 8, !dbg !6688
  %7 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6689
  %name2 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %7, i32 0, i32 6, !dbg !6690
  store i8* %6, i8** %name2, align 8, !dbg !6691
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6692
  %9 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6693
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %9, i32 0, i32 7, !dbg !6694
  store %union.tree_node* %8, %union.tree_node** %decl, align 8, !dbg !6695
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6696
  %cmp = icmp eq %union.tree_node* %10, null, !dbg !6697
  %conv = zext i1 %cmp to i32, !dbg !6697
  %11 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6698
  %is_artificial_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %11, i32 0, i32 1, !dbg !6699
  %12 = trunc i32 %conv to i8, !dbg !6700
  %bf.load = load i8, i8* %is_artificial_var, align 4, !dbg !6700
  %bf.value = and i8 %12, 1, !dbg !6700
  %bf.clear = and i8 %bf.load, -2, !dbg !6700
  %bf.set = or i8 %bf.clear, %bf.value, !dbg !6700
  store i8 %bf.set, i8* %is_artificial_var, align 4, !dbg !6700
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !6700
  %13 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6701
  %is_special_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %13, i32 0, i32 1, !dbg !6702
  %bf.load3 = load i8, i8* %is_special_var, align 4, !dbg !6703
  %bf.clear4 = and i8 %bf.load3, -3, !dbg !6703
  store i8 %bf.clear4, i8* %is_special_var, align 4, !dbg !6703
  %14 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6704
  %is_unknown_size_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %14, i32 0, i32 1, !dbg !6705
  %bf.load5 = load i8, i8* %is_unknown_size_var, align 4, !dbg !6706
  %bf.clear6 = and i8 %bf.load5, -5, !dbg !6706
  store i8 %bf.clear6, i8* %is_unknown_size_var, align 4, !dbg !6706
  %15 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6707
  %cmp7 = icmp eq %union.tree_node* %15, null, !dbg !6708
  %conv8 = zext i1 %cmp7 to i32, !dbg !6708
  %16 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6709
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %16, i32 0, i32 1, !dbg !6710
  %17 = trunc i32 %conv8 to i8, !dbg !6711
  %bf.load9 = load i8, i8* %is_full_var, align 4, !dbg !6711
  %bf.value10 = and i8 %17, 1, !dbg !6711
  %bf.shl = shl i8 %bf.value10, 3, !dbg !6711
  %bf.clear11 = and i8 %bf.load9, -9, !dbg !6711
  %bf.set12 = or i8 %bf.clear11, %bf.shl, !dbg !6711
  store i8 %bf.set12, i8* %is_full_var, align 4, !dbg !6711
  %bf.result.cast13 = zext i8 %bf.value10 to i32, !dbg !6711
  %18 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6712
  %is_heap_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %18, i32 0, i32 1, !dbg !6713
  %bf.load14 = load i8, i8* %is_heap_var, align 4, !dbg !6714
  %bf.clear15 = and i8 %bf.load14, -17, !dbg !6714
  store i8 %bf.clear15, i8* %is_heap_var, align 4, !dbg !6714
  %19 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6715
  %is_restrict_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %19, i32 0, i32 1, !dbg !6716
  %bf.load16 = load i8, i8* %is_restrict_var, align 4, !dbg !6717
  %bf.clear17 = and i8 %bf.load16, -33, !dbg !6717
  store i8 %bf.clear17, i8* %is_restrict_var, align 4, !dbg !6717
  %20 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6718
  %may_have_pointers = getelementptr inbounds %struct.variable_info, %struct.variable_info* %20, i32 0, i32 1, !dbg !6719
  %bf.load18 = load i8, i8* %may_have_pointers, align 4, !dbg !6720
  %bf.clear19 = and i8 %bf.load18, -65, !dbg !6720
  %bf.set20 = or i8 %bf.clear19, 64, !dbg !6720
  store i8 %bf.set20, i8* %may_have_pointers, align 4, !dbg !6720
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6721
  %cmp21 = icmp eq %union.tree_node* %21, null, !dbg !6722
  %conv22 = zext i1 %cmp21 to i32, !dbg !6722
  %22 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6723
  %is_global_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %22, i32 0, i32 1, !dbg !6724
  %23 = trunc i32 %conv22 to i8, !dbg !6725
  %bf.load23 = load i8, i8* %is_global_var, align 4, !dbg !6725
  %bf.value24 = and i8 %23, 1, !dbg !6725
  %bf.shl25 = shl i8 %bf.value24, 7, !dbg !6725
  %bf.clear26 = and i8 %bf.load23, 127, !dbg !6725
  %bf.set27 = or i8 %bf.clear26, %bf.shl25, !dbg !6725
  store i8 %bf.set27, i8* %is_global_var, align 4, !dbg !6725
  %bf.result.cast28 = zext i8 %bf.value24 to i32, !dbg !6725
  %24 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6726
  %tobool29 = icmp ne %union.tree_node* %24, null, !dbg !6726
  br i1 %tobool29, label %land.lhs.true, label %if.end, !dbg !6728

land.lhs.true:                                    ; preds = %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6729
  %base30 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !6729
  %26 = bitcast %struct.tree_base* %base30 to i64*, !dbg !6729
  %bf.load31 = load i64, i64* %26, align 8, !dbg !6729
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !6729
  %bf.cast = trunc i64 %bf.clear32 to i32, !dbg !6729
  %idxprom = sext i32 %bf.cast to i64, !dbg !6729
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6729
  %27 = load i32, i32* %arrayidx, align 4, !dbg !6729
  %cmp33 = icmp eq i32 %27, 3, !dbg !6729
  br i1 %cmp33, label %if.then, label %if.end, !dbg !6730

if.then:                                          ; preds = %land.lhs.true
  %28 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6731
  %call35 = call zeroext i8 @is_global_var(%union.tree_node* %28), !dbg !6732
  %conv36 = zext i8 %call35 to i32, !dbg !6732
  %29 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6733
  %is_global_var37 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %29, i32 0, i32 1, !dbg !6734
  %30 = trunc i32 %conv36 to i8, !dbg !6735
  %bf.load38 = load i8, i8* %is_global_var37, align 4, !dbg !6735
  %bf.value39 = and i8 %30, 1, !dbg !6735
  %bf.shl40 = shl i8 %bf.value39, 7, !dbg !6735
  %bf.clear41 = and i8 %bf.load38, 127, !dbg !6735
  %bf.set42 = or i8 %bf.clear41, %bf.shl40, !dbg !6735
  store i8 %bf.set42, i8* %is_global_var37, align 4, !dbg !6735
  %bf.result.cast43 = zext i8 %bf.value39 to i32, !dbg !6735
  br label %if.end, !dbg !6733

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %call44 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @pta_obstack), !dbg !6736
  %31 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6737
  %solution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %31, i32 0, i32 8, !dbg !6738
  store %struct.bitmap_head_def* %call44, %struct.bitmap_head_def** %solution, align 8, !dbg !6739
  %call45 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @oldpta_obstack), !dbg !6740
  %32 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6741
  %oldsolution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %32, i32 0, i32 9, !dbg !6742
  store %struct.bitmap_head_def* %call45, %struct.bitmap_head_def** %oldsolution, align 8, !dbg !6743
  %33 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6744
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %33, i32 0, i32 2, !dbg !6745
  store %struct.variable_info* null, %struct.variable_info** %next, align 8, !dbg !6746
  %34 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6747
  %call46 = call %struct.variable_info** @VEC_varinfo_t_heap_safe_push(%struct.VEC_varinfo_t_heap** @varmap, %struct.variable_info* %34), !dbg !6747
  %35 = load %struct.variable_info*, %struct.variable_info** %ret, align 8, !dbg !6748
  ret %struct.variable_info* %35, !dbg !6749
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint** @VEC_constraint_t_heap_safe_push(%struct.VEC_constraint_t_heap** %vec_, %struct.constraint* %obj_) #0 !dbg !6750 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_heap**, align 8
  %obj_.addr = alloca %struct.constraint*, align 8
  store %struct.VEC_constraint_t_heap** %vec_, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_heap*** %vec_.addr, metadata !6753, metadata !DIExpression()), !dbg !6754
  store %struct.constraint* %obj_, %struct.constraint** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %obj_.addr, metadata !6755, metadata !DIExpression()), !dbg !6754
  %0 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !6754
  %call = call i32 @VEC_constraint_t_heap_reserve(%struct.VEC_constraint_t_heap** %0, i32 1), !dbg !6754
  %1 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !6754
  %2 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %1, align 8, !dbg !6754
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %2, null, !dbg !6754
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6754

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !6754
  %4 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %3, align 8, !dbg !6754
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %4, i32 0, i32 0, !dbg !6754
  br label %cond.end, !dbg !6754

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6754

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6754
  %5 = load %struct.constraint*, %struct.constraint** %obj_.addr, align 8, !dbg !6754
  %call1 = call %struct.constraint** @VEC_constraint_t_base_quick_push(%struct.VEC_constraint_t_base* %cond, %struct.constraint* %5), !dbg !6754
  ret %struct.constraint** %call1, !dbg !6754
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint* @new_constraint(i64 %lhs.coerce0, i64 %lhs.coerce1, i64 %rhs.coerce0, i64 %rhs.coerce1) #0 !dbg !6756 {
entry:
  %lhs = alloca %struct.constraint_expr, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  %ret = alloca %struct.constraint*, align 8
  %0 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %lhs.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %lhs.coerce1, i64* %2, align 8
  %3 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %rhs.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %rhs.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !6760, metadata !DIExpression()), !dbg !6761
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !6762, metadata !DIExpression()), !dbg !6763
  call void @llvm.dbg.declare(metadata %struct.constraint** %ret, metadata !6764, metadata !DIExpression()), !dbg !6765
  %6 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @constraint_pool, align 8, !dbg !6766
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %6), !dbg !6767
  %7 = bitcast i8* %call to %struct.constraint*, !dbg !6768
  store %struct.constraint* %7, %struct.constraint** %ret, align 8, !dbg !6765
  %8 = load %struct.constraint*, %struct.constraint** %ret, align 8, !dbg !6769
  %lhs1 = getelementptr inbounds %struct.constraint, %struct.constraint* %8, i32 0, i32 0, !dbg !6770
  %9 = bitcast %struct.constraint_expr* %lhs1 to i8*, !dbg !6771
  %10 = bitcast %struct.constraint_expr* %lhs to i8*, !dbg !6771
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !6771
  %11 = load %struct.constraint*, %struct.constraint** %ret, align 8, !dbg !6772
  %rhs2 = getelementptr inbounds %struct.constraint, %struct.constraint* %11, i32 0, i32 1, !dbg !6773
  %12 = bitcast %struct.constraint_expr* %rhs2 to i8*, !dbg !6774
  %13 = bitcast %struct.constraint_expr* %rhs to i8*, !dbg !6774
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false), !dbg !6774
  %14 = load %struct.constraint*, %struct.constraint** %ret, align 8, !dbg !6775
  ret %struct.constraint* %14, !dbg !6776
}

; Function Attrs: noinline nounwind uwtable
define internal void @process_constraint(%struct.constraint* %t) #0 !dbg !6777 {
entry:
  %t.addr = alloca %struct.constraint*, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  %lhs = alloca %struct.constraint_expr, align 8
  %tmplhs = alloca %struct.constraint_expr, align 8
  %tmp = alloca %struct.constraint_expr, align 8
  %tmplhs48 = alloca %struct.constraint_expr, align 8
  %tmp49 = alloca %struct.constraint_expr, align 8
  store %struct.constraint* %t, %struct.constraint** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %t.addr, metadata !6778, metadata !DIExpression()), !dbg !6779
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !6780, metadata !DIExpression()), !dbg !6781
  %0 = load %struct.constraint*, %struct.constraint** %t.addr, align 8, !dbg !6782
  %rhs1 = getelementptr inbounds %struct.constraint, %struct.constraint* %0, i32 0, i32 1, !dbg !6783
  %1 = bitcast %struct.constraint_expr* %rhs to i8*, !dbg !6783
  %2 = bitcast %struct.constraint_expr* %rhs1 to i8*, !dbg !6783
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 16, i1 false), !dbg !6783
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !6784, metadata !DIExpression()), !dbg !6785
  %3 = load %struct.constraint*, %struct.constraint** %t.addr, align 8, !dbg !6786
  %lhs2 = getelementptr inbounds %struct.constraint, %struct.constraint* %3, i32 0, i32 0, !dbg !6787
  %4 = bitcast %struct.constraint_expr* %lhs to i8*, !dbg !6787
  %5 = bitcast %struct.constraint_expr* %lhs2 to i8*, !dbg !6787
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 16, i1 false), !dbg !6787
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6788
  %6 = load i32, i32* %var, align 4, !dbg !6788
  %7 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !6788
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %7, null, !dbg !6788
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6788

cond.true:                                        ; preds = %entry
  %8 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !6788
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %8, i32 0, i32 0, !dbg !6788
  br label %cond.end, !dbg !6788

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6788

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6788
  %call = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !6788
  %cmp = icmp ult i32 %6, %call, !dbg !6788
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !6788

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2749, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6788
  br label %cond.end5, !dbg !6788

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6788

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6788
  %var7 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6789
  %9 = load i32, i32* %var7, align 4, !dbg !6789
  %10 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !6789
  %tobool8 = icmp ne %struct.VEC_varinfo_t_heap* %10, null, !dbg !6789
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !6789

cond.true9:                                       ; preds = %cond.end5
  %11 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !6789
  %base10 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %11, i32 0, i32 0, !dbg !6789
  br label %cond.end12, !dbg !6789

cond.false11:                                     ; preds = %cond.end5
  br label %cond.end12, !dbg !6789

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_varinfo_t_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !6789
  %call14 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond13), !dbg !6789
  %cmp15 = icmp ult i32 %9, %call14, !dbg !6789
  br i1 %cmp15, label %cond.false17, label %cond.true16, !dbg !6789

cond.true16:                                      ; preds = %cond.end12
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2750, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6789
  br label %cond.end18, !dbg !6789

cond.false17:                                     ; preds = %cond.end12
  br label %cond.end18, !dbg !6789

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !6789
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6790
  %12 = load i32, i32* %type, align 8, !dbg !6790
  %cmp20 = icmp eq i32 %12, 2, !dbg !6792
  br i1 %cmp20, label %land.lhs.true, label %if.end, !dbg !6793

land.lhs.true:                                    ; preds = %cond.end18
  %var21 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !6794
  %13 = load i32, i32* %var21, align 4, !dbg !6794
  %cmp22 = icmp eq i32 %13, 1, !dbg !6795
  br i1 %cmp22, label %if.then, label %if.end, !dbg !6796

if.then:                                          ; preds = %land.lhs.true
  %type23 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6797
  store i32 1, i32* %type23, align 8, !dbg !6798
  br label %if.end, !dbg !6799

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end18
  %type24 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6800
  %14 = load i32, i32* %type24, align 8, !dbg !6800
  %cmp25 = icmp ne i32 %14, 2, !dbg !6800
  br i1 %cmp25, label %cond.false27, label %cond.true26, !dbg !6800

cond.true26:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2760, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6800
  br label %cond.end28, !dbg !6800

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !6800

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !6800
  %type30 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6801
  %15 = load i32, i32* %type30, align 8, !dbg !6801
  %cmp31 = icmp eq i32 %15, 1, !dbg !6803
  br i1 %cmp31, label %land.lhs.true32, label %if.else, !dbg !6804

land.lhs.true32:                                  ; preds = %cond.end28
  %type33 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6805
  %16 = load i32, i32* %type33, align 8, !dbg !6805
  %cmp34 = icmp eq i32 %16, 1, !dbg !6806
  br i1 %cmp34, label %land.lhs.true35, label %if.else, !dbg !6807

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %var36 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !6808
  %17 = load i32, i32* %var36, align 4, !dbg !6808
  %cmp37 = icmp ne i32 %17, 1, !dbg !6809
  br i1 %cmp37, label %if.then38, label %if.else, !dbg !6810

if.then38:                                        ; preds = %land.lhs.true35
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %tmplhs, metadata !6811, metadata !DIExpression()), !dbg !6813
  %call39 = call { i64, i64 } @new_scalar_tmp_constraint_exp(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0)), !dbg !6814
  %18 = bitcast %struct.constraint_expr* %tmp to { i64, i64 }*, !dbg !6814
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0, !dbg !6814
  %20 = extractvalue { i64, i64 } %call39, 0, !dbg !6814
  store i64 %20, i64* %19, align 8, !dbg !6814
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1, !dbg !6814
  %22 = extractvalue { i64, i64 } %call39, 1, !dbg !6814
  store i64 %22, i64* %21, align 8, !dbg !6814
  %23 = bitcast %struct.constraint_expr* %tmplhs to i8*, !dbg !6814
  %24 = bitcast %struct.constraint_expr* %tmp to i8*, !dbg !6814
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false), !dbg !6814
  %25 = bitcast %struct.constraint_expr* %tmplhs to { i64, i64 }*, !dbg !6815
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 0, !dbg !6815
  %27 = load i64, i64* %26, align 8, !dbg !6815
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 1, !dbg !6815
  %29 = load i64, i64* %28, align 8, !dbg !6815
  %30 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6815
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 0, !dbg !6815
  %32 = load i64, i64* %31, align 8, !dbg !6815
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 1, !dbg !6815
  %34 = load i64, i64* %33, align 8, !dbg !6815
  %call40 = call %struct.constraint* @new_constraint(i64 %27, i64 %29, i64 %32, i64 %34), !dbg !6815
  call void @process_constraint(%struct.constraint* %call40), !dbg !6816
  %35 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6817
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 0, !dbg !6817
  %37 = load i64, i64* %36, align 8, !dbg !6817
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 1, !dbg !6817
  %39 = load i64, i64* %38, align 8, !dbg !6817
  %40 = bitcast %struct.constraint_expr* %tmplhs to { i64, i64 }*, !dbg !6817
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 0, !dbg !6817
  %42 = load i64, i64* %41, align 8, !dbg !6817
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 1, !dbg !6817
  %44 = load i64, i64* %43, align 8, !dbg !6817
  %call41 = call %struct.constraint* @new_constraint(i64 %37, i64 %39, i64 %42, i64 %44), !dbg !6817
  call void @process_constraint(%struct.constraint* %call41), !dbg !6818
  br label %if.end63, !dbg !6819

if.else:                                          ; preds = %land.lhs.true35, %land.lhs.true32, %cond.end28
  %type42 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6820
  %45 = load i32, i32* %type42, align 8, !dbg !6820
  %cmp43 = icmp eq i32 %45, 2, !dbg !6822
  br i1 %cmp43, label %land.lhs.true44, label %if.else53, !dbg !6823

land.lhs.true44:                                  ; preds = %if.else
  %type45 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !6824
  %46 = load i32, i32* %type45, align 8, !dbg !6824
  %cmp46 = icmp eq i32 %46, 1, !dbg !6825
  br i1 %cmp46, label %if.then47, label %if.else53, !dbg !6826

if.then47:                                        ; preds = %land.lhs.true44
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %tmplhs48, metadata !6827, metadata !DIExpression()), !dbg !6829
  %call50 = call { i64, i64 } @new_scalar_tmp_constraint_exp(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.54, i64 0, i64 0)), !dbg !6830
  %47 = bitcast %struct.constraint_expr* %tmp49 to { i64, i64 }*, !dbg !6830
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 0, !dbg !6830
  %49 = extractvalue { i64, i64 } %call50, 0, !dbg !6830
  store i64 %49, i64* %48, align 8, !dbg !6830
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 1, !dbg !6830
  %51 = extractvalue { i64, i64 } %call50, 1, !dbg !6830
  store i64 %51, i64* %50, align 8, !dbg !6830
  %52 = bitcast %struct.constraint_expr* %tmplhs48 to i8*, !dbg !6830
  %53 = bitcast %struct.constraint_expr* %tmp49 to i8*, !dbg !6830
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false), !dbg !6830
  %54 = bitcast %struct.constraint_expr* %tmplhs48 to { i64, i64 }*, !dbg !6831
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 0, !dbg !6831
  %56 = load i64, i64* %55, align 8, !dbg !6831
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 1, !dbg !6831
  %58 = load i64, i64* %57, align 8, !dbg !6831
  %59 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !6831
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 0, !dbg !6831
  %61 = load i64, i64* %60, align 8, !dbg !6831
  %62 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 1, !dbg !6831
  %63 = load i64, i64* %62, align 8, !dbg !6831
  %call51 = call %struct.constraint* @new_constraint(i64 %56, i64 %58, i64 %61, i64 %63), !dbg !6831
  call void @process_constraint(%struct.constraint* %call51), !dbg !6832
  %64 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !6833
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %64, i32 0, i32 0, !dbg !6833
  %66 = load i64, i64* %65, align 8, !dbg !6833
  %67 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %64, i32 0, i32 1, !dbg !6833
  %68 = load i64, i64* %67, align 8, !dbg !6833
  %69 = bitcast %struct.constraint_expr* %tmplhs48 to { i64, i64 }*, !dbg !6833
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %69, i32 0, i32 0, !dbg !6833
  %71 = load i64, i64* %70, align 8, !dbg !6833
  %72 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %69, i32 0, i32 1, !dbg !6833
  %73 = load i64, i64* %72, align 8, !dbg !6833
  %call52 = call %struct.constraint* @new_constraint(i64 %66, i64 %68, i64 %71, i64 %73), !dbg !6833
  call void @process_constraint(%struct.constraint* %call52), !dbg !6834
  br label %if.end62, !dbg !6835

if.else53:                                        ; preds = %land.lhs.true44, %if.else
  %type54 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !6836
  %74 = load i32, i32* %type54, align 8, !dbg !6836
  %cmp55 = icmp ne i32 %74, 2, !dbg !6836
  br i1 %cmp55, label %cond.false58, label %lor.lhs.false, !dbg !6836

lor.lhs.false:                                    ; preds = %if.else53
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !6836
  %75 = load i64, i64* %offset, align 8, !dbg !6836
  %cmp56 = icmp eq i64 %75, 0, !dbg !6836
  br i1 %cmp56, label %cond.false58, label %cond.true57, !dbg !6836

cond.true57:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2781, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6836
  br label %cond.end59, !dbg !6836

cond.false58:                                     ; preds = %lor.lhs.false, %if.else53
  br label %cond.end59, !dbg !6836

cond.end59:                                       ; preds = %cond.false58, %cond.true57
  %cond60 = phi i32 [ 0, %cond.true57 ], [ 0, %cond.false58 ], !dbg !6836
  %76 = load %struct.constraint*, %struct.constraint** %t.addr, align 8, !dbg !6838
  %call61 = call %struct.constraint** @VEC_constraint_t_heap_safe_push(%struct.VEC_constraint_t_heap** @constraints, %struct.constraint* %76), !dbg !6838
  br label %if.end62

if.end62:                                         ; preds = %cond.end59, %if.then47
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then38
  ret void, !dbg !6839
}

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info** @VEC_varinfo_t_heap_safe_push(%struct.VEC_varinfo_t_heap** %vec_, %struct.variable_info* %obj_) #0 !dbg !6840 {
entry:
  %vec_.addr = alloca %struct.VEC_varinfo_t_heap**, align 8
  %obj_.addr = alloca %struct.variable_info*, align 8
  store %struct.VEC_varinfo_t_heap** %vec_, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_varinfo_t_heap*** %vec_.addr, metadata !6844, metadata !DIExpression()), !dbg !6845
  store %struct.variable_info* %obj_, %struct.variable_info** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %obj_.addr, metadata !6846, metadata !DIExpression()), !dbg !6845
  %0 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !6845
  %call = call i32 @VEC_varinfo_t_heap_reserve(%struct.VEC_varinfo_t_heap** %0, i32 1), !dbg !6845
  %1 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !6845
  %2 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** %1, align 8, !dbg !6845
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %2, null, !dbg !6845
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6845

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !6845
  %4 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** %3, align 8, !dbg !6845
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %4, i32 0, i32 0, !dbg !6845
  br label %cond.end, !dbg !6845

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6845

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6845
  %5 = load %struct.variable_info*, %struct.variable_info** %obj_.addr, align 8, !dbg !6845
  %call1 = call %struct.variable_info** @VEC_varinfo_t_base_quick_push(%struct.VEC_varinfo_t_base* %cond, %struct.variable_info* %5), !dbg !6845
  ret %struct.variable_info** %call1, !dbg !6845
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_varinfo_t_heap_reserve(%struct.VEC_varinfo_t_heap** %vec_, i32 %alloc_) #0 !dbg !6847 {
entry:
  %vec_.addr = alloca %struct.VEC_varinfo_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_varinfo_t_heap** %vec_, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_varinfo_t_heap*** %vec_.addr, metadata !6850, metadata !DIExpression()), !dbg !6851
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6852, metadata !DIExpression()), !dbg !6851
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6853, metadata !DIExpression()), !dbg !6851
  %0 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !6851
  %1 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** %0, align 8, !dbg !6851
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %1, null, !dbg !6851
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6851

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !6851
  %3 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** %2, align 8, !dbg !6851
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %3, i32 0, i32 0, !dbg !6851
  br label %cond.end, !dbg !6851

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6851

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6851
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6851
  %call = call i32 @VEC_varinfo_t_base_space(%struct.VEC_varinfo_t_base* %cond, i32 %4), !dbg !6851
  %tobool1 = icmp ne i32 %call, 0, !dbg !6851
  %lnot = xor i1 %tobool1, true, !dbg !6851
  %lnot.ext = zext i1 %lnot to i32, !dbg !6851
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6851
  %5 = load i32, i32* %extend, align 4, !dbg !6854
  %tobool2 = icmp ne i32 %5, 0, !dbg !6854
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6851

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !6854
  %7 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** %6, align 8, !dbg !6854
  %8 = bitcast %struct.VEC_varinfo_t_heap* %7 to i8*, !dbg !6854
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6854
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6854
  %10 = bitcast i8* %call3 to %struct.VEC_varinfo_t_heap*, !dbg !6854
  %11 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !6854
  store %struct.VEC_varinfo_t_heap* %10, %struct.VEC_varinfo_t_heap** %11, align 8, !dbg !6854
  br label %if.end, !dbg !6854

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6851
  ret i32 %12, !dbg !6851
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info** @VEC_varinfo_t_base_quick_push(%struct.VEC_varinfo_t_base* %vec_, %struct.variable_info* %obj_) #0 !dbg !6856 {
entry:
  %vec_.addr = alloca %struct.VEC_varinfo_t_base*, align 8
  %obj_.addr = alloca %struct.variable_info*, align 8
  %slot_ = alloca %struct.variable_info**, align 8
  store %struct.VEC_varinfo_t_base* %vec_, %struct.VEC_varinfo_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_varinfo_t_base** %vec_.addr, metadata !6860, metadata !DIExpression()), !dbg !6861
  store %struct.variable_info* %obj_, %struct.variable_info** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %obj_.addr, metadata !6862, metadata !DIExpression()), !dbg !6861
  call void @llvm.dbg.declare(metadata %struct.variable_info*** %slot_, metadata !6863, metadata !DIExpression()), !dbg !6861
  %0 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6861
  %num = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %0, i32 0, i32 0, !dbg !6861
  %1 = load i32, i32* %num, align 8, !dbg !6861
  %2 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6861
  %alloc = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %2, i32 0, i32 1, !dbg !6861
  %3 = load i32, i32* %alloc, align 4, !dbg !6861
  %cmp = icmp ult i32 %1, %3, !dbg !6861
  %conv = zext i1 %cmp to i32, !dbg !6861
  %4 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6861
  %vec = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %4, i32 0, i32 2, !dbg !6861
  %5 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6861
  %num1 = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %5, i32 0, i32 0, !dbg !6861
  %6 = load i32, i32* %num1, align 8, !dbg !6861
  %inc = add i32 %6, 1, !dbg !6861
  store i32 %inc, i32* %num1, align 8, !dbg !6861
  %idxprom = zext i32 %6 to i64, !dbg !6861
  %arrayidx = getelementptr inbounds [1 x %struct.variable_info*], [1 x %struct.variable_info*]* %vec, i64 0, i64 %idxprom, !dbg !6861
  store %struct.variable_info** %arrayidx, %struct.variable_info*** %slot_, align 8, !dbg !6861
  %7 = load %struct.variable_info*, %struct.variable_info** %obj_.addr, align 8, !dbg !6861
  %8 = load %struct.variable_info**, %struct.variable_info*** %slot_, align 8, !dbg !6861
  store %struct.variable_info* %7, %struct.variable_info** %8, align 8, !dbg !6861
  %9 = load %struct.variable_info**, %struct.variable_info*** %slot_, align 8, !dbg !6861
  ret %struct.variable_info** %9, !dbg !6861
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_varinfo_t_base_space(%struct.VEC_varinfo_t_base* %vec_, i32 %alloc_) #0 !dbg !6864 {
entry:
  %vec_.addr = alloca %struct.VEC_varinfo_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_varinfo_t_base* %vec_, %struct.VEC_varinfo_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_varinfo_t_base** %vec_.addr, metadata !6867, metadata !DIExpression()), !dbg !6868
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6869, metadata !DIExpression()), !dbg !6868
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6868
  %cmp = icmp sge i32 %0, 0, !dbg !6868
  %conv = zext i1 %cmp to i32, !dbg !6868
  %1 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6868
  %tobool = icmp ne %struct.VEC_varinfo_t_base* %1, null, !dbg !6868
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6868

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6868
  %alloc = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %2, i32 0, i32 1, !dbg !6868
  %3 = load i32, i32* %alloc, align 4, !dbg !6868
  %4 = load %struct.VEC_varinfo_t_base*, %struct.VEC_varinfo_t_base** %vec_.addr, align 8, !dbg !6868
  %num = getelementptr inbounds %struct.VEC_varinfo_t_base, %struct.VEC_varinfo_t_base* %4, i32 0, i32 0, !dbg !6868
  %5 = load i32, i32* %num, align 8, !dbg !6868
  %sub = sub i32 %3, %5, !dbg !6868
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6868
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6868
  %conv2 = zext i1 %cmp1 to i32, !dbg !6868
  br label %cond.end, !dbg !6868

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6868
  %tobool3 = icmp ne i32 %7, 0, !dbg !6868
  %lnot = xor i1 %tobool3, true, !dbg !6868
  %lnot.ext = zext i1 %lnot to i32, !dbg !6868
  br label %cond.end, !dbg !6868

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6868
  ret i32 %cond, !dbg !6868
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constraint_t_heap_reserve(%struct.VEC_constraint_t_heap** %vec_, i32 %alloc_) #0 !dbg !6870 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_constraint_t_heap** %vec_, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_heap*** %vec_.addr, metadata !6873, metadata !DIExpression()), !dbg !6874
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6875, metadata !DIExpression()), !dbg !6874
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6876, metadata !DIExpression()), !dbg !6874
  %0 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !6874
  %1 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %0, align 8, !dbg !6874
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %1, null, !dbg !6874
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6874

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !6874
  %3 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %2, align 8, !dbg !6874
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %3, i32 0, i32 0, !dbg !6874
  br label %cond.end, !dbg !6874

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6874

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6874
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6874
  %call = call i32 @VEC_constraint_t_base_space(%struct.VEC_constraint_t_base* %cond, i32 %4), !dbg !6874
  %tobool1 = icmp ne i32 %call, 0, !dbg !6874
  %lnot = xor i1 %tobool1, true, !dbg !6874
  %lnot.ext = zext i1 %lnot to i32, !dbg !6874
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6874
  %5 = load i32, i32* %extend, align 4, !dbg !6877
  %tobool2 = icmp ne i32 %5, 0, !dbg !6877
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6874

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !6877
  %7 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %6, align 8, !dbg !6877
  %8 = bitcast %struct.VEC_constraint_t_heap* %7 to i8*, !dbg !6877
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6877
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6877
  %10 = bitcast i8* %call3 to %struct.VEC_constraint_t_heap*, !dbg !6877
  %11 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !6877
  store %struct.VEC_constraint_t_heap* %10, %struct.VEC_constraint_t_heap** %11, align 8, !dbg !6877
  br label %if.end, !dbg !6877

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6874
  ret i32 %12, !dbg !6874
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint** @VEC_constraint_t_base_quick_push(%struct.VEC_constraint_t_base* %vec_, %struct.constraint* %obj_) #0 !dbg !6879 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_base*, align 8
  %obj_.addr = alloca %struct.constraint*, align 8
  %slot_ = alloca %struct.constraint**, align 8
  store %struct.VEC_constraint_t_base* %vec_, %struct.VEC_constraint_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_base** %vec_.addr, metadata !6883, metadata !DIExpression()), !dbg !6884
  store %struct.constraint* %obj_, %struct.constraint** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %obj_.addr, metadata !6885, metadata !DIExpression()), !dbg !6884
  call void @llvm.dbg.declare(metadata %struct.constraint*** %slot_, metadata !6886, metadata !DIExpression()), !dbg !6884
  %0 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !6884
  %num = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %0, i32 0, i32 0, !dbg !6884
  %1 = load i32, i32* %num, align 8, !dbg !6884
  %2 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !6884
  %alloc = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %2, i32 0, i32 1, !dbg !6884
  %3 = load i32, i32* %alloc, align 4, !dbg !6884
  %cmp = icmp ult i32 %1, %3, !dbg !6884
  %conv = zext i1 %cmp to i32, !dbg !6884
  %4 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !6884
  %vec = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %4, i32 0, i32 2, !dbg !6884
  %5 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !6884
  %num1 = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %5, i32 0, i32 0, !dbg !6884
  %6 = load i32, i32* %num1, align 8, !dbg !6884
  %inc = add i32 %6, 1, !dbg !6884
  store i32 %inc, i32* %num1, align 8, !dbg !6884
  %idxprom = zext i32 %6 to i64, !dbg !6884
  %arrayidx = getelementptr inbounds [1 x %struct.constraint*], [1 x %struct.constraint*]* %vec, i64 0, i64 %idxprom, !dbg !6884
  store %struct.constraint** %arrayidx, %struct.constraint*** %slot_, align 8, !dbg !6884
  %7 = load %struct.constraint*, %struct.constraint** %obj_.addr, align 8, !dbg !6884
  %8 = load %struct.constraint**, %struct.constraint*** %slot_, align 8, !dbg !6884
  store %struct.constraint* %7, %struct.constraint** %8, align 8, !dbg !6884
  %9 = load %struct.constraint**, %struct.constraint*** %slot_, align 8, !dbg !6884
  ret %struct.constraint** %9, !dbg !6884
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constraint_t_base_space(%struct.VEC_constraint_t_base* %vec_, i32 %alloc_) #0 !dbg !6887 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_constraint_t_base* %vec_, %struct.VEC_constraint_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_base** %vec_.addr, metadata !6890, metadata !DIExpression()), !dbg !6891
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6892, metadata !DIExpression()), !dbg !6891
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6891
  %cmp = icmp sge i32 %0, 0, !dbg !6891
  %conv = zext i1 %cmp to i32, !dbg !6891
  %1 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !6891
  %tobool = icmp ne %struct.VEC_constraint_t_base* %1, null, !dbg !6891
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6891

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !6891
  %alloc = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %2, i32 0, i32 1, !dbg !6891
  %3 = load i32, i32* %alloc, align 4, !dbg !6891
  %4 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !6891
  %num = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %4, i32 0, i32 0, !dbg !6891
  %5 = load i32, i32* %num, align 8, !dbg !6891
  %sub = sub i32 %3, %5, !dbg !6891
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6891
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6891
  %conv2 = zext i1 %cmp1 to i32, !dbg !6891
  br label %cond.end, !dbg !6891

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6891
  %tobool3 = icmp ne i32 %7, 0, !dbg !6891
  %lnot = xor i1 %tobool3, true, !dbg !6891
  %lnot.ext = zext i1 %lnot to i32, !dbg !6891
  br label %cond.end, !dbg !6891

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6891
  ret i32 %cond, !dbg !6891
}

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @new_scalar_tmp_constraint_exp(i8* %name) #0 !dbg !6893 {
entry:
  %retval = alloca %struct.constraint_expr, align 8
  %name.addr = alloca i8*, align 8
  %vi = alloca %struct.variable_info*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6896, metadata !DIExpression()), !dbg !6897
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %retval, metadata !6898, metadata !DIExpression()), !dbg !6899
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !6900, metadata !DIExpression()), !dbg !6901
  %0 = load i8*, i8** %name.addr, align 8, !dbg !6902
  %call = call %struct.variable_info* @new_var_info(%union.tree_node* null, i8* %0), !dbg !6903
  store %struct.variable_info* %call, %struct.variable_info** %vi, align 8, !dbg !6904
  %1 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !6905
  %offset = getelementptr inbounds %struct.variable_info, %struct.variable_info* %1, i32 0, i32 3, !dbg !6906
  store i64 0, i64* %offset, align 8, !dbg !6907
  %2 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !6908
  %size = getelementptr inbounds %struct.variable_info, %struct.variable_info* %2, i32 0, i32 4, !dbg !6909
  store i64 -1, i64* %size, align 8, !dbg !6910
  %3 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !6911
  %fullsize = getelementptr inbounds %struct.variable_info, %struct.variable_info* %3, i32 0, i32 5, !dbg !6912
  store i64 -1, i64* %fullsize, align 8, !dbg !6913
  %4 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !6914
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %4, i32 0, i32 1, !dbg !6915
  %bf.load = load i8, i8* %is_full_var, align 4, !dbg !6916
  %bf.clear = and i8 %bf.load, -9, !dbg !6916
  %bf.set = or i8 %bf.clear, 8, !dbg !6916
  store i8 %bf.set, i8* %is_full_var, align 4, !dbg !6916
  %5 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !6917
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %5, i32 0, i32 0, !dbg !6918
  %6 = load i32, i32* %id, align 8, !dbg !6918
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %retval, i32 0, i32 1, !dbg !6919
  store i32 %6, i32* %var, align 4, !dbg !6920
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %retval, i32 0, i32 0, !dbg !6921
  store i32 0, i32* %type, align 8, !dbg !6922
  %offset1 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %retval, i32 0, i32 2, !dbg !6923
  store i64 0, i64* %offset1, align 8, !dbg !6924
  %7 = bitcast %struct.constraint_expr* %retval to { i64, i64 }*, !dbg !6925
  %8 = load { i64, i64 }, { i64, i64 }* %7, align 8, !dbg !6925
  ret { i64, i64 } %8, !dbg !6925
}

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

declare dso_local i32 @tree_map_hash(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @heapvar_map_eq(i8* %p1, i8* %p2) #0 !dbg !6926 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %h1 = alloca %struct.heapvar_map*, align 8
  %h2 = alloca %struct.heapvar_map*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6927, metadata !DIExpression()), !dbg !6928
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !6929, metadata !DIExpression()), !dbg !6930
  call void @llvm.dbg.declare(metadata %struct.heapvar_map** %h1, metadata !6931, metadata !DIExpression()), !dbg !6932
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !6933
  %1 = bitcast i8* %0 to %struct.heapvar_map*, !dbg !6934
  store %struct.heapvar_map* %1, %struct.heapvar_map** %h1, align 8, !dbg !6932
  call void @llvm.dbg.declare(metadata %struct.heapvar_map** %h2, metadata !6935, metadata !DIExpression()), !dbg !6936
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !6937
  %3 = bitcast i8* %2 to %struct.heapvar_map*, !dbg !6938
  store %struct.heapvar_map* %3, %struct.heapvar_map** %h2, align 8, !dbg !6936
  %4 = load %struct.heapvar_map*, %struct.heapvar_map** %h1, align 8, !dbg !6939
  %map = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %4, i32 0, i32 0, !dbg !6940
  %base = getelementptr inbounds %struct.tree_map, %struct.tree_map* %map, i32 0, i32 0, !dbg !6941
  %from = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base, i32 0, i32 0, !dbg !6942
  %5 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !6942
  %6 = load %struct.heapvar_map*, %struct.heapvar_map** %h2, align 8, !dbg !6943
  %map1 = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %6, i32 0, i32 0, !dbg !6944
  %base2 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %map1, i32 0, i32 0, !dbg !6945
  %from3 = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base2, i32 0, i32 0, !dbg !6946
  %7 = load %union.tree_node*, %union.tree_node** %from3, align 8, !dbg !6946
  %cmp = icmp eq %union.tree_node* %5, %7, !dbg !6947
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6948

land.rhs:                                         ; preds = %entry
  %8 = load %struct.heapvar_map*, %struct.heapvar_map** %h1, align 8, !dbg !6949
  %offset = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %8, i32 0, i32 1, !dbg !6950
  %9 = load i64, i64* %offset, align 8, !dbg !6950
  %10 = load %struct.heapvar_map*, %struct.heapvar_map** %h2, align 8, !dbg !6951
  %offset4 = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %10, i32 0, i32 1, !dbg !6952
  %11 = load i64, i64* %offset4, align 8, !dbg !6952
  %cmp5 = icmp eq i64 %9, %11, !dbg !6953
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %cmp5, %land.rhs ], !dbg !6954
  %land.ext = zext i1 %12 to i32, !dbg !6948
  ret i32 %land.ext, !dbg !6955
}

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @could_have_pointers(%union.tree_node* %t) #0 !dbg !6956 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6959, metadata !DIExpression()), !dbg !6960
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6961
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6961
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6961
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6961
  %call = call zeroext i8 @type_could_have_pointers(%union.tree_node* %1), !dbg !6962
  ret i8 %call, !dbg !6963
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @heapvar_lookup(%union.tree_node* %from, i64 %offset) #0 !dbg !6964 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %from.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i64, align 8
  %h = alloca %struct.heapvar_map*, align 8
  %in = alloca %struct.heapvar_map, align 8
  store %union.tree_node* %from, %union.tree_node** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %from.addr, metadata !6967, metadata !DIExpression()), !dbg !6968
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !6969, metadata !DIExpression()), !dbg !6970
  call void @llvm.dbg.declare(metadata %struct.heapvar_map** %h, metadata !6971, metadata !DIExpression()), !dbg !6972
  call void @llvm.dbg.declare(metadata %struct.heapvar_map* %in, metadata !6973, metadata !DIExpression()), !dbg !6974
  %0 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !6975
  %map = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %in, i32 0, i32 0, !dbg !6976
  %base = getelementptr inbounds %struct.tree_map, %struct.tree_map* %map, i32 0, i32 0, !dbg !6977
  %from1 = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base, i32 0, i32 0, !dbg !6978
  store %union.tree_node* %0, %union.tree_node** %from1, align 8, !dbg !6979
  %1 = load i64, i64* %offset.addr, align 8, !dbg !6980
  %offset2 = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %in, i32 0, i32 1, !dbg !6981
  store i64 %1, i64* %offset2, align 8, !dbg !6982
  %2 = load %struct.htab*, %struct.htab** @heapvar_for_stmt, align 8, !dbg !6983
  %3 = bitcast %struct.heapvar_map* %in to i8*, !dbg !6984
  %call = call i32 @heapvar_map_hash(%struct.heapvar_map* %in), !dbg !6985
  %call3 = call i8* @htab_find_with_hash(%struct.htab* %2, i8* %3, i32 %call), !dbg !6986
  %4 = bitcast i8* %call3 to %struct.heapvar_map*, !dbg !6987
  store %struct.heapvar_map* %4, %struct.heapvar_map** %h, align 8, !dbg !6988
  %5 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !6989
  %tobool = icmp ne %struct.heapvar_map* %5, null, !dbg !6989
  br i1 %tobool, label %if.then, label %if.end, !dbg !6991

if.then:                                          ; preds = %entry
  %6 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !6992
  %map4 = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %6, i32 0, i32 0, !dbg !6993
  %to = getelementptr inbounds %struct.tree_map, %struct.tree_map* %map4, i32 0, i32 2, !dbg !6994
  %7 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6994
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !6995
  br label %return, !dbg !6995

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6996
  br label %return, !dbg !6996

return:                                           ; preds = %if.end, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6997
  ret %union.tree_node* %8, !dbg !6997
}

declare dso_local %union.tree_node* @create_tmp_var_raw(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @heapvar_insert(%union.tree_node* %from, i64 %offset, %union.tree_node* %to) #0 !dbg !6998 {
entry:
  %from.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i64, align 8
  %to.addr = alloca %union.tree_node*, align 8
  %h = alloca %struct.heapvar_map*, align 8
  %loc = alloca i8**, align 8
  store %union.tree_node* %from, %union.tree_node** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %from.addr, metadata !7001, metadata !DIExpression()), !dbg !7002
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !7003, metadata !DIExpression()), !dbg !7004
  store %union.tree_node* %to, %union.tree_node** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to.addr, metadata !7005, metadata !DIExpression()), !dbg !7006
  call void @llvm.dbg.declare(metadata %struct.heapvar_map** %h, metadata !7007, metadata !DIExpression()), !dbg !7008
  call void @llvm.dbg.declare(metadata i8*** %loc, metadata !7009, metadata !DIExpression()), !dbg !7010
  %call = call i8* @ggc_alloc_stat(i64 32), !dbg !7011
  %0 = bitcast i8* %call to %struct.heapvar_map*, !dbg !7011
  store %struct.heapvar_map* %0, %struct.heapvar_map** %h, align 8, !dbg !7012
  %1 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !7013
  %2 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !7014
  %map = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %2, i32 0, i32 0, !dbg !7015
  %base = getelementptr inbounds %struct.tree_map, %struct.tree_map* %map, i32 0, i32 0, !dbg !7016
  %from1 = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base, i32 0, i32 0, !dbg !7017
  store %union.tree_node* %1, %union.tree_node** %from1, align 8, !dbg !7018
  %3 = load i64, i64* %offset.addr, align 8, !dbg !7019
  %4 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !7020
  %offset2 = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %4, i32 0, i32 1, !dbg !7021
  store i64 %3, i64* %offset2, align 8, !dbg !7022
  %5 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !7023
  %call3 = call i32 @heapvar_map_hash(%struct.heapvar_map* %5), !dbg !7024
  %6 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !7025
  %map4 = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %6, i32 0, i32 0, !dbg !7026
  %hash = getelementptr inbounds %struct.tree_map, %struct.tree_map* %map4, i32 0, i32 1, !dbg !7027
  store i32 %call3, i32* %hash, align 8, !dbg !7028
  %7 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !7029
  %8 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !7030
  %map5 = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %8, i32 0, i32 0, !dbg !7031
  %to6 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %map5, i32 0, i32 2, !dbg !7032
  store %union.tree_node* %7, %union.tree_node** %to6, align 8, !dbg !7033
  %9 = load %struct.htab*, %struct.htab** @heapvar_for_stmt, align 8, !dbg !7034
  %10 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !7035
  %11 = bitcast %struct.heapvar_map* %10 to i8*, !dbg !7035
  %12 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !7036
  %map7 = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %12, i32 0, i32 0, !dbg !7037
  %hash8 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %map7, i32 0, i32 1, !dbg !7038
  %13 = load i32, i32* %hash8, align 8, !dbg !7038
  %call9 = call i8** @htab_find_slot_with_hash(%struct.htab* %9, i8* %11, i32 %13, i32 1), !dbg !7039
  store i8** %call9, i8*** %loc, align 8, !dbg !7040
  %14 = load i8**, i8*** %loc, align 8, !dbg !7041
  %15 = load i8*, i8** %14, align 8, !dbg !7041
  %cmp = icmp eq i8* %15, null, !dbg !7041
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7041

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 345, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7041
  br label %cond.end, !dbg !7041

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7041

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7041
  %16 = load %struct.heapvar_map*, %struct.heapvar_map** %h, align 8, !dbg !7042
  %17 = load i8**, i8*** %loc, align 8, !dbg !7043
  %18 = bitcast i8** %17 to %struct.heapvar_map**, !dbg !7044
  store %struct.heapvar_map* %16, %struct.heapvar_map** %18, align 8, !dbg !7045
  ret void, !dbg !7046
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.var_ann_d* @get_var_ann(%union.tree_node* %var) #0 !dbg !7047 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.var_ann_d**, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7050, metadata !DIExpression()), !dbg !7051
  call void @llvm.dbg.declare(metadata %struct.var_ann_d*** %p, metadata !7052, metadata !DIExpression()), !dbg !7054
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7055
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7055
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7055
  %bf.load = load i64, i64* %1, align 8, !dbg !7055
  %bf.clear = and i64 %bf.load, 65535, !dbg !7055
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7055
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7055
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7055

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7055
  %var_decl = bitcast %union.tree_node* %2 to %struct.tree_var_decl*, !dbg !7055
  %ann = getelementptr inbounds %struct.tree_var_decl, %struct.tree_var_decl* %var_decl, i32 0, i32 1, !dbg !7055
  br label %cond.end19, !dbg !7055

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7055
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7055
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7055
  %bf.load2 = load i64, i64* %4, align 8, !dbg !7055
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7055
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7055
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !7055
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !7055

cond.true6:                                       ; preds = %cond.false
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7055
  %parm_decl = bitcast %union.tree_node* %5 to %struct.tree_parm_decl*, !dbg !7055
  %ann7 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 2, !dbg !7055
  br label %cond.end17, !dbg !7055

cond.false8:                                      ; preds = %cond.false
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7055
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7055
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !7055
  %bf.load10 = load i64, i64* %7, align 8, !dbg !7055
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !7055
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !7055
  %cmp13 = icmp eq i32 %bf.cast12, 36, !dbg !7055
  br i1 %cmp13, label %cond.true14, label %cond.false16, !dbg !7055

cond.true14:                                      ; preds = %cond.false8
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7055
  %result_decl = bitcast %union.tree_node* %8 to %struct.tree_result_decl*, !dbg !7055
  %ann15 = getelementptr inbounds %struct.tree_result_decl, %struct.tree_result_decl* %result_decl, i32 0, i32 1, !dbg !7055
  br label %cond.end, !dbg !7055

cond.false16:                                     ; preds = %cond.false8
  br label %cond.end, !dbg !7055

cond.end:                                         ; preds = %cond.false16, %cond.true14
  %cond = phi %struct.var_ann_d** [ %ann15, %cond.true14 ], [ null, %cond.false16 ], !dbg !7055
  br label %cond.end17, !dbg !7055

cond.end17:                                       ; preds = %cond.end, %cond.true6
  %cond18 = phi %struct.var_ann_d** [ %ann7, %cond.true6 ], [ %cond, %cond.end ], !dbg !7055
  br label %cond.end19, !dbg !7055

cond.end19:                                       ; preds = %cond.end17, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %ann, %cond.true ], [ %cond18, %cond.end17 ], !dbg !7055
  store %struct.var_ann_d** %cond20, %struct.var_ann_d*** %p, align 8, !dbg !7054
  %9 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !7056
  %tobool = icmp ne %struct.var_ann_d** %9, null, !dbg !7056
  br i1 %tobool, label %cond.false22, label %cond.true21, !dbg !7056

cond.true21:                                      ; preds = %cond.end19
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.57, i64 0, i64 0), i32 144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7056
  br label %cond.end23, !dbg !7056

cond.false22:                                     ; preds = %cond.end19
  br label %cond.end23, !dbg !7056

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false22 ], !dbg !7056
  %10 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !7057
  %11 = load %struct.var_ann_d*, %struct.var_ann_d** %10, align 8, !dbg !7058
  %tobool25 = icmp ne %struct.var_ann_d* %11, null, !dbg !7058
  br i1 %tobool25, label %cond.true26, label %cond.false27, !dbg !7058

cond.true26:                                      ; preds = %cond.end23
  %12 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !7059
  %13 = load %struct.var_ann_d*, %struct.var_ann_d** %12, align 8, !dbg !7060
  br label %cond.end28, !dbg !7058

cond.false27:                                     ; preds = %cond.end23
  %14 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7061
  %call = call %struct.var_ann_d* @create_var_ann(%union.tree_node* %14), !dbg !7062
  br label %cond.end28, !dbg !7058

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi %struct.var_ann_d* [ %13, %cond.true26 ], [ %call, %cond.false27 ], !dbg !7058
  ret %struct.var_ann_d* %cond29, !dbg !7063
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.htab* @gimple_referenced_vars(%struct.function* %fun) #0 !dbg !7064 {
entry:
  %retval = alloca %struct.htab*, align 8
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !7069, metadata !DIExpression()), !dbg !7070
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7071
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 3, !dbg !7073
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !7073
  %tobool = icmp ne %struct.gimple_df* %1, null, !dbg !7071
  br i1 %tobool, label %if.end, label %if.then, !dbg !7074

if.then:                                          ; preds = %entry
  store %struct.htab* null, %struct.htab** %retval, align 8, !dbg !7075
  br label %return, !dbg !7075

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7076
  %gimple_df1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 3, !dbg !7077
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df1, align 8, !dbg !7077
  %referenced_vars = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 0, !dbg !7078
  %4 = load %struct.htab*, %struct.htab** %referenced_vars, align 8, !dbg !7078
  store %struct.htab* %4, %struct.htab** %retval, align 8, !dbg !7079
  br label %return, !dbg !7079

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.htab*, %struct.htab** %retval, align 8, !dbg !7080
  ret %struct.htab* %5, !dbg !7080
}

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info* @get_vi_for_tree(%union.tree_node* %t) #0 !dbg !7081 {
entry:
  %retval = alloca %struct.variable_info*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7084, metadata !DIExpression()), !dbg !7085
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !7086, metadata !DIExpression()), !dbg !7087
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @vi_for_tree, align 8, !dbg !7088
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7089
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !7089
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !7090
  store i8** %call, i8*** %slot, align 8, !dbg !7087
  %3 = load i8**, i8*** %slot, align 8, !dbg !7091
  %cmp = icmp eq i8** %3, null, !dbg !7093
  br i1 %cmp, label %if.then, label %if.end, !dbg !7094

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7095
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7096
  %call1 = call i8* @alias_get_name(%union.tree_node* %5), !dbg !7097
  %call2 = call i32 @create_variable_info_for(%union.tree_node* %4, i8* %call1), !dbg !7098
  %call3 = call %struct.variable_info* @get_varinfo(i32 %call2), !dbg !7099
  store %struct.variable_info* %call3, %struct.variable_info** %retval, align 8, !dbg !7100
  br label %return, !dbg !7100

if.end:                                           ; preds = %entry
  %6 = load i8**, i8*** %slot, align 8, !dbg !7101
  %7 = load i8*, i8** %6, align 8, !dbg !7102
  %8 = bitcast i8* %7 to %struct.variable_info*, !dbg !7103
  store %struct.variable_info* %8, %struct.variable_info** %retval, align 8, !dbg !7104
  br label %return, !dbg !7104

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.variable_info*, %struct.variable_info** %retval, align 8, !dbg !7105
  ret %struct.variable_info* %9, !dbg !7105
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_constraint_from(%struct.variable_info* %vi, i32 %from) #0 !dbg !7106 {
entry:
  %vi.addr = alloca %struct.variable_info*, align 8
  %from.addr = alloca i32, align 4
  %lhs = alloca %struct.constraint_expr, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  store %struct.variable_info* %vi, %struct.variable_info** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi.addr, metadata !7109, metadata !DIExpression()), !dbg !7110
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !7111, metadata !DIExpression()), !dbg !7112
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !7113, metadata !DIExpression()), !dbg !7114
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !7115, metadata !DIExpression()), !dbg !7116
  %0 = load %struct.variable_info*, %struct.variable_info** %vi.addr, align 8, !dbg !7117
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %0, i32 0, i32 0, !dbg !7118
  %1 = load i32, i32* %id, align 8, !dbg !7118
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !7119
  store i32 %1, i32* %var, align 4, !dbg !7120
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !7121
  store i64 0, i64* %offset, align 8, !dbg !7122
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !7123
  store i32 0, i32* %type, align 8, !dbg !7124
  %2 = load i32, i32* %from.addr, align 4, !dbg !7125
  %var1 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !7126
  store i32 %2, i32* %var1, align 4, !dbg !7127
  %offset2 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !7128
  store i64 0, i64* %offset2, align 8, !dbg !7129
  %type3 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !7130
  store i32 2, i32* %type3, align 8, !dbg !7131
  %3 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !7132
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !7132
  %5 = load i64, i64* %4, align 8, !dbg !7132
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !7132
  %7 = load i64, i64* %6, align 8, !dbg !7132
  %8 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !7132
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !7132
  %10 = load i64, i64* %9, align 8, !dbg !7132
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !7132
  %12 = load i64, i64* %11, align 8, !dbg !7132
  %call = call %struct.constraint* @new_constraint(i64 %5, i64 %7, i64 %10, i64 %12), !dbg !7132
  call void @process_constraint(%struct.constraint* %call), !dbg !7133
  ret void, !dbg !7134
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_constraint_from_restrict(%struct.variable_info* %lhs, i8* %name) #0 !dbg !7135 {
entry:
  %lhs.addr = alloca %struct.variable_info*, align 8
  %name.addr = alloca i8*, align 8
  %vi = alloca %struct.variable_info*, align 8
  store %struct.variable_info* %lhs, %struct.variable_info** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %lhs.addr, metadata !7138, metadata !DIExpression()), !dbg !7139
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7140, metadata !DIExpression()), !dbg !7141
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !7142, metadata !DIExpression()), !dbg !7143
  %0 = load %struct.variable_info*, %struct.variable_info** %lhs.addr, align 8, !dbg !7144
  %1 = load i8*, i8** %name.addr, align 8, !dbg !7145
  %call = call %struct.variable_info* @make_constraint_from_heapvar(%struct.variable_info* %0, i8* %1), !dbg !7146
  store %struct.variable_info* %call, %struct.variable_info** %vi, align 8, !dbg !7147
  %2 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7148
  %is_restrict_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %2, i32 0, i32 1, !dbg !7149
  %bf.load = load i8, i8* %is_restrict_var, align 4, !dbg !7150
  %bf.clear = and i8 %bf.load, -33, !dbg !7150
  %bf.set = or i8 %bf.clear, 32, !dbg !7150
  store i8 %bf.set, i8* %is_restrict_var, align 4, !dbg !7150
  %3 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7151
  %is_global_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %3, i32 0, i32 1, !dbg !7152
  %bf.load1 = load i8, i8* %is_global_var, align 4, !dbg !7153
  %bf.clear2 = and i8 %bf.load1, 127, !dbg !7153
  store i8 %bf.clear2, i8* %is_global_var, align 4, !dbg !7153
  %4 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7154
  %is_special_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %4, i32 0, i32 1, !dbg !7155
  %bf.load3 = load i8, i8* %is_special_var, align 4, !dbg !7156
  %bf.clear4 = and i8 %bf.load3, -3, !dbg !7156
  %bf.set5 = or i8 %bf.clear4, 2, !dbg !7156
  store i8 %bf.set5, i8* %is_special_var, align 4, !dbg !7156
  %5 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7157
  %may_have_pointers = getelementptr inbounds %struct.variable_info, %struct.variable_info* %5, i32 0, i32 1, !dbg !7158
  %bf.load6 = load i8, i8* %may_have_pointers, align 4, !dbg !7159
  %bf.clear7 = and i8 %bf.load6, -65, !dbg !7159
  store i8 %bf.clear7, i8* %may_have_pointers, align 4, !dbg !7159
  ret void, !dbg !7160
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @type_could_have_pointers(%union.tree_node* %type) #0 !dbg !7161 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7162, metadata !DIExpression()), !dbg !7163
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7164
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7164
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7164
  %bf.load = load i64, i64* %1, align 8, !dbg !7164
  %bf.clear = and i64 %bf.load, 65535, !dbg !7164
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7164
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !7164
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7164

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7164
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7164
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7164
  %bf.load2 = load i64, i64* %3, align 8, !dbg !7164
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7164
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7164
  %cmp5 = icmp eq i32 %bf.cast4, 12, !dbg !7164
  br i1 %cmp5, label %if.then, label %if.end, !dbg !7166

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !7167
  br label %return, !dbg !7167

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7168
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7168
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7168
  %bf.load7 = load i64, i64* %5, align 8, !dbg !7168
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !7168
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7168
  %cmp10 = icmp eq i32 %bf.cast9, 15, !dbg !7170
  br i1 %cmp10, label %if.then11, label %if.end13, !dbg !7171

if.then11:                                        ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7172
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !7172
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7172
  %7 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7172
  %call = call zeroext i8 @type_could_have_pointers(%union.tree_node* %7), !dbg !7173
  store i8 %call, i8* %retval, align 1, !dbg !7174
  br label %return, !dbg !7174

if.end13:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7175
  %base14 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7175
  %9 = bitcast %struct.tree_base* %base14 to i64*, !dbg !7175
  %bf.load15 = load i64, i64* %9, align 8, !dbg !7175
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !7175
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !7175
  %cmp18 = icmp eq i32 %bf.cast17, 15, !dbg !7175
  br i1 %cmp18, label %lor.end36, label %lor.rhs, !dbg !7175

lor.rhs:                                          ; preds = %if.end13
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7175
  %base19 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7175
  %11 = bitcast %struct.tree_base* %base19 to i64*, !dbg !7175
  %bf.load20 = load i64, i64* %11, align 8, !dbg !7175
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !7175
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !7175
  %cmp23 = icmp eq i32 %bf.cast22, 16, !dbg !7175
  br i1 %cmp23, label %lor.end, label %lor.lhs.false24, !dbg !7175

lor.lhs.false24:                                  ; preds = %lor.rhs
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7175
  %base25 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7175
  %13 = bitcast %struct.tree_base* %base25 to i64*, !dbg !7175
  %bf.load26 = load i64, i64* %13, align 8, !dbg !7175
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !7175
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !7175
  %cmp29 = icmp eq i32 %bf.cast28, 17, !dbg !7175
  br i1 %cmp29, label %lor.end, label %lor.rhs30, !dbg !7175

lor.rhs30:                                        ; preds = %lor.lhs.false24
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7175
  %base31 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7175
  %15 = bitcast %struct.tree_base* %base31 to i64*, !dbg !7175
  %bf.load32 = load i64, i64* %15, align 8, !dbg !7175
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !7175
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !7175
  %cmp35 = icmp eq i32 %bf.cast34, 18, !dbg !7175
  br label %lor.end, !dbg !7175

lor.end:                                          ; preds = %lor.rhs30, %lor.lhs.false24, %lor.rhs
  %16 = phi i1 [ true, %lor.lhs.false24 ], [ true, %lor.rhs ], [ %cmp35, %lor.rhs30 ]
  br label %lor.end36, !dbg !7175

lor.end36:                                        ; preds = %lor.end, %if.end13
  %17 = phi i1 [ true, %if.end13 ], [ %16, %lor.end ]
  %lor.ext = zext i1 %17 to i32, !dbg !7175
  %conv = trunc i32 %lor.ext to i8, !dbg !7175
  store i8 %conv, i8* %retval, align 1, !dbg !7176
  br label %return, !dbg !7176

return:                                           ; preds = %lor.end36, %if.then11, %if.then
  %18 = load i8, i8* %retval, align 1, !dbg !7177
  ret i8 %18, !dbg !7177
}

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @heapvar_map_hash(%struct.heapvar_map* %h) #0 !dbg !7178 {
entry:
  %h.addr = alloca %struct.heapvar_map*, align 8
  store %struct.heapvar_map* %h, %struct.heapvar_map** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.heapvar_map** %h.addr, metadata !7181, metadata !DIExpression()), !dbg !7182
  %0 = load %struct.heapvar_map*, %struct.heapvar_map** %h.addr, align 8, !dbg !7183
  %offset = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %0, i32 0, i32 1, !dbg !7184
  %1 = load i64, i64* %offset, align 8, !dbg !7184
  %2 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !7185
  %3 = load %struct.heapvar_map*, %struct.heapvar_map** %h.addr, align 8, !dbg !7186
  %map = getelementptr inbounds %struct.heapvar_map, %struct.heapvar_map* %3, i32 0, i32 0, !dbg !7187
  %base = getelementptr inbounds %struct.tree_map, %struct.tree_map* %map, i32 0, i32 0, !dbg !7188
  %from = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base, i32 0, i32 0, !dbg !7189
  %4 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !7189
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !7186
  %call = call i32 %2(i8* %5), !dbg !7185
  %call1 = call i32 @iterative_hash_host_wide_int(i64 %1, i32 %call), !dbg !7190
  ret i32 %call1, !dbg !7191
}

declare dso_local i32 @iterative_hash_host_wide_int(i64, i32) #2

declare dso_local i8* @ggc_alloc_stat(i64) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare dso_local %struct.var_ann_d* @create_var_ann(%union.tree_node*) #2

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @create_variable_info_for(%union.tree_node* %decl, i8* %name) #0 !dbg !7192 {
entry:
  %retval = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %vi = alloca %struct.variable_info*, align 8
  %decl_type = alloca %union.tree_node*, align 8
  %declsize = alloca %union.tree_node*, align 8
  %fieldstack = alloca %struct.VEC_fieldoff_s_heap*, align 8
  %fo = alloca %struct.fieldoff*, align 8
  %notokay = alloca i8, align 1
  %i = alloca i32, align 4
  %newvi = alloca %struct.variable_info*, align 8
  %newname = alloca i8*, align 8
  %tempname = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7195, metadata !DIExpression()), !dbg !7196
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7197, metadata !DIExpression()), !dbg !7198
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !7199, metadata !DIExpression()), !dbg !7200
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_type, metadata !7201, metadata !DIExpression()), !dbg !7202
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7203
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !7203
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7203
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7203
  store %union.tree_node* %1, %union.tree_node** %decl_type, align 8, !dbg !7202
  call void @llvm.dbg.declare(metadata %union.tree_node** %declsize, metadata !7204, metadata !DIExpression()), !dbg !7205
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7206
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7206
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7206
  %bf.load = load i64, i64* %3, align 8, !dbg !7206
  %bf.clear = and i64 %bf.load, 65535, !dbg !7206
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7206
  %idxprom = sext i32 %bf.cast to i64, !dbg !7206
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7206
  %4 = load i32, i32* %arrayidx, align 4, !dbg !7206
  %cmp = icmp eq i32 %4, 3, !dbg !7206
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7206

cond.true:                                        ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7207
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !7207
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !7207
  %6 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7207
  br label %cond.end, !dbg !7206

cond.false:                                       ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !7208
  %type1 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !7208
  %size2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 2, !dbg !7208
  %8 = load %union.tree_node*, %union.tree_node** %size2, align 8, !dbg !7208
  br label %cond.end, !dbg !7206

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %6, %cond.true ], [ %8, %cond.false ], !dbg !7206
  store %union.tree_node* %cond, %union.tree_node** %declsize, align 8, !dbg !7205
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_heap** %fieldstack, metadata !7209, metadata !DIExpression()), !dbg !7210
  store %struct.VEC_fieldoff_s_heap* null, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7210
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7211
  %call = call zeroext i8 @var_can_have_subvars(%union.tree_node* %9), !dbg !7213
  %conv = zext i8 %call to i32, !dbg !7213
  %tobool = icmp ne i32 %conv, 0, !dbg !7213
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7214

land.lhs.true:                                    ; preds = %cond.end
  %10 = load i8, i8* @use_field_sensitive, align 1, !dbg !7215
  %conv3 = zext i8 %10 to i32, !dbg !7215
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !7215
  br i1 %tobool4, label %if.then, label %if.end, !dbg !7216

if.then:                                          ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !7217
  %call5 = call i32 @push_fields_onto_fieldstack(%union.tree_node* %11, %struct.VEC_fieldoff_s_heap** %fieldstack, i64 0), !dbg !7218
  br label %if.end, !dbg !7218

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7219
  %13 = load i8*, i8** %name.addr, align 8, !dbg !7220
  %call6 = call %struct.variable_info* @new_var_info(%union.tree_node* %12, i8* %13), !dbg !7221
  store %struct.variable_info* %call6, %struct.variable_info** %vi, align 8, !dbg !7222
  %14 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7223
  %offset = getelementptr inbounds %struct.variable_info, %struct.variable_info* %14, i32 0, i32 3, !dbg !7224
  store i64 0, i64* %offset, align 8, !dbg !7225
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7226
  %call7 = call zeroext i8 @could_have_pointers(%union.tree_node* %15), !dbg !7227
  %conv8 = zext i8 %call7 to i32, !dbg !7227
  %16 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7228
  %may_have_pointers = getelementptr inbounds %struct.variable_info, %struct.variable_info* %16, i32 0, i32 1, !dbg !7229
  %17 = trunc i32 %conv8 to i8, !dbg !7230
  %bf.load9 = load i8, i8* %may_have_pointers, align 4, !dbg !7230
  %bf.value = and i8 %17, 1, !dbg !7230
  %bf.shl = shl i8 %bf.value, 6, !dbg !7230
  %bf.clear10 = and i8 %bf.load9, -65, !dbg !7230
  %bf.set = or i8 %bf.clear10, %bf.shl, !dbg !7230
  store i8 %bf.set, i8* %may_have_pointers, align 4, !dbg !7230
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !7230
  %18 = load %union.tree_node*, %union.tree_node** %declsize, align 8, !dbg !7231
  %tobool11 = icmp ne %union.tree_node* %18, null, !dbg !7231
  br i1 %tobool11, label %lor.lhs.false, label %if.then14, !dbg !7233

lor.lhs.false:                                    ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** %declsize, align 8, !dbg !7234
  %call12 = call i32 @host_integerp(%union.tree_node* %19, i32 1), !dbg !7235
  %tobool13 = icmp ne i32 %call12, 0, !dbg !7235
  br i1 %tobool13, label %if.else, label %if.then14, !dbg !7236

if.then14:                                        ; preds = %lor.lhs.false, %if.end
  %20 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7237
  %is_unknown_size_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %20, i32 0, i32 1, !dbg !7239
  %bf.load15 = load i8, i8* %is_unknown_size_var, align 4, !dbg !7240
  %bf.clear16 = and i8 %bf.load15, -5, !dbg !7240
  %bf.set17 = or i8 %bf.clear16, 4, !dbg !7240
  store i8 %bf.set17, i8* %is_unknown_size_var, align 4, !dbg !7240
  %21 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7241
  %fullsize = getelementptr inbounds %struct.variable_info, %struct.variable_info* %21, i32 0, i32 5, !dbg !7242
  store i64 -1, i64* %fullsize, align 8, !dbg !7243
  %22 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7244
  %size18 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %22, i32 0, i32 4, !dbg !7245
  store i64 -1, i64* %size18, align 8, !dbg !7246
  br label %if.end23, !dbg !7247

if.else:                                          ; preds = %lor.lhs.false
  %23 = load %union.tree_node*, %union.tree_node** %declsize, align 8, !dbg !7248
  %int_cst = bitcast %union.tree_node* %23 to %struct.tree_int_cst*, !dbg !7248
  %int_cst19 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7248
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst19, i32 0, i32 0, !dbg !7248
  %24 = load i64, i64* %low, align 8, !dbg !7248
  %25 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7250
  %fullsize20 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %25, i32 0, i32 5, !dbg !7251
  store i64 %24, i64* %fullsize20, align 8, !dbg !7252
  %26 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7253
  %fullsize21 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %26, i32 0, i32 5, !dbg !7254
  %27 = load i64, i64* %fullsize21, align 8, !dbg !7254
  %28 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7255
  %size22 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %28, i32 0, i32 4, !dbg !7256
  store i64 %27, i64* %size22, align 8, !dbg !7257
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then14
  %29 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7258
  %decl24 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %29, i32 0, i32 7, !dbg !7259
  %30 = load %union.tree_node*, %union.tree_node** %decl24, align 8, !dbg !7259
  %31 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7260
  call void @insert_vi_for_tree(%union.tree_node* %30, %struct.variable_info* %31), !dbg !7261
  %32 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7262
  %is_global_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %32, i32 0, i32 1, !dbg !7264
  %bf.load25 = load i8, i8* %is_global_var, align 4, !dbg !7264
  %bf.lshr = lshr i8 %bf.load25, 7, !dbg !7264
  %bf.cast26 = zext i8 %bf.lshr to i32, !dbg !7264
  %tobool27 = icmp ne i32 %bf.cast26, 0, !dbg !7262
  br i1 %tobool27, label %land.lhs.true28, label %if.end67, !dbg !7265

land.lhs.true28:                                  ; preds = %if.end23
  %33 = load i32, i32* @flag_whole_program, align 4, !dbg !7266
  %tobool29 = icmp ne i32 %33, 0, !dbg !7266
  br i1 %tobool29, label %lor.lhs.false30, label %land.lhs.true32, !dbg !7267

lor.lhs.false30:                                  ; preds = %land.lhs.true28
  %34 = load i32, i32* @in_ipa_mode, align 4, !dbg !7268
  %tobool31 = icmp ne i32 %34, 0, !dbg !7268
  br i1 %tobool31, label %if.end67, label %land.lhs.true32, !dbg !7269

land.lhs.true32:                                  ; preds = %lor.lhs.false30, %land.lhs.true28
  %35 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7270
  %may_have_pointers33 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %35, i32 0, i32 1, !dbg !7271
  %bf.load34 = load i8, i8* %may_have_pointers33, align 4, !dbg !7271
  %bf.lshr35 = lshr i8 %bf.load34, 6, !dbg !7271
  %bf.clear36 = and i8 %bf.lshr35, 1, !dbg !7271
  %bf.cast37 = zext i8 %bf.clear36 to i32, !dbg !7271
  %tobool38 = icmp ne i32 %bf.cast37, 0, !dbg !7270
  br i1 %tobool38, label %if.then39, label %if.end67, !dbg !7272

if.then39:                                        ; preds = %land.lhs.true32
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7273
  %common40 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !7273
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !7273
  %37 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !7273
  %base42 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !7273
  %38 = bitcast %struct.tree_base* %base42 to i64*, !dbg !7273
  %bf.load43 = load i64, i64* %38, align 8, !dbg !7273
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !7273
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !7273
  %cmp46 = icmp eq i32 %bf.cast45, 10, !dbg !7273
  br i1 %cmp46, label %land.lhs.true57, label %lor.lhs.false48, !dbg !7273

lor.lhs.false48:                                  ; preds = %if.then39
  %39 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7273
  %common49 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !7273
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !7273
  %40 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !7273
  %base51 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !7273
  %41 = bitcast %struct.tree_base* %base51 to i64*, !dbg !7273
  %bf.load52 = load i64, i64* %41, align 8, !dbg !7273
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !7273
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !7273
  %cmp55 = icmp eq i32 %bf.cast54, 12, !dbg !7273
  br i1 %cmp55, label %land.lhs.true57, label %if.end66, !dbg !7276

land.lhs.true57:                                  ; preds = %lor.lhs.false48, %if.then39
  %42 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7277
  %common58 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !7277
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !7277
  %43 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !7277
  %type60 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !7277
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type60, i32 0, i32 6, !dbg !7277
  %bf.load61 = load i32, i32* %restrict_flag, align 4, !dbg !7277
  %bf.lshr62 = lshr i32 %bf.load61, 13, !dbg !7277
  %bf.clear63 = and i32 %bf.lshr62, 1, !dbg !7277
  %tobool64 = icmp ne i32 %bf.clear63, 0, !dbg !7277
  br i1 %tobool64, label %if.then65, label %if.end66, !dbg !7278

if.then65:                                        ; preds = %land.lhs.true57
  %44 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7279
  call void @make_constraint_from_restrict(%struct.variable_info* %44, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.58, i64 0, i64 0)), !dbg !7280
  br label %if.end66, !dbg !7280

if.end66:                                         ; preds = %if.then65, %land.lhs.true57, %lor.lhs.false48
  %45 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7281
  call void @make_copy_constraint(%struct.variable_info* %45, i32 4), !dbg !7282
  br label %if.end67, !dbg !7283

if.end67:                                         ; preds = %if.end66, %land.lhs.true32, %lor.lhs.false30, %if.end23
  %46 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !7284
  %inc = add i32 %46, 1, !dbg !7284
  store i32 %inc, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !7284
  %47 = load i8, i8* @use_field_sensitive, align 1, !dbg !7285
  %conv68 = zext i8 %47 to i32, !dbg !7285
  %tobool69 = icmp ne i32 %conv68, 0, !dbg !7285
  br i1 %tobool69, label %land.lhs.true70, label %if.else293, !dbg !7287

land.lhs.true70:                                  ; preds = %if.end67
  %48 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7288
  %is_unknown_size_var71 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %48, i32 0, i32 1, !dbg !7289
  %bf.load72 = load i8, i8* %is_unknown_size_var71, align 4, !dbg !7289
  %bf.lshr73 = lshr i8 %bf.load72, 2, !dbg !7289
  %bf.clear74 = and i8 %bf.lshr73, 1, !dbg !7289
  %bf.cast75 = zext i8 %bf.clear74 to i32, !dbg !7289
  %tobool76 = icmp ne i32 %bf.cast75, 0, !dbg !7288
  br i1 %tobool76, label %if.else293, label %land.lhs.true77, !dbg !7290

land.lhs.true77:                                  ; preds = %land.lhs.true70
  %49 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7291
  %call78 = call zeroext i8 @var_can_have_subvars(%union.tree_node* %49), !dbg !7292
  %conv79 = zext i8 %call78 to i32, !dbg !7292
  %tobool80 = icmp ne i32 %conv79, 0, !dbg !7292
  br i1 %tobool80, label %land.lhs.true81, label %if.else293, !dbg !7293

land.lhs.true81:                                  ; preds = %land.lhs.true77
  %50 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7294
  %tobool82 = icmp ne %struct.VEC_fieldoff_s_heap* %50, null, !dbg !7294
  br i1 %tobool82, label %cond.true83, label %cond.false85, !dbg !7294

cond.true83:                                      ; preds = %land.lhs.true81
  %51 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7294
  %base84 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %51, i32 0, i32 0, !dbg !7294
  br label %cond.end86, !dbg !7294

cond.false85:                                     ; preds = %land.lhs.true81
  br label %cond.end86, !dbg !7294

cond.end86:                                       ; preds = %cond.false85, %cond.true83
  %cond87 = phi %struct.VEC_fieldoff_s_base* [ %base84, %cond.true83 ], [ null, %cond.false85 ], !dbg !7294
  %call88 = call i32 @VEC_fieldoff_s_base_length(%struct.VEC_fieldoff_s_base* %cond87), !dbg !7294
  %cmp89 = icmp ugt i32 %call88, 1, !dbg !7295
  br i1 %cmp89, label %land.lhs.true91, label %if.else293, !dbg !7296

land.lhs.true91:                                  ; preds = %cond.end86
  %52 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7297
  %tobool92 = icmp ne %struct.VEC_fieldoff_s_heap* %52, null, !dbg !7297
  br i1 %tobool92, label %cond.true93, label %cond.false95, !dbg !7297

cond.true93:                                      ; preds = %land.lhs.true91
  %53 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7297
  %base94 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %53, i32 0, i32 0, !dbg !7297
  br label %cond.end96, !dbg !7297

cond.false95:                                     ; preds = %land.lhs.true91
  br label %cond.end96, !dbg !7297

cond.end96:                                       ; preds = %cond.false95, %cond.true93
  %cond97 = phi %struct.VEC_fieldoff_s_base* [ %base94, %cond.true93 ], [ null, %cond.false95 ], !dbg !7297
  %call98 = call i32 @VEC_fieldoff_s_base_length(%struct.VEC_fieldoff_s_base* %cond97), !dbg !7297
  %conv99 = zext i32 %call98 to i64, !dbg !7297
  %54 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7298
  %arrayidx100 = getelementptr inbounds %struct.param_info, %struct.param_info* %54, i64 95, !dbg !7298
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx100, i32 0, i32 1, !dbg !7298
  %55 = load i32, i32* %value, align 8, !dbg !7298
  %conv101 = sext i32 %55 to i64, !dbg !7298
  %cmp102 = icmp ule i64 %conv99, %conv101, !dbg !7299
  br i1 %cmp102, label %if.then104, label %if.else293, !dbg !7300

if.then104:                                       ; preds = %cond.end96
  call void @llvm.dbg.declare(metadata %struct.fieldoff** %fo, metadata !7301, metadata !DIExpression()), !dbg !7304
  store %struct.fieldoff* null, %struct.fieldoff** %fo, align 8, !dbg !7304
  call void @llvm.dbg.declare(metadata i8* %notokay, metadata !7305, metadata !DIExpression()), !dbg !7306
  store i8 0, i8* %notokay, align 1, !dbg !7306
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7307, metadata !DIExpression()), !dbg !7308
  store i32 0, i32* %i, align 4, !dbg !7309
  br label %for.cond, !dbg !7311

for.cond:                                         ; preds = %for.inc, %if.then104
  %56 = load i8, i8* %notokay, align 1, !dbg !7312
  %tobool105 = icmp ne i8 %56, 0, !dbg !7312
  br i1 %tobool105, label %land.end, label %land.rhs, !dbg !7314

land.rhs:                                         ; preds = %for.cond
  %57 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7315
  %tobool106 = icmp ne %struct.VEC_fieldoff_s_heap* %57, null, !dbg !7315
  br i1 %tobool106, label %cond.true107, label %cond.false109, !dbg !7315

cond.true107:                                     ; preds = %land.rhs
  %58 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7315
  %base108 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %58, i32 0, i32 0, !dbg !7315
  br label %cond.end110, !dbg !7315

cond.false109:                                    ; preds = %land.rhs
  br label %cond.end110, !dbg !7315

cond.end110:                                      ; preds = %cond.false109, %cond.true107
  %cond111 = phi %struct.VEC_fieldoff_s_base* [ %base108, %cond.true107 ], [ null, %cond.false109 ], !dbg !7315
  %59 = load i32, i32* %i, align 4, !dbg !7315
  %call112 = call i32 @VEC_fieldoff_s_base_iterate(%struct.VEC_fieldoff_s_base* %cond111, i32 %59, %struct.fieldoff** %fo), !dbg !7315
  %tobool113 = icmp ne i32 %call112, 0, !dbg !7314
  br label %land.end

land.end:                                         ; preds = %cond.end110, %for.cond
  %60 = phi i1 [ false, %for.cond ], [ %tobool113, %cond.end110 ], !dbg !7316
  br i1 %60, label %for.body, label %for.end, !dbg !7317

for.body:                                         ; preds = %land.end
  %61 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7318
  %has_unknown_size = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %61, i32 0, i32 2, !dbg !7321
  %bf.load114 = load i8, i8* %has_unknown_size, align 8, !dbg !7321
  %bf.clear115 = and i8 %bf.load114, 1, !dbg !7321
  %bf.cast116 = zext i8 %bf.clear115 to i32, !dbg !7321
  %tobool117 = icmp ne i32 %bf.cast116, 0, !dbg !7318
  br i1 %tobool117, label %if.then122, label %lor.lhs.false118, !dbg !7322

lor.lhs.false118:                                 ; preds = %for.body
  %62 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7323
  %offset119 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %62, i32 0, i32 0, !dbg !7324
  %63 = load i64, i64* %offset119, align 8, !dbg !7324
  %cmp120 = icmp slt i64 %63, 0, !dbg !7325
  br i1 %cmp120, label %if.then122, label %if.end123, !dbg !7326

if.then122:                                       ; preds = %lor.lhs.false118, %for.body
  store i8 1, i8* %notokay, align 1, !dbg !7327
  br label %for.end, !dbg !7329

if.end123:                                        ; preds = %lor.lhs.false118
  br label %for.inc, !dbg !7330

for.inc:                                          ; preds = %if.end123
  %64 = load i32, i32* %i, align 4, !dbg !7331
  %inc124 = add i32 %64, 1, !dbg !7331
  store i32 %inc124, i32* %i, align 4, !dbg !7331
  br label %for.cond, !dbg !7332, !llvm.loop !7333

for.end:                                          ; preds = %if.then122, %land.end
  %65 = load i8, i8* %notokay, align 1, !dbg !7335
  %tobool125 = icmp ne i8 %65, 0, !dbg !7335
  br i1 %tobool125, label %if.end128, label %if.then126, !dbg !7337

if.then126:                                       ; preds = %for.end
  %66 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7338
  call void @sort_fieldstack(%struct.VEC_fieldoff_s_heap* %66), !dbg !7340
  %67 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7341
  %call127 = call zeroext i8 @check_for_overlaps(%struct.VEC_fieldoff_s_heap* %67), !dbg !7342
  store i8 %call127, i8* %notokay, align 1, !dbg !7343
  br label %if.end128, !dbg !7344

if.end128:                                        ; preds = %if.then126, %for.end
  %68 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7345
  %tobool129 = icmp ne %struct.VEC_fieldoff_s_heap* %68, null, !dbg !7345
  br i1 %tobool129, label %cond.true130, label %cond.false132, !dbg !7345

cond.true130:                                     ; preds = %if.end128
  %69 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7345
  %base131 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %69, i32 0, i32 0, !dbg !7345
  br label %cond.end133, !dbg !7345

cond.false132:                                    ; preds = %if.end128
  br label %cond.end133, !dbg !7345

cond.end133:                                      ; preds = %cond.false132, %cond.true130
  %cond134 = phi %struct.VEC_fieldoff_s_base* [ %base131, %cond.true130 ], [ null, %cond.false132 ], !dbg !7345
  %call135 = call i32 @VEC_fieldoff_s_base_length(%struct.VEC_fieldoff_s_base* %cond134), !dbg !7345
  %cmp136 = icmp ne i32 %call135, 0, !dbg !7347
  br i1 %cmp136, label %if.then138, label %if.end146, !dbg !7348

if.then138:                                       ; preds = %cond.end133
  %70 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7349
  %tobool139 = icmp ne %struct.VEC_fieldoff_s_heap* %70, null, !dbg !7349
  br i1 %tobool139, label %cond.true140, label %cond.false142, !dbg !7349

cond.true140:                                     ; preds = %if.then138
  %71 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7349
  %base141 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %71, i32 0, i32 0, !dbg !7349
  br label %cond.end143, !dbg !7349

cond.false142:                                    ; preds = %if.then138
  br label %cond.end143, !dbg !7349

cond.end143:                                      ; preds = %cond.false142, %cond.true140
  %cond144 = phi %struct.VEC_fieldoff_s_base* [ %base141, %cond.true140 ], [ null, %cond.false142 ], !dbg !7349
  %call145 = call %struct.fieldoff* @VEC_fieldoff_s_base_index(%struct.VEC_fieldoff_s_base* %cond144, i32 0), !dbg !7349
  store %struct.fieldoff* %call145, %struct.fieldoff** %fo, align 8, !dbg !7350
  br label %if.end146, !dbg !7351

if.end146:                                        ; preds = %cond.end143, %cond.end133
  %72 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7352
  %cmp147 = icmp eq %struct.fieldoff* %72, null, !dbg !7354
  br i1 %cmp147, label %if.then152, label %lor.lhs.false149, !dbg !7355

lor.lhs.false149:                                 ; preds = %if.end146
  %73 = load i8, i8* %notokay, align 1, !dbg !7356
  %conv150 = zext i8 %73 to i32, !dbg !7356
  %tobool151 = icmp ne i32 %conv150, 0, !dbg !7356
  br i1 %tobool151, label %if.then152, label %if.end162, !dbg !7357

if.then152:                                       ; preds = %lor.lhs.false149, %if.end146
  %74 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7358
  %is_unknown_size_var153 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %74, i32 0, i32 1, !dbg !7360
  %bf.load154 = load i8, i8* %is_unknown_size_var153, align 4, !dbg !7361
  %bf.clear155 = and i8 %bf.load154, -5, !dbg !7361
  %bf.set156 = or i8 %bf.clear155, 4, !dbg !7361
  store i8 %bf.set156, i8* %is_unknown_size_var153, align 4, !dbg !7361
  %75 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7362
  %fullsize157 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %75, i32 0, i32 5, !dbg !7363
  store i64 -1, i64* %fullsize157, align 8, !dbg !7364
  %76 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7365
  %size158 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %76, i32 0, i32 4, !dbg !7366
  store i64 -1, i64* %size158, align 8, !dbg !7367
  %77 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7368
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %77, i32 0, i32 1, !dbg !7369
  %bf.load159 = load i8, i8* %is_full_var, align 4, !dbg !7370
  %bf.clear160 = and i8 %bf.load159, -9, !dbg !7370
  %bf.set161 = or i8 %bf.clear160, 8, !dbg !7370
  store i8 %bf.set161, i8* %is_full_var, align 4, !dbg !7370
  call void @VEC_fieldoff_s_heap_free(%struct.VEC_fieldoff_s_heap** %fieldstack), !dbg !7371
  %78 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7372
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %78, i32 0, i32 0, !dbg !7373
  %79 = load i32, i32* %id, align 8, !dbg !7373
  store i32 %79, i32* %retval, align 4, !dbg !7374
  br label %return, !dbg !7374

if.end162:                                        ; preds = %lor.lhs.false149
  %80 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7375
  %size163 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %80, i32 0, i32 1, !dbg !7376
  %81 = load i64, i64* %size163, align 8, !dbg !7376
  %82 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7377
  %size164 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %82, i32 0, i32 4, !dbg !7378
  store i64 %81, i64* %size164, align 8, !dbg !7379
  %83 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7380
  %offset165 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %83, i32 0, i32 0, !dbg !7381
  %84 = load i64, i64* %offset165, align 8, !dbg !7381
  %85 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7382
  %offset166 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %85, i32 0, i32 3, !dbg !7383
  store i64 %84, i64* %offset166, align 8, !dbg !7384
  %86 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7385
  %may_have_pointers167 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %86, i32 0, i32 2, !dbg !7386
  %bf.load168 = load i8, i8* %may_have_pointers167, align 8, !dbg !7386
  %bf.lshr169 = lshr i8 %bf.load168, 1, !dbg !7386
  %bf.clear170 = and i8 %bf.lshr169, 1, !dbg !7386
  %bf.cast171 = zext i8 %bf.clear170 to i32, !dbg !7386
  %87 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7387
  %may_have_pointers172 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %87, i32 0, i32 1, !dbg !7388
  %88 = trunc i32 %bf.cast171 to i8, !dbg !7389
  %bf.load173 = load i8, i8* %may_have_pointers172, align 4, !dbg !7389
  %bf.value174 = and i8 %88, 1, !dbg !7389
  %bf.shl175 = shl i8 %bf.value174, 6, !dbg !7389
  %bf.clear176 = and i8 %bf.load173, -65, !dbg !7389
  %bf.set177 = or i8 %bf.clear176, %bf.shl175, !dbg !7389
  store i8 %bf.set177, i8* %may_have_pointers172, align 4, !dbg !7389
  %bf.result.cast178 = zext i8 %bf.value174 to i32, !dbg !7389
  %89 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7390
  %is_global_var179 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %89, i32 0, i32 1, !dbg !7392
  %bf.load180 = load i8, i8* %is_global_var179, align 4, !dbg !7392
  %bf.lshr181 = lshr i8 %bf.load180, 7, !dbg !7392
  %bf.cast182 = zext i8 %bf.lshr181 to i32, !dbg !7392
  %tobool183 = icmp ne i32 %bf.cast182, 0, !dbg !7390
  br i1 %tobool183, label %land.lhs.true184, label %if.end203, !dbg !7393

land.lhs.true184:                                 ; preds = %if.end162
  %90 = load i32, i32* @flag_whole_program, align 4, !dbg !7394
  %tobool185 = icmp ne i32 %90, 0, !dbg !7394
  br i1 %tobool185, label %lor.lhs.false186, label %land.lhs.true188, !dbg !7395

lor.lhs.false186:                                 ; preds = %land.lhs.true184
  %91 = load i32, i32* @in_ipa_mode, align 4, !dbg !7396
  %tobool187 = icmp ne i32 %91, 0, !dbg !7396
  br i1 %tobool187, label %if.end203, label %land.lhs.true188, !dbg !7397

land.lhs.true188:                                 ; preds = %lor.lhs.false186, %land.lhs.true184
  %92 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7398
  %may_have_pointers189 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %92, i32 0, i32 1, !dbg !7399
  %bf.load190 = load i8, i8* %may_have_pointers189, align 4, !dbg !7399
  %bf.lshr191 = lshr i8 %bf.load190, 6, !dbg !7399
  %bf.clear192 = and i8 %bf.lshr191, 1, !dbg !7399
  %bf.cast193 = zext i8 %bf.clear192 to i32, !dbg !7399
  %tobool194 = icmp ne i32 %bf.cast193, 0, !dbg !7398
  br i1 %tobool194, label %if.then195, label %if.end203, !dbg !7400

if.then195:                                       ; preds = %land.lhs.true188
  %93 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7401
  %only_restrict_pointers = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %93, i32 0, i32 2, !dbg !7404
  %bf.load196 = load i8, i8* %only_restrict_pointers, align 8, !dbg !7404
  %bf.lshr197 = lshr i8 %bf.load196, 2, !dbg !7404
  %bf.clear198 = and i8 %bf.lshr197, 1, !dbg !7404
  %bf.cast199 = zext i8 %bf.clear198 to i32, !dbg !7404
  %tobool200 = icmp ne i32 %bf.cast199, 0, !dbg !7401
  br i1 %tobool200, label %if.then201, label %if.end202, !dbg !7405

if.then201:                                       ; preds = %if.then195
  %94 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7406
  call void @make_constraint_from_restrict(%struct.variable_info* %94, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.58, i64 0, i64 0)), !dbg !7407
  br label %if.end202, !dbg !7407

if.end202:                                        ; preds = %if.then201, %if.then195
  br label %if.end203, !dbg !7408

if.end203:                                        ; preds = %if.end202, %land.lhs.true188, %lor.lhs.false186, %if.end162
  %95 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7409
  %tobool204 = icmp ne %struct.VEC_fieldoff_s_heap* %95, null, !dbg !7409
  br i1 %tobool204, label %cond.true205, label %cond.false207, !dbg !7409

cond.true205:                                     ; preds = %if.end203
  %96 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7409
  %base206 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %96, i32 0, i32 0, !dbg !7409
  br label %cond.end208, !dbg !7409

cond.false207:                                    ; preds = %if.end203
  br label %cond.end208, !dbg !7409

cond.end208:                                      ; preds = %cond.false207, %cond.true205
  %cond209 = phi %struct.VEC_fieldoff_s_base* [ %base206, %cond.true205 ], [ null, %cond.false207 ], !dbg !7409
  %call210 = call i32 @VEC_fieldoff_s_base_length(%struct.VEC_fieldoff_s_base* %cond209), !dbg !7409
  %sub = sub i32 %call210, 1, !dbg !7411
  store i32 %sub, i32* %i, align 4, !dbg !7412
  br label %for.cond211, !dbg !7413

for.cond211:                                      ; preds = %for.inc291, %cond.end208
  %97 = load i32, i32* %i, align 4, !dbg !7414
  %cmp212 = icmp uge i32 %97, 1, !dbg !7416
  br i1 %cmp212, label %land.rhs214, label %land.end223, !dbg !7417

land.rhs214:                                      ; preds = %for.cond211
  %98 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7418
  %tobool215 = icmp ne %struct.VEC_fieldoff_s_heap* %98, null, !dbg !7418
  br i1 %tobool215, label %cond.true216, label %cond.false218, !dbg !7418

cond.true216:                                     ; preds = %land.rhs214
  %99 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack, align 8, !dbg !7418
  %base217 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %99, i32 0, i32 0, !dbg !7418
  br label %cond.end219, !dbg !7418

cond.false218:                                    ; preds = %land.rhs214
  br label %cond.end219, !dbg !7418

cond.end219:                                      ; preds = %cond.false218, %cond.true216
  %cond220 = phi %struct.VEC_fieldoff_s_base* [ %base217, %cond.true216 ], [ null, %cond.false218 ], !dbg !7418
  %100 = load i32, i32* %i, align 4, !dbg !7418
  %call221 = call i32 @VEC_fieldoff_s_base_iterate(%struct.VEC_fieldoff_s_base* %cond220, i32 %100, %struct.fieldoff** %fo), !dbg !7418
  %tobool222 = icmp ne i32 %call221, 0, !dbg !7417
  br label %land.end223

land.end223:                                      ; preds = %cond.end219, %for.cond211
  %101 = phi i1 [ false, %for.cond211 ], [ %tobool222, %cond.end219 ], !dbg !7419
  br i1 %101, label %for.body224, label %for.end292, !dbg !7420

for.body224:                                      ; preds = %land.end223
  call void @llvm.dbg.declare(metadata %struct.variable_info** %newvi, metadata !7421, metadata !DIExpression()), !dbg !7423
  call void @llvm.dbg.declare(metadata i8** %newname, metadata !7424, metadata !DIExpression()), !dbg !7425
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i64 0, i64 0), i8** %newname, align 8, !dbg !7425
  call void @llvm.dbg.declare(metadata i8** %tempname, metadata !7426, metadata !DIExpression()), !dbg !7427
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7428
  %tobool225 = icmp ne %struct._IO_FILE* %102, null, !dbg !7428
  br i1 %tobool225, label %if.then226, label %if.end232, !dbg !7430

if.then226:                                       ; preds = %for.body224
  %103 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7431
  %name227 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %103, i32 0, i32 6, !dbg !7433
  %104 = load i8*, i8** %name227, align 8, !dbg !7433
  %105 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7434
  %offset228 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %105, i32 0, i32 0, !dbg !7435
  %106 = load i64, i64* %offset228, align 8, !dbg !7435
  %107 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7436
  %size229 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %107, i32 0, i32 1, !dbg !7437
  %108 = load i64, i64* %size229, align 8, !dbg !7437
  %call230 = call i32 (i8**, i8*, ...) @asprintf(i8** %tempname, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.59, i64 0, i64 0), i8* %104, i64 %106, i64 %108), !dbg !7438
  %109 = load i8*, i8** %tempname, align 8, !dbg !7439
  %call231 = call i8* @ggc_alloc_string(i8* %109, i32 -1), !dbg !7439
  store i8* %call231, i8** %newname, align 8, !dbg !7440
  %110 = load i8*, i8** %tempname, align 8, !dbg !7441
  call void @free(i8* %110), !dbg !7442
  br label %if.end232, !dbg !7443

if.end232:                                        ; preds = %if.then226, %for.body224
  %111 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7444
  %112 = load i8*, i8** %newname, align 8, !dbg !7445
  %call233 = call %struct.variable_info* @new_var_info(%union.tree_node* %111, i8* %112), !dbg !7446
  store %struct.variable_info* %call233, %struct.variable_info** %newvi, align 8, !dbg !7447
  %113 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7448
  %offset234 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %113, i32 0, i32 0, !dbg !7449
  %114 = load i64, i64* %offset234, align 8, !dbg !7449
  %115 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7450
  %offset235 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %115, i32 0, i32 3, !dbg !7451
  store i64 %114, i64* %offset235, align 8, !dbg !7452
  %116 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7453
  %size236 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %116, i32 0, i32 1, !dbg !7454
  %117 = load i64, i64* %size236, align 8, !dbg !7454
  %118 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7455
  %size237 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %118, i32 0, i32 4, !dbg !7456
  store i64 %117, i64* %size237, align 8, !dbg !7457
  %119 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7458
  %fullsize238 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %119, i32 0, i32 5, !dbg !7459
  %120 = load i64, i64* %fullsize238, align 8, !dbg !7459
  %121 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7460
  %fullsize239 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %121, i32 0, i32 5, !dbg !7461
  store i64 %120, i64* %fullsize239, align 8, !dbg !7462
  %122 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7463
  %may_have_pointers240 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %122, i32 0, i32 2, !dbg !7464
  %bf.load241 = load i8, i8* %may_have_pointers240, align 8, !dbg !7464
  %bf.lshr242 = lshr i8 %bf.load241, 1, !dbg !7464
  %bf.clear243 = and i8 %bf.lshr242, 1, !dbg !7464
  %bf.cast244 = zext i8 %bf.clear243 to i32, !dbg !7464
  %123 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7465
  %may_have_pointers245 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %123, i32 0, i32 1, !dbg !7466
  %124 = trunc i32 %bf.cast244 to i8, !dbg !7467
  %bf.load246 = load i8, i8* %may_have_pointers245, align 4, !dbg !7467
  %bf.value247 = and i8 %124, 1, !dbg !7467
  %bf.shl248 = shl i8 %bf.value247, 6, !dbg !7467
  %bf.clear249 = and i8 %bf.load246, -65, !dbg !7467
  %bf.set250 = or i8 %bf.clear249, %bf.shl248, !dbg !7467
  store i8 %bf.set250, i8* %may_have_pointers245, align 4, !dbg !7467
  %bf.result.cast251 = zext i8 %bf.value247 to i32, !dbg !7467
  %125 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7468
  %126 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7469
  call void @insert_into_field_list(%struct.variable_info* %125, %struct.variable_info* %126), !dbg !7470
  %127 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7471
  %is_global_var252 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %127, i32 0, i32 1, !dbg !7473
  %bf.load253 = load i8, i8* %is_global_var252, align 4, !dbg !7473
  %bf.lshr254 = lshr i8 %bf.load253, 7, !dbg !7473
  %bf.cast255 = zext i8 %bf.lshr254 to i32, !dbg !7473
  %tobool256 = icmp ne i32 %bf.cast255, 0, !dbg !7471
  br i1 %tobool256, label %land.lhs.true264, label %lor.lhs.false257, !dbg !7474

lor.lhs.false257:                                 ; preds = %if.end232
  %128 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7475
  %base258 = bitcast %union.tree_node* %128 to %struct.tree_base*, !dbg !7475
  %129 = bitcast %struct.tree_base* %base258 to i64*, !dbg !7475
  %bf.load259 = load i64, i64* %129, align 8, !dbg !7475
  %bf.clear260 = and i64 %bf.load259, 65535, !dbg !7475
  %bf.cast261 = trunc i64 %bf.clear260 to i32, !dbg !7475
  %cmp262 = icmp eq i32 %bf.cast261, 34, !dbg !7476
  br i1 %cmp262, label %land.lhs.true264, label %if.end289, !dbg !7477

land.lhs.true264:                                 ; preds = %lor.lhs.false257, %if.end232
  %130 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7478
  %may_have_pointers265 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %130, i32 0, i32 1, !dbg !7479
  %bf.load266 = load i8, i8* %may_have_pointers265, align 4, !dbg !7479
  %bf.lshr267 = lshr i8 %bf.load266, 6, !dbg !7479
  %bf.clear268 = and i8 %bf.lshr267, 1, !dbg !7479
  %bf.cast269 = zext i8 %bf.clear268 to i32, !dbg !7479
  %tobool270 = icmp ne i32 %bf.cast269, 0, !dbg !7478
  br i1 %tobool270, label %if.then271, label %if.end289, !dbg !7480

if.then271:                                       ; preds = %land.lhs.true264
  %131 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7481
  %only_restrict_pointers272 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %131, i32 0, i32 2, !dbg !7484
  %bf.load273 = load i8, i8* %only_restrict_pointers272, align 8, !dbg !7484
  %bf.lshr274 = lshr i8 %bf.load273, 2, !dbg !7484
  %bf.clear275 = and i8 %bf.lshr274, 1, !dbg !7484
  %bf.cast276 = zext i8 %bf.clear275 to i32, !dbg !7484
  %tobool277 = icmp ne i32 %bf.cast276, 0, !dbg !7481
  br i1 %tobool277, label %if.then278, label %if.end279, !dbg !7485

if.then278:                                       ; preds = %if.then271
  %132 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7486
  call void @make_constraint_from_restrict(%struct.variable_info* %132, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.58, i64 0, i64 0)), !dbg !7487
  br label %if.end279, !dbg !7487

if.end279:                                        ; preds = %if.then278, %if.then271
  %133 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7488
  %is_global_var280 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %133, i32 0, i32 1, !dbg !7490
  %bf.load281 = load i8, i8* %is_global_var280, align 4, !dbg !7490
  %bf.lshr282 = lshr i8 %bf.load281, 7, !dbg !7490
  %bf.cast283 = zext i8 %bf.lshr282 to i32, !dbg !7490
  %tobool284 = icmp ne i32 %bf.cast283, 0, !dbg !7488
  br i1 %tobool284, label %land.lhs.true285, label %if.end288, !dbg !7491

land.lhs.true285:                                 ; preds = %if.end279
  %134 = load i32, i32* @in_ipa_mode, align 4, !dbg !7492
  %tobool286 = icmp ne i32 %134, 0, !dbg !7492
  br i1 %tobool286, label %if.end288, label %if.then287, !dbg !7493

if.then287:                                       ; preds = %land.lhs.true285
  %135 = load %struct.variable_info*, %struct.variable_info** %newvi, align 8, !dbg !7494
  call void @make_copy_constraint(%struct.variable_info* %135, i32 4), !dbg !7495
  br label %if.end288, !dbg !7495

if.end288:                                        ; preds = %if.then287, %land.lhs.true285, %if.end279
  br label %if.end289, !dbg !7496

if.end289:                                        ; preds = %if.end288, %land.lhs.true264, %lor.lhs.false257
  %136 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !7497
  %inc290 = add i32 %136, 1, !dbg !7497
  store i32 %inc290, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !7497
  br label %for.inc291, !dbg !7498

for.inc291:                                       ; preds = %if.end289
  %137 = load i32, i32* %i, align 4, !dbg !7499
  %dec = add i32 %137, -1, !dbg !7499
  store i32 %dec, i32* %i, align 4, !dbg !7499
  br label %for.cond211, !dbg !7500, !llvm.loop !7501

for.end292:                                       ; preds = %land.end223
  br label %if.end298, !dbg !7503

if.else293:                                       ; preds = %cond.end96, %cond.end86, %land.lhs.true77, %land.lhs.true70, %if.end67
  %138 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7504
  %is_full_var294 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %138, i32 0, i32 1, !dbg !7505
  %bf.load295 = load i8, i8* %is_full_var294, align 4, !dbg !7506
  %bf.clear296 = and i8 %bf.load295, -9, !dbg !7506
  %bf.set297 = or i8 %bf.clear296, 8, !dbg !7506
  store i8 %bf.set297, i8* %is_full_var294, align 4, !dbg !7506
  br label %if.end298

if.end298:                                        ; preds = %if.else293, %for.end292
  call void @VEC_fieldoff_s_heap_free(%struct.VEC_fieldoff_s_heap** %fieldstack), !dbg !7507
  %139 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !7508
  %id299 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %139, i32 0, i32 0, !dbg !7509
  %140 = load i32, i32* %id299, align 8, !dbg !7509
  store i32 %140, i32* %retval, align 4, !dbg !7510
  br label %return, !dbg !7510

return:                                           ; preds = %if.end298, %if.then152
  %141 = load i32, i32* %retval, align 4, !dbg !7511
  ret i32 %141, !dbg !7511
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @alias_get_name(%union.tree_node* %decl) #0 !dbg !7512 {
entry:
  %retval = alloca i8*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %res = alloca i8*, align 8
  %temp = alloca i8*, align 8
  %num_printed = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7515, metadata !DIExpression()), !dbg !7516
  call void @llvm.dbg.declare(metadata i8** %res, metadata !7517, metadata !DIExpression()), !dbg !7518
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7519
  %call = call i8* @get_name(%union.tree_node* %0), !dbg !7520
  store i8* %call, i8** %res, align 8, !dbg !7518
  call void @llvm.dbg.declare(metadata i8** %temp, metadata !7521, metadata !DIExpression()), !dbg !7522
  call void @llvm.dbg.declare(metadata i32* %num_printed, metadata !7523, metadata !DIExpression()), !dbg !7524
  store i32 0, i32* %num_printed, align 4, !dbg !7524
  %1 = load i8*, i8** %res, align 8, !dbg !7525
  %cmp = icmp ne i8* %1, null, !dbg !7527
  br i1 %cmp, label %if.then, label %if.end, !dbg !7528

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %res, align 8, !dbg !7529
  store i8* %2, i8** %retval, align 8, !dbg !7530
  br label %return, !dbg !7530

if.end:                                           ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i64 0, i64 0), i8** %res, align 8, !dbg !7531
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7532
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !7532
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !7534

if.then1:                                         ; preds = %if.end
  %4 = load i8*, i8** %res, align 8, !dbg !7535
  store i8* %4, i8** %retval, align 8, !dbg !7536
  br label %return, !dbg !7536

if.end2:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7537
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7537
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !7537
  %bf.load = load i64, i64* %6, align 8, !dbg !7537
  %bf.clear = and i64 %bf.load, 65535, !dbg !7537
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7537
  %cmp3 = icmp eq i32 %bf.cast, 141, !dbg !7539
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !7540

if.then4:                                         ; preds = %if.end2
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7541
  %ssa_name = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !7541
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7541
  %8 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7541
  %call5 = call i8* @alias_get_name(%union.tree_node* %8), !dbg !7543
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7544
  %ssa_name6 = bitcast %union.tree_node* %9 to %struct.tree_ssa_name*, !dbg !7544
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name6, i32 0, i32 3, !dbg !7544
  %10 = load i32, i32* %version, align 8, !dbg !7544
  %call7 = call i32 (i8**, i8*, ...) @asprintf(i8** %temp, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.60, i64 0, i64 0), i8* %call5, i32 %10), !dbg !7545
  store i32 %call7, i32* %num_printed, align 4, !dbg !7546
  br label %if.end16, !dbg !7547

if.else:                                          ; preds = %if.end2
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7548
  %base8 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7548
  %12 = bitcast %struct.tree_base* %base8 to i64*, !dbg !7548
  %bf.load9 = load i64, i64* %12, align 8, !dbg !7548
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !7548
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !7548
  %idxprom = sext i32 %bf.cast11 to i64, !dbg !7548
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7548
  %13 = load i32, i32* %arrayidx, align 4, !dbg !7548
  %cmp12 = icmp eq i32 %13, 3, !dbg !7548
  br i1 %cmp12, label %if.then13, label %if.end15, !dbg !7550

if.then13:                                        ; preds = %if.else
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7551
  %decl_minimal = bitcast %union.tree_node* %14 to %struct.tree_decl_minimal*, !dbg !7551
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !7551
  %15 = load i32, i32* %uid, align 4, !dbg !7551
  %call14 = call i32 (i8**, i8*, ...) @asprintf(i8** %temp, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i64 0, i64 0), i32 %15), !dbg !7553
  store i32 %call14, i32* %num_printed, align 4, !dbg !7554
  br label %if.end15, !dbg !7555

if.end15:                                         ; preds = %if.then13, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then4
  %16 = load i32, i32* %num_printed, align 4, !dbg !7556
  %cmp17 = icmp sgt i32 %16, 0, !dbg !7558
  br i1 %cmp17, label %if.then18, label %if.end20, !dbg !7559

if.then18:                                        ; preds = %if.end16
  %17 = load i8*, i8** %temp, align 8, !dbg !7560
  %call19 = call i8* @ggc_alloc_string(i8* %17, i32 -1), !dbg !7560
  store i8* %call19, i8** %res, align 8, !dbg !7562
  %18 = load i8*, i8** %temp, align 8, !dbg !7563
  call void @free(i8* %18), !dbg !7564
  br label %if.end20, !dbg !7565

if.end20:                                         ; preds = %if.then18, %if.end16
  %19 = load i8*, i8** %res, align 8, !dbg !7566
  store i8* %19, i8** %retval, align 8, !dbg !7567
  br label %return, !dbg !7567

return:                                           ; preds = %if.end20, %if.then1, %if.then
  %20 = load i8*, i8** %retval, align 8, !dbg !7568
  ret i8* %20, !dbg !7568
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @var_can_have_subvars(%union.tree_node* %v) #0 !dbg !7569 {
entry:
  %retval = alloca i8, align 1
  %v.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %v, %union.tree_node** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %v.addr, metadata !7570, metadata !DIExpression()), !dbg !7571
  %0 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !7572
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7572
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7572
  %bf.load = load i64, i64* %1, align 8, !dbg !7572
  %bf.lshr = lshr i64 %bf.load, 19, !dbg !7572
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7572
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7572
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7572
  br i1 %tobool, label %if.then, label %if.end, !dbg !7574

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7575
  br label %return, !dbg !7575

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !7576
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7576
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7576
  %bf.load2 = load i64, i64* %3, align 8, !dbg !7576
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7576
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7576
  %idxprom = sext i32 %bf.cast4 to i64, !dbg !7576
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7576
  %4 = load i32, i32* %arrayidx, align 4, !dbg !7576
  %cmp = icmp eq i32 %4, 3, !dbg !7576
  br i1 %cmp, label %if.end6, label %if.then5, !dbg !7578

if.then5:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7579
  br label %return, !dbg !7579

if.end6:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %v.addr, align 8, !dbg !7580
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7580
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7580
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7580
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7580
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7580
  %bf.load8 = load i64, i64* %7, align 8, !dbg !7580
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !7580
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7580
  %cmp11 = icmp eq i32 %bf.cast10, 16, !dbg !7582
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !7583

if.then12:                                        ; preds = %if.end6
  store i8 1, i8* %retval, align 1, !dbg !7584
  br label %return, !dbg !7584

if.end13:                                         ; preds = %if.end6
  store i8 0, i8* %retval, align 1, !dbg !7585
  br label %return, !dbg !7585

return:                                           ; preds = %if.end13, %if.then12, %if.then5, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !7586
  ret i8 %8, !dbg !7586
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @push_fields_onto_fieldstack(%union.tree_node* %type, %struct.VEC_fieldoff_s_heap** %fieldstack, i64 %offset) #0 !dbg !7587 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %fieldstack.addr = alloca %struct.VEC_fieldoff_s_heap**, align 8
  %offset.addr = alloca i64, align 8
  %field = alloca %union.tree_node*, align 8
  %count = alloca i32, align 4
  %push = alloca i8, align 1
  %pushed = alloca i32, align 4
  %foff = alloca i64, align 8
  %pair = alloca %struct.fieldoff*, align 8
  %has_unknown_size = alloca i8, align 1
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7591, metadata !DIExpression()), !dbg !7592
  store %struct.VEC_fieldoff_s_heap** %fieldstack, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, metadata !7593, metadata !DIExpression()), !dbg !7594
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !7595, metadata !DIExpression()), !dbg !7596
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !7597, metadata !DIExpression()), !dbg !7598
  call void @llvm.dbg.declare(metadata i32* %count, metadata !7599, metadata !DIExpression()), !dbg !7600
  store i32 0, i32* %count, align 4, !dbg !7600
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7601
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7601
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7601
  %bf.load = load i64, i64* %1, align 8, !dbg !7601
  %bf.clear = and i64 %bf.load, 65535, !dbg !7601
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7601
  %cmp = icmp ne i32 %bf.cast, 16, !dbg !7603
  br i1 %cmp, label %if.then, label %if.end, !dbg !7604

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7605
  br label %return, !dbg !7605

if.end:                                           ; preds = %entry
  %2 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7606
  %3 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %2, align 8, !dbg !7606
  %tobool = icmp ne %struct.VEC_fieldoff_s_heap* %3, null, !dbg !7606
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7606

cond.true:                                        ; preds = %if.end
  %4 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7606
  %5 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %4, align 8, !dbg !7606
  %base1 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %5, i32 0, i32 0, !dbg !7606
  br label %cond.end, !dbg !7606

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7606

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_fieldoff_s_base* [ %base1, %cond.true ], [ null, %cond.false ], !dbg !7606
  %call = call i32 @VEC_fieldoff_s_base_length(%struct.VEC_fieldoff_s_base* %cond), !dbg !7606
  %conv = zext i32 %call to i64, !dbg !7606
  %6 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7608
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %6, i64 95, !dbg !7608
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !7608
  %7 = load i32, i32* %value, align 8, !dbg !7608
  %conv2 = sext i32 %7 to i64, !dbg !7608
  %cmp3 = icmp ugt i64 %conv, %conv2, !dbg !7609
  br i1 %cmp3, label %if.then5, label %if.end6, !dbg !7610

if.then5:                                         ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !7611
  br label %return, !dbg !7611

if.end6:                                          ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7612
  %type7 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !7612
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 1, !dbg !7612
  %9 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !7612
  store %union.tree_node* %9, %union.tree_node** %field, align 8, !dbg !7614
  br label %for.cond, !dbg !7615

for.cond:                                         ; preds = %for.inc, %if.end6
  %10 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7616
  %tobool8 = icmp ne %union.tree_node* %10, null, !dbg !7618
  br i1 %tobool8, label %for.body, label %for.end, !dbg !7618

for.body:                                         ; preds = %for.cond
  %11 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7619
  %base9 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7619
  %12 = bitcast %struct.tree_base* %base9 to i64*, !dbg !7619
  %bf.load10 = load i64, i64* %12, align 8, !dbg !7619
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !7619
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !7619
  %cmp13 = icmp eq i32 %bf.cast12, 31, !dbg !7621
  br i1 %cmp13, label %if.then15, label %if.end179, !dbg !7622

if.then15:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i8* %push, metadata !7623, metadata !DIExpression()), !dbg !7625
  store i8 0, i8* %push, align 1, !dbg !7625
  call void @llvm.dbg.declare(metadata i32* %pushed, metadata !7626, metadata !DIExpression()), !dbg !7627
  store i32 0, i32* %pushed, align 4, !dbg !7627
  call void @llvm.dbg.declare(metadata i64* %foff, metadata !7628, metadata !DIExpression()), !dbg !7629
  %13 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7630
  %call16 = call i64 @bitpos_of_field(%union.tree_node* %13), !dbg !7631
  store i64 %call16, i64* %foff, align 8, !dbg !7629
  %14 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7632
  %call17 = call zeroext i8 @var_can_have_subvars(%union.tree_node* %14), !dbg !7634
  %tobool18 = icmp ne i8 %call17, 0, !dbg !7634
  br i1 %tobool18, label %lor.lhs.false, label %if.then35, !dbg !7635

lor.lhs.false:                                    ; preds = %if.then15
  %15 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7636
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !7636
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7636
  %16 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !7636
  %base20 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7636
  %17 = bitcast %struct.tree_base* %base20 to i64*, !dbg !7636
  %bf.load21 = load i64, i64* %17, align 8, !dbg !7636
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !7636
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !7636
  %cmp24 = icmp eq i32 %bf.cast23, 18, !dbg !7637
  br i1 %cmp24, label %if.then35, label %lor.lhs.false26, !dbg !7638

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7639
  %common27 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !7639
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !7639
  %19 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !7639
  %base29 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !7639
  %20 = bitcast %struct.tree_base* %base29 to i64*, !dbg !7639
  %bf.load30 = load i64, i64* %20, align 8, !dbg !7639
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !7639
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !7639
  %cmp33 = icmp eq i32 %bf.cast32, 17, !dbg !7640
  br i1 %cmp33, label %if.then35, label %if.else, !dbg !7641

if.then35:                                        ; preds = %lor.lhs.false26, %lor.lhs.false, %if.then15
  store i8 1, i8* %push, align 1, !dbg !7642
  br label %if.end48, !dbg !7643

if.else:                                          ; preds = %lor.lhs.false26
  %21 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7644
  %common36 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !7644
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2, !dbg !7644
  %22 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !7644
  %23 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7646
  %24 = load i64, i64* %offset.addr, align 8, !dbg !7647
  %25 = load i64, i64* %foff, align 8, !dbg !7648
  %add = add nsw i64 %24, %25, !dbg !7649
  %call38 = call i32 @push_fields_onto_fieldstack(%union.tree_node* %22, %struct.VEC_fieldoff_s_heap** %23, i64 %add), !dbg !7650
  store i32 %call38, i32* %pushed, align 4, !dbg !7651
  %tobool39 = icmp ne i32 %call38, 0, !dbg !7651
  br i1 %tobool39, label %if.end47, label %land.lhs.true, !dbg !7652

land.lhs.true:                                    ; preds = %if.else
  %26 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7653
  %decl_common = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !7653
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !7653
  %27 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7653
  %tobool40 = icmp ne %union.tree_node* %27, null, !dbg !7653
  br i1 %tobool40, label %land.lhs.true41, label %if.end47, !dbg !7654

land.lhs.true41:                                  ; preds = %land.lhs.true
  %28 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7655
  %decl_common42 = bitcast %union.tree_node* %28 to %struct.tree_decl_common*, !dbg !7655
  %size43 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common42, i32 0, i32 1, !dbg !7655
  %29 = load %union.tree_node*, %union.tree_node** %size43, align 8, !dbg !7655
  %call44 = call i32 @integer_zerop(%union.tree_node* %29), !dbg !7656
  %tobool45 = icmp ne i32 %call44, 0, !dbg !7656
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !7657

if.then46:                                        ; preds = %land.lhs.true41
  store i8 1, i8* %push, align 1, !dbg !7658
  br label %if.end47, !dbg !7659

if.end47:                                         ; preds = %if.then46, %land.lhs.true41, %land.lhs.true, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then35
  %30 = load i8, i8* %push, align 1, !dbg !7660
  %tobool49 = icmp ne i8 %30, 0, !dbg !7660
  br i1 %tobool49, label %if.then50, label %if.else176, !dbg !7662

if.then50:                                        ; preds = %if.end48
  call void @llvm.dbg.declare(metadata %struct.fieldoff** %pair, metadata !7663, metadata !DIExpression()), !dbg !7665
  store %struct.fieldoff* null, %struct.fieldoff** %pair, align 8, !dbg !7665
  call void @llvm.dbg.declare(metadata i8* %has_unknown_size, metadata !7666, metadata !DIExpression()), !dbg !7667
  store i8 0, i8* %has_unknown_size, align 1, !dbg !7667
  %31 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7668
  %32 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %31, align 8, !dbg !7668
  %tobool51 = icmp ne %struct.VEC_fieldoff_s_heap* %32, null, !dbg !7668
  br i1 %tobool51, label %cond.true52, label %cond.false54, !dbg !7668

cond.true52:                                      ; preds = %if.then50
  %33 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7668
  %34 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %33, align 8, !dbg !7668
  %base53 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %34, i32 0, i32 0, !dbg !7668
  br label %cond.end55, !dbg !7668

cond.false54:                                     ; preds = %if.then50
  br label %cond.end55, !dbg !7668

cond.end55:                                       ; preds = %cond.false54, %cond.true52
  %cond56 = phi %struct.VEC_fieldoff_s_base* [ %base53, %cond.true52 ], [ null, %cond.false54 ], !dbg !7668
  %call57 = call i32 @VEC_fieldoff_s_base_length(%struct.VEC_fieldoff_s_base* %cond56), !dbg !7668
  %cmp58 = icmp eq i32 %call57, 0, !dbg !7668
  br i1 %cmp58, label %if.end68, label %if.then60, !dbg !7670

if.then60:                                        ; preds = %cond.end55
  %35 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7671
  %36 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %35, align 8, !dbg !7671
  %tobool61 = icmp ne %struct.VEC_fieldoff_s_heap* %36, null, !dbg !7671
  br i1 %tobool61, label %cond.true62, label %cond.false64, !dbg !7671

cond.true62:                                      ; preds = %if.then60
  %37 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7671
  %38 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %37, align 8, !dbg !7671
  %base63 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %38, i32 0, i32 0, !dbg !7671
  br label %cond.end65, !dbg !7671

cond.false64:                                     ; preds = %if.then60
  br label %cond.end65, !dbg !7671

cond.end65:                                       ; preds = %cond.false64, %cond.true62
  %cond66 = phi %struct.VEC_fieldoff_s_base* [ %base63, %cond.true62 ], [ null, %cond.false64 ], !dbg !7671
  %call67 = call %struct.fieldoff* @VEC_fieldoff_s_base_last(%struct.VEC_fieldoff_s_base* %cond66), !dbg !7671
  store %struct.fieldoff* %call67, %struct.fieldoff** %pair, align 8, !dbg !7672
  br label %if.end68, !dbg !7673

if.end68:                                         ; preds = %cond.end65, %cond.end55
  %39 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7674
  %decl_common69 = bitcast %union.tree_node* %39 to %struct.tree_decl_common*, !dbg !7674
  %size70 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common69, i32 0, i32 1, !dbg !7674
  %40 = load %union.tree_node*, %union.tree_node** %size70, align 8, !dbg !7674
  %tobool71 = icmp ne %union.tree_node* %40, null, !dbg !7674
  br i1 %tobool71, label %lor.lhs.false72, label %if.then77, !dbg !7676

lor.lhs.false72:                                  ; preds = %if.end68
  %41 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7677
  %decl_common73 = bitcast %union.tree_node* %41 to %struct.tree_decl_common*, !dbg !7677
  %size74 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common73, i32 0, i32 1, !dbg !7677
  %42 = load %union.tree_node*, %union.tree_node** %size74, align 8, !dbg !7677
  %call75 = call i32 @host_integerp(%union.tree_node* %42, i32 1), !dbg !7678
  %tobool76 = icmp ne i32 %call75, 0, !dbg !7678
  br i1 %tobool76, label %if.end78, label %if.then77, !dbg !7679

if.then77:                                        ; preds = %lor.lhs.false72, %if.end68
  store i8 1, i8* %has_unknown_size, align 1, !dbg !7680
  br label %if.end78, !dbg !7681

if.end78:                                         ; preds = %if.then77, %lor.lhs.false72
  %43 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7682
  %tobool79 = icmp ne %struct.fieldoff* %43, null, !dbg !7682
  br i1 %tobool79, label %land.lhs.true80, label %if.else116, !dbg !7684

land.lhs.true80:                                  ; preds = %if.end78
  %44 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7685
  %may_have_pointers = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %44, i32 0, i32 2, !dbg !7686
  %bf.load81 = load i8, i8* %may_have_pointers, align 8, !dbg !7686
  %bf.lshr = lshr i8 %bf.load81, 1, !dbg !7686
  %bf.clear82 = and i8 %bf.lshr, 1, !dbg !7686
  %bf.cast83 = zext i8 %bf.clear82 to i32, !dbg !7686
  %tobool84 = icmp ne i32 %bf.cast83, 0, !dbg !7685
  br i1 %tobool84, label %if.else116, label %land.lhs.true85, !dbg !7687

land.lhs.true85:                                  ; preds = %land.lhs.true80
  %45 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7688
  %call86 = call zeroext i8 @could_have_pointers(%union.tree_node* %45), !dbg !7689
  %tobool87 = icmp ne i8 %call86, 0, !dbg !7689
  br i1 %tobool87, label %if.else116, label %land.lhs.true88, !dbg !7690

land.lhs.true88:                                  ; preds = %land.lhs.true85
  %46 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7691
  %has_unknown_size89 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %46, i32 0, i32 2, !dbg !7692
  %bf.load90 = load i8, i8* %has_unknown_size89, align 8, !dbg !7692
  %bf.clear91 = and i8 %bf.load90, 1, !dbg !7692
  %bf.cast92 = zext i8 %bf.clear91 to i32, !dbg !7692
  %tobool93 = icmp ne i32 %bf.cast92, 0, !dbg !7691
  br i1 %tobool93, label %if.else116, label %land.lhs.true94, !dbg !7693

land.lhs.true94:                                  ; preds = %land.lhs.true88
  %47 = load i8, i8* %has_unknown_size, align 1, !dbg !7694
  %tobool95 = icmp ne i8 %47, 0, !dbg !7694
  br i1 %tobool95, label %if.else116, label %land.lhs.true96, !dbg !7695

land.lhs.true96:                                  ; preds = %land.lhs.true94
  %48 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7696
  %offset97 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %48, i32 0, i32 0, !dbg !7697
  %49 = load i64, i64* %offset97, align 8, !dbg !7697
  %50 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7698
  %size98 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %50, i32 0, i32 1, !dbg !7699
  %51 = load i64, i64* %size98, align 8, !dbg !7699
  %add99 = add nsw i64 %49, %51, !dbg !7700
  %52 = load i64, i64* %offset.addr, align 8, !dbg !7701
  %53 = load i64, i64* %foff, align 8, !dbg !7702
  %add100 = add nsw i64 %52, %53, !dbg !7703
  %cmp101 = icmp eq i64 %add99, %add100, !dbg !7704
  br i1 %cmp101, label %if.then103, label %if.else116, !dbg !7705

if.then103:                                       ; preds = %land.lhs.true96
  %54 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7706
  %55 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %54, align 8, !dbg !7706
  %tobool104 = icmp ne %struct.VEC_fieldoff_s_heap* %55, null, !dbg !7706
  br i1 %tobool104, label %cond.true105, label %cond.false107, !dbg !7706

cond.true105:                                     ; preds = %if.then103
  %56 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7706
  %57 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %56, align 8, !dbg !7706
  %base106 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %57, i32 0, i32 0, !dbg !7706
  br label %cond.end108, !dbg !7706

cond.false107:                                    ; preds = %if.then103
  br label %cond.end108, !dbg !7706

cond.end108:                                      ; preds = %cond.false107, %cond.true105
  %cond109 = phi %struct.VEC_fieldoff_s_base* [ %base106, %cond.true105 ], [ null, %cond.false107 ], !dbg !7706
  %call110 = call %struct.fieldoff* @VEC_fieldoff_s_base_last(%struct.VEC_fieldoff_s_base* %cond109), !dbg !7706
  store %struct.fieldoff* %call110, %struct.fieldoff** %pair, align 8, !dbg !7708
  %58 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7709
  %decl_common111 = bitcast %union.tree_node* %58 to %struct.tree_decl_common*, !dbg !7709
  %size112 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common111, i32 0, i32 1, !dbg !7709
  %59 = load %union.tree_node*, %union.tree_node** %size112, align 8, !dbg !7709
  %int_cst = bitcast %union.tree_node* %59 to %struct.tree_int_cst*, !dbg !7709
  %int_cst113 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7709
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst113, i32 0, i32 0, !dbg !7709
  %60 = load i64, i64* %low, align 8, !dbg !7709
  %61 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7710
  %size114 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %61, i32 0, i32 1, !dbg !7711
  %62 = load i64, i64* %size114, align 8, !dbg !7712
  %add115 = add i64 %62, %60, !dbg !7712
  store i64 %add115, i64* %size114, align 8, !dbg !7712
  br label %if.end175, !dbg !7713

if.else116:                                       ; preds = %land.lhs.true96, %land.lhs.true94, %land.lhs.true88, %land.lhs.true85, %land.lhs.true80, %if.end78
  %63 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %fieldstack.addr, align 8, !dbg !7714
  %call117 = call %struct.fieldoff* @VEC_fieldoff_s_heap_safe_push(%struct.VEC_fieldoff_s_heap** %63, %struct.fieldoff* null), !dbg !7714
  store %struct.fieldoff* %call117, %struct.fieldoff** %pair, align 8, !dbg !7716
  %64 = load i64, i64* %offset.addr, align 8, !dbg !7717
  %65 = load i64, i64* %foff, align 8, !dbg !7718
  %add118 = add nsw i64 %64, %65, !dbg !7719
  %66 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7720
  %offset119 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %66, i32 0, i32 0, !dbg !7721
  store i64 %add118, i64* %offset119, align 8, !dbg !7722
  %67 = load i8, i8* %has_unknown_size, align 1, !dbg !7723
  %conv120 = zext i8 %67 to i32, !dbg !7723
  %68 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7724
  %has_unknown_size121 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %68, i32 0, i32 2, !dbg !7725
  %69 = trunc i32 %conv120 to i8, !dbg !7726
  %bf.load122 = load i8, i8* %has_unknown_size121, align 8, !dbg !7726
  %bf.value = and i8 %69, 1, !dbg !7726
  %bf.clear123 = and i8 %bf.load122, -2, !dbg !7726
  %bf.set = or i8 %bf.clear123, %bf.value, !dbg !7726
  store i8 %bf.set, i8* %has_unknown_size121, align 8, !dbg !7726
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !7726
  %70 = load i8, i8* %has_unknown_size, align 1, !dbg !7727
  %tobool124 = icmp ne i8 %70, 0, !dbg !7727
  br i1 %tobool124, label %if.else132, label %if.then125, !dbg !7729

if.then125:                                       ; preds = %if.else116
  %71 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7730
  %decl_common126 = bitcast %union.tree_node* %71 to %struct.tree_decl_common*, !dbg !7730
  %size127 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common126, i32 0, i32 1, !dbg !7730
  %72 = load %union.tree_node*, %union.tree_node** %size127, align 8, !dbg !7730
  %int_cst128 = bitcast %union.tree_node* %72 to %struct.tree_int_cst*, !dbg !7730
  %int_cst129 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst128, i32 0, i32 1, !dbg !7730
  %low130 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst129, i32 0, i32 0, !dbg !7730
  %73 = load i64, i64* %low130, align 8, !dbg !7730
  %74 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7731
  %size131 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %74, i32 0, i32 1, !dbg !7732
  store i64 %73, i64* %size131, align 8, !dbg !7733
  br label %if.end134, !dbg !7731

if.else132:                                       ; preds = %if.else116
  %75 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7734
  %size133 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %75, i32 0, i32 1, !dbg !7735
  store i64 -1, i64* %size133, align 8, !dbg !7736
  br label %if.end134

if.end134:                                        ; preds = %if.else132, %if.then125
  %76 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7737
  %call135 = call zeroext i8 @could_have_pointers(%union.tree_node* %76), !dbg !7738
  %conv136 = zext i8 %call135 to i32, !dbg !7738
  %77 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7739
  %may_have_pointers137 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %77, i32 0, i32 2, !dbg !7740
  %78 = trunc i32 %conv136 to i8, !dbg !7741
  %bf.load138 = load i8, i8* %may_have_pointers137, align 8, !dbg !7741
  %bf.value139 = and i8 %78, 1, !dbg !7741
  %bf.shl = shl i8 %bf.value139, 1, !dbg !7741
  %bf.clear140 = and i8 %bf.load138, -3, !dbg !7741
  %bf.set141 = or i8 %bf.clear140, %bf.shl, !dbg !7741
  store i8 %bf.set141, i8* %may_have_pointers137, align 8, !dbg !7741
  %bf.result.cast142 = zext i8 %bf.value139 to i32, !dbg !7741
  %79 = load i8, i8* %has_unknown_size, align 1, !dbg !7742
  %tobool143 = icmp ne i8 %79, 0, !dbg !7742
  br i1 %tobool143, label %land.end, label %land.lhs.true144, !dbg !7743

land.lhs.true144:                                 ; preds = %if.end134
  %80 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7744
  %common145 = bitcast %union.tree_node* %80 to %struct.tree_common*, !dbg !7744
  %type146 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common145, i32 0, i32 2, !dbg !7744
  %81 = load %union.tree_node*, %union.tree_node** %type146, align 8, !dbg !7744
  %base147 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !7744
  %82 = bitcast %struct.tree_base* %base147 to i64*, !dbg !7744
  %bf.load148 = load i64, i64* %82, align 8, !dbg !7744
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !7744
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !7744
  %cmp151 = icmp eq i32 %bf.cast150, 10, !dbg !7744
  br i1 %cmp151, label %land.rhs, label %lor.lhs.false153, !dbg !7744

lor.lhs.false153:                                 ; preds = %land.lhs.true144
  %83 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7744
  %common154 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !7744
  %type155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 2, !dbg !7744
  %84 = load %union.tree_node*, %union.tree_node** %type155, align 8, !dbg !7744
  %base156 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !7744
  %85 = bitcast %struct.tree_base* %base156 to i64*, !dbg !7744
  %bf.load157 = load i64, i64* %85, align 8, !dbg !7744
  %bf.clear158 = and i64 %bf.load157, 65535, !dbg !7744
  %bf.cast159 = trunc i64 %bf.clear158 to i32, !dbg !7744
  %cmp160 = icmp eq i32 %bf.cast159, 12, !dbg !7744
  br i1 %cmp160, label %land.rhs, label %land.end, !dbg !7745

land.rhs:                                         ; preds = %lor.lhs.false153, %land.lhs.true144
  %86 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7746
  %common162 = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !7746
  %type163 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common162, i32 0, i32 2, !dbg !7746
  %87 = load %union.tree_node*, %union.tree_node** %type163, align 8, !dbg !7746
  %type164 = bitcast %union.tree_node* %87 to %struct.tree_type*, !dbg !7746
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type164, i32 0, i32 6, !dbg !7746
  %bf.load165 = load i32, i32* %restrict_flag, align 4, !dbg !7746
  %bf.lshr166 = lshr i32 %bf.load165, 13, !dbg !7746
  %bf.clear167 = and i32 %bf.lshr166, 1, !dbg !7746
  %tobool168 = icmp ne i32 %bf.clear167, 0, !dbg !7745
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false153, %if.end134
  %88 = phi i1 [ false, %lor.lhs.false153 ], [ false, %if.end134 ], [ %tobool168, %land.rhs ], !dbg !7747
  %land.ext = zext i1 %88 to i32, !dbg !7745
  %89 = load %struct.fieldoff*, %struct.fieldoff** %pair, align 8, !dbg !7748
  %only_restrict_pointers = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %89, i32 0, i32 2, !dbg !7749
  %90 = trunc i32 %land.ext to i8, !dbg !7750
  %bf.load169 = load i8, i8* %only_restrict_pointers, align 8, !dbg !7750
  %bf.value170 = and i8 %90, 1, !dbg !7750
  %bf.shl171 = shl i8 %bf.value170, 2, !dbg !7750
  %bf.clear172 = and i8 %bf.load169, -5, !dbg !7750
  %bf.set173 = or i8 %bf.clear172, %bf.shl171, !dbg !7750
  store i8 %bf.set173, i8* %only_restrict_pointers, align 8, !dbg !7750
  %bf.result.cast174 = zext i8 %bf.value170 to i32, !dbg !7750
  %91 = load i32, i32* %count, align 4, !dbg !7751
  %inc = add nsw i32 %91, 1, !dbg !7751
  store i32 %inc, i32* %count, align 4, !dbg !7751
  br label %if.end175

if.end175:                                        ; preds = %land.end, %cond.end108
  br label %if.end178, !dbg !7752

if.else176:                                       ; preds = %if.end48
  %92 = load i32, i32* %pushed, align 4, !dbg !7753
  %93 = load i32, i32* %count, align 4, !dbg !7754
  %add177 = add nsw i32 %93, %92, !dbg !7754
  store i32 %add177, i32* %count, align 4, !dbg !7754
  br label %if.end178

if.end178:                                        ; preds = %if.else176, %if.end175
  br label %if.end179, !dbg !7755

if.end179:                                        ; preds = %if.end178, %for.body
  br label %for.inc, !dbg !7756

for.inc:                                          ; preds = %if.end179
  %94 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7757
  %common180 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !7757
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common180, i32 0, i32 1, !dbg !7757
  %95 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7757
  store %union.tree_node* %95, %union.tree_node** %field, align 8, !dbg !7758
  br label %for.cond, !dbg !7759, !llvm.loop !7760

for.end:                                          ; preds = %for.cond
  %96 = load i32, i32* %count, align 4, !dbg !7762
  store i32 %96, i32* %retval, align 4, !dbg !7763
  br label %return, !dbg !7763

return:                                           ; preds = %for.end, %if.then5, %if.then
  %97 = load i32, i32* %retval, align 4, !dbg !7764
  ret i32 %97, !dbg !7764
}

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_vi_for_tree(%union.tree_node* %t, %struct.variable_info* %vi) #0 !dbg !7765 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %vi.addr = alloca %struct.variable_info*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7768, metadata !DIExpression()), !dbg !7769
  store %struct.variable_info* %vi, %struct.variable_info** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi.addr, metadata !7770, metadata !DIExpression()), !dbg !7771
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !7772, metadata !DIExpression()), !dbg !7773
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @vi_for_tree, align 8, !dbg !7774
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7775
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !7775
  %call = call i8** @pointer_map_insert(%struct.pointer_map_t* %0, i8* %2), !dbg !7776
  store i8** %call, i8*** %slot, align 8, !dbg !7773
  %3 = load %struct.variable_info*, %struct.variable_info** %vi.addr, align 8, !dbg !7777
  %tobool = icmp ne %struct.variable_info* %3, null, !dbg !7777
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7777

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2603, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7777
  br label %cond.end, !dbg !7777

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7777

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7777
  %4 = load i8**, i8*** %slot, align 8, !dbg !7778
  %5 = load i8*, i8** %4, align 8, !dbg !7778
  %cmp = icmp eq i8* %5, null, !dbg !7778
  br i1 %cmp, label %cond.false2, label %cond.true1, !dbg !7778

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2604, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7778
  br label %cond.end3, !dbg !7778

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !7778

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !7778
  %6 = load %struct.variable_info*, %struct.variable_info** %vi.addr, align 8, !dbg !7779
  %7 = bitcast %struct.variable_info* %6 to i8*, !dbg !7779
  %8 = load i8**, i8*** %slot, align 8, !dbg !7780
  store i8* %7, i8** %8, align 8, !dbg !7781
  ret void, !dbg !7782
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_copy_constraint(%struct.variable_info* %vi, i32 %from) #0 !dbg !7783 {
entry:
  %vi.addr = alloca %struct.variable_info*, align 8
  %from.addr = alloca i32, align 4
  %lhs = alloca %struct.constraint_expr, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  store %struct.variable_info* %vi, %struct.variable_info** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi.addr, metadata !7784, metadata !DIExpression()), !dbg !7785
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !7786, metadata !DIExpression()), !dbg !7787
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !7788, metadata !DIExpression()), !dbg !7789
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !7790, metadata !DIExpression()), !dbg !7791
  %0 = load %struct.variable_info*, %struct.variable_info** %vi.addr, align 8, !dbg !7792
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %0, i32 0, i32 0, !dbg !7793
  %1 = load i32, i32* %id, align 8, !dbg !7793
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !7794
  store i32 %1, i32* %var, align 4, !dbg !7795
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !7796
  store i64 0, i64* %offset, align 8, !dbg !7797
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !7798
  store i32 0, i32* %type, align 8, !dbg !7799
  %2 = load i32, i32* %from.addr, align 4, !dbg !7800
  %var1 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !7801
  store i32 %2, i32* %var1, align 4, !dbg !7802
  %offset2 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !7803
  store i64 0, i64* %offset2, align 8, !dbg !7804
  %type3 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !7805
  store i32 0, i32* %type3, align 8, !dbg !7806
  %3 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !7807
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !7807
  %5 = load i64, i64* %4, align 8, !dbg !7807
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !7807
  %7 = load i64, i64* %6, align 8, !dbg !7807
  %8 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !7807
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !7807
  %10 = load i64, i64* %9, align 8, !dbg !7807
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !7807
  %12 = load i64, i64* %11, align 8, !dbg !7807
  %call = call %struct.constraint* @new_constraint(i64 %5, i64 %7, i64 %10, i64 %12), !dbg !7807
  call void @process_constraint(%struct.constraint* %call), !dbg !7808
  ret void, !dbg !7809
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_fieldoff_s_base_length(%struct.VEC_fieldoff_s_base* %vec_) #0 !dbg !7810 {
entry:
  %vec_.addr = alloca %struct.VEC_fieldoff_s_base*, align 8
  store %struct.VEC_fieldoff_s_base* %vec_, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_base** %vec_.addr, metadata !7815, metadata !DIExpression()), !dbg !7816
  %0 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7816
  %tobool = icmp ne %struct.VEC_fieldoff_s_base* %0, null, !dbg !7816
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7816

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7816
  %num = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %1, i32 0, i32 0, !dbg !7816
  %2 = load i32, i32* %num, align 8, !dbg !7816
  br label %cond.end, !dbg !7816

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7816

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7816
  ret i32 %cond, !dbg !7816
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_fieldoff_s_base_iterate(%struct.VEC_fieldoff_s_base* %vec_, i32 %ix_, %struct.fieldoff** %ptr) #0 !dbg !7817 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_fieldoff_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.fieldoff**, align 8
  store %struct.VEC_fieldoff_s_base* %vec_, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_base** %vec_.addr, metadata !7822, metadata !DIExpression()), !dbg !7823
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7824, metadata !DIExpression()), !dbg !7823
  store %struct.fieldoff** %ptr, %struct.fieldoff*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fieldoff*** %ptr.addr, metadata !7825, metadata !DIExpression()), !dbg !7823
  %0 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7826
  %tobool = icmp ne %struct.VEC_fieldoff_s_base* %0, null, !dbg !7826
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7826

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7826
  %2 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7826
  %num = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %2, i32 0, i32 0, !dbg !7826
  %3 = load i32, i32* %num, align 8, !dbg !7826
  %cmp = icmp ult i32 %1, %3, !dbg !7826
  br i1 %cmp, label %if.then, label %if.else, !dbg !7823

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7828
  %vec = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %4, i32 0, i32 2, !dbg !7828
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7828
  %idxprom = zext i32 %5 to i64, !dbg !7828
  %arrayidx = getelementptr inbounds [1 x %struct.fieldoff], [1 x %struct.fieldoff]* %vec, i64 0, i64 %idxprom, !dbg !7828
  %6 = load %struct.fieldoff**, %struct.fieldoff*** %ptr.addr, align 8, !dbg !7828
  store %struct.fieldoff* %arrayidx, %struct.fieldoff** %6, align 8, !dbg !7828
  store i32 1, i32* %retval, align 4, !dbg !7828
  br label %return, !dbg !7828

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.fieldoff**, %struct.fieldoff*** %ptr.addr, align 8, !dbg !7830
  store %struct.fieldoff* null, %struct.fieldoff** %7, align 8, !dbg !7830
  store i32 0, i32* %retval, align 4, !dbg !7830
  br label %return, !dbg !7830

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !7823
  ret i32 %8, !dbg !7823
}

; Function Attrs: noinline nounwind uwtable
define internal void @sort_fieldstack(%struct.VEC_fieldoff_s_heap* %fieldstack) #0 !dbg !7832 {
entry:
  %fieldstack.addr = alloca %struct.VEC_fieldoff_s_heap*, align 8
  store %struct.VEC_fieldoff_s_heap* %fieldstack, %struct.VEC_fieldoff_s_heap** %fieldstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_heap** %fieldstack.addr, metadata !7835, metadata !DIExpression()), !dbg !7836
  %0 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack.addr, align 8, !dbg !7837
  %tobool = icmp ne %struct.VEC_fieldoff_s_heap* %0, null, !dbg !7837
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7837

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack.addr, align 8, !dbg !7837
  %base = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %1, i32 0, i32 0, !dbg !7837
  br label %cond.end, !dbg !7837

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7837

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_fieldoff_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7837
  %call = call %struct.fieldoff* @VEC_fieldoff_s_base_address(%struct.VEC_fieldoff_s_base* %cond), !dbg !7837
  %2 = bitcast %struct.fieldoff* %call to i8*, !dbg !7837
  %3 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack.addr, align 8, !dbg !7838
  %tobool1 = icmp ne %struct.VEC_fieldoff_s_heap* %3, null, !dbg !7838
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7838

cond.true2:                                       ; preds = %cond.end
  %4 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack.addr, align 8, !dbg !7838
  %base3 = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %4, i32 0, i32 0, !dbg !7838
  br label %cond.end5, !dbg !7838

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7838

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_fieldoff_s_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7838
  %call7 = call i32 @VEC_fieldoff_s_base_length(%struct.VEC_fieldoff_s_base* %cond6), !dbg !7838
  %conv = zext i32 %call7 to i64, !dbg !7838
  call void @spec_qsort(i8* %2, i64 %conv, i64 24, i32 (i8*, i8*)* @fieldoff_compare), !dbg !7839
  ret void, !dbg !7840
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @check_for_overlaps(%struct.VEC_fieldoff_s_heap* %fieldstack) #0 !dbg !7841 {
entry:
  %retval = alloca i8, align 1
  %fieldstack.addr = alloca %struct.VEC_fieldoff_s_heap*, align 8
  %fo = alloca %struct.fieldoff*, align 8
  %i = alloca i32, align 4
  %lastoffset = alloca i64, align 8
  store %struct.VEC_fieldoff_s_heap* %fieldstack, %struct.VEC_fieldoff_s_heap** %fieldstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_heap** %fieldstack.addr, metadata !7844, metadata !DIExpression()), !dbg !7845
  call void @llvm.dbg.declare(metadata %struct.fieldoff** %fo, metadata !7846, metadata !DIExpression()), !dbg !7847
  store %struct.fieldoff* null, %struct.fieldoff** %fo, align 8, !dbg !7847
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7848, metadata !DIExpression()), !dbg !7849
  call void @llvm.dbg.declare(metadata i64* %lastoffset, metadata !7850, metadata !DIExpression()), !dbg !7851
  store i64 -1, i64* %lastoffset, align 8, !dbg !7851
  store i32 0, i32* %i, align 4, !dbg !7852
  br label %for.cond, !dbg !7854

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack.addr, align 8, !dbg !7855
  %tobool = icmp ne %struct.VEC_fieldoff_s_heap* %0, null, !dbg !7855
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7855

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %fieldstack.addr, align 8, !dbg !7855
  %base = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %1, i32 0, i32 0, !dbg !7855
  br label %cond.end, !dbg !7855

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7855

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_fieldoff_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7855
  %2 = load i32, i32* %i, align 4, !dbg !7855
  %call = call i32 @VEC_fieldoff_s_base_iterate(%struct.VEC_fieldoff_s_base* %cond, i32 %2, %struct.fieldoff** %fo), !dbg !7855
  %tobool1 = icmp ne i32 %call, 0, !dbg !7857
  br i1 %tobool1, label %for.body, label %for.end, !dbg !7857

for.body:                                         ; preds = %cond.end
  %3 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7858
  %offset = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %3, i32 0, i32 0, !dbg !7861
  %4 = load i64, i64* %offset, align 8, !dbg !7861
  %5 = load i64, i64* %lastoffset, align 8, !dbg !7862
  %cmp = icmp eq i64 %4, %5, !dbg !7863
  br i1 %cmp, label %if.then, label %if.end, !dbg !7864

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !7865
  br label %return, !dbg !7865

if.end:                                           ; preds = %for.body
  %6 = load %struct.fieldoff*, %struct.fieldoff** %fo, align 8, !dbg !7866
  %offset2 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %6, i32 0, i32 0, !dbg !7867
  %7 = load i64, i64* %offset2, align 8, !dbg !7867
  store i64 %7, i64* %lastoffset, align 8, !dbg !7868
  br label %for.inc, !dbg !7869

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4, !dbg !7870
  %inc = add i32 %8, 1, !dbg !7870
  store i32 %inc, i32* %i, align 4, !dbg !7870
  br label %for.cond, !dbg !7871, !llvm.loop !7872

for.end:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !7874
  br label %return, !dbg !7874

return:                                           ; preds = %for.end, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !7875
  ret i8 %9, !dbg !7875
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.fieldoff* @VEC_fieldoff_s_base_index(%struct.VEC_fieldoff_s_base* %vec_, i32 %ix_) #0 !dbg !7876 {
entry:
  %vec_.addr = alloca %struct.VEC_fieldoff_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_fieldoff_s_base* %vec_, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_base** %vec_.addr, metadata !7879, metadata !DIExpression()), !dbg !7880
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7881, metadata !DIExpression()), !dbg !7880
  %0 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7880
  %tobool = icmp ne %struct.VEC_fieldoff_s_base* %0, null, !dbg !7880
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7880

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7880
  %2 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7880
  %num = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %2, i32 0, i32 0, !dbg !7880
  %3 = load i32, i32* %num, align 8, !dbg !7880
  %cmp = icmp ult i32 %1, %3, !dbg !7880
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7882
  %land.ext = zext i1 %4 to i32, !dbg !7880
  %5 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7880
  %vec = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %5, i32 0, i32 2, !dbg !7880
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7880
  %idxprom = zext i32 %6 to i64, !dbg !7880
  %arrayidx = getelementptr inbounds [1 x %struct.fieldoff], [1 x %struct.fieldoff]* %vec, i64 0, i64 %idxprom, !dbg !7880
  ret %struct.fieldoff* %arrayidx, !dbg !7880
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_fieldoff_s_heap_free(%struct.VEC_fieldoff_s_heap** %vec_) #0 !dbg !7883 {
entry:
  %vec_.addr = alloca %struct.VEC_fieldoff_s_heap**, align 8
  store %struct.VEC_fieldoff_s_heap** %vec_, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_heap*** %vec_.addr, metadata !7886, metadata !DIExpression()), !dbg !7887
  %0 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7888
  %1 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %0, align 8, !dbg !7888
  %tobool = icmp ne %struct.VEC_fieldoff_s_heap* %1, null, !dbg !7888
  br i1 %tobool, label %if.then, label %if.end, !dbg !7887

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7888
  %3 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %2, align 8, !dbg !7888
  %4 = bitcast %struct.VEC_fieldoff_s_heap* %3 to i8*, !dbg !7888
  call void @free(i8* %4), !dbg !7888
  br label %if.end, !dbg !7888

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7887
  store %struct.VEC_fieldoff_s_heap* null, %struct.VEC_fieldoff_s_heap** %5, align 8, !dbg !7887
  ret void, !dbg !7887
}

declare dso_local i32 @asprintf(i8**, i8*, ...) #2

declare dso_local i8* @ggc_alloc_string(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_into_field_list(%struct.variable_info* %base, %struct.variable_info* %field) #0 !dbg !7890 {
entry:
  %base.addr = alloca %struct.variable_info*, align 8
  %field.addr = alloca %struct.variable_info*, align 8
  %prev = alloca %struct.variable_info*, align 8
  %curr = alloca %struct.variable_info*, align 8
  store %struct.variable_info* %base, %struct.variable_info** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %base.addr, metadata !7893, metadata !DIExpression()), !dbg !7894
  store %struct.variable_info* %field, %struct.variable_info** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %field.addr, metadata !7895, metadata !DIExpression()), !dbg !7896
  call void @llvm.dbg.declare(metadata %struct.variable_info** %prev, metadata !7897, metadata !DIExpression()), !dbg !7898
  %0 = load %struct.variable_info*, %struct.variable_info** %base.addr, align 8, !dbg !7899
  store %struct.variable_info* %0, %struct.variable_info** %prev, align 8, !dbg !7898
  call void @llvm.dbg.declare(metadata %struct.variable_info** %curr, metadata !7900, metadata !DIExpression()), !dbg !7901
  %1 = load %struct.variable_info*, %struct.variable_info** %base.addr, align 8, !dbg !7902
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %1, i32 0, i32 2, !dbg !7903
  %2 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !7903
  store %struct.variable_info* %2, %struct.variable_info** %curr, align 8, !dbg !7901
  %3 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !7904
  %4 = load %struct.variable_info*, %struct.variable_info** %field.addr, align 8, !dbg !7905
  %next1 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %4, i32 0, i32 2, !dbg !7906
  store %struct.variable_info* %3, %struct.variable_info** %next1, align 8, !dbg !7907
  %5 = load %struct.variable_info*, %struct.variable_info** %field.addr, align 8, !dbg !7908
  %6 = load %struct.variable_info*, %struct.variable_info** %prev, align 8, !dbg !7909
  %next2 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %6, i32 0, i32 2, !dbg !7910
  store %struct.variable_info* %5, %struct.variable_info** %next2, align 8, !dbg !7911
  ret void, !dbg !7912
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @bitpos_of_field(%union.tree_node* %fdecl) #0 !dbg !7913 {
entry:
  %retval = alloca i64, align 8
  %fdecl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fdecl, %union.tree_node** %fdecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fdecl.addr, metadata !7917, metadata !DIExpression()), !dbg !7918
  %0 = load %union.tree_node*, %union.tree_node** %fdecl.addr, align 8, !dbg !7919
  %field_decl = bitcast %union.tree_node* %0 to %struct.tree_field_decl*, !dbg !7919
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !7919
  %1 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !7919
  %call = call i32 @host_integerp(%union.tree_node* %1, i32 0), !dbg !7921
  %tobool = icmp ne i32 %call, 0, !dbg !7921
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7922

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %fdecl.addr, align 8, !dbg !7923
  %field_decl1 = bitcast %union.tree_node* %2 to %struct.tree_field_decl*, !dbg !7923
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl1, i32 0, i32 4, !dbg !7923
  %3 = load %union.tree_node*, %union.tree_node** %bit_offset, align 8, !dbg !7923
  %call2 = call i32 @host_integerp(%union.tree_node* %3, i32 0), !dbg !7924
  %tobool3 = icmp ne i32 %call2, 0, !dbg !7924
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7925

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 -1, i64* %retval, align 8, !dbg !7926
  br label %return, !dbg !7926

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %fdecl.addr, align 8, !dbg !7927
  %field_decl4 = bitcast %union.tree_node* %4 to %struct.tree_field_decl*, !dbg !7927
  %offset5 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl4, i32 0, i32 1, !dbg !7927
  %5 = load %union.tree_node*, %union.tree_node** %offset5, align 8, !dbg !7927
  %int_cst = bitcast %union.tree_node* %5 to %struct.tree_int_cst*, !dbg !7927
  %int_cst6 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7927
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst6, i32 0, i32 0, !dbg !7927
  %6 = load i64, i64* %low, align 8, !dbg !7927
  %mul = mul i64 %6, 8, !dbg !7928
  %7 = load %union.tree_node*, %union.tree_node** %fdecl.addr, align 8, !dbg !7929
  %field_decl7 = bitcast %union.tree_node* %7 to %struct.tree_field_decl*, !dbg !7929
  %bit_offset8 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl7, i32 0, i32 4, !dbg !7929
  %8 = load %union.tree_node*, %union.tree_node** %bit_offset8, align 8, !dbg !7929
  %int_cst9 = bitcast %union.tree_node* %8 to %struct.tree_int_cst*, !dbg !7929
  %int_cst10 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst9, i32 0, i32 1, !dbg !7929
  %low11 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst10, i32 0, i32 0, !dbg !7929
  %9 = load i64, i64* %low11, align 8, !dbg !7929
  %add = add i64 %mul, %9, !dbg !7930
  store i64 %add, i64* %retval, align 8, !dbg !7931
  br label %return, !dbg !7931

return:                                           ; preds = %if.end, %if.then
  %10 = load i64, i64* %retval, align 8, !dbg !7932
  ret i64 %10, !dbg !7932
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.fieldoff* @VEC_fieldoff_s_base_last(%struct.VEC_fieldoff_s_base* %vec_) #0 !dbg !7933 {
entry:
  %vec_.addr = alloca %struct.VEC_fieldoff_s_base*, align 8
  store %struct.VEC_fieldoff_s_base* %vec_, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_base** %vec_.addr, metadata !7936, metadata !DIExpression()), !dbg !7937
  %0 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7937
  %tobool = icmp ne %struct.VEC_fieldoff_s_base* %0, null, !dbg !7937
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7937

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7937
  %num = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %1, i32 0, i32 0, !dbg !7937
  %2 = load i32, i32* %num, align 8, !dbg !7937
  %tobool1 = icmp ne i32 %2, 0, !dbg !7937
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !7938
  %land.ext = zext i1 %3 to i32, !dbg !7937
  %4 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7937
  %vec = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %4, i32 0, i32 2, !dbg !7937
  %5 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7937
  %num2 = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %5, i32 0, i32 0, !dbg !7937
  %6 = load i32, i32* %num2, align 8, !dbg !7937
  %sub = sub i32 %6, 1, !dbg !7937
  %idxprom = zext i32 %sub to i64, !dbg !7937
  %arrayidx = getelementptr inbounds [1 x %struct.fieldoff], [1 x %struct.fieldoff]* %vec, i64 0, i64 %idxprom, !dbg !7937
  ret %struct.fieldoff* %arrayidx, !dbg !7937
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.fieldoff* @VEC_fieldoff_s_heap_safe_push(%struct.VEC_fieldoff_s_heap** %vec_, %struct.fieldoff* %obj_) #0 !dbg !7939 {
entry:
  %vec_.addr = alloca %struct.VEC_fieldoff_s_heap**, align 8
  %obj_.addr = alloca %struct.fieldoff*, align 8
  store %struct.VEC_fieldoff_s_heap** %vec_, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_heap*** %vec_.addr, metadata !7942, metadata !DIExpression()), !dbg !7943
  store %struct.fieldoff* %obj_, %struct.fieldoff** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fieldoff** %obj_.addr, metadata !7944, metadata !DIExpression()), !dbg !7943
  %0 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7943
  %call = call i32 @VEC_fieldoff_s_heap_reserve(%struct.VEC_fieldoff_s_heap** %0, i32 1), !dbg !7943
  %1 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7943
  %2 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %1, align 8, !dbg !7943
  %tobool = icmp ne %struct.VEC_fieldoff_s_heap* %2, null, !dbg !7943
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7943

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7943
  %4 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %3, align 8, !dbg !7943
  %base = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %4, i32 0, i32 0, !dbg !7943
  br label %cond.end, !dbg !7943

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7943

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_fieldoff_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7943
  %5 = load %struct.fieldoff*, %struct.fieldoff** %obj_.addr, align 8, !dbg !7943
  %call1 = call %struct.fieldoff* @VEC_fieldoff_s_base_quick_push(%struct.VEC_fieldoff_s_base* %cond, %struct.fieldoff* %5), !dbg !7943
  ret %struct.fieldoff* %call1, !dbg !7943
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_fieldoff_s_heap_reserve(%struct.VEC_fieldoff_s_heap** %vec_, i32 %alloc_) #0 !dbg !7945 {
entry:
  %vec_.addr = alloca %struct.VEC_fieldoff_s_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_fieldoff_s_heap** %vec_, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_heap*** %vec_.addr, metadata !7948, metadata !DIExpression()), !dbg !7949
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7950, metadata !DIExpression()), !dbg !7949
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7951, metadata !DIExpression()), !dbg !7949
  %0 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7949
  %1 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %0, align 8, !dbg !7949
  %tobool = icmp ne %struct.VEC_fieldoff_s_heap* %1, null, !dbg !7949
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7949

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7949
  %3 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %2, align 8, !dbg !7949
  %base = getelementptr inbounds %struct.VEC_fieldoff_s_heap, %struct.VEC_fieldoff_s_heap* %3, i32 0, i32 0, !dbg !7949
  br label %cond.end, !dbg !7949

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7949

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_fieldoff_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7949
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7949
  %call = call i32 @VEC_fieldoff_s_base_space(%struct.VEC_fieldoff_s_base* %cond, i32 %4), !dbg !7949
  %tobool1 = icmp ne i32 %call, 0, !dbg !7949
  %lnot = xor i1 %tobool1, true, !dbg !7949
  %lnot.ext = zext i1 %lnot to i32, !dbg !7949
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7949
  %5 = load i32, i32* %extend, align 4, !dbg !7952
  %tobool2 = icmp ne i32 %5, 0, !dbg !7952
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7949

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7952
  %7 = load %struct.VEC_fieldoff_s_heap*, %struct.VEC_fieldoff_s_heap** %6, align 8, !dbg !7952
  %8 = bitcast %struct.VEC_fieldoff_s_heap* %7 to i8*, !dbg !7952
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7952
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 24), !dbg !7952
  %10 = bitcast i8* %call3 to %struct.VEC_fieldoff_s_heap*, !dbg !7952
  %11 = load %struct.VEC_fieldoff_s_heap**, %struct.VEC_fieldoff_s_heap*** %vec_.addr, align 8, !dbg !7952
  store %struct.VEC_fieldoff_s_heap* %10, %struct.VEC_fieldoff_s_heap** %11, align 8, !dbg !7952
  br label %if.end, !dbg !7952

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7949
  ret i32 %12, !dbg !7949
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.fieldoff* @VEC_fieldoff_s_base_quick_push(%struct.VEC_fieldoff_s_base* %vec_, %struct.fieldoff* %obj_) #0 !dbg !7954 {
entry:
  %vec_.addr = alloca %struct.VEC_fieldoff_s_base*, align 8
  %obj_.addr = alloca %struct.fieldoff*, align 8
  %slot_ = alloca %struct.fieldoff*, align 8
  store %struct.VEC_fieldoff_s_base* %vec_, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_base** %vec_.addr, metadata !7957, metadata !DIExpression()), !dbg !7958
  store %struct.fieldoff* %obj_, %struct.fieldoff** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fieldoff** %obj_.addr, metadata !7959, metadata !DIExpression()), !dbg !7958
  call void @llvm.dbg.declare(metadata %struct.fieldoff** %slot_, metadata !7960, metadata !DIExpression()), !dbg !7958
  %0 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7958
  %num = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %0, i32 0, i32 0, !dbg !7958
  %1 = load i32, i32* %num, align 8, !dbg !7958
  %2 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7958
  %alloc = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %2, i32 0, i32 1, !dbg !7958
  %3 = load i32, i32* %alloc, align 4, !dbg !7958
  %cmp = icmp ult i32 %1, %3, !dbg !7958
  %conv = zext i1 %cmp to i32, !dbg !7958
  %4 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7958
  %vec = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %4, i32 0, i32 2, !dbg !7958
  %5 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7958
  %num1 = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %5, i32 0, i32 0, !dbg !7958
  %6 = load i32, i32* %num1, align 8, !dbg !7958
  %inc = add i32 %6, 1, !dbg !7958
  store i32 %inc, i32* %num1, align 8, !dbg !7958
  %idxprom = zext i32 %6 to i64, !dbg !7958
  %arrayidx = getelementptr inbounds [1 x %struct.fieldoff], [1 x %struct.fieldoff]* %vec, i64 0, i64 %idxprom, !dbg !7958
  store %struct.fieldoff* %arrayidx, %struct.fieldoff** %slot_, align 8, !dbg !7958
  %7 = load %struct.fieldoff*, %struct.fieldoff** %obj_.addr, align 8, !dbg !7961
  %tobool = icmp ne %struct.fieldoff* %7, null, !dbg !7961
  br i1 %tobool, label %if.then, label %if.end, !dbg !7958

if.then:                                          ; preds = %entry
  %8 = load %struct.fieldoff*, %struct.fieldoff** %slot_, align 8, !dbg !7961
  %9 = load %struct.fieldoff*, %struct.fieldoff** %obj_.addr, align 8, !dbg !7961
  %10 = bitcast %struct.fieldoff* %8 to i8*, !dbg !7961
  %11 = bitcast %struct.fieldoff* %9 to i8*, !dbg !7961
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !7961
  br label %if.end, !dbg !7961

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.fieldoff*, %struct.fieldoff** %slot_, align 8, !dbg !7958
  ret %struct.fieldoff* %12, !dbg !7958
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_fieldoff_s_base_space(%struct.VEC_fieldoff_s_base* %vec_, i32 %alloc_) #0 !dbg !7963 {
entry:
  %vec_.addr = alloca %struct.VEC_fieldoff_s_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_fieldoff_s_base* %vec_, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_base** %vec_.addr, metadata !7966, metadata !DIExpression()), !dbg !7967
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7968, metadata !DIExpression()), !dbg !7967
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7967
  %cmp = icmp sge i32 %0, 0, !dbg !7967
  %conv = zext i1 %cmp to i32, !dbg !7967
  %1 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7967
  %tobool = icmp ne %struct.VEC_fieldoff_s_base* %1, null, !dbg !7967
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7967

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7967
  %alloc = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %2, i32 0, i32 1, !dbg !7967
  %3 = load i32, i32* %alloc, align 4, !dbg !7967
  %4 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7967
  %num = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %4, i32 0, i32 0, !dbg !7967
  %5 = load i32, i32* %num, align 8, !dbg !7967
  %sub = sub i32 %3, %5, !dbg !7967
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7967
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7967
  %conv2 = zext i1 %cmp1 to i32, !dbg !7967
  br label %cond.end, !dbg !7967

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7967
  %tobool3 = icmp ne i32 %7, 0, !dbg !7967
  %lnot = xor i1 %tobool3, true, !dbg !7967
  %lnot.ext = zext i1 %lnot to i32, !dbg !7967
  br label %cond.end, !dbg !7967

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7967
  ret i32 %cond, !dbg !7967
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.fieldoff* @VEC_fieldoff_s_base_address(%struct.VEC_fieldoff_s_base* %vec_) #0 !dbg !7969 {
entry:
  %vec_.addr = alloca %struct.VEC_fieldoff_s_base*, align 8
  store %struct.VEC_fieldoff_s_base* %vec_, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_fieldoff_s_base** %vec_.addr, metadata !7970, metadata !DIExpression()), !dbg !7971
  %0 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7971
  %tobool = icmp ne %struct.VEC_fieldoff_s_base* %0, null, !dbg !7971
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7971

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_fieldoff_s_base*, %struct.VEC_fieldoff_s_base** %vec_.addr, align 8, !dbg !7971
  %vec = getelementptr inbounds %struct.VEC_fieldoff_s_base, %struct.VEC_fieldoff_s_base* %1, i32 0, i32 2, !dbg !7971
  %arraydecay = getelementptr inbounds [1 x %struct.fieldoff], [1 x %struct.fieldoff]* %vec, i64 0, i64 0, !dbg !7971
  br label %cond.end, !dbg !7971

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7971

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.fieldoff* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !7971
  ret %struct.fieldoff* %cond, !dbg !7971
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @fieldoff_compare(i8* %pa, i8* %pb) #0 !dbg !7972 {
entry:
  %retval = alloca i32, align 4
  %pa.addr = alloca i8*, align 8
  %pb.addr = alloca i8*, align 8
  %foa = alloca %struct.fieldoff*, align 8
  %fob = alloca %struct.fieldoff*, align 8
  %foasize = alloca i64, align 8
  %fobsize = alloca i64, align 8
  store i8* %pa, i8** %pa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pa.addr, metadata !7973, metadata !DIExpression()), !dbg !7974
  store i8* %pb, i8** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pb.addr, metadata !7975, metadata !DIExpression()), !dbg !7976
  call void @llvm.dbg.declare(metadata %struct.fieldoff** %foa, metadata !7977, metadata !DIExpression()), !dbg !7978
  %0 = load i8*, i8** %pa.addr, align 8, !dbg !7979
  %1 = bitcast i8* %0 to %struct.fieldoff*, !dbg !7980
  store %struct.fieldoff* %1, %struct.fieldoff** %foa, align 8, !dbg !7978
  call void @llvm.dbg.declare(metadata %struct.fieldoff** %fob, metadata !7981, metadata !DIExpression()), !dbg !7982
  %2 = load i8*, i8** %pb.addr, align 8, !dbg !7983
  %3 = bitcast i8* %2 to %struct.fieldoff*, !dbg !7984
  store %struct.fieldoff* %3, %struct.fieldoff** %fob, align 8, !dbg !7982
  call void @llvm.dbg.declare(metadata i64* %foasize, metadata !7985, metadata !DIExpression()), !dbg !7986
  call void @llvm.dbg.declare(metadata i64* %fobsize, metadata !7987, metadata !DIExpression()), !dbg !7988
  %4 = load %struct.fieldoff*, %struct.fieldoff** %foa, align 8, !dbg !7989
  %offset = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %4, i32 0, i32 0, !dbg !7991
  %5 = load i64, i64* %offset, align 8, !dbg !7991
  %6 = load %struct.fieldoff*, %struct.fieldoff** %fob, align 8, !dbg !7992
  %offset1 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %6, i32 0, i32 0, !dbg !7993
  %7 = load i64, i64* %offset1, align 8, !dbg !7993
  %cmp = icmp slt i64 %5, %7, !dbg !7994
  br i1 %cmp, label %if.then, label %if.else, !dbg !7995

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !7996
  br label %return, !dbg !7996

if.else:                                          ; preds = %entry
  %8 = load %struct.fieldoff*, %struct.fieldoff** %foa, align 8, !dbg !7997
  %offset2 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %8, i32 0, i32 0, !dbg !7999
  %9 = load i64, i64* %offset2, align 8, !dbg !7999
  %10 = load %struct.fieldoff*, %struct.fieldoff** %fob, align 8, !dbg !8000
  %offset3 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %10, i32 0, i32 0, !dbg !8001
  %11 = load i64, i64* %offset3, align 8, !dbg !8001
  %cmp4 = icmp sgt i64 %9, %11, !dbg !8002
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !8003

if.then5:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !8004
  br label %return, !dbg !8004

if.end:                                           ; preds = %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end
  %12 = load %struct.fieldoff*, %struct.fieldoff** %foa, align 8, !dbg !8005
  %size = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %12, i32 0, i32 1, !dbg !8006
  %13 = load i64, i64* %size, align 8, !dbg !8006
  store i64 %13, i64* %foasize, align 8, !dbg !8007
  %14 = load %struct.fieldoff*, %struct.fieldoff** %fob, align 8, !dbg !8008
  %size7 = getelementptr inbounds %struct.fieldoff, %struct.fieldoff* %14, i32 0, i32 1, !dbg !8009
  %15 = load i64, i64* %size7, align 8, !dbg !8009
  store i64 %15, i64* %fobsize, align 8, !dbg !8010
  %16 = load i64, i64* %foasize, align 8, !dbg !8011
  %17 = load i64, i64* %fobsize, align 8, !dbg !8013
  %cmp8 = icmp ult i64 %16, %17, !dbg !8014
  br i1 %cmp8, label %if.then9, label %if.else10, !dbg !8015

if.then9:                                         ; preds = %if.end6
  store i32 -1, i32* %retval, align 4, !dbg !8016
  br label %return, !dbg !8016

if.else10:                                        ; preds = %if.end6
  %18 = load i64, i64* %foasize, align 8, !dbg !8017
  %19 = load i64, i64* %fobsize, align 8, !dbg !8019
  %cmp11 = icmp ugt i64 %18, %19, !dbg !8020
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !8021

if.then12:                                        ; preds = %if.else10
  store i32 1, i32* %retval, align 4, !dbg !8022
  br label %return, !dbg !8022

if.end13:                                         ; preds = %if.else10
  br label %if.end14

if.end14:                                         ; preds = %if.end13
  store i32 0, i32* %retval, align 4, !dbg !8023
  br label %return, !dbg !8023

return:                                           ; preds = %if.end14, %if.then12, %if.then9, %if.then5, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !8024
  ret i32 %20, !dbg !8024
}

declare dso_local i8* @get_name(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info* @make_constraint_from_heapvar(%struct.variable_info* %lhs, i8* %name) #0 !dbg !8025 {
entry:
  %lhs.addr = alloca %struct.variable_info*, align 8
  %name.addr = alloca i8*, align 8
  %vi = alloca %struct.variable_info*, align 8
  %heapvar = alloca %union.tree_node*, align 8
  %ann = alloca %struct.var_ann_d*, align 8
  store %struct.variable_info* %lhs, %struct.variable_info** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %lhs.addr, metadata !8028, metadata !DIExpression()), !dbg !8029
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !8030, metadata !DIExpression()), !dbg !8031
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !8032, metadata !DIExpression()), !dbg !8033
  call void @llvm.dbg.declare(metadata %union.tree_node** %heapvar, metadata !8034, metadata !DIExpression()), !dbg !8035
  %0 = load %struct.variable_info*, %struct.variable_info** %lhs.addr, align 8, !dbg !8036
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %0, i32 0, i32 7, !dbg !8037
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8037
  %2 = load %struct.variable_info*, %struct.variable_info** %lhs.addr, align 8, !dbg !8038
  %offset = getelementptr inbounds %struct.variable_info, %struct.variable_info* %2, i32 0, i32 3, !dbg !8039
  %3 = load i64, i64* %offset, align 8, !dbg !8039
  %call = call %union.tree_node* @heapvar_lookup(%union.tree_node* %1, i64 %3), !dbg !8040
  store %union.tree_node* %call, %union.tree_node** %heapvar, align 8, !dbg !8035
  %4 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !8041
  %cmp = icmp eq %union.tree_node* %4, null, !dbg !8043
  br i1 %cmp, label %if.then, label %if.end, !dbg !8044

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.var_ann_d** %ann, metadata !8045, metadata !DIExpression()), !dbg !8047
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !8048
  %6 = load i8*, i8** %name.addr, align 8, !dbg !8049
  %call1 = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %5, i8* %6), !dbg !8050
  store %union.tree_node* %call1, %union.tree_node** %heapvar, align 8, !dbg !8051
  %7 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !8052
  %decl_common = bitcast %union.tree_node* %7 to %struct.tree_decl_common*, !dbg !8052
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8052
  %8 = bitcast i40* %decl_flag_1 to i64*, !dbg !8052
  %bf.load = load i64, i64* %8, align 8, !dbg !8053
  %bf.clear = and i64 %bf.load, -33554433, !dbg !8053
  %bf.set = or i64 %bf.clear, 33554432, !dbg !8053
  store i64 %bf.set, i64* %8, align 8, !dbg !8053
  %9 = load %struct.variable_info*, %struct.variable_info** %lhs.addr, align 8, !dbg !8054
  %decl2 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %9, i32 0, i32 7, !dbg !8055
  %10 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !8055
  %11 = load %struct.variable_info*, %struct.variable_info** %lhs.addr, align 8, !dbg !8056
  %offset3 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %11, i32 0, i32 3, !dbg !8057
  %12 = load i64, i64* %offset3, align 8, !dbg !8057
  %13 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !8058
  call void @heapvar_insert(%union.tree_node* %10, i64 %12, %union.tree_node* %13), !dbg !8059
  %14 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !8060
  %call4 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %14), !dbg !8061
  store %struct.var_ann_d* %call4, %struct.var_ann_d** %ann, align 8, !dbg !8062
  %15 = load %struct.var_ann_d*, %struct.var_ann_d** %ann, align 8, !dbg !8063
  %16 = bitcast %struct.var_ann_d* %15 to i8*, !dbg !8064
  %bf.load5 = load i8, i8* %16, align 8, !dbg !8065
  %bf.clear6 = and i8 %bf.load5, -17, !dbg !8065
  %bf.set7 = or i8 %bf.clear6, 16, !dbg !8065
  store i8 %bf.set7, i8* %16, align 8, !dbg !8065
  br label %if.end, !dbg !8066

if.end:                                           ; preds = %if.then, %entry
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8067
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !8067
  %call8 = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr), !dbg !8069
  %tobool = icmp ne %struct.htab* %call8, null, !dbg !8069
  br i1 %tobool, label %if.then9, label %if.end11, !dbg !8070

if.then9:                                         ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !8071
  %call10 = call zeroext i8 @add_referenced_var(%union.tree_node* %18), !dbg !8072
  br label %if.end11, !dbg !8072

if.end11:                                         ; preds = %if.then9, %if.end
  %19 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !8073
  %20 = load i8*, i8** %name.addr, align 8, !dbg !8074
  %call12 = call %struct.variable_info* @new_var_info(%union.tree_node* %19, i8* %20), !dbg !8075
  store %struct.variable_info* %call12, %struct.variable_info** %vi, align 8, !dbg !8076
  %21 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8077
  %is_artificial_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %21, i32 0, i32 1, !dbg !8078
  %bf.load13 = load i8, i8* %is_artificial_var, align 4, !dbg !8079
  %bf.clear14 = and i8 %bf.load13, -2, !dbg !8079
  %bf.set15 = or i8 %bf.clear14, 1, !dbg !8079
  store i8 %bf.set15, i8* %is_artificial_var, align 4, !dbg !8079
  %22 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8080
  %is_heap_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %22, i32 0, i32 1, !dbg !8081
  %bf.load16 = load i8, i8* %is_heap_var, align 4, !dbg !8082
  %bf.clear17 = and i8 %bf.load16, -17, !dbg !8082
  %bf.set18 = or i8 %bf.clear17, 16, !dbg !8082
  store i8 %bf.set18, i8* %is_heap_var, align 4, !dbg !8082
  %23 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8083
  %is_unknown_size_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %23, i32 0, i32 1, !dbg !8084
  %bf.load19 = load i8, i8* %is_unknown_size_var, align 4, !dbg !8085
  %bf.clear20 = and i8 %bf.load19, -5, !dbg !8085
  %bf.set21 = or i8 %bf.clear20, 4, !dbg !8085
  store i8 %bf.set21, i8* %is_unknown_size_var, align 4, !dbg !8085
  %24 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8086
  %offset22 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %24, i32 0, i32 3, !dbg !8087
  store i64 0, i64* %offset22, align 8, !dbg !8088
  %25 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8089
  %fullsize = getelementptr inbounds %struct.variable_info, %struct.variable_info* %25, i32 0, i32 5, !dbg !8090
  store i64 -1, i64* %fullsize, align 8, !dbg !8091
  %26 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8092
  %size = getelementptr inbounds %struct.variable_info, %struct.variable_info* %26, i32 0, i32 4, !dbg !8093
  store i64 -1, i64* %size, align 8, !dbg !8094
  %27 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8095
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %27, i32 0, i32 1, !dbg !8096
  %bf.load23 = load i8, i8* %is_full_var, align 4, !dbg !8097
  %bf.clear24 = and i8 %bf.load23, -9, !dbg !8097
  %bf.set25 = or i8 %bf.clear24, 8, !dbg !8097
  store i8 %bf.set25, i8* %is_full_var, align 4, !dbg !8097
  %28 = load %union.tree_node*, %union.tree_node** %heapvar, align 8, !dbg !8098
  %29 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8099
  call void @insert_vi_for_tree(%union.tree_node* %28, %struct.variable_info* %29), !dbg !8100
  %30 = load %struct.variable_info*, %struct.variable_info** %lhs.addr, align 8, !dbg !8101
  %31 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8102
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %31, i32 0, i32 0, !dbg !8103
  %32 = load i32, i32* %id, align 8, !dbg !8103
  call void @make_constraint_from(%struct.variable_info* %30, i32 %32), !dbg !8104
  %33 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8105
  ret %struct.variable_info* %33, !dbg !8106
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !8107 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8110, metadata !DIExpression()), !dbg !8111
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8112
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8113
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8114
  %bf.load = load i32, i32* %1, align 8, !dbg !8114
  %bf.clear = and i32 %bf.load, 255, !dbg !8114
  ret i32 %bf.clear, !dbg !8115
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_constraint_for(%union.tree_node* %t, %struct.VEC_ce_s_heap** %results) #0 !dbg !8116 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %results.addr = alloca %struct.VEC_ce_s_heap**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !8120, metadata !DIExpression()), !dbg !8121
  store %struct.VEC_ce_s_heap** %results, %struct.VEC_ce_s_heap*** %results.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %results.addr, metadata !8122, metadata !DIExpression()), !dbg !8123
  %0 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8124
  %1 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %0, align 8, !dbg !8124
  %tobool = icmp ne %struct.VEC_ce_s_heap* %1, null, !dbg !8124
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8124

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8124
  %3 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %2, align 8, !dbg !8124
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %3, i32 0, i32 0, !dbg !8124
  br label %cond.end, !dbg !8124

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8124

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8124
  %call = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond), !dbg !8124
  %cmp = icmp eq i32 %call, 0, !dbg !8124
  br i1 %cmp, label %cond.false2, label %cond.true1, !dbg !8124

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 3229, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8124
  br label %cond.end3, !dbg !8124

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !8124

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !8124
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8125
  %5 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8126
  call void @get_constraint_for_1(%union.tree_node* %4, %struct.VEC_ce_s_heap** %5, i8 zeroext 0), !dbg !8127
  ret void, !dbg !8128
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !8129 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8132, metadata !DIExpression()), !dbg !8133
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8134
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !8135
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !8136
  %1 = load i32, i32* %nargs, align 4, !dbg !8136
  ret i32 %1, !dbg !8137
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !8138 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !8144, metadata !DIExpression()), !dbg !8145
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !8146
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !8147
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !8147
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !8148
  ret %union.tree_node* %2, !dbg !8149
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !8150 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8153, metadata !DIExpression()), !dbg !8154
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !8155, metadata !DIExpression()), !dbg !8156
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8157
  %1 = load i32, i32* %i.addr, align 4, !dbg !8158
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !8159
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !8160
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !8161
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !8162 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8165, metadata !DIExpression()), !dbg !8166
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !8167, metadata !DIExpression()), !dbg !8168
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !8169, metadata !DIExpression()), !dbg !8171
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8172
  %1 = load i64, i64* %index.addr, align 8, !dbg !8173
  %conv = trunc i64 %1 to i32, !dbg !8173
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !8174
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !8171
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !8175
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !8176
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !8177
  ret %union.tree_node* %call1, !dbg !8178
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %vec_, i32 %ix_, %struct.constraint_expr** %ptr) #0 !dbg !8179 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_ce_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.constraint_expr**, align 8
  store %struct.VEC_ce_s_base* %vec_, %struct.VEC_ce_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_base** %vec_.addr, metadata !8184, metadata !DIExpression()), !dbg !8185
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8186, metadata !DIExpression()), !dbg !8185
  store %struct.constraint_expr** %ptr, %struct.constraint_expr*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_expr*** %ptr.addr, metadata !8187, metadata !DIExpression()), !dbg !8185
  %0 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8188
  %tobool = icmp ne %struct.VEC_ce_s_base* %0, null, !dbg !8188
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8188

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8188
  %2 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8188
  %num = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %2, i32 0, i32 0, !dbg !8188
  %3 = load i32, i32* %num, align 8, !dbg !8188
  %cmp = icmp ult i32 %1, %3, !dbg !8188
  br i1 %cmp, label %if.then, label %if.else, !dbg !8185

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8190
  %vec = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %4, i32 0, i32 2, !dbg !8190
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8190
  %idxprom = zext i32 %5 to i64, !dbg !8190
  %arrayidx = getelementptr inbounds [1 x %struct.constraint_expr], [1 x %struct.constraint_expr]* %vec, i64 0, i64 %idxprom, !dbg !8190
  %6 = load %struct.constraint_expr**, %struct.constraint_expr*** %ptr.addr, align 8, !dbg !8190
  store %struct.constraint_expr* %arrayidx, %struct.constraint_expr** %6, align 8, !dbg !8190
  store i32 1, i32* %retval, align 4, !dbg !8190
  br label %return, !dbg !8190

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.constraint_expr**, %struct.constraint_expr*** %ptr.addr, align 8, !dbg !8192
  store %struct.constraint_expr* null, %struct.constraint_expr** %7, align 8, !dbg !8192
  store i32 0, i32* %retval, align 4, !dbg !8192
  br label %return, !dbg !8192

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !8185
  ret i32 %8, !dbg !8185
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %vec_) #0 !dbg !8194 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_base*, align 8
  store %struct.VEC_ce_s_base* %vec_, %struct.VEC_ce_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_base** %vec_.addr, metadata !8199, metadata !DIExpression()), !dbg !8200
  %0 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8200
  %tobool = icmp ne %struct.VEC_ce_s_base* %0, null, !dbg !8200
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8200

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8200
  %num = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %1, i32 0, i32 0, !dbg !8200
  %2 = load i32, i32* %num, align 8, !dbg !8200
  br label %cond.end, !dbg !8200

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8200

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8200
  ret i32 %cond, !dbg !8200
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint_expr* @VEC_ce_s_base_last(%struct.VEC_ce_s_base* %vec_) #0 !dbg !8201 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_base*, align 8
  store %struct.VEC_ce_s_base* %vec_, %struct.VEC_ce_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_base** %vec_.addr, metadata !8204, metadata !DIExpression()), !dbg !8205
  %0 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8205
  %tobool = icmp ne %struct.VEC_ce_s_base* %0, null, !dbg !8205
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8205

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8205
  %num = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %1, i32 0, i32 0, !dbg !8205
  %2 = load i32, i32* %num, align 8, !dbg !8205
  %tobool1 = icmp ne i32 %2, 0, !dbg !8205
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !8206
  %land.ext = zext i1 %3 to i32, !dbg !8205
  %4 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8205
  %vec = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %4, i32 0, i32 2, !dbg !8205
  %5 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8205
  %num2 = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %5, i32 0, i32 0, !dbg !8205
  %6 = load i32, i32* %num2, align 8, !dbg !8205
  %sub = sub i32 %6, 1, !dbg !8205
  %idxprom = zext i32 %sub to i64, !dbg !8205
  %arrayidx = getelementptr inbounds [1 x %struct.constraint_expr], [1 x %struct.constraint_expr]* %vec, i64 0, i64 %idxprom, !dbg !8205
  ret %struct.constraint_expr* %arrayidx, !dbg !8205
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ce_s_base_pop(%struct.VEC_ce_s_base* %vec_) #0 !dbg !8207 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_base*, align 8
  store %struct.VEC_ce_s_base* %vec_, %struct.VEC_ce_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_base** %vec_.addr, metadata !8210, metadata !DIExpression()), !dbg !8211
  %0 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8211
  %num = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %0, i32 0, i32 0, !dbg !8211
  %1 = load i32, i32* %num, align 8, !dbg !8211
  %2 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !8211
  %num1 = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %2, i32 0, i32 0, !dbg !8211
  %3 = load i32, i32* %num1, align 8, !dbg !8211
  %dec = add i32 %3, -1, !dbg !8211
  store i32 %dec, i32* %num1, align 8, !dbg !8211
  ret void, !dbg !8211
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !8212 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8215, metadata !DIExpression()), !dbg !8216
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8217
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8218
  %cmp = icmp eq i32 %call, 8, !dbg !8219
  %conv = zext i1 %cmp to i32, !dbg !8219
  %conv1 = trunc i32 %conv to i8, !dbg !8218
  ret i8 %conv1, !dbg !8220
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !8221 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8222, metadata !DIExpression()), !dbg !8223
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !8224, metadata !DIExpression()), !dbg !8225
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8226
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !8227
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !8225
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !8228
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8228
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8228
  %bf.load = load i64, i64* %2, align 8, !dbg !8228
  %bf.clear = and i64 %bf.load, 65535, !dbg !8228
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8228
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !8230
  br i1 %cmp, label %if.then, label %if.end, !dbg !8231

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !8232
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !8232
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8232
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8232
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8232
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !8233
  br label %return, !dbg !8233

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8234
  br label %return, !dbg !8234

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8235
  ret %union.tree_node* %5, !dbg !8235
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !8236 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8237, metadata !DIExpression()), !dbg !8238
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8239
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !8240
  ret %union.tree_node* %call, !dbg !8241
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !8242 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8245, metadata !DIExpression()), !dbg !8246
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !8247, metadata !DIExpression()), !dbg !8248
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8249
  %1 = load i32, i32* %index.addr, align 4, !dbg !8250
  %add = add i32 %1, 3, !dbg !8251
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !8252
  ret %union.tree_node* %call, !dbg !8253
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_constraint_for_ptr_offset(%union.tree_node* %ptr, %union.tree_node* %offset, %struct.VEC_ce_s_heap** %results) #0 !dbg !8254 {
entry:
  %ptr.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca %union.tree_node*, align 8
  %results.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %c = alloca %struct.constraint_expr, align 8
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %rhsunitoffset = alloca i64, align 8
  %rhsoffset = alloca i64, align 8
  %curr = alloca %struct.variable_info*, align 8
  %temp = alloca %struct.variable_info*, align 8
  %c2 = alloca %struct.constraint_expr, align 8
  %temp47 = alloca %struct.variable_info*, align 8
  %offset48 = alloca i64, align 8
  %c263 = alloca %struct.constraint_expr, align 8
  store %union.tree_node* %ptr, %union.tree_node** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr.addr, metadata !8257, metadata !DIExpression()), !dbg !8258
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !8259, metadata !DIExpression()), !dbg !8260
  store %struct.VEC_ce_s_heap** %results, %struct.VEC_ce_s_heap*** %results.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %results.addr, metadata !8261, metadata !DIExpression()), !dbg !8262
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %c, metadata !8263, metadata !DIExpression()), !dbg !8264
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8265, metadata !DIExpression()), !dbg !8266
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8267, metadata !DIExpression()), !dbg !8268
  call void @llvm.dbg.declare(metadata i64* %rhsunitoffset, metadata !8269, metadata !DIExpression()), !dbg !8270
  call void @llvm.dbg.declare(metadata i64* %rhsoffset, metadata !8271, metadata !DIExpression()), !dbg !8272
  %0 = load i8, i8* @use_field_sensitive, align 1, !dbg !8273
  %tobool = icmp ne i8 %0, 0, !dbg !8273
  br i1 %tobool, label %if.end, label %if.then, !dbg !8275

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !8276
  %2 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8278
  call void @get_constraint_for(%union.tree_node* %1, %struct.VEC_ce_s_heap** %2), !dbg !8279
  br label %for.end, !dbg !8280

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !8281
  %cmp = icmp eq %union.tree_node* %3, null, !dbg !8283
  br i1 %cmp, label %if.then2, label %lor.lhs.false, !dbg !8284

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !8285
  %call = call i32 @host_integerp(%union.tree_node* %4, i32 0), !dbg !8286
  %tobool1 = icmp ne i32 %call, 0, !dbg !8286
  br i1 %tobool1, label %if.else, label %if.then2, !dbg !8287

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  store i64 -9223372036854775808, i64* %rhsoffset, align 8, !dbg !8288
  br label %if.end7, !dbg !8289

if.else:                                          ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !8290
  %int_cst = bitcast %union.tree_node* %5 to %struct.tree_int_cst*, !dbg !8290
  %int_cst3 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !8290
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst3, i32 0, i32 0, !dbg !8290
  %6 = load i64, i64* %low, align 8, !dbg !8290
  store i64 %6, i64* %rhsunitoffset, align 8, !dbg !8292
  %7 = load i64, i64* %rhsunitoffset, align 8, !dbg !8293
  %mul = mul nsw i64 %7, 8, !dbg !8294
  store i64 %mul, i64* %rhsoffset, align 8, !dbg !8295
  %8 = load i64, i64* %rhsunitoffset, align 8, !dbg !8296
  %9 = load i64, i64* %rhsoffset, align 8, !dbg !8298
  %div = sdiv i64 %9, 8, !dbg !8299
  %cmp4 = icmp ne i64 %8, %div, !dbg !8300
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !8301

if.then5:                                         ; preds = %if.else
  store i64 -9223372036854775808, i64* %rhsoffset, align 8, !dbg !8302
  br label %if.end6, !dbg !8303

if.end6:                                          ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %10 = load %union.tree_node*, %union.tree_node** %ptr.addr, align 8, !dbg !8304
  %11 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8305
  call void @get_constraint_for(%union.tree_node* %10, %struct.VEC_ce_s_heap** %11), !dbg !8306
  %12 = load i64, i64* %rhsoffset, align 8, !dbg !8307
  %cmp8 = icmp eq i64 %12, 0, !dbg !8309
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !8310

if.then9:                                         ; preds = %if.end7
  br label %for.end, !dbg !8311

if.end10:                                         ; preds = %if.end7
  %13 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8312
  %14 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %13, align 8, !dbg !8312
  %tobool11 = icmp ne %struct.VEC_ce_s_heap* %14, null, !dbg !8312
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !8312

cond.true:                                        ; preds = %if.end10
  %15 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8312
  %16 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %15, align 8, !dbg !8312
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %16, i32 0, i32 0, !dbg !8312
  br label %cond.end, !dbg !8312

cond.false:                                       ; preds = %if.end10
  br label %cond.end, !dbg !8312

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8312
  %call12 = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond), !dbg !8312
  store i32 %call12, i32* %n, align 4, !dbg !8313
  store i32 0, i32* %j, align 4, !dbg !8314
  br label %for.cond, !dbg !8316

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4, !dbg !8317
  %18 = load i32, i32* %n, align 4, !dbg !8319
  %cmp13 = icmp ult i32 %17, %18, !dbg !8320
  br i1 %cmp13, label %for.body, label %for.end, !dbg !8321

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %curr, metadata !8322, metadata !DIExpression()), !dbg !8324
  %19 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8325
  %20 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %19, align 8, !dbg !8325
  %tobool14 = icmp ne %struct.VEC_ce_s_heap* %20, null, !dbg !8325
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !8325

cond.true15:                                      ; preds = %for.body
  %21 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8325
  %22 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %21, align 8, !dbg !8325
  %base16 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %22, i32 0, i32 0, !dbg !8325
  br label %cond.end18, !dbg !8325

cond.false17:                                     ; preds = %for.body
  br label %cond.end18, !dbg !8325

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_ce_s_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !8325
  %23 = load i32, i32* %j, align 4, !dbg !8325
  %call20 = call %struct.constraint_expr* @VEC_ce_s_base_index(%struct.VEC_ce_s_base* %cond19, i32 %23), !dbg !8325
  %24 = bitcast %struct.constraint_expr* %c to i8*, !dbg !8326
  %25 = bitcast %struct.constraint_expr* %call20 to i8*, !dbg !8326
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 16, i1 false), !dbg !8326
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c, i32 0, i32 1, !dbg !8327
  %26 = load i32, i32* %var, align 4, !dbg !8327
  %call21 = call %struct.variable_info* @get_varinfo(i32 %26), !dbg !8328
  store %struct.variable_info* %call21, %struct.variable_info** %curr, align 8, !dbg !8329
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c, i32 0, i32 0, !dbg !8330
  %27 = load i32, i32* %type, align 8, !dbg !8330
  %cmp22 = icmp eq i32 %27, 2, !dbg !8332
  br i1 %cmp22, label %land.lhs.true, label %if.else26, !dbg !8333

land.lhs.true:                                    ; preds = %cond.end18
  %28 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !8334
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %28, i32 0, i32 1, !dbg !8335
  %bf.load = load i8, i8* %is_full_var, align 4, !dbg !8335
  %bf.lshr = lshr i8 %bf.load, 3, !dbg !8335
  %bf.clear = and i8 %bf.lshr, 1, !dbg !8335
  %bf.cast = zext i8 %bf.clear to i32, !dbg !8335
  %tobool23 = icmp ne i32 %bf.cast, 0, !dbg !8334
  br i1 %tobool23, label %if.then24, label %if.else26, !dbg !8336

if.then24:                                        ; preds = %land.lhs.true
  %offset25 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c, i32 0, i32 2, !dbg !8337
  store i64 0, i64* %offset25, align 8, !dbg !8338
  br label %if.end78, !dbg !8339

if.else26:                                        ; preds = %land.lhs.true, %cond.end18
  %type27 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c, i32 0, i32 0, !dbg !8340
  %29 = load i32, i32* %type27, align 8, !dbg !8340
  %cmp28 = icmp eq i32 %29, 2, !dbg !8342
  br i1 %cmp28, label %land.lhs.true29, label %if.else43, !dbg !8343

land.lhs.true29:                                  ; preds = %if.else26
  %30 = load i64, i64* %rhsoffset, align 8, !dbg !8344
  %cmp30 = icmp eq i64 %30, -9223372036854775808, !dbg !8345
  br i1 %cmp30, label %if.then31, label %if.else43, !dbg !8346

if.then31:                                        ; preds = %land.lhs.true29
  call void @llvm.dbg.declare(metadata %struct.variable_info** %temp, metadata !8347, metadata !DIExpression()), !dbg !8349
  %31 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !8350
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %31, i32 0, i32 7, !dbg !8351
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8351
  %call32 = call %struct.variable_info* @lookup_vi_for_tree(%union.tree_node* %32), !dbg !8352
  store %struct.variable_info* %call32, %struct.variable_info** %temp, align 8, !dbg !8349
  br label %do.body, !dbg !8353

do.body:                                          ; preds = %do.cond, %if.then31
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %c2, metadata !8354, metadata !DIExpression()), !dbg !8356
  %33 = load %struct.variable_info*, %struct.variable_info** %temp, align 8, !dbg !8357
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %33, i32 0, i32 0, !dbg !8358
  %34 = load i32, i32* %id, align 8, !dbg !8358
  %var33 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c2, i32 0, i32 1, !dbg !8359
  store i32 %34, i32* %var33, align 4, !dbg !8360
  %type34 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c2, i32 0, i32 0, !dbg !8361
  store i32 2, i32* %type34, align 8, !dbg !8362
  %offset35 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c2, i32 0, i32 2, !dbg !8363
  store i64 0, i64* %offset35, align 8, !dbg !8364
  %var36 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c2, i32 0, i32 1, !dbg !8365
  %35 = load i32, i32* %var36, align 4, !dbg !8365
  %var37 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c, i32 0, i32 1, !dbg !8367
  %36 = load i32, i32* %var37, align 4, !dbg !8367
  %cmp38 = icmp ne i32 %35, %36, !dbg !8368
  br i1 %cmp38, label %if.then39, label %if.end41, !dbg !8369

if.then39:                                        ; preds = %do.body
  %37 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8370
  %call40 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %37, %struct.constraint_expr* %c2), !dbg !8370
  br label %if.end41, !dbg !8370

if.end41:                                         ; preds = %if.then39, %do.body
  %38 = load %struct.variable_info*, %struct.variable_info** %temp, align 8, !dbg !8371
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %38, i32 0, i32 2, !dbg !8372
  %39 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !8372
  store %struct.variable_info* %39, %struct.variable_info** %temp, align 8, !dbg !8373
  br label %do.cond, !dbg !8374

do.cond:                                          ; preds = %if.end41
  %40 = load %struct.variable_info*, %struct.variable_info** %temp, align 8, !dbg !8375
  %tobool42 = icmp ne %struct.variable_info* %40, null, !dbg !8374
  br i1 %tobool42, label %do.body, label %do.end, !dbg !8374, !llvm.loop !8376

do.end:                                           ; preds = %do.cond
  br label %if.end77, !dbg !8378

if.else43:                                        ; preds = %land.lhs.true29, %if.else26
  %type44 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c, i32 0, i32 0, !dbg !8379
  %41 = load i32, i32* %type44, align 8, !dbg !8379
  %cmp45 = icmp eq i32 %41, 2, !dbg !8381
  br i1 %cmp45, label %if.then46, label %if.else74, !dbg !8382

if.then46:                                        ; preds = %if.else43
  call void @llvm.dbg.declare(metadata %struct.variable_info** %temp47, metadata !8383, metadata !DIExpression()), !dbg !8385
  call void @llvm.dbg.declare(metadata i64* %offset48, metadata !8386, metadata !DIExpression()), !dbg !8387
  %42 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !8388
  %offset49 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %42, i32 0, i32 3, !dbg !8389
  %43 = load i64, i64* %offset49, align 8, !dbg !8389
  %44 = load i64, i64* %rhsoffset, align 8, !dbg !8390
  %add = add i64 %43, %44, !dbg !8391
  store i64 %add, i64* %offset48, align 8, !dbg !8387
  %45 = load i64, i64* %rhsoffset, align 8, !dbg !8392
  %cmp50 = icmp slt i64 %45, 0, !dbg !8394
  br i1 %cmp50, label %land.lhs.true51, label %if.end55, !dbg !8395

land.lhs.true51:                                  ; preds = %if.then46
  %46 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !8396
  %offset52 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %46, i32 0, i32 3, !dbg !8397
  %47 = load i64, i64* %offset52, align 8, !dbg !8397
  %48 = load i64, i64* %offset48, align 8, !dbg !8398
  %cmp53 = icmp ult i64 %47, %48, !dbg !8399
  br i1 %cmp53, label %if.then54, label %if.end55, !dbg !8400

if.then54:                                        ; preds = %land.lhs.true51
  store i64 0, i64* %offset48, align 8, !dbg !8401
  br label %if.end55, !dbg !8402

if.end55:                                         ; preds = %if.then54, %land.lhs.true51, %if.then46
  %49 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !8403
  %50 = load i64, i64* %offset48, align 8, !dbg !8404
  %call56 = call %struct.variable_info* @first_or_preceding_vi_for_offset(%struct.variable_info* %49, i64 %50), !dbg !8405
  store %struct.variable_info* %call56, %struct.variable_info** %temp47, align 8, !dbg !8406
  %51 = load %struct.variable_info*, %struct.variable_info** %temp47, align 8, !dbg !8407
  %offset57 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %51, i32 0, i32 3, !dbg !8409
  %52 = load i64, i64* %offset57, align 8, !dbg !8409
  %53 = load i64, i64* %offset48, align 8, !dbg !8410
  %cmp58 = icmp ne i64 %52, %53, !dbg !8411
  br i1 %cmp58, label %land.lhs.true59, label %if.end70, !dbg !8412

land.lhs.true59:                                  ; preds = %if.end55
  %54 = load %struct.variable_info*, %struct.variable_info** %temp47, align 8, !dbg !8413
  %next60 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %54, i32 0, i32 2, !dbg !8414
  %55 = load %struct.variable_info*, %struct.variable_info** %next60, align 8, !dbg !8414
  %cmp61 = icmp ne %struct.variable_info* %55, null, !dbg !8415
  br i1 %cmp61, label %if.then62, label %if.end70, !dbg !8416

if.then62:                                        ; preds = %land.lhs.true59
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %c263, metadata !8417, metadata !DIExpression()), !dbg !8419
  %56 = load %struct.variable_info*, %struct.variable_info** %temp47, align 8, !dbg !8420
  %next64 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %56, i32 0, i32 2, !dbg !8421
  %57 = load %struct.variable_info*, %struct.variable_info** %next64, align 8, !dbg !8421
  %id65 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %57, i32 0, i32 0, !dbg !8422
  %58 = load i32, i32* %id65, align 8, !dbg !8422
  %var66 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c263, i32 0, i32 1, !dbg !8423
  store i32 %58, i32* %var66, align 4, !dbg !8424
  %type67 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c263, i32 0, i32 0, !dbg !8425
  store i32 2, i32* %type67, align 8, !dbg !8426
  %offset68 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c263, i32 0, i32 2, !dbg !8427
  store i64 0, i64* %offset68, align 8, !dbg !8428
  %59 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8429
  %call69 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %59, %struct.constraint_expr* %c263), !dbg !8429
  br label %if.end70, !dbg !8430

if.end70:                                         ; preds = %if.then62, %land.lhs.true59, %if.end55
  %60 = load %struct.variable_info*, %struct.variable_info** %temp47, align 8, !dbg !8431
  %id71 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %60, i32 0, i32 0, !dbg !8432
  %61 = load i32, i32* %id71, align 8, !dbg !8432
  %var72 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c, i32 0, i32 1, !dbg !8433
  store i32 %61, i32* %var72, align 4, !dbg !8434
  %offset73 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c, i32 0, i32 2, !dbg !8435
  store i64 0, i64* %offset73, align 8, !dbg !8436
  br label %if.end76, !dbg !8437

if.else74:                                        ; preds = %if.else43
  %62 = load i64, i64* %rhsoffset, align 8, !dbg !8438
  %offset75 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %c, i32 0, i32 2, !dbg !8439
  store i64 %62, i64* %offset75, align 8, !dbg !8440
  br label %if.end76

if.end76:                                         ; preds = %if.else74, %if.end70
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %do.end
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.then24
  %63 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8441
  %64 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %63, align 8, !dbg !8441
  %tobool79 = icmp ne %struct.VEC_ce_s_heap* %64, null, !dbg !8441
  br i1 %tobool79, label %cond.true80, label %cond.false82, !dbg !8441

cond.true80:                                      ; preds = %if.end78
  %65 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8441
  %66 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %65, align 8, !dbg !8441
  %base81 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %66, i32 0, i32 0, !dbg !8441
  br label %cond.end83, !dbg !8441

cond.false82:                                     ; preds = %if.end78
  br label %cond.end83, !dbg !8441

cond.end83:                                       ; preds = %cond.false82, %cond.true80
  %cond84 = phi %struct.VEC_ce_s_base* [ %base81, %cond.true80 ], [ null, %cond.false82 ], !dbg !8441
  %67 = load i32, i32* %j, align 4, !dbg !8441
  %call85 = call %struct.constraint_expr* @VEC_ce_s_base_replace(%struct.VEC_ce_s_base* %cond84, i32 %67, %struct.constraint_expr* %c), !dbg !8441
  br label %for.inc, !dbg !8442

for.inc:                                          ; preds = %cond.end83
  %68 = load i32, i32* %j, align 4, !dbg !8443
  %inc = add i32 %68, 1, !dbg !8443
  store i32 %inc, i32* %j, align 4, !dbg !8443
  br label %for.cond, !dbg !8444, !llvm.loop !8445

for.end:                                          ; preds = %if.then, %if.then9, %for.cond
  ret void, !dbg !8447
}

; Function Attrs: noinline nounwind uwtable
define internal void @process_all_all_constraints(%struct.VEC_ce_s_heap* %lhsc, %struct.VEC_ce_s_heap* %rhsc) #0 !dbg !8448 {
entry:
  %lhsc.addr = alloca %struct.VEC_ce_s_heap*, align 8
  %rhsc.addr = alloca %struct.VEC_ce_s_heap*, align 8
  %lhsp = alloca %struct.constraint_expr*, align 8
  %rhsp = alloca %struct.constraint_expr*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca %struct.constraint_expr, align 8
  %tmp31 = alloca %struct.constraint_expr, align 8
  store %struct.VEC_ce_s_heap* %lhsc, %struct.VEC_ce_s_heap** %lhsc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %lhsc.addr, metadata !8451, metadata !DIExpression()), !dbg !8452
  store %struct.VEC_ce_s_heap* %rhsc, %struct.VEC_ce_s_heap** %rhsc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %rhsc.addr, metadata !8453, metadata !DIExpression()), !dbg !8454
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %lhsp, metadata !8455, metadata !DIExpression()), !dbg !8456
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %rhsp, metadata !8457, metadata !DIExpression()), !dbg !8458
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8459, metadata !DIExpression()), !dbg !8460
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8461, metadata !DIExpression()), !dbg !8462
  %0 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc.addr, align 8, !dbg !8463
  %tobool = icmp ne %struct.VEC_ce_s_heap* %0, null, !dbg !8463
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8463

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc.addr, align 8, !dbg !8463
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %1, i32 0, i32 0, !dbg !8463
  br label %cond.end, !dbg !8463

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8463

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8463
  %call = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond), !dbg !8463
  %cmp = icmp ule i32 %call, 1, !dbg !8465
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8466

lor.lhs.false:                                    ; preds = %cond.end
  %2 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc.addr, align 8, !dbg !8467
  %tobool1 = icmp ne %struct.VEC_ce_s_heap* %2, null, !dbg !8467
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8467

cond.true2:                                       ; preds = %lor.lhs.false
  %3 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc.addr, align 8, !dbg !8467
  %base3 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %3, i32 0, i32 0, !dbg !8467
  br label %cond.end5, !dbg !8467

cond.false4:                                      ; preds = %lor.lhs.false
  br label %cond.end5, !dbg !8467

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ce_s_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !8467
  %call7 = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond6), !dbg !8467
  %cmp8 = icmp ule i32 %call7, 1, !dbg !8468
  br i1 %cmp8, label %if.then, label %if.else, !dbg !8469

if.then:                                          ; preds = %cond.end5, %cond.end
  store i32 0, i32* %i, align 4, !dbg !8470
  br label %for.cond, !dbg !8473

for.cond:                                         ; preds = %for.inc28, %if.then
  %4 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc.addr, align 8, !dbg !8474
  %tobool9 = icmp ne %struct.VEC_ce_s_heap* %4, null, !dbg !8474
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !8474

cond.true10:                                      ; preds = %for.cond
  %5 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc.addr, align 8, !dbg !8474
  %base11 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %5, i32 0, i32 0, !dbg !8474
  br label %cond.end13, !dbg !8474

cond.false12:                                     ; preds = %for.cond
  br label %cond.end13, !dbg !8474

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_ce_s_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !8474
  %6 = load i32, i32* %i, align 4, !dbg !8474
  %call15 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond14, i32 %6, %struct.constraint_expr** %lhsp), !dbg !8474
  %tobool16 = icmp ne i32 %call15, 0, !dbg !8476
  br i1 %tobool16, label %for.body, label %for.end30, !dbg !8476

for.body:                                         ; preds = %cond.end13
  store i32 0, i32* %j, align 4, !dbg !8477
  br label %for.cond17, !dbg !8479

for.cond17:                                       ; preds = %for.inc, %for.body
  %7 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc.addr, align 8, !dbg !8480
  %tobool18 = icmp ne %struct.VEC_ce_s_heap* %7, null, !dbg !8480
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !8480

cond.true19:                                      ; preds = %for.cond17
  %8 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc.addr, align 8, !dbg !8480
  %base20 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %8, i32 0, i32 0, !dbg !8480
  br label %cond.end22, !dbg !8480

cond.false21:                                     ; preds = %for.cond17
  br label %cond.end22, !dbg !8480

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_ce_s_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !8480
  %9 = load i32, i32* %j, align 4, !dbg !8480
  %call24 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond23, i32 %9, %struct.constraint_expr** %rhsp), !dbg !8480
  %tobool25 = icmp ne i32 %call24, 0, !dbg !8482
  br i1 %tobool25, label %for.body26, label %for.end, !dbg !8482

for.body26:                                       ; preds = %cond.end22
  %10 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp, align 8, !dbg !8483
  %11 = load %struct.constraint_expr*, %struct.constraint_expr** %rhsp, align 8, !dbg !8484
  %12 = bitcast %struct.constraint_expr* %10 to { i64, i64 }*, !dbg !8485
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !8485
  %14 = load i64, i64* %13, align 8, !dbg !8485
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !8485
  %16 = load i64, i64* %15, align 8, !dbg !8485
  %17 = bitcast %struct.constraint_expr* %11 to { i64, i64 }*, !dbg !8485
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 0, !dbg !8485
  %19 = load i64, i64* %18, align 8, !dbg !8485
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 1, !dbg !8485
  %21 = load i64, i64* %20, align 8, !dbg !8485
  %call27 = call %struct.constraint* @new_constraint(i64 %14, i64 %16, i64 %19, i64 %21), !dbg !8485
  call void @process_constraint(%struct.constraint* %call27), !dbg !8486
  br label %for.inc, !dbg !8486

for.inc:                                          ; preds = %for.body26
  %22 = load i32, i32* %j, align 4, !dbg !8487
  %inc = add i32 %22, 1, !dbg !8487
  store i32 %inc, i32* %j, align 4, !dbg !8487
  br label %for.cond17, !dbg !8488, !llvm.loop !8489

for.end:                                          ; preds = %cond.end22
  br label %for.inc28, !dbg !8490

for.inc28:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4, !dbg !8491
  %inc29 = add i32 %23, 1, !dbg !8491
  store i32 %inc29, i32* %i, align 4, !dbg !8491
  br label %for.cond, !dbg !8492, !llvm.loop !8493

for.end30:                                        ; preds = %cond.end13
  br label %if.end, !dbg !8495

if.else:                                          ; preds = %cond.end5
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %tmp, metadata !8496, metadata !DIExpression()), !dbg !8498
  %call32 = call { i64, i64 } @new_scalar_tmp_constraint_exp(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.66, i64 0, i64 0)), !dbg !8499
  %24 = bitcast %struct.constraint_expr* %tmp31 to { i64, i64 }*, !dbg !8499
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 0, !dbg !8499
  %26 = extractvalue { i64, i64 } %call32, 0, !dbg !8499
  store i64 %26, i64* %25, align 8, !dbg !8499
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 1, !dbg !8499
  %28 = extractvalue { i64, i64 } %call32, 1, !dbg !8499
  store i64 %28, i64* %27, align 8, !dbg !8499
  %29 = bitcast %struct.constraint_expr* %tmp to i8*, !dbg !8499
  %30 = bitcast %struct.constraint_expr* %tmp31 to i8*, !dbg !8499
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false), !dbg !8499
  store i32 0, i32* %i, align 4, !dbg !8500
  br label %for.cond33, !dbg !8502

for.cond33:                                       ; preds = %for.inc44, %if.else
  %31 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc.addr, align 8, !dbg !8503
  %tobool34 = icmp ne %struct.VEC_ce_s_heap* %31, null, !dbg !8503
  br i1 %tobool34, label %cond.true35, label %cond.false37, !dbg !8503

cond.true35:                                      ; preds = %for.cond33
  %32 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc.addr, align 8, !dbg !8503
  %base36 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %32, i32 0, i32 0, !dbg !8503
  br label %cond.end38, !dbg !8503

cond.false37:                                     ; preds = %for.cond33
  br label %cond.end38, !dbg !8503

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi %struct.VEC_ce_s_base* [ %base36, %cond.true35 ], [ null, %cond.false37 ], !dbg !8503
  %33 = load i32, i32* %i, align 4, !dbg !8503
  %call40 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond39, i32 %33, %struct.constraint_expr** %rhsp), !dbg !8503
  %tobool41 = icmp ne i32 %call40, 0, !dbg !8505
  br i1 %tobool41, label %for.body42, label %for.end46, !dbg !8505

for.body42:                                       ; preds = %cond.end38
  %34 = load %struct.constraint_expr*, %struct.constraint_expr** %rhsp, align 8, !dbg !8506
  %35 = bitcast %struct.constraint_expr* %tmp to { i64, i64 }*, !dbg !8507
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 0, !dbg !8507
  %37 = load i64, i64* %36, align 8, !dbg !8507
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 1, !dbg !8507
  %39 = load i64, i64* %38, align 8, !dbg !8507
  %40 = bitcast %struct.constraint_expr* %34 to { i64, i64 }*, !dbg !8507
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 0, !dbg !8507
  %42 = load i64, i64* %41, align 8, !dbg !8507
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 1, !dbg !8507
  %44 = load i64, i64* %43, align 8, !dbg !8507
  %call43 = call %struct.constraint* @new_constraint(i64 %37, i64 %39, i64 %42, i64 %44), !dbg !8507
  call void @process_constraint(%struct.constraint* %call43), !dbg !8508
  br label %for.inc44, !dbg !8508

for.inc44:                                        ; preds = %for.body42
  %45 = load i32, i32* %i, align 4, !dbg !8509
  %inc45 = add i32 %45, 1, !dbg !8509
  store i32 %inc45, i32* %i, align 4, !dbg !8509
  br label %for.cond33, !dbg !8510, !llvm.loop !8511

for.end46:                                        ; preds = %cond.end38
  store i32 0, i32* %i, align 4, !dbg !8513
  br label %for.cond47, !dbg !8515

for.cond47:                                       ; preds = %for.inc58, %for.end46
  %46 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc.addr, align 8, !dbg !8516
  %tobool48 = icmp ne %struct.VEC_ce_s_heap* %46, null, !dbg !8516
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !8516

cond.true49:                                      ; preds = %for.cond47
  %47 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc.addr, align 8, !dbg !8516
  %base50 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %47, i32 0, i32 0, !dbg !8516
  br label %cond.end52, !dbg !8516

cond.false51:                                     ; preds = %for.cond47
  br label %cond.end52, !dbg !8516

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_ce_s_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !8516
  %48 = load i32, i32* %i, align 4, !dbg !8516
  %call54 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond53, i32 %48, %struct.constraint_expr** %lhsp), !dbg !8516
  %tobool55 = icmp ne i32 %call54, 0, !dbg !8518
  br i1 %tobool55, label %for.body56, label %for.end60, !dbg !8518

for.body56:                                       ; preds = %cond.end52
  %49 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp, align 8, !dbg !8519
  %50 = bitcast %struct.constraint_expr* %49 to { i64, i64 }*, !dbg !8520
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %50, i32 0, i32 0, !dbg !8520
  %52 = load i64, i64* %51, align 8, !dbg !8520
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %50, i32 0, i32 1, !dbg !8520
  %54 = load i64, i64* %53, align 8, !dbg !8520
  %55 = bitcast %struct.constraint_expr* %tmp to { i64, i64 }*, !dbg !8520
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %55, i32 0, i32 0, !dbg !8520
  %57 = load i64, i64* %56, align 8, !dbg !8520
  %58 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %55, i32 0, i32 1, !dbg !8520
  %59 = load i64, i64* %58, align 8, !dbg !8520
  %call57 = call %struct.constraint* @new_constraint(i64 %52, i64 %54, i64 %57, i64 %59), !dbg !8520
  call void @process_constraint(%struct.constraint* %call57), !dbg !8521
  br label %for.inc58, !dbg !8521

for.inc58:                                        ; preds = %for.body56
  %60 = load i32, i32* %i, align 4, !dbg !8522
  %inc59 = add i32 %60, 1, !dbg !8522
  store i32 %inc59, i32* %i, align 4, !dbg !8522
  br label %for.cond47, !dbg !8523, !llvm.loop !8524

for.end60:                                        ; preds = %cond.end52
  br label %if.end

if.end:                                           ; preds = %for.end60, %for.end30
  ret void, !dbg !8526
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %vec_) #0 !dbg !8527 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_heap**, align 8
  store %struct.VEC_ce_s_heap** %vec_, %struct.VEC_ce_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %vec_.addr, metadata !8530, metadata !DIExpression()), !dbg !8531
  %0 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !8532
  %1 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %0, align 8, !dbg !8532
  %tobool = icmp ne %struct.VEC_ce_s_heap* %1, null, !dbg !8532
  br i1 %tobool, label %if.then, label %if.end, !dbg !8531

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !8532
  %3 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %2, align 8, !dbg !8532
  %4 = bitcast %struct.VEC_ce_s_heap* %3 to i8*, !dbg !8532
  call void @free(i8* %4), !dbg !8532
  br label %if.end, !dbg !8532

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !8531
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %5, align 8, !dbg !8531
  ret void, !dbg !8531
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_deref(%struct.VEC_ce_s_heap** %constraints) #0 !dbg !8534 {
entry:
  %constraints.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %c = alloca %struct.constraint_expr*, align 8
  %i = alloca i32, align 4
  %tmplhs = alloca %struct.constraint_expr, align 8
  %tmp = alloca %struct.constraint_expr, align 8
  store %struct.VEC_ce_s_heap** %constraints, %struct.VEC_ce_s_heap*** %constraints.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %constraints.addr, metadata !8535, metadata !DIExpression()), !dbg !8536
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %c, metadata !8537, metadata !DIExpression()), !dbg !8538
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8539, metadata !DIExpression()), !dbg !8540
  store i32 0, i32* %i, align 4, !dbg !8540
  store i32 0, i32* %i, align 4, !dbg !8541
  br label %for.cond, !dbg !8543

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %constraints.addr, align 8, !dbg !8544
  %1 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %0, align 8, !dbg !8544
  %tobool = icmp ne %struct.VEC_ce_s_heap* %1, null, !dbg !8544
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8544

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %constraints.addr, align 8, !dbg !8544
  %3 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %2, align 8, !dbg !8544
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %3, i32 0, i32 0, !dbg !8544
  br label %cond.end, !dbg !8544

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8544

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8544
  %4 = load i32, i32* %i, align 4, !dbg !8544
  %call = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond, i32 %4, %struct.constraint_expr** %c), !dbg !8544
  %tobool1 = icmp ne i32 %call, 0, !dbg !8546
  br i1 %tobool1, label %for.body, label %for.end, !dbg !8546

for.body:                                         ; preds = %cond.end
  %5 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !8547
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %5, i32 0, i32 0, !dbg !8550
  %6 = load i32, i32* %type, align 8, !dbg !8550
  %cmp = icmp eq i32 %6, 0, !dbg !8551
  br i1 %cmp, label %if.then, label %if.else, !dbg !8552

if.then:                                          ; preds = %for.body
  %7 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !8553
  %type2 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %7, i32 0, i32 0, !dbg !8554
  store i32 1, i32* %type2, align 8, !dbg !8555
  br label %if.end16, !dbg !8553

if.else:                                          ; preds = %for.body
  %8 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !8556
  %type3 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %8, i32 0, i32 0, !dbg !8558
  %9 = load i32, i32* %type3, align 8, !dbg !8558
  %cmp4 = icmp eq i32 %9, 2, !dbg !8559
  br i1 %cmp4, label %if.then5, label %if.else7, !dbg !8560

if.then5:                                         ; preds = %if.else
  %10 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !8561
  %type6 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %10, i32 0, i32 0, !dbg !8562
  store i32 0, i32* %type6, align 8, !dbg !8563
  br label %if.end15, !dbg !8561

if.else7:                                         ; preds = %if.else
  %11 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !8564
  %type8 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %11, i32 0, i32 0, !dbg !8566
  %12 = load i32, i32* %type8, align 8, !dbg !8566
  %cmp9 = icmp eq i32 %12, 1, !dbg !8567
  br i1 %cmp9, label %if.then10, label %if.else14, !dbg !8568

if.then10:                                        ; preds = %if.else7
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %tmplhs, metadata !8569, metadata !DIExpression()), !dbg !8571
  %call11 = call { i64, i64 } @new_scalar_tmp_constraint_exp(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.67, i64 0, i64 0)), !dbg !8572
  %13 = bitcast %struct.constraint_expr* %tmp to { i64, i64 }*, !dbg !8572
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !8572
  %15 = extractvalue { i64, i64 } %call11, 0, !dbg !8572
  store i64 %15, i64* %14, align 8, !dbg !8572
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !8572
  %17 = extractvalue { i64, i64 } %call11, 1, !dbg !8572
  store i64 %17, i64* %16, align 8, !dbg !8572
  %18 = bitcast %struct.constraint_expr* %tmplhs to i8*, !dbg !8572
  %19 = bitcast %struct.constraint_expr* %tmp to i8*, !dbg !8572
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false), !dbg !8572
  %20 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !8573
  %21 = bitcast %struct.constraint_expr* %tmplhs to { i64, i64 }*, !dbg !8574
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !8574
  %23 = load i64, i64* %22, align 8, !dbg !8574
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !8574
  %25 = load i64, i64* %24, align 8, !dbg !8574
  %26 = bitcast %struct.constraint_expr* %20 to { i64, i64 }*, !dbg !8574
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !8574
  %28 = load i64, i64* %27, align 8, !dbg !8574
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !8574
  %30 = load i64, i64* %29, align 8, !dbg !8574
  %call12 = call %struct.constraint* @new_constraint(i64 %23, i64 %25, i64 %28, i64 %30), !dbg !8574
  call void @process_constraint(%struct.constraint* %call12), !dbg !8575
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %tmplhs, i32 0, i32 1, !dbg !8576
  %31 = load i32, i32* %var, align 4, !dbg !8576
  %32 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !8577
  %var13 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %32, i32 0, i32 1, !dbg !8578
  store i32 %31, i32* %var13, align 4, !dbg !8579
  br label %if.end, !dbg !8580

if.else14:                                        ; preds = %if.else7
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 3090, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8581
  br label %if.end

if.end:                                           ; preds = %if.else14, %if.then10
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then5
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then
  br label %for.inc, !dbg !8582

for.inc:                                          ; preds = %if.end16
  %33 = load i32, i32* %i, align 4, !dbg !8583
  %inc = add i32 %33, 1, !dbg !8583
  store i32 %inc, i32* %i, align 4, !dbg !8583
  br label %for.cond, !dbg !8584, !llvm.loop !8585

for.end:                                          ; preds = %cond.end
  ret void, !dbg !8587
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info* @lookup_vi_for_tree(%union.tree_node* %t) #0 !dbg !8588 {
entry:
  %retval = alloca %struct.variable_info*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !8589, metadata !DIExpression()), !dbg !8590
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8591, metadata !DIExpression()), !dbg !8592
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @vi_for_tree, align 8, !dbg !8593
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8594
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !8594
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !8595
  store i8** %call, i8*** %slot, align 8, !dbg !8592
  %3 = load i8**, i8*** %slot, align 8, !dbg !8596
  %cmp = icmp eq i8** %3, null, !dbg !8598
  br i1 %cmp, label %if.then, label %if.end, !dbg !8599

if.then:                                          ; preds = %entry
  store %struct.variable_info* null, %struct.variable_info** %retval, align 8, !dbg !8600
  br label %return, !dbg !8600

if.end:                                           ; preds = %entry
  %4 = load i8**, i8*** %slot, align 8, !dbg !8601
  %5 = load i8*, i8** %4, align 8, !dbg !8602
  %6 = bitcast i8* %5 to %struct.variable_info*, !dbg !8603
  store %struct.variable_info* %6, %struct.variable_info** %retval, align 8, !dbg !8604
  br label %return, !dbg !8604

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.variable_info*, %struct.variable_info** %retval, align 8, !dbg !8605
  ret %struct.variable_info* %7, !dbg !8605
}

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @handle_const_call(%union.gimple_statement_d* %stmt, %struct.VEC_ce_s_heap** %results) #0 !dbg !8606 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %results.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %rhsc = alloca %struct.constraint_expr, align 8
  %k = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %argc = alloca %struct.VEC_ce_s_heap*, align 8
  %i = alloca i32, align 4
  %argp = alloca %struct.constraint_expr*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8609, metadata !DIExpression()), !dbg !8610
  store %struct.VEC_ce_s_heap** %results, %struct.VEC_ce_s_heap*** %results.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %results.addr, metadata !8611, metadata !DIExpression()), !dbg !8612
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhsc, metadata !8613, metadata !DIExpression()), !dbg !8614
  call void @llvm.dbg.declare(metadata i32* %k, metadata !8615, metadata !DIExpression()), !dbg !8616
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8617
  %call = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %0), !dbg !8619
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !8619
  br i1 %tobool, label %if.then, label %if.end, !dbg !8620

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8621
  %call1 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %1), !dbg !8623
  call void @make_constraint_to(i32 5, %union.tree_node* %call1), !dbg !8624
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 1, !dbg !8625
  store i32 5, i32* %var, align 4, !dbg !8626
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 2, !dbg !8627
  store i64 0, i64* %offset, align 8, !dbg !8628
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 0, !dbg !8629
  store i32 0, i32* %type, align 8, !dbg !8630
  %2 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8631
  %call2 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %2, %struct.constraint_expr* %rhsc), !dbg !8631
  br label %if.end, !dbg !8632

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %k, align 4, !dbg !8633
  br label %for.cond, !dbg !8635

for.cond:                                         ; preds = %for.inc15, %if.end
  %3 = load i32, i32* %k, align 4, !dbg !8636
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8638
  %call3 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %4), !dbg !8639
  %cmp = icmp ult i32 %3, %call3, !dbg !8640
  br i1 %cmp, label %for.body, label %for.end17, !dbg !8641

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !8642, metadata !DIExpression()), !dbg !8644
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8645
  %6 = load i32, i32* %k, align 4, !dbg !8646
  %call4 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %5, i32 %6), !dbg !8647
  store %union.tree_node* %call4, %union.tree_node** %arg, align 8, !dbg !8644
  %7 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8648
  %call5 = call zeroext i8 @could_have_pointers(%union.tree_node* %7), !dbg !8650
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8650
  br i1 %tobool6, label %if.then7, label %if.end14, !dbg !8651

if.then7:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %argc, metadata !8652, metadata !DIExpression()), !dbg !8654
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %argc, align 8, !dbg !8654
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8655, metadata !DIExpression()), !dbg !8656
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %argp, metadata !8657, metadata !DIExpression()), !dbg !8658
  %8 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8659
  call void @get_constraint_for(%union.tree_node* %8, %struct.VEC_ce_s_heap** %argc), !dbg !8660
  store i32 0, i32* %i, align 4, !dbg !8661
  br label %for.cond8, !dbg !8663

for.cond8:                                        ; preds = %for.inc, %if.then7
  %9 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %argc, align 8, !dbg !8664
  %tobool9 = icmp ne %struct.VEC_ce_s_heap* %9, null, !dbg !8664
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !8664

cond.true:                                        ; preds = %for.cond8
  %10 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %argc, align 8, !dbg !8664
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %10, i32 0, i32 0, !dbg !8664
  br label %cond.end, !dbg !8664

cond.false:                                       ; preds = %for.cond8
  br label %cond.end, !dbg !8664

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8664
  %11 = load i32, i32* %i, align 4, !dbg !8664
  %call10 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond, i32 %11, %struct.constraint_expr** %argp), !dbg !8664
  %tobool11 = icmp ne i32 %call10, 0, !dbg !8666
  br i1 %tobool11, label %for.body12, label %for.end, !dbg !8666

for.body12:                                       ; preds = %cond.end
  %12 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8667
  %13 = load %struct.constraint_expr*, %struct.constraint_expr** %argp, align 8, !dbg !8667
  %call13 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %12, %struct.constraint_expr* %13), !dbg !8667
  br label %for.inc, !dbg !8667

for.inc:                                          ; preds = %for.body12
  %14 = load i32, i32* %i, align 4, !dbg !8668
  %inc = add i32 %14, 1, !dbg !8668
  store i32 %inc, i32* %i, align 4, !dbg !8668
  br label %for.cond8, !dbg !8669, !llvm.loop !8670

for.end:                                          ; preds = %cond.end
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %argc), !dbg !8672
  br label %if.end14, !dbg !8673

if.end14:                                         ; preds = %for.end, %for.body
  br label %for.inc15, !dbg !8674

for.inc15:                                        ; preds = %if.end14
  %15 = load i32, i32* %k, align 4, !dbg !8675
  %inc16 = add i32 %15, 1, !dbg !8675
  store i32 %inc16, i32* %k, align 4, !dbg !8675
  br label %for.cond, !dbg !8676, !llvm.loop !8677

for.end17:                                        ; preds = %for.cond
  %var18 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 1, !dbg !8679
  store i32 4, i32* %var18, align 4, !dbg !8680
  %offset19 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 2, !dbg !8681
  store i64 0, i64* %offset19, align 8, !dbg !8682
  %type20 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 0, !dbg !8683
  store i32 2, i32* %type20, align 8, !dbg !8684
  %16 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8685
  %call21 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %16, %struct.constraint_expr* %rhsc), !dbg !8685
  ret void, !dbg !8686
}

; Function Attrs: noinline nounwind uwtable
define internal void @handle_pure_call(%union.gimple_statement_d* %stmt, %struct.VEC_ce_s_heap** %results) #0 !dbg !8687 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %results.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %rhsc = alloca %struct.constraint_expr, align 8
  %i = alloca i32, align 4
  %need_callused = alloca i8, align 1
  %arg = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8688, metadata !DIExpression()), !dbg !8689
  store %struct.VEC_ce_s_heap** %results, %struct.VEC_ce_s_heap*** %results.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %results.addr, metadata !8690, metadata !DIExpression()), !dbg !8691
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhsc, metadata !8692, metadata !DIExpression()), !dbg !8693
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8694, metadata !DIExpression()), !dbg !8695
  call void @llvm.dbg.declare(metadata i8* %need_callused, metadata !8696, metadata !DIExpression()), !dbg !8697
  store i8 0, i8* %need_callused, align 1, !dbg !8697
  store i32 0, i32* %i, align 4, !dbg !8698
  br label %for.cond, !dbg !8700

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8701
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8703
  %call = call i32 @gimple_call_num_args(%union.gimple_statement_d* %1), !dbg !8704
  %cmp = icmp ult i32 %0, %call, !dbg !8705
  br i1 %cmp, label %for.body, label %for.end, !dbg !8706

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !8707, metadata !DIExpression()), !dbg !8709
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8710
  %3 = load i32, i32* %i, align 4, !dbg !8711
  %call1 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %2, i32 %3), !dbg !8712
  store %union.tree_node* %call1, %union.tree_node** %arg, align 8, !dbg !8709
  %4 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8713
  %call2 = call zeroext i8 @could_have_pointers(%union.tree_node* %4), !dbg !8715
  %tobool = icmp ne i8 %call2, 0, !dbg !8715
  br i1 %tobool, label %if.then, label %if.end, !dbg !8716

if.then:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8717
  call void @make_constraint_to(i32 5, %union.tree_node* %5), !dbg !8719
  store i8 1, i8* %need_callused, align 1, !dbg !8720
  br label %if.end, !dbg !8721

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !8722

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !8723
  %inc = add i32 %6, 1, !dbg !8723
  store i32 %inc, i32* %i, align 4, !dbg !8723
  br label %for.cond, !dbg !8724, !llvm.loop !8725

for.end:                                          ; preds = %for.cond
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8727
  %call3 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %7), !dbg !8729
  %tobool4 = icmp ne %union.tree_node* %call3, null, !dbg !8729
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !8730

if.then5:                                         ; preds = %for.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8731
  %call6 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %8), !dbg !8733
  call void @make_constraint_to(i32 5, %union.tree_node* %call6), !dbg !8734
  store i8 1, i8* %need_callused, align 1, !dbg !8735
  br label %if.end7, !dbg !8736

if.end7:                                          ; preds = %if.then5, %for.end
  %9 = load i8, i8* %need_callused, align 1, !dbg !8737
  %tobool8 = icmp ne i8 %9, 0, !dbg !8737
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !8739

if.then9:                                         ; preds = %if.end7
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 1, !dbg !8740
  store i32 5, i32* %var, align 4, !dbg !8742
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 2, !dbg !8743
  store i64 0, i64* %offset, align 8, !dbg !8744
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 0, !dbg !8745
  store i32 0, i32* %type, align 8, !dbg !8746
  %10 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8747
  %call10 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %10, %struct.constraint_expr* %rhsc), !dbg !8747
  br label %if.end11, !dbg !8748

if.end11:                                         ; preds = %if.then9, %if.end7
  %var12 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 1, !dbg !8749
  store i32 4, i32* %var12, align 4, !dbg !8750
  %offset13 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 2, !dbg !8751
  store i64 0, i64* %offset13, align 8, !dbg !8752
  %type14 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 0, !dbg !8753
  store i32 0, i32* %type14, align 8, !dbg !8754
  %11 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8755
  %call15 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %11, %struct.constraint_expr* %rhsc), !dbg !8755
  ret void, !dbg !8756
}

; Function Attrs: noinline nounwind uwtable
define internal void @handle_rhs_call(%union.gimple_statement_d* %stmt, %struct.VEC_ce_s_heap** %results) #0 !dbg !8757 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %results.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %rhsc = alloca %struct.constraint_expr, align 8
  %i = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %tmpc = alloca %struct.VEC_ce_s_heap*, align 8
  %lhsc = alloca %struct.constraint_expr, align 8
  %c = alloca %struct.constraint_expr*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8758, metadata !DIExpression()), !dbg !8759
  store %struct.VEC_ce_s_heap** %results, %struct.VEC_ce_s_heap*** %results.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %results.addr, metadata !8760, metadata !DIExpression()), !dbg !8761
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhsc, metadata !8762, metadata !DIExpression()), !dbg !8763
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8764, metadata !DIExpression()), !dbg !8765
  store i32 0, i32* %i, align 4, !dbg !8766
  br label %for.cond, !dbg !8768

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8769
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8771
  %call = call i32 @gimple_call_num_args(%union.gimple_statement_d* %1), !dbg !8772
  %cmp = icmp ult i32 %0, %call, !dbg !8773
  br i1 %cmp, label %for.body, label %for.end, !dbg !8774

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !8775, metadata !DIExpression()), !dbg !8777
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8778
  %3 = load i32, i32* %i, align 4, !dbg !8779
  %call1 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %2, i32 %3), !dbg !8780
  store %union.tree_node* %call1, %union.tree_node** %arg, align 8, !dbg !8777
  %4 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8781
  %call2 = call zeroext i8 @could_have_pointers(%union.tree_node* %4), !dbg !8783
  %tobool = icmp ne i8 %call2, 0, !dbg !8783
  br i1 %tobool, label %if.then, label %if.end, !dbg !8784

if.then:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8785
  call void @make_escape_constraint(%union.tree_node* %5), !dbg !8786
  br label %if.end, !dbg !8786

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !8787

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !8788
  %inc = add i32 %6, 1, !dbg !8788
  store i32 %inc, i32* %i, align 4, !dbg !8788
  br label %for.cond, !dbg !8789, !llvm.loop !8790

for.end:                                          ; preds = %for.cond
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8792
  %call3 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %7), !dbg !8794
  %tobool4 = icmp ne %union.tree_node* %call3, null, !dbg !8794
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !8795

if.then5:                                         ; preds = %for.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8796
  %call6 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %8), !dbg !8797
  call void @make_escape_constraint(%union.tree_node* %call6), !dbg !8798
  br label %if.end7, !dbg !8798

if.end7:                                          ; preds = %if.then5, %for.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8799
  %call8 = call zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %9), !dbg !8801
  %conv = zext i8 %call8 to i32, !dbg !8801
  %tobool9 = icmp ne i32 %conv, 0, !dbg !8801
  br i1 %tobool9, label %land.lhs.true, label %if.end29, !dbg !8802

land.lhs.true:                                    ; preds = %if.end7
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8803
  %call10 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %10), !dbg !8804
  %cmp11 = icmp ne %union.tree_node* %call10, null, !dbg !8805
  br i1 %cmp11, label %land.lhs.true13, label %if.end29, !dbg !8806

land.lhs.true13:                                  ; preds = %land.lhs.true
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8807
  %call14 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %11), !dbg !8807
  %common = bitcast %union.tree_node* %call14 to %struct.tree_common*, !dbg !8807
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8807
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8807
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !8807
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !8807
  %bf.load = load i64, i64* %13, align 8, !dbg !8807
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !8807
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8807
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8807
  %tobool15 = icmp ne i32 %bf.cast, 0, !dbg !8807
  br i1 %tobool15, label %if.then16, label %if.end29, !dbg !8808

if.then16:                                        ; preds = %land.lhs.true13
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %tmpc, metadata !8809, metadata !DIExpression()), !dbg !8811
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %tmpc, align 8, !dbg !8811
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhsc, metadata !8812, metadata !DIExpression()), !dbg !8813
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %c, metadata !8814, metadata !DIExpression()), !dbg !8815
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8816
  %call17 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %14), !dbg !8817
  call void @get_constraint_for_address_of(%union.tree_node* %call17, %struct.VEC_ce_s_heap** %tmpc), !dbg !8818
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhsc, i32 0, i32 1, !dbg !8819
  store i32 3, i32* %var, align 4, !dbg !8820
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhsc, i32 0, i32 2, !dbg !8821
  store i64 0, i64* %offset, align 8, !dbg !8822
  %type18 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhsc, i32 0, i32 0, !dbg !8823
  store i32 0, i32* %type18, align 8, !dbg !8824
  store i32 0, i32* %i, align 4, !dbg !8825
  br label %for.cond19, !dbg !8827

for.cond19:                                       ; preds = %for.inc26, %if.then16
  %15 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %tmpc, align 8, !dbg !8828
  %tobool20 = icmp ne %struct.VEC_ce_s_heap* %15, null, !dbg !8828
  br i1 %tobool20, label %cond.true, label %cond.false, !dbg !8828

cond.true:                                        ; preds = %for.cond19
  %16 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %tmpc, align 8, !dbg !8828
  %base21 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %16, i32 0, i32 0, !dbg !8828
  br label %cond.end, !dbg !8828

cond.false:                                       ; preds = %for.cond19
  br label %cond.end, !dbg !8828

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base21, %cond.true ], [ null, %cond.false ], !dbg !8828
  %17 = load i32, i32* %i, align 4, !dbg !8828
  %call22 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond, i32 %17, %struct.constraint_expr** %c), !dbg !8828
  %tobool23 = icmp ne i32 %call22, 0, !dbg !8830
  br i1 %tobool23, label %for.body24, label %for.end28, !dbg !8830

for.body24:                                       ; preds = %cond.end
  %18 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !8831
  %19 = bitcast %struct.constraint_expr* %lhsc to { i64, i64 }*, !dbg !8832
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 0, !dbg !8832
  %21 = load i64, i64* %20, align 8, !dbg !8832
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 1, !dbg !8832
  %23 = load i64, i64* %22, align 8, !dbg !8832
  %24 = bitcast %struct.constraint_expr* %18 to { i64, i64 }*, !dbg !8832
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 0, !dbg !8832
  %26 = load i64, i64* %25, align 8, !dbg !8832
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 1, !dbg !8832
  %28 = load i64, i64* %27, align 8, !dbg !8832
  %call25 = call %struct.constraint* @new_constraint(i64 %21, i64 %23, i64 %26, i64 %28), !dbg !8832
  call void @process_constraint(%struct.constraint* %call25), !dbg !8833
  br label %for.inc26, !dbg !8833

for.inc26:                                        ; preds = %for.body24
  %29 = load i32, i32* %i, align 4, !dbg !8834
  %inc27 = add i32 %29, 1, !dbg !8834
  store i32 %inc27, i32* %i, align 4, !dbg !8834
  br label %for.cond19, !dbg !8835, !llvm.loop !8836

for.end28:                                        ; preds = %cond.end
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %tmpc), !dbg !8838
  br label %if.end29, !dbg !8839

if.end29:                                         ; preds = %for.end28, %land.lhs.true13, %land.lhs.true, %if.end7
  %var30 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 1, !dbg !8840
  store i32 4, i32* %var30, align 4, !dbg !8841
  %offset31 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 2, !dbg !8842
  store i64 0, i64* %offset31, align 8, !dbg !8843
  %type32 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhsc, i32 0, i32 0, !dbg !8844
  store i32 0, i32* %type32, align 8, !dbg !8845
  %30 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !8846
  %call33 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %30, %struct.constraint_expr* %rhsc), !dbg !8846
  ret void, !dbg !8847
}

; Function Attrs: noinline nounwind uwtable
define internal void @handle_lhs_call(%union.tree_node* %lhs, i32 %flags, %struct.VEC_ce_s_heap* %rhsc, %union.tree_node* %fndecl) #0 !dbg !8848 {
entry:
  %lhs.addr = alloca %union.tree_node*, align 8
  %flags.addr = alloca i32, align 4
  %rhsc.addr = alloca %struct.VEC_ce_s_heap*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %lhsc = alloca %struct.VEC_ce_s_heap*, align 8
  %vi = alloca %struct.variable_info*, align 8
  %tmpc = alloca %struct.constraint_expr, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8851, metadata !DIExpression()), !dbg !8852
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8853, metadata !DIExpression()), !dbg !8854
  store %struct.VEC_ce_s_heap* %rhsc, %struct.VEC_ce_s_heap** %rhsc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %rhsc.addr, metadata !8855, metadata !DIExpression()), !dbg !8856
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !8857, metadata !DIExpression()), !dbg !8858
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %lhsc, metadata !8859, metadata !DIExpression()), !dbg !8860
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !8860
  %0 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8861
  call void @get_constraint_for(%union.tree_node* %0, %struct.VEC_ce_s_heap** %lhsc), !dbg !8862
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8863
  %and = and i32 %1, 16, !dbg !8865
  %tobool = icmp ne i32 %and, 0, !dbg !8865
  br i1 %tobool, label %if.then, label %if.else, !dbg !8866

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !8867, metadata !DIExpression()), !dbg !8869
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8870
  %call = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %2), !dbg !8871
  %call1 = call %struct.variable_info* @make_constraint_from_heapvar(%struct.variable_info* %call, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i64 0, i64 0)), !dbg !8872
  store %struct.variable_info* %call1, %struct.variable_info** %vi, align 8, !dbg !8873
  %3 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8874
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %3, i32 0, i32 7, !dbg !8874
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8874
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !8874
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8874
  %5 = bitcast i40* %decl_flag_1 to i64*, !dbg !8874
  %bf.load = load i64, i64* %5, align 8, !dbg !8875
  %bf.clear = and i64 %bf.load, -33554433, !dbg !8875
  store i64 %bf.clear, i64* %5, align 8, !dbg !8875
  %6 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8876
  %is_global_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %6, i32 0, i32 1, !dbg !8877
  %bf.load2 = load i8, i8* %is_global_var, align 4, !dbg !8878
  %bf.clear3 = and i8 %bf.load2, 127, !dbg !8878
  store i8 %bf.clear3, i8* %is_global_var, align 4, !dbg !8878
  %7 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8879
  %tobool4 = icmp ne %union.tree_node* %7, null, !dbg !8879
  br i1 %tobool4, label %lor.lhs.false, label %if.then7, !dbg !8881

lor.lhs.false:                                    ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8882
  %function_decl = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !8882
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8882
  %bf.load5 = load i32, i32* %built_in_class, align 8, !dbg !8882
  %bf.lshr = lshr i32 %bf.load5, 11, !dbg !8882
  %bf.clear6 = and i32 %bf.lshr, 3, !dbg !8882
  %cmp = icmp ne i32 %bf.clear6, 3, !dbg !8883
  br i1 %cmp, label %if.then7, label %if.end, !dbg !8884

if.then7:                                         ; preds = %lor.lhs.false, %if.then
  %9 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !8885
  call void @make_constraint_from(%struct.variable_info* %9, i32 4), !dbg !8886
  br label %if.end, !dbg !8886

if.end:                                           ; preds = %if.then7, %lor.lhs.false
  br label %if.end25, !dbg !8887

if.else:                                          ; preds = %entry
  %10 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc.addr, align 8, !dbg !8888
  %tobool8 = icmp ne %struct.VEC_ce_s_heap* %10, null, !dbg !8888
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !8888

cond.true:                                        ; preds = %if.else
  %11 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc.addr, align 8, !dbg !8888
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %11, i32 0, i32 0, !dbg !8888
  br label %cond.end, !dbg !8888

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !8888

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8888
  %call9 = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond), !dbg !8888
  %cmp10 = icmp ugt i32 %call9, 0, !dbg !8890
  br i1 %cmp10, label %if.then11, label %if.end24, !dbg !8891

if.then11:                                        ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8892
  %call12 = call %union.tree_node* @get_base_address(%union.tree_node* %12), !dbg !8894
  store %union.tree_node* %call12, %union.tree_node** %lhs.addr, align 8, !dbg !8895
  %13 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8896
  %tobool13 = icmp ne %union.tree_node* %13, null, !dbg !8896
  br i1 %tobool13, label %land.lhs.true, label %if.end23, !dbg !8898

land.lhs.true:                                    ; preds = %if.then11
  %14 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8899
  %base14 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !8899
  %15 = bitcast %struct.tree_base* %base14 to i64*, !dbg !8899
  %bf.load15 = load i64, i64* %15, align 8, !dbg !8899
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !8899
  %bf.cast = trunc i64 %bf.clear16 to i32, !dbg !8899
  %idxprom = sext i32 %bf.cast to i64, !dbg !8899
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8899
  %16 = load i32, i32* %arrayidx, align 4, !dbg !8899
  %cmp17 = icmp eq i32 %16, 3, !dbg !8899
  br i1 %cmp17, label %land.lhs.true18, label %if.end23, !dbg !8900

land.lhs.true18:                                  ; preds = %land.lhs.true
  %17 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8901
  %call19 = call zeroext i8 @is_global_var(%union.tree_node* %17), !dbg !8902
  %conv = zext i8 %call19 to i32, !dbg !8902
  %tobool20 = icmp ne i32 %conv, 0, !dbg !8902
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !8903

if.then21:                                        ; preds = %land.lhs.true18
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %tmpc, metadata !8904, metadata !DIExpression()), !dbg !8906
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %tmpc, i32 0, i32 1, !dbg !8907
  store i32 3, i32* %var, align 4, !dbg !8908
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %tmpc, i32 0, i32 2, !dbg !8909
  store i64 0, i64* %offset, align 8, !dbg !8910
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %tmpc, i32 0, i32 0, !dbg !8911
  store i32 0, i32* %type, align 8, !dbg !8912
  %call22 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %lhsc, %struct.constraint_expr* %tmpc), !dbg !8913
  br label %if.end23, !dbg !8914

if.end23:                                         ; preds = %if.then21, %land.lhs.true18, %land.lhs.true, %if.then11
  %18 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !8915
  %19 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc.addr, align 8, !dbg !8916
  call void @process_all_all_constraints(%struct.VEC_ce_s_heap* %18, %struct.VEC_ce_s_heap* %19), !dbg !8917
  br label %if.end24, !dbg !8918

if.end24:                                         ; preds = %if.end23, %cond.end
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.end
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %lhsc), !dbg !8919
  ret void, !dbg !8920
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !8921 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8922, metadata !DIExpression()), !dbg !8923
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8924
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !8925
  ret %union.tree_node* %call, !dbg !8926
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !8927 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8928, metadata !DIExpression()), !dbg !8929
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !8930, metadata !DIExpression()), !dbg !8931
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8932
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !8933
  store i32 %call, i32* %num_ops, align 4, !dbg !8934
  %1 = load i32, i32* %num_ops, align 4, !dbg !8935
  %sub = sub i32 %1, 3, !dbg !8936
  ret i32 %sub, !dbg !8937
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info* @first_vi_for_offset(%struct.variable_info* %start, i64 %offset) #0 !dbg !8938 {
entry:
  %retval = alloca %struct.variable_info*, align 8
  %start.addr = alloca %struct.variable_info*, align 8
  %offset.addr = alloca i64, align 8
  store %struct.variable_info* %start, %struct.variable_info** %start.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %start.addr, metadata !8941, metadata !DIExpression()), !dbg !8942
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !8943, metadata !DIExpression()), !dbg !8944
  %0 = load i64, i64* %offset.addr, align 8, !dbg !8945
  %1 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !8947
  %fullsize = getelementptr inbounds %struct.variable_info, %struct.variable_info* %1, i32 0, i32 5, !dbg !8948
  %2 = load i64, i64* %fullsize, align 8, !dbg !8948
  %cmp = icmp uge i64 %0, %2, !dbg !8949
  br i1 %cmp, label %if.then, label %if.end, !dbg !8950

if.then:                                          ; preds = %entry
  store %struct.variable_info* null, %struct.variable_info** %retval, align 8, !dbg !8951
  br label %return, !dbg !8951

if.end:                                           ; preds = %entry
  %3 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !8952
  %offset1 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %3, i32 0, i32 3, !dbg !8954
  %4 = load i64, i64* %offset1, align 8, !dbg !8954
  %5 = load i64, i64* %offset.addr, align 8, !dbg !8955
  %cmp2 = icmp ugt i64 %4, %5, !dbg !8956
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !8957

if.then3:                                         ; preds = %if.end
  %6 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !8958
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %6, i32 0, i32 7, !dbg !8959
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8959
  %call = call %struct.variable_info* @lookup_vi_for_tree(%union.tree_node* %7), !dbg !8960
  store %struct.variable_info* %call, %struct.variable_info** %start.addr, align 8, !dbg !8961
  br label %if.end4, !dbg !8962

if.end4:                                          ; preds = %if.then3, %if.end
  br label %while.cond, !dbg !8963

while.cond:                                       ; preds = %if.end10, %if.end4
  %8 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !8964
  %tobool = icmp ne %struct.variable_info* %8, null, !dbg !8963
  br i1 %tobool, label %while.body, label %while.end, !dbg !8963

while.body:                                       ; preds = %while.cond
  %9 = load i64, i64* %offset.addr, align 8, !dbg !8965
  %10 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !8968
  %offset5 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %10, i32 0, i32 3, !dbg !8969
  %11 = load i64, i64* %offset5, align 8, !dbg !8969
  %cmp6 = icmp uge i64 %9, %11, !dbg !8970
  br i1 %cmp6, label %land.lhs.true, label %if.end10, !dbg !8971

land.lhs.true:                                    ; preds = %while.body
  %12 = load i64, i64* %offset.addr, align 8, !dbg !8972
  %13 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !8973
  %offset7 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %13, i32 0, i32 3, !dbg !8974
  %14 = load i64, i64* %offset7, align 8, !dbg !8974
  %sub = sub i64 %12, %14, !dbg !8975
  %15 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !8976
  %size = getelementptr inbounds %struct.variable_info, %struct.variable_info* %15, i32 0, i32 4, !dbg !8977
  %16 = load i64, i64* %size, align 8, !dbg !8977
  %cmp8 = icmp ult i64 %sub, %16, !dbg !8978
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !8979

if.then9:                                         ; preds = %land.lhs.true
  %17 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !8980
  store %struct.variable_info* %17, %struct.variable_info** %retval, align 8, !dbg !8981
  br label %return, !dbg !8981

if.end10:                                         ; preds = %land.lhs.true, %while.body
  %18 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !8982
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %18, i32 0, i32 2, !dbg !8983
  %19 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !8983
  store %struct.variable_info* %19, %struct.variable_info** %start.addr, align 8, !dbg !8984
  br label %while.cond, !dbg !8963, !llvm.loop !8985

while.end:                                        ; preds = %while.cond
  store %struct.variable_info* null, %struct.variable_info** %retval, align 8, !dbg !8987
  br label %return, !dbg !8987

return:                                           ; preds = %while.end, %if.then9, %if.then
  %20 = load %struct.variable_info*, %struct.variable_info** %retval, align 8, !dbg !8988
  ret %struct.variable_info* %20, !dbg !8988
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !8989 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8990, metadata !DIExpression()), !dbg !8991
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8992
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8993
  %cmp = icmp eq i32 %call, 6, !dbg !8994
  %conv = zext i1 %cmp to i32, !dbg !8994
  %conv1 = trunc i32 %conv to i8, !dbg !8993
  ret i8 %conv1, !dbg !8995
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !8996 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8997, metadata !DIExpression()), !dbg !8998
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8999
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9000
  ret %union.tree_node* %call, !dbg !9001
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !9002 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9003, metadata !DIExpression()), !dbg !9004
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9005
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9006
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !9007
  %1 = load i32, i32* %num_ops, align 4, !dbg !9007
  ret i32 %1, !dbg !9008
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !9009 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9010, metadata !DIExpression()), !dbg !9011
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9012
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !9013
  ret %union.tree_node* %call, !dbg !9014
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_structure_copy(%union.tree_node* %lhsop, %union.tree_node* %rhsop) #0 !dbg !9015 {
entry:
  %lhsop.addr = alloca %union.tree_node*, align 8
  %rhsop.addr = alloca %union.tree_node*, align 8
  %lhsp = alloca %struct.constraint_expr*, align 8
  %rhsp = alloca %struct.constraint_expr*, align 8
  %lhsc = alloca %struct.VEC_ce_s_heap*, align 8
  %rhsc = alloca %struct.VEC_ce_s_heap*, align 8
  %j = alloca i32, align 4
  %lhssize = alloca i64, align 8
  %lhsmaxsize = alloca i64, align 8
  %lhsoffset = alloca i64, align 8
  %rhssize = alloca i64, align 8
  %rhsmaxsize = alloca i64, align 8
  %rhsoffset = alloca i64, align 8
  %k = alloca i32, align 4
  %lhsv = alloca %struct.variable_info*, align 8
  %rhsv = alloca %struct.variable_info*, align 8
  store %union.tree_node* %lhsop, %union.tree_node** %lhsop.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhsop.addr, metadata !9018, metadata !DIExpression()), !dbg !9019
  store %union.tree_node* %rhsop, %union.tree_node** %rhsop.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhsop.addr, metadata !9020, metadata !DIExpression()), !dbg !9021
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %lhsp, metadata !9022, metadata !DIExpression()), !dbg !9023
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %rhsp, metadata !9024, metadata !DIExpression()), !dbg !9025
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %lhsc, metadata !9026, metadata !DIExpression()), !dbg !9027
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !9027
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %rhsc, metadata !9028, metadata !DIExpression()), !dbg !9029
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !9029
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9030, metadata !DIExpression()), !dbg !9031
  %0 = load %union.tree_node*, %union.tree_node** %lhsop.addr, align 8, !dbg !9032
  call void @get_constraint_for(%union.tree_node* %0, %struct.VEC_ce_s_heap** %lhsc), !dbg !9033
  %1 = load %union.tree_node*, %union.tree_node** %rhsop.addr, align 8, !dbg !9034
  call void @get_constraint_for(%union.tree_node* %1, %struct.VEC_ce_s_heap** %rhsc), !dbg !9035
  %2 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !9036
  %tobool = icmp ne %struct.VEC_ce_s_heap* %2, null, !dbg !9036
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9036

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !9036
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %3, i32 0, i32 0, !dbg !9036
  br label %cond.end, !dbg !9036

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9036

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9036
  %call = call %struct.constraint_expr* @VEC_ce_s_base_index(%struct.VEC_ce_s_base* %cond, i32 0), !dbg !9036
  store %struct.constraint_expr* %call, %struct.constraint_expr** %lhsp, align 8, !dbg !9037
  %4 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !9038
  %tobool1 = icmp ne %struct.VEC_ce_s_heap* %4, null, !dbg !9038
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !9038

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !9038
  %base3 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %5, i32 0, i32 0, !dbg !9038
  br label %cond.end5, !dbg !9038

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9038

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ce_s_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !9038
  %call7 = call %struct.constraint_expr* @VEC_ce_s_base_index(%struct.VEC_ce_s_base* %cond6, i32 0), !dbg !9038
  store %struct.constraint_expr* %call7, %struct.constraint_expr** %rhsp, align 8, !dbg !9039
  %6 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp, align 8, !dbg !9040
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %6, i32 0, i32 0, !dbg !9042
  %7 = load i32, i32* %type, align 8, !dbg !9042
  %cmp = icmp eq i32 %7, 1, !dbg !9043
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9044

lor.lhs.false:                                    ; preds = %cond.end5
  %8 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp, align 8, !dbg !9045
  %type8 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %8, i32 0, i32 0, !dbg !9046
  %9 = load i32, i32* %type8, align 8, !dbg !9046
  %cmp9 = icmp eq i32 %9, 2, !dbg !9047
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false11, !dbg !9048

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp, align 8, !dbg !9049
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %10, i32 0, i32 1, !dbg !9050
  %11 = load i32, i32* %var, align 4, !dbg !9050
  %cmp10 = icmp eq i32 %11, 1, !dbg !9051
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !9052

lor.lhs.false11:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load %struct.constraint_expr*, %struct.constraint_expr** %rhsp, align 8, !dbg !9053
  %type12 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %12, i32 0, i32 0, !dbg !9054
  %13 = load i32, i32* %type12, align 8, !dbg !9054
  %cmp13 = icmp eq i32 %13, 1, !dbg !9055
  br i1 %cmp13, label %if.then, label %if.else, !dbg !9056

if.then:                                          ; preds = %lor.lhs.false11, %land.lhs.true, %cond.end5
  %14 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !9057
  %15 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !9058
  call void @process_all_all_constraints(%struct.VEC_ce_s_heap* %14, %struct.VEC_ce_s_heap* %15), !dbg !9059
  br label %if.end80, !dbg !9059

if.else:                                          ; preds = %lor.lhs.false11
  %16 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp, align 8, !dbg !9060
  %type14 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %16, i32 0, i32 0, !dbg !9062
  %17 = load i32, i32* %type14, align 8, !dbg !9062
  %cmp15 = icmp eq i32 %17, 0, !dbg !9063
  br i1 %cmp15, label %land.lhs.true16, label %if.else78, !dbg !9064

land.lhs.true16:                                  ; preds = %if.else
  %18 = load %struct.constraint_expr*, %struct.constraint_expr** %rhsp, align 8, !dbg !9065
  %type17 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %18, i32 0, i32 0, !dbg !9066
  %19 = load i32, i32* %type17, align 8, !dbg !9066
  %cmp18 = icmp eq i32 %19, 0, !dbg !9067
  br i1 %cmp18, label %if.then22, label %lor.lhs.false19, !dbg !9068

lor.lhs.false19:                                  ; preds = %land.lhs.true16
  %20 = load %struct.constraint_expr*, %struct.constraint_expr** %rhsp, align 8, !dbg !9069
  %type20 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %20, i32 0, i32 0, !dbg !9070
  %21 = load i32, i32* %type20, align 8, !dbg !9070
  %cmp21 = icmp eq i32 %21, 2, !dbg !9071
  br i1 %cmp21, label %if.then22, label %if.else78, !dbg !9072

if.then22:                                        ; preds = %lor.lhs.false19, %land.lhs.true16
  call void @llvm.dbg.declare(metadata i64* %lhssize, metadata !9073, metadata !DIExpression()), !dbg !9075
  call void @llvm.dbg.declare(metadata i64* %lhsmaxsize, metadata !9076, metadata !DIExpression()), !dbg !9077
  call void @llvm.dbg.declare(metadata i64* %lhsoffset, metadata !9078, metadata !DIExpression()), !dbg !9079
  call void @llvm.dbg.declare(metadata i64* %rhssize, metadata !9080, metadata !DIExpression()), !dbg !9081
  call void @llvm.dbg.declare(metadata i64* %rhsmaxsize, metadata !9082, metadata !DIExpression()), !dbg !9083
  call void @llvm.dbg.declare(metadata i64* %rhsoffset, metadata !9084, metadata !DIExpression()), !dbg !9085
  call void @llvm.dbg.declare(metadata i32* %k, metadata !9086, metadata !DIExpression()), !dbg !9087
  store i32 0, i32* %k, align 4, !dbg !9087
  %22 = load %union.tree_node*, %union.tree_node** %lhsop.addr, align 8, !dbg !9088
  %call23 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %22, i64* %lhsoffset, i64* %lhssize, i64* %lhsmaxsize), !dbg !9089
  %23 = load %union.tree_node*, %union.tree_node** %rhsop.addr, align 8, !dbg !9090
  %call24 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %23, i64* %rhsoffset, i64* %rhssize, i64* %rhsmaxsize), !dbg !9091
  store i32 0, i32* %j, align 4, !dbg !9092
  br label %for.cond, !dbg !9094

for.cond:                                         ; preds = %if.end77, %if.then22
  %24 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !9095
  %tobool25 = icmp ne %struct.VEC_ce_s_heap* %24, null, !dbg !9095
  br i1 %tobool25, label %cond.true26, label %cond.false28, !dbg !9095

cond.true26:                                      ; preds = %for.cond
  %25 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %lhsc, align 8, !dbg !9095
  %base27 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %25, i32 0, i32 0, !dbg !9095
  br label %cond.end29, !dbg !9095

cond.false28:                                     ; preds = %for.cond
  br label %cond.end29, !dbg !9095

cond.end29:                                       ; preds = %cond.false28, %cond.true26
  %cond30 = phi %struct.VEC_ce_s_base* [ %base27, %cond.true26 ], [ null, %cond.false28 ], !dbg !9095
  %26 = load i32, i32* %j, align 4, !dbg !9095
  %call31 = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond30, i32 %26, %struct.constraint_expr** %lhsp), !dbg !9095
  %tobool32 = icmp ne i32 %call31, 0, !dbg !9097
  br i1 %tobool32, label %for.body, label %for.end, !dbg !9097

for.body:                                         ; preds = %cond.end29
  call void @llvm.dbg.declare(metadata %struct.variable_info** %lhsv, metadata !9098, metadata !DIExpression()), !dbg !9100
  call void @llvm.dbg.declare(metadata %struct.variable_info** %rhsv, metadata !9101, metadata !DIExpression()), !dbg !9102
  %27 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !9103
  %tobool33 = icmp ne %struct.VEC_ce_s_heap* %27, null, !dbg !9103
  br i1 %tobool33, label %cond.true34, label %cond.false36, !dbg !9103

cond.true34:                                      ; preds = %for.body
  %28 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !9103
  %base35 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %28, i32 0, i32 0, !dbg !9103
  br label %cond.end37, !dbg !9103

cond.false36:                                     ; preds = %for.body
  br label %cond.end37, !dbg !9103

cond.end37:                                       ; preds = %cond.false36, %cond.true34
  %cond38 = phi %struct.VEC_ce_s_base* [ %base35, %cond.true34 ], [ null, %cond.false36 ], !dbg !9103
  %29 = load i32, i32* %k, align 4, !dbg !9103
  %call39 = call %struct.constraint_expr* @VEC_ce_s_base_index(%struct.VEC_ce_s_base* %cond38, i32 %29), !dbg !9103
  store %struct.constraint_expr* %call39, %struct.constraint_expr** %rhsp, align 8, !dbg !9104
  %30 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp, align 8, !dbg !9105
  %var40 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %30, i32 0, i32 1, !dbg !9106
  %31 = load i32, i32* %var40, align 4, !dbg !9106
  %call41 = call %struct.variable_info* @get_varinfo(i32 %31), !dbg !9107
  store %struct.variable_info* %call41, %struct.variable_info** %lhsv, align 8, !dbg !9108
  %32 = load %struct.constraint_expr*, %struct.constraint_expr** %rhsp, align 8, !dbg !9109
  %var42 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %32, i32 0, i32 1, !dbg !9110
  %33 = load i32, i32* %var42, align 4, !dbg !9110
  %call43 = call %struct.variable_info* @get_varinfo(i32 %33), !dbg !9111
  store %struct.variable_info* %call43, %struct.variable_info** %rhsv, align 8, !dbg !9112
  %34 = load %struct.variable_info*, %struct.variable_info** %lhsv, align 8, !dbg !9113
  %may_have_pointers = getelementptr inbounds %struct.variable_info, %struct.variable_info* %34, i32 0, i32 1, !dbg !9115
  %bf.load = load i8, i8* %may_have_pointers, align 4, !dbg !9115
  %bf.lshr = lshr i8 %bf.load, 6, !dbg !9115
  %bf.clear = and i8 %bf.lshr, 1, !dbg !9115
  %bf.cast = zext i8 %bf.clear to i32, !dbg !9115
  %tobool44 = icmp ne i32 %bf.cast, 0, !dbg !9113
  br i1 %tobool44, label %land.lhs.true45, label %if.end, !dbg !9116

land.lhs.true45:                                  ; preds = %cond.end37
  %35 = load %struct.variable_info*, %struct.variable_info** %lhsv, align 8, !dbg !9117
  %offset = getelementptr inbounds %struct.variable_info, %struct.variable_info* %35, i32 0, i32 3, !dbg !9118
  %36 = load i64, i64* %offset, align 8, !dbg !9118
  %37 = load i64, i64* %rhsoffset, align 8, !dbg !9119
  %add = add i64 %36, %37, !dbg !9120
  %38 = load %struct.variable_info*, %struct.variable_info** %lhsv, align 8, !dbg !9121
  %size = getelementptr inbounds %struct.variable_info, %struct.variable_info* %38, i32 0, i32 4, !dbg !9122
  %39 = load i64, i64* %size, align 8, !dbg !9122
  %40 = load %struct.variable_info*, %struct.variable_info** %rhsv, align 8, !dbg !9123
  %offset46 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %40, i32 0, i32 3, !dbg !9124
  %41 = load i64, i64* %offset46, align 8, !dbg !9124
  %42 = load i64, i64* %lhsoffset, align 8, !dbg !9125
  %add47 = add i64 %41, %42, !dbg !9126
  %43 = load %struct.variable_info*, %struct.variable_info** %rhsv, align 8, !dbg !9127
  %size48 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %43, i32 0, i32 4, !dbg !9128
  %44 = load i64, i64* %size48, align 8, !dbg !9128
  %call49 = call zeroext i8 @ranges_overlap_p(i64 %add, i64 %39, i64 %add47, i64 %44), !dbg !9129
  %conv = zext i8 %call49 to i32, !dbg !9129
  %tobool50 = icmp ne i32 %conv, 0, !dbg !9129
  br i1 %tobool50, label %if.then51, label %if.end, !dbg !9130

if.then51:                                        ; preds = %land.lhs.true45
  %45 = load %struct.constraint_expr*, %struct.constraint_expr** %lhsp, align 8, !dbg !9131
  %46 = load %struct.constraint_expr*, %struct.constraint_expr** %rhsp, align 8, !dbg !9132
  %47 = bitcast %struct.constraint_expr* %45 to { i64, i64 }*, !dbg !9133
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 0, !dbg !9133
  %49 = load i64, i64* %48, align 8, !dbg !9133
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 1, !dbg !9133
  %51 = load i64, i64* %50, align 8, !dbg !9133
  %52 = bitcast %struct.constraint_expr* %46 to { i64, i64 }*, !dbg !9133
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %52, i32 0, i32 0, !dbg !9133
  %54 = load i64, i64* %53, align 8, !dbg !9133
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %52, i32 0, i32 1, !dbg !9133
  %56 = load i64, i64* %55, align 8, !dbg !9133
  %call52 = call %struct.constraint* @new_constraint(i64 %49, i64 %51, i64 %54, i64 %56), !dbg !9133
  call void @process_constraint(%struct.constraint* %call52), !dbg !9134
  br label %if.end, !dbg !9134

if.end:                                           ; preds = %if.then51, %land.lhs.true45, %cond.end37
  %57 = load %struct.variable_info*, %struct.variable_info** %lhsv, align 8, !dbg !9135
  %offset53 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %57, i32 0, i32 3, !dbg !9137
  %58 = load i64, i64* %offset53, align 8, !dbg !9137
  %59 = load i64, i64* %rhsoffset, align 8, !dbg !9138
  %add54 = add i64 %58, %59, !dbg !9139
  %60 = load %struct.variable_info*, %struct.variable_info** %lhsv, align 8, !dbg !9140
  %size55 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %60, i32 0, i32 4, !dbg !9141
  %61 = load i64, i64* %size55, align 8, !dbg !9141
  %add56 = add i64 %add54, %61, !dbg !9142
  %62 = load %struct.variable_info*, %struct.variable_info** %rhsv, align 8, !dbg !9143
  %offset57 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %62, i32 0, i32 3, !dbg !9144
  %63 = load i64, i64* %offset57, align 8, !dbg !9144
  %64 = load i64, i64* %lhsoffset, align 8, !dbg !9145
  %add58 = add i64 %63, %64, !dbg !9146
  %65 = load %struct.variable_info*, %struct.variable_info** %rhsv, align 8, !dbg !9147
  %size59 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %65, i32 0, i32 4, !dbg !9148
  %66 = load i64, i64* %size59, align 8, !dbg !9148
  %add60 = add i64 %add58, %66, !dbg !9149
  %cmp61 = icmp ugt i64 %add56, %add60, !dbg !9150
  br i1 %cmp61, label %if.then63, label %if.else75, !dbg !9151

if.then63:                                        ; preds = %if.end
  %67 = load i32, i32* %k, align 4, !dbg !9152
  %inc = add i32 %67, 1, !dbg !9152
  store i32 %inc, i32* %k, align 4, !dbg !9152
  %68 = load i32, i32* %k, align 4, !dbg !9154
  %69 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !9156
  %tobool64 = icmp ne %struct.VEC_ce_s_heap* %69, null, !dbg !9156
  br i1 %tobool64, label %cond.true65, label %cond.false67, !dbg !9156

cond.true65:                                      ; preds = %if.then63
  %70 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !9156
  %base66 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %70, i32 0, i32 0, !dbg !9156
  br label %cond.end68, !dbg !9156

cond.false67:                                     ; preds = %if.then63
  br label %cond.end68, !dbg !9156

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi %struct.VEC_ce_s_base* [ %base66, %cond.true65 ], [ null, %cond.false67 ], !dbg !9156
  %call70 = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond69), !dbg !9156
  %cmp71 = icmp uge i32 %68, %call70, !dbg !9157
  br i1 %cmp71, label %if.then73, label %if.end74, !dbg !9158

if.then73:                                        ; preds = %cond.end68
  br label %for.end, !dbg !9159

if.end74:                                         ; preds = %cond.end68
  br label %if.end77, !dbg !9160

if.else75:                                        ; preds = %if.end
  %71 = load i32, i32* %j, align 4, !dbg !9161
  %inc76 = add i32 %71, 1, !dbg !9161
  store i32 %inc76, i32* %j, align 4, !dbg !9161
  br label %if.end77

if.end77:                                         ; preds = %if.else75, %if.end74
  br label %for.cond, !dbg !9162, !llvm.loop !9163

for.end:                                          ; preds = %if.then73, %cond.end29
  br label %if.end79, !dbg !9165

if.else78:                                        ; preds = %lor.lhs.false19, %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 3311, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9166
  br label %if.end79

if.end79:                                         ; preds = %if.else78, %for.end
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.then
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %lhsc), !dbg !9167
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %rhsc), !dbg !9168
  ret void, !dbg !9169
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !9170 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9173, metadata !DIExpression()), !dbg !9174
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9175, metadata !DIExpression()), !dbg !9176
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9177
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !9178
  store i32 %call, i32* %code, align 4, !dbg !9179
  %1 = load i32, i32* %code, align 4, !dbg !9180
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !9182
  %cmp = icmp eq i32 %call1, 3, !dbg !9183
  br i1 %cmp, label %if.then, label %if.end, !dbg !9184

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9185
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !9185
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !9185
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9185
  %bf.load = load i64, i64* %3, align 8, !dbg !9185
  %bf.clear = and i64 %bf.load, 65535, !dbg !9185
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9185
  store i32 %bf.cast, i32* %code, align 4, !dbg !9186
  br label %if.end, !dbg !9187

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !9188
  ret i32 %4, !dbg !9189
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !9190 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9191, metadata !DIExpression()), !dbg !9192
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9193
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !9195
  %cmp = icmp uge i32 %call, 3, !dbg !9196
  br i1 %cmp, label %if.then, label %if.else, !dbg !9197

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9198
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !9199
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !9200
  br label %return, !dbg !9200

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9201
  br label %return, !dbg !9201

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9202
  ret %union.tree_node* %2, !dbg !9202
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !9203 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9204, metadata !DIExpression()), !dbg !9205
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9206, metadata !DIExpression()), !dbg !9207
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9208
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9209
  store i32 %call, i32* %code, align 4, !dbg !9207
  %1 = load i32, i32* %code, align 4, !dbg !9210
  %cmp = icmp eq i32 %1, 6, !dbg !9212
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9213

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !9214
  %cmp1 = icmp eq i32 %2, 8, !dbg !9215
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !9216

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9217, metadata !DIExpression()), !dbg !9219
  %3 = load i32, i32* %code, align 4, !dbg !9220
  %cmp2 = icmp eq i32 %3, 8, !dbg !9222
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !9223

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9224
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !9225
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !9226
  br label %if.end, !dbg !9227

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9228
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !9229
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !9230

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9231
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !9231
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !9231
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9231
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !9231
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !9233
  br label %sw.epilog, !dbg !9234

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9235
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !9235
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !9235
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !9235
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !9235
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !9236
  br label %sw.epilog, !dbg !9237

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9238
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !9239
  br label %return, !dbg !9239

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !9240
  %cmp12 = icmp eq i32 %11, 1, !dbg !9242
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !9243

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !9244
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !9245
  br label %return, !dbg !9245

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !9246
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !9247
  br label %return, !dbg !9247

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9248
  ret %union.tree_node* %14, !dbg !9248
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %vec_, %struct.constraint_expr* %obj_) #0 !dbg !9249 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %obj_.addr = alloca %struct.constraint_expr*, align 8
  store %struct.VEC_ce_s_heap** %vec_, %struct.VEC_ce_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %vec_.addr, metadata !9254, metadata !DIExpression()), !dbg !9255
  store %struct.constraint_expr* %obj_, %struct.constraint_expr** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %obj_.addr, metadata !9256, metadata !DIExpression()), !dbg !9255
  %0 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !9255
  %call = call i32 @VEC_ce_s_heap_reserve(%struct.VEC_ce_s_heap** %0, i32 1), !dbg !9255
  %1 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !9255
  %2 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %1, align 8, !dbg !9255
  %tobool = icmp ne %struct.VEC_ce_s_heap* %2, null, !dbg !9255
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9255

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !9255
  %4 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %3, align 8, !dbg !9255
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %4, i32 0, i32 0, !dbg !9255
  br label %cond.end, !dbg !9255

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9255

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9255
  %5 = load %struct.constraint_expr*, %struct.constraint_expr** %obj_.addr, align 8, !dbg !9255
  %call1 = call %struct.constraint_expr* @VEC_ce_s_base_quick_push(%struct.VEC_ce_s_base* %cond, %struct.constraint_expr* %5), !dbg !9255
  ret %struct.constraint_expr* %call1, !dbg !9255
}

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @make_escape_constraint(%union.tree_node* %op) #0 !dbg !9257 {
entry:
  %op.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !9258, metadata !DIExpression()), !dbg !9259
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9260
  call void @make_constraint_to(i32 3, %union.tree_node* %0), !dbg !9261
  ret void, !dbg !9262
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %s) #0 !dbg !9263 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %sc = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9266, metadata !DIExpression()), !dbg !9267
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9268
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !9270
  %tobool = icmp ne i8 %call, 0, !dbg !9270
  br i1 %tobool, label %if.then, label %if.end, !dbg !9271

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %sc, metadata !9272, metadata !DIExpression()), !dbg !9274
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9275
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !9276
  store i32 %call1, i32* %sc, align 4, !dbg !9274
  %2 = load i32, i32* %sc, align 4, !dbg !9277
  %cmp = icmp eq i32 %2, 116, !dbg !9277
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !9277

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i32, i32* %sc, align 4, !dbg !9277
  %cmp2 = icmp eq i32 %3, 113, !dbg !9277
  br i1 %cmp2, label %lor.end, label %lor.lhs.false3, !dbg !9278

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %sc, align 4, !dbg !9279
  %cmp4 = icmp eq i32 %4, 118, !dbg !9280
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !9281

lor.rhs:                                          ; preds = %lor.lhs.false3
  %5 = load i32, i32* %sc, align 4, !dbg !9282
  %cmp5 = icmp eq i32 %5, 77, !dbg !9283
  br label %lor.end, !dbg !9281

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false3, %lor.lhs.false, %if.then
  %6 = phi i1 [ true, %lor.lhs.false3 ], [ true, %lor.lhs.false ], [ true, %if.then ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !9281
  %conv = trunc i32 %lor.ext to i8, !dbg !9277
  store i8 %conv, i8* %retval, align 1, !dbg !9284
  br label %return, !dbg !9284

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9285
  br label %return, !dbg !9285

return:                                           ; preds = %if.end, %lor.end
  %7 = load i8, i8* %retval, align 1, !dbg !9286
  ret i8 %7, !dbg !9286
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) #0 !dbg !9287 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9288, metadata !DIExpression()), !dbg !9289
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9290
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9291
  ret %union.tree_node* %call, !dbg !9292
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_noutputs(%union.gimple_statement_d* %gs) #0 !dbg !9293 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9294, metadata !DIExpression()), !dbg !9295
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9296
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !9297
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !9298
  %1 = load i8, i8* %no, align 1, !dbg !9298
  %conv = zext i8 %1 to i32, !dbg !9296
  ret i32 %conv, !dbg !9299
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9300 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9301, metadata !DIExpression()), !dbg !9302
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9303, metadata !DIExpression()), !dbg !9304
  %0 = load i32, i32* %index.addr, align 4, !dbg !9305
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9305
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !9305
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !9305
  %2 = load i8, i8* %no, align 1, !dbg !9305
  %conv = zext i8 %2 to i32, !dbg !9305
  %cmp = icmp ule i32 %0, %conv, !dbg !9305
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9305

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0), i32 2655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9305
  br label %cond.end, !dbg !9305

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9305

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9305
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9306
  %4 = load i32, i32* %index.addr, align 4, !dbg !9307
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9308
  %gimple_asm2 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_asm*, !dbg !9309
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm2, i32 0, i32 2, !dbg !9310
  %6 = load i8, i8* %ni, align 8, !dbg !9310
  %conv3 = zext i8 %6 to i32, !dbg !9308
  %add = add i32 %4, %conv3, !dbg !9311
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %add), !dbg !9312
  ret %union.tree_node* %call, !dbg !9313
}

declare dso_local zeroext i8 @parse_output_constraint(i8**, i32, i32, i32, i8*, i8*, i8*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_ninputs(%union.gimple_statement_d* %gs) #0 !dbg !9314 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9315, metadata !DIExpression()), !dbg !9316
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9317
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !9318
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !9319
  %1 = load i8, i8* %ni, align 8, !dbg !9319
  %conv = zext i8 %1 to i32, !dbg !9317
  ret i32 %conv, !dbg !9320
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9321 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9322, metadata !DIExpression()), !dbg !9323
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9324, metadata !DIExpression()), !dbg !9325
  %0 = load i32, i32* %index.addr, align 4, !dbg !9326
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9326
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !9326
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !9326
  %2 = load i8, i8* %ni, align 8, !dbg !9326
  %conv = zext i8 %2 to i32, !dbg !9326
  %cmp = icmp ule i32 %0, %conv, !dbg !9326
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9326

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0), i32 2622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9326
  br label %cond.end, !dbg !9326

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9326

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9326
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9327
  %4 = load i32, i32* %index.addr, align 4, !dbg !9328
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %4), !dbg !9329
  ret %union.tree_node* %call, !dbg !9330
}

declare dso_local zeroext i8 @parse_input_constraint(i8**, i32, i32, i32, i32, i8**, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @get_constraint_for_1(%union.tree_node* %t, %struct.VEC_ce_s_heap** %results, i8 zeroext %address_p) #0 !dbg !9331 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %results.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %address_p.addr = alloca i8, align 1
  %temp = alloca %struct.constraint_expr, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !9334, metadata !DIExpression()), !dbg !9335
  store %struct.VEC_ce_s_heap** %results, %struct.VEC_ce_s_heap*** %results.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %results.addr, metadata !9336, metadata !DIExpression()), !dbg !9337
  store i8 %address_p, i8* %address_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %address_p.addr, metadata !9338, metadata !DIExpression()), !dbg !9339
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %temp, metadata !9340, metadata !DIExpression()), !dbg !9341
  %0 = load i32, i32* @flag_delete_null_pointer_checks, align 4, !dbg !9342
  %tobool = icmp ne i32 %0, 0, !dbg !9342
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9344

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9345
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9345
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9345
  %bf.load = load i64, i64* %2, align 8, !dbg !9345
  %bf.clear = and i64 %bf.load, 65535, !dbg !9345
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9345
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !9346
  br i1 %cmp, label %land.lhs.true1, label %lor.lhs.false, !dbg !9347

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9348
  %call = call i32 @integer_zerop(%union.tree_node* %3), !dbg !9349
  %tobool2 = icmp ne i32 %call, 0, !dbg !9349
  br i1 %tobool2, label %if.then, label %lor.lhs.false, !dbg !9350

lor.lhs.false:                                    ; preds = %land.lhs.true1, %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9351
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9351
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !9351
  %bf.load4 = load i64, i64* %5, align 8, !dbg !9351
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !9351
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !9351
  %cmp7 = icmp eq i32 %bf.cast6, 51, !dbg !9352
  br i1 %cmp7, label %if.then, label %if.end, !dbg !9353

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true1
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 1, !dbg !9354
  store i32 0, i32* %var, align 4, !dbg !9356
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 0, !dbg !9357
  store i32 2, i32* %type, align 8, !dbg !9358
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 2, !dbg !9359
  store i64 0, i64* %offset, align 8, !dbg !9360
  %6 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9361
  %call8 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %6, %struct.constraint_expr* %temp), !dbg !9361
  br label %return, !dbg !9362

if.end:                                           ; preds = %lor.lhs.false, %entry
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9363
  %base9 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !9363
  %8 = bitcast %struct.tree_base* %base9 to i64*, !dbg !9363
  %bf.load10 = load i64, i64* %8, align 8, !dbg !9363
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !9363
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !9363
  %cmp13 = icmp eq i32 %bf.cast12, 28, !dbg !9365
  br i1 %cmp13, label %if.then14, label %if.end19, !dbg !9366

if.then14:                                        ; preds = %if.end
  %var15 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 1, !dbg !9367
  store i32 2, i32* %var15, align 4, !dbg !9369
  %type16 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 0, !dbg !9370
  store i32 0, i32* %type16, align 8, !dbg !9371
  %offset17 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 2, !dbg !9372
  store i64 0, i64* %offset17, align 8, !dbg !9373
  %9 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9374
  %call18 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %9, %struct.constraint_expr* %temp), !dbg !9374
  br label %return, !dbg !9375

if.end19:                                         ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9376
  %base20 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !9376
  %11 = bitcast %struct.tree_base* %base20 to i64*, !dbg !9376
  %bf.load21 = load i64, i64* %11, align 8, !dbg !9376
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !9376
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !9376
  %idxprom = sext i32 %bf.cast23 to i64, !dbg !9376
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9376
  %12 = load i32, i32* %arrayidx, align 4, !dbg !9376
  switch i32 %12, label %sw.default55 [
    i32 10, label %sw.bb
    i32 4, label %sw.bb30
    i32 0, label %sw.bb46
    i32 3, label %sw.bb54
  ], !dbg !9377

sw.bb:                                            ; preds = %if.end19
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9378
  %base24 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !9378
  %14 = bitcast %struct.tree_base* %base24 to i64*, !dbg !9378
  %bf.load25 = load i64, i64* %14, align 8, !dbg !9378
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !9378
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !9378
  switch i32 %bf.cast27, label %sw.default [
    i32 121, label %sw.bb28
  ], !dbg !9381

sw.bb28:                                          ; preds = %sw.bb
  %15 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9382
  %exp = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !9382
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9382
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9382
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !9382
  %17 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9384
  call void @get_constraint_for_address_of(%union.tree_node* %16, %struct.VEC_ce_s_heap** %17), !dbg !9385
  br label %return, !dbg !9386

sw.default:                                       ; preds = %sw.bb
  br label %sw.epilog, !dbg !9387

sw.epilog:                                        ; preds = %sw.default
  br label %sw.epilog56, !dbg !9388

sw.bb30:                                          ; preds = %if.end19
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9389
  %base31 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !9389
  %19 = bitcast %struct.tree_base* %base31 to i64*, !dbg !9389
  %bf.load32 = load i64, i64* %19, align 8, !dbg !9389
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !9389
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !9389
  switch i32 %bf.cast34, label %sw.default44 [
    i32 47, label %sw.bb35
    i32 45, label %sw.bb39
    i32 46, label %sw.bb39
    i32 41, label %sw.bb39
    i32 118, label %sw.bb40
  ], !dbg !9391

sw.bb35:                                          ; preds = %sw.bb30
  %20 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9392
  %exp36 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !9392
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !9392
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 0, !dbg !9392
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !9392
  %22 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9395
  %23 = load i8, i8* %address_p.addr, align 1, !dbg !9396
  call void @get_constraint_for_1(%union.tree_node* %21, %struct.VEC_ce_s_heap** %22, i8 zeroext %23), !dbg !9397
  %24 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9398
  call void @do_deref(%struct.VEC_ce_s_heap** %24), !dbg !9399
  br label %return, !dbg !9400

sw.bb39:                                          ; preds = %sw.bb30, %sw.bb30, %sw.bb30
  %25 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9401
  %26 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9402
  %27 = load i8, i8* %address_p.addr, align 1, !dbg !9403
  call void @get_constraint_for_component_ref(%union.tree_node* %25, %struct.VEC_ce_s_heap** %26, i8 zeroext %27), !dbg !9404
  br label %return, !dbg !9405

sw.bb40:                                          ; preds = %sw.bb30
  %28 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9406
  %exp41 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !9406
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !9406
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 0, !dbg !9406
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !9406
  %30 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9407
  %31 = load i8, i8* %address_p.addr, align 1, !dbg !9408
  call void @get_constraint_for_1(%union.tree_node* %29, %struct.VEC_ce_s_heap** %30, i8 zeroext %31), !dbg !9409
  br label %return, !dbg !9410

sw.default44:                                     ; preds = %sw.bb30
  br label %sw.epilog45, !dbg !9411

sw.epilog45:                                      ; preds = %sw.default44
  br label %sw.epilog56, !dbg !9412

sw.bb46:                                          ; preds = %if.end19
  %32 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9413
  %base47 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !9413
  %33 = bitcast %struct.tree_base* %base47 to i64*, !dbg !9413
  %bf.load48 = load i64, i64* %33, align 8, !dbg !9413
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !9413
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !9413
  switch i32 %bf.cast50, label %sw.default52 [
    i32 141, label %sw.bb51
  ], !dbg !9415

sw.bb51:                                          ; preds = %sw.bb46
  %34 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9416
  %35 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9419
  %36 = load i8, i8* %address_p.addr, align 1, !dbg !9420
  call void @get_constraint_for_ssa_var(%union.tree_node* %34, %struct.VEC_ce_s_heap** %35, i8 zeroext %36), !dbg !9421
  br label %return, !dbg !9422

sw.default52:                                     ; preds = %sw.bb46
  br label %sw.epilog53, !dbg !9423

sw.epilog53:                                      ; preds = %sw.default52
  br label %sw.epilog56, !dbg !9424

sw.bb54:                                          ; preds = %if.end19
  %37 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9425
  %38 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9427
  %39 = load i8, i8* %address_p.addr, align 1, !dbg !9428
  call void @get_constraint_for_ssa_var(%union.tree_node* %37, %struct.VEC_ce_s_heap** %38, i8 zeroext %39), !dbg !9429
  br label %return, !dbg !9430

sw.default55:                                     ; preds = %if.end19
  br label %sw.epilog56, !dbg !9431

sw.epilog56:                                      ; preds = %sw.default55, %sw.epilog53, %sw.epilog45, %sw.epilog
  %type57 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 0, !dbg !9432
  store i32 2, i32* %type57, align 8, !dbg !9433
  %var58 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 1, !dbg !9434
  store i32 1, i32* %var58, align 4, !dbg !9435
  %offset59 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 2, !dbg !9436
  store i64 0, i64* %offset59, align 8, !dbg !9437
  %40 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9438
  %call60 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %40, %struct.constraint_expr* %temp), !dbg !9438
  br label %return, !dbg !9439

return:                                           ; preds = %sw.epilog56, %sw.bb54, %sw.bb51, %sw.bb40, %sw.bb39, %sw.bb35, %sw.bb28, %if.then14, %if.then
  ret void, !dbg !9439
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_constraint_for_address_of(%union.tree_node* %t, %struct.VEC_ce_s_heap** %results) #0 !dbg !9440 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %results.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %c = alloca %struct.constraint_expr*, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !9441, metadata !DIExpression()), !dbg !9442
  store %struct.VEC_ce_s_heap** %results, %struct.VEC_ce_s_heap*** %results.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %results.addr, metadata !9443, metadata !DIExpression()), !dbg !9444
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %c, metadata !9445, metadata !DIExpression()), !dbg !9446
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9447, metadata !DIExpression()), !dbg !9448
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9449
  %1 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9450
  call void @get_constraint_for_1(%union.tree_node* %0, %struct.VEC_ce_s_heap** %1, i8 zeroext 1), !dbg !9451
  store i32 0, i32* %i, align 4, !dbg !9452
  br label %for.cond, !dbg !9454

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9455
  %3 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %2, align 8, !dbg !9455
  %tobool = icmp ne %struct.VEC_ce_s_heap* %3, null, !dbg !9455
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9455

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9455
  %5 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %4, align 8, !dbg !9455
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %5, i32 0, i32 0, !dbg !9455
  br label %cond.end, !dbg !9455

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9455

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9455
  %6 = load i32, i32* %i, align 4, !dbg !9455
  %call = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond, i32 %6, %struct.constraint_expr** %c), !dbg !9455
  %tobool1 = icmp ne i32 %call, 0, !dbg !9457
  br i1 %tobool1, label %for.body, label %for.end, !dbg !9457

for.body:                                         ; preds = %cond.end
  %7 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !9458
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %7, i32 0, i32 0, !dbg !9461
  %8 = load i32, i32* %type, align 8, !dbg !9461
  %cmp = icmp eq i32 %8, 1, !dbg !9462
  br i1 %cmp, label %if.then, label %if.else, !dbg !9463

if.then:                                          ; preds = %for.body
  %9 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !9464
  %type2 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %9, i32 0, i32 0, !dbg !9465
  store i32 0, i32* %type2, align 8, !dbg !9466
  br label %if.end, !dbg !9464

if.else:                                          ; preds = %for.body
  %10 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !9467
  %type3 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %10, i32 0, i32 0, !dbg !9468
  store i32 2, i32* %type3, align 8, !dbg !9469
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !9470

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !9471
  %inc = add i32 %11, 1, !dbg !9471
  store i32 %inc, i32* %i, align 4, !dbg !9471
  br label %for.cond, !dbg !9472, !llvm.loop !9473

for.end:                                          ; preds = %cond.end
  ret void, !dbg !9475
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_constraint_for_component_ref(%union.tree_node* %t, %struct.VEC_ce_s_heap** %results, i8 zeroext %address_p) #0 !dbg !9476 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %results.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %address_p.addr = alloca i8, align 1
  %orig_t = alloca %union.tree_node*, align 8
  %bitsize = alloca i64, align 8
  %bitmaxsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %forzero = alloca %union.tree_node*, align 8
  %result = alloca %struct.constraint_expr*, align 8
  %temp = alloca %struct.constraint_expr, align 8
  %cexpr = alloca %struct.constraint_expr, align 8
  %curr = alloca %struct.variable_info*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !9477, metadata !DIExpression()), !dbg !9478
  store %struct.VEC_ce_s_heap** %results, %struct.VEC_ce_s_heap*** %results.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %results.addr, metadata !9479, metadata !DIExpression()), !dbg !9480
  store i8 %address_p, i8* %address_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %address_p.addr, metadata !9481, metadata !DIExpression()), !dbg !9482
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_t, metadata !9483, metadata !DIExpression()), !dbg !9484
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9485
  store %union.tree_node* %0, %union.tree_node** %orig_t, align 8, !dbg !9484
  call void @llvm.dbg.declare(metadata i64* %bitsize, metadata !9486, metadata !DIExpression()), !dbg !9487
  store i64 -1, i64* %bitsize, align 8, !dbg !9487
  call void @llvm.dbg.declare(metadata i64* %bitmaxsize, metadata !9488, metadata !DIExpression()), !dbg !9489
  store i64 -1, i64* %bitmaxsize, align 8, !dbg !9489
  call void @llvm.dbg.declare(metadata i64* %bitpos, metadata !9490, metadata !DIExpression()), !dbg !9491
  call void @llvm.dbg.declare(metadata %union.tree_node** %forzero, metadata !9492, metadata !DIExpression()), !dbg !9493
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %result, metadata !9494, metadata !DIExpression()), !dbg !9495
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9496
  store %union.tree_node* %1, %union.tree_node** %forzero, align 8, !dbg !9497
  br label %while.cond, !dbg !9498

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9499
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9499
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9499
  %bf.load = load i64, i64* %3, align 8, !dbg !9499
  %bf.clear = and i64 %bf.load, 65535, !dbg !9499
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9499
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !9499
  br i1 %cmp, label %land.end, label %lor.lhs.false, !dbg !9499

lor.lhs.false:                                    ; preds = %while.cond
  %4 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9499
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9499
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9499
  %bf.load2 = load i64, i64* %5, align 8, !dbg !9499
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9499
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9499
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !9499
  br i1 %cmp5, label %land.end, label %lor.lhs.false6, !dbg !9499

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9499
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9499
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !9499
  %bf.load8 = load i64, i64* %7, align 8, !dbg !9499
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !9499
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !9499
  %cmp11 = icmp eq i32 %bf.cast10, 36, !dbg !9499
  br i1 %cmp11, label %land.end, label %lor.lhs.false12, !dbg !9499

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %8 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9499
  %base13 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !9499
  %9 = bitcast %struct.tree_base* %base13 to i64*, !dbg !9499
  %bf.load14 = load i64, i64* %9, align 8, !dbg !9499
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !9499
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !9499
  %cmp17 = icmp eq i32 %bf.cast16, 141, !dbg !9499
  br i1 %cmp17, label %land.lhs.true, label %land.rhs, !dbg !9499

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %10 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9499
  %ssa_name = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !9499
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !9499
  %11 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9499
  %base18 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !9499
  %12 = bitcast %struct.tree_base* %base18 to i64*, !dbg !9499
  %bf.load19 = load i64, i64* %12, align 8, !dbg !9499
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !9499
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !9499
  %cmp22 = icmp eq i32 %bf.cast21, 32, !dbg !9499
  br i1 %cmp22, label %land.end, label %lor.lhs.false23, !dbg !9499

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %13 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9499
  %ssa_name24 = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !9499
  %var25 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name24, i32 0, i32 1, !dbg !9499
  %14 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !9499
  %base26 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !9499
  %15 = bitcast %struct.tree_base* %base26 to i64*, !dbg !9499
  %bf.load27 = load i64, i64* %15, align 8, !dbg !9499
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !9499
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !9499
  %cmp30 = icmp eq i32 %bf.cast29, 34, !dbg !9499
  br i1 %cmp30, label %land.end, label %lor.lhs.false31, !dbg !9499

lor.lhs.false31:                                  ; preds = %lor.lhs.false23
  %16 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9499
  %ssa_name32 = bitcast %union.tree_node* %16 to %struct.tree_ssa_name*, !dbg !9499
  %var33 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name32, i32 0, i32 1, !dbg !9499
  %17 = load %union.tree_node*, %union.tree_node** %var33, align 8, !dbg !9499
  %base34 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !9499
  %18 = bitcast %struct.tree_base* %base34 to i64*, !dbg !9499
  %bf.load35 = load i64, i64* %18, align 8, !dbg !9499
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !9499
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !9499
  %cmp38 = icmp eq i32 %bf.cast37, 36, !dbg !9499
  br i1 %cmp38, label %land.end, label %land.rhs, !dbg !9500

land.rhs:                                         ; preds = %lor.lhs.false31, %lor.lhs.false12
  %19 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9501
  %base39 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !9501
  %20 = bitcast %struct.tree_base* %base39 to i64*, !dbg !9501
  %bf.load40 = load i64, i64* %20, align 8, !dbg !9501
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !9501
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !9501
  %idxprom = sext i32 %bf.cast42 to i64, !dbg !9501
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9501
  %21 = load i32, i32* %arrayidx, align 4, !dbg !9501
  %cmp43 = icmp eq i32 %21, 1, !dbg !9501
  %lnot = xor i1 %cmp43, true, !dbg !9502
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false31, %lor.lhs.false23, %land.lhs.true, %lor.lhs.false6, %lor.lhs.false, %while.cond
  %22 = phi i1 [ false, %lor.lhs.false31 ], [ false, %lor.lhs.false23 ], [ false, %land.lhs.true ], [ false, %lor.lhs.false6 ], [ false, %lor.lhs.false ], [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !9503
  br i1 %22, label %while.body, label %while.end, !dbg !9498

while.body:                                       ; preds = %land.end
  %23 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9504
  %exp = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !9504
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9504
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9504
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx44, align 8, !dbg !9504
  store %union.tree_node* %24, %union.tree_node** %forzero, align 8, !dbg !9505
  br label %while.cond, !dbg !9498, !llvm.loop !9506

while.end:                                        ; preds = %land.end
  %25 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9507
  %base45 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !9507
  %26 = bitcast %struct.tree_base* %base45 to i64*, !dbg !9507
  %bf.load46 = load i64, i64* %26, align 8, !dbg !9507
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !9507
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !9507
  %idxprom49 = sext i32 %bf.cast48 to i64, !dbg !9507
  %arrayidx50 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom49, !dbg !9507
  %27 = load i32, i32* %arrayidx50, align 4, !dbg !9507
  %cmp51 = icmp eq i32 %27, 1, !dbg !9507
  br i1 %cmp51, label %land.lhs.true52, label %if.end, !dbg !9509

land.lhs.true52:                                  ; preds = %while.end
  %28 = load %union.tree_node*, %union.tree_node** %forzero, align 8, !dbg !9510
  %call = call i32 @integer_zerop(%union.tree_node* %28), !dbg !9511
  %tobool = icmp ne i32 %call, 0, !dbg !9511
  br i1 %tobool, label %if.then, label %if.end, !dbg !9512

if.then:                                          ; preds = %land.lhs.true52
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %temp, metadata !9513, metadata !DIExpression()), !dbg !9515
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 2, !dbg !9516
  store i64 0, i64* %offset, align 8, !dbg !9517
  %var53 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 1, !dbg !9518
  store i32 7, i32* %var53, align 4, !dbg !9519
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %temp, i32 0, i32 0, !dbg !9520
  store i32 0, i32* %type, align 8, !dbg !9521
  %29 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9522
  %call54 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %29, %struct.constraint_expr* %temp), !dbg !9522
  br label %if.end236, !dbg !9523

if.end:                                           ; preds = %land.lhs.true52, %while.end
  %30 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9524
  %call55 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %30, i64* %bitpos, i64* %bitsize, i64* %bitmaxsize), !dbg !9525
  store %union.tree_node* %call55, %union.tree_node** %t.addr, align 8, !dbg !9526
  %31 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9527
  %32 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9528
  call void @get_constraint_for_1(%union.tree_node* %31, %struct.VEC_ce_s_heap** %32, i8 zeroext 1), !dbg !9529
  %33 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9530
  %34 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %33, align 8, !dbg !9530
  %tobool56 = icmp ne %struct.VEC_ce_s_heap* %34, null, !dbg !9530
  br i1 %tobool56, label %cond.true, label %cond.false, !dbg !9530

cond.true:                                        ; preds = %if.end
  %35 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9530
  %36 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %35, align 8, !dbg !9530
  %base57 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %36, i32 0, i32 0, !dbg !9530
  br label %cond.end, !dbg !9530

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !9530

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base57, %cond.true ], [ null, %cond.false ], !dbg !9530
  %call58 = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond), !dbg !9530
  %cmp59 = icmp eq i32 %call58, 1, !dbg !9530
  br i1 %cmp59, label %cond.false61, label %cond.true60, !dbg !9530

cond.true60:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2973, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9530
  br label %cond.end62, !dbg !9530

cond.false61:                                     ; preds = %cond.end
  br label %cond.end62, !dbg !9530

cond.end62:                                       ; preds = %cond.false61, %cond.true60
  %cond63 = phi i32 [ 0, %cond.true60 ], [ 0, %cond.false61 ], !dbg !9530
  %37 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9531
  %38 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %37, align 8, !dbg !9531
  %tobool64 = icmp ne %struct.VEC_ce_s_heap* %38, null, !dbg !9531
  br i1 %tobool64, label %cond.true65, label %cond.false67, !dbg !9531

cond.true65:                                      ; preds = %cond.end62
  %39 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9531
  %40 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %39, align 8, !dbg !9531
  %base66 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %40, i32 0, i32 0, !dbg !9531
  br label %cond.end68, !dbg !9531

cond.false67:                                     ; preds = %cond.end62
  br label %cond.end68, !dbg !9531

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi %struct.VEC_ce_s_base* [ %base66, %cond.true65 ], [ null, %cond.false67 ], !dbg !9531
  %call70 = call %struct.constraint_expr* @VEC_ce_s_base_last(%struct.VEC_ce_s_base* %cond69), !dbg !9531
  store %struct.constraint_expr* %call70, %struct.constraint_expr** %result, align 8, !dbg !9532
  %41 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9533
  %type71 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %41, i32 0, i32 0, !dbg !9535
  %42 = load i32, i32* %type71, align 8, !dbg !9535
  %cmp72 = icmp eq i32 %42, 0, !dbg !9536
  br i1 %cmp72, label %land.lhs.true73, label %if.else, !dbg !9537

land.lhs.true73:                                  ; preds = %cond.end68
  %43 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9538
  %var74 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %43, i32 0, i32 1, !dbg !9539
  %44 = load i32, i32* %var74, align 4, !dbg !9539
  %call75 = call %struct.variable_info* @get_varinfo(i32 %44), !dbg !9540
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call75, i32 0, i32 1, !dbg !9541
  %bf.load76 = load i8, i8* %is_full_var, align 4, !dbg !9541
  %bf.lshr = lshr i8 %bf.load76, 3, !dbg !9541
  %bf.clear77 = and i8 %bf.lshr, 1, !dbg !9541
  %bf.cast78 = zext i8 %bf.clear77 to i32, !dbg !9541
  %tobool79 = icmp ne i32 %bf.cast78, 0, !dbg !9540
  br i1 %tobool79, label %if.then80, label %if.else, !dbg !9542

if.then80:                                        ; preds = %land.lhs.true73
  %45 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9543
  %offset81 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %45, i32 0, i32 2, !dbg !9544
  store i64 0, i64* %offset81, align 8, !dbg !9545
  br label %if.end236, !dbg !9543

if.else:                                          ; preds = %land.lhs.true73, %cond.end68
  %46 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9546
  %type82 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %46, i32 0, i32 0, !dbg !9548
  %47 = load i32, i32* %type82, align 8, !dbg !9548
  %cmp83 = icmp eq i32 %47, 0, !dbg !9549
  br i1 %cmp83, label %if.then84, label %if.else174, !dbg !9550

if.then84:                                        ; preds = %if.else
  %48 = load i64, i64* %bitpos, align 8, !dbg !9551
  %49 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9554
  %var85 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %49, i32 0, i32 1, !dbg !9555
  %50 = load i32, i32* %var85, align 4, !dbg !9555
  %call86 = call %struct.variable_info* @get_varinfo(i32 %50), !dbg !9556
  %fullsize = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call86, i32 0, i32 5, !dbg !9557
  %51 = load i64, i64* %fullsize, align 8, !dbg !9557
  %cmp87 = icmp ult i64 %48, %51, !dbg !9558
  br i1 %cmp87, label %land.lhs.true88, label %if.else154, !dbg !9559

land.lhs.true88:                                  ; preds = %if.then84
  %52 = load i64, i64* %bitmaxsize, align 8, !dbg !9560
  %cmp89 = icmp ne i64 %52, 0, !dbg !9561
  br i1 %cmp89, label %if.then90, label %if.else154, !dbg !9562

if.then90:                                        ; preds = %land.lhs.true88
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %cexpr, metadata !9563, metadata !DIExpression()), !dbg !9565
  %53 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9566
  %54 = bitcast %struct.constraint_expr* %cexpr to i8*, !dbg !9567
  %55 = bitcast %struct.constraint_expr* %53 to i8*, !dbg !9567
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 16, i1 false), !dbg !9567
  call void @llvm.dbg.declare(metadata %struct.variable_info** %curr, metadata !9568, metadata !DIExpression()), !dbg !9569
  %56 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9570
  %57 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %56, align 8, !dbg !9570
  %tobool91 = icmp ne %struct.VEC_ce_s_heap* %57, null, !dbg !9570
  br i1 %tobool91, label %cond.true92, label %cond.false94, !dbg !9570

cond.true92:                                      ; preds = %if.then90
  %58 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9570
  %59 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %58, align 8, !dbg !9570
  %base93 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %59, i32 0, i32 0, !dbg !9570
  br label %cond.end95, !dbg !9570

cond.false94:                                     ; preds = %if.then90
  br label %cond.end95, !dbg !9570

cond.end95:                                       ; preds = %cond.false94, %cond.true92
  %cond96 = phi %struct.VEC_ce_s_base* [ %base93, %cond.true92 ], [ null, %cond.false94 ], !dbg !9570
  call void @VEC_ce_s_base_pop(%struct.VEC_ce_s_base* %cond96), !dbg !9570
  %offset97 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 2, !dbg !9571
  store i64 0, i64* %offset97, align 8, !dbg !9572
  %var98 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 1, !dbg !9573
  %60 = load i32, i32* %var98, align 4, !dbg !9573
  %call99 = call %struct.variable_info* @get_varinfo(i32 %60), !dbg !9575
  store %struct.variable_info* %call99, %struct.variable_info** %curr, align 8, !dbg !9576
  br label %for.cond, !dbg !9577

for.cond:                                         ; preds = %for.inc, %cond.end95
  %61 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !9578
  %tobool100 = icmp ne %struct.variable_info* %61, null, !dbg !9580
  br i1 %tobool100, label %for.body, label %for.end, !dbg !9580

for.body:                                         ; preds = %for.cond
  %62 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !9581
  %offset101 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %62, i32 0, i32 3, !dbg !9584
  %63 = load i64, i64* %offset101, align 8, !dbg !9584
  %64 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !9585
  %size = getelementptr inbounds %struct.variable_info, %struct.variable_info* %64, i32 0, i32 4, !dbg !9586
  %65 = load i64, i64* %size, align 8, !dbg !9586
  %66 = load i64, i64* %bitpos, align 8, !dbg !9587
  %67 = load i64, i64* %bitmaxsize, align 8, !dbg !9588
  %call102 = call zeroext i8 @ranges_overlap_p(i64 %63, i64 %65, i64 %66, i64 %67), !dbg !9589
  %tobool103 = icmp ne i8 %call102, 0, !dbg !9589
  br i1 %tobool103, label %if.then104, label %if.end110, !dbg !9590

if.then104:                                       ; preds = %for.body
  %68 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !9591
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %68, i32 0, i32 0, !dbg !9593
  %69 = load i32, i32* %id, align 8, !dbg !9593
  %var105 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 1, !dbg !9594
  store i32 %69, i32* %var105, align 4, !dbg !9595
  %70 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9596
  %call106 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %70, %struct.constraint_expr* %cexpr), !dbg !9596
  %71 = load i8, i8* %address_p.addr, align 1, !dbg !9597
  %tobool107 = icmp ne i8 %71, 0, !dbg !9597
  br i1 %tobool107, label %if.then108, label %if.end109, !dbg !9599

if.then108:                                       ; preds = %if.then104
  br label %for.end, !dbg !9600

if.end109:                                        ; preds = %if.then104
  br label %if.end110, !dbg !9601

if.end110:                                        ; preds = %if.end109, %for.body
  br label %for.inc, !dbg !9602

for.inc:                                          ; preds = %if.end110
  %72 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !9603
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %72, i32 0, i32 2, !dbg !9604
  %73 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !9604
  store %struct.variable_info* %73, %struct.variable_info** %curr, align 8, !dbg !9605
  br label %for.cond, !dbg !9606, !llvm.loop !9607

for.end:                                          ; preds = %if.then108, %for.cond
  %74 = load i8, i8* %address_p.addr, align 1, !dbg !9609
  %conv = zext i8 %74 to i32, !dbg !9609
  %tobool111 = icmp ne i32 %conv, 0, !dbg !9609
  br i1 %tobool111, label %land.lhs.true112, label %if.else135, !dbg !9611

land.lhs.true112:                                 ; preds = %for.end
  %75 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9612
  %76 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %75, align 8, !dbg !9612
  %tobool113 = icmp ne %struct.VEC_ce_s_heap* %76, null, !dbg !9612
  br i1 %tobool113, label %cond.true114, label %cond.false116, !dbg !9612

cond.true114:                                     ; preds = %land.lhs.true112
  %77 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9612
  %78 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %77, align 8, !dbg !9612
  %base115 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %78, i32 0, i32 0, !dbg !9612
  br label %cond.end117, !dbg !9612

cond.false116:                                    ; preds = %land.lhs.true112
  br label %cond.end117, !dbg !9612

cond.end117:                                      ; preds = %cond.false116, %cond.true114
  %cond118 = phi %struct.VEC_ce_s_base* [ %base115, %cond.true114 ], [ null, %cond.false116 ], !dbg !9612
  %call119 = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond118), !dbg !9612
  %cmp120 = icmp eq i32 %call119, 0, !dbg !9613
  br i1 %cmp120, label %if.then122, label %if.else135, !dbg !9614

if.then122:                                       ; preds = %cond.end117
  %var123 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 1, !dbg !9615
  %79 = load i32, i32* %var123, align 4, !dbg !9615
  %call124 = call %struct.variable_info* @get_varinfo(i32 %79), !dbg !9617
  store %struct.variable_info* %call124, %struct.variable_info** %curr, align 8, !dbg !9618
  br label %while.cond125, !dbg !9619

while.cond125:                                    ; preds = %while.body129, %if.then122
  %80 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !9620
  %next126 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %80, i32 0, i32 2, !dbg !9621
  %81 = load %struct.variable_info*, %struct.variable_info** %next126, align 8, !dbg !9621
  %cmp127 = icmp ne %struct.variable_info* %81, null, !dbg !9622
  br i1 %cmp127, label %while.body129, label %while.end131, !dbg !9619

while.body129:                                    ; preds = %while.cond125
  %82 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !9623
  %next130 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %82, i32 0, i32 2, !dbg !9624
  %83 = load %struct.variable_info*, %struct.variable_info** %next130, align 8, !dbg !9624
  store %struct.variable_info* %83, %struct.variable_info** %curr, align 8, !dbg !9625
  br label %while.cond125, !dbg !9619, !llvm.loop !9626

while.end131:                                     ; preds = %while.cond125
  %84 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !9627
  %id132 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %84, i32 0, i32 0, !dbg !9628
  %85 = load i32, i32* %id132, align 8, !dbg !9628
  %var133 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 1, !dbg !9629
  store i32 %85, i32* %var133, align 4, !dbg !9630
  %86 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9631
  %call134 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %86, %struct.constraint_expr* %cexpr), !dbg !9631
  br label %if.end153, !dbg !9632

if.else135:                                       ; preds = %cond.end117, %for.end
  %87 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9633
  %88 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %87, align 8, !dbg !9633
  %tobool136 = icmp ne %struct.VEC_ce_s_heap* %88, null, !dbg !9633
  br i1 %tobool136, label %cond.true137, label %cond.false139, !dbg !9633

cond.true137:                                     ; preds = %if.else135
  %89 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9633
  %90 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %89, align 8, !dbg !9633
  %base138 = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %90, i32 0, i32 0, !dbg !9633
  br label %cond.end140, !dbg !9633

cond.false139:                                    ; preds = %if.else135
  br label %cond.end140, !dbg !9633

cond.end140:                                      ; preds = %cond.false139, %cond.true137
  %cond141 = phi %struct.VEC_ce_s_base* [ %base138, %cond.true137 ], [ null, %cond.false139 ], !dbg !9633
  %call142 = call i32 @VEC_ce_s_base_length(%struct.VEC_ce_s_base* %cond141), !dbg !9633
  %cmp143 = icmp uge i32 %call142, 1, !dbg !9633
  br i1 %cmp143, label %cond.false150, label %lor.lhs.false145, !dbg !9633

lor.lhs.false145:                                 ; preds = %cond.end140
  %91 = load %union.tree_node*, %union.tree_node** %orig_t, align 8, !dbg !9633
  %call146 = call zeroext i8 @ref_contains_array_ref(%union.tree_node* %91), !dbg !9633
  %conv147 = zext i8 %call146 to i32, !dbg !9633
  %tobool148 = icmp ne i32 %conv147, 0, !dbg !9633
  br i1 %tobool148, label %cond.false150, label %cond.true149, !dbg !9633

cond.true149:                                     ; preds = %lor.lhs.false145
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 3027, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9633
  br label %cond.end151, !dbg !9633

cond.false150:                                    ; preds = %lor.lhs.false145, %cond.end140
  br label %cond.end151, !dbg !9633

cond.end151:                                      ; preds = %cond.false150, %cond.true149
  %cond152 = phi i32 [ 0, %cond.true149 ], [ 0, %cond.false150 ], !dbg !9633
  br label %if.end153

if.end153:                                        ; preds = %cond.end151, %while.end131
  br label %if.end173, !dbg !9634

if.else154:                                       ; preds = %land.lhs.true88, %if.then84
  %92 = load i64, i64* %bitmaxsize, align 8, !dbg !9635
  %cmp155 = icmp eq i64 %92, 0, !dbg !9637
  br i1 %cmp155, label %if.then157, label %if.else164, !dbg !9638

if.then157:                                       ; preds = %if.else154
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9639
  %tobool158 = icmp ne %struct._IO_FILE* %93, null, !dbg !9639
  br i1 %tobool158, label %land.lhs.true159, label %if.end163, !dbg !9642

land.lhs.true159:                                 ; preds = %if.then157
  %94 = load i32, i32* @dump_flags, align 4, !dbg !9643
  %and = and i32 %94, 8, !dbg !9644
  %tobool160 = icmp ne i32 %and, 0, !dbg !9644
  br i1 %tobool160, label %if.then161, label %if.end163, !dbg !9645

if.then161:                                       ; preds = %land.lhs.true159
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9646
  %call162 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.63, i64 0, i64 0)), !dbg !9647
  br label %if.end163, !dbg !9647

if.end163:                                        ; preds = %if.then161, %land.lhs.true159, %if.then157
  br label %if.end172, !dbg !9648

if.else164:                                       ; preds = %if.else154
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9649
  %tobool165 = icmp ne %struct._IO_FILE* %96, null, !dbg !9649
  br i1 %tobool165, label %land.lhs.true166, label %if.end171, !dbg !9651

land.lhs.true166:                                 ; preds = %if.else164
  %97 = load i32, i32* @dump_flags, align 4, !dbg !9652
  %and167 = and i32 %97, 8, !dbg !9653
  %tobool168 = icmp ne i32 %and167, 0, !dbg !9653
  br i1 %tobool168, label %if.then169, label %if.end171, !dbg !9654

if.then169:                                       ; preds = %land.lhs.true166
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9655
  %call170 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %98, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.64, i64 0, i64 0)), !dbg !9656
  br label %if.end171, !dbg !9656

if.end171:                                        ; preds = %if.then169, %land.lhs.true166, %if.else164
  br label %if.end172

if.end172:                                        ; preds = %if.end171, %if.end163
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %if.end153
  br label %if.end235, !dbg !9657

if.else174:                                       ; preds = %if.else
  %99 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9658
  %type175 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %99, i32 0, i32 0, !dbg !9660
  %100 = load i32, i32* %type175, align 8, !dbg !9660
  %cmp176 = icmp eq i32 %100, 1, !dbg !9661
  br i1 %cmp176, label %if.then178, label %if.else224, !dbg !9662

if.then178:                                       ; preds = %if.else174
  %101 = load i64, i64* %bitpos, align 8, !dbg !9663
  %cmp179 = icmp eq i64 %101, -1, !dbg !9666
  br i1 %cmp179, label %if.then219, label %lor.lhs.false181, !dbg !9667

lor.lhs.false181:                                 ; preds = %if.then178
  %102 = load i64, i64* %bitsize, align 8, !dbg !9668
  %103 = load i64, i64* %bitmaxsize, align 8, !dbg !9669
  %cmp182 = icmp ne i64 %102, %103, !dbg !9670
  br i1 %cmp182, label %if.then219, label %lor.lhs.false184, !dbg !9671

lor.lhs.false184:                                 ; preds = %lor.lhs.false181
  %104 = load %union.tree_node*, %union.tree_node** %orig_t, align 8, !dbg !9672
  %common = bitcast %union.tree_node* %104 to %struct.tree_common*, !dbg !9672
  %type185 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9672
  %105 = load %union.tree_node*, %union.tree_node** %type185, align 8, !dbg !9672
  %base186 = bitcast %union.tree_node* %105 to %struct.tree_base*, !dbg !9672
  %106 = bitcast %struct.tree_base* %base186 to i64*, !dbg !9672
  %bf.load187 = load i64, i64* %106, align 8, !dbg !9672
  %bf.clear188 = and i64 %bf.load187, 65535, !dbg !9672
  %bf.cast189 = trunc i64 %bf.clear188 to i32, !dbg !9672
  %cmp190 = icmp eq i32 %bf.cast189, 15, !dbg !9672
  br i1 %cmp190, label %if.then219, label %lor.lhs.false192, !dbg !9672

lor.lhs.false192:                                 ; preds = %lor.lhs.false184
  %107 = load %union.tree_node*, %union.tree_node** %orig_t, align 8, !dbg !9672
  %common193 = bitcast %union.tree_node* %107 to %struct.tree_common*, !dbg !9672
  %type194 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common193, i32 0, i32 2, !dbg !9672
  %108 = load %union.tree_node*, %union.tree_node** %type194, align 8, !dbg !9672
  %base195 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !9672
  %109 = bitcast %struct.tree_base* %base195 to i64*, !dbg !9672
  %bf.load196 = load i64, i64* %109, align 8, !dbg !9672
  %bf.clear197 = and i64 %bf.load196, 65535, !dbg !9672
  %bf.cast198 = trunc i64 %bf.clear197 to i32, !dbg !9672
  %cmp199 = icmp eq i32 %bf.cast198, 16, !dbg !9672
  br i1 %cmp199, label %if.then219, label %lor.lhs.false201, !dbg !9672

lor.lhs.false201:                                 ; preds = %lor.lhs.false192
  %110 = load %union.tree_node*, %union.tree_node** %orig_t, align 8, !dbg !9672
  %common202 = bitcast %union.tree_node* %110 to %struct.tree_common*, !dbg !9672
  %type203 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common202, i32 0, i32 2, !dbg !9672
  %111 = load %union.tree_node*, %union.tree_node** %type203, align 8, !dbg !9672
  %base204 = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !9672
  %112 = bitcast %struct.tree_base* %base204 to i64*, !dbg !9672
  %bf.load205 = load i64, i64* %112, align 8, !dbg !9672
  %bf.clear206 = and i64 %bf.load205, 65535, !dbg !9672
  %bf.cast207 = trunc i64 %bf.clear206 to i32, !dbg !9672
  %cmp208 = icmp eq i32 %bf.cast207, 17, !dbg !9672
  br i1 %cmp208, label %if.then219, label %lor.lhs.false210, !dbg !9672

lor.lhs.false210:                                 ; preds = %lor.lhs.false201
  %113 = load %union.tree_node*, %union.tree_node** %orig_t, align 8, !dbg !9672
  %common211 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !9672
  %type212 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 2, !dbg !9672
  %114 = load %union.tree_node*, %union.tree_node** %type212, align 8, !dbg !9672
  %base213 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !9672
  %115 = bitcast %struct.tree_base* %base213 to i64*, !dbg !9672
  %bf.load214 = load i64, i64* %115, align 8, !dbg !9672
  %bf.clear215 = and i64 %bf.load214, 65535, !dbg !9672
  %bf.cast216 = trunc i64 %bf.clear215 to i32, !dbg !9672
  %cmp217 = icmp eq i32 %bf.cast216, 18, !dbg !9672
  br i1 %cmp217, label %if.then219, label %if.else221, !dbg !9673

if.then219:                                       ; preds = %lor.lhs.false210, %lor.lhs.false201, %lor.lhs.false192, %lor.lhs.false184, %lor.lhs.false181, %if.then178
  %116 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9674
  %offset220 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %116, i32 0, i32 2, !dbg !9675
  store i64 -9223372036854775808, i64* %offset220, align 8, !dbg !9676
  br label %if.end223, !dbg !9674

if.else221:                                       ; preds = %lor.lhs.false210
  %117 = load i64, i64* %bitpos, align 8, !dbg !9677
  %118 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9678
  %offset222 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %118, i32 0, i32 2, !dbg !9679
  store i64 %117, i64* %offset222, align 8, !dbg !9680
  br label %if.end223

if.end223:                                        ; preds = %if.else221, %if.then219
  br label %if.end234, !dbg !9681

if.else224:                                       ; preds = %if.else174
  %119 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9682
  %type225 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %119, i32 0, i32 0, !dbg !9684
  %120 = load i32, i32* %type225, align 8, !dbg !9684
  %cmp226 = icmp eq i32 %120, 2, !dbg !9685
  br i1 %cmp226, label %if.then228, label %if.else232, !dbg !9686

if.then228:                                       ; preds = %if.else224
  %121 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9687
  %type229 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %121, i32 0, i32 0, !dbg !9689
  store i32 0, i32* %type229, align 8, !dbg !9690
  %122 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9691
  %var230 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %122, i32 0, i32 1, !dbg !9692
  store i32 1, i32* %var230, align 4, !dbg !9693
  %123 = load %struct.constraint_expr*, %struct.constraint_expr** %result, align 8, !dbg !9694
  %offset231 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %123, i32 0, i32 2, !dbg !9695
  store i64 0, i64* %offset231, align 8, !dbg !9696
  br label %if.end233, !dbg !9697

if.else232:                                       ; preds = %if.else224
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 3060, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9698
  br label %if.end233

if.end233:                                        ; preds = %if.else232, %if.then228
  br label %if.end234

if.end234:                                        ; preds = %if.end233, %if.end223
  br label %if.end235

if.end235:                                        ; preds = %if.end234, %if.end173
  br label %if.end236

if.end236:                                        ; preds = %if.then, %if.end235, %if.then80
  ret void, !dbg !9699
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_constraint_for_ssa_var(%union.tree_node* %t, %struct.VEC_ce_s_heap** %results, i8 zeroext %address_p) #0 !dbg !9700 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %results.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %address_p.addr = alloca i8, align 1
  %cexpr = alloca %struct.constraint_expr, align 8
  %vi = alloca %struct.variable_info*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !9701, metadata !DIExpression()), !dbg !9702
  store %struct.VEC_ce_s_heap** %results, %struct.VEC_ce_s_heap*** %results.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %results.addr, metadata !9703, metadata !DIExpression()), !dbg !9704
  store i8 %address_p, i8* %address_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %address_p.addr, metadata !9705, metadata !DIExpression()), !dbg !9706
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %cexpr, metadata !9707, metadata !DIExpression()), !dbg !9708
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !9709, metadata !DIExpression()), !dbg !9710
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9711
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9711
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9711
  %bf.load = load i64, i64* %1, align 8, !dbg !9711
  %bf.clear = and i64 %bf.load, 65535, !dbg !9711
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9711
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !9711
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !9711

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9711
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9711
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9711
  %bf.load2 = load i64, i64* %3, align 8, !dbg !9711
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9711
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9711
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !9711
  br i1 %cmp5, label %cond.false, label %lor.lhs.false6, !dbg !9711

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9711
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9711
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !9711
  %bf.load8 = load i64, i64* %5, align 8, !dbg !9711
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !9711
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !9711
  %cmp11 = icmp eq i32 %bf.cast10, 36, !dbg !9711
  br i1 %cmp11, label %cond.false, label %lor.lhs.false12, !dbg !9711

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9711
  %base13 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9711
  %7 = bitcast %struct.tree_base* %base13 to i64*, !dbg !9711
  %bf.load14 = load i64, i64* %7, align 8, !dbg !9711
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !9711
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !9711
  %cmp17 = icmp eq i32 %bf.cast16, 141, !dbg !9711
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false39, !dbg !9711

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9711
  %ssa_name = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !9711
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !9711
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9711
  %base18 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !9711
  %10 = bitcast %struct.tree_base* %base18 to i64*, !dbg !9711
  %bf.load19 = load i64, i64* %10, align 8, !dbg !9711
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !9711
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !9711
  %cmp22 = icmp eq i32 %bf.cast21, 32, !dbg !9711
  br i1 %cmp22, label %cond.false, label %lor.lhs.false23, !dbg !9711

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9711
  %ssa_name24 = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !9711
  %var25 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name24, i32 0, i32 1, !dbg !9711
  %12 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !9711
  %base26 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !9711
  %13 = bitcast %struct.tree_base* %base26 to i64*, !dbg !9711
  %bf.load27 = load i64, i64* %13, align 8, !dbg !9711
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !9711
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !9711
  %cmp30 = icmp eq i32 %bf.cast29, 34, !dbg !9711
  br i1 %cmp30, label %cond.false, label %lor.lhs.false31, !dbg !9711

lor.lhs.false31:                                  ; preds = %lor.lhs.false23
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9711
  %ssa_name32 = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !9711
  %var33 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name32, i32 0, i32 1, !dbg !9711
  %15 = load %union.tree_node*, %union.tree_node** %var33, align 8, !dbg !9711
  %base34 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !9711
  %16 = bitcast %struct.tree_base* %base34 to i64*, !dbg !9711
  %bf.load35 = load i64, i64* %16, align 8, !dbg !9711
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !9711
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !9711
  %cmp38 = icmp eq i32 %bf.cast37, 36, !dbg !9711
  br i1 %cmp38, label %cond.false, label %lor.lhs.false39, !dbg !9711

lor.lhs.false39:                                  ; preds = %lor.lhs.false31, %lor.lhs.false12
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9711
  %base40 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !9711
  %18 = bitcast %struct.tree_base* %base40 to i64*, !dbg !9711
  %bf.load41 = load i64, i64* %18, align 8, !dbg !9711
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !9711
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !9711
  %idxprom = sext i32 %bf.cast43 to i64, !dbg !9711
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9711
  %19 = load i32, i32* %arrayidx, align 4, !dbg !9711
  %cmp44 = icmp eq i32 %19, 3, !dbg !9711
  br i1 %cmp44, label %cond.false, label %cond.true, !dbg !9711

cond.true:                                        ; preds = %lor.lhs.false39
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2699, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9711
  br label %cond.end, !dbg !9711

cond.false:                                       ; preds = %lor.lhs.false39, %lor.lhs.false31, %lor.lhs.false23, %land.lhs.true, %lor.lhs.false6, %lor.lhs.false, %entry
  br label %cond.end, !dbg !9711

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9711
  %20 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9712
  %base45 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !9712
  %21 = bitcast %struct.tree_base* %base45 to i64*, !dbg !9712
  %bf.load46 = load i64, i64* %21, align 8, !dbg !9712
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !9712
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !9712
  %cmp49 = icmp eq i32 %bf.cast48, 141, !dbg !9714
  br i1 %cmp49, label %land.lhs.true50, label %if.end, !dbg !9715

land.lhs.true50:                                  ; preds = %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9716
  %ssa_name51 = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !9716
  %var52 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name51, i32 0, i32 1, !dbg !9716
  %23 = load %union.tree_node*, %union.tree_node** %var52, align 8, !dbg !9716
  %base53 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !9716
  %24 = bitcast %struct.tree_base* %base53 to i64*, !dbg !9716
  %bf.load54 = load i64, i64* %24, align 8, !dbg !9716
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !9716
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !9716
  %cmp57 = icmp eq i32 %bf.cast56, 34, !dbg !9717
  br i1 %cmp57, label %land.lhs.true58, label %if.end, !dbg !9718

land.lhs.true58:                                  ; preds = %land.lhs.true50
  %25 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9719
  %base59 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !9719
  %26 = bitcast %struct.tree_base* %base59 to i64*, !dbg !9719
  %bf.load60 = load i64, i64* %26, align 8, !dbg !9719
  %bf.lshr = lshr i64 %bf.load60, 32, !dbg !9719
  %bf.clear61 = and i64 %bf.lshr, 1, !dbg !9719
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !9719
  %tobool = icmp ne i32 %bf.cast62, 0, !dbg !9719
  br i1 %tobool, label %if.then, label %if.end, !dbg !9720

if.then:                                          ; preds = %land.lhs.true58
  %27 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9721
  %ssa_name63 = bitcast %union.tree_node* %27 to %struct.tree_ssa_name*, !dbg !9721
  %var64 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name63, i32 0, i32 1, !dbg !9721
  %28 = load %union.tree_node*, %union.tree_node** %var64, align 8, !dbg !9721
  %29 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9723
  %30 = load i8, i8* %address_p.addr, align 1, !dbg !9724
  call void @get_constraint_for_ssa_var(%union.tree_node* %28, %struct.VEC_ce_s_heap** %29, i8 zeroext %30), !dbg !9725
  br label %return, !dbg !9726

if.end:                                           ; preds = %land.lhs.true58, %land.lhs.true50, %cond.end
  %31 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9727
  %call = call %struct.variable_info* @get_vi_for_tree(%union.tree_node* %31), !dbg !9728
  store %struct.variable_info* %call, %struct.variable_info** %vi, align 8, !dbg !9729
  %32 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !9730
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %32, i32 0, i32 0, !dbg !9731
  %33 = load i32, i32* %id, align 8, !dbg !9731
  %var65 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 1, !dbg !9732
  store i32 %33, i32* %var65, align 4, !dbg !9733
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 0, !dbg !9734
  store i32 0, i32* %type, align 8, !dbg !9735
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 2, !dbg !9736
  store i64 0, i64* %offset, align 8, !dbg !9737
  %var66 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 1, !dbg !9738
  %34 = load i32, i32* %var66, align 4, !dbg !9738
  %cmp67 = icmp eq i32 %34, 1, !dbg !9740
  br i1 %cmp67, label %land.lhs.true68, label %if.end78, !dbg !9741

land.lhs.true68:                                  ; preds = %if.end
  %35 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9742
  %base69 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !9742
  %36 = bitcast %struct.tree_base* %base69 to i64*, !dbg !9742
  %bf.load70 = load i64, i64* %36, align 8, !dbg !9742
  %bf.lshr71 = lshr i64 %bf.load70, 20, !dbg !9742
  %bf.clear72 = and i64 %bf.lshr71, 1, !dbg !9742
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !9742
  %tobool74 = icmp ne i32 %bf.cast73, 0, !dbg !9742
  br i1 %tobool74, label %if.then75, label %if.end78, !dbg !9743

if.then75:                                        ; preds = %land.lhs.true68
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2719, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9744
  %type76 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 0, !dbg !9746
  store i32 2, i32* %type76, align 8, !dbg !9747
  %var77 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 1, !dbg !9748
  store i32 2, i32* %var77, align 4, !dbg !9749
  br label %if.end78, !dbg !9750

if.end78:                                         ; preds = %if.then75, %land.lhs.true68, %if.end
  %37 = load i8, i8* %address_p.addr, align 1, !dbg !9751
  %tobool79 = icmp ne i8 %37, 0, !dbg !9751
  br i1 %tobool79, label %if.end91, label %land.lhs.true80, !dbg !9753

land.lhs.true80:                                  ; preds = %if.end78
  %38 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !9754
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %38, i32 0, i32 1, !dbg !9755
  %bf.load81 = load i8, i8* %is_full_var, align 4, !dbg !9755
  %bf.lshr82 = lshr i8 %bf.load81, 3, !dbg !9755
  %bf.clear83 = and i8 %bf.lshr82, 1, !dbg !9755
  %bf.cast84 = zext i8 %bf.clear83 to i32, !dbg !9755
  %tobool85 = icmp ne i32 %bf.cast84, 0, !dbg !9754
  br i1 %tobool85, label %if.end91, label %if.then86, !dbg !9756

if.then86:                                        ; preds = %land.lhs.true80
  br label %for.cond, !dbg !9757

for.cond:                                         ; preds = %for.inc, %if.then86
  %39 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !9759
  %tobool87 = icmp ne %struct.variable_info* %39, null, !dbg !9762
  br i1 %tobool87, label %for.body, label %for.end, !dbg !9762

for.body:                                         ; preds = %for.cond
  %40 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !9763
  %id88 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %40, i32 0, i32 0, !dbg !9765
  %41 = load i32, i32* %id88, align 8, !dbg !9765
  %var89 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %cexpr, i32 0, i32 1, !dbg !9766
  store i32 %41, i32* %var89, align 4, !dbg !9767
  %42 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9768
  %call90 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %42, %struct.constraint_expr* %cexpr), !dbg !9768
  br label %for.inc, !dbg !9769

for.inc:                                          ; preds = %for.body
  %43 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !9770
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %43, i32 0, i32 2, !dbg !9771
  %44 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !9771
  store %struct.variable_info* %44, %struct.variable_info** %vi, align 8, !dbg !9772
  br label %for.cond, !dbg !9773, !llvm.loop !9774

for.end:                                          ; preds = %for.cond
  br label %return, !dbg !9776

if.end91:                                         ; preds = %land.lhs.true80, %if.end78
  %45 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %results.addr, align 8, !dbg !9777
  %call92 = call %struct.constraint_expr* @VEC_ce_s_heap_safe_push(%struct.VEC_ce_s_heap** %45, %struct.constraint_expr* %cexpr), !dbg !9777
  br label %return, !dbg !9778

return:                                           ; preds = %if.end91, %for.end, %if.then
  ret void, !dbg !9778
}

declare dso_local %union.tree_node* @get_ref_base_and_extent(%union.tree_node*, i64*, i64*, i64*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ranges_overlap_p(i64 %pos1, i64 %size1, i64 %pos2, i64 %size2) #0 !dbg !9779 {
entry:
  %retval = alloca i8, align 1
  %pos1.addr = alloca i64, align 8
  %size1.addr = alloca i64, align 8
  %pos2.addr = alloca i64, align 8
  %size2.addr = alloca i64, align 8
  store i64 %pos1, i64* %pos1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos1.addr, metadata !9782, metadata !DIExpression()), !dbg !9783
  store i64 %size1, i64* %size1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size1.addr, metadata !9784, metadata !DIExpression()), !dbg !9785
  store i64 %pos2, i64* %pos2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %pos2.addr, metadata !9786, metadata !DIExpression()), !dbg !9787
  store i64 %size2, i64* %size2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size2.addr, metadata !9788, metadata !DIExpression()), !dbg !9789
  %0 = load i64, i64* %pos1.addr, align 8, !dbg !9790
  %1 = load i64, i64* %pos2.addr, align 8, !dbg !9792
  %cmp = icmp uge i64 %0, %1, !dbg !9793
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9794

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %size2.addr, align 8, !dbg !9795
  %cmp1 = icmp eq i64 %2, -1, !dbg !9796
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !9797

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load i64, i64* %pos1.addr, align 8, !dbg !9798
  %4 = load i64, i64* %pos2.addr, align 8, !dbg !9799
  %5 = load i64, i64* %size2.addr, align 8, !dbg !9800
  %add = add i64 %4, %5, !dbg !9801
  %cmp2 = icmp ult i64 %3, %add, !dbg !9802
  br i1 %cmp2, label %if.then, label %if.end, !dbg !9803

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !9804
  br label %return, !dbg !9804

if.end:                                           ; preds = %lor.lhs.false, %entry
  %6 = load i64, i64* %pos2.addr, align 8, !dbg !9805
  %7 = load i64, i64* %pos1.addr, align 8, !dbg !9807
  %cmp3 = icmp uge i64 %6, %7, !dbg !9808
  br i1 %cmp3, label %land.lhs.true4, label %if.end10, !dbg !9809

land.lhs.true4:                                   ; preds = %if.end
  %8 = load i64, i64* %size1.addr, align 8, !dbg !9810
  %cmp5 = icmp eq i64 %8, -1, !dbg !9811
  br i1 %cmp5, label %if.then9, label %lor.lhs.false6, !dbg !9812

lor.lhs.false6:                                   ; preds = %land.lhs.true4
  %9 = load i64, i64* %pos2.addr, align 8, !dbg !9813
  %10 = load i64, i64* %pos1.addr, align 8, !dbg !9814
  %11 = load i64, i64* %size1.addr, align 8, !dbg !9815
  %add7 = add i64 %10, %11, !dbg !9816
  %cmp8 = icmp ult i64 %9, %add7, !dbg !9817
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !9818

if.then9:                                         ; preds = %lor.lhs.false6, %land.lhs.true4
  store i8 1, i8* %retval, align 1, !dbg !9819
  br label %return, !dbg !9819

if.end10:                                         ; preds = %lor.lhs.false6, %if.end
  store i8 0, i8* %retval, align 1, !dbg !9820
  br label %return, !dbg !9820

return:                                           ; preds = %if.end10, %if.then9, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !9821
  ret i8 %12, !dbg !9821
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ref_contains_array_ref(%union.tree_node* %ref) #0 !dbg !9822 {
entry:
  %retval = alloca i8, align 1
  %ref.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !9823, metadata !DIExpression()), !dbg !9824
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !9825
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !9825
  %tobool = icmp ne i8 %call, 0, !dbg !9825
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9825

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.57, i64 0, i64 0), i32 1161, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9825
  br label %cond.end, !dbg !9825

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9825

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9825
  br label %do.body, !dbg !9826

do.body:                                          ; preds = %do.cond, %cond.end
  %1 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !9827
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9827
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9827
  %bf.load = load i64, i64* %2, align 8, !dbg !9827
  %bf.clear = and i64 %bf.load, 65535, !dbg !9827
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9827
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !9830
  br i1 %cmp, label %if.then, label %if.end, !dbg !9831

if.then:                                          ; preds = %do.body
  store i8 1, i8* %retval, align 1, !dbg !9832
  br label %return, !dbg !9832

if.end:                                           ; preds = %do.body
  %3 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !9833
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !9833
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9833
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9833
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9833
  store %union.tree_node* %4, %union.tree_node** %ref.addr, align 8, !dbg !9834
  br label %do.cond, !dbg !9835

do.cond:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !9836
  %call1 = call zeroext i8 @handled_component_p(%union.tree_node* %5), !dbg !9837
  %tobool2 = icmp ne i8 %call1, 0, !dbg !9835
  br i1 %tobool2, label %do.body, label %do.end, !dbg !9835, !llvm.loop !9838

do.end:                                           ; preds = %do.cond
  store i8 0, i8* %retval, align 1, !dbg !9840
  br label %return, !dbg !9840

return:                                           ; preds = %do.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !9841
  ret i8 %6, !dbg !9841
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !9842 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !9843, metadata !DIExpression()), !dbg !9844
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9845
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9845
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9845
  %bf.load = load i64, i64* %1, align 8, !dbg !9845
  %bf.clear = and i64 %bf.load, 65535, !dbg !9845
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9845
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !9846

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !9847
  br label %return, !dbg !9847

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9849
  br label %return, !dbg !9849

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !9850
  ret i8 %2, !dbg !9850
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9851 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9854, metadata !DIExpression()), !dbg !9855
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9856, metadata !DIExpression()), !dbg !9857
  %0 = load i32, i32* %index.addr, align 4, !dbg !9858
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9858
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !9858
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !9858
  %2 = load i32, i32* %capacity, align 8, !dbg !9858
  %cmp = icmp ule i32 %0, %2, !dbg !9858
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9858

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9858
  br label %cond.end, !dbg !9858

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9858

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9858
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9859
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !9860
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !9861
  %4 = load i32, i32* %index.addr, align 4, !dbg !9862
  %idxprom = zext i32 %4 to i64, !dbg !9859
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !9859
  ret %struct.phi_arg_d* %arrayidx, !dbg !9863
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !9864 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9865, metadata !DIExpression()), !dbg !9866
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !9867, metadata !DIExpression()), !dbg !9868
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9869
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !9871
  %tobool = icmp ne i8 %call, 0, !dbg !9871
  br i1 %tobool, label %if.then, label %if.else, !dbg !9872

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9873
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !9875
  %2 = load i32, i32* %i.addr, align 4, !dbg !9876
  %idxprom = zext i32 %2 to i64, !dbg !9875
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !9875
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9875
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !9877
  br label %return, !dbg !9877

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9878
  br label %return, !dbg !9878

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9879
  ret %union.tree_node* %4, !dbg !9879
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !9880 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9881, metadata !DIExpression()), !dbg !9882
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9883
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9884
  %cmp = icmp uge i32 %call, 1, !dbg !9885
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !9886

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9887
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !9888
  %cmp2 = icmp ule i32 %call1, 9, !dbg !9889
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !9890
  %land.ext = zext i1 %2 to i32, !dbg !9886
  %conv = trunc i32 %land.ext to i8, !dbg !9884
  ret i8 %conv, !dbg !9891
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !9892 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9895, metadata !DIExpression()), !dbg !9896
  call void @llvm.dbg.declare(metadata i64* %off, metadata !9897, metadata !DIExpression()), !dbg !9898
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9899
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !9900
  %idxprom = zext i32 %call to i64, !dbg !9901
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !9901
  %1 = load i64, i64* %arrayidx, align 8, !dbg !9901
  store i64 %1, i64* %off, align 8, !dbg !9902
  %2 = load i64, i64* %off, align 8, !dbg !9903
  %cmp = icmp ne i64 %2, 0, !dbg !9903
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9903

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9903
  br label %cond.end, !dbg !9903

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9903

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9903
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9904
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !9905
  %5 = load i64, i64* %off, align 8, !dbg !9906
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !9907
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !9908
  ret %union.tree_node** %6, !dbg !9909
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !9910 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9913, metadata !DIExpression()), !dbg !9914
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9915
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9916
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !9917
  ret i32 %call1, !dbg !9918
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !9919 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !9922, metadata !DIExpression()), !dbg !9923
  %0 = load i32, i32* %code.addr, align 4, !dbg !9924
  %idxprom = zext i32 %0 to i64, !dbg !9925
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !9925
  %1 = load i32, i32* %arrayidx, align 4, !dbg !9925
  ret i32 %1, !dbg !9926
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint_expr* @VEC_ce_s_base_index(%struct.VEC_ce_s_base* %vec_, i32 %ix_) #0 !dbg !9927 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ce_s_base* %vec_, %struct.VEC_ce_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_base** %vec_.addr, metadata !9930, metadata !DIExpression()), !dbg !9931
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9932, metadata !DIExpression()), !dbg !9931
  %0 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !9931
  %tobool = icmp ne %struct.VEC_ce_s_base* %0, null, !dbg !9931
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9931

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9931
  %2 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !9931
  %num = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %2, i32 0, i32 0, !dbg !9931
  %3 = load i32, i32* %num, align 8, !dbg !9931
  %cmp = icmp ult i32 %1, %3, !dbg !9931
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !9933
  %land.ext = zext i1 %4 to i32, !dbg !9931
  %5 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !9931
  %vec = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %5, i32 0, i32 2, !dbg !9931
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !9931
  %idxprom = zext i32 %6 to i64, !dbg !9931
  %arrayidx = getelementptr inbounds [1 x %struct.constraint_expr], [1 x %struct.constraint_expr]* %vec, i64 0, i64 %idxprom, !dbg !9931
  ret %struct.constraint_expr* %arrayidx, !dbg !9931
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.variable_info* @first_or_preceding_vi_for_offset(%struct.variable_info* %start, i64 %offset) #0 !dbg !9934 {
entry:
  %start.addr = alloca %struct.variable_info*, align 8
  %offset.addr = alloca i64, align 8
  store %struct.variable_info* %start, %struct.variable_info** %start.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %start.addr, metadata !9935, metadata !DIExpression()), !dbg !9936
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !9937, metadata !DIExpression()), !dbg !9938
  %0 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !9939
  %offset1 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %0, i32 0, i32 3, !dbg !9941
  %1 = load i64, i64* %offset1, align 8, !dbg !9941
  %2 = load i64, i64* %offset.addr, align 8, !dbg !9942
  %cmp = icmp ugt i64 %1, %2, !dbg !9943
  br i1 %cmp, label %if.then, label %if.end, !dbg !9944

if.then:                                          ; preds = %entry
  %3 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !9945
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %3, i32 0, i32 7, !dbg !9946
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9946
  %call = call %struct.variable_info* @lookup_vi_for_tree(%union.tree_node* %4), !dbg !9947
  store %struct.variable_info* %call, %struct.variable_info** %start.addr, align 8, !dbg !9948
  br label %if.end, !dbg !9949

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !9950

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !9951
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %5, i32 0, i32 2, !dbg !9952
  %6 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !9952
  %tobool = icmp ne %struct.variable_info* %6, null, !dbg !9951
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !9953

land.lhs.true:                                    ; preds = %while.cond
  %7 = load i64, i64* %offset.addr, align 8, !dbg !9954
  %8 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !9955
  %offset2 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %8, i32 0, i32 3, !dbg !9956
  %9 = load i64, i64* %offset2, align 8, !dbg !9956
  %cmp3 = icmp uge i64 %7, %9, !dbg !9957
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !9958

land.rhs:                                         ; preds = %land.lhs.true
  %10 = load i64, i64* %offset.addr, align 8, !dbg !9959
  %11 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !9960
  %offset4 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %11, i32 0, i32 3, !dbg !9961
  %12 = load i64, i64* %offset4, align 8, !dbg !9961
  %sub = sub i64 %10, %12, !dbg !9962
  %13 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !9963
  %size = getelementptr inbounds %struct.variable_info, %struct.variable_info* %13, i32 0, i32 4, !dbg !9964
  %14 = load i64, i64* %size, align 8, !dbg !9964
  %cmp5 = icmp ult i64 %sub, %14, !dbg !9965
  %lnot = xor i1 %cmp5, true, !dbg !9966
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %15 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !9967
  br i1 %15, label %while.body, label %while.end, !dbg !9950

while.body:                                       ; preds = %land.end
  %16 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !9968
  %next6 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %16, i32 0, i32 2, !dbg !9969
  %17 = load %struct.variable_info*, %struct.variable_info** %next6, align 8, !dbg !9969
  store %struct.variable_info* %17, %struct.variable_info** %start.addr, align 8, !dbg !9970
  br label %while.cond, !dbg !9950, !llvm.loop !9971

while.end:                                        ; preds = %land.end
  %18 = load %struct.variable_info*, %struct.variable_info** %start.addr, align 8, !dbg !9972
  ret %struct.variable_info* %18, !dbg !9973
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint_expr* @VEC_ce_s_base_replace(%struct.VEC_ce_s_base* %vec_, i32 %ix_, %struct.constraint_expr* %obj_) #0 !dbg !9974 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.constraint_expr*, align 8
  %slot_ = alloca %struct.constraint_expr*, align 8
  store %struct.VEC_ce_s_base* %vec_, %struct.VEC_ce_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_base** %vec_.addr, metadata !9977, metadata !DIExpression()), !dbg !9978
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9979, metadata !DIExpression()), !dbg !9978
  store %struct.constraint_expr* %obj_, %struct.constraint_expr** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %obj_.addr, metadata !9980, metadata !DIExpression()), !dbg !9978
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %slot_, metadata !9981, metadata !DIExpression()), !dbg !9978
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !9978
  %1 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !9978
  %num = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %1, i32 0, i32 0, !dbg !9978
  %2 = load i32, i32* %num, align 8, !dbg !9978
  %cmp = icmp ult i32 %0, %2, !dbg !9978
  %conv = zext i1 %cmp to i32, !dbg !9978
  %3 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !9978
  %vec = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %3, i32 0, i32 2, !dbg !9978
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !9978
  %idxprom = zext i32 %4 to i64, !dbg !9978
  %arrayidx = getelementptr inbounds [1 x %struct.constraint_expr], [1 x %struct.constraint_expr]* %vec, i64 0, i64 %idxprom, !dbg !9978
  store %struct.constraint_expr* %arrayidx, %struct.constraint_expr** %slot_, align 8, !dbg !9978
  %5 = load %struct.constraint_expr*, %struct.constraint_expr** %obj_.addr, align 8, !dbg !9982
  %tobool = icmp ne %struct.constraint_expr* %5, null, !dbg !9982
  br i1 %tobool, label %if.then, label %if.end, !dbg !9978

if.then:                                          ; preds = %entry
  %6 = load %struct.constraint_expr*, %struct.constraint_expr** %slot_, align 8, !dbg !9982
  %7 = load %struct.constraint_expr*, %struct.constraint_expr** %obj_.addr, align 8, !dbg !9982
  %8 = bitcast %struct.constraint_expr* %6 to i8*, !dbg !9982
  %9 = bitcast %struct.constraint_expr* %7 to i8*, !dbg !9982
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !9982
  br label %if.end, !dbg !9982

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.constraint_expr*, %struct.constraint_expr** %slot_, align 8, !dbg !9978
  ret %struct.constraint_expr* %10, !dbg !9978
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) #0 !dbg !9984 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9985, metadata !DIExpression()), !dbg !9986
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9987
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !9988
  ret %union.tree_node* %call, !dbg !9989
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_constraint_to(i32 %id, %union.tree_node* %op) #0 !dbg !9990 {
entry:
  %id.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  %rhsc = alloca %struct.VEC_ce_s_heap*, align 8
  %c = alloca %struct.constraint_expr*, align 8
  %includes = alloca %struct.constraint_expr, align 8
  %j = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !9993, metadata !DIExpression()), !dbg !9994
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !9995, metadata !DIExpression()), !dbg !9996
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap** %rhsc, metadata !9997, metadata !DIExpression()), !dbg !9998
  store %struct.VEC_ce_s_heap* null, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !9998
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %c, metadata !9999, metadata !DIExpression()), !dbg !10000
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %includes, metadata !10001, metadata !DIExpression()), !dbg !10002
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10003, metadata !DIExpression()), !dbg !10004
  %0 = load i32, i32* %id.addr, align 4, !dbg !10005
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %includes, i32 0, i32 1, !dbg !10006
  store i32 %0, i32* %var, align 4, !dbg !10007
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %includes, i32 0, i32 2, !dbg !10008
  store i64 0, i64* %offset, align 8, !dbg !10009
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %includes, i32 0, i32 0, !dbg !10010
  store i32 0, i32* %type, align 8, !dbg !10011
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !10012
  call void @get_constraint_for(%union.tree_node* %1, %struct.VEC_ce_s_heap** %rhsc), !dbg !10013
  store i32 0, i32* %j, align 4, !dbg !10014
  br label %for.cond, !dbg !10016

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !10017
  %tobool = icmp ne %struct.VEC_ce_s_heap* %2, null, !dbg !10017
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10017

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %rhsc, align 8, !dbg !10017
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %3, i32 0, i32 0, !dbg !10017
  br label %cond.end, !dbg !10017

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10017

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10017
  %4 = load i32, i32* %j, align 4, !dbg !10017
  %call = call i32 @VEC_ce_s_base_iterate(%struct.VEC_ce_s_base* %cond, i32 %4, %struct.constraint_expr** %c), !dbg !10017
  %tobool1 = icmp ne i32 %call, 0, !dbg !10019
  br i1 %tobool1, label %for.body, label %for.end, !dbg !10019

for.body:                                         ; preds = %cond.end
  %5 = load %struct.constraint_expr*, %struct.constraint_expr** %c, align 8, !dbg !10020
  %6 = bitcast %struct.constraint_expr* %includes to { i64, i64 }*, !dbg !10021
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !10021
  %8 = load i64, i64* %7, align 8, !dbg !10021
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !10021
  %10 = load i64, i64* %9, align 8, !dbg !10021
  %11 = bitcast %struct.constraint_expr* %5 to { i64, i64 }*, !dbg !10021
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !10021
  %13 = load i64, i64* %12, align 8, !dbg !10021
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !10021
  %15 = load i64, i64* %14, align 8, !dbg !10021
  %call2 = call %struct.constraint* @new_constraint(i64 %8, i64 %10, i64 %13, i64 %15), !dbg !10021
  call void @process_constraint(%struct.constraint* %call2), !dbg !10022
  br label %for.inc, !dbg !10022

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %j, align 4, !dbg !10023
  %inc = add i32 %16, 1, !dbg !10023
  store i32 %inc, i32* %j, align 4, !dbg !10023
  br label %for.cond, !dbg !10024, !llvm.loop !10025

for.end:                                          ; preds = %cond.end
  call void @VEC_ce_s_heap_free(%struct.VEC_ce_s_heap** %rhsc), !dbg !10027
  ret void, !dbg !10028
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %s) #0 !dbg !10029 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !10030, metadata !DIExpression()), !dbg !10031
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !10032
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !10033
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !10034
  %bf.load = load i32, i32* %1, align 8, !dbg !10034
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10034
  %and = and i32 %bf.lshr, 4, !dbg !10035
  %cmp = icmp ne i32 %and, 0, !dbg !10036
  %conv = zext i1 %cmp to i32, !dbg !10036
  %conv1 = trunc i32 %conv to i8, !dbg !10037
  ret i8 %conv1, !dbg !10038
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !10039 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10040, metadata !DIExpression()), !dbg !10041
  call void @llvm.dbg.declare(metadata i32* %code, metadata !10042, metadata !DIExpression()), !dbg !10043
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10044
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10045
  store i32 %call, i32* %code, align 4, !dbg !10043
  %1 = load i32, i32* %code, align 4, !dbg !10046
  %cmp = icmp eq i32 %1, 6, !dbg !10048
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10049

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !10050
  %cmp1 = icmp eq i32 %2, 1, !dbg !10051
  br i1 %cmp1, label %if.then, label %if.else, !dbg !10052

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10053
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !10054
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !10055
  %bf.load = load i32, i32* %4, align 8, !dbg !10055
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10055
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !10056
  br label %return, !dbg !10056

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !10057
  %cmp2 = icmp eq i32 %5, 8, !dbg !10059
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !10060

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !10061
  br label %return, !dbg !10061

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10062
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !10063
  br label %return, !dbg !10063

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !10064
  ret i32 %6, !dbg !10064
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !10065 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !10068, metadata !DIExpression()), !dbg !10069
  %0 = load i32, i32* %code.addr, align 4, !dbg !10070
  %idxprom = sext i32 %0 to i64, !dbg !10071
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !10071
  %1 = load i8, i8* %arrayidx, align 1, !dbg !10071
  %conv = zext i8 %1 to i32, !dbg !10072
  ret i32 %conv, !dbg !10073
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !10074 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10075, metadata !DIExpression()), !dbg !10076
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !10077, metadata !DIExpression()), !dbg !10078
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10079
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !10080
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !10078
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10081, metadata !DIExpression()), !dbg !10082
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !10083
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !10083
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10083
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !10083
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !10082
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10084
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !10084
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !10084
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !10084
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !10085
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10086
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !10086
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !10086
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !10086
  ret %union.tree_node* %6, !dbg !10087
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ce_s_heap_reserve(%struct.VEC_ce_s_heap** %vec_, i32 %alloc_) #0 !dbg !10088 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ce_s_heap** %vec_, %struct.VEC_ce_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_heap*** %vec_.addr, metadata !10091, metadata !DIExpression()), !dbg !10092
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10093, metadata !DIExpression()), !dbg !10092
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !10094, metadata !DIExpression()), !dbg !10092
  %0 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !10092
  %1 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %0, align 8, !dbg !10092
  %tobool = icmp ne %struct.VEC_ce_s_heap* %1, null, !dbg !10092
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10092

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !10092
  %3 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %2, align 8, !dbg !10092
  %base = getelementptr inbounds %struct.VEC_ce_s_heap, %struct.VEC_ce_s_heap* %3, i32 0, i32 0, !dbg !10092
  br label %cond.end, !dbg !10092

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10092

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ce_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10092
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !10092
  %call = call i32 @VEC_ce_s_base_space(%struct.VEC_ce_s_base* %cond, i32 %4), !dbg !10092
  %tobool1 = icmp ne i32 %call, 0, !dbg !10092
  %lnot = xor i1 %tobool1, true, !dbg !10092
  %lnot.ext = zext i1 %lnot to i32, !dbg !10092
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !10092
  %5 = load i32, i32* %extend, align 4, !dbg !10095
  %tobool2 = icmp ne i32 %5, 0, !dbg !10095
  br i1 %tobool2, label %if.then, label %if.end, !dbg !10092

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !10095
  %7 = load %struct.VEC_ce_s_heap*, %struct.VEC_ce_s_heap** %6, align 8, !dbg !10095
  %8 = bitcast %struct.VEC_ce_s_heap* %7 to i8*, !dbg !10095
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !10095
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 16), !dbg !10095
  %10 = bitcast i8* %call3 to %struct.VEC_ce_s_heap*, !dbg !10095
  %11 = load %struct.VEC_ce_s_heap**, %struct.VEC_ce_s_heap*** %vec_.addr, align 8, !dbg !10095
  store %struct.VEC_ce_s_heap* %10, %struct.VEC_ce_s_heap** %11, align 8, !dbg !10095
  br label %if.end, !dbg !10095

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !10092
  ret i32 %12, !dbg !10092
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint_expr* @VEC_ce_s_base_quick_push(%struct.VEC_ce_s_base* %vec_, %struct.constraint_expr* %obj_) #0 !dbg !10097 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_base*, align 8
  %obj_.addr = alloca %struct.constraint_expr*, align 8
  %slot_ = alloca %struct.constraint_expr*, align 8
  store %struct.VEC_ce_s_base* %vec_, %struct.VEC_ce_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_base** %vec_.addr, metadata !10100, metadata !DIExpression()), !dbg !10101
  store %struct.constraint_expr* %obj_, %struct.constraint_expr** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %obj_.addr, metadata !10102, metadata !DIExpression()), !dbg !10101
  call void @llvm.dbg.declare(metadata %struct.constraint_expr** %slot_, metadata !10103, metadata !DIExpression()), !dbg !10101
  %0 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !10101
  %num = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %0, i32 0, i32 0, !dbg !10101
  %1 = load i32, i32* %num, align 8, !dbg !10101
  %2 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !10101
  %alloc = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %2, i32 0, i32 1, !dbg !10101
  %3 = load i32, i32* %alloc, align 4, !dbg !10101
  %cmp = icmp ult i32 %1, %3, !dbg !10101
  %conv = zext i1 %cmp to i32, !dbg !10101
  %4 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !10101
  %vec = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %4, i32 0, i32 2, !dbg !10101
  %5 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !10101
  %num1 = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %5, i32 0, i32 0, !dbg !10101
  %6 = load i32, i32* %num1, align 8, !dbg !10101
  %inc = add i32 %6, 1, !dbg !10101
  store i32 %inc, i32* %num1, align 8, !dbg !10101
  %idxprom = zext i32 %6 to i64, !dbg !10101
  %arrayidx = getelementptr inbounds [1 x %struct.constraint_expr], [1 x %struct.constraint_expr]* %vec, i64 0, i64 %idxprom, !dbg !10101
  store %struct.constraint_expr* %arrayidx, %struct.constraint_expr** %slot_, align 8, !dbg !10101
  %7 = load %struct.constraint_expr*, %struct.constraint_expr** %obj_.addr, align 8, !dbg !10104
  %tobool = icmp ne %struct.constraint_expr* %7, null, !dbg !10104
  br i1 %tobool, label %if.then, label %if.end, !dbg !10101

if.then:                                          ; preds = %entry
  %8 = load %struct.constraint_expr*, %struct.constraint_expr** %slot_, align 8, !dbg !10104
  %9 = load %struct.constraint_expr*, %struct.constraint_expr** %obj_.addr, align 8, !dbg !10104
  %10 = bitcast %struct.constraint_expr* %8 to i8*, !dbg !10104
  %11 = bitcast %struct.constraint_expr* %9 to i8*, !dbg !10104
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !10104
  br label %if.end, !dbg !10104

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.constraint_expr*, %struct.constraint_expr** %slot_, align 8, !dbg !10101
  ret %struct.constraint_expr* %12, !dbg !10101
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ce_s_base_space(%struct.VEC_ce_s_base* %vec_, i32 %alloc_) #0 !dbg !10106 {
entry:
  %vec_.addr = alloca %struct.VEC_ce_s_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ce_s_base* %vec_, %struct.VEC_ce_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ce_s_base** %vec_.addr, metadata !10109, metadata !DIExpression()), !dbg !10110
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10111, metadata !DIExpression()), !dbg !10110
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !10110
  %cmp = icmp sge i32 %0, 0, !dbg !10110
  %conv = zext i1 %cmp to i32, !dbg !10110
  %1 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !10110
  %tobool = icmp ne %struct.VEC_ce_s_base* %1, null, !dbg !10110
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10110

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !10110
  %alloc = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %2, i32 0, i32 1, !dbg !10110
  %3 = load i32, i32* %alloc, align 4, !dbg !10110
  %4 = load %struct.VEC_ce_s_base*, %struct.VEC_ce_s_base** %vec_.addr, align 8, !dbg !10110
  %num = getelementptr inbounds %struct.VEC_ce_s_base, %struct.VEC_ce_s_base* %4, i32 0, i32 0, !dbg !10110
  %5 = load i32, i32* %num, align 8, !dbg !10110
  %sub = sub i32 %3, %5, !dbg !10110
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !10110
  %cmp1 = icmp uge i32 %sub, %6, !dbg !10110
  %conv2 = zext i1 %cmp1 to i32, !dbg !10110
  br label %cond.end, !dbg !10110

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !10110
  %tobool3 = icmp ne i32 %7, 0, !dbg !10110
  %lnot = xor i1 %tobool3, true, !dbg !10110
  %lnot.ext = zext i1 %lnot to i32, !dbg !10110
  br label %cond.end, !dbg !10110

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !10110
  ret i32 %cond, !dbg !10110
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !10112 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10118, metadata !DIExpression()), !dbg !10119
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10120
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !10121
  %1 = load i32, i32* %flags, align 8, !dbg !10121
  %and = and i32 %1, 512, !dbg !10122
  %tobool = icmp ne i32 %and, 0, !dbg !10122
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !10123

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10124
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !10125
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !10126
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !10126
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !10124
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !10127

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10128
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !10129
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !10130
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !10130
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !10131
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !10131
  br label %cond.end, !dbg !10127

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !10127

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !10127
  ret %struct.gimple_seq_d* %cond, !dbg !10132
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !10133 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !10139, metadata !DIExpression()), !dbg !10140
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !10141
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !10141
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10141

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !10142
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !10143
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !10143
  br label %cond.end, !dbg !10141

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10141

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !10141
  ret %struct.gimple_seq_node_d* %cond, !dbg !10144
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_graph(i32 %size) #0 !dbg !10145 {
entry:
  %size.addr = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !10146, metadata !DIExpression()), !dbg !10147
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10148, metadata !DIExpression()), !dbg !10149
  %call = call i8* @xcalloc(i64 1, i64 128), !dbg !10150
  %0 = bitcast i8* %call to %struct.constraint_graph*, !dbg !10150
  store %struct.constraint_graph* %0, %struct.constraint_graph** @graph, align 8, !dbg !10151
  %1 = load i32, i32* %size.addr, align 4, !dbg !10152
  %2 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10153
  %size1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %2, i32 0, i32 0, !dbg !10154
  store i32 %1, i32* %size1, align 8, !dbg !10155
  %3 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10156
  %size2 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %3, i32 0, i32 0, !dbg !10156
  %4 = load i32, i32* %size2, align 8, !dbg !10156
  %conv = zext i32 %4 to i64, !dbg !10156
  %call3 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !10156
  %5 = bitcast i8* %call3 to %struct.bitmap_head_def**, !dbg !10156
  %6 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10157
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %6, i32 0, i32 1, !dbg !10158
  store %struct.bitmap_head_def** %5, %struct.bitmap_head_def*** %succs, align 8, !dbg !10159
  %7 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10160
  %size4 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %7, i32 0, i32 0, !dbg !10160
  %8 = load i32, i32* %size4, align 8, !dbg !10160
  %conv5 = zext i32 %8 to i64, !dbg !10160
  %mul = mul i64 4, %conv5, !dbg !10160
  %call6 = call i8* @xmalloc(i64 %mul), !dbg !10160
  %9 = bitcast i8* %call6 to i32*, !dbg !10160
  %10 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10161
  %indirect_cycles = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %10, i32 0, i32 4, !dbg !10162
  store i32* %9, i32** %indirect_cycles, align 8, !dbg !10163
  %11 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10164
  %size7 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %11, i32 0, i32 0, !dbg !10164
  %12 = load i32, i32* %size7, align 8, !dbg !10164
  %conv8 = zext i32 %12 to i64, !dbg !10164
  %mul9 = mul i64 4, %conv8, !dbg !10164
  %call10 = call i8* @xmalloc(i64 %mul9), !dbg !10164
  %13 = bitcast i8* %call10 to i32*, !dbg !10164
  %14 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10165
  %rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %14, i32 0, i32 5, !dbg !10166
  store i32* %13, i32** %rep, align 8, !dbg !10167
  %15 = load i32, i32* %size.addr, align 4, !dbg !10168
  %conv11 = zext i32 %15 to i64, !dbg !10168
  %call12 = call i8* @xcalloc(i64 %conv11, i64 8), !dbg !10168
  %16 = bitcast i8* %call12 to %struct.VEC_constraint_t_heap**, !dbg !10168
  %17 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10169
  %complex = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %17, i32 0, i32 15, !dbg !10170
  store %struct.VEC_constraint_t_heap** %16, %struct.VEC_constraint_t_heap*** %complex, align 8, !dbg !10171
  %18 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10172
  %size13 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %18, i32 0, i32 0, !dbg !10172
  %19 = load i32, i32* %size13, align 8, !dbg !10172
  %conv14 = zext i32 %19 to i64, !dbg !10172
  %call15 = call i8* @xcalloc(i64 %conv14, i64 4), !dbg !10172
  %20 = bitcast i8* %call15 to i32*, !dbg !10172
  %21 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10173
  %pe = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %21, i32 0, i32 7, !dbg !10174
  store i32* %20, i32** %pe, align 8, !dbg !10175
  %22 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10176
  %size16 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %22, i32 0, i32 0, !dbg !10176
  %23 = load i32, i32* %size16, align 8, !dbg !10176
  %conv17 = zext i32 %23 to i64, !dbg !10176
  %mul18 = mul i64 4, %conv17, !dbg !10176
  %call19 = call i8* @xmalloc(i64 %mul18), !dbg !10176
  %24 = bitcast i8* %call19 to i32*, !dbg !10176
  %25 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10177
  %pe_rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %25, i32 0, i32 8, !dbg !10178
  store i32* %24, i32** %pe_rep, align 8, !dbg !10179
  store i32 0, i32* %j, align 4, !dbg !10180
  br label %for.cond, !dbg !10182

for.cond:                                         ; preds = %for.inc, %entry
  %26 = load i32, i32* %j, align 4, !dbg !10183
  %27 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10185
  %size20 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %27, i32 0, i32 0, !dbg !10186
  %28 = load i32, i32* %size20, align 8, !dbg !10186
  %cmp = icmp ult i32 %26, %28, !dbg !10187
  br i1 %cmp, label %for.body, label %for.end, !dbg !10188

for.body:                                         ; preds = %for.cond
  %29 = load i32, i32* %j, align 4, !dbg !10189
  %30 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10191
  %rep22 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %30, i32 0, i32 5, !dbg !10192
  %31 = load i32*, i32** %rep22, align 8, !dbg !10192
  %32 = load i32, i32* %j, align 4, !dbg !10193
  %idxprom = zext i32 %32 to i64, !dbg !10191
  %arrayidx = getelementptr inbounds i32, i32* %31, i64 %idxprom, !dbg !10191
  store i32 %29, i32* %arrayidx, align 4, !dbg !10194
  %33 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10195
  %pe_rep23 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %33, i32 0, i32 8, !dbg !10196
  %34 = load i32*, i32** %pe_rep23, align 8, !dbg !10196
  %35 = load i32, i32* %j, align 4, !dbg !10197
  %idxprom24 = zext i32 %35 to i64, !dbg !10195
  %arrayidx25 = getelementptr inbounds i32, i32* %34, i64 %idxprom24, !dbg !10195
  store i32 -1, i32* %arrayidx25, align 4, !dbg !10198
  %36 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10199
  %indirect_cycles26 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %36, i32 0, i32 4, !dbg !10200
  %37 = load i32*, i32** %indirect_cycles26, align 8, !dbg !10200
  %38 = load i32, i32* %j, align 4, !dbg !10201
  %idxprom27 = zext i32 %38 to i64, !dbg !10199
  %arrayidx28 = getelementptr inbounds i32, i32* %37, i64 %idxprom27, !dbg !10199
  store i32 -1, i32* %arrayidx28, align 4, !dbg !10202
  br label %for.inc, !dbg !10203

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %j, align 4, !dbg !10204
  %inc = add i32 %39, 1, !dbg !10204
  store i32 %inc, i32* %j, align 4, !dbg !10204
  br label %for.cond, !dbg !10205, !llvm.loop !10206

for.end:                                          ; preds = %for.cond
  ret void, !dbg !10208
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_pred_graph() #0 !dbg !10209 {
entry:
  %i = alloca i32, align 4
  %c = alloca %struct.constraint*, align 8
  %j = alloca i32, align 4
  %lhs = alloca %struct.constraint_expr, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  %lhsvar = alloca i32, align 4
  %rhsvar = alloca i32, align 4
  %v = alloca %struct.variable_info*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10210, metadata !DIExpression()), !dbg !10211
  call void @llvm.dbg.declare(metadata %struct.constraint** %c, metadata !10212, metadata !DIExpression()), !dbg !10213
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10214, metadata !DIExpression()), !dbg !10215
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10216
  %size = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 0, !dbg !10216
  %1 = load i32, i32* %size, align 8, !dbg !10216
  %conv = zext i32 %1 to i64, !dbg !10216
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !10216
  %2 = bitcast i8* %call to %struct.bitmap_head_def**, !dbg !10216
  %3 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10217
  %implicit_preds = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %3, i32 0, i32 2, !dbg !10218
  store %struct.bitmap_head_def** %2, %struct.bitmap_head_def*** %implicit_preds, align 8, !dbg !10219
  %4 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10220
  %size1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %4, i32 0, i32 0, !dbg !10220
  %5 = load i32, i32* %size1, align 8, !dbg !10220
  %conv2 = zext i32 %5 to i64, !dbg !10220
  %call3 = call i8* @xcalloc(i64 %conv2, i64 8), !dbg !10220
  %6 = bitcast i8* %call3 to %struct.bitmap_head_def**, !dbg !10220
  %7 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10221
  %preds = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %7, i32 0, i32 3, !dbg !10222
  store %struct.bitmap_head_def** %6, %struct.bitmap_head_def*** %preds, align 8, !dbg !10223
  %8 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10224
  %size4 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %8, i32 0, i32 0, !dbg !10224
  %9 = load i32, i32* %size4, align 8, !dbg !10224
  %conv5 = zext i32 %9 to i64, !dbg !10224
  %call6 = call i8* @xcalloc(i64 %conv5, i64 4), !dbg !10224
  %10 = bitcast i8* %call6 to i32*, !dbg !10224
  %11 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10225
  %pointer_label = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %11, i32 0, i32 9, !dbg !10226
  store i32* %10, i32** %pointer_label, align 8, !dbg !10227
  %12 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10228
  %size7 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %12, i32 0, i32 0, !dbg !10228
  %13 = load i32, i32* %size7, align 8, !dbg !10228
  %conv8 = zext i32 %13 to i64, !dbg !10228
  %call9 = call i8* @xcalloc(i64 %conv8, i64 4), !dbg !10228
  %14 = bitcast i8* %call9 to i32*, !dbg !10228
  %15 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10229
  %loc_label = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %15, i32 0, i32 10, !dbg !10230
  store i32* %14, i32** %loc_label, align 8, !dbg !10231
  %16 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10232
  %size10 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %16, i32 0, i32 0, !dbg !10232
  %17 = load i32, i32* %size10, align 8, !dbg !10232
  %conv11 = zext i32 %17 to i64, !dbg !10232
  %call12 = call i8* @xcalloc(i64 %conv11, i64 8), !dbg !10232
  %18 = bitcast i8* %call12 to %struct.bitmap_head_def**, !dbg !10232
  %19 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10233
  %pointed_by = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %19, i32 0, i32 11, !dbg !10234
  store %struct.bitmap_head_def** %18, %struct.bitmap_head_def*** %pointed_by, align 8, !dbg !10235
  %20 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10236
  %size13 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %20, i32 0, i32 0, !dbg !10236
  %21 = load i32, i32* %size13, align 8, !dbg !10236
  %conv14 = zext i32 %21 to i64, !dbg !10236
  %call15 = call i8* @xcalloc(i64 %conv14, i64 8), !dbg !10236
  %22 = bitcast i8* %call15 to %struct.bitmap_head_def**, !dbg !10236
  %23 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10237
  %points_to = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %23, i32 0, i32 12, !dbg !10238
  store %struct.bitmap_head_def** %22, %struct.bitmap_head_def*** %points_to, align 8, !dbg !10239
  %24 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10240
  %size16 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %24, i32 0, i32 0, !dbg !10240
  %25 = load i32, i32* %size16, align 8, !dbg !10240
  %conv17 = zext i32 %25 to i64, !dbg !10240
  %mul = mul i64 4, %conv17, !dbg !10240
  %call18 = call i8* @xmalloc(i64 %mul), !dbg !10240
  %26 = bitcast i8* %call18 to i32*, !dbg !10240
  %27 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10241
  %eq_rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %27, i32 0, i32 6, !dbg !10242
  store i32* %26, i32** %eq_rep, align 8, !dbg !10243
  %28 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10244
  %size19 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %28, i32 0, i32 0, !dbg !10245
  %29 = load i32, i32* %size19, align 8, !dbg !10245
  %call20 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %29), !dbg !10246
  %30 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10247
  %direct_nodes = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %30, i32 0, i32 13, !dbg !10248
  store %struct.simple_bitmap_def* %call20, %struct.simple_bitmap_def** %direct_nodes, align 8, !dbg !10249
  %call21 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !10250
  %31 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10251
  %address_taken = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %31, i32 0, i32 14, !dbg !10252
  store %struct.bitmap_head_def* %call21, %struct.bitmap_head_def** %address_taken, align 8, !dbg !10253
  %32 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10254
  %direct_nodes22 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %32, i32 0, i32 13, !dbg !10255
  %33 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes22, align 8, !dbg !10255
  call void @sbitmap_zero(%struct.simple_bitmap_def* %33), !dbg !10256
  store i32 0, i32* %j, align 4, !dbg !10257
  br label %for.cond, !dbg !10259

for.cond:                                         ; preds = %for.inc, %entry
  %34 = load i32, i32* %j, align 4, !dbg !10260
  %35 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10262
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %35, null, !dbg !10262
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10262

cond.true:                                        ; preds = %for.cond
  %36 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10262
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %36, i32 0, i32 0, !dbg !10262
  br label %cond.end, !dbg !10262

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10262

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10262
  %call23 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !10262
  %cmp = icmp ult i32 %34, %call23, !dbg !10263
  br i1 %cmp, label %for.body, label %for.end, !dbg !10264

for.body:                                         ; preds = %cond.end
  %37 = load i32, i32* %j, align 4, !dbg !10265
  %call25 = call %struct.variable_info* @get_varinfo(i32 %37), !dbg !10268
  %is_special_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call25, i32 0, i32 1, !dbg !10269
  %bf.load = load i8, i8* %is_special_var, align 4, !dbg !10269
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !10269
  %bf.clear = and i8 %bf.lshr, 1, !dbg !10269
  %bf.cast = zext i8 %bf.clear to i32, !dbg !10269
  %tobool26 = icmp ne i32 %bf.cast, 0, !dbg !10268
  br i1 %tobool26, label %if.end, label %if.then, !dbg !10270

if.then:                                          ; preds = %for.body
  %38 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10271
  %direct_nodes27 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %38, i32 0, i32 13, !dbg !10272
  %39 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes27, align 8, !dbg !10272
  %40 = load i32, i32* %j, align 4, !dbg !10273
  call void @SET_BIT(%struct.simple_bitmap_def* %39, i32 %40), !dbg !10274
  br label %if.end, !dbg !10274

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !10275

for.inc:                                          ; preds = %if.end
  %41 = load i32, i32* %j, align 4, !dbg !10276
  %inc = add i32 %41, 1, !dbg !10276
  store i32 %inc, i32* %j, align 4, !dbg !10276
  br label %for.cond, !dbg !10277, !llvm.loop !10278

for.end:                                          ; preds = %cond.end
  store i32 0, i32* %j, align 4, !dbg !10280
  br label %for.cond28, !dbg !10282

for.cond28:                                       ; preds = %for.inc34, %for.end
  %42 = load i32, i32* %j, align 4, !dbg !10283
  %43 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10285
  %size29 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %43, i32 0, i32 0, !dbg !10286
  %44 = load i32, i32* %size29, align 8, !dbg !10286
  %cmp30 = icmp ult i32 %42, %44, !dbg !10287
  br i1 %cmp30, label %for.body32, label %for.end36, !dbg !10288

for.body32:                                       ; preds = %for.cond28
  %45 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10289
  %eq_rep33 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %45, i32 0, i32 6, !dbg !10290
  %46 = load i32*, i32** %eq_rep33, align 8, !dbg !10290
  %47 = load i32, i32* %j, align 4, !dbg !10291
  %idxprom = zext i32 %47 to i64, !dbg !10289
  %arrayidx = getelementptr inbounds i32, i32* %46, i64 %idxprom, !dbg !10289
  store i32 -1, i32* %arrayidx, align 4, !dbg !10292
  br label %for.inc34, !dbg !10289

for.inc34:                                        ; preds = %for.body32
  %48 = load i32, i32* %j, align 4, !dbg !10293
  %inc35 = add i32 %48, 1, !dbg !10293
  store i32 %inc35, i32* %j, align 4, !dbg !10293
  br label %for.cond28, !dbg !10294, !llvm.loop !10295

for.end36:                                        ; preds = %for.cond28
  store i32 0, i32* %j, align 4, !dbg !10297
  br label %for.cond37, !dbg !10299

for.cond37:                                       ; preds = %for.inc50, %for.end36
  %49 = load i32, i32* %j, align 4, !dbg !10300
  %50 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10302
  %tobool38 = icmp ne %struct.VEC_varinfo_t_heap* %50, null, !dbg !10302
  br i1 %tobool38, label %cond.true39, label %cond.false41, !dbg !10302

cond.true39:                                      ; preds = %for.cond37
  %51 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10302
  %base40 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %51, i32 0, i32 0, !dbg !10302
  br label %cond.end42, !dbg !10302

cond.false41:                                     ; preds = %for.cond37
  br label %cond.end42, !dbg !10302

cond.end42:                                       ; preds = %cond.false41, %cond.true39
  %cond43 = phi %struct.VEC_varinfo_t_base* [ %base40, %cond.true39 ], [ null, %cond.false41 ], !dbg !10302
  %call44 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond43), !dbg !10302
  %cmp45 = icmp ult i32 %49, %call44, !dbg !10303
  br i1 %cmp45, label %for.body47, label %for.end52, !dbg !10304

for.body47:                                       ; preds = %cond.end42
  %52 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10305
  %indirect_cycles = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %52, i32 0, i32 4, !dbg !10306
  %53 = load i32*, i32** %indirect_cycles, align 8, !dbg !10306
  %54 = load i32, i32* %j, align 4, !dbg !10307
  %idxprom48 = zext i32 %54 to i64, !dbg !10305
  %arrayidx49 = getelementptr inbounds i32, i32* %53, i64 %idxprom48, !dbg !10305
  store i32 -1, i32* %arrayidx49, align 4, !dbg !10308
  br label %for.inc50, !dbg !10305

for.inc50:                                        ; preds = %for.body47
  %55 = load i32, i32* %j, align 4, !dbg !10309
  %inc51 = add i32 %55, 1, !dbg !10309
  store i32 %inc51, i32* %j, align 4, !dbg !10309
  br label %for.cond37, !dbg !10310, !llvm.loop !10311

for.end52:                                        ; preds = %cond.end42
  store i32 0, i32* %i, align 4, !dbg !10313
  br label %for.cond53, !dbg !10315

for.cond53:                                       ; preds = %for.inc231, %for.end52
  %56 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10316
  %tobool54 = icmp ne %struct.VEC_constraint_t_heap* %56, null, !dbg !10316
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !10316

cond.true55:                                      ; preds = %for.cond53
  %57 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10316
  %base56 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %57, i32 0, i32 0, !dbg !10316
  br label %cond.end58, !dbg !10316

cond.false57:                                     ; preds = %for.cond53
  br label %cond.end58, !dbg !10316

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_constraint_t_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !10316
  %58 = load i32, i32* %i, align 4, !dbg !10316
  %call60 = call i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %cond59, i32 %58, %struct.constraint** %c), !dbg !10316
  %tobool61 = icmp ne i32 %call60, 0, !dbg !10318
  br i1 %tobool61, label %for.body62, label %for.end233, !dbg !10318

for.body62:                                       ; preds = %cond.end58
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !10319, metadata !DIExpression()), !dbg !10321
  %59 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10322
  %lhs63 = getelementptr inbounds %struct.constraint, %struct.constraint* %59, i32 0, i32 0, !dbg !10323
  %60 = bitcast %struct.constraint_expr* %lhs to i8*, !dbg !10323
  %61 = bitcast %struct.constraint_expr* %lhs63 to i8*, !dbg !10323
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false), !dbg !10323
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !10324, metadata !DIExpression()), !dbg !10325
  %62 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10326
  %rhs64 = getelementptr inbounds %struct.constraint, %struct.constraint* %62, i32 0, i32 1, !dbg !10327
  %63 = bitcast %struct.constraint_expr* %rhs to i8*, !dbg !10327
  %64 = bitcast %struct.constraint_expr* %rhs64 to i8*, !dbg !10327
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false), !dbg !10327
  call void @llvm.dbg.declare(metadata i32* %lhsvar, metadata !10328, metadata !DIExpression()), !dbg !10329
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !10330
  %65 = load i32, i32* %var, align 4, !dbg !10330
  store i32 %65, i32* %lhsvar, align 4, !dbg !10329
  call void @llvm.dbg.declare(metadata i32* %rhsvar, metadata !10331, metadata !DIExpression()), !dbg !10332
  %var65 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !10333
  %66 = load i32, i32* %var65, align 4, !dbg !10333
  store i32 %66, i32* %rhsvar, align 4, !dbg !10332
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !10334
  %67 = load i32, i32* %type, align 8, !dbg !10334
  %cmp66 = icmp eq i32 %67, 1, !dbg !10336
  br i1 %cmp66, label %if.then68, label %if.else, !dbg !10337

if.then68:                                        ; preds = %for.body62
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !10338
  %68 = load i64, i64* %offset, align 8, !dbg !10338
  %cmp69 = icmp eq i64 %68, 0, !dbg !10341
  br i1 %cmp69, label %land.lhs.true, label %if.end86, !dbg !10342

land.lhs.true:                                    ; preds = %if.then68
  %offset71 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !10343
  %69 = load i64, i64* %offset71, align 8, !dbg !10343
  %cmp72 = icmp eq i64 %69, 0, !dbg !10344
  br i1 %cmp72, label %land.lhs.true74, label %if.end86, !dbg !10345

land.lhs.true74:                                  ; preds = %land.lhs.true
  %type75 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !10346
  %70 = load i32, i32* %type75, align 8, !dbg !10346
  %cmp76 = icmp eq i32 %70, 0, !dbg !10347
  br i1 %cmp76, label %if.then78, label %if.end86, !dbg !10348

if.then78:                                        ; preds = %land.lhs.true74
  %71 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10349
  %72 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10350
  %tobool79 = icmp ne %struct.VEC_varinfo_t_heap* %72, null, !dbg !10350
  br i1 %tobool79, label %cond.true80, label %cond.false82, !dbg !10350

cond.true80:                                      ; preds = %if.then78
  %73 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10350
  %base81 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %73, i32 0, i32 0, !dbg !10350
  br label %cond.end83, !dbg !10350

cond.false82:                                     ; preds = %if.then78
  br label %cond.end83, !dbg !10350

cond.end83:                                       ; preds = %cond.false82, %cond.true80
  %cond84 = phi %struct.VEC_varinfo_t_base* [ %base81, %cond.true80 ], [ null, %cond.false82 ], !dbg !10350
  %call85 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond84), !dbg !10350
  %74 = load i32, i32* %lhsvar, align 4, !dbg !10351
  %add = add i32 %call85, %74, !dbg !10352
  %75 = load i32, i32* %rhsvar, align 4, !dbg !10353
  call void @add_pred_graph_edge(%struct.constraint_graph* %71, i32 %add, i32 %75), !dbg !10354
  br label %if.end86, !dbg !10354

if.end86:                                         ; preds = %cond.end83, %land.lhs.true74, %land.lhs.true, %if.then68
  br label %if.end230, !dbg !10355

if.else:                                          ; preds = %for.body62
  %type87 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !10356
  %76 = load i32, i32* %type87, align 8, !dbg !10356
  %cmp88 = icmp eq i32 %76, 1, !dbg !10358
  br i1 %cmp88, label %if.then90, label %if.else114, !dbg !10359

if.then90:                                        ; preds = %if.else
  %offset91 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !10360
  %77 = load i64, i64* %offset91, align 8, !dbg !10360
  %cmp92 = icmp eq i64 %77, 0, !dbg !10363
  br i1 %cmp92, label %land.lhs.true94, label %if.else111, !dbg !10364

land.lhs.true94:                                  ; preds = %if.then90
  %offset95 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !10365
  %78 = load i64, i64* %offset95, align 8, !dbg !10365
  %cmp96 = icmp eq i64 %78, 0, !dbg !10366
  br i1 %cmp96, label %land.lhs.true98, label %if.else111, !dbg !10367

land.lhs.true98:                                  ; preds = %land.lhs.true94
  %type99 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !10368
  %79 = load i32, i32* %type99, align 8, !dbg !10368
  %cmp100 = icmp eq i32 %79, 0, !dbg !10369
  br i1 %cmp100, label %if.then102, label %if.else111, !dbg !10370

if.then102:                                       ; preds = %land.lhs.true98
  %80 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10371
  %81 = load i32, i32* %lhsvar, align 4, !dbg !10372
  %82 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10373
  %tobool103 = icmp ne %struct.VEC_varinfo_t_heap* %82, null, !dbg !10373
  br i1 %tobool103, label %cond.true104, label %cond.false106, !dbg !10373

cond.true104:                                     ; preds = %if.then102
  %83 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10373
  %base105 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %83, i32 0, i32 0, !dbg !10373
  br label %cond.end107, !dbg !10373

cond.false106:                                    ; preds = %if.then102
  br label %cond.end107, !dbg !10373

cond.end107:                                      ; preds = %cond.false106, %cond.true104
  %cond108 = phi %struct.VEC_varinfo_t_base* [ %base105, %cond.true104 ], [ null, %cond.false106 ], !dbg !10373
  %call109 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond108), !dbg !10373
  %84 = load i32, i32* %rhsvar, align 4, !dbg !10374
  %add110 = add i32 %call109, %84, !dbg !10375
  call void @add_pred_graph_edge(%struct.constraint_graph* %80, i32 %81, i32 %add110), !dbg !10376
  br label %if.end113, !dbg !10376

if.else111:                                       ; preds = %land.lhs.true98, %land.lhs.true94, %if.then90
  %85 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10377
  %direct_nodes112 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %85, i32 0, i32 13, !dbg !10378
  %86 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes112, align 8, !dbg !10378
  %87 = load i32, i32* %lhsvar, align 4, !dbg !10379
  call void @RESET_BIT(%struct.simple_bitmap_def* %86, i32 %87), !dbg !10380
  br label %if.end113

if.end113:                                        ; preds = %if.else111, %cond.end107
  br label %if.end229, !dbg !10381

if.else114:                                       ; preds = %if.else
  %type115 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !10382
  %88 = load i32, i32* %type115, align 8, !dbg !10382
  %cmp116 = icmp eq i32 %88, 2, !dbg !10384
  br i1 %cmp116, label %if.then118, label %if.else172, !dbg !10385

if.then118:                                       ; preds = %if.else114
  call void @llvm.dbg.declare(metadata %struct.variable_info** %v, metadata !10386, metadata !DIExpression()), !dbg !10388
  %89 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10389
  %points_to119 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %89, i32 0, i32 12, !dbg !10391
  %90 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to119, align 8, !dbg !10391
  %91 = load i32, i32* %lhsvar, align 4, !dbg !10392
  %idxprom120 = zext i32 %91 to i64, !dbg !10389
  %arrayidx121 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %90, i64 %idxprom120, !dbg !10389
  %92 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx121, align 8, !dbg !10389
  %cmp122 = icmp eq %struct.bitmap_head_def* %92, null, !dbg !10393
  br i1 %cmp122, label %if.then124, label %if.end129, !dbg !10394

if.then124:                                       ; preds = %if.then118
  %call125 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !10395
  %93 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10396
  %points_to126 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %93, i32 0, i32 12, !dbg !10397
  %94 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to126, align 8, !dbg !10397
  %95 = load i32, i32* %lhsvar, align 4, !dbg !10398
  %idxprom127 = zext i32 %95 to i64, !dbg !10396
  %arrayidx128 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %94, i64 %idxprom127, !dbg !10396
  store %struct.bitmap_head_def* %call125, %struct.bitmap_head_def** %arrayidx128, align 8, !dbg !10399
  br label %if.end129, !dbg !10396

if.end129:                                        ; preds = %if.then124, %if.then118
  %96 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10400
  %points_to130 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %96, i32 0, i32 12, !dbg !10401
  %97 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to130, align 8, !dbg !10401
  %98 = load i32, i32* %lhsvar, align 4, !dbg !10402
  %idxprom131 = zext i32 %98 to i64, !dbg !10400
  %arrayidx132 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %97, i64 %idxprom131, !dbg !10400
  %99 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx132, align 8, !dbg !10400
  %100 = load i32, i32* %rhsvar, align 4, !dbg !10403
  %call133 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %99, i32 %100), !dbg !10404
  %101 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10405
  %pointed_by134 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %101, i32 0, i32 11, !dbg !10407
  %102 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %pointed_by134, align 8, !dbg !10407
  %103 = load i32, i32* %rhsvar, align 4, !dbg !10408
  %idxprom135 = zext i32 %103 to i64, !dbg !10405
  %arrayidx136 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %102, i64 %idxprom135, !dbg !10405
  %104 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx136, align 8, !dbg !10405
  %cmp137 = icmp eq %struct.bitmap_head_def* %104, null, !dbg !10409
  br i1 %cmp137, label %if.then139, label %if.end144, !dbg !10410

if.then139:                                       ; preds = %if.end129
  %call140 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !10411
  %105 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10412
  %pointed_by141 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %105, i32 0, i32 11, !dbg !10413
  %106 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %pointed_by141, align 8, !dbg !10413
  %107 = load i32, i32* %rhsvar, align 4, !dbg !10414
  %idxprom142 = zext i32 %107 to i64, !dbg !10412
  %arrayidx143 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %106, i64 %idxprom142, !dbg !10412
  store %struct.bitmap_head_def* %call140, %struct.bitmap_head_def** %arrayidx143, align 8, !dbg !10415
  br label %if.end144, !dbg !10412

if.end144:                                        ; preds = %if.then139, %if.end129
  %108 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10416
  %pointed_by145 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %108, i32 0, i32 11, !dbg !10417
  %109 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %pointed_by145, align 8, !dbg !10417
  %110 = load i32, i32* %rhsvar, align 4, !dbg !10418
  %idxprom146 = zext i32 %110 to i64, !dbg !10416
  %arrayidx147 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %109, i64 %idxprom146, !dbg !10416
  %111 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx147, align 8, !dbg !10416
  %112 = load i32, i32* %lhsvar, align 4, !dbg !10419
  %call148 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %111, i32 %112), !dbg !10420
  %113 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10421
  %114 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10422
  %tobool149 = icmp ne %struct.VEC_varinfo_t_heap* %114, null, !dbg !10422
  br i1 %tobool149, label %cond.true150, label %cond.false152, !dbg !10422

cond.true150:                                     ; preds = %if.end144
  %115 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10422
  %base151 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %115, i32 0, i32 0, !dbg !10422
  br label %cond.end153, !dbg !10422

cond.false152:                                    ; preds = %if.end144
  br label %cond.end153, !dbg !10422

cond.end153:                                      ; preds = %cond.false152, %cond.true150
  %cond154 = phi %struct.VEC_varinfo_t_base* [ %base151, %cond.true150 ], [ null, %cond.false152 ], !dbg !10422
  %call155 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond154), !dbg !10422
  %116 = load i32, i32* %lhsvar, align 4, !dbg !10423
  %add156 = add i32 %call155, %116, !dbg !10424
  %117 = load i32, i32* %rhsvar, align 4, !dbg !10425
  call void @add_implicit_graph_edge(%struct.constraint_graph* %113, i32 %add156, i32 %117), !dbg !10426
  %118 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10427
  %direct_nodes157 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %118, i32 0, i32 13, !dbg !10428
  %119 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes157, align 8, !dbg !10428
  %120 = load i32, i32* %rhsvar, align 4, !dbg !10429
  call void @RESET_BIT(%struct.simple_bitmap_def* %119, i32 %120), !dbg !10430
  %121 = load i32, i32* %rhsvar, align 4, !dbg !10431
  %call158 = call %struct.variable_info* @get_varinfo(i32 %121), !dbg !10432
  store %struct.variable_info* %call158, %struct.variable_info** %v, align 8, !dbg !10433
  %122 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !10434
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %122, i32 0, i32 1, !dbg !10436
  %bf.load159 = load i8, i8* %is_full_var, align 4, !dbg !10436
  %bf.lshr160 = lshr i8 %bf.load159, 3, !dbg !10436
  %bf.clear161 = and i8 %bf.lshr160, 1, !dbg !10436
  %bf.cast162 = zext i8 %bf.clear161 to i32, !dbg !10436
  %tobool163 = icmp ne i32 %bf.cast162, 0, !dbg !10434
  br i1 %tobool163, label %if.end169, label %if.then164, !dbg !10437

if.then164:                                       ; preds = %cond.end153
  %123 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !10438
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %123, i32 0, i32 7, !dbg !10440
  %124 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10440
  %call165 = call %struct.variable_info* @lookup_vi_for_tree(%union.tree_node* %124), !dbg !10441
  store %struct.variable_info* %call165, %struct.variable_info** %v, align 8, !dbg !10442
  br label %do.body, !dbg !10443

do.body:                                          ; preds = %do.cond, %if.then164
  %125 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10444
  %direct_nodes166 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %125, i32 0, i32 13, !dbg !10446
  %126 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes166, align 8, !dbg !10446
  %127 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !10447
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %127, i32 0, i32 0, !dbg !10448
  %128 = load i32, i32* %id, align 8, !dbg !10448
  call void @RESET_BIT(%struct.simple_bitmap_def* %126, i32 %128), !dbg !10449
  %129 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !10450
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %129, i32 0, i32 2, !dbg !10451
  %130 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !10451
  store %struct.variable_info* %130, %struct.variable_info** %v, align 8, !dbg !10452
  br label %do.cond, !dbg !10453

do.cond:                                          ; preds = %do.body
  %131 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !10454
  %cmp167 = icmp ne %struct.variable_info* %131, null, !dbg !10455
  br i1 %cmp167, label %do.body, label %do.end, !dbg !10453, !llvm.loop !10456

do.end:                                           ; preds = %do.cond
  br label %if.end169, !dbg !10458

if.end169:                                        ; preds = %do.end, %cond.end153
  %132 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10459
  %address_taken170 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %132, i32 0, i32 14, !dbg !10460
  %133 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %address_taken170, align 8, !dbg !10460
  %134 = load i32, i32* %rhsvar, align 4, !dbg !10461
  %call171 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %133, i32 %134), !dbg !10462
  br label %if.end228, !dbg !10463

if.else172:                                       ; preds = %if.else114
  %135 = load i32, i32* %lhsvar, align 4, !dbg !10464
  %cmp173 = icmp ugt i32 %135, 1, !dbg !10466
  br i1 %cmp173, label %land.lhs.true175, label %if.else203, !dbg !10467

land.lhs.true175:                                 ; preds = %if.else172
  %136 = load i32, i32* %lhsvar, align 4, !dbg !10468
  %137 = load i32, i32* %rhsvar, align 4, !dbg !10469
  %cmp176 = icmp ne i32 %136, %137, !dbg !10470
  br i1 %cmp176, label %land.lhs.true178, label %if.else203, !dbg !10471

land.lhs.true178:                                 ; preds = %land.lhs.true175
  %offset179 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !10472
  %138 = load i64, i64* %offset179, align 8, !dbg !10472
  %cmp180 = icmp eq i64 %138, 0, !dbg !10473
  br i1 %cmp180, label %land.lhs.true182, label %if.else203, !dbg !10474

land.lhs.true182:                                 ; preds = %land.lhs.true178
  %offset183 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !10475
  %139 = load i64, i64* %offset183, align 8, !dbg !10475
  %cmp184 = icmp eq i64 %139, 0, !dbg !10476
  br i1 %cmp184, label %if.then186, label %if.else203, !dbg !10477

if.then186:                                       ; preds = %land.lhs.true182
  %140 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10478
  %141 = load i32, i32* %lhsvar, align 4, !dbg !10480
  %142 = load i32, i32* %rhsvar, align 4, !dbg !10481
  call void @add_pred_graph_edge(%struct.constraint_graph* %140, i32 %141, i32 %142), !dbg !10482
  %143 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10483
  %144 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10484
  %tobool187 = icmp ne %struct.VEC_varinfo_t_heap* %144, null, !dbg !10484
  br i1 %tobool187, label %cond.true188, label %cond.false190, !dbg !10484

cond.true188:                                     ; preds = %if.then186
  %145 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10484
  %base189 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %145, i32 0, i32 0, !dbg !10484
  br label %cond.end191, !dbg !10484

cond.false190:                                    ; preds = %if.then186
  br label %cond.end191, !dbg !10484

cond.end191:                                      ; preds = %cond.false190, %cond.true188
  %cond192 = phi %struct.VEC_varinfo_t_base* [ %base189, %cond.true188 ], [ null, %cond.false190 ], !dbg !10484
  %call193 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond192), !dbg !10484
  %146 = load i32, i32* %lhsvar, align 4, !dbg !10485
  %add194 = add i32 %call193, %146, !dbg !10486
  %147 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10487
  %tobool195 = icmp ne %struct.VEC_varinfo_t_heap* %147, null, !dbg !10487
  br i1 %tobool195, label %cond.true196, label %cond.false198, !dbg !10487

cond.true196:                                     ; preds = %cond.end191
  %148 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10487
  %base197 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %148, i32 0, i32 0, !dbg !10487
  br label %cond.end199, !dbg !10487

cond.false198:                                    ; preds = %cond.end191
  br label %cond.end199, !dbg !10487

cond.end199:                                      ; preds = %cond.false198, %cond.true196
  %cond200 = phi %struct.VEC_varinfo_t_base* [ %base197, %cond.true196 ], [ null, %cond.false198 ], !dbg !10487
  %call201 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond200), !dbg !10487
  %149 = load i32, i32* %rhsvar, align 4, !dbg !10488
  %add202 = add i32 %call201, %149, !dbg !10489
  call void @add_implicit_graph_edge(%struct.constraint_graph* %143, i32 %add194, i32 %add202), !dbg !10490
  br label %if.end227, !dbg !10491

if.else203:                                       ; preds = %land.lhs.true182, %land.lhs.true178, %land.lhs.true175, %if.else172
  %offset204 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !10492
  %150 = load i64, i64* %offset204, align 8, !dbg !10492
  %cmp205 = icmp ne i64 %150, 0, !dbg !10494
  br i1 %cmp205, label %if.then210, label %lor.lhs.false, !dbg !10495

lor.lhs.false:                                    ; preds = %if.else203
  %offset207 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !10496
  %151 = load i64, i64* %offset207, align 8, !dbg !10496
  %cmp208 = icmp ne i64 %151, 0, !dbg !10497
  br i1 %cmp208, label %if.then210, label %if.end226, !dbg !10498

if.then210:                                       ; preds = %lor.lhs.false, %if.else203
  %offset211 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !10499
  %152 = load i64, i64* %offset211, align 8, !dbg !10499
  %cmp212 = icmp ne i64 %152, 0, !dbg !10502
  br i1 %cmp212, label %if.then214, label %if.else217, !dbg !10503

if.then214:                                       ; preds = %if.then210
  %153 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10504
  %direct_nodes215 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %153, i32 0, i32 13, !dbg !10505
  %154 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes215, align 8, !dbg !10505
  %var216 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !10506
  %155 = load i32, i32* %var216, align 4, !dbg !10506
  call void @RESET_BIT(%struct.simple_bitmap_def* %154, i32 %155), !dbg !10507
  br label %if.end225, !dbg !10507

if.else217:                                       ; preds = %if.then210
  %offset218 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !10508
  %156 = load i64, i64* %offset218, align 8, !dbg !10508
  %cmp219 = icmp ne i64 %156, 0, !dbg !10510
  br i1 %cmp219, label %if.then221, label %if.end224, !dbg !10511

if.then221:                                       ; preds = %if.else217
  %157 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10512
  %direct_nodes222 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %157, i32 0, i32 13, !dbg !10513
  %158 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes222, align 8, !dbg !10513
  %var223 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !10514
  %159 = load i32, i32* %var223, align 4, !dbg !10514
  call void @RESET_BIT(%struct.simple_bitmap_def* %158, i32 %159), !dbg !10515
  br label %if.end224, !dbg !10515

if.end224:                                        ; preds = %if.then221, %if.else217
  br label %if.end225

if.end225:                                        ; preds = %if.end224, %if.then214
  br label %if.end226, !dbg !10516

if.end226:                                        ; preds = %if.end225, %lor.lhs.false
  br label %if.end227

if.end227:                                        ; preds = %if.end226, %cond.end199
  br label %if.end228

if.end228:                                        ; preds = %if.end227, %if.end169
  br label %if.end229

if.end229:                                        ; preds = %if.end228, %if.end113
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %if.end86
  br label %for.inc231, !dbg !10517

for.inc231:                                       ; preds = %if.end230
  %160 = load i32, i32* %i, align 4, !dbg !10518
  %inc232 = add nsw i32 %160, 1, !dbg !10518
  store i32 %inc232, i32* %i, align 4, !dbg !10518
  br label %for.cond53, !dbg !10519, !llvm.loop !10520

for.end233:                                       ; preds = %cond.end58
  ret void, !dbg !10522
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.scc_info* @perform_var_substitution(%struct.constraint_graph* %graph) #0 !dbg !10523 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %si = alloca %struct.scc_info*, align 8
  %pointed_by = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %j = alloca i32, align 4
  %label = alloca i32, align 4
  %direct_node = alloca i8, align 1
  %node = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !10526, metadata !DIExpression()), !dbg !10527
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10528, metadata !DIExpression()), !dbg !10529
  call void @llvm.dbg.declare(metadata i32* %size, metadata !10530, metadata !DIExpression()), !dbg !10531
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10532
  %size1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 0, !dbg !10533
  %1 = load i32, i32* %size1, align 8, !dbg !10533
  store i32 %1, i32* %size, align 4, !dbg !10531
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si, metadata !10534, metadata !DIExpression()), !dbg !10535
  %2 = load i32, i32* %size, align 4, !dbg !10536
  %conv = zext i32 %2 to i64, !dbg !10536
  %call = call %struct.scc_info* @init_scc_info(i64 %conv), !dbg !10537
  store %struct.scc_info* %call, %struct.scc_info** %si, align 8, !dbg !10535
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* @iteration_obstack), !dbg !10538
  %call2 = call %struct.htab* @htab_create(i64 511, i32 (i8*)* @equiv_class_label_hash, i32 (i8*, i8*)* @equiv_class_label_eq, void (i8*)* @free), !dbg !10539
  store %struct.htab* %call2, %struct.htab** @pointer_equiv_class_table, align 8, !dbg !10540
  %call3 = call %struct.htab* @htab_create(i64 511, i32 (i8*)* @equiv_class_label_hash, i32 (i8*, i8*)* @equiv_class_label_eq, void (i8*)* @free), !dbg !10541
  store %struct.htab* %call3, %struct.htab** @location_equiv_class_table, align 8, !dbg !10542
  store i32 1, i32* @pointer_equiv_class, align 4, !dbg !10543
  store i32 1, i32* @location_equiv_class, align 4, !dbg !10544
  store i32 0, i32* %i, align 4, !dbg !10545
  br label %for.cond, !dbg !10547

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !10548
  %4 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10550
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %4, null, !dbg !10550
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10550

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10550
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %5, i32 0, i32 0, !dbg !10550
  br label %cond.end, !dbg !10550

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10550

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10550
  %call4 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !10550
  %cmp = icmp ult i32 %3, %call4, !dbg !10551
  br i1 %cmp, label %for.body, label %for.end, !dbg !10552

for.body:                                         ; preds = %cond.end
  %6 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10553
  %visited = getelementptr inbounds %struct.scc_info, %struct.scc_info* %6, i32 0, i32 0, !dbg !10553
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !10553
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 3, !dbg !10553
  %8 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10553
  %node_mapping = getelementptr inbounds %struct.scc_info, %struct.scc_info* %8, i32 0, i32 3, !dbg !10553
  %9 = load i32*, i32** %node_mapping, align 8, !dbg !10553
  %10 = load i32, i32* %i, align 4, !dbg !10553
  %idxprom = zext i32 %10 to i64, !dbg !10553
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !10553
  %11 = load i32, i32* %arrayidx, align 4, !dbg !10553
  %div = udiv i32 %11, 64, !dbg !10553
  %idxprom6 = zext i32 %div to i64, !dbg !10553
  %arrayidx7 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom6, !dbg !10553
  %12 = load i64, i64* %arrayidx7, align 8, !dbg !10553
  %13 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10553
  %node_mapping8 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %13, i32 0, i32 3, !dbg !10553
  %14 = load i32*, i32** %node_mapping8, align 8, !dbg !10553
  %15 = load i32, i32* %i, align 4, !dbg !10553
  %idxprom9 = zext i32 %15 to i64, !dbg !10553
  %arrayidx10 = getelementptr inbounds i32, i32* %14, i64 %idxprom9, !dbg !10553
  %16 = load i32, i32* %arrayidx10, align 4, !dbg !10553
  %rem = urem i32 %16, 64, !dbg !10553
  %sh_prom = zext i32 %rem to i64, !dbg !10553
  %shr = lshr i64 %12, %sh_prom, !dbg !10553
  %and = and i64 %shr, 1, !dbg !10553
  %tobool11 = icmp ne i64 %and, 0, !dbg !10553
  br i1 %tobool11, label %if.end, label %if.then, !dbg !10555

if.then:                                          ; preds = %for.body
  %17 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10556
  %18 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10557
  %19 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10558
  %node_mapping12 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %19, i32 0, i32 3, !dbg !10559
  %20 = load i32*, i32** %node_mapping12, align 8, !dbg !10559
  %21 = load i32, i32* %i, align 4, !dbg !10560
  %idxprom13 = zext i32 %21 to i64, !dbg !10558
  %arrayidx14 = getelementptr inbounds i32, i32* %20, i64 %idxprom13, !dbg !10558
  %22 = load i32, i32* %arrayidx14, align 4, !dbg !10558
  call void @condense_visit(%struct.constraint_graph* %17, %struct.scc_info* %18, i32 %22), !dbg !10561
  br label %if.end, !dbg !10561

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !10553

for.inc:                                          ; preds = %if.end
  %23 = load i32, i32* %i, align 4, !dbg !10562
  %inc = add i32 %23, 1, !dbg !10562
  store i32 %inc, i32* %i, align 4, !dbg !10562
  br label %for.cond, !dbg !10563, !llvm.loop !10564

for.end:                                          ; preds = %cond.end
  %24 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10566
  %visited15 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %24, i32 0, i32 0, !dbg !10567
  %25 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited15, align 8, !dbg !10567
  call void @sbitmap_zero(%struct.simple_bitmap_def* %25), !dbg !10568
  store i32 0, i32* %i, align 4, !dbg !10569
  br label %for.cond16, !dbg !10571

for.cond16:                                       ; preds = %for.inc48, %for.end
  %26 = load i32, i32* %i, align 4, !dbg !10572
  %27 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10574
  %tobool17 = icmp ne %struct.VEC_varinfo_t_heap* %27, null, !dbg !10574
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !10574

cond.true18:                                      ; preds = %for.cond16
  %28 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10574
  %base19 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %28, i32 0, i32 0, !dbg !10574
  br label %cond.end21, !dbg !10574

cond.false20:                                     ; preds = %for.cond16
  br label %cond.end21, !dbg !10574

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_varinfo_t_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !10574
  %call23 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond22), !dbg !10574
  %cmp24 = icmp ult i32 %26, %call23, !dbg !10575
  br i1 %cmp24, label %for.body26, label %for.end50, !dbg !10576

for.body26:                                       ; preds = %cond.end21
  %29 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10577
  %visited27 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %29, i32 0, i32 0, !dbg !10577
  %30 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited27, align 8, !dbg !10577
  %elms28 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %30, i32 0, i32 3, !dbg !10577
  %31 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10577
  %node_mapping29 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %31, i32 0, i32 3, !dbg !10577
  %32 = load i32*, i32** %node_mapping29, align 8, !dbg !10577
  %33 = load i32, i32* %i, align 4, !dbg !10577
  %idxprom30 = zext i32 %33 to i64, !dbg !10577
  %arrayidx31 = getelementptr inbounds i32, i32* %32, i64 %idxprom30, !dbg !10577
  %34 = load i32, i32* %arrayidx31, align 4, !dbg !10577
  %div32 = udiv i32 %34, 64, !dbg !10577
  %idxprom33 = zext i32 %div32 to i64, !dbg !10577
  %arrayidx34 = getelementptr inbounds [1 x i64], [1 x i64]* %elms28, i64 0, i64 %idxprom33, !dbg !10577
  %35 = load i64, i64* %arrayidx34, align 8, !dbg !10577
  %36 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10577
  %node_mapping35 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %36, i32 0, i32 3, !dbg !10577
  %37 = load i32*, i32** %node_mapping35, align 8, !dbg !10577
  %38 = load i32, i32* %i, align 4, !dbg !10577
  %idxprom36 = zext i32 %38 to i64, !dbg !10577
  %arrayidx37 = getelementptr inbounds i32, i32* %37, i64 %idxprom36, !dbg !10577
  %39 = load i32, i32* %arrayidx37, align 4, !dbg !10577
  %rem38 = urem i32 %39, 64, !dbg !10577
  %sh_prom39 = zext i32 %rem38 to i64, !dbg !10577
  %shr40 = lshr i64 %35, %sh_prom39, !dbg !10577
  %and41 = and i64 %shr40, 1, !dbg !10577
  %tobool42 = icmp ne i64 %and41, 0, !dbg !10577
  br i1 %tobool42, label %if.end47, label %if.then43, !dbg !10579

if.then43:                                        ; preds = %for.body26
  %40 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10580
  %41 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10581
  %42 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10582
  %node_mapping44 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %42, i32 0, i32 3, !dbg !10583
  %43 = load i32*, i32** %node_mapping44, align 8, !dbg !10583
  %44 = load i32, i32* %i, align 4, !dbg !10584
  %idxprom45 = zext i32 %44 to i64, !dbg !10582
  %arrayidx46 = getelementptr inbounds i32, i32* %43, i64 %idxprom45, !dbg !10582
  %45 = load i32, i32* %arrayidx46, align 4, !dbg !10582
  call void @label_visit(%struct.constraint_graph* %40, %struct.scc_info* %41, i32 %45), !dbg !10585
  br label %if.end47, !dbg !10585

if.end47:                                         ; preds = %if.then43, %for.body26
  br label %for.inc48, !dbg !10577

for.inc48:                                        ; preds = %if.end47
  %46 = load i32, i32* %i, align 4, !dbg !10586
  %inc49 = add i32 %46, 1, !dbg !10586
  store i32 %inc49, i32* %i, align 4, !dbg !10586
  br label %for.cond16, !dbg !10587, !llvm.loop !10588

for.end50:                                        ; preds = %cond.end21
  store i32 0, i32* %i, align 4, !dbg !10590
  br label %for.cond51, !dbg !10592

for.cond51:                                       ; preds = %for.inc105, %for.end50
  %47 = load i32, i32* %i, align 4, !dbg !10593
  %48 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10595
  %tobool52 = icmp ne %struct.VEC_varinfo_t_heap* %48, null, !dbg !10595
  br i1 %tobool52, label %cond.true53, label %cond.false55, !dbg !10595

cond.true53:                                      ; preds = %for.cond51
  %49 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10595
  %base54 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %49, i32 0, i32 0, !dbg !10595
  br label %cond.end56, !dbg !10595

cond.false55:                                     ; preds = %for.cond51
  br label %cond.end56, !dbg !10595

cond.end56:                                       ; preds = %cond.false55, %cond.true53
  %cond57 = phi %struct.VEC_varinfo_t_base* [ %base54, %cond.true53 ], [ null, %cond.false55 ], !dbg !10595
  %call58 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond57), !dbg !10595
  %cmp59 = icmp ult i32 %47, %call58, !dbg !10596
  br i1 %cmp59, label %for.body61, label %for.end107, !dbg !10597

for.body61:                                       ; preds = %cond.end56
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %pointed_by, metadata !10598, metadata !DIExpression()), !dbg !10600
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !10601, metadata !DIExpression()), !dbg !10602
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10603, metadata !DIExpression()), !dbg !10604
  call void @llvm.dbg.declare(metadata i32* %label, metadata !10605, metadata !DIExpression()), !dbg !10606
  %50 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10607
  %pointed_by62 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %50, i32 0, i32 11, !dbg !10609
  %51 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %pointed_by62, align 8, !dbg !10609
  %52 = load i32, i32* %i, align 4, !dbg !10610
  %idxprom63 = zext i32 %52 to i64, !dbg !10607
  %arrayidx64 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %51, i64 %idxprom63, !dbg !10607
  %53 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx64, align 8, !dbg !10607
  %tobool65 = icmp ne %struct.bitmap_head_def* %53, null, !dbg !10607
  br i1 %tobool65, label %if.end67, label %if.then66, !dbg !10611

if.then66:                                        ; preds = %for.body61
  br label %for.inc105, !dbg !10612

if.end67:                                         ; preds = %for.body61
  %call68 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @iteration_obstack), !dbg !10613
  store %struct.bitmap_head_def* %call68, %struct.bitmap_head_def** %pointed_by, align 8, !dbg !10614
  %54 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10615
  %pointed_by69 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %54, i32 0, i32 11, !dbg !10615
  %55 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %pointed_by69, align 8, !dbg !10615
  %56 = load i32, i32* %i, align 4, !dbg !10615
  %idxprom70 = zext i32 %56 to i64, !dbg !10615
  %arrayidx71 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %55, i64 %idxprom70, !dbg !10615
  %57 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx71, align 8, !dbg !10615
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %57, i32 0, i32* %j), !dbg !10615
  br label %for.cond72, !dbg !10615

for.cond72:                                       ; preds = %for.inc82, %if.end67
  %call73 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !10617
  %tobool74 = icmp ne i8 %call73, 0, !dbg !10615
  br i1 %tobool74, label %for.body75, label %for.end83, !dbg !10615

for.body75:                                       ; preds = %for.cond72
  %58 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pointed_by, align 8, !dbg !10619
  %59 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10621
  %pointer_label = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %59, i32 0, i32 9, !dbg !10622
  %60 = load i32*, i32** %pointer_label, align 8, !dbg !10622
  %61 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10623
  %node_mapping76 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %61, i32 0, i32 3, !dbg !10624
  %62 = load i32*, i32** %node_mapping76, align 8, !dbg !10624
  %63 = load i32, i32* %j, align 4, !dbg !10625
  %idxprom77 = zext i32 %63 to i64, !dbg !10623
  %arrayidx78 = getelementptr inbounds i32, i32* %62, i64 %idxprom77, !dbg !10623
  %64 = load i32, i32* %arrayidx78, align 4, !dbg !10623
  %idxprom79 = zext i32 %64 to i64, !dbg !10621
  %arrayidx80 = getelementptr inbounds i32, i32* %60, i64 %idxprom79, !dbg !10621
  %65 = load i32, i32* %arrayidx80, align 4, !dbg !10621
  %call81 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %58, i32 %65), !dbg !10626
  br label %for.inc82, !dbg !10627

for.inc82:                                        ; preds = %for.body75
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !10617
  br label %for.cond72, !dbg !10617, !llvm.loop !10628

for.end83:                                        ; preds = %for.cond72
  %66 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10630
  %pointed_by84 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %66, i32 0, i32 11, !dbg !10630
  %67 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %pointed_by84, align 8, !dbg !10630
  %68 = load i32, i32* %i, align 4, !dbg !10630
  %idxprom85 = zext i32 %68 to i64, !dbg !10630
  %arrayidx86 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %67, i64 %idxprom85, !dbg !10630
  %69 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx86, align 8, !dbg !10630
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %69), !dbg !10630
  %70 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10630
  %pointed_by87 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %70, i32 0, i32 11, !dbg !10630
  %71 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %pointed_by87, align 8, !dbg !10630
  %72 = load i32, i32* %i, align 4, !dbg !10630
  %idxprom88 = zext i32 %72 to i64, !dbg !10630
  %arrayidx89 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %71, i64 %idxprom88, !dbg !10630
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %arrayidx89, align 8, !dbg !10630
  %73 = load %struct.htab*, %struct.htab** @location_equiv_class_table, align 8, !dbg !10631
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pointed_by, align 8, !dbg !10632
  %call90 = call i32 @equiv_class_lookup(%struct.htab* %73, %struct.bitmap_head_def* %74), !dbg !10633
  store i32 %call90, i32* %label, align 4, !dbg !10634
  %75 = load i32, i32* %label, align 4, !dbg !10635
  %cmp91 = icmp eq i32 %75, 0, !dbg !10637
  br i1 %cmp91, label %if.then93, label %if.else, !dbg !10638

if.then93:                                        ; preds = %for.end83
  %76 = load i32, i32* @location_equiv_class, align 4, !dbg !10639
  %inc94 = add nsw i32 %76, 1, !dbg !10639
  store i32 %inc94, i32* @location_equiv_class, align 4, !dbg !10639
  store i32 %76, i32* %label, align 4, !dbg !10641
  %77 = load %struct.htab*, %struct.htab** @location_equiv_class_table, align 8, !dbg !10642
  %78 = load i32, i32* %label, align 4, !dbg !10643
  %79 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pointed_by, align 8, !dbg !10644
  call void @equiv_class_add(%struct.htab* %77, i32 %78, %struct.bitmap_head_def* %79), !dbg !10645
  br label %if.end102, !dbg !10646

if.else:                                          ; preds = %for.end83
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10647
  %tobool95 = icmp ne %struct._IO_FILE* %80, null, !dbg !10647
  br i1 %tobool95, label %land.lhs.true, label %if.end101, !dbg !10650

land.lhs.true:                                    ; preds = %if.else
  %81 = load i32, i32* @dump_flags, align 4, !dbg !10651
  %and96 = and i32 %81, 8, !dbg !10652
  %tobool97 = icmp ne i32 %and96, 0, !dbg !10652
  br i1 %tobool97, label %if.then98, label %if.end101, !dbg !10653

if.then98:                                        ; preds = %land.lhs.true
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10654
  %83 = load i32, i32* %i, align 4, !dbg !10655
  %call99 = call %struct.variable_info* @get_varinfo(i32 %83), !dbg !10656
  %name = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call99, i32 0, i32 6, !dbg !10657
  %84 = load i8*, i8** %name, align 8, !dbg !10657
  %call100 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.77, i64 0, i64 0), i8* %84), !dbg !10658
  br label %if.end101, !dbg !10658

if.end101:                                        ; preds = %if.then98, %land.lhs.true, %if.else
  %85 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pointed_by, align 8, !dbg !10659
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %85), !dbg !10659
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %pointed_by, align 8, !dbg !10659
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.then93
  %86 = load i32, i32* %label, align 4, !dbg !10660
  %87 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10661
  %loc_label = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %87, i32 0, i32 10, !dbg !10662
  %88 = load i32*, i32** %loc_label, align 8, !dbg !10662
  %89 = load i32, i32* %i, align 4, !dbg !10663
  %idxprom103 = zext i32 %89 to i64, !dbg !10661
  %arrayidx104 = getelementptr inbounds i32, i32* %88, i64 %idxprom103, !dbg !10661
  store i32 %86, i32* %arrayidx104, align 4, !dbg !10664
  br label %for.inc105, !dbg !10665

for.inc105:                                       ; preds = %if.end102, %if.then66
  %90 = load i32, i32* %i, align 4, !dbg !10666
  %inc106 = add i32 %90, 1, !dbg !10666
  store i32 %inc106, i32* %i, align 4, !dbg !10666
  br label %for.cond51, !dbg !10667, !llvm.loop !10668

for.end107:                                       ; preds = %cond.end56
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10670
  %tobool108 = icmp ne %struct._IO_FILE* %91, null, !dbg !10670
  br i1 %tobool108, label %land.lhs.true109, label %if.end154, !dbg !10672

land.lhs.true109:                                 ; preds = %for.end107
  %92 = load i32, i32* @dump_flags, align 4, !dbg !10673
  %and110 = and i32 %92, 8, !dbg !10674
  %tobool111 = icmp ne i32 %and110, 0, !dbg !10674
  br i1 %tobool111, label %if.then112, label %if.end154, !dbg !10675

if.then112:                                       ; preds = %land.lhs.true109
  store i32 0, i32* %i, align 4, !dbg !10676
  br label %for.cond113, !dbg !10678

for.cond113:                                      ; preds = %for.inc151, %if.then112
  %93 = load i32, i32* %i, align 4, !dbg !10679
  %94 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10681
  %tobool114 = icmp ne %struct.VEC_varinfo_t_heap* %94, null, !dbg !10681
  br i1 %tobool114, label %cond.true115, label %cond.false117, !dbg !10681

cond.true115:                                     ; preds = %for.cond113
  %95 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10681
  %base116 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %95, i32 0, i32 0, !dbg !10681
  br label %cond.end118, !dbg !10681

cond.false117:                                    ; preds = %for.cond113
  br label %cond.end118, !dbg !10681

cond.end118:                                      ; preds = %cond.false117, %cond.true115
  %cond119 = phi %struct.VEC_varinfo_t_base* [ %base116, %cond.true115 ], [ null, %cond.false117 ], !dbg !10681
  %call120 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond119), !dbg !10681
  %cmp121 = icmp ult i32 %93, %call120, !dbg !10682
  br i1 %cmp121, label %for.body123, label %for.end153, !dbg !10683

for.body123:                                      ; preds = %cond.end118
  call void @llvm.dbg.declare(metadata i8* %direct_node, metadata !10684, metadata !DIExpression()), !dbg !10686
  %96 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10687
  %direct_nodes = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %96, i32 0, i32 13, !dbg !10687
  %97 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes, align 8, !dbg !10687
  %elms124 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %97, i32 0, i32 3, !dbg !10687
  %98 = load i32, i32* %i, align 4, !dbg !10687
  %div125 = udiv i32 %98, 64, !dbg !10687
  %idxprom126 = zext i32 %div125 to i64, !dbg !10687
  %arrayidx127 = getelementptr inbounds [1 x i64], [1 x i64]* %elms124, i64 0, i64 %idxprom126, !dbg !10687
  %99 = load i64, i64* %arrayidx127, align 8, !dbg !10687
  %100 = load i32, i32* %i, align 4, !dbg !10687
  %rem128 = urem i32 %100, 64, !dbg !10687
  %sh_prom129 = zext i32 %rem128 to i64, !dbg !10687
  %shr130 = lshr i64 %99, %sh_prom129, !dbg !10687
  %and131 = and i64 %shr130, 1, !dbg !10687
  %conv132 = trunc i64 %and131 to i8, !dbg !10687
  store i8 %conv132, i8* %direct_node, align 1, !dbg !10686
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10688
  %102 = load i8, i8* %direct_node, align 1, !dbg !10689
  %conv133 = zext i8 %102 to i32, !dbg !10689
  %tobool134 = icmp ne i32 %conv133, 0, !dbg !10689
  %103 = zext i1 %tobool134 to i64, !dbg !10689
  %cond135 = select i1 %tobool134, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.80, i64 0, i64 0), !dbg !10689
  %104 = load i32, i32* %i, align 4, !dbg !10690
  %105 = load i32, i32* %i, align 4, !dbg !10691
  %call136 = call %struct.variable_info* @get_varinfo(i32 %105), !dbg !10692
  %name137 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call136, i32 0, i32 6, !dbg !10693
  %106 = load i8*, i8** %name137, align 8, !dbg !10693
  %107 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10694
  %pointer_label138 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %107, i32 0, i32 9, !dbg !10695
  %108 = load i32*, i32** %pointer_label138, align 8, !dbg !10695
  %109 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10696
  %node_mapping139 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %109, i32 0, i32 3, !dbg !10697
  %110 = load i32*, i32** %node_mapping139, align 8, !dbg !10697
  %111 = load i32, i32* %i, align 4, !dbg !10698
  %idxprom140 = zext i32 %111 to i64, !dbg !10696
  %arrayidx141 = getelementptr inbounds i32, i32* %110, i64 %idxprom140, !dbg !10696
  %112 = load i32, i32* %arrayidx141, align 4, !dbg !10696
  %idxprom142 = zext i32 %112 to i64, !dbg !10694
  %arrayidx143 = getelementptr inbounds i32, i32* %108, i64 %idxprom142, !dbg !10694
  %113 = load i32, i32* %arrayidx143, align 4, !dbg !10694
  %114 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10699
  %loc_label144 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %114, i32 0, i32 10, !dbg !10700
  %115 = load i32*, i32** %loc_label144, align 8, !dbg !10700
  %116 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10701
  %node_mapping145 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %116, i32 0, i32 3, !dbg !10702
  %117 = load i32*, i32** %node_mapping145, align 8, !dbg !10702
  %118 = load i32, i32* %i, align 4, !dbg !10703
  %idxprom146 = zext i32 %118 to i64, !dbg !10701
  %arrayidx147 = getelementptr inbounds i32, i32* %117, i64 %idxprom146, !dbg !10701
  %119 = load i32, i32* %arrayidx147, align 4, !dbg !10701
  %idxprom148 = zext i32 %119 to i64, !dbg !10699
  %arrayidx149 = getelementptr inbounds i32, i32* %115, i64 %idxprom148, !dbg !10699
  %120 = load i32, i32* %arrayidx149, align 4, !dbg !10699
  %call150 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.78, i64 0, i64 0), i8* %cond135, i32 %104, i8* %106, i32 %113, i32 %120), !dbg !10704
  br label %for.inc151, !dbg !10705

for.inc151:                                       ; preds = %for.body123
  %121 = load i32, i32* %i, align 4, !dbg !10706
  %inc152 = add i32 %121, 1, !dbg !10706
  store i32 %inc152, i32* %i, align 4, !dbg !10706
  br label %for.cond113, !dbg !10707, !llvm.loop !10708

for.end153:                                       ; preds = %cond.end118
  br label %if.end154, !dbg !10709

if.end154:                                        ; preds = %for.end153, %land.lhs.true109, %for.end107
  store i32 0, i32* %i, align 4, !dbg !10710
  br label %for.cond155, !dbg !10712

for.cond155:                                      ; preds = %for.inc186, %if.end154
  %122 = load i32, i32* %i, align 4, !dbg !10713
  %123 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10715
  %tobool156 = icmp ne %struct.VEC_varinfo_t_heap* %123, null, !dbg !10715
  br i1 %tobool156, label %cond.true157, label %cond.false159, !dbg !10715

cond.true157:                                     ; preds = %for.cond155
  %124 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10715
  %base158 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %124, i32 0, i32 0, !dbg !10715
  br label %cond.end160, !dbg !10715

cond.false159:                                    ; preds = %for.cond155
  br label %cond.end160, !dbg !10715

cond.end160:                                      ; preds = %cond.false159, %cond.true157
  %cond161 = phi %struct.VEC_varinfo_t_base* [ %base158, %cond.true157 ], [ null, %cond.false159 ], !dbg !10715
  %call162 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond161), !dbg !10715
  %cmp163 = icmp ult i32 %122, %call162, !dbg !10716
  br i1 %cmp163, label %for.body165, label %for.end188, !dbg !10717

for.body165:                                      ; preds = %cond.end160
  call void @llvm.dbg.declare(metadata i32* %node, metadata !10718, metadata !DIExpression()), !dbg !10720
  %125 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10721
  %node_mapping166 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %125, i32 0, i32 3, !dbg !10722
  %126 = load i32*, i32** %node_mapping166, align 8, !dbg !10722
  %127 = load i32, i32* %i, align 4, !dbg !10723
  %idxprom167 = zext i32 %127 to i64, !dbg !10721
  %arrayidx168 = getelementptr inbounds i32, i32* %126, i64 %idxprom167, !dbg !10721
  %128 = load i32, i32* %arrayidx168, align 4, !dbg !10721
  store i32 %128, i32* %node, align 4, !dbg !10720
  %129 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10724
  %pointer_label169 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %129, i32 0, i32 9, !dbg !10726
  %130 = load i32*, i32** %pointer_label169, align 8, !dbg !10726
  %131 = load i32, i32* %node, align 4, !dbg !10727
  %idxprom170 = zext i32 %131 to i64, !dbg !10724
  %arrayidx171 = getelementptr inbounds i32, i32* %130, i64 %idxprom170, !dbg !10724
  %132 = load i32, i32* %arrayidx171, align 4, !dbg !10724
  %cmp172 = icmp eq i32 %132, 0, !dbg !10728
  br i1 %cmp172, label %if.then174, label %if.end185, !dbg !10729

if.then174:                                       ; preds = %for.body165
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10730
  %tobool175 = icmp ne %struct._IO_FILE* %133, null, !dbg !10730
  br i1 %tobool175, label %land.lhs.true176, label %if.end183, !dbg !10733

land.lhs.true176:                                 ; preds = %if.then174
  %134 = load i32, i32* @dump_flags, align 4, !dbg !10734
  %and177 = and i32 %134, 8, !dbg !10735
  %tobool178 = icmp ne i32 %and177, 0, !dbg !10735
  br i1 %tobool178, label %if.then179, label %if.end183, !dbg !10736

if.then179:                                       ; preds = %land.lhs.true176
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10737
  %136 = load i32, i32* %node, align 4, !dbg !10738
  %call180 = call %struct.variable_info* @get_varinfo(i32 %136), !dbg !10739
  %name181 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call180, i32 0, i32 6, !dbg !10740
  %137 = load i8*, i8** %name181, align 8, !dbg !10740
  %call182 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %135, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.81, i64 0, i64 0), i8* %137), !dbg !10741
  br label %if.end183, !dbg !10741

if.end183:                                        ; preds = %if.then179, %land.lhs.true176, %if.then174
  %138 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 1), align 4, !dbg !10742
  %inc184 = add i32 %138, 1, !dbg !10742
  store i32 %inc184, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 1), align 4, !dbg !10742
  %139 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10743
  %140 = load i32, i32* %node, align 4, !dbg !10744
  call void @clear_edges_for_node(%struct.constraint_graph* %139, i32 %140), !dbg !10745
  br label %if.end185, !dbg !10746

if.end185:                                        ; preds = %if.end183, %for.body165
  br label %for.inc186, !dbg !10747

for.inc186:                                       ; preds = %if.end185
  %141 = load i32, i32* %i, align 4, !dbg !10748
  %inc187 = add i32 %141, 1, !dbg !10748
  store i32 %inc187, i32* %i, align 4, !dbg !10748
  br label %for.cond155, !dbg !10749, !llvm.loop !10750

for.end188:                                       ; preds = %cond.end160
  %142 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !10752
  ret %struct.scc_info* %142, !dbg !10753
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_constraints(%struct.constraint_graph* %graph, %struct.scc_info* %si) #0 !dbg !10754 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %si.addr = alloca %struct.scc_info*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %c = alloca %struct.constraint*, align 8
  %lhs = alloca %struct.constraint_expr, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  %lhsvar = alloca i32, align 4
  %rhsvar = alloca i32, align 4
  %lhsnode = alloca i32, align 4
  %rhsnode = alloca i32, align 4
  %lhslabel = alloca i32, align 4
  %rhslabel = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !10757, metadata !DIExpression()), !dbg !10758
  store %struct.scc_info* %si, %struct.scc_info** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si.addr, metadata !10759, metadata !DIExpression()), !dbg !10760
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10761, metadata !DIExpression()), !dbg !10762
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10763, metadata !DIExpression()), !dbg !10764
  call void @llvm.dbg.declare(metadata %struct.constraint** %c, metadata !10765, metadata !DIExpression()), !dbg !10766
  store i32 0, i32* %j, align 4, !dbg !10767
  br label %for.cond, !dbg !10769

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %j, align 4, !dbg !10770
  %1 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10772
  %size = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %1, i32 0, i32 0, !dbg !10773
  %2 = load i32, i32* %size, align 8, !dbg !10773
  %cmp = icmp ult i32 %0, %2, !dbg !10774
  br i1 %cmp, label %for.body, label %for.end, !dbg !10775

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %j, align 4, !dbg !10776
  %call = call i32 @find(i32 %3), !dbg !10776
  %4 = load i32, i32* %j, align 4, !dbg !10776
  %cmp1 = icmp eq i32 %call, %4, !dbg !10776
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !10776

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2347, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10776
  br label %cond.end, !dbg !10776

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !10776

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10776
  br label %for.inc, !dbg !10776

for.inc:                                          ; preds = %cond.end
  %5 = load i32, i32* %j, align 4, !dbg !10777
  %inc = add i32 %5, 1, !dbg !10777
  store i32 %inc, i32* %j, align 4, !dbg !10777
  br label %for.cond, !dbg !10778, !llvm.loop !10779

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !10781
  br label %for.cond2, !dbg !10783

for.cond2:                                        ; preds = %for.inc64, %for.end
  %6 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10784
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %6, null, !dbg !10784
  br i1 %tobool, label %cond.true3, label %cond.false4, !dbg !10784

cond.true3:                                       ; preds = %for.cond2
  %7 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10784
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %7, i32 0, i32 0, !dbg !10784
  br label %cond.end5, !dbg !10784

cond.false4:                                      ; preds = %for.cond2
  br label %cond.end5, !dbg !10784

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi %struct.VEC_constraint_t_base* [ %base, %cond.true3 ], [ null, %cond.false4 ], !dbg !10784
  %8 = load i32, i32* %i, align 4, !dbg !10784
  %call7 = call i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %cond6, i32 %8, %struct.constraint** %c), !dbg !10784
  %tobool8 = icmp ne i32 %call7, 0, !dbg !10786
  br i1 %tobool8, label %for.body9, label %for.end66, !dbg !10786

for.body9:                                        ; preds = %cond.end5
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !10787, metadata !DIExpression()), !dbg !10789
  %9 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10790
  %lhs10 = getelementptr inbounds %struct.constraint, %struct.constraint* %9, i32 0, i32 0, !dbg !10791
  %10 = bitcast %struct.constraint_expr* %lhs to i8*, !dbg !10791
  %11 = bitcast %struct.constraint_expr* %lhs10 to i8*, !dbg !10791
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !10791
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !10792, metadata !DIExpression()), !dbg !10793
  %12 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10794
  %rhs11 = getelementptr inbounds %struct.constraint, %struct.constraint* %12, i32 0, i32 1, !dbg !10795
  %13 = bitcast %struct.constraint_expr* %rhs to i8*, !dbg !10795
  %14 = bitcast %struct.constraint_expr* %rhs11 to i8*, !dbg !10795
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !dbg !10795
  call void @llvm.dbg.declare(metadata i32* %lhsvar, metadata !10796, metadata !DIExpression()), !dbg !10797
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !10798
  %15 = load i32, i32* %var, align 4, !dbg !10798
  %call12 = call i32 @find(i32 %15), !dbg !10799
  store i32 %call12, i32* %lhsvar, align 4, !dbg !10797
  call void @llvm.dbg.declare(metadata i32* %rhsvar, metadata !10800, metadata !DIExpression()), !dbg !10801
  %var13 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !10802
  %16 = load i32, i32* %var13, align 4, !dbg !10802
  %call14 = call i32 @find(i32 %16), !dbg !10803
  store i32 %call14, i32* %rhsvar, align 4, !dbg !10801
  call void @llvm.dbg.declare(metadata i32* %lhsnode, metadata !10804, metadata !DIExpression()), !dbg !10805
  call void @llvm.dbg.declare(metadata i32* %rhsnode, metadata !10806, metadata !DIExpression()), !dbg !10807
  call void @llvm.dbg.declare(metadata i32* %lhslabel, metadata !10808, metadata !DIExpression()), !dbg !10809
  call void @llvm.dbg.declare(metadata i32* %rhslabel, metadata !10810, metadata !DIExpression()), !dbg !10811
  %17 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !10812
  %node_mapping = getelementptr inbounds %struct.scc_info, %struct.scc_info* %17, i32 0, i32 3, !dbg !10813
  %18 = load i32*, i32** %node_mapping, align 8, !dbg !10813
  %19 = load i32, i32* %lhsvar, align 4, !dbg !10814
  %idxprom = zext i32 %19 to i64, !dbg !10812
  %arrayidx = getelementptr inbounds i32, i32* %18, i64 %idxprom, !dbg !10812
  %20 = load i32, i32* %arrayidx, align 4, !dbg !10812
  store i32 %20, i32* %lhsnode, align 4, !dbg !10815
  %21 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !10816
  %node_mapping15 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %21, i32 0, i32 3, !dbg !10817
  %22 = load i32*, i32** %node_mapping15, align 8, !dbg !10817
  %23 = load i32, i32* %rhsvar, align 4, !dbg !10818
  %idxprom16 = zext i32 %23 to i64, !dbg !10816
  %arrayidx17 = getelementptr inbounds i32, i32* %22, i64 %idxprom16, !dbg !10816
  %24 = load i32, i32* %arrayidx17, align 4, !dbg !10816
  store i32 %24, i32* %rhsnode, align 4, !dbg !10819
  %25 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10820
  %pointer_label = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %25, i32 0, i32 9, !dbg !10821
  %26 = load i32*, i32** %pointer_label, align 8, !dbg !10821
  %27 = load i32, i32* %lhsnode, align 4, !dbg !10822
  %idxprom18 = zext i32 %27 to i64, !dbg !10820
  %arrayidx19 = getelementptr inbounds i32, i32* %26, i64 %idxprom18, !dbg !10820
  %28 = load i32, i32* %arrayidx19, align 4, !dbg !10820
  store i32 %28, i32* %lhslabel, align 4, !dbg !10823
  %29 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10824
  %pointer_label20 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %29, i32 0, i32 9, !dbg !10825
  %30 = load i32*, i32** %pointer_label20, align 8, !dbg !10825
  %31 = load i32, i32* %rhsnode, align 4, !dbg !10826
  %idxprom21 = zext i32 %31 to i64, !dbg !10824
  %arrayidx22 = getelementptr inbounds i32, i32* %30, i64 %idxprom21, !dbg !10824
  %32 = load i32, i32* %arrayidx22, align 4, !dbg !10824
  store i32 %32, i32* %rhslabel, align 4, !dbg !10827
  %33 = load i32, i32* %lhslabel, align 4, !dbg !10828
  %cmp23 = icmp eq i32 %33, 0, !dbg !10830
  br i1 %cmp23, label %if.then, label %if.end37, !dbg !10831

if.then:                                          ; preds = %for.body9
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10832
  %tobool24 = icmp ne %struct._IO_FILE* %34, null, !dbg !10832
  br i1 %tobool24, label %land.lhs.true, label %if.end, !dbg !10835

land.lhs.true:                                    ; preds = %if.then
  %35 = load i32, i32* @dump_flags, align 4, !dbg !10836
  %and = and i32 %35, 8, !dbg !10837
  %tobool25 = icmp ne i32 %and, 0, !dbg !10837
  br i1 %tobool25, label %if.then26, label %if.end, !dbg !10838

if.then26:                                        ; preds = %land.lhs.true
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10839
  %var27 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !10841
  %37 = load i32, i32* %var27, align 4, !dbg !10841
  %call28 = call %struct.variable_info* @get_varinfo(i32 %37), !dbg !10842
  %name = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call28, i32 0, i32 6, !dbg !10843
  %38 = load i8*, i8** %name, align 8, !dbg !10843
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.82, i64 0, i64 0), i8* %38), !dbg !10844
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10845
  %40 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10846
  call void @dump_constraint(%struct._IO_FILE* %39, %struct.constraint* %40), !dbg !10847
  br label %if.end, !dbg !10848

if.end:                                           ; preds = %if.then26, %land.lhs.true, %if.then
  %41 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10849
  %tobool30 = icmp ne %struct.VEC_constraint_t_heap* %41, null, !dbg !10849
  br i1 %tobool30, label %cond.true31, label %cond.false33, !dbg !10849

cond.true31:                                      ; preds = %if.end
  %42 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10849
  %base32 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %42, i32 0, i32 0, !dbg !10849
  br label %cond.end34, !dbg !10849

cond.false33:                                     ; preds = %if.end
  br label %cond.end34, !dbg !10849

cond.end34:                                       ; preds = %cond.false33, %cond.true31
  %cond35 = phi %struct.VEC_constraint_t_base* [ %base32, %cond.true31 ], [ null, %cond.false33 ], !dbg !10849
  %43 = load i32, i32* %i, align 4, !dbg !10849
  %call36 = call %struct.constraint* @VEC_constraint_t_base_replace(%struct.VEC_constraint_t_base* %cond35, i32 %43, %struct.constraint* null), !dbg !10849
  br label %for.inc64, !dbg !10850

if.end37:                                         ; preds = %for.body9
  %44 = load i32, i32* %rhslabel, align 4, !dbg !10851
  %cmp38 = icmp eq i32 %44, 0, !dbg !10853
  br i1 %cmp38, label %if.then39, label %if.end57, !dbg !10854

if.then39:                                        ; preds = %if.end37
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10855
  %tobool40 = icmp ne %struct._IO_FILE* %45, null, !dbg !10855
  br i1 %tobool40, label %land.lhs.true41, label %if.end49, !dbg !10858

land.lhs.true41:                                  ; preds = %if.then39
  %46 = load i32, i32* @dump_flags, align 4, !dbg !10859
  %and42 = and i32 %46, 8, !dbg !10860
  %tobool43 = icmp ne i32 %and42, 0, !dbg !10860
  br i1 %tobool43, label %if.then44, label %if.end49, !dbg !10861

if.then44:                                        ; preds = %land.lhs.true41
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10862
  %var45 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !10864
  %48 = load i32, i32* %var45, align 4, !dbg !10864
  %call46 = call %struct.variable_info* @get_varinfo(i32 %48), !dbg !10865
  %name47 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call46, i32 0, i32 6, !dbg !10866
  %49 = load i8*, i8** %name47, align 8, !dbg !10866
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.82, i64 0, i64 0), i8* %49), !dbg !10867
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10868
  %51 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10869
  call void @dump_constraint(%struct._IO_FILE* %50, %struct.constraint* %51), !dbg !10870
  br label %if.end49, !dbg !10871

if.end49:                                         ; preds = %if.then44, %land.lhs.true41, %if.then39
  %52 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10872
  %tobool50 = icmp ne %struct.VEC_constraint_t_heap* %52, null, !dbg !10872
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !10872

cond.true51:                                      ; preds = %if.end49
  %53 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10872
  %base52 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %53, i32 0, i32 0, !dbg !10872
  br label %cond.end54, !dbg !10872

cond.false53:                                     ; preds = %if.end49
  br label %cond.end54, !dbg !10872

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_constraint_t_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !10872
  %54 = load i32, i32* %i, align 4, !dbg !10872
  %call56 = call %struct.constraint* @VEC_constraint_t_base_replace(%struct.VEC_constraint_t_base* %cond55, i32 %54, %struct.constraint* null), !dbg !10872
  br label %for.inc64, !dbg !10873

if.end57:                                         ; preds = %if.end37
  %55 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10874
  %56 = load i32, i32* %lhsvar, align 4, !dbg !10875
  %57 = load i32, i32* %lhslabel, align 4, !dbg !10876
  %call58 = call i32 @find_equivalent_node(%struct.constraint_graph* %55, i32 %56, i32 %57), !dbg !10877
  store i32 %call58, i32* %lhsvar, align 4, !dbg !10878
  %58 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !10879
  %59 = load i32, i32* %rhsvar, align 4, !dbg !10880
  %60 = load i32, i32* %rhslabel, align 4, !dbg !10881
  %call59 = call i32 @find_equivalent_node(%struct.constraint_graph* %58, i32 %59, i32 %60), !dbg !10882
  store i32 %call59, i32* %rhsvar, align 4, !dbg !10883
  %61 = load i32, i32* %lhsvar, align 4, !dbg !10884
  %62 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10885
  %lhs60 = getelementptr inbounds %struct.constraint, %struct.constraint* %62, i32 0, i32 0, !dbg !10886
  %var61 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs60, i32 0, i32 1, !dbg !10887
  store i32 %61, i32* %var61, align 4, !dbg !10888
  %63 = load i32, i32* %rhsvar, align 4, !dbg !10889
  %64 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10890
  %rhs62 = getelementptr inbounds %struct.constraint, %struct.constraint* %64, i32 0, i32 1, !dbg !10891
  %var63 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs62, i32 0, i32 1, !dbg !10892
  store i32 %63, i32* %var63, align 4, !dbg !10893
  br label %for.inc64, !dbg !10894

for.inc64:                                        ; preds = %if.end57, %cond.end54, %cond.end34
  %65 = load i32, i32* %i, align 4, !dbg !10895
  %inc65 = add nsw i32 %65, 1, !dbg !10895
  store i32 %inc65, i32* %i, align 4, !dbg !10895
  br label %for.cond2, !dbg !10896, !llvm.loop !10897

for.end66:                                        ; preds = %cond.end5
  ret void, !dbg !10899
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_succ_graph() #0 !dbg !10900 {
entry:
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %c = alloca %struct.constraint*, align 8
  %lhs = alloca %struct.constraint_expr, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  %lhsvar = alloca i32, align 4
  %rhsvar = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10901, metadata !DIExpression()), !dbg !10902
  call void @llvm.dbg.declare(metadata i32* %t, metadata !10903, metadata !DIExpression()), !dbg !10904
  call void @llvm.dbg.declare(metadata %struct.constraint** %c, metadata !10905, metadata !DIExpression()), !dbg !10906
  store i32 0, i32* %i, align 4, !dbg !10907
  br label %for.cond, !dbg !10909

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10910
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %0, null, !dbg !10910
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10910

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !10910
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %1, i32 0, i32 0, !dbg !10910
  br label %cond.end, !dbg !10910

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10910

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10910
  %2 = load i32, i32* %i, align 4, !dbg !10910
  %call = call i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %cond, i32 %2, %struct.constraint** %c), !dbg !10910
  %tobool1 = icmp ne i32 %call, 0, !dbg !10912
  br i1 %tobool1, label %for.body, label %for.end, !dbg !10912

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !10913, metadata !DIExpression()), !dbg !10915
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !10916, metadata !DIExpression()), !dbg !10917
  call void @llvm.dbg.declare(metadata i32* %lhsvar, metadata !10918, metadata !DIExpression()), !dbg !10919
  call void @llvm.dbg.declare(metadata i32* %rhsvar, metadata !10920, metadata !DIExpression()), !dbg !10921
  %3 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10922
  %tobool2 = icmp ne %struct.constraint* %3, null, !dbg !10922
  br i1 %tobool2, label %if.end, label %if.then, !dbg !10924

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !10925

if.end:                                           ; preds = %for.body
  %4 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10926
  %lhs3 = getelementptr inbounds %struct.constraint, %struct.constraint* %4, i32 0, i32 0, !dbg !10927
  %5 = bitcast %struct.constraint_expr* %lhs to i8*, !dbg !10927
  %6 = bitcast %struct.constraint_expr* %lhs3 to i8*, !dbg !10927
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 16, i1 false), !dbg !10927
  %7 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !10928
  %rhs4 = getelementptr inbounds %struct.constraint, %struct.constraint* %7, i32 0, i32 1, !dbg !10929
  %8 = bitcast %struct.constraint_expr* %rhs to i8*, !dbg !10929
  %9 = bitcast %struct.constraint_expr* %rhs4 to i8*, !dbg !10929
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !10929
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !10930
  %10 = load i32, i32* %var, align 4, !dbg !10930
  %call5 = call i32 @find(i32 %10), !dbg !10931
  store i32 %call5, i32* %lhsvar, align 4, !dbg !10932
  %var6 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !10933
  %11 = load i32, i32* %var6, align 4, !dbg !10933
  %call7 = call i32 @find(i32 %11), !dbg !10934
  store i32 %call7, i32* %rhsvar, align 4, !dbg !10935
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !10936
  %12 = load i32, i32* %type, align 8, !dbg !10936
  %cmp = icmp eq i32 %12, 1, !dbg !10938
  br i1 %cmp, label %if.then8, label %if.else, !dbg !10939

if.then8:                                         ; preds = %if.end
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !10940
  %13 = load i64, i64* %offset, align 8, !dbg !10940
  %cmp9 = icmp eq i64 %13, 0, !dbg !10943
  br i1 %cmp9, label %land.lhs.true, label %if.end24, !dbg !10944

land.lhs.true:                                    ; preds = %if.then8
  %offset10 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !10945
  %14 = load i64, i64* %offset10, align 8, !dbg !10945
  %cmp11 = icmp eq i64 %14, 0, !dbg !10946
  br i1 %cmp11, label %land.lhs.true12, label %if.end24, !dbg !10947

land.lhs.true12:                                  ; preds = %land.lhs.true
  %type13 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !10948
  %15 = load i32, i32* %type13, align 8, !dbg !10948
  %cmp14 = icmp eq i32 %15, 0, !dbg !10949
  br i1 %cmp14, label %if.then15, label %if.end24, !dbg !10950

if.then15:                                        ; preds = %land.lhs.true12
  %16 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10951
  %17 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10952
  %tobool16 = icmp ne %struct.VEC_varinfo_t_heap* %17, null, !dbg !10952
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !10952

cond.true17:                                      ; preds = %if.then15
  %18 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10952
  %base18 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %18, i32 0, i32 0, !dbg !10952
  br label %cond.end20, !dbg !10952

cond.false19:                                     ; preds = %if.then15
  br label %cond.end20, !dbg !10952

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_varinfo_t_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !10952
  %call22 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond21), !dbg !10952
  %19 = load i32, i32* %lhsvar, align 4, !dbg !10953
  %add = add i32 %call22, %19, !dbg !10954
  %20 = load i32, i32* %rhsvar, align 4, !dbg !10955
  %call23 = call zeroext i8 @add_graph_edge(%struct.constraint_graph* %16, i32 %add, i32 %20), !dbg !10956
  br label %if.end24, !dbg !10956

if.end24:                                         ; preds = %cond.end20, %land.lhs.true12, %land.lhs.true, %if.then8
  br label %if.end76, !dbg !10957

if.else:                                          ; preds = %if.end
  %type25 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !10958
  %21 = load i32, i32* %type25, align 8, !dbg !10958
  %cmp26 = icmp eq i32 %21, 1, !dbg !10960
  br i1 %cmp26, label %if.then27, label %if.else47, !dbg !10961

if.then27:                                        ; preds = %if.else
  %offset28 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !10962
  %22 = load i64, i64* %offset28, align 8, !dbg !10962
  %cmp29 = icmp eq i64 %22, 0, !dbg !10965
  br i1 %cmp29, label %land.lhs.true30, label %if.end46, !dbg !10966

land.lhs.true30:                                  ; preds = %if.then27
  %offset31 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !10967
  %23 = load i64, i64* %offset31, align 8, !dbg !10967
  %cmp32 = icmp eq i64 %23, 0, !dbg !10968
  br i1 %cmp32, label %land.lhs.true33, label %if.end46, !dbg !10969

land.lhs.true33:                                  ; preds = %land.lhs.true30
  %type34 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !10970
  %24 = load i32, i32* %type34, align 8, !dbg !10970
  %cmp35 = icmp eq i32 %24, 0, !dbg !10971
  br i1 %cmp35, label %if.then36, label %if.end46, !dbg !10972

if.then36:                                        ; preds = %land.lhs.true33
  %25 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !10973
  %26 = load i32, i32* %lhsvar, align 4, !dbg !10974
  %27 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10975
  %tobool37 = icmp ne %struct.VEC_varinfo_t_heap* %27, null, !dbg !10975
  br i1 %tobool37, label %cond.true38, label %cond.false40, !dbg !10975

cond.true38:                                      ; preds = %if.then36
  %28 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !10975
  %base39 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %28, i32 0, i32 0, !dbg !10975
  br label %cond.end41, !dbg !10975

cond.false40:                                     ; preds = %if.then36
  br label %cond.end41, !dbg !10975

cond.end41:                                       ; preds = %cond.false40, %cond.true38
  %cond42 = phi %struct.VEC_varinfo_t_base* [ %base39, %cond.true38 ], [ null, %cond.false40 ], !dbg !10975
  %call43 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond42), !dbg !10975
  %29 = load i32, i32* %rhsvar, align 4, !dbg !10976
  %add44 = add i32 %call43, %29, !dbg !10977
  %call45 = call zeroext i8 @add_graph_edge(%struct.constraint_graph* %25, i32 %26, i32 %add44), !dbg !10978
  br label %if.end46, !dbg !10978

if.end46:                                         ; preds = %cond.end41, %land.lhs.true33, %land.lhs.true30, %if.then27
  br label %if.end75, !dbg !10979

if.else47:                                        ; preds = %if.else
  %type48 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !10980
  %30 = load i32, i32* %type48, align 8, !dbg !10980
  %cmp49 = icmp eq i32 %30, 2, !dbg !10982
  br i1 %cmp49, label %if.then50, label %if.else61, !dbg !10983

if.then50:                                        ; preds = %if.else47
  %var51 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !10984
  %31 = load i32, i32* %var51, align 4, !dbg !10984
  %call52 = call i32 @find(i32 %31), !dbg !10984
  %var53 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !10984
  %32 = load i32, i32* %var53, align 4, !dbg !10984
  %cmp54 = icmp eq i32 %call52, %32, !dbg !10984
  br i1 %cmp54, label %cond.false56, label %cond.true55, !dbg !10984

cond.true55:                                      ; preds = %if.then50
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1263, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10984
  br label %cond.end57, !dbg !10984

cond.false56:                                     ; preds = %if.then50
  br label %cond.end57, !dbg !10984

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond58 = phi i32 [ 0, %cond.true55 ], [ 0, %cond.false56 ], !dbg !10984
  %33 = load i32, i32* %lhsvar, align 4, !dbg !10986
  %call59 = call %struct.variable_info* @get_varinfo(i32 %33), !dbg !10987
  %solution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call59, i32 0, i32 8, !dbg !10988
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution, align 8, !dbg !10988
  %35 = load i32, i32* %rhsvar, align 4, !dbg !10989
  %call60 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %34, i32 %35), !dbg !10990
  br label %if.end74, !dbg !10991

if.else61:                                        ; preds = %if.else47
  %36 = load i32, i32* %lhsvar, align 4, !dbg !10992
  %cmp62 = icmp ugt i32 %36, 1, !dbg !10994
  br i1 %cmp62, label %land.lhs.true63, label %if.end73, !dbg !10995

land.lhs.true63:                                  ; preds = %if.else61
  %37 = load i32, i32* %lhsvar, align 4, !dbg !10996
  %38 = load i32, i32* %rhsvar, align 4, !dbg !10997
  %cmp64 = icmp ne i32 %37, %38, !dbg !10998
  br i1 %cmp64, label %land.lhs.true65, label %if.end73, !dbg !10999

land.lhs.true65:                                  ; preds = %land.lhs.true63
  %offset66 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !11000
  %39 = load i64, i64* %offset66, align 8, !dbg !11000
  %cmp67 = icmp eq i64 %39, 0, !dbg !11001
  br i1 %cmp67, label %land.lhs.true68, label %if.end73, !dbg !11002

land.lhs.true68:                                  ; preds = %land.lhs.true65
  %offset69 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !11003
  %40 = load i64, i64* %offset69, align 8, !dbg !11003
  %cmp70 = icmp eq i64 %40, 0, !dbg !11004
  br i1 %cmp70, label %if.then71, label %if.end73, !dbg !11005

if.then71:                                        ; preds = %land.lhs.true68
  %41 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11006
  %42 = load i32, i32* %lhsvar, align 4, !dbg !11008
  %43 = load i32, i32* %rhsvar, align 4, !dbg !11009
  %call72 = call zeroext i8 @add_graph_edge(%struct.constraint_graph* %41, i32 %42, i32 %43), !dbg !11010
  br label %if.end73, !dbg !11011

if.end73:                                         ; preds = %if.then71, %land.lhs.true68, %land.lhs.true65, %land.lhs.true63, %if.else61
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %cond.end57
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.end46
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.end24
  br label %for.inc, !dbg !11012

for.inc:                                          ; preds = %if.end76, %if.then
  %44 = load i32, i32* %i, align 4, !dbg !11013
  %inc = add i32 %44, 1, !dbg !11013
  store i32 %inc, i32* %i, align 4, !dbg !11013
  br label %for.cond, !dbg !11014, !llvm.loop !11015

for.end:                                          ; preds = %cond.end
  %call77 = call i32 @find(i32 6), !dbg !11017
  store i32 %call77, i32* %t, align 4, !dbg !11018
  store i32 8, i32* %i, align 4, !dbg !11019
  br label %for.cond78, !dbg !11021

for.cond78:                                       ; preds = %for.inc96, %for.end
  %45 = load i32, i32* %i, align 4, !dbg !11022
  %46 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11024
  %tobool79 = icmp ne %struct.VEC_varinfo_t_heap* %46, null, !dbg !11024
  br i1 %tobool79, label %cond.true80, label %cond.false82, !dbg !11024

cond.true80:                                      ; preds = %for.cond78
  %47 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11024
  %base81 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %47, i32 0, i32 0, !dbg !11024
  br label %cond.end83, !dbg !11024

cond.false82:                                     ; preds = %for.cond78
  br label %cond.end83, !dbg !11024

cond.end83:                                       ; preds = %cond.false82, %cond.true80
  %cond84 = phi %struct.VEC_varinfo_t_base* [ %base81, %cond.true80 ], [ null, %cond.false82 ], !dbg !11024
  %call85 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond84), !dbg !11024
  %cmp86 = icmp ult i32 %45, %call85, !dbg !11025
  br i1 %cmp86, label %for.body87, label %for.end98, !dbg !11026

for.body87:                                       ; preds = %cond.end83
  %48 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11027
  %direct_nodes = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %48, i32 0, i32 13, !dbg !11027
  %49 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes, align 8, !dbg !11027
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %49, i32 0, i32 3, !dbg !11027
  %50 = load i32, i32* %i, align 4, !dbg !11027
  %div = udiv i32 %50, 64, !dbg !11027
  %idxprom = zext i32 %div to i64, !dbg !11027
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !11027
  %51 = load i64, i64* %arrayidx, align 8, !dbg !11027
  %52 = load i32, i32* %i, align 4, !dbg !11027
  %rem = urem i32 %52, 64, !dbg !11027
  %sh_prom = zext i32 %rem to i64, !dbg !11027
  %shr = lshr i64 %51, %sh_prom, !dbg !11027
  %and = and i64 %shr, 1, !dbg !11027
  %tobool88 = icmp ne i64 %and, 0, !dbg !11027
  br i1 %tobool88, label %if.end95, label %land.lhs.true89, !dbg !11030

land.lhs.true89:                                  ; preds = %for.body87
  %53 = load i32, i32* %i, align 4, !dbg !11031
  %call90 = call %struct.variable_info* @get_varinfo(i32 %53), !dbg !11032
  %may_have_pointers = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call90, i32 0, i32 1, !dbg !11033
  %bf.load = load i8, i8* %may_have_pointers, align 4, !dbg !11033
  %bf.lshr = lshr i8 %bf.load, 6, !dbg !11033
  %bf.clear = and i8 %bf.lshr, 1, !dbg !11033
  %bf.cast = zext i8 %bf.clear to i32, !dbg !11033
  %tobool91 = icmp ne i32 %bf.cast, 0, !dbg !11032
  br i1 %tobool91, label %if.then92, label %if.end95, !dbg !11034

if.then92:                                        ; preds = %land.lhs.true89
  %54 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11035
  %55 = load i32, i32* %i, align 4, !dbg !11036
  %call93 = call i32 @find(i32 %55), !dbg !11037
  %56 = load i32, i32* %t, align 4, !dbg !11038
  %call94 = call zeroext i8 @add_graph_edge(%struct.constraint_graph* %54, i32 %call93, i32 %56), !dbg !11039
  br label %if.end95, !dbg !11039

if.end95:                                         ; preds = %if.then92, %land.lhs.true89, %for.body87
  br label %for.inc96, !dbg !11040

for.inc96:                                        ; preds = %if.end95
  %57 = load i32, i32* %i, align 4, !dbg !11041
  %inc97 = add i32 %57, 1, !dbg !11041
  store i32 %inc97, i32* %i, align 4, !dbg !11041
  br label %for.cond78, !dbg !11042, !llvm.loop !11043

for.end98:                                        ; preds = %cond.end83
  %58 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11045
  %call99 = call i32 @find(i32 3), !dbg !11046
  %59 = load i32, i32* %t, align 4, !dbg !11047
  %call100 = call zeroext i8 @add_graph_edge(%struct.constraint_graph* %58, i32 %call99, i32 %59), !dbg !11048
  ret void, !dbg !11049
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_var_substitution_info(%struct.scc_info* %si) #0 !dbg !11050 {
entry:
  %si.addr = alloca %struct.scc_info*, align 8
  store %struct.scc_info* %si, %struct.scc_info** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si.addr, metadata !11053, metadata !DIExpression()), !dbg !11054
  %0 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11055
  call void @free_scc_info(%struct.scc_info* %0), !dbg !11056
  %1 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11057
  %pointer_label = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %1, i32 0, i32 9, !dbg !11058
  %2 = load i32*, i32** %pointer_label, align 8, !dbg !11058
  %3 = bitcast i32* %2 to i8*, !dbg !11057
  call void @free(i8* %3), !dbg !11059
  %4 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11060
  %loc_label = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %4, i32 0, i32 10, !dbg !11061
  %5 = load i32*, i32** %loc_label, align 8, !dbg !11061
  %6 = bitcast i32* %5 to i8*, !dbg !11060
  call void @free(i8* %6), !dbg !11062
  %7 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11063
  %pointed_by = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %7, i32 0, i32 11, !dbg !11064
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %pointed_by, align 8, !dbg !11064
  %9 = bitcast %struct.bitmap_head_def** %8 to i8*, !dbg !11063
  call void @free(i8* %9), !dbg !11065
  %10 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11066
  %points_to = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %10, i32 0, i32 12, !dbg !11067
  %11 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to, align 8, !dbg !11067
  %12 = bitcast %struct.bitmap_head_def** %11 to i8*, !dbg !11066
  call void @free(i8* %12), !dbg !11068
  %13 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11069
  %eq_rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %13, i32 0, i32 6, !dbg !11070
  %14 = load i32*, i32** %eq_rep, align 8, !dbg !11070
  %15 = bitcast i32* %14 to i8*, !dbg !11069
  call void @free(i8* %15), !dbg !11071
  %16 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11072
  %direct_nodes = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %16, i32 0, i32 13, !dbg !11072
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes, align 8, !dbg !11072
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %17, i32 0, i32 0, !dbg !11072
  %18 = load i8*, i8** %popcount, align 8, !dbg !11072
  call void @free(i8* %18), !dbg !11072
  %19 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !11072
  %direct_nodes1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %19, i32 0, i32 13, !dbg !11072
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes1, align 8, !dbg !11072
  %21 = bitcast %struct.simple_bitmap_def* %20 to i8*, !dbg !11072
  call void @free(i8* %21), !dbg !11072
  %22 = load %struct.htab*, %struct.htab** @pointer_equiv_class_table, align 8, !dbg !11073
  call void @htab_delete(%struct.htab* %22), !dbg !11074
  %23 = load %struct.htab*, %struct.htab** @location_equiv_class_table, align 8, !dbg !11075
  call void @htab_delete(%struct.htab* %23), !dbg !11076
  call void @bitmap_obstack_release(%struct.bitmap_obstack* @iteration_obstack), !dbg !11077
  ret void, !dbg !11078
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_complex_constraints(%struct.constraint_graph* %graph) #0 !dbg !11079 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %i = alloca i32, align 4
  %c = alloca %struct.constraint*, align 8
  %lhs = alloca %struct.constraint_expr, align 8
  %rhs = alloca %struct.constraint_expr, align 8
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !11082, metadata !DIExpression()), !dbg !11083
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11084, metadata !DIExpression()), !dbg !11085
  call void @llvm.dbg.declare(metadata %struct.constraint** %c, metadata !11086, metadata !DIExpression()), !dbg !11087
  store i32 0, i32* %i, align 4, !dbg !11088
  br label %for.cond, !dbg !11090

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !11091
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %0, null, !dbg !11091
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11091

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** @constraints, align 8, !dbg !11091
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %1, i32 0, i32 0, !dbg !11091
  br label %cond.end, !dbg !11091

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11091

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11091
  %2 = load i32, i32* %i, align 4, !dbg !11091
  %call = call i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %cond, i32 %2, %struct.constraint** %c), !dbg !11091
  %tobool1 = icmp ne i32 %call, 0, !dbg !11093
  br i1 %tobool1, label %for.body, label %for.end, !dbg !11093

for.body:                                         ; preds = %cond.end
  %3 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11094
  %tobool2 = icmp ne %struct.constraint* %3, null, !dbg !11094
  br i1 %tobool2, label %if.then, label %if.end28, !dbg !11097

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %lhs, metadata !11098, metadata !DIExpression()), !dbg !11100
  %4 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11101
  %lhs3 = getelementptr inbounds %struct.constraint, %struct.constraint* %4, i32 0, i32 0, !dbg !11102
  %5 = bitcast %struct.constraint_expr* %lhs to i8*, !dbg !11102
  %6 = bitcast %struct.constraint_expr* %lhs3 to i8*, !dbg !11102
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 16, i1 false), !dbg !11102
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %rhs, metadata !11103, metadata !DIExpression()), !dbg !11104
  %7 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11105
  %rhs4 = getelementptr inbounds %struct.constraint, %struct.constraint* %7, i32 0, i32 1, !dbg !11106
  %8 = bitcast %struct.constraint_expr* %rhs to i8*, !dbg !11106
  %9 = bitcast %struct.constraint_expr* %rhs4 to i8*, !dbg !11106
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !11106
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !11107
  %10 = load i32, i32* %type, align 8, !dbg !11107
  %cmp = icmp eq i32 %10, 1, !dbg !11109
  br i1 %cmp, label %if.then5, label %if.else, !dbg !11110

if.then5:                                         ; preds = %if.then
  %11 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11111
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !11113
  %12 = load i32, i32* %var, align 4, !dbg !11113
  %13 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11114
  call void @insert_into_complex(%struct.constraint_graph* %11, i32 %12, %struct.constraint* %13), !dbg !11115
  br label %if.end27, !dbg !11116

if.else:                                          ; preds = %if.then
  %type6 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !11117
  %14 = load i32, i32* %type6, align 8, !dbg !11117
  %cmp7 = icmp eq i32 %14, 1, !dbg !11119
  br i1 %cmp7, label %if.then8, label %if.else14, !dbg !11120

if.then8:                                         ; preds = %if.else
  %var9 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !11121
  %15 = load i32, i32* %var9, align 4, !dbg !11121
  %call10 = call %struct.variable_info* @get_varinfo(i32 %15), !dbg !11124
  %is_special_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call10, i32 0, i32 1, !dbg !11125
  %bf.load = load i8, i8* %is_special_var, align 4, !dbg !11125
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !11125
  %bf.clear = and i8 %bf.lshr, 1, !dbg !11125
  %bf.cast = zext i8 %bf.clear to i32, !dbg !11125
  %tobool11 = icmp ne i32 %bf.cast, 0, !dbg !11126
  br i1 %tobool11, label %if.end, label %if.then12, !dbg !11127

if.then12:                                        ; preds = %if.then8
  %16 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11128
  %var13 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !11129
  %17 = load i32, i32* %var13, align 4, !dbg !11129
  %18 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11130
  call void @insert_into_complex(%struct.constraint_graph* %16, i32 %17, %struct.constraint* %18), !dbg !11131
  br label %if.end, !dbg !11131

if.end:                                           ; preds = %if.then12, %if.then8
  br label %if.end26, !dbg !11132

if.else14:                                        ; preds = %if.else
  %type15 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !11133
  %19 = load i32, i32* %type15, align 8, !dbg !11133
  %cmp16 = icmp ne i32 %19, 2, !dbg !11135
  br i1 %cmp16, label %land.lhs.true, label %if.end25, !dbg !11136

land.lhs.true:                                    ; preds = %if.else14
  %var17 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !11137
  %20 = load i32, i32* %var17, align 4, !dbg !11137
  %cmp18 = icmp ugt i32 %20, 1, !dbg !11138
  br i1 %cmp18, label %land.lhs.true19, label %if.end25, !dbg !11139

land.lhs.true19:                                  ; preds = %land.lhs.true
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !11140
  %21 = load i64, i64* %offset, align 8, !dbg !11140
  %cmp20 = icmp ne i64 %21, 0, !dbg !11141
  br i1 %cmp20, label %if.then23, label %lor.lhs.false, !dbg !11142

lor.lhs.false:                                    ; preds = %land.lhs.true19
  %offset21 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !11143
  %22 = load i64, i64* %offset21, align 8, !dbg !11143
  %cmp22 = icmp ne i64 %22, 0, !dbg !11144
  br i1 %cmp22, label %if.then23, label %if.end25, !dbg !11145

if.then23:                                        ; preds = %lor.lhs.false, %land.lhs.true19
  %23 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11146
  %var24 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !11148
  %24 = load i32, i32* %var24, align 4, !dbg !11148
  %25 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11149
  call void @insert_into_complex(%struct.constraint_graph* %23, i32 %24, %struct.constraint* %25), !dbg !11150
  br label %if.end25, !dbg !11151

if.end25:                                         ; preds = %if.then23, %lor.lhs.false, %land.lhs.true, %if.else14
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.end
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then5
  br label %if.end28, !dbg !11152

if.end28:                                         ; preds = %if.end27, %for.body
  br label %for.inc, !dbg !11153

for.inc:                                          ; preds = %if.end28
  %26 = load i32, i32* %i, align 4, !dbg !11154
  %inc = add nsw i32 %26, 1, !dbg !11154
  store i32 %inc, i32* %i, align 4, !dbg !11154
  br label %for.cond, !dbg !11155, !llvm.loop !11156

for.end:                                          ; preds = %cond.end
  ret void, !dbg !11158
}

; Function Attrs: noinline nounwind uwtable
define internal void @unite_pointer_equivalences(%struct.constraint_graph* %graph) #0 !dbg !11159 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %i = alloca i32, align 4
  %label = alloca i32, align 4
  %label_rep = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !11160, metadata !DIExpression()), !dbg !11161
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11162, metadata !DIExpression()), !dbg !11163
  store i32 0, i32* %i, align 4, !dbg !11164
  br label %for.cond, !dbg !11166

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !11167
  %1 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11169
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %1, null, !dbg !11169
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11169

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11169
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %2, i32 0, i32 0, !dbg !11169
  br label %cond.end, !dbg !11169

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11169

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11169
  %call = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !11169
  %cmp = icmp ult i32 %0, %call, !dbg !11170
  br i1 %cmp, label %for.body, label %for.end, !dbg !11171

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %label, metadata !11172, metadata !DIExpression()), !dbg !11174
  %3 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11175
  %pe = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %3, i32 0, i32 7, !dbg !11176
  %4 = load i32*, i32** %pe, align 8, !dbg !11176
  %5 = load i32, i32* %i, align 4, !dbg !11177
  %idxprom = zext i32 %5 to i64, !dbg !11175
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !11175
  %6 = load i32, i32* %arrayidx, align 4, !dbg !11175
  store i32 %6, i32* %label, align 4, !dbg !11174
  %7 = load i32, i32* %label, align 4, !dbg !11178
  %tobool1 = icmp ne i32 %7, 0, !dbg !11178
  br i1 %tobool1, label %if.then, label %if.end13, !dbg !11180

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %label_rep, metadata !11181, metadata !DIExpression()), !dbg !11183
  %8 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11184
  %pe_rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %8, i32 0, i32 8, !dbg !11185
  %9 = load i32*, i32** %pe_rep, align 8, !dbg !11185
  %10 = load i32, i32* %label, align 4, !dbg !11186
  %idxprom2 = zext i32 %10 to i64, !dbg !11184
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i64 %idxprom2, !dbg !11184
  %11 = load i32, i32* %arrayidx3, align 4, !dbg !11184
  store i32 %11, i32* %label_rep, align 4, !dbg !11183
  %12 = load i32, i32* %label_rep, align 4, !dbg !11187
  %cmp4 = icmp eq i32 %12, -1, !dbg !11189
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !11190

if.then5:                                         ; preds = %if.then
  br label %for.inc, !dbg !11191

if.end:                                           ; preds = %if.then
  %13 = load i32, i32* %label_rep, align 4, !dbg !11192
  %call6 = call i32 @find(i32 %13), !dbg !11193
  store i32 %call6, i32* %label_rep, align 4, !dbg !11194
  %14 = load i32, i32* %label_rep, align 4, !dbg !11195
  %cmp7 = icmp sge i32 %14, 0, !dbg !11197
  br i1 %cmp7, label %land.lhs.true, label %if.end12, !dbg !11198

land.lhs.true:                                    ; preds = %if.end
  %15 = load i32, i32* %label_rep, align 4, !dbg !11199
  %16 = load i32, i32* %i, align 4, !dbg !11200
  %call8 = call i32 @find(i32 %16), !dbg !11201
  %call9 = call zeroext i8 @unite(i32 %15, i32 %call8), !dbg !11202
  %conv = zext i8 %call9 to i32, !dbg !11202
  %tobool10 = icmp ne i32 %conv, 0, !dbg !11202
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !11203

if.then11:                                        ; preds = %land.lhs.true
  %17 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11204
  %18 = load i32, i32* %label_rep, align 4, !dbg !11205
  %19 = load i32, i32* %i, align 4, !dbg !11206
  call void @unify_nodes(%struct.constraint_graph* %17, i32 %18, i32 %19, i8 zeroext 0), !dbg !11207
  br label %if.end12, !dbg !11207

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  br label %if.end13, !dbg !11208

if.end13:                                         ; preds = %if.end12, %for.body
  br label %for.inc, !dbg !11209

for.inc:                                          ; preds = %if.end13, %if.then5
  %20 = load i32, i32* %i, align 4, !dbg !11210
  %inc = add i32 %20, 1, !dbg !11210
  store i32 %inc, i32* %i, align 4, !dbg !11210
  br label %for.cond, !dbg !11211, !llvm.loop !11212

for.end:                                          ; preds = %cond.end
  ret void, !dbg !11214
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_indirect_cycles(%struct.constraint_graph* %graph) #0 !dbg !11215 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %si = alloca %struct.scc_info*, align 8
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !11216, metadata !DIExpression()), !dbg !11217
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11218, metadata !DIExpression()), !dbg !11219
  call void @llvm.dbg.declare(metadata i32* %size, metadata !11220, metadata !DIExpression()), !dbg !11221
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11222
  %size1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 0, !dbg !11223
  %1 = load i32, i32* %size1, align 8, !dbg !11223
  store i32 %1, i32* %size, align 4, !dbg !11221
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si, metadata !11224, metadata !DIExpression()), !dbg !11225
  %2 = load i32, i32* %size, align 4, !dbg !11226
  %conv = zext i32 %2 to i64, !dbg !11226
  %call = call %struct.scc_info* @init_scc_info(i64 %conv), !dbg !11227
  store %struct.scc_info* %call, %struct.scc_info** %si, align 8, !dbg !11225
  store i32 0, i32* %i, align 4, !dbg !11228
  br label %for.cond, !dbg !11230

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !11231
  %4 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11233
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %4, null, !dbg !11233
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11233

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11233
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %5, i32 0, i32 0, !dbg !11233
  br label %cond.end, !dbg !11233

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11233

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11233
  %call2 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !11233
  %6 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11233
  %tobool3 = icmp ne %struct.VEC_varinfo_t_heap* %6, null, !dbg !11233
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !11233

cond.true4:                                       ; preds = %cond.end
  %7 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11233
  %base5 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %7, i32 0, i32 0, !dbg !11233
  br label %cond.end7, !dbg !11233

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !11233

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_varinfo_t_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !11233
  %call9 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond8), !dbg !11233
  %sub = sub i32 %call9, 1, !dbg !11233
  %add = add i32 %call2, %sub, !dbg !11233
  %8 = load i32, i32* %size, align 4, !dbg !11233
  %cmp = icmp ult i32 %add, %8, !dbg !11233
  br i1 %cmp, label %cond.true11, label %cond.false28, !dbg !11233

cond.true11:                                      ; preds = %cond.end7
  %9 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11233
  %tobool12 = icmp ne %struct.VEC_varinfo_t_heap* %9, null, !dbg !11233
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !11233

cond.true13:                                      ; preds = %cond.true11
  %10 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11233
  %base14 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %10, i32 0, i32 0, !dbg !11233
  br label %cond.end16, !dbg !11233

cond.false15:                                     ; preds = %cond.true11
  br label %cond.end16, !dbg !11233

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_varinfo_t_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !11233
  %call18 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond17), !dbg !11233
  %11 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11233
  %tobool19 = icmp ne %struct.VEC_varinfo_t_heap* %11, null, !dbg !11233
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !11233

cond.true20:                                      ; preds = %cond.end16
  %12 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11233
  %base21 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %12, i32 0, i32 0, !dbg !11233
  br label %cond.end23, !dbg !11233

cond.false22:                                     ; preds = %cond.end16
  br label %cond.end23, !dbg !11233

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_varinfo_t_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !11233
  %call25 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond24), !dbg !11233
  %sub26 = sub i32 %call25, 1, !dbg !11233
  %add27 = add i32 %call18, %sub26, !dbg !11233
  br label %cond.end29, !dbg !11233

cond.false28:                                     ; preds = %cond.end7
  %13 = load i32, i32* %size, align 4, !dbg !11233
  br label %cond.end29, !dbg !11233

cond.end29:                                       ; preds = %cond.false28, %cond.end23
  %cond30 = phi i32 [ %add27, %cond.end23 ], [ %13, %cond.false28 ], !dbg !11233
  %cmp31 = icmp ult i32 %3, %cond30, !dbg !11234
  br i1 %cmp31, label %for.body, label %for.end, !dbg !11235

for.body:                                         ; preds = %cond.end29
  %14 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11236
  %visited = getelementptr inbounds %struct.scc_info, %struct.scc_info* %14, i32 0, i32 0, !dbg !11236
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !11236
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %15, i32 0, i32 3, !dbg !11236
  %16 = load i32, i32* %i, align 4, !dbg !11236
  %div = udiv i32 %16, 64, !dbg !11236
  %idxprom = zext i32 %div to i64, !dbg !11236
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !11236
  %17 = load i64, i64* %arrayidx, align 8, !dbg !11236
  %18 = load i32, i32* %i, align 4, !dbg !11236
  %rem = urem i32 %18, 64, !dbg !11236
  %sh_prom = zext i32 %rem to i64, !dbg !11236
  %shr = lshr i64 %17, %sh_prom, !dbg !11236
  %and = and i64 %shr, 1, !dbg !11236
  %tobool33 = icmp ne i64 %and, 0, !dbg !11236
  br i1 %tobool33, label %if.end, label %land.lhs.true, !dbg !11238

land.lhs.true:                                    ; preds = %for.body
  %19 = load i32, i32* %i, align 4, !dbg !11239
  %call34 = call i32 @find(i32 %19), !dbg !11240
  %20 = load i32, i32* %i, align 4, !dbg !11241
  %cmp35 = icmp eq i32 %call34, %20, !dbg !11242
  br i1 %cmp35, label %if.then, label %if.end, !dbg !11243

if.then:                                          ; preds = %land.lhs.true
  %21 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11244
  %22 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11245
  %23 = load i32, i32* %i, align 4, !dbg !11246
  call void @scc_visit(%struct.constraint_graph* %21, %struct.scc_info* %22, i32 %23), !dbg !11247
  br label %if.end, !dbg !11247

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !11241

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4, !dbg !11248
  %inc = add i32 %24, 1, !dbg !11248
  store i32 %inc, i32* %i, align 4, !dbg !11248
  br label %for.cond, !dbg !11249, !llvm.loop !11250

for.end:                                          ; preds = %cond.end29
  %25 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11252
  call void @free_scc_info(%struct.scc_info* %25), !dbg !11253
  ret void, !dbg !11254
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_preds_and_fake_succs(%struct.constraint_graph* %graph) #0 !dbg !11255 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %i = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !11256, metadata !DIExpression()), !dbg !11257
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11258, metadata !DIExpression()), !dbg !11259
  store i32 0, i32* %i, align 4, !dbg !11260
  br label %for.cond, !dbg !11262

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !11263
  %1 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11265
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %1, null, !dbg !11265
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11265

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11265
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %2, i32 0, i32 0, !dbg !11265
  br label %cond.end, !dbg !11265

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11265

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11265
  %call = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !11265
  %cmp = icmp ult i32 %0, %call, !dbg !11266
  br i1 %cmp, label %for.body, label %for.end, !dbg !11267

for.body:                                         ; preds = %cond.end
  %3 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11268
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %3, i32 0, i32 1, !dbg !11271
  %4 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !11271
  %5 = load i32, i32* %i, align 4, !dbg !11272
  %idxprom = zext i32 %5 to i64, !dbg !11268
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %4, i64 %idxprom, !dbg !11268
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !11268
  %tobool1 = icmp ne %struct.bitmap_head_def* %6, null, !dbg !11268
  br i1 %tobool1, label %if.then, label %if.end, !dbg !11273

if.then:                                          ; preds = %for.body
  %7 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11274
  %succs2 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %7, i32 0, i32 1, !dbg !11275
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs2, align 8, !dbg !11275
  %9 = load i32, i32* %i, align 4, !dbg !11276
  %idxprom3 = zext i32 %9 to i64, !dbg !11274
  %arrayidx4 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %8, i64 %idxprom3, !dbg !11274
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx4, align 8, !dbg !11274
  %11 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11277
  %tobool5 = icmp ne %struct.VEC_varinfo_t_heap* %11, null, !dbg !11277
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !11277

cond.true6:                                       ; preds = %if.then
  %12 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11277
  %base7 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %12, i32 0, i32 0, !dbg !11277
  br label %cond.end9, !dbg !11277

cond.false8:                                      ; preds = %if.then
  br label %cond.end9, !dbg !11277

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_varinfo_t_base* [ %base7, %cond.true6 ], [ null, %cond.false8 ], !dbg !11277
  %call11 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond10), !dbg !11277
  %13 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11278
  %tobool12 = icmp ne %struct.VEC_varinfo_t_heap* %13, null, !dbg !11278
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !11278

cond.true13:                                      ; preds = %cond.end9
  %14 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11278
  %base14 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %14, i32 0, i32 0, !dbg !11278
  br label %cond.end16, !dbg !11278

cond.false15:                                     ; preds = %cond.end9
  br label %cond.end16, !dbg !11278

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_varinfo_t_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !11278
  %call18 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond17), !dbg !11278
  %mul = mul i32 %call18, 2, !dbg !11279
  call void @bitmap_clear_range(%struct.bitmap_head_def* %10, i32 %call11, i32 %mul), !dbg !11280
  br label %if.end, !dbg !11280

if.end:                                           ; preds = %cond.end16, %for.body
  br label %for.inc, !dbg !11281

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4, !dbg !11282
  %inc = add i32 %15, 1, !dbg !11282
  store i32 %inc, i32* %i, align 4, !dbg !11282
  br label %for.cond, !dbg !11283, !llvm.loop !11284

for.end:                                          ; preds = %cond.end
  %16 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11286
  %tobool19 = icmp ne %struct.VEC_varinfo_t_heap* %16, null, !dbg !11286
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !11286

cond.true20:                                      ; preds = %for.end
  %17 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11286
  %base21 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %17, i32 0, i32 0, !dbg !11286
  br label %cond.end23, !dbg !11286

cond.false22:                                     ; preds = %for.end
  br label %cond.end23, !dbg !11286

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_varinfo_t_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !11286
  %call25 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond24), !dbg !11286
  store i32 %call25, i32* %i, align 4, !dbg !11288
  br label %for.cond26, !dbg !11289

for.cond26:                                       ; preds = %for.inc41, %cond.end23
  %18 = load i32, i32* %i, align 4, !dbg !11290
  %19 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11292
  %size = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %19, i32 0, i32 0, !dbg !11293
  %20 = load i32, i32* %size, align 8, !dbg !11293
  %cmp27 = icmp ult i32 %18, %20, !dbg !11294
  br i1 %cmp27, label %for.body28, label %for.end43, !dbg !11295

for.body28:                                       ; preds = %for.cond26
  %21 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11296
  %succs29 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %21, i32 0, i32 1, !dbg !11299
  %22 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs29, align 8, !dbg !11299
  %23 = load i32, i32* %i, align 4, !dbg !11300
  %idxprom30 = zext i32 %23 to i64, !dbg !11296
  %arrayidx31 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %22, i64 %idxprom30, !dbg !11296
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx31, align 8, !dbg !11296
  %tobool32 = icmp ne %struct.bitmap_head_def* %24, null, !dbg !11296
  br i1 %tobool32, label %if.then33, label %if.end40, !dbg !11301

if.then33:                                        ; preds = %for.body28
  %25 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11302
  %succs34 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %25, i32 0, i32 1, !dbg !11302
  %26 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs34, align 8, !dbg !11302
  %27 = load i32, i32* %i, align 4, !dbg !11302
  %idxprom35 = zext i32 %27 to i64, !dbg !11302
  %arrayidx36 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %26, i64 %idxprom35, !dbg !11302
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx36, align 8, !dbg !11302
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %28), !dbg !11302
  %29 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11302
  %succs37 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %29, i32 0, i32 1, !dbg !11302
  %30 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs37, align 8, !dbg !11302
  %31 = load i32, i32* %i, align 4, !dbg !11302
  %idxprom38 = zext i32 %31 to i64, !dbg !11302
  %arrayidx39 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %30, i64 %idxprom38, !dbg !11302
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %arrayidx39, align 8, !dbg !11302
  br label %if.end40, !dbg !11302

if.end40:                                         ; preds = %if.then33, %for.body28
  br label %for.inc41, !dbg !11303

for.inc41:                                        ; preds = %if.end40
  %32 = load i32, i32* %i, align 4, !dbg !11304
  %inc42 = add i32 %32, 1, !dbg !11304
  store i32 %inc42, i32* %i, align 4, !dbg !11304
  br label %for.cond26, !dbg !11305, !llvm.loop !11306

for.end43:                                        ; preds = %for.cond26
  %33 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11308
  %tobool44 = icmp ne %struct.VEC_varinfo_t_heap* %33, null, !dbg !11308
  br i1 %tobool44, label %cond.true45, label %cond.false47, !dbg !11308

cond.true45:                                      ; preds = %for.end43
  %34 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !11308
  %base46 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %34, i32 0, i32 0, !dbg !11308
  br label %cond.end48, !dbg !11308

cond.false47:                                     ; preds = %for.end43
  br label %cond.end48, !dbg !11308

cond.end48:                                       ; preds = %cond.false47, %cond.true45
  %cond49 = phi %struct.VEC_varinfo_t_base* [ %base46, %cond.true45 ], [ null, %cond.false47 ], !dbg !11308
  %call50 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond49), !dbg !11308
  %35 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11309
  %size51 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %35, i32 0, i32 0, !dbg !11310
  store i32 %call50, i32* %size51, align 8, !dbg !11311
  %36 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11312
  %succs52 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %36, i32 0, i32 1, !dbg !11312
  %37 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs52, align 8, !dbg !11312
  %38 = bitcast %struct.bitmap_head_def** %37 to i8*, !dbg !11312
  %39 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11312
  %size53 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %39, i32 0, i32 0, !dbg !11312
  %40 = load i32, i32* %size53, align 8, !dbg !11312
  %conv = zext i32 %40 to i64, !dbg !11312
  %mul54 = mul i64 8, %conv, !dbg !11312
  %call55 = call i8* @xrealloc(i8* %38, i64 %mul54), !dbg !11312
  %41 = bitcast i8* %call55 to %struct.bitmap_head_def**, !dbg !11312
  %42 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11313
  %succs56 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %42, i32 0, i32 1, !dbg !11314
  store %struct.bitmap_head_def** %41, %struct.bitmap_head_def*** %succs56, align 8, !dbg !11315
  %43 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11316
  %implicit_preds = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %43, i32 0, i32 2, !dbg !11317
  %44 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds, align 8, !dbg !11317
  %45 = bitcast %struct.bitmap_head_def** %44 to i8*, !dbg !11316
  call void @free(i8* %45), !dbg !11318
  %46 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11319
  %implicit_preds57 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %46, i32 0, i32 2, !dbg !11320
  store %struct.bitmap_head_def** null, %struct.bitmap_head_def*** %implicit_preds57, align 8, !dbg !11321
  %47 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11322
  %preds = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %47, i32 0, i32 3, !dbg !11323
  %48 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds, align 8, !dbg !11323
  %49 = bitcast %struct.bitmap_head_def** %48 to i8*, !dbg !11322
  call void @free(i8* %49), !dbg !11324
  %50 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11325
  %preds58 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %50, i32 0, i32 3, !dbg !11326
  store %struct.bitmap_head_def** null, %struct.bitmap_head_def*** %preds58, align 8, !dbg !11327
  call void @bitmap_obstack_release(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !11328
  ret void, !dbg !11329
}

; Function Attrs: noinline nounwind uwtable
define internal void @solve_graph(%struct.constraint_graph* %graph) #0 !dbg !11330 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %size = alloca i32, align 4
  %i = alloca i32, align 4
  %pts = alloca %struct.bitmap_head_def*, align 8
  %ivi = alloca %struct.variable_info*, align 8
  %i24 = alloca i32, align 4
  %ti = alloca %struct.topo_info*, align 8
  %j = alloca i32, align 4
  %c = alloca %struct.constraint*, align 8
  %solution63 = alloca %struct.bitmap_head_def*, align 8
  %complex64 = alloca %struct.VEC_constraint_t_heap*, align 8
  %solution_empty = alloca i8, align 1
  %bi = alloca %struct.bitmap_iterator, align 8
  %eff_escaped_id = alloca i32, align 4
  %tmp = alloca %struct.bitmap_head_def*, align 8
  %flag = alloca i8, align 1
  %to = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !11331, metadata !DIExpression()), !dbg !11332
  call void @llvm.dbg.declare(metadata i32* %size, metadata !11333, metadata !DIExpression()), !dbg !11334
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11335
  %size1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 0, !dbg !11336
  %1 = load i32, i32* %size1, align 8, !dbg !11336
  store i32 %1, i32* %size, align 4, !dbg !11334
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11337, metadata !DIExpression()), !dbg !11338
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %pts, metadata !11339, metadata !DIExpression()), !dbg !11340
  store i32 0, i32* @changed_count, align 4, !dbg !11341
  %2 = load i32, i32* %size, align 4, !dbg !11342
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %2), !dbg !11343
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** @changed, align 8, !dbg !11344
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !11345
  call void @sbitmap_zero(%struct.simple_bitmap_def* %3), !dbg !11346
  store i32 0, i32* %i, align 4, !dbg !11347
  br label %for.cond, !dbg !11349

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !11350
  %5 = load i32, i32* %size, align 4, !dbg !11352
  %cmp = icmp ult i32 %4, %5, !dbg !11353
  br i1 %cmp, label %for.body, label %for.end, !dbg !11354

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %ivi, metadata !11355, metadata !DIExpression()), !dbg !11357
  %6 = load i32, i32* %i, align 4, !dbg !11358
  %call2 = call %struct.variable_info* @get_varinfo(i32 %6), !dbg !11359
  store %struct.variable_info* %call2, %struct.variable_info** %ivi, align 8, !dbg !11357
  %7 = load i32, i32* %i, align 4, !dbg !11360
  %call3 = call i32 @find(i32 %7), !dbg !11362
  %8 = load i32, i32* %i, align 4, !dbg !11363
  %cmp4 = icmp eq i32 %call3, %8, !dbg !11364
  br i1 %cmp4, label %land.lhs.true, label %if.end, !dbg !11365

land.lhs.true:                                    ; preds = %for.body
  %9 = load %struct.variable_info*, %struct.variable_info** %ivi, align 8, !dbg !11366
  %solution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %9, i32 0, i32 8, !dbg !11366
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution, align 8, !dbg !11366
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %10, i32 0, i32 0, !dbg !11366
  %11 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !11366
  %tobool = icmp ne %struct.bitmap_element_def* %11, null, !dbg !11366
  br i1 %tobool, label %land.lhs.true5, label %if.end, !dbg !11367

land.lhs.true5:                                   ; preds = %land.lhs.true
  %12 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11368
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %12, i32 0, i32 1, !dbg !11369
  %13 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !11369
  %14 = load i32, i32* %i, align 4, !dbg !11370
  %idxprom = zext i32 %14 to i64, !dbg !11368
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %13, i64 %idxprom, !dbg !11368
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !11368
  %tobool6 = icmp ne %struct.bitmap_head_def* %15, null, !dbg !11368
  br i1 %tobool6, label %land.lhs.true7, label %lor.lhs.false, !dbg !11371

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %16 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11372
  %succs8 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %16, i32 0, i32 1, !dbg !11372
  %17 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs8, align 8, !dbg !11372
  %18 = load i32, i32* %i, align 4, !dbg !11372
  %idxprom9 = zext i32 %18 to i64, !dbg !11372
  %arrayidx10 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %17, i64 %idxprom9, !dbg !11372
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx10, align 8, !dbg !11372
  %first11 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %19, i32 0, i32 0, !dbg !11372
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first11, align 8, !dbg !11372
  %tobool12 = icmp ne %struct.bitmap_element_def* %20, null, !dbg !11372
  br i1 %tobool12, label %if.then, label %lor.lhs.false, !dbg !11373

lor.lhs.false:                                    ; preds = %land.lhs.true7, %land.lhs.true5
  %21 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11374
  %complex = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %21, i32 0, i32 15, !dbg !11374
  %22 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex, align 8, !dbg !11374
  %23 = load i32, i32* %i, align 4, !dbg !11374
  %idxprom13 = zext i32 %23 to i64, !dbg !11374
  %arrayidx14 = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %22, i64 %idxprom13, !dbg !11374
  %24 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %arrayidx14, align 8, !dbg !11374
  %tobool15 = icmp ne %struct.VEC_constraint_t_heap* %24, null, !dbg !11374
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !11374

cond.true:                                        ; preds = %lor.lhs.false
  %25 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11374
  %complex16 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %25, i32 0, i32 15, !dbg !11374
  %26 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex16, align 8, !dbg !11374
  %27 = load i32, i32* %i, align 4, !dbg !11374
  %idxprom17 = zext i32 %27 to i64, !dbg !11374
  %arrayidx18 = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %26, i64 %idxprom17, !dbg !11374
  %28 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %arrayidx18, align 8, !dbg !11374
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %28, i32 0, i32 0, !dbg !11374
  br label %cond.end, !dbg !11374

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !11374

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11374
  %call19 = call i32 @VEC_constraint_t_base_length(%struct.VEC_constraint_t_base* %cond), !dbg !11374
  %cmp20 = icmp ugt i32 %call19, 0, !dbg !11375
  br i1 %cmp20, label %if.then, label %if.end, !dbg !11376

if.then:                                          ; preds = %cond.end, %land.lhs.true7
  %29 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !11377
  %30 = load i32, i32* %i, align 4, !dbg !11379
  call void @SET_BIT(%struct.simple_bitmap_def* %29, i32 %30), !dbg !11380
  %31 = load i32, i32* @changed_count, align 4, !dbg !11381
  %inc = add i32 %31, 1, !dbg !11381
  store i32 %inc, i32* @changed_count, align 4, !dbg !11381
  br label %if.end, !dbg !11382

if.end:                                           ; preds = %if.then, %cond.end, %land.lhs.true, %for.body
  br label %for.inc, !dbg !11383

for.inc:                                          ; preds = %if.end
  %32 = load i32, i32* %i, align 4, !dbg !11384
  %inc21 = add i32 %32, 1, !dbg !11384
  store i32 %inc21, i32* %i, align 4, !dbg !11384
  br label %for.cond, !dbg !11385, !llvm.loop !11386

for.end:                                          ; preds = %for.cond
  %call22 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @pta_obstack), !dbg !11388
  store %struct.bitmap_head_def* %call22, %struct.bitmap_head_def** %pts, align 8, !dbg !11389
  br label %while.cond, !dbg !11390

while.cond:                                       ; preds = %while.end, %for.end
  %33 = load i32, i32* @changed_count, align 4, !dbg !11391
  %cmp23 = icmp ugt i32 %33, 0, !dbg !11392
  br i1 %cmp23, label %while.body, label %while.end166, !dbg !11390

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %i24, metadata !11393, metadata !DIExpression()), !dbg !11395
  call void @llvm.dbg.declare(metadata %struct.topo_info** %ti, metadata !11396, metadata !DIExpression()), !dbg !11397
  %call25 = call %struct.topo_info* @init_topo_info(), !dbg !11398
  store %struct.topo_info* %call25, %struct.topo_info** %ti, align 8, !dbg !11397
  %34 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 4), align 4, !dbg !11399
  %inc26 = add i32 %34, 1, !dbg !11399
  store i32 %inc26, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 4), align 4, !dbg !11399
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* @iteration_obstack), !dbg !11400
  %35 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11401
  %36 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !11402
  call void @compute_topo_order(%struct.constraint_graph* %35, %struct.topo_info* %36), !dbg !11403
  br label %while.cond27, !dbg !11404

while.cond27:                                     ; preds = %if.end165, %if.then74, %if.then57, %if.then49, %while.body
  %37 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !11405
  %topo_order = getelementptr inbounds %struct.topo_info, %struct.topo_info* %37, i32 0, i32 1, !dbg !11405
  %38 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %topo_order, align 8, !dbg !11405
  %tobool28 = icmp ne %struct.VEC_unsigned_heap* %38, null, !dbg !11405
  br i1 %tobool28, label %cond.true29, label %cond.false32, !dbg !11405

cond.true29:                                      ; preds = %while.cond27
  %39 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !11405
  %topo_order30 = getelementptr inbounds %struct.topo_info, %struct.topo_info* %39, i32 0, i32 1, !dbg !11405
  %40 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %topo_order30, align 8, !dbg !11405
  %base31 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %40, i32 0, i32 0, !dbg !11405
  br label %cond.end33, !dbg !11405

cond.false32:                                     ; preds = %while.cond27
  br label %cond.end33, !dbg !11405

cond.end33:                                       ; preds = %cond.false32, %cond.true29
  %cond34 = phi %struct.VEC_unsigned_base* [ %base31, %cond.true29 ], [ null, %cond.false32 ], !dbg !11405
  %call35 = call i32 @VEC_unsigned_base_length(%struct.VEC_unsigned_base* %cond34), !dbg !11405
  %cmp36 = icmp ne i32 %call35, 0, !dbg !11406
  br i1 %cmp36, label %while.body37, label %while.end, !dbg !11404

while.body37:                                     ; preds = %cond.end33
  %41 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !11407
  %topo_order38 = getelementptr inbounds %struct.topo_info, %struct.topo_info* %41, i32 0, i32 1, !dbg !11407
  %42 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %topo_order38, align 8, !dbg !11407
  %tobool39 = icmp ne %struct.VEC_unsigned_heap* %42, null, !dbg !11407
  br i1 %tobool39, label %cond.true40, label %cond.false43, !dbg !11407

cond.true40:                                      ; preds = %while.body37
  %43 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !11407
  %topo_order41 = getelementptr inbounds %struct.topo_info, %struct.topo_info* %43, i32 0, i32 1, !dbg !11407
  %44 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %topo_order41, align 8, !dbg !11407
  %base42 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %44, i32 0, i32 0, !dbg !11407
  br label %cond.end44, !dbg !11407

cond.false43:                                     ; preds = %while.body37
  br label %cond.end44, !dbg !11407

cond.end44:                                       ; preds = %cond.false43, %cond.true40
  %cond45 = phi %struct.VEC_unsigned_base* [ %base42, %cond.true40 ], [ null, %cond.false43 ], !dbg !11407
  %call46 = call i32 @VEC_unsigned_base_pop(%struct.VEC_unsigned_base* %cond45), !dbg !11407
  store i32 %call46, i32* %i24, align 4, !dbg !11409
  %45 = load i32, i32* %i24, align 4, !dbg !11410
  %call47 = call i32 @find(i32 %45), !dbg !11412
  %46 = load i32, i32* %i24, align 4, !dbg !11413
  %cmp48 = icmp ne i32 %call47, %46, !dbg !11414
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !11415

if.then49:                                        ; preds = %cond.end44
  br label %while.cond27, !dbg !11416, !llvm.loop !11417

if.end50:                                         ; preds = %cond.end44
  %47 = load i32, i32* %i24, align 4, !dbg !11419
  %call51 = call zeroext i8 @eliminate_indirect_cycles(i32 %47), !dbg !11421
  %conv = zext i8 %call51 to i32, !dbg !11421
  %tobool52 = icmp ne i32 %conv, 0, !dbg !11421
  br i1 %tobool52, label %land.lhs.true53, label %if.end58, !dbg !11422

land.lhs.true53:                                  ; preds = %if.end50
  %48 = load i32, i32* %i24, align 4, !dbg !11423
  %call54 = call i32 @find(i32 %48), !dbg !11424
  %49 = load i32, i32* %i24, align 4, !dbg !11425
  %cmp55 = icmp ne i32 %call54, %49, !dbg !11426
  br i1 %cmp55, label %if.then57, label %if.end58, !dbg !11427

if.then57:                                        ; preds = %land.lhs.true53
  br label %while.cond27, !dbg !11428, !llvm.loop !11417

if.end58:                                         ; preds = %land.lhs.true53, %if.end50
  %50 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !11429
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %50, i32 0, i32 3, !dbg !11429
  %51 = load i32, i32* %i24, align 4, !dbg !11429
  %div = udiv i32 %51, 64, !dbg !11429
  %idxprom59 = zext i32 %div to i64, !dbg !11429
  %arrayidx60 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom59, !dbg !11429
  %52 = load i64, i64* %arrayidx60, align 8, !dbg !11429
  %53 = load i32, i32* %i24, align 4, !dbg !11429
  %rem = urem i32 %53, 64, !dbg !11429
  %sh_prom = zext i32 %rem to i64, !dbg !11429
  %shr = lshr i64 %52, %sh_prom, !dbg !11429
  %and = and i64 %shr, 1, !dbg !11429
  %tobool61 = icmp ne i64 %and, 0, !dbg !11429
  br i1 %tobool61, label %if.then62, label %if.end165, !dbg !11431

if.then62:                                        ; preds = %if.end58
  call void @llvm.dbg.declare(metadata i32* %j, metadata !11432, metadata !DIExpression()), !dbg !11434
  call void @llvm.dbg.declare(metadata %struct.constraint** %c, metadata !11435, metadata !DIExpression()), !dbg !11436
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %solution63, metadata !11437, metadata !DIExpression()), !dbg !11438
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_heap** %complex64, metadata !11439, metadata !DIExpression()), !dbg !11440
  %54 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11441
  %complex65 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %54, i32 0, i32 15, !dbg !11442
  %55 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex65, align 8, !dbg !11442
  %56 = load i32, i32* %i24, align 4, !dbg !11443
  %idxprom66 = zext i32 %56 to i64, !dbg !11441
  %arrayidx67 = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %55, i64 %idxprom66, !dbg !11441
  %57 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %arrayidx67, align 8, !dbg !11441
  store %struct.VEC_constraint_t_heap* %57, %struct.VEC_constraint_t_heap** %complex64, align 8, !dbg !11440
  call void @llvm.dbg.declare(metadata i8* %solution_empty, metadata !11444, metadata !DIExpression()), !dbg !11445
  %58 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !11446
  %59 = load i32, i32* %i24, align 4, !dbg !11447
  call void @RESET_BIT(%struct.simple_bitmap_def* %58, i32 %59), !dbg !11448
  %60 = load i32, i32* @changed_count, align 4, !dbg !11449
  %dec = add i32 %60, -1, !dbg !11449
  store i32 %dec, i32* @changed_count, align 4, !dbg !11449
  %61 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pts, align 8, !dbg !11450
  %62 = load i32, i32* %i24, align 4, !dbg !11451
  %call68 = call %struct.variable_info* @get_varinfo(i32 %62), !dbg !11452
  %solution69 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call68, i32 0, i32 8, !dbg !11453
  %63 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution69, align 8, !dbg !11453
  %64 = load i32, i32* %i24, align 4, !dbg !11454
  %call70 = call %struct.variable_info* @get_varinfo(i32 %64), !dbg !11455
  %oldsolution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call70, i32 0, i32 9, !dbg !11456
  %65 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %oldsolution, align 8, !dbg !11456
  %call71 = call zeroext i8 @bitmap_and_compl(%struct.bitmap_head_def* %61, %struct.bitmap_head_def* %63, %struct.bitmap_head_def* %65), !dbg !11457
  %66 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pts, align 8, !dbg !11458
  %first72 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %66, i32 0, i32 0, !dbg !11458
  %67 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first72, align 8, !dbg !11458
  %tobool73 = icmp ne %struct.bitmap_element_def* %67, null, !dbg !11458
  br i1 %tobool73, label %if.end75, label %if.then74, !dbg !11460

if.then74:                                        ; preds = %if.then62
  br label %while.cond27, !dbg !11461, !llvm.loop !11417

if.end75:                                         ; preds = %if.then62
  %68 = load i32, i32* %i24, align 4, !dbg !11462
  %call76 = call %struct.variable_info* @get_varinfo(i32 %68), !dbg !11463
  %oldsolution77 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call76, i32 0, i32 9, !dbg !11464
  %69 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %oldsolution77, align 8, !dbg !11464
  %70 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pts, align 8, !dbg !11465
  %call78 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %69, %struct.bitmap_head_def* %70), !dbg !11466
  %71 = load i32, i32* %i24, align 4, !dbg !11467
  %call79 = call %struct.variable_info* @get_varinfo(i32 %71), !dbg !11468
  %solution80 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call79, i32 0, i32 8, !dbg !11469
  %72 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution80, align 8, !dbg !11469
  store %struct.bitmap_head_def* %72, %struct.bitmap_head_def** %solution63, align 8, !dbg !11470
  %73 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution63, align 8, !dbg !11471
  %first81 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %73, i32 0, i32 0, !dbg !11471
  %74 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first81, align 8, !dbg !11471
  %tobool82 = icmp ne %struct.bitmap_element_def* %74, null, !dbg !11471
  %lnot = xor i1 %tobool82, true, !dbg !11471
  %lnot.ext = zext i1 %lnot to i32, !dbg !11471
  %conv83 = trunc i32 %lnot.ext to i8, !dbg !11471
  store i8 %conv83, i8* %solution_empty, align 1, !dbg !11472
  store i32 0, i32* %j, align 4, !dbg !11473
  br label %for.cond84, !dbg !11475

for.cond84:                                       ; preds = %for.inc108, %if.end75
  %75 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %complex64, align 8, !dbg !11476
  %tobool85 = icmp ne %struct.VEC_constraint_t_heap* %75, null, !dbg !11476
  br i1 %tobool85, label %cond.true86, label %cond.false88, !dbg !11476

cond.true86:                                      ; preds = %for.cond84
  %76 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %complex64, align 8, !dbg !11476
  %base87 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %76, i32 0, i32 0, !dbg !11476
  br label %cond.end89, !dbg !11476

cond.false88:                                     ; preds = %for.cond84
  br label %cond.end89, !dbg !11476

cond.end89:                                       ; preds = %cond.false88, %cond.true86
  %cond90 = phi %struct.VEC_constraint_t_base* [ %base87, %cond.true86 ], [ null, %cond.false88 ], !dbg !11476
  %77 = load i32, i32* %j, align 4, !dbg !11476
  %call91 = call i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %cond90, i32 %77, %struct.constraint** %c), !dbg !11476
  %tobool92 = icmp ne i32 %call91, 0, !dbg !11478
  br i1 %tobool92, label %for.body93, label %for.end110, !dbg !11478

for.body93:                                       ; preds = %cond.end89
  %78 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11479
  %lhs = getelementptr inbounds %struct.constraint, %struct.constraint* %78, i32 0, i32 0, !dbg !11481
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 1, !dbg !11482
  %79 = load i32, i32* %var, align 4, !dbg !11482
  %call94 = call i32 @find(i32 %79), !dbg !11483
  %80 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11484
  %lhs95 = getelementptr inbounds %struct.constraint, %struct.constraint* %80, i32 0, i32 0, !dbg !11485
  %var96 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs95, i32 0, i32 1, !dbg !11486
  store i32 %call94, i32* %var96, align 4, !dbg !11487
  %81 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11488
  %rhs = getelementptr inbounds %struct.constraint, %struct.constraint* %81, i32 0, i32 1, !dbg !11489
  %var97 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 1, !dbg !11490
  %82 = load i32, i32* %var97, align 4, !dbg !11490
  %call98 = call i32 @find(i32 %82), !dbg !11491
  %83 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11492
  %rhs99 = getelementptr inbounds %struct.constraint, %struct.constraint* %83, i32 0, i32 1, !dbg !11493
  %var100 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs99, i32 0, i32 1, !dbg !11494
  store i32 %call98, i32* %var100, align 4, !dbg !11495
  %84 = load i8, i8* %solution_empty, align 1, !dbg !11496
  %tobool101 = icmp ne i8 %84, 0, !dbg !11496
  br i1 %tobool101, label %lor.lhs.false102, label %if.then106, !dbg !11498

lor.lhs.false102:                                 ; preds = %for.body93
  %85 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11499
  %lhs103 = getelementptr inbounds %struct.constraint, %struct.constraint* %85, i32 0, i32 0, !dbg !11500
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs103, i32 0, i32 0, !dbg !11501
  %86 = load i32, i32* %type, align 8, !dbg !11501
  %cmp104 = icmp ne i32 %86, 1, !dbg !11502
  br i1 %cmp104, label %if.then106, label %if.end107, !dbg !11503

if.then106:                                       ; preds = %lor.lhs.false102, %for.body93
  %87 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11504
  %88 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !11505
  %89 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pts, align 8, !dbg !11506
  call void @do_complex_constraint(%struct.constraint_graph* %87, %struct.constraint* %88, %struct.bitmap_head_def* %89), !dbg !11507
  br label %if.end107, !dbg !11507

if.end107:                                        ; preds = %if.then106, %lor.lhs.false102
  br label %for.inc108, !dbg !11508

for.inc108:                                       ; preds = %if.end107
  %90 = load i32, i32* %j, align 4, !dbg !11509
  %inc109 = add i32 %90, 1, !dbg !11509
  store i32 %inc109, i32* %j, align 4, !dbg !11509
  br label %for.cond84, !dbg !11510, !llvm.loop !11511

for.end110:                                       ; preds = %cond.end89
  %91 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution63, align 8, !dbg !11513
  %first111 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %91, i32 0, i32 0, !dbg !11513
  %92 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first111, align 8, !dbg !11513
  %tobool112 = icmp ne %struct.bitmap_element_def* %92, null, !dbg !11513
  %lnot113 = xor i1 %tobool112, true, !dbg !11513
  %lnot.ext114 = zext i1 %lnot113 to i32, !dbg !11513
  %conv115 = trunc i32 %lnot.ext114 to i8, !dbg !11513
  store i8 %conv115, i8* %solution_empty, align 1, !dbg !11514
  %93 = load i8, i8* %solution_empty, align 1, !dbg !11515
  %tobool116 = icmp ne i8 %93, 0, !dbg !11515
  br i1 %tobool116, label %if.end164, label %if.then117, !dbg !11517

if.then117:                                       ; preds = %for.end110
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !11518, metadata !DIExpression()), !dbg !11520
  call void @llvm.dbg.declare(metadata i32* %eff_escaped_id, metadata !11521, metadata !DIExpression()), !dbg !11522
  %call118 = call i32 @find(i32 3), !dbg !11523
  store i32 %call118, i32* %eff_escaped_id, align 4, !dbg !11522
  %94 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11524
  %succs119 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %94, i32 0, i32 1, !dbg !11524
  %95 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs119, align 8, !dbg !11524
  %96 = load i32, i32* %i24, align 4, !dbg !11524
  %idxprom120 = zext i32 %96 to i64, !dbg !11524
  %arrayidx121 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %95, i64 %idxprom120, !dbg !11524
  %97 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx121, align 8, !dbg !11524
  %tobool122 = icmp ne %struct.bitmap_head_def* %97, null, !dbg !11524
  br i1 %tobool122, label %if.then123, label %if.end163, !dbg !11526

if.then123:                                       ; preds = %if.then117
  %98 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11527
  %succs124 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %98, i32 0, i32 1, !dbg !11527
  %99 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs124, align 8, !dbg !11527
  %100 = load i32, i32* %i24, align 4, !dbg !11527
  %idxprom125 = zext i32 %100 to i64, !dbg !11527
  %arrayidx126 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %99, i64 %idxprom125, !dbg !11527
  %101 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx126, align 8, !dbg !11527
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %101, i32 0, i32* %j), !dbg !11527
  br label %for.cond127, !dbg !11527

for.cond127:                                      ; preds = %for.inc161, %if.then123
  %call128 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !11529
  %tobool129 = icmp ne i8 %call128, 0, !dbg !11527
  br i1 %tobool129, label %for.body130, label %for.end162, !dbg !11527

for.body130:                                      ; preds = %for.cond127
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp, metadata !11531, metadata !DIExpression()), !dbg !11533
  call void @llvm.dbg.declare(metadata i8* %flag, metadata !11534, metadata !DIExpression()), !dbg !11535
  call void @llvm.dbg.declare(metadata i32* %to, metadata !11536, metadata !DIExpression()), !dbg !11537
  %102 = load i32, i32* %j, align 4, !dbg !11538
  %call131 = call i32 @find(i32 %102), !dbg !11539
  store i32 %call131, i32* %to, align 4, !dbg !11537
  %103 = load i32, i32* %to, align 4, !dbg !11540
  %call132 = call %struct.variable_info* @get_varinfo(i32 %103), !dbg !11541
  %solution133 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call132, i32 0, i32 8, !dbg !11542
  %104 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution133, align 8, !dbg !11542
  store %struct.bitmap_head_def* %104, %struct.bitmap_head_def** %tmp, align 8, !dbg !11543
  store i8 0, i8* %flag, align 1, !dbg !11544
  %105 = load i32, i32* %to, align 4, !dbg !11545
  %106 = load i32, i32* %i24, align 4, !dbg !11547
  %cmp134 = icmp eq i32 %105, %106, !dbg !11548
  br i1 %cmp134, label %if.then136, label %if.end137, !dbg !11549

if.then136:                                       ; preds = %for.body130
  br label %for.inc161, !dbg !11550

if.end137:                                        ; preds = %for.body130
  %107 = load i32, i32* %i24, align 4, !dbg !11551
  %108 = load i32, i32* %eff_escaped_id, align 4, !dbg !11553
  %cmp138 = icmp eq i32 %107, %108, !dbg !11554
  br i1 %cmp138, label %if.then140, label %if.else, !dbg !11555

if.then140:                                       ; preds = %if.end137
  %109 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !11556
  %call141 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %109, i32 3), !dbg !11557
  store i8 %call141, i8* %flag, align 1, !dbg !11558
  br label %if.end143, !dbg !11559

if.else:                                          ; preds = %if.end137
  %110 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !11560
  %111 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pts, align 8, !dbg !11561
  %call142 = call zeroext i8 @set_union_with_increment(%struct.bitmap_head_def* %110, %struct.bitmap_head_def* %111, i64 0), !dbg !11562
  store i8 %call142, i8* %flag, align 1, !dbg !11563
  br label %if.end143

if.end143:                                        ; preds = %if.else, %if.then140
  %112 = load i8, i8* %flag, align 1, !dbg !11564
  %tobool144 = icmp ne i8 %112, 0, !dbg !11564
  br i1 %tobool144, label %if.then145, label %if.end160, !dbg !11566

if.then145:                                       ; preds = %if.end143
  %113 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !11567
  %114 = load i32, i32* %to, align 4, !dbg !11569
  %call146 = call %struct.variable_info* @get_varinfo(i32 %114), !dbg !11570
  %solution147 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call146, i32 0, i32 8, !dbg !11571
  store %struct.bitmap_head_def* %113, %struct.bitmap_head_def** %solution147, align 8, !dbg !11572
  %115 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !11573
  %elms148 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %115, i32 0, i32 3, !dbg !11573
  %116 = load i32, i32* %to, align 4, !dbg !11573
  %div149 = udiv i32 %116, 64, !dbg !11573
  %idxprom150 = zext i32 %div149 to i64, !dbg !11573
  %arrayidx151 = getelementptr inbounds [1 x i64], [1 x i64]* %elms148, i64 0, i64 %idxprom150, !dbg !11573
  %117 = load i64, i64* %arrayidx151, align 8, !dbg !11573
  %118 = load i32, i32* %to, align 4, !dbg !11573
  %rem152 = urem i32 %118, 64, !dbg !11573
  %sh_prom153 = zext i32 %rem152 to i64, !dbg !11573
  %shr154 = lshr i64 %117, %sh_prom153, !dbg !11573
  %and155 = and i64 %shr154, 1, !dbg !11573
  %tobool156 = icmp ne i64 %and155, 0, !dbg !11573
  br i1 %tobool156, label %if.end159, label %if.then157, !dbg !11575

if.then157:                                       ; preds = %if.then145
  %119 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !11576
  %120 = load i32, i32* %to, align 4, !dbg !11578
  call void @SET_BIT(%struct.simple_bitmap_def* %119, i32 %120), !dbg !11579
  %121 = load i32, i32* @changed_count, align 4, !dbg !11580
  %inc158 = add i32 %121, 1, !dbg !11580
  store i32 %inc158, i32* @changed_count, align 4, !dbg !11580
  br label %if.end159, !dbg !11581

if.end159:                                        ; preds = %if.then157, %if.then145
  br label %if.end160, !dbg !11582

if.end160:                                        ; preds = %if.end159, %if.end143
  br label %for.inc161, !dbg !11583

for.inc161:                                       ; preds = %if.end160, %if.then136
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !11529
  br label %for.cond127, !dbg !11529, !llvm.loop !11584

for.end162:                                       ; preds = %for.cond127
  br label %if.end163, !dbg !11585

if.end163:                                        ; preds = %for.end162, %if.then117
  br label %if.end164, !dbg !11586

if.end164:                                        ; preds = %if.end163, %for.end110
  br label %if.end165, !dbg !11587

if.end165:                                        ; preds = %if.end164, %if.end58
  br label %while.cond27, !dbg !11404, !llvm.loop !11417

while.end:                                        ; preds = %cond.end33
  %122 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !11588
  call void @free_topo_info(%struct.topo_info* %122), !dbg !11589
  call void @bitmap_obstack_release(%struct.bitmap_obstack* @iteration_obstack), !dbg !11590
  br label %while.cond, !dbg !11390, !llvm.loop !11591

while.end166:                                     ; preds = %while.cond
  %123 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pts, align 8, !dbg !11593
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %123), !dbg !11593
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %pts, align 8, !dbg !11593
  %124 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !11594
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %124, i32 0, i32 0, !dbg !11594
  %125 = load i8*, i8** %popcount, align 8, !dbg !11594
  call void @free(i8* %125), !dbg !11594
  %126 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !11594
  %127 = bitcast %struct.simple_bitmap_def* %126 to i8*, !dbg !11594
  call void @free(i8* %127), !dbg !11594
  call void @bitmap_obstack_release(%struct.bitmap_obstack* @oldpta_obstack), !dbg !11595
  ret void, !dbg !11596
}

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !11597 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !11600, metadata !DIExpression()), !dbg !11601
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !11602, metadata !DIExpression()), !dbg !11603
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !11604
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !11606
  %1 = load i8*, i8** %popcount, align 8, !dbg !11606
  %tobool = icmp ne i8* %1, null, !dbg !11604
  br i1 %tobool, label %if.then, label %if.end7, !dbg !11607

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !11608, metadata !DIExpression()), !dbg !11610
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !11611
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !11611
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !11611
  %div = udiv i32 %3, 64, !dbg !11611
  %idxprom = zext i32 %div to i64, !dbg !11611
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !11611
  %4 = load i64, i64* %arrayidx, align 8, !dbg !11611
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !11611
  %rem = urem i32 %5, 64, !dbg !11611
  %sh_prom = zext i32 %rem to i64, !dbg !11611
  %shr = lshr i64 %4, %sh_prom, !dbg !11611
  %and = and i64 %shr, 1, !dbg !11611
  %conv = trunc i64 %and to i8, !dbg !11611
  store i8 %conv, i8* %oldbit, align 1, !dbg !11612
  %6 = load i8, i8* %oldbit, align 1, !dbg !11613
  %tobool1 = icmp ne i8 %6, 0, !dbg !11613
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !11615

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !11616
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !11617
  %8 = load i8*, i8** %popcount3, align 8, !dbg !11617
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !11618
  %div4 = udiv i32 %9, 64, !dbg !11619
  %idxprom5 = zext i32 %div4 to i64, !dbg !11616
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !11616
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !11620
  %inc = add i8 %10, 1, !dbg !11620
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !11620
  br label %if.end, !dbg !11616

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !11621

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !11622
  %rem8 = urem i32 %11, 64, !dbg !11623
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !11624
  %shl = shl i64 1, %sh_prom9, !dbg !11624
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !11625
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !11626
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !11627
  %div11 = udiv i32 %13, 64, !dbg !11628
  %idxprom12 = zext i32 %div11 to i64, !dbg !11625
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !11625
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !11629
  %or = or i64 %14, %shl, !dbg !11629
  store i64 %or, i64* %arrayidx13, align 8, !dbg !11629
  ret void, !dbg !11630
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_pred_graph_edge(%struct.constraint_graph* %graph, i32 %to, i32 %from) #0 !dbg !11631 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %to.addr = alloca i32, align 4
  %from.addr = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !11634, metadata !DIExpression()), !dbg !11635
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !11636, metadata !DIExpression()), !dbg !11637
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !11638, metadata !DIExpression()), !dbg !11639
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11640
  %preds = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 3, !dbg !11642
  %1 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds, align 8, !dbg !11642
  %2 = load i32, i32* %to.addr, align 4, !dbg !11643
  %idxprom = zext i32 %2 to i64, !dbg !11640
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %1, i64 %idxprom, !dbg !11640
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !11640
  %tobool = icmp ne %struct.bitmap_head_def* %3, null, !dbg !11640
  br i1 %tobool, label %if.end, label %if.then, !dbg !11644

if.then:                                          ; preds = %entry
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !11645
  %4 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11646
  %preds1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %4, i32 0, i32 3, !dbg !11647
  %5 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds1, align 8, !dbg !11647
  %6 = load i32, i32* %to.addr, align 4, !dbg !11648
  %idxprom2 = zext i32 %6 to i64, !dbg !11646
  %arrayidx3 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %5, i64 %idxprom2, !dbg !11646
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %arrayidx3, align 8, !dbg !11649
  br label %if.end, !dbg !11646

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11650
  %preds4 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %7, i32 0, i32 3, !dbg !11651
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds4, align 8, !dbg !11651
  %9 = load i32, i32* %to.addr, align 4, !dbg !11652
  %idxprom5 = zext i32 %9 to i64, !dbg !11650
  %arrayidx6 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %8, i64 %idxprom5, !dbg !11650
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx6, align 8, !dbg !11650
  %11 = load i32, i32* %from.addr, align 4, !dbg !11653
  %call7 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %10, i32 %11), !dbg !11654
  ret void, !dbg !11655
}

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !11656 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !11657, metadata !DIExpression()), !dbg !11658
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !11659, metadata !DIExpression()), !dbg !11660
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !11661
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !11663
  %1 = load i8*, i8** %popcount, align 8, !dbg !11663
  %tobool = icmp ne i8* %1, null, !dbg !11661
  br i1 %tobool, label %if.then, label %if.end7, !dbg !11664

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !11665, metadata !DIExpression()), !dbg !11667
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !11668
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !11668
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !11668
  %div = udiv i32 %3, 64, !dbg !11668
  %idxprom = zext i32 %div to i64, !dbg !11668
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !11668
  %4 = load i64, i64* %arrayidx, align 8, !dbg !11668
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !11668
  %rem = urem i32 %5, 64, !dbg !11668
  %sh_prom = zext i32 %rem to i64, !dbg !11668
  %shr = lshr i64 %4, %sh_prom, !dbg !11668
  %and = and i64 %shr, 1, !dbg !11668
  %conv = trunc i64 %and to i8, !dbg !11668
  store i8 %conv, i8* %oldbit, align 1, !dbg !11669
  %6 = load i8, i8* %oldbit, align 1, !dbg !11670
  %tobool1 = icmp ne i8 %6, 0, !dbg !11670
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !11672

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !11673
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !11674
  %8 = load i8*, i8** %popcount3, align 8, !dbg !11674
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !11675
  %div4 = udiv i32 %9, 64, !dbg !11676
  %idxprom5 = zext i32 %div4 to i64, !dbg !11673
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !11673
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !11677
  %dec = add i8 %10, -1, !dbg !11677
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !11677
  br label %if.end, !dbg !11673

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !11678

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !11679
  %rem8 = urem i32 %11, 64, !dbg !11680
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !11681
  %shl = shl i64 1, %sh_prom9, !dbg !11681
  %neg = xor i64 %shl, -1, !dbg !11682
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !11683
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !11684
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !11685
  %div11 = udiv i32 %13, 64, !dbg !11686
  %idxprom12 = zext i32 %div11 to i64, !dbg !11683
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !11683
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !11687
  %and14 = and i64 %14, %neg, !dbg !11687
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !11687
  ret void, !dbg !11688
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_implicit_graph_edge(%struct.constraint_graph* %graph, i32 %to, i32 %from) #0 !dbg !11689 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %to.addr = alloca i32, align 4
  %from.addr = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !11690, metadata !DIExpression()), !dbg !11691
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !11692, metadata !DIExpression()), !dbg !11693
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !11694, metadata !DIExpression()), !dbg !11695
  %0 = load i32, i32* %to.addr, align 4, !dbg !11696
  %1 = load i32, i32* %from.addr, align 4, !dbg !11698
  %cmp = icmp eq i32 %0, %1, !dbg !11699
  br i1 %cmp, label %if.then, label %if.end, !dbg !11700

if.then:                                          ; preds = %entry
  br label %if.end12, !dbg !11701

if.end:                                           ; preds = %entry
  %2 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11702
  %implicit_preds = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %2, i32 0, i32 2, !dbg !11704
  %3 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds, align 8, !dbg !11704
  %4 = load i32, i32* %to.addr, align 4, !dbg !11705
  %idxprom = zext i32 %4 to i64, !dbg !11702
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, i64 %idxprom, !dbg !11702
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !11702
  %tobool = icmp ne %struct.bitmap_head_def* %5, null, !dbg !11702
  br i1 %tobool, label %if.end5, label %if.then1, !dbg !11706

if.then1:                                         ; preds = %if.end
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !11707
  %6 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11708
  %implicit_preds2 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %6, i32 0, i32 2, !dbg !11709
  %7 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds2, align 8, !dbg !11709
  %8 = load i32, i32* %to.addr, align 4, !dbg !11710
  %idxprom3 = zext i32 %8 to i64, !dbg !11708
  %arrayidx4 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %7, i64 %idxprom3, !dbg !11708
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %arrayidx4, align 8, !dbg !11711
  br label %if.end5, !dbg !11708

if.end5:                                          ; preds = %if.then1, %if.end
  %9 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11712
  %implicit_preds6 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %9, i32 0, i32 2, !dbg !11714
  %10 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds6, align 8, !dbg !11714
  %11 = load i32, i32* %to.addr, align 4, !dbg !11715
  %idxprom7 = zext i32 %11 to i64, !dbg !11712
  %arrayidx8 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %10, i64 %idxprom7, !dbg !11712
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx8, align 8, !dbg !11712
  %13 = load i32, i32* %from.addr, align 4, !dbg !11716
  %call9 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %12, i32 %13), !dbg !11717
  %tobool10 = icmp ne i8 %call9, 0, !dbg !11717
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !11718

if.then11:                                        ; preds = %if.end5
  %14 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 6), align 4, !dbg !11719
  %inc = add i32 %14, 1, !dbg !11719
  store i32 %inc, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 6), align 4, !dbg !11719
  br label %if.end12, !dbg !11720

if.end12:                                         ; preds = %if.then, %if.then11, %if.end5
  ret void, !dbg !11721
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.scc_info* @init_scc_info(i64 %size) #0 !dbg !11722 {
entry:
  %size.addr = alloca i64, align 8
  %si = alloca %struct.scc_info*, align 8
  %i = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !11725, metadata !DIExpression()), !dbg !11726
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si, metadata !11727, metadata !DIExpression()), !dbg !11728
  %call = call i8* @xmalloc(i64 48), !dbg !11729
  %0 = bitcast i8* %call to %struct.scc_info*, !dbg !11729
  store %struct.scc_info* %0, %struct.scc_info** %si, align 8, !dbg !11728
  call void @llvm.dbg.declare(metadata i64* %i, metadata !11730, metadata !DIExpression()), !dbg !11731
  %1 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11732
  %current_index = getelementptr inbounds %struct.scc_info, %struct.scc_info* %1, i32 0, i32 4, !dbg !11733
  store i32 0, i32* %current_index, align 8, !dbg !11734
  %2 = load i64, i64* %size.addr, align 8, !dbg !11735
  %conv = trunc i64 %2 to i32, !dbg !11735
  %call1 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %conv), !dbg !11736
  %3 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11737
  %visited = getelementptr inbounds %struct.scc_info, %struct.scc_info* %3, i32 0, i32 0, !dbg !11738
  store %struct.simple_bitmap_def* %call1, %struct.simple_bitmap_def** %visited, align 8, !dbg !11739
  %4 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11740
  %visited2 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %4, i32 0, i32 0, !dbg !11741
  %5 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited2, align 8, !dbg !11741
  call void @sbitmap_zero(%struct.simple_bitmap_def* %5), !dbg !11742
  %6 = load i64, i64* %size.addr, align 8, !dbg !11743
  %conv3 = trunc i64 %6 to i32, !dbg !11743
  %call4 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %conv3), !dbg !11744
  %7 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11745
  %deleted = getelementptr inbounds %struct.scc_info, %struct.scc_info* %7, i32 0, i32 1, !dbg !11746
  store %struct.simple_bitmap_def* %call4, %struct.simple_bitmap_def** %deleted, align 8, !dbg !11747
  %8 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11748
  %deleted5 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %8, i32 0, i32 1, !dbg !11749
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %deleted5, align 8, !dbg !11749
  call void @sbitmap_zero(%struct.simple_bitmap_def* %9), !dbg !11750
  %10 = load i64, i64* %size.addr, align 8, !dbg !11751
  %mul = mul i64 4, %10, !dbg !11751
  %call6 = call i8* @xmalloc(i64 %mul), !dbg !11751
  %11 = bitcast i8* %call6 to i32*, !dbg !11751
  %12 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11752
  %node_mapping = getelementptr inbounds %struct.scc_info, %struct.scc_info* %12, i32 0, i32 3, !dbg !11753
  store i32* %11, i32** %node_mapping, align 8, !dbg !11754
  %13 = load i64, i64* %size.addr, align 8, !dbg !11755
  %call7 = call i8* @xcalloc(i64 %13, i64 4), !dbg !11755
  %14 = bitcast i8* %call7 to i32*, !dbg !11755
  %15 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11756
  %dfs = getelementptr inbounds %struct.scc_info, %struct.scc_info* %15, i32 0, i32 2, !dbg !11757
  store i32* %14, i32** %dfs, align 8, !dbg !11758
  store i64 0, i64* %i, align 8, !dbg !11759
  br label %for.cond, !dbg !11761

for.cond:                                         ; preds = %for.inc, %entry
  %16 = load i64, i64* %i, align 8, !dbg !11762
  %17 = load i64, i64* %size.addr, align 8, !dbg !11764
  %cmp = icmp ult i64 %16, %17, !dbg !11765
  br i1 %cmp, label %for.body, label %for.end, !dbg !11766

for.body:                                         ; preds = %for.cond
  %18 = load i64, i64* %i, align 8, !dbg !11767
  %conv9 = trunc i64 %18 to i32, !dbg !11767
  %19 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11768
  %node_mapping10 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %19, i32 0, i32 3, !dbg !11769
  %20 = load i32*, i32** %node_mapping10, align 8, !dbg !11769
  %21 = load i64, i64* %i, align 8, !dbg !11770
  %arrayidx = getelementptr inbounds i32, i32* %20, i64 %21, !dbg !11768
  store i32 %conv9, i32* %arrayidx, align 4, !dbg !11771
  br label %for.inc, !dbg !11768

for.inc:                                          ; preds = %for.body
  %22 = load i64, i64* %i, align 8, !dbg !11772
  %inc = add i64 %22, 1, !dbg !11772
  store i64 %inc, i64* %i, align 8, !dbg !11772
  br label %for.cond, !dbg !11773, !llvm.loop !11774

for.end:                                          ; preds = %for.cond
  %call11 = call %struct.VEC_unsigned_heap* @VEC_unsigned_heap_alloc(i32 1), !dbg !11776
  %23 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11777
  %scc_stack = getelementptr inbounds %struct.scc_info, %struct.scc_info* %23, i32 0, i32 5, !dbg !11778
  store %struct.VEC_unsigned_heap* %call11, %struct.VEC_unsigned_heap** %scc_stack, align 8, !dbg !11779
  %24 = load %struct.scc_info*, %struct.scc_info** %si, align 8, !dbg !11780
  ret %struct.scc_info* %24, !dbg !11781
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @equiv_class_label_hash(i8* %p) #0 !dbg !11782 {
entry:
  %p.addr = alloca i8*, align 8
  %ecl = alloca %struct.equiv_class_label*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !11783, metadata !DIExpression()), !dbg !11784
  call void @llvm.dbg.declare(metadata %struct.equiv_class_label** %ecl, metadata !11785, metadata !DIExpression()), !dbg !11787
  %0 = load i8*, i8** %p.addr, align 8, !dbg !11788
  %1 = bitcast i8* %0 to %struct.equiv_class_label*, !dbg !11789
  store %struct.equiv_class_label* %1, %struct.equiv_class_label** %ecl, align 8, !dbg !11787
  %2 = load %struct.equiv_class_label*, %struct.equiv_class_label** %ecl, align 8, !dbg !11790
  %hashcode = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %2, i32 0, i32 0, !dbg !11791
  %3 = load i32, i32* %hashcode, align 8, !dbg !11791
  ret i32 %3, !dbg !11792
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @equiv_class_label_eq(i8* %p1, i8* %p2) #0 !dbg !11793 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %eql1 = alloca %struct.equiv_class_label*, align 8
  %eql2 = alloca %struct.equiv_class_label*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !11794, metadata !DIExpression()), !dbg !11795
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !11796, metadata !DIExpression()), !dbg !11797
  call void @llvm.dbg.declare(metadata %struct.equiv_class_label** %eql1, metadata !11798, metadata !DIExpression()), !dbg !11799
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !11800
  %1 = bitcast i8* %0 to %struct.equiv_class_label*, !dbg !11801
  store %struct.equiv_class_label* %1, %struct.equiv_class_label** %eql1, align 8, !dbg !11799
  call void @llvm.dbg.declare(metadata %struct.equiv_class_label** %eql2, metadata !11802, metadata !DIExpression()), !dbg !11803
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !11804
  %3 = bitcast i8* %2 to %struct.equiv_class_label*, !dbg !11805
  store %struct.equiv_class_label* %3, %struct.equiv_class_label** %eql2, align 8, !dbg !11803
  %4 = load %struct.equiv_class_label*, %struct.equiv_class_label** %eql1, align 8, !dbg !11806
  %hashcode = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %4, i32 0, i32 0, !dbg !11807
  %5 = load i32, i32* %hashcode, align 8, !dbg !11807
  %6 = load %struct.equiv_class_label*, %struct.equiv_class_label** %eql2, align 8, !dbg !11808
  %hashcode1 = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %6, i32 0, i32 0, !dbg !11809
  %7 = load i32, i32* %hashcode1, align 8, !dbg !11809
  %cmp = icmp eq i32 %5, %7, !dbg !11810
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11811

land.rhs:                                         ; preds = %entry
  %8 = load %struct.equiv_class_label*, %struct.equiv_class_label** %eql1, align 8, !dbg !11812
  %labels = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %8, i32 0, i32 2, !dbg !11813
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %labels, align 8, !dbg !11813
  %10 = load %struct.equiv_class_label*, %struct.equiv_class_label** %eql2, align 8, !dbg !11814
  %labels2 = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %10, i32 0, i32 2, !dbg !11815
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %labels2, align 8, !dbg !11815
  %call = call zeroext i8 @bitmap_equal_p(%struct.bitmap_head_def* %9, %struct.bitmap_head_def* %11), !dbg !11816
  %conv = zext i8 %call to i32, !dbg !11816
  %tobool = icmp ne i32 %conv, 0, !dbg !11811
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ], !dbg !11817
  %land.ext = zext i1 %12 to i32, !dbg !11811
  ret i32 %land.ext, !dbg !11818
}

; Function Attrs: noinline nounwind uwtable
define internal void @condense_visit(%struct.constraint_graph* %graph, %struct.scc_info* %si, i32 %n) #0 !dbg !11819 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %si.addr = alloca %struct.scc_info*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %my_dfs = alloca i32, align 4
  %w = alloca i32, align 4
  %t = alloca i32, align 4
  %nnode = alloca i32, align 4
  %w69 = alloca i32, align 4
  %t97 = alloca i32, align 4
  %nnode101 = alloca i32, align 4
  %w154 = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !11822, metadata !DIExpression()), !dbg !11823
  store %struct.scc_info* %si, %struct.scc_info** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si.addr, metadata !11824, metadata !DIExpression()), !dbg !11825
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !11826, metadata !DIExpression()), !dbg !11827
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11828, metadata !DIExpression()), !dbg !11829
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !11830, metadata !DIExpression()), !dbg !11831
  call void @llvm.dbg.declare(metadata i32* %my_dfs, metadata !11832, metadata !DIExpression()), !dbg !11833
  %0 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11834
  %node_mapping = getelementptr inbounds %struct.scc_info, %struct.scc_info* %0, i32 0, i32 3, !dbg !11834
  %1 = load i32*, i32** %node_mapping, align 8, !dbg !11834
  %2 = load i32, i32* %n.addr, align 4, !dbg !11834
  %idxprom = zext i32 %2 to i64, !dbg !11834
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !11834
  %3 = load i32, i32* %arrayidx, align 4, !dbg !11834
  %4 = load i32, i32* %n.addr, align 4, !dbg !11834
  %cmp = icmp eq i32 %3, %4, !dbg !11834
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11834

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1979, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !11834
  br label %cond.end, !dbg !11834

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11834

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11834
  %5 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11835
  %visited = getelementptr inbounds %struct.scc_info, %struct.scc_info* %5, i32 0, i32 0, !dbg !11836
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !11836
  %7 = load i32, i32* %n.addr, align 4, !dbg !11837
  call void @SET_BIT(%struct.simple_bitmap_def* %6, i32 %7), !dbg !11838
  %8 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11839
  %current_index = getelementptr inbounds %struct.scc_info, %struct.scc_info* %8, i32 0, i32 4, !dbg !11840
  %9 = load i32, i32* %current_index, align 8, !dbg !11841
  %inc = add nsw i32 %9, 1, !dbg !11841
  store i32 %inc, i32* %current_index, align 8, !dbg !11841
  %10 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11842
  %dfs = getelementptr inbounds %struct.scc_info, %struct.scc_info* %10, i32 0, i32 2, !dbg !11843
  %11 = load i32*, i32** %dfs, align 8, !dbg !11843
  %12 = load i32, i32* %n.addr, align 4, !dbg !11844
  %idxprom1 = zext i32 %12 to i64, !dbg !11842
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i64 %idxprom1, !dbg !11842
  store i32 %9, i32* %arrayidx2, align 4, !dbg !11845
  %13 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11846
  %dfs3 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %13, i32 0, i32 2, !dbg !11847
  %14 = load i32*, i32** %dfs3, align 8, !dbg !11847
  %15 = load i32, i32* %n.addr, align 4, !dbg !11848
  %idxprom4 = zext i32 %15 to i64, !dbg !11846
  %arrayidx5 = getelementptr inbounds i32, i32* %14, i64 %idxprom4, !dbg !11846
  %16 = load i32, i32* %arrayidx5, align 4, !dbg !11846
  store i32 %16, i32* %my_dfs, align 4, !dbg !11849
  %17 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11850
  %preds = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %17, i32 0, i32 3, !dbg !11850
  %18 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds, align 8, !dbg !11850
  %19 = load i32, i32* %n.addr, align 4, !dbg !11850
  %idxprom6 = zext i32 %19 to i64, !dbg !11850
  %arrayidx7 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %18, i64 %idxprom6, !dbg !11850
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx7, align 8, !dbg !11850
  %tobool = icmp ne %struct.bitmap_head_def* %20, null, !dbg !11850
  br i1 %tobool, label %if.then, label %if.end57, !dbg !11852

if.then:                                          ; preds = %cond.end
  %21 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11853
  %preds8 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %21, i32 0, i32 3, !dbg !11853
  %22 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds8, align 8, !dbg !11853
  %23 = load i32, i32* %n.addr, align 4, !dbg !11853
  %idxprom9 = zext i32 %23 to i64, !dbg !11853
  %arrayidx10 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %22, i64 %idxprom9, !dbg !11853
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx10, align 8, !dbg !11853
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %24, i32 0, i32* %i), !dbg !11853
  br label %for.cond, !dbg !11853

for.cond:                                         ; preds = %for.inc, %if.then
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !11855
  %tobool11 = icmp ne i8 %call, 0, !dbg !11853
  br i1 %tobool11, label %for.body, label %for.end, !dbg !11853

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %w, metadata !11857, metadata !DIExpression()), !dbg !11859
  %25 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11860
  %node_mapping12 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %25, i32 0, i32 3, !dbg !11861
  %26 = load i32*, i32** %node_mapping12, align 8, !dbg !11861
  %27 = load i32, i32* %i, align 4, !dbg !11862
  %idxprom13 = zext i32 %27 to i64, !dbg !11860
  %arrayidx14 = getelementptr inbounds i32, i32* %26, i64 %idxprom13, !dbg !11860
  %28 = load i32, i32* %arrayidx14, align 4, !dbg !11860
  store i32 %28, i32* %w, align 4, !dbg !11859
  %29 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11863
  %deleted = getelementptr inbounds %struct.scc_info, %struct.scc_info* %29, i32 0, i32 1, !dbg !11863
  %30 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %deleted, align 8, !dbg !11863
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %30, i32 0, i32 3, !dbg !11863
  %31 = load i32, i32* %w, align 4, !dbg !11863
  %div = udiv i32 %31, 64, !dbg !11863
  %idxprom15 = zext i32 %div to i64, !dbg !11863
  %arrayidx16 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom15, !dbg !11863
  %32 = load i64, i64* %arrayidx16, align 8, !dbg !11863
  %33 = load i32, i32* %w, align 4, !dbg !11863
  %rem = urem i32 %33, 64, !dbg !11863
  %sh_prom = zext i32 %rem to i64, !dbg !11863
  %shr = lshr i64 %32, %sh_prom, !dbg !11863
  %and = and i64 %shr, 1, !dbg !11863
  %tobool17 = icmp ne i64 %and, 0, !dbg !11863
  br i1 %tobool17, label %if.then18, label %if.end, !dbg !11865

if.then18:                                        ; preds = %for.body
  br label %for.inc, !dbg !11866

if.end:                                           ; preds = %for.body
  %34 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11867
  %visited19 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %34, i32 0, i32 0, !dbg !11867
  %35 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited19, align 8, !dbg !11867
  %elms20 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %35, i32 0, i32 3, !dbg !11867
  %36 = load i32, i32* %w, align 4, !dbg !11867
  %div21 = udiv i32 %36, 64, !dbg !11867
  %idxprom22 = zext i32 %div21 to i64, !dbg !11867
  %arrayidx23 = getelementptr inbounds [1 x i64], [1 x i64]* %elms20, i64 0, i64 %idxprom22, !dbg !11867
  %37 = load i64, i64* %arrayidx23, align 8, !dbg !11867
  %38 = load i32, i32* %w, align 4, !dbg !11867
  %rem24 = urem i32 %38, 64, !dbg !11867
  %sh_prom25 = zext i32 %rem24 to i64, !dbg !11867
  %shr26 = lshr i64 %37, %sh_prom25, !dbg !11867
  %and27 = and i64 %shr26, 1, !dbg !11867
  %tobool28 = icmp ne i64 %and27, 0, !dbg !11867
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !11869

if.then29:                                        ; preds = %if.end
  %39 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11870
  %40 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11871
  %41 = load i32, i32* %w, align 4, !dbg !11872
  call void @condense_visit(%struct.constraint_graph* %39, %struct.scc_info* %40, i32 %41), !dbg !11873
  br label %if.end30, !dbg !11873

if.end30:                                         ; preds = %if.then29, %if.end
  call void @llvm.dbg.declare(metadata i32* %t, metadata !11874, metadata !DIExpression()), !dbg !11876
  %42 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11877
  %node_mapping31 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %42, i32 0, i32 3, !dbg !11878
  %43 = load i32*, i32** %node_mapping31, align 8, !dbg !11878
  %44 = load i32, i32* %w, align 4, !dbg !11879
  %idxprom32 = zext i32 %44 to i64, !dbg !11877
  %arrayidx33 = getelementptr inbounds i32, i32* %43, i64 %idxprom32, !dbg !11877
  %45 = load i32, i32* %arrayidx33, align 4, !dbg !11877
  store i32 %45, i32* %t, align 4, !dbg !11876
  call void @llvm.dbg.declare(metadata i32* %nnode, metadata !11880, metadata !DIExpression()), !dbg !11881
  %46 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11882
  %node_mapping34 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %46, i32 0, i32 3, !dbg !11883
  %47 = load i32*, i32** %node_mapping34, align 8, !dbg !11883
  %48 = load i32, i32* %n.addr, align 4, !dbg !11884
  %idxprom35 = zext i32 %48 to i64, !dbg !11882
  %arrayidx36 = getelementptr inbounds i32, i32* %47, i64 %idxprom35, !dbg !11882
  %49 = load i32, i32* %arrayidx36, align 4, !dbg !11882
  store i32 %49, i32* %nnode, align 4, !dbg !11881
  %50 = load i32, i32* %nnode, align 4, !dbg !11885
  %51 = load i32, i32* %n.addr, align 4, !dbg !11885
  %cmp37 = icmp eq i32 %50, %51, !dbg !11885
  br i1 %cmp37, label %cond.false39, label %cond.true38, !dbg !11885

cond.true38:                                      ; preds = %if.end30
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1997, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !11885
  br label %cond.end40, !dbg !11885

cond.false39:                                     ; preds = %if.end30
  br label %cond.end40, !dbg !11885

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !11885
  %52 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11886
  %dfs42 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %52, i32 0, i32 2, !dbg !11888
  %53 = load i32*, i32** %dfs42, align 8, !dbg !11888
  %54 = load i32, i32* %t, align 4, !dbg !11889
  %idxprom43 = zext i32 %54 to i64, !dbg !11886
  %arrayidx44 = getelementptr inbounds i32, i32* %53, i64 %idxprom43, !dbg !11886
  %55 = load i32, i32* %arrayidx44, align 4, !dbg !11886
  %56 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11890
  %dfs45 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %56, i32 0, i32 2, !dbg !11891
  %57 = load i32*, i32** %dfs45, align 8, !dbg !11891
  %58 = load i32, i32* %nnode, align 4, !dbg !11892
  %idxprom46 = zext i32 %58 to i64, !dbg !11890
  %arrayidx47 = getelementptr inbounds i32, i32* %57, i64 %idxprom46, !dbg !11890
  %59 = load i32, i32* %arrayidx47, align 4, !dbg !11890
  %cmp48 = icmp ult i32 %55, %59, !dbg !11893
  br i1 %cmp48, label %if.then49, label %if.end56, !dbg !11894

if.then49:                                        ; preds = %cond.end40
  %60 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11895
  %dfs50 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %60, i32 0, i32 2, !dbg !11896
  %61 = load i32*, i32** %dfs50, align 8, !dbg !11896
  %62 = load i32, i32* %t, align 4, !dbg !11897
  %idxprom51 = zext i32 %62 to i64, !dbg !11895
  %arrayidx52 = getelementptr inbounds i32, i32* %61, i64 %idxprom51, !dbg !11895
  %63 = load i32, i32* %arrayidx52, align 4, !dbg !11895
  %64 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11898
  %dfs53 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %64, i32 0, i32 2, !dbg !11899
  %65 = load i32*, i32** %dfs53, align 8, !dbg !11899
  %66 = load i32, i32* %n.addr, align 4, !dbg !11900
  %idxprom54 = zext i32 %66 to i64, !dbg !11898
  %arrayidx55 = getelementptr inbounds i32, i32* %65, i64 %idxprom54, !dbg !11898
  store i32 %63, i32* %arrayidx55, align 4, !dbg !11901
  br label %if.end56, !dbg !11898

if.end56:                                         ; preds = %if.then49, %cond.end40
  br label %for.inc, !dbg !11902

for.inc:                                          ; preds = %if.end56, %if.then18
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !11855
  br label %for.cond, !dbg !11855, !llvm.loop !11903

for.end:                                          ; preds = %for.cond
  br label %if.end57, !dbg !11904

if.end57:                                         ; preds = %for.end, %cond.end
  %67 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11905
  %implicit_preds = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %67, i32 0, i32 2, !dbg !11905
  %68 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds, align 8, !dbg !11905
  %69 = load i32, i32* %n.addr, align 4, !dbg !11905
  %idxprom58 = zext i32 %69 to i64, !dbg !11905
  %arrayidx59 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %68, i64 %idxprom58, !dbg !11905
  %70 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx59, align 8, !dbg !11905
  %tobool60 = icmp ne %struct.bitmap_head_def* %70, null, !dbg !11905
  br i1 %tobool60, label %if.then61, label %if.end127, !dbg !11907

if.then61:                                        ; preds = %if.end57
  %71 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11908
  %implicit_preds62 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %71, i32 0, i32 2, !dbg !11908
  %72 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds62, align 8, !dbg !11908
  %73 = load i32, i32* %n.addr, align 4, !dbg !11908
  %idxprom63 = zext i32 %73 to i64, !dbg !11908
  %arrayidx64 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %72, i64 %idxprom63, !dbg !11908
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx64, align 8, !dbg !11908
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %74, i32 0, i32* %i), !dbg !11908
  br label %for.cond65, !dbg !11908

for.cond65:                                       ; preds = %for.inc125, %if.then61
  %call66 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !11910
  %tobool67 = icmp ne i8 %call66, 0, !dbg !11908
  br i1 %tobool67, label %for.body68, label %for.end126, !dbg !11908

for.body68:                                       ; preds = %for.cond65
  call void @llvm.dbg.declare(metadata i32* %w69, metadata !11912, metadata !DIExpression()), !dbg !11914
  %75 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11915
  %node_mapping70 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %75, i32 0, i32 3, !dbg !11916
  %76 = load i32*, i32** %node_mapping70, align 8, !dbg !11916
  %77 = load i32, i32* %i, align 4, !dbg !11917
  %idxprom71 = zext i32 %77 to i64, !dbg !11915
  %arrayidx72 = getelementptr inbounds i32, i32* %76, i64 %idxprom71, !dbg !11915
  %78 = load i32, i32* %arrayidx72, align 4, !dbg !11915
  store i32 %78, i32* %w69, align 4, !dbg !11914
  %79 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11918
  %deleted73 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %79, i32 0, i32 1, !dbg !11918
  %80 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %deleted73, align 8, !dbg !11918
  %elms74 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %80, i32 0, i32 3, !dbg !11918
  %81 = load i32, i32* %w69, align 4, !dbg !11918
  %div75 = udiv i32 %81, 64, !dbg !11918
  %idxprom76 = zext i32 %div75 to i64, !dbg !11918
  %arrayidx77 = getelementptr inbounds [1 x i64], [1 x i64]* %elms74, i64 0, i64 %idxprom76, !dbg !11918
  %82 = load i64, i64* %arrayidx77, align 8, !dbg !11918
  %83 = load i32, i32* %w69, align 4, !dbg !11918
  %rem78 = urem i32 %83, 64, !dbg !11918
  %sh_prom79 = zext i32 %rem78 to i64, !dbg !11918
  %shr80 = lshr i64 %82, %sh_prom79, !dbg !11918
  %and81 = and i64 %shr80, 1, !dbg !11918
  %tobool82 = icmp ne i64 %and81, 0, !dbg !11918
  br i1 %tobool82, label %if.then83, label %if.end84, !dbg !11920

if.then83:                                        ; preds = %for.body68
  br label %for.inc125, !dbg !11921

if.end84:                                         ; preds = %for.body68
  %84 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11922
  %visited85 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %84, i32 0, i32 0, !dbg !11922
  %85 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited85, align 8, !dbg !11922
  %elms86 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %85, i32 0, i32 3, !dbg !11922
  %86 = load i32, i32* %w69, align 4, !dbg !11922
  %div87 = udiv i32 %86, 64, !dbg !11922
  %idxprom88 = zext i32 %div87 to i64, !dbg !11922
  %arrayidx89 = getelementptr inbounds [1 x i64], [1 x i64]* %elms86, i64 0, i64 %idxprom88, !dbg !11922
  %87 = load i64, i64* %arrayidx89, align 8, !dbg !11922
  %88 = load i32, i32* %w69, align 4, !dbg !11922
  %rem90 = urem i32 %88, 64, !dbg !11922
  %sh_prom91 = zext i32 %rem90 to i64, !dbg !11922
  %shr92 = lshr i64 %87, %sh_prom91, !dbg !11922
  %and93 = and i64 %shr92, 1, !dbg !11922
  %tobool94 = icmp ne i64 %and93, 0, !dbg !11922
  br i1 %tobool94, label %if.end96, label %if.then95, !dbg !11924

if.then95:                                        ; preds = %if.end84
  %89 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11925
  %90 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11926
  %91 = load i32, i32* %w69, align 4, !dbg !11927
  call void @condense_visit(%struct.constraint_graph* %89, %struct.scc_info* %90, i32 %91), !dbg !11928
  br label %if.end96, !dbg !11928

if.end96:                                         ; preds = %if.then95, %if.end84
  call void @llvm.dbg.declare(metadata i32* %t97, metadata !11929, metadata !DIExpression()), !dbg !11931
  %92 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11932
  %node_mapping98 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %92, i32 0, i32 3, !dbg !11933
  %93 = load i32*, i32** %node_mapping98, align 8, !dbg !11933
  %94 = load i32, i32* %w69, align 4, !dbg !11934
  %idxprom99 = zext i32 %94 to i64, !dbg !11932
  %arrayidx100 = getelementptr inbounds i32, i32* %93, i64 %idxprom99, !dbg !11932
  %95 = load i32, i32* %arrayidx100, align 4, !dbg !11932
  store i32 %95, i32* %t97, align 4, !dbg !11931
  call void @llvm.dbg.declare(metadata i32* %nnode101, metadata !11935, metadata !DIExpression()), !dbg !11936
  %96 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11937
  %node_mapping102 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %96, i32 0, i32 3, !dbg !11938
  %97 = load i32*, i32** %node_mapping102, align 8, !dbg !11938
  %98 = load i32, i32* %n.addr, align 4, !dbg !11939
  %idxprom103 = zext i32 %98 to i64, !dbg !11937
  %arrayidx104 = getelementptr inbounds i32, i32* %97, i64 %idxprom103, !dbg !11937
  %99 = load i32, i32* %arrayidx104, align 4, !dbg !11937
  store i32 %99, i32* %nnode101, align 4, !dbg !11936
  %100 = load i32, i32* %nnode101, align 4, !dbg !11940
  %101 = load i32, i32* %n.addr, align 4, !dbg !11940
  %cmp105 = icmp eq i32 %100, %101, !dbg !11940
  br i1 %cmp105, label %cond.false107, label %cond.true106, !dbg !11940

cond.true106:                                     ; preds = %if.end96
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2017, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !11940
  br label %cond.end108, !dbg !11940

cond.false107:                                    ; preds = %if.end96
  br label %cond.end108, !dbg !11940

cond.end108:                                      ; preds = %cond.false107, %cond.true106
  %cond109 = phi i32 [ 0, %cond.true106 ], [ 0, %cond.false107 ], !dbg !11940
  %102 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11941
  %dfs110 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %102, i32 0, i32 2, !dbg !11943
  %103 = load i32*, i32** %dfs110, align 8, !dbg !11943
  %104 = load i32, i32* %t97, align 4, !dbg !11944
  %idxprom111 = zext i32 %104 to i64, !dbg !11941
  %arrayidx112 = getelementptr inbounds i32, i32* %103, i64 %idxprom111, !dbg !11941
  %105 = load i32, i32* %arrayidx112, align 4, !dbg !11941
  %106 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11945
  %dfs113 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %106, i32 0, i32 2, !dbg !11946
  %107 = load i32*, i32** %dfs113, align 8, !dbg !11946
  %108 = load i32, i32* %nnode101, align 4, !dbg !11947
  %idxprom114 = zext i32 %108 to i64, !dbg !11945
  %arrayidx115 = getelementptr inbounds i32, i32* %107, i64 %idxprom114, !dbg !11945
  %109 = load i32, i32* %arrayidx115, align 4, !dbg !11945
  %cmp116 = icmp ult i32 %105, %109, !dbg !11948
  br i1 %cmp116, label %if.then117, label %if.end124, !dbg !11949

if.then117:                                       ; preds = %cond.end108
  %110 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11950
  %dfs118 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %110, i32 0, i32 2, !dbg !11951
  %111 = load i32*, i32** %dfs118, align 8, !dbg !11951
  %112 = load i32, i32* %t97, align 4, !dbg !11952
  %idxprom119 = zext i32 %112 to i64, !dbg !11950
  %arrayidx120 = getelementptr inbounds i32, i32* %111, i64 %idxprom119, !dbg !11950
  %113 = load i32, i32* %arrayidx120, align 4, !dbg !11950
  %114 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11953
  %dfs121 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %114, i32 0, i32 2, !dbg !11954
  %115 = load i32*, i32** %dfs121, align 8, !dbg !11954
  %116 = load i32, i32* %n.addr, align 4, !dbg !11955
  %idxprom122 = zext i32 %116 to i64, !dbg !11953
  %arrayidx123 = getelementptr inbounds i32, i32* %115, i64 %idxprom122, !dbg !11953
  store i32 %113, i32* %arrayidx123, align 4, !dbg !11956
  br label %if.end124, !dbg !11953

if.end124:                                        ; preds = %if.then117, %cond.end108
  br label %for.inc125, !dbg !11957

for.inc125:                                       ; preds = %if.end124, %if.then83
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !11910
  br label %for.cond65, !dbg !11910, !llvm.loop !11958

for.end126:                                       ; preds = %for.cond65
  br label %if.end127, !dbg !11959

if.end127:                                        ; preds = %for.end126, %if.end57
  %117 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11960
  %dfs128 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %117, i32 0, i32 2, !dbg !11962
  %118 = load i32*, i32** %dfs128, align 8, !dbg !11962
  %119 = load i32, i32* %n.addr, align 4, !dbg !11963
  %idxprom129 = zext i32 %119 to i64, !dbg !11960
  %arrayidx130 = getelementptr inbounds i32, i32* %118, i64 %idxprom129, !dbg !11960
  %120 = load i32, i32* %arrayidx130, align 4, !dbg !11960
  %121 = load i32, i32* %my_dfs, align 4, !dbg !11964
  %cmp131 = icmp eq i32 %120, %121, !dbg !11965
  br i1 %cmp131, label %if.then132, label %if.else, !dbg !11966

if.then132:                                       ; preds = %if.end127
  br label %while.cond, !dbg !11967

while.cond:                                       ; preds = %if.end246, %if.then132
  %122 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11969
  %scc_stack = getelementptr inbounds %struct.scc_info, %struct.scc_info* %122, i32 0, i32 5, !dbg !11969
  %123 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack, align 8, !dbg !11969
  %tobool133 = icmp ne %struct.VEC_unsigned_heap* %123, null, !dbg !11969
  br i1 %tobool133, label %cond.true134, label %cond.false136, !dbg !11969

cond.true134:                                     ; preds = %while.cond
  %124 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11969
  %scc_stack135 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %124, i32 0, i32 5, !dbg !11969
  %125 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack135, align 8, !dbg !11969
  %base = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %125, i32 0, i32 0, !dbg !11969
  br label %cond.end137, !dbg !11969

cond.false136:                                    ; preds = %while.cond
  br label %cond.end137, !dbg !11969

cond.end137:                                      ; preds = %cond.false136, %cond.true134
  %cond138 = phi %struct.VEC_unsigned_base* [ %base, %cond.true134 ], [ null, %cond.false136 ], !dbg !11969
  %call139 = call i32 @VEC_unsigned_base_length(%struct.VEC_unsigned_base* %cond138), !dbg !11969
  %cmp140 = icmp ne i32 %call139, 0, !dbg !11970
  br i1 %cmp140, label %land.rhs, label %land.end, !dbg !11971

land.rhs:                                         ; preds = %cond.end137
  %126 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11972
  %dfs141 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %126, i32 0, i32 2, !dbg !11973
  %127 = load i32*, i32** %dfs141, align 8, !dbg !11973
  %128 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11974
  %scc_stack142 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %128, i32 0, i32 5, !dbg !11974
  %129 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack142, align 8, !dbg !11974
  %tobool143 = icmp ne %struct.VEC_unsigned_heap* %129, null, !dbg !11974
  br i1 %tobool143, label %cond.true144, label %cond.false147, !dbg !11974

cond.true144:                                     ; preds = %land.rhs
  %130 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11974
  %scc_stack145 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %130, i32 0, i32 5, !dbg !11974
  %131 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack145, align 8, !dbg !11974
  %base146 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %131, i32 0, i32 0, !dbg !11974
  br label %cond.end148, !dbg !11974

cond.false147:                                    ; preds = %land.rhs
  br label %cond.end148, !dbg !11974

cond.end148:                                      ; preds = %cond.false147, %cond.true144
  %cond149 = phi %struct.VEC_unsigned_base* [ %base146, %cond.true144 ], [ null, %cond.false147 ], !dbg !11974
  %call150 = call i32 @VEC_unsigned_base_last(%struct.VEC_unsigned_base* %cond149), !dbg !11974
  %idxprom151 = zext i32 %call150 to i64, !dbg !11972
  %arrayidx152 = getelementptr inbounds i32, i32* %127, i64 %idxprom151, !dbg !11972
  %132 = load i32, i32* %arrayidx152, align 4, !dbg !11972
  %133 = load i32, i32* %my_dfs, align 4, !dbg !11975
  %cmp153 = icmp uge i32 %132, %133, !dbg !11976
  br label %land.end

land.end:                                         ; preds = %cond.end148, %cond.end137
  %134 = phi i1 [ false, %cond.end137 ], [ %cmp153, %cond.end148 ], !dbg !11977
  br i1 %134, label %while.body, label %while.end, !dbg !11967

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %w154, metadata !11978, metadata !DIExpression()), !dbg !11980
  %135 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11981
  %scc_stack155 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %135, i32 0, i32 5, !dbg !11981
  %136 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack155, align 8, !dbg !11981
  %tobool156 = icmp ne %struct.VEC_unsigned_heap* %136, null, !dbg !11981
  br i1 %tobool156, label %cond.true157, label %cond.false160, !dbg !11981

cond.true157:                                     ; preds = %while.body
  %137 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11981
  %scc_stack158 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %137, i32 0, i32 5, !dbg !11981
  %138 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack158, align 8, !dbg !11981
  %base159 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %138, i32 0, i32 0, !dbg !11981
  br label %cond.end161, !dbg !11981

cond.false160:                                    ; preds = %while.body
  br label %cond.end161, !dbg !11981

cond.end161:                                      ; preds = %cond.false160, %cond.true157
  %cond162 = phi %struct.VEC_unsigned_base* [ %base159, %cond.true157 ], [ null, %cond.false160 ], !dbg !11981
  %call163 = call i32 @VEC_unsigned_base_pop(%struct.VEC_unsigned_base* %cond162), !dbg !11981
  store i32 %call163, i32* %w154, align 4, !dbg !11980
  %139 = load i32, i32* %n.addr, align 4, !dbg !11982
  %140 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !11983
  %node_mapping164 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %140, i32 0, i32 3, !dbg !11984
  %141 = load i32*, i32** %node_mapping164, align 8, !dbg !11984
  %142 = load i32, i32* %w154, align 4, !dbg !11985
  %idxprom165 = zext i32 %142 to i64, !dbg !11983
  %arrayidx166 = getelementptr inbounds i32, i32* %141, i64 %idxprom165, !dbg !11983
  store i32 %139, i32* %arrayidx166, align 4, !dbg !11986
  %143 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11987
  %direct_nodes = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %143, i32 0, i32 13, !dbg !11987
  %144 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes, align 8, !dbg !11987
  %elms167 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %144, i32 0, i32 3, !dbg !11987
  %145 = load i32, i32* %w154, align 4, !dbg !11987
  %div168 = udiv i32 %145, 64, !dbg !11987
  %idxprom169 = zext i32 %div168 to i64, !dbg !11987
  %arrayidx170 = getelementptr inbounds [1 x i64], [1 x i64]* %elms167, i64 0, i64 %idxprom169, !dbg !11987
  %146 = load i64, i64* %arrayidx170, align 8, !dbg !11987
  %147 = load i32, i32* %w154, align 4, !dbg !11987
  %rem171 = urem i32 %147, 64, !dbg !11987
  %sh_prom172 = zext i32 %rem171 to i64, !dbg !11987
  %shr173 = lshr i64 %146, %sh_prom172, !dbg !11987
  %and174 = and i64 %shr173, 1, !dbg !11987
  %tobool175 = icmp ne i64 %and174, 0, !dbg !11987
  br i1 %tobool175, label %if.end178, label %if.then176, !dbg !11989

if.then176:                                       ; preds = %cond.end161
  %148 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11990
  %direct_nodes177 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %148, i32 0, i32 13, !dbg !11991
  %149 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes177, align 8, !dbg !11991
  %150 = load i32, i32* %n.addr, align 4, !dbg !11992
  call void @RESET_BIT(%struct.simple_bitmap_def* %149, i32 %150), !dbg !11993
  br label %if.end178, !dbg !11993

if.end178:                                        ; preds = %if.then176, %cond.end161
  %151 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11994
  %preds179 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %151, i32 0, i32 3, !dbg !11996
  %152 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds179, align 8, !dbg !11996
  %153 = load i32, i32* %w154, align 4, !dbg !11997
  %idxprom180 = zext i32 %153 to i64, !dbg !11994
  %arrayidx181 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %152, i64 %idxprom180, !dbg !11994
  %154 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx181, align 8, !dbg !11994
  %tobool182 = icmp ne %struct.bitmap_head_def* %154, null, !dbg !11994
  br i1 %tobool182, label %if.then183, label %if.end201, !dbg !11998

if.then183:                                       ; preds = %if.end178
  %155 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !11999
  %preds184 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %155, i32 0, i32 3, !dbg !12002
  %156 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds184, align 8, !dbg !12002
  %157 = load i32, i32* %n.addr, align 4, !dbg !12003
  %idxprom185 = zext i32 %157 to i64, !dbg !11999
  %arrayidx186 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %156, i64 %idxprom185, !dbg !11999
  %158 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx186, align 8, !dbg !11999
  %tobool187 = icmp ne %struct.bitmap_head_def* %158, null, !dbg !11999
  br i1 %tobool187, label %if.end193, label %if.then188, !dbg !12004

if.then188:                                       ; preds = %if.then183
  %call189 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !12005
  %159 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12006
  %preds190 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %159, i32 0, i32 3, !dbg !12007
  %160 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds190, align 8, !dbg !12007
  %161 = load i32, i32* %n.addr, align 4, !dbg !12008
  %idxprom191 = zext i32 %161 to i64, !dbg !12006
  %arrayidx192 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %160, i64 %idxprom191, !dbg !12006
  store %struct.bitmap_head_def* %call189, %struct.bitmap_head_def** %arrayidx192, align 8, !dbg !12009
  br label %if.end193, !dbg !12006

if.end193:                                        ; preds = %if.then188, %if.then183
  %162 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12010
  %preds194 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %162, i32 0, i32 3, !dbg !12011
  %163 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds194, align 8, !dbg !12011
  %164 = load i32, i32* %n.addr, align 4, !dbg !12012
  %idxprom195 = zext i32 %164 to i64, !dbg !12010
  %arrayidx196 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %163, i64 %idxprom195, !dbg !12010
  %165 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx196, align 8, !dbg !12010
  %166 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12013
  %preds197 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %166, i32 0, i32 3, !dbg !12014
  %167 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds197, align 8, !dbg !12014
  %168 = load i32, i32* %w154, align 4, !dbg !12015
  %idxprom198 = zext i32 %168 to i64, !dbg !12013
  %arrayidx199 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %167, i64 %idxprom198, !dbg !12013
  %169 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx199, align 8, !dbg !12013
  %call200 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %165, %struct.bitmap_head_def* %169), !dbg !12016
  br label %if.end201, !dbg !12017

if.end201:                                        ; preds = %if.end193, %if.end178
  %170 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12018
  %implicit_preds202 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %170, i32 0, i32 2, !dbg !12020
  %171 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds202, align 8, !dbg !12020
  %172 = load i32, i32* %w154, align 4, !dbg !12021
  %idxprom203 = zext i32 %172 to i64, !dbg !12018
  %arrayidx204 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %171, i64 %idxprom203, !dbg !12018
  %173 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx204, align 8, !dbg !12018
  %tobool205 = icmp ne %struct.bitmap_head_def* %173, null, !dbg !12018
  br i1 %tobool205, label %if.then206, label %if.end224, !dbg !12022

if.then206:                                       ; preds = %if.end201
  %174 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12023
  %implicit_preds207 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %174, i32 0, i32 2, !dbg !12026
  %175 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds207, align 8, !dbg !12026
  %176 = load i32, i32* %n.addr, align 4, !dbg !12027
  %idxprom208 = zext i32 %176 to i64, !dbg !12023
  %arrayidx209 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %175, i64 %idxprom208, !dbg !12023
  %177 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx209, align 8, !dbg !12023
  %tobool210 = icmp ne %struct.bitmap_head_def* %177, null, !dbg !12023
  br i1 %tobool210, label %if.end216, label %if.then211, !dbg !12028

if.then211:                                       ; preds = %if.then206
  %call212 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !12029
  %178 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12030
  %implicit_preds213 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %178, i32 0, i32 2, !dbg !12031
  %179 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds213, align 8, !dbg !12031
  %180 = load i32, i32* %n.addr, align 4, !dbg !12032
  %idxprom214 = zext i32 %180 to i64, !dbg !12030
  %arrayidx215 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %179, i64 %idxprom214, !dbg !12030
  store %struct.bitmap_head_def* %call212, %struct.bitmap_head_def** %arrayidx215, align 8, !dbg !12033
  br label %if.end216, !dbg !12030

if.end216:                                        ; preds = %if.then211, %if.then206
  %181 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12034
  %implicit_preds217 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %181, i32 0, i32 2, !dbg !12035
  %182 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds217, align 8, !dbg !12035
  %183 = load i32, i32* %n.addr, align 4, !dbg !12036
  %idxprom218 = zext i32 %183 to i64, !dbg !12034
  %arrayidx219 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %182, i64 %idxprom218, !dbg !12034
  %184 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx219, align 8, !dbg !12034
  %185 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12037
  %implicit_preds220 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %185, i32 0, i32 2, !dbg !12038
  %186 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %implicit_preds220, align 8, !dbg !12038
  %187 = load i32, i32* %w154, align 4, !dbg !12039
  %idxprom221 = zext i32 %187 to i64, !dbg !12037
  %arrayidx222 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %186, i64 %idxprom221, !dbg !12037
  %188 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx222, align 8, !dbg !12037
  %call223 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %184, %struct.bitmap_head_def* %188), !dbg !12040
  br label %if.end224, !dbg !12041

if.end224:                                        ; preds = %if.end216, %if.end201
  %189 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12042
  %points_to = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %189, i32 0, i32 12, !dbg !12044
  %190 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to, align 8, !dbg !12044
  %191 = load i32, i32* %w154, align 4, !dbg !12045
  %idxprom225 = zext i32 %191 to i64, !dbg !12042
  %arrayidx226 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %190, i64 %idxprom225, !dbg !12042
  %192 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx226, align 8, !dbg !12042
  %tobool227 = icmp ne %struct.bitmap_head_def* %192, null, !dbg !12042
  br i1 %tobool227, label %if.then228, label %if.end246, !dbg !12046

if.then228:                                       ; preds = %if.end224
  %193 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12047
  %points_to229 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %193, i32 0, i32 12, !dbg !12050
  %194 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to229, align 8, !dbg !12050
  %195 = load i32, i32* %n.addr, align 4, !dbg !12051
  %idxprom230 = zext i32 %195 to i64, !dbg !12047
  %arrayidx231 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %194, i64 %idxprom230, !dbg !12047
  %196 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx231, align 8, !dbg !12047
  %tobool232 = icmp ne %struct.bitmap_head_def* %196, null, !dbg !12047
  br i1 %tobool232, label %if.end238, label %if.then233, !dbg !12052

if.then233:                                       ; preds = %if.then228
  %call234 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !12053
  %197 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12054
  %points_to235 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %197, i32 0, i32 12, !dbg !12055
  %198 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to235, align 8, !dbg !12055
  %199 = load i32, i32* %n.addr, align 4, !dbg !12056
  %idxprom236 = zext i32 %199 to i64, !dbg !12054
  %arrayidx237 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %198, i64 %idxprom236, !dbg !12054
  store %struct.bitmap_head_def* %call234, %struct.bitmap_head_def** %arrayidx237, align 8, !dbg !12057
  br label %if.end238, !dbg !12054

if.end238:                                        ; preds = %if.then233, %if.then228
  %200 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12058
  %points_to239 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %200, i32 0, i32 12, !dbg !12059
  %201 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to239, align 8, !dbg !12059
  %202 = load i32, i32* %n.addr, align 4, !dbg !12060
  %idxprom240 = zext i32 %202 to i64, !dbg !12058
  %arrayidx241 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %201, i64 %idxprom240, !dbg !12058
  %203 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx241, align 8, !dbg !12058
  %204 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12061
  %points_to242 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %204, i32 0, i32 12, !dbg !12062
  %205 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to242, align 8, !dbg !12062
  %206 = load i32, i32* %w154, align 4, !dbg !12063
  %idxprom243 = zext i32 %206 to i64, !dbg !12061
  %arrayidx244 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %205, i64 %idxprom243, !dbg !12061
  %207 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx244, align 8, !dbg !12061
  %call245 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %203, %struct.bitmap_head_def* %207), !dbg !12064
  br label %if.end246, !dbg !12065

if.end246:                                        ; preds = %if.end238, %if.end224
  br label %while.cond, !dbg !11967, !llvm.loop !12066

while.end:                                        ; preds = %land.end
  %208 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12068
  %deleted247 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %208, i32 0, i32 1, !dbg !12069
  %209 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %deleted247, align 8, !dbg !12069
  %210 = load i32, i32* %n.addr, align 4, !dbg !12070
  call void @SET_BIT(%struct.simple_bitmap_def* %209, i32 %210), !dbg !12071
  br label %if.end250, !dbg !12072

if.else:                                          ; preds = %if.end127
  %211 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12073
  %scc_stack248 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %211, i32 0, i32 5, !dbg !12073
  %212 = load i32, i32* %n.addr, align 4, !dbg !12073
  %call249 = call i32* @VEC_unsigned_heap_safe_push(%struct.VEC_unsigned_heap** %scc_stack248, i32 %212), !dbg !12073
  br label %if.end250

if.end250:                                        ; preds = %if.else, %while.end
  ret void, !dbg !12074
}

; Function Attrs: noinline nounwind uwtable
define internal void @label_visit(%struct.constraint_graph* %graph, %struct.scc_info* %si, i32 %n) #0 !dbg !12075 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %si.addr = alloca %struct.scc_info*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %w = alloca i32, align 4
  %label = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !12076, metadata !DIExpression()), !dbg !12077
  store %struct.scc_info* %si, %struct.scc_info** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si.addr, metadata !12078, metadata !DIExpression()), !dbg !12079
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !12080, metadata !DIExpression()), !dbg !12081
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12082, metadata !DIExpression()), !dbg !12083
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !12084, metadata !DIExpression()), !dbg !12085
  %0 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12086
  %visited = getelementptr inbounds %struct.scc_info, %struct.scc_info* %0, i32 0, i32 0, !dbg !12087
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !12087
  %2 = load i32, i32* %n.addr, align 4, !dbg !12088
  call void @SET_BIT(%struct.simple_bitmap_def* %1, i32 %2), !dbg !12089
  %3 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12090
  %points_to = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %3, i32 0, i32 12, !dbg !12092
  %4 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to, align 8, !dbg !12092
  %5 = load i32, i32* %n.addr, align 4, !dbg !12093
  %idxprom = zext i32 %5 to i64, !dbg !12090
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %4, i64 %idxprom, !dbg !12090
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !12090
  %tobool = icmp ne %struct.bitmap_head_def* %6, null, !dbg !12090
  br i1 %tobool, label %if.end, label %if.then, !dbg !12094

if.then:                                          ; preds = %entry
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @predbitmap_obstack), !dbg !12095
  %7 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12096
  %points_to1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %7, i32 0, i32 12, !dbg !12097
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to1, align 8, !dbg !12097
  %9 = load i32, i32* %n.addr, align 4, !dbg !12098
  %idxprom2 = zext i32 %9 to i64, !dbg !12096
  %arrayidx3 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %8, i64 %idxprom2, !dbg !12096
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %arrayidx3, align 8, !dbg !12099
  br label %if.end, !dbg !12096

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12100
  %preds = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %10, i32 0, i32 3, !dbg !12100
  %11 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds, align 8, !dbg !12100
  %12 = load i32, i32* %n.addr, align 4, !dbg !12100
  %idxprom4 = zext i32 %12 to i64, !dbg !12100
  %arrayidx5 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %11, i64 %idxprom4, !dbg !12100
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx5, align 8, !dbg !12100
  %tobool6 = icmp ne %struct.bitmap_head_def* %13, null, !dbg !12100
  br i1 %tobool6, label %if.then7, label %if.end39, !dbg !12102

if.then7:                                         ; preds = %if.end
  %14 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12103
  %preds8 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %14, i32 0, i32 3, !dbg !12103
  %15 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %preds8, align 8, !dbg !12103
  %16 = load i32, i32* %n.addr, align 4, !dbg !12103
  %idxprom9 = zext i32 %16 to i64, !dbg !12103
  %arrayidx10 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, i64 %idxprom9, !dbg !12103
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx10, align 8, !dbg !12103
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %17, i32 0, i32* %i), !dbg !12103
  br label %for.cond, !dbg !12103

for.cond:                                         ; preds = %for.inc, %if.then7
  %call11 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !12105
  %tobool12 = icmp ne i8 %call11, 0, !dbg !12103
  br i1 %tobool12, label %for.body, label %for.end, !dbg !12103

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %w, metadata !12107, metadata !DIExpression()), !dbg !12109
  %18 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12110
  %node_mapping = getelementptr inbounds %struct.scc_info, %struct.scc_info* %18, i32 0, i32 3, !dbg !12111
  %19 = load i32*, i32** %node_mapping, align 8, !dbg !12111
  %20 = load i32, i32* %i, align 4, !dbg !12112
  %idxprom13 = zext i32 %20 to i64, !dbg !12110
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i64 %idxprom13, !dbg !12110
  %21 = load i32, i32* %arrayidx14, align 4, !dbg !12110
  store i32 %21, i32* %w, align 4, !dbg !12109
  %22 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12113
  %visited15 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %22, i32 0, i32 0, !dbg !12113
  %23 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited15, align 8, !dbg !12113
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %23, i32 0, i32 3, !dbg !12113
  %24 = load i32, i32* %w, align 4, !dbg !12113
  %div = udiv i32 %24, 64, !dbg !12113
  %idxprom16 = zext i32 %div to i64, !dbg !12113
  %arrayidx17 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom16, !dbg !12113
  %25 = load i64, i64* %arrayidx17, align 8, !dbg !12113
  %26 = load i32, i32* %w, align 4, !dbg !12113
  %rem = urem i32 %26, 64, !dbg !12113
  %sh_prom = zext i32 %rem to i64, !dbg !12113
  %shr = lshr i64 %25, %sh_prom, !dbg !12113
  %and = and i64 %shr, 1, !dbg !12113
  %tobool18 = icmp ne i64 %and, 0, !dbg !12113
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !12115

if.then19:                                        ; preds = %for.body
  %27 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12116
  %28 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12117
  %29 = load i32, i32* %w, align 4, !dbg !12118
  call void @label_visit(%struct.constraint_graph* %27, %struct.scc_info* %28, i32 %29), !dbg !12119
  br label %if.end20, !dbg !12119

if.end20:                                         ; preds = %if.then19, %for.body
  %30 = load i32, i32* %w, align 4, !dbg !12120
  %31 = load i32, i32* %n.addr, align 4, !dbg !12122
  %cmp = icmp eq i32 %30, %31, !dbg !12123
  br i1 %cmp, label %if.then24, label %lor.lhs.false, !dbg !12124

lor.lhs.false:                                    ; preds = %if.end20
  %32 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12125
  %pointer_label = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %32, i32 0, i32 9, !dbg !12126
  %33 = load i32*, i32** %pointer_label, align 8, !dbg !12126
  %34 = load i32, i32* %w, align 4, !dbg !12127
  %idxprom21 = zext i32 %34 to i64, !dbg !12125
  %arrayidx22 = getelementptr inbounds i32, i32* %33, i64 %idxprom21, !dbg !12125
  %35 = load i32, i32* %arrayidx22, align 4, !dbg !12125
  %cmp23 = icmp eq i32 %35, 0, !dbg !12128
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !12129

if.then24:                                        ; preds = %lor.lhs.false, %if.end20
  br label %for.inc, !dbg !12130

if.end25:                                         ; preds = %lor.lhs.false
  %36 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12131
  %points_to26 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %36, i32 0, i32 12, !dbg !12133
  %37 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to26, align 8, !dbg !12133
  %38 = load i32, i32* %w, align 4, !dbg !12134
  %idxprom27 = zext i32 %38 to i64, !dbg !12131
  %arrayidx28 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %37, i64 %idxprom27, !dbg !12131
  %39 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx28, align 8, !dbg !12131
  %tobool29 = icmp ne %struct.bitmap_head_def* %39, null, !dbg !12131
  br i1 %tobool29, label %if.then30, label %if.end38, !dbg !12135

if.then30:                                        ; preds = %if.end25
  %40 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12136
  %points_to31 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %40, i32 0, i32 12, !dbg !12137
  %41 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to31, align 8, !dbg !12137
  %42 = load i32, i32* %n.addr, align 4, !dbg !12138
  %idxprom32 = zext i32 %42 to i64, !dbg !12136
  %arrayidx33 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %41, i64 %idxprom32, !dbg !12136
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx33, align 8, !dbg !12136
  %44 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12139
  %points_to34 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %44, i32 0, i32 12, !dbg !12140
  %45 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to34, align 8, !dbg !12140
  %46 = load i32, i32* %w, align 4, !dbg !12141
  %idxprom35 = zext i32 %46 to i64, !dbg !12139
  %arrayidx36 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %45, i64 %idxprom35, !dbg !12139
  %47 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx36, align 8, !dbg !12139
  %call37 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %43, %struct.bitmap_head_def* %47), !dbg !12142
  br label %if.end38, !dbg !12142

if.end38:                                         ; preds = %if.then30, %if.end25
  br label %for.inc, !dbg !12143

for.inc:                                          ; preds = %if.end38, %if.then24
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !12105
  br label %for.cond, !dbg !12105, !llvm.loop !12144

for.end:                                          ; preds = %for.cond
  br label %if.end39, !dbg !12145

if.end39:                                         ; preds = %for.end, %if.end
  %48 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12146
  %direct_nodes = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %48, i32 0, i32 13, !dbg !12146
  %49 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %direct_nodes, align 8, !dbg !12146
  %elms40 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %49, i32 0, i32 3, !dbg !12146
  %50 = load i32, i32* %n.addr, align 4, !dbg !12146
  %div41 = udiv i32 %50, 64, !dbg !12146
  %idxprom42 = zext i32 %div41 to i64, !dbg !12146
  %arrayidx43 = getelementptr inbounds [1 x i64], [1 x i64]* %elms40, i64 0, i64 %idxprom42, !dbg !12146
  %51 = load i64, i64* %arrayidx43, align 8, !dbg !12146
  %52 = load i32, i32* %n.addr, align 4, !dbg !12146
  %rem44 = urem i32 %52, 64, !dbg !12146
  %sh_prom45 = zext i32 %rem44 to i64, !dbg !12146
  %shr46 = lshr i64 %51, %sh_prom45, !dbg !12146
  %and47 = and i64 %shr46, 1, !dbg !12146
  %tobool48 = icmp ne i64 %and47, 0, !dbg !12146
  br i1 %tobool48, label %if.end56, label %if.then49, !dbg !12148

if.then49:                                        ; preds = %if.end39
  %53 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12149
  %points_to50 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %53, i32 0, i32 12, !dbg !12150
  %54 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to50, align 8, !dbg !12150
  %55 = load i32, i32* %n.addr, align 4, !dbg !12151
  %idxprom51 = zext i32 %55 to i64, !dbg !12149
  %arrayidx52 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %54, i64 %idxprom51, !dbg !12149
  %56 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx52, align 8, !dbg !12149
  %57 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !12152
  %tobool53 = icmp ne %struct.VEC_varinfo_t_heap* %57, null, !dbg !12152
  br i1 %tobool53, label %cond.true, label %cond.false, !dbg !12152

cond.true:                                        ; preds = %if.then49
  %58 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !12152
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %58, i32 0, i32 0, !dbg !12152
  br label %cond.end, !dbg !12152

cond.false:                                       ; preds = %if.then49
  br label %cond.end, !dbg !12152

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12152
  %call54 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !12152
  %59 = load i32, i32* %n.addr, align 4, !dbg !12153
  %add = add i32 %call54, %59, !dbg !12154
  %call55 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %56, i32 %add), !dbg !12155
  br label %if.end56, !dbg !12155

if.end56:                                         ; preds = %cond.end, %if.end39
  %60 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12156
  %points_to57 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %60, i32 0, i32 12, !dbg !12156
  %61 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to57, align 8, !dbg !12156
  %62 = load i32, i32* %n.addr, align 4, !dbg !12156
  %idxprom58 = zext i32 %62 to i64, !dbg !12156
  %arrayidx59 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %61, i64 %idxprom58, !dbg !12156
  %63 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx59, align 8, !dbg !12156
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %63, i32 0, i32 0, !dbg !12156
  %64 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !12156
  %tobool60 = icmp ne %struct.bitmap_element_def* %64, null, !dbg !12156
  br i1 %tobool60, label %if.then61, label %if.end75, !dbg !12158

if.then61:                                        ; preds = %if.end56
  call void @llvm.dbg.declare(metadata i32* %label, metadata !12159, metadata !DIExpression()), !dbg !12161
  %65 = load %struct.htab*, %struct.htab** @pointer_equiv_class_table, align 8, !dbg !12162
  %66 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12163
  %points_to62 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %66, i32 0, i32 12, !dbg !12164
  %67 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to62, align 8, !dbg !12164
  %68 = load i32, i32* %n.addr, align 4, !dbg !12165
  %idxprom63 = zext i32 %68 to i64, !dbg !12163
  %arrayidx64 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %67, i64 %idxprom63, !dbg !12163
  %69 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx64, align 8, !dbg !12163
  %call65 = call i32 @equiv_class_lookup(%struct.htab* %65, %struct.bitmap_head_def* %69), !dbg !12166
  store i32 %call65, i32* %label, align 4, !dbg !12161
  %70 = load i32, i32* %label, align 4, !dbg !12167
  %tobool66 = icmp ne i32 %70, 0, !dbg !12167
  br i1 %tobool66, label %if.end71, label %if.then67, !dbg !12169

if.then67:                                        ; preds = %if.then61
  %71 = load i32, i32* @pointer_equiv_class, align 4, !dbg !12170
  %inc = add nsw i32 %71, 1, !dbg !12170
  store i32 %inc, i32* @pointer_equiv_class, align 4, !dbg !12170
  store i32 %71, i32* %label, align 4, !dbg !12172
  %72 = load %struct.htab*, %struct.htab** @pointer_equiv_class_table, align 8, !dbg !12173
  %73 = load i32, i32* %label, align 4, !dbg !12174
  %74 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12175
  %points_to68 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %74, i32 0, i32 12, !dbg !12176
  %75 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %points_to68, align 8, !dbg !12176
  %76 = load i32, i32* %n.addr, align 4, !dbg !12177
  %idxprom69 = zext i32 %76 to i64, !dbg !12175
  %arrayidx70 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %75, i64 %idxprom69, !dbg !12175
  %77 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx70, align 8, !dbg !12175
  call void @equiv_class_add(%struct.htab* %72, i32 %73, %struct.bitmap_head_def* %77), !dbg !12178
  br label %if.end71, !dbg !12179

if.end71:                                         ; preds = %if.then67, %if.then61
  %78 = load i32, i32* %label, align 4, !dbg !12180
  %79 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12181
  %pointer_label72 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %79, i32 0, i32 9, !dbg !12182
  %80 = load i32*, i32** %pointer_label72, align 8, !dbg !12182
  %81 = load i32, i32* %n.addr, align 4, !dbg !12183
  %idxprom73 = zext i32 %81 to i64, !dbg !12181
  %arrayidx74 = getelementptr inbounds i32, i32* %80, i64 %idxprom73, !dbg !12181
  store i32 %78, i32* %arrayidx74, align 4, !dbg !12184
  br label %if.end75, !dbg !12185

if.end75:                                         ; preds = %if.end71, %if.end56
  ret void, !dbg !12186
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @equiv_class_lookup(%struct.htab* %table, %struct.bitmap_head_def* %labels) #0 !dbg !12187 {
entry:
  %retval = alloca i32, align 4
  %table.addr = alloca %struct.htab*, align 8
  %labels.addr = alloca %struct.bitmap_head_def*, align 8
  %slot = alloca i8**, align 8
  %ecl = alloca %struct.equiv_class_label, align 8
  store %struct.htab* %table, %struct.htab** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %table.addr, metadata !12190, metadata !DIExpression()), !dbg !12191
  store %struct.bitmap_head_def* %labels, %struct.bitmap_head_def** %labels.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %labels.addr, metadata !12192, metadata !DIExpression()), !dbg !12193
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !12194, metadata !DIExpression()), !dbg !12195
  call void @llvm.dbg.declare(metadata %struct.equiv_class_label* %ecl, metadata !12196, metadata !DIExpression()), !dbg !12197
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %labels.addr, align 8, !dbg !12198
  %labels1 = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %ecl, i32 0, i32 2, !dbg !12199
  store %struct.bitmap_head_def* %0, %struct.bitmap_head_def** %labels1, align 8, !dbg !12200
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %labels.addr, align 8, !dbg !12201
  %call = call i32 @bitmap_hash(%struct.bitmap_head_def* %1), !dbg !12202
  %hashcode = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %ecl, i32 0, i32 0, !dbg !12203
  store i32 %call, i32* %hashcode, align 8, !dbg !12204
  %2 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !12205
  %3 = bitcast %struct.equiv_class_label* %ecl to i8*, !dbg !12206
  %hashcode2 = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %ecl, i32 0, i32 0, !dbg !12207
  %4 = load i32, i32* %hashcode2, align 8, !dbg !12207
  %call3 = call i8** @htab_find_slot_with_hash(%struct.htab* %2, i8* %3, i32 %4, i32 0), !dbg !12208
  store i8** %call3, i8*** %slot, align 8, !dbg !12209
  %5 = load i8**, i8*** %slot, align 8, !dbg !12210
  %tobool = icmp ne i8** %5, null, !dbg !12210
  br i1 %tobool, label %if.else, label %if.then, !dbg !12212

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !12213
  br label %return, !dbg !12213

if.else:                                          ; preds = %entry
  %6 = load i8**, i8*** %slot, align 8, !dbg !12214
  %7 = load i8*, i8** %6, align 8, !dbg !12215
  %8 = bitcast i8* %7 to %struct.equiv_class_label*, !dbg !12216
  %equivalence_class = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %8, i32 0, i32 1, !dbg !12217
  %9 = load i32, i32* %equivalence_class, align 4, !dbg !12217
  store i32 %9, i32* %retval, align 4, !dbg !12218
  br label %return, !dbg !12218

return:                                           ; preds = %if.else, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !12219
  ret i32 %10, !dbg !12219
}

; Function Attrs: noinline nounwind uwtable
define internal void @equiv_class_add(%struct.htab* %table, i32 %equivalence_class, %struct.bitmap_head_def* %labels) #0 !dbg !12220 {
entry:
  %table.addr = alloca %struct.htab*, align 8
  %equivalence_class.addr = alloca i32, align 4
  %labels.addr = alloca %struct.bitmap_head_def*, align 8
  %slot = alloca i8**, align 8
  %ecl = alloca %struct.equiv_class_label*, align 8
  store %struct.htab* %table, %struct.htab** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %table.addr, metadata !12223, metadata !DIExpression()), !dbg !12224
  store i32 %equivalence_class, i32* %equivalence_class.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %equivalence_class.addr, metadata !12225, metadata !DIExpression()), !dbg !12226
  store %struct.bitmap_head_def* %labels, %struct.bitmap_head_def** %labels.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %labels.addr, metadata !12227, metadata !DIExpression()), !dbg !12228
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !12229, metadata !DIExpression()), !dbg !12230
  call void @llvm.dbg.declare(metadata %struct.equiv_class_label** %ecl, metadata !12231, metadata !DIExpression()), !dbg !12232
  %call = call i8* @xmalloc(i64 16), !dbg !12233
  %0 = bitcast i8* %call to %struct.equiv_class_label*, !dbg !12233
  store %struct.equiv_class_label* %0, %struct.equiv_class_label** %ecl, align 8, !dbg !12232
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %labels.addr, align 8, !dbg !12234
  %2 = load %struct.equiv_class_label*, %struct.equiv_class_label** %ecl, align 8, !dbg !12235
  %labels1 = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %2, i32 0, i32 2, !dbg !12236
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %labels1, align 8, !dbg !12237
  %3 = load i32, i32* %equivalence_class.addr, align 4, !dbg !12238
  %4 = load %struct.equiv_class_label*, %struct.equiv_class_label** %ecl, align 8, !dbg !12239
  %equivalence_class2 = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %4, i32 0, i32 1, !dbg !12240
  store i32 %3, i32* %equivalence_class2, align 4, !dbg !12241
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %labels.addr, align 8, !dbg !12242
  %call3 = call i32 @bitmap_hash(%struct.bitmap_head_def* %5), !dbg !12243
  %6 = load %struct.equiv_class_label*, %struct.equiv_class_label** %ecl, align 8, !dbg !12244
  %hashcode = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %6, i32 0, i32 0, !dbg !12245
  store i32 %call3, i32* %hashcode, align 8, !dbg !12246
  %7 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !12247
  %8 = load %struct.equiv_class_label*, %struct.equiv_class_label** %ecl, align 8, !dbg !12248
  %9 = bitcast %struct.equiv_class_label* %8 to i8*, !dbg !12248
  %10 = load %struct.equiv_class_label*, %struct.equiv_class_label** %ecl, align 8, !dbg !12249
  %hashcode4 = getelementptr inbounds %struct.equiv_class_label, %struct.equiv_class_label* %10, i32 0, i32 0, !dbg !12250
  %11 = load i32, i32* %hashcode4, align 8, !dbg !12250
  %call5 = call i8** @htab_find_slot_with_hash(%struct.htab* %7, i8* %9, i32 %11, i32 1), !dbg !12251
  store i8** %call5, i8*** %slot, align 8, !dbg !12252
  %12 = load i8**, i8*** %slot, align 8, !dbg !12253
  %13 = load i8*, i8** %12, align 8, !dbg !12253
  %tobool = icmp ne i8* %13, null, !dbg !12253
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12253

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1916, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !12253
  br label %cond.end, !dbg !12253

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12253

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12253
  %14 = load %struct.equiv_class_label*, %struct.equiv_class_label** %ecl, align 8, !dbg !12254
  %15 = bitcast %struct.equiv_class_label* %14 to i8*, !dbg !12255
  %16 = load i8**, i8*** %slot, align 8, !dbg !12256
  store i8* %15, i8** %16, align 8, !dbg !12257
  ret void, !dbg !12258
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_edges_for_node(%struct.constraint_graph* %graph, i32 %node) #0 !dbg !12259 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %node.addr = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !12262, metadata !DIExpression()), !dbg !12263
  store i32 %node, i32* %node.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %node.addr, metadata !12264, metadata !DIExpression()), !dbg !12265
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12266
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 1, !dbg !12268
  %1 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !12268
  %2 = load i32, i32* %node.addr, align 4, !dbg !12269
  %idxprom = zext i32 %2 to i64, !dbg !12266
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %1, i64 %idxprom, !dbg !12266
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !12266
  %tobool = icmp ne %struct.bitmap_head_def* %3, null, !dbg !12266
  br i1 %tobool, label %if.then, label %if.end, !dbg !12270

if.then:                                          ; preds = %entry
  %4 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12271
  %succs1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %4, i32 0, i32 1, !dbg !12271
  %5 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs1, align 8, !dbg !12271
  %6 = load i32, i32* %node.addr, align 4, !dbg !12271
  %idxprom2 = zext i32 %6 to i64, !dbg !12271
  %arrayidx3 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %5, i64 %idxprom2, !dbg !12271
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx3, align 8, !dbg !12271
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %7), !dbg !12271
  %8 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12271
  %succs4 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %8, i32 0, i32 1, !dbg !12271
  %9 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs4, align 8, !dbg !12271
  %10 = load i32, i32* %node.addr, align 4, !dbg !12271
  %idxprom5 = zext i32 %10 to i64, !dbg !12271
  %arrayidx6 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %9, i64 %idxprom5, !dbg !12271
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %arrayidx6, align 8, !dbg !12271
  br label %if.end, !dbg !12271

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !12272
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_unsigned_heap* @VEC_unsigned_heap_alloc(i32 %alloc_) #0 !dbg !12273 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12276, metadata !DIExpression()), !dbg !12277
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !12277
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !12277
  %1 = bitcast i8* %call to %struct.VEC_unsigned_heap*, !dbg !12277
  ret %struct.VEC_unsigned_heap* %1, !dbg !12277
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_base_length(%struct.VEC_unsigned_base* %vec_) #0 !dbg !12278 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !12283, metadata !DIExpression()), !dbg !12284
  %0 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12284
  %tobool = icmp ne %struct.VEC_unsigned_base* %0, null, !dbg !12284
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12284

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12284
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %1, i32 0, i32 0, !dbg !12284
  %2 = load i32, i32* %num, align 4, !dbg !12284
  br label %cond.end, !dbg !12284

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12284

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !12284
  ret i32 %cond, !dbg !12284
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_base_last(%struct.VEC_unsigned_base* %vec_) #0 !dbg !12285 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !12286, metadata !DIExpression()), !dbg !12287
  %0 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12287
  %tobool = icmp ne %struct.VEC_unsigned_base* %0, null, !dbg !12287
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12287

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12287
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %1, i32 0, i32 0, !dbg !12287
  %2 = load i32, i32* %num, align 4, !dbg !12287
  %tobool1 = icmp ne i32 %2, 0, !dbg !12287
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !12288
  %land.ext = zext i1 %3 to i32, !dbg !12287
  %4 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12287
  %vec = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %4, i32 0, i32 2, !dbg !12287
  %5 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12287
  %num2 = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %5, i32 0, i32 0, !dbg !12287
  %6 = load i32, i32* %num2, align 4, !dbg !12287
  %sub = sub i32 %6, 1, !dbg !12287
  %idxprom = zext i32 %sub to i64, !dbg !12287
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !12287
  %7 = load i32, i32* %arrayidx, align 4, !dbg !12287
  ret i32 %7, !dbg !12287
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_base_pop(%struct.VEC_unsigned_base* %vec_) #0 !dbg !12289 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  %obj_ = alloca i32, align 4
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !12293, metadata !DIExpression()), !dbg !12294
  call void @llvm.dbg.declare(metadata i32* %obj_, metadata !12295, metadata !DIExpression()), !dbg !12294
  %0 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12294
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %0, i32 0, i32 0, !dbg !12294
  %1 = load i32, i32* %num, align 4, !dbg !12294
  %2 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12294
  %vec = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %2, i32 0, i32 2, !dbg !12294
  %3 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12294
  %num1 = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %3, i32 0, i32 0, !dbg !12294
  %4 = load i32, i32* %num1, align 4, !dbg !12294
  %dec = add i32 %4, -1, !dbg !12294
  store i32 %dec, i32* %num1, align 4, !dbg !12294
  %idxprom = zext i32 %dec to i64, !dbg !12294
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !12294
  %5 = load i32, i32* %arrayidx, align 4, !dbg !12294
  store i32 %5, i32* %obj_, align 4, !dbg !12294
  %6 = load i32, i32* %obj_, align 4, !dbg !12294
  ret i32 %6, !dbg !12294
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_unsigned_heap_safe_push(%struct.VEC_unsigned_heap** %vec_, i32 %obj_) #0 !dbg !12296 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_heap**, align 8
  %obj_.addr = alloca i32, align 4
  store %struct.VEC_unsigned_heap** %vec_, %struct.VEC_unsigned_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_heap*** %vec_.addr, metadata !12301, metadata !DIExpression()), !dbg !12302
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !12303, metadata !DIExpression()), !dbg !12302
  %0 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12302
  %call = call i32 @VEC_unsigned_heap_reserve(%struct.VEC_unsigned_heap** %0, i32 1), !dbg !12302
  %1 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12302
  %2 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %1, align 8, !dbg !12302
  %tobool = icmp ne %struct.VEC_unsigned_heap* %2, null, !dbg !12302
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12302

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12302
  %4 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %3, align 8, !dbg !12302
  %base = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %4, i32 0, i32 0, !dbg !12302
  br label %cond.end, !dbg !12302

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12302

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_unsigned_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12302
  %5 = load i32, i32* %obj_.addr, align 4, !dbg !12302
  %call1 = call i32* @VEC_unsigned_base_quick_push(%struct.VEC_unsigned_base* %cond, i32 %5), !dbg !12302
  ret i32* %call1, !dbg !12302
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_heap_reserve(%struct.VEC_unsigned_heap** %vec_, i32 %alloc_) #0 !dbg !12304 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_unsigned_heap** %vec_, %struct.VEC_unsigned_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_heap*** %vec_.addr, metadata !12307, metadata !DIExpression()), !dbg !12308
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12309, metadata !DIExpression()), !dbg !12308
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !12310, metadata !DIExpression()), !dbg !12308
  %0 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12308
  %1 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %0, align 8, !dbg !12308
  %tobool = icmp ne %struct.VEC_unsigned_heap* %1, null, !dbg !12308
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12308

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12308
  %3 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %2, align 8, !dbg !12308
  %base = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %3, i32 0, i32 0, !dbg !12308
  br label %cond.end, !dbg !12308

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12308

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_unsigned_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12308
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !12308
  %call = call i32 @VEC_unsigned_base_space(%struct.VEC_unsigned_base* %cond, i32 %4), !dbg !12308
  %tobool1 = icmp ne i32 %call, 0, !dbg !12308
  %lnot = xor i1 %tobool1, true, !dbg !12308
  %lnot.ext = zext i1 %lnot to i32, !dbg !12308
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !12308
  %5 = load i32, i32* %extend, align 4, !dbg !12311
  %tobool2 = icmp ne i32 %5, 0, !dbg !12311
  br i1 %tobool2, label %if.then, label %if.end, !dbg !12308

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12311
  %7 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %6, align 8, !dbg !12311
  %8 = bitcast %struct.VEC_unsigned_heap* %7 to i8*, !dbg !12311
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !12311
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 4), !dbg !12311
  %10 = bitcast i8* %call3 to %struct.VEC_unsigned_heap*, !dbg !12311
  %11 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12311
  store %struct.VEC_unsigned_heap* %10, %struct.VEC_unsigned_heap** %11, align 8, !dbg !12311
  br label %if.end, !dbg !12311

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !12308
  ret i32 %12, !dbg !12308
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_unsigned_base_quick_push(%struct.VEC_unsigned_base* %vec_, i32 %obj_) #0 !dbg !12313 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !12316, metadata !DIExpression()), !dbg !12317
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !12318, metadata !DIExpression()), !dbg !12317
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !12319, metadata !DIExpression()), !dbg !12317
  %0 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12317
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %0, i32 0, i32 0, !dbg !12317
  %1 = load i32, i32* %num, align 4, !dbg !12317
  %2 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12317
  %alloc = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %2, i32 0, i32 1, !dbg !12317
  %3 = load i32, i32* %alloc, align 4, !dbg !12317
  %cmp = icmp ult i32 %1, %3, !dbg !12317
  %conv = zext i1 %cmp to i32, !dbg !12317
  %4 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12317
  %vec = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %4, i32 0, i32 2, !dbg !12317
  %5 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12317
  %num1 = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %5, i32 0, i32 0, !dbg !12317
  %6 = load i32, i32* %num1, align 4, !dbg !12317
  %inc = add i32 %6, 1, !dbg !12317
  store i32 %inc, i32* %num1, align 4, !dbg !12317
  %idxprom = zext i32 %6 to i64, !dbg !12317
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !12317
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !12317
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !12317
  %8 = load i32*, i32** %slot_, align 8, !dbg !12317
  store i32 %7, i32* %8, align 4, !dbg !12317
  %9 = load i32*, i32** %slot_, align 8, !dbg !12317
  ret i32* %9, !dbg !12317
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_base_space(%struct.VEC_unsigned_base* %vec_, i32 %alloc_) #0 !dbg !12320 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !12323, metadata !DIExpression()), !dbg !12324
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12325, metadata !DIExpression()), !dbg !12324
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !12324
  %cmp = icmp sge i32 %0, 0, !dbg !12324
  %conv = zext i1 %cmp to i32, !dbg !12324
  %1 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12324
  %tobool = icmp ne %struct.VEC_unsigned_base* %1, null, !dbg !12324
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12324

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12324
  %alloc = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %2, i32 0, i32 1, !dbg !12324
  %3 = load i32, i32* %alloc, align 4, !dbg !12324
  %4 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !12324
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %4, i32 0, i32 0, !dbg !12324
  %5 = load i32, i32* %num, align 4, !dbg !12324
  %sub = sub i32 %3, %5, !dbg !12324
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !12324
  %cmp1 = icmp uge i32 %sub, %6, !dbg !12324
  %conv2 = zext i1 %cmp1 to i32, !dbg !12324
  br label %cond.end, !dbg !12324

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !12324
  %tobool3 = icmp ne i32 %7, 0, !dbg !12324
  %lnot = xor i1 %tobool3, true, !dbg !12324
  %lnot.ext = zext i1 %lnot to i32, !dbg !12324
  br label %cond.end, !dbg !12324

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !12324
  ret i32 %cond, !dbg !12324
}

declare dso_local i32 @bitmap_hash(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint* @VEC_constraint_t_base_replace(%struct.VEC_constraint_t_base* %vec_, i32 %ix_, %struct.constraint* %obj_) #0 !dbg !12326 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.constraint*, align 8
  %old_obj_ = alloca %struct.constraint*, align 8
  store %struct.VEC_constraint_t_base* %vec_, %struct.VEC_constraint_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_base** %vec_.addr, metadata !12329, metadata !DIExpression()), !dbg !12330
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12331, metadata !DIExpression()), !dbg !12330
  store %struct.constraint* %obj_, %struct.constraint** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %obj_.addr, metadata !12332, metadata !DIExpression()), !dbg !12330
  call void @llvm.dbg.declare(metadata %struct.constraint** %old_obj_, metadata !12333, metadata !DIExpression()), !dbg !12330
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !12330
  %1 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12330
  %num = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %1, i32 0, i32 0, !dbg !12330
  %2 = load i32, i32* %num, align 8, !dbg !12330
  %cmp = icmp ult i32 %0, %2, !dbg !12330
  %conv = zext i1 %cmp to i32, !dbg !12330
  %3 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12330
  %vec = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %3, i32 0, i32 2, !dbg !12330
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !12330
  %idxprom = zext i32 %4 to i64, !dbg !12330
  %arrayidx = getelementptr inbounds [1 x %struct.constraint*], [1 x %struct.constraint*]* %vec, i64 0, i64 %idxprom, !dbg !12330
  %5 = load %struct.constraint*, %struct.constraint** %arrayidx, align 8, !dbg !12330
  store %struct.constraint* %5, %struct.constraint** %old_obj_, align 8, !dbg !12330
  %6 = load %struct.constraint*, %struct.constraint** %obj_.addr, align 8, !dbg !12330
  %7 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12330
  %vec1 = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %7, i32 0, i32 2, !dbg !12330
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !12330
  %idxprom2 = zext i32 %8 to i64, !dbg !12330
  %arrayidx3 = getelementptr inbounds [1 x %struct.constraint*], [1 x %struct.constraint*]* %vec1, i64 0, i64 %idxprom2, !dbg !12330
  store %struct.constraint* %6, %struct.constraint** %arrayidx3, align 8, !dbg !12330
  %9 = load %struct.constraint*, %struct.constraint** %old_obj_, align 8, !dbg !12330
  ret %struct.constraint* %9, !dbg !12330
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_equivalent_node(%struct.constraint_graph* %graph, i32 %node, i32 %label) #0 !dbg !12334 {
entry:
  %retval = alloca i32, align 4
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %node.addr = alloca i32, align 4
  %label.addr = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !12337, metadata !DIExpression()), !dbg !12338
  store i32 %node, i32* %node.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %node.addr, metadata !12339, metadata !DIExpression()), !dbg !12340
  store i32 %label, i32* %label.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %label.addr, metadata !12341, metadata !DIExpression()), !dbg !12342
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12343
  %address_taken = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 14, !dbg !12345
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %address_taken, align 8, !dbg !12345
  %2 = load i32, i32* %node.addr, align 4, !dbg !12346
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %2), !dbg !12347
  %tobool = icmp ne i32 %call, 0, !dbg !12347
  br i1 %tobool, label %if.else21, label %if.then, !dbg !12348

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %label.addr, align 4, !dbg !12349
  %4 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12349
  %size = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %4, i32 0, i32 0, !dbg !12349
  %5 = load i32, i32* %size, align 8, !dbg !12349
  %cmp = icmp ult i32 %3, %5, !dbg !12349
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12349

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2246, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !12349
  br label %cond.end, !dbg !12349

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !12349

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12349
  %6 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12351
  %eq_rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %6, i32 0, i32 6, !dbg !12353
  %7 = load i32*, i32** %eq_rep, align 8, !dbg !12353
  %8 = load i32, i32* %label.addr, align 4, !dbg !12354
  %idxprom = zext i32 %8 to i64, !dbg !12351
  %arrayidx = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !12351
  %9 = load i32, i32* %arrayidx, align 4, !dbg !12351
  %cmp1 = icmp ne i32 %9, -1, !dbg !12355
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !12356

if.then2:                                         ; preds = %cond.end
  %10 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12357
  %eq_rep3 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %10, i32 0, i32 6, !dbg !12360
  %11 = load i32*, i32** %eq_rep3, align 8, !dbg !12360
  %12 = load i32, i32* %label.addr, align 4, !dbg !12361
  %idxprom4 = zext i32 %12 to i64, !dbg !12357
  %arrayidx5 = getelementptr inbounds i32, i32* %11, i64 %idxprom4, !dbg !12357
  %13 = load i32, i32* %arrayidx5, align 4, !dbg !12357
  %14 = load i32, i32* %node.addr, align 4, !dbg !12362
  %call6 = call zeroext i8 @unite(i32 %13, i32 %14), !dbg !12363
  %tobool7 = icmp ne i8 %call6, 0, !dbg !12363
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !12364

if.then8:                                         ; preds = %if.then2
  %15 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12365
  %16 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12366
  %eq_rep9 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %16, i32 0, i32 6, !dbg !12367
  %17 = load i32*, i32** %eq_rep9, align 8, !dbg !12367
  %18 = load i32, i32* %label.addr, align 4, !dbg !12368
  %idxprom10 = zext i32 %18 to i64, !dbg !12366
  %arrayidx11 = getelementptr inbounds i32, i32* %17, i64 %idxprom10, !dbg !12366
  %19 = load i32, i32* %arrayidx11, align 4, !dbg !12366
  %20 = load i32, i32* %node.addr, align 4, !dbg !12369
  call void @unify_nodes(%struct.constraint_graph* %15, i32 %19, i32 %20, i8 zeroext 0), !dbg !12370
  br label %if.end, !dbg !12370

if.end:                                           ; preds = %if.then8, %if.then2
  %21 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12371
  %eq_rep12 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %21, i32 0, i32 6, !dbg !12372
  %22 = load i32*, i32** %eq_rep12, align 8, !dbg !12372
  %23 = load i32, i32* %label.addr, align 4, !dbg !12373
  %idxprom13 = zext i32 %23 to i64, !dbg !12371
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i64 %idxprom13, !dbg !12371
  %24 = load i32, i32* %arrayidx14, align 4, !dbg !12371
  store i32 %24, i32* %retval, align 4, !dbg !12374
  br label %return, !dbg !12374

if.else:                                          ; preds = %cond.end
  %25 = load i32, i32* %node.addr, align 4, !dbg !12375
  %26 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12377
  %eq_rep15 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %26, i32 0, i32 6, !dbg !12378
  %27 = load i32*, i32** %eq_rep15, align 8, !dbg !12378
  %28 = load i32, i32* %label.addr, align 4, !dbg !12379
  %idxprom16 = zext i32 %28 to i64, !dbg !12377
  %arrayidx17 = getelementptr inbounds i32, i32* %27, i64 %idxprom16, !dbg !12377
  store i32 %25, i32* %arrayidx17, align 4, !dbg !12380
  %29 = load i32, i32* %node.addr, align 4, !dbg !12381
  %30 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12382
  %pe_rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %30, i32 0, i32 8, !dbg !12383
  %31 = load i32*, i32** %pe_rep, align 8, !dbg !12383
  %32 = load i32, i32* %label.addr, align 4, !dbg !12384
  %idxprom18 = zext i32 %32 to i64, !dbg !12382
  %arrayidx19 = getelementptr inbounds i32, i32* %31, i64 %idxprom18, !dbg !12382
  store i32 %29, i32* %arrayidx19, align 4, !dbg !12385
  br label %if.end20

if.end20:                                         ; preds = %if.else
  br label %if.end39, !dbg !12386

if.else21:                                        ; preds = %entry
  %33 = load i32, i32* %label.addr, align 4, !dbg !12387
  %34 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12387
  %size22 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %34, i32 0, i32 0, !dbg !12387
  %35 = load i32, i32* %size22, align 8, !dbg !12387
  %cmp23 = icmp ult i32 %33, %35, !dbg !12387
  br i1 %cmp23, label %cond.false25, label %cond.true24, !dbg !12387

cond.true24:                                      ; preds = %if.else21
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 2263, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !12387
  br label %cond.end26, !dbg !12387

cond.false25:                                     ; preds = %if.else21
  br label %cond.end26, !dbg !12387

cond.end26:                                       ; preds = %cond.false25, %cond.true24
  %cond27 = phi i32 [ 0, %cond.true24 ], [ 0, %cond.false25 ], !dbg !12387
  %36 = load i32, i32* %label.addr, align 4, !dbg !12389
  %37 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12390
  %pe = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %37, i32 0, i32 7, !dbg !12391
  %38 = load i32*, i32** %pe, align 8, !dbg !12391
  %39 = load i32, i32* %node.addr, align 4, !dbg !12392
  %idxprom28 = zext i32 %39 to i64, !dbg !12390
  %arrayidx29 = getelementptr inbounds i32, i32* %38, i64 %idxprom28, !dbg !12390
  store i32 %36, i32* %arrayidx29, align 4, !dbg !12393
  %40 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12394
  %pe_rep30 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %40, i32 0, i32 8, !dbg !12396
  %41 = load i32*, i32** %pe_rep30, align 8, !dbg !12396
  %42 = load i32, i32* %label.addr, align 4, !dbg !12397
  %idxprom31 = zext i32 %42 to i64, !dbg !12394
  %arrayidx32 = getelementptr inbounds i32, i32* %41, i64 %idxprom31, !dbg !12394
  %43 = load i32, i32* %arrayidx32, align 4, !dbg !12394
  %cmp33 = icmp eq i32 %43, -1, !dbg !12398
  br i1 %cmp33, label %if.then34, label %if.end38, !dbg !12399

if.then34:                                        ; preds = %cond.end26
  %44 = load i32, i32* %node.addr, align 4, !dbg !12400
  %45 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12401
  %pe_rep35 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %45, i32 0, i32 8, !dbg !12402
  %46 = load i32*, i32** %pe_rep35, align 8, !dbg !12402
  %47 = load i32, i32* %label.addr, align 4, !dbg !12403
  %idxprom36 = zext i32 %47 to i64, !dbg !12401
  %arrayidx37 = getelementptr inbounds i32, i32* %46, i64 %idxprom36, !dbg !12401
  store i32 %44, i32* %arrayidx37, align 4, !dbg !12404
  br label %if.end38, !dbg !12401

if.end38:                                         ; preds = %if.then34, %cond.end26
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.end20
  %48 = load i32, i32* %node.addr, align 4, !dbg !12405
  store i32 %48, i32* %retval, align 4, !dbg !12406
  br label %return, !dbg !12406

return:                                           ; preds = %if.end39, %if.end
  %49 = load i32, i32* %retval, align 4, !dbg !12407
  ret i32 %49, !dbg !12407
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @unite(i32 %to, i32 %from) #0 !dbg !12408 {
entry:
  %retval = alloca i8, align 1
  %to.addr = alloca i32, align 4
  %from.addr = alloca i32, align 4
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !12411, metadata !DIExpression()), !dbg !12412
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !12413, metadata !DIExpression()), !dbg !12414
  %0 = load i32, i32* %to.addr, align 4, !dbg !12415
  %1 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !12415
  %size = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %1, i32 0, i32 0, !dbg !12415
  %2 = load i32, i32* %size, align 8, !dbg !12415
  %cmp = icmp ult i32 %0, %2, !dbg !12415
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !12415

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %from.addr, align 4, !dbg !12415
  %4 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !12415
  %size1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %4, i32 0, i32 0, !dbg !12415
  %5 = load i32, i32* %size1, align 8, !dbg !12415
  %cmp2 = icmp ult i32 %3, %5, !dbg !12415
  br i1 %cmp2, label %cond.false, label %cond.true, !dbg !12415

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 534, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !12415
  br label %cond.end, !dbg !12415

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !12415

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12415
  %6 = load i32, i32* %to.addr, align 4, !dbg !12416
  %7 = load i32, i32* %from.addr, align 4, !dbg !12418
  %cmp3 = icmp ne i32 %6, %7, !dbg !12419
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !12420

land.lhs.true4:                                   ; preds = %cond.end
  %8 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !12421
  %rep = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %8, i32 0, i32 5, !dbg !12422
  %9 = load i32*, i32** %rep, align 8, !dbg !12422
  %10 = load i32, i32* %from.addr, align 4, !dbg !12423
  %idxprom = zext i32 %10 to i64, !dbg !12421
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !12421
  %11 = load i32, i32* %arrayidx, align 4, !dbg !12421
  %12 = load i32, i32* %to.addr, align 4, !dbg !12424
  %cmp5 = icmp ne i32 %11, %12, !dbg !12425
  br i1 %cmp5, label %if.then, label %if.end, !dbg !12426

if.then:                                          ; preds = %land.lhs.true4
  %13 = load i32, i32* %to.addr, align 4, !dbg !12427
  %14 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !12429
  %rep6 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %14, i32 0, i32 5, !dbg !12430
  %15 = load i32*, i32** %rep6, align 8, !dbg !12430
  %16 = load i32, i32* %from.addr, align 4, !dbg !12431
  %idxprom7 = zext i32 %16 to i64, !dbg !12429
  %arrayidx8 = getelementptr inbounds i32, i32* %15, i64 %idxprom7, !dbg !12429
  store i32 %13, i32* %arrayidx8, align 4, !dbg !12432
  store i8 1, i8* %retval, align 1, !dbg !12433
  br label %return, !dbg !12433

if.end:                                           ; preds = %land.lhs.true4, %cond.end
  store i8 0, i8* %retval, align 1, !dbg !12434
  br label %return, !dbg !12434

return:                                           ; preds = %if.end, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !12435
  ret i8 %17, !dbg !12435
}

; Function Attrs: noinline nounwind uwtable
define internal void @unify_nodes(%struct.constraint_graph* %graph, i32 %to, i32 %from, i8 zeroext %update_changed) #0 !dbg !12436 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %to.addr = alloca i32, align 4
  %from.addr = alloca i32, align 4
  %update_changed.addr = alloca i8, align 1
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !12439, metadata !DIExpression()), !dbg !12440
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !12441, metadata !DIExpression()), !dbg !12442
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !12443, metadata !DIExpression()), !dbg !12444
  store i8 %update_changed, i8* %update_changed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_changed.addr, metadata !12445, metadata !DIExpression()), !dbg !12446
  %0 = load i32, i32* %to.addr, align 4, !dbg !12447
  %1 = load i32, i32* %from.addr, align 4, !dbg !12447
  %cmp = icmp ne i32 %0, %1, !dbg !12447
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !12447

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %to.addr, align 4, !dbg !12447
  %call = call i32 @find(i32 %2), !dbg !12447
  %3 = load i32, i32* %to.addr, align 4, !dbg !12447
  %cmp1 = icmp eq i32 %call, %3, !dbg !12447
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !12447

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1404, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !12447
  br label %cond.end, !dbg !12447

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !12447

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12447
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12448
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !12448
  br i1 %tobool, label %land.lhs.true2, label %if.end, !dbg !12450

land.lhs.true2:                                   ; preds = %cond.end
  %5 = load i32, i32* @dump_flags, align 4, !dbg !12451
  %and = and i32 %5, 8, !dbg !12452
  %tobool3 = icmp ne i32 %and, 0, !dbg !12452
  br i1 %tobool3, label %if.then, label %if.end, !dbg !12453

if.then:                                          ; preds = %land.lhs.true2
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12454
  %7 = load i32, i32* %from.addr, align 4, !dbg !12455
  %call4 = call %struct.variable_info* @get_varinfo(i32 %7), !dbg !12456
  %name = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call4, i32 0, i32 6, !dbg !12457
  %8 = load i8*, i8** %name, align 8, !dbg !12457
  %9 = load i32, i32* %to.addr, align 4, !dbg !12458
  %call5 = call %struct.variable_info* @get_varinfo(i32 %9), !dbg !12459
  %name6 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call5, i32 0, i32 6, !dbg !12460
  %10 = load i8*, i8** %name6, align 8, !dbg !12460
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.83, i64 0, i64 0), i8* %8, i8* %10), !dbg !12461
  br label %if.end, !dbg !12461

if.end:                                           ; preds = %if.then, %land.lhs.true2, %cond.end
  %11 = load i8, i8* %update_changed.addr, align 1, !dbg !12462
  %tobool8 = icmp ne i8 %11, 0, !dbg !12462
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !12464

if.then9:                                         ; preds = %if.end
  %12 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 3), align 4, !dbg !12465
  %inc = add i32 %12, 1, !dbg !12465
  store i32 %inc, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 3), align 4, !dbg !12465
  br label %if.end11, !dbg !12466

if.else:                                          ; preds = %if.end
  %13 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 2), align 4, !dbg !12467
  %inc10 = add i32 %13, 1, !dbg !12467
  store i32 %inc10, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 2), align 4, !dbg !12467
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then9
  %14 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12468
  %15 = load i32, i32* %to.addr, align 4, !dbg !12469
  %16 = load i32, i32* %from.addr, align 4, !dbg !12470
  call void @merge_graph_nodes(%struct.constraint_graph* %14, i32 %15, i32 %16), !dbg !12471
  %17 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12472
  %18 = load i32, i32* %to.addr, align 4, !dbg !12473
  %19 = load i32, i32* %from.addr, align 4, !dbg !12474
  call void @merge_node_constraints(%struct.constraint_graph* %17, i32 %18, i32 %19), !dbg !12475
  %20 = load i8, i8* %update_changed.addr, align 1, !dbg !12476
  %conv = zext i8 %20 to i32, !dbg !12476
  %tobool12 = icmp ne i32 %conv, 0, !dbg !12476
  br i1 %tobool12, label %land.lhs.true13, label %if.end35, !dbg !12478

land.lhs.true13:                                  ; preds = %if.end11
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !12479
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %21, i32 0, i32 3, !dbg !12479
  %22 = load i32, i32* %from.addr, align 4, !dbg !12479
  %div = udiv i32 %22, 64, !dbg !12479
  %idxprom = zext i32 %div to i64, !dbg !12479
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !12479
  %23 = load i64, i64* %arrayidx, align 8, !dbg !12479
  %24 = load i32, i32* %from.addr, align 4, !dbg !12479
  %rem = urem i32 %24, 64, !dbg !12479
  %sh_prom = zext i32 %rem to i64, !dbg !12479
  %shr = lshr i64 %23, %sh_prom, !dbg !12479
  %and14 = and i64 %shr, 1, !dbg !12479
  %tobool15 = icmp ne i64 %and14, 0, !dbg !12479
  br i1 %tobool15, label %if.then16, label %if.end35, !dbg !12480

if.then16:                                        ; preds = %land.lhs.true13
  %25 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !12481
  %26 = load i32, i32* %from.addr, align 4, !dbg !12483
  call void @RESET_BIT(%struct.simple_bitmap_def* %25, i32 %26), !dbg !12484
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !12485
  %elms17 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %27, i32 0, i32 3, !dbg !12485
  %28 = load i32, i32* %to.addr, align 4, !dbg !12485
  %div18 = udiv i32 %28, 64, !dbg !12485
  %idxprom19 = zext i32 %div18 to i64, !dbg !12485
  %arrayidx20 = getelementptr inbounds [1 x i64], [1 x i64]* %elms17, i64 0, i64 %idxprom19, !dbg !12485
  %29 = load i64, i64* %arrayidx20, align 8, !dbg !12485
  %30 = load i32, i32* %to.addr, align 4, !dbg !12485
  %rem21 = urem i32 %30, 64, !dbg !12485
  %sh_prom22 = zext i32 %rem21 to i64, !dbg !12485
  %shr23 = lshr i64 %29, %sh_prom22, !dbg !12485
  %and24 = and i64 %shr23, 1, !dbg !12485
  %tobool25 = icmp ne i64 %and24, 0, !dbg !12485
  br i1 %tobool25, label %if.else27, label %if.then26, !dbg !12487

if.then26:                                        ; preds = %if.then16
  %31 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !12488
  %32 = load i32, i32* %to.addr, align 4, !dbg !12489
  call void @SET_BIT(%struct.simple_bitmap_def* %31, i32 %32), !dbg !12490
  br label %if.end34, !dbg !12490

if.else27:                                        ; preds = %if.then16
  %33 = load i32, i32* @changed_count, align 4, !dbg !12491
  %cmp28 = icmp ugt i32 %33, 0, !dbg !12491
  br i1 %cmp28, label %cond.false31, label %cond.true30, !dbg !12491

cond.true30:                                      ; preds = %if.else27
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1428, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !12491
  br label %cond.end32, !dbg !12491

cond.false31:                                     ; preds = %if.else27
  br label %cond.end32, !dbg !12491

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !12491
  %34 = load i32, i32* @changed_count, align 4, !dbg !12493
  %dec = add i32 %34, -1, !dbg !12493
  store i32 %dec, i32* @changed_count, align 4, !dbg !12493
  br label %if.end34

if.end34:                                         ; preds = %cond.end32, %if.then26
  br label %if.end35, !dbg !12494

if.end35:                                         ; preds = %if.end34, %land.lhs.true13, %if.end11
  %35 = load i32, i32* %from.addr, align 4, !dbg !12495
  %call36 = call %struct.variable_info* @get_varinfo(i32 %35), !dbg !12497
  %solution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call36, i32 0, i32 8, !dbg !12498
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution, align 8, !dbg !12498
  %tobool37 = icmp ne %struct.bitmap_head_def* %36, null, !dbg !12497
  br i1 %tobool37, label %if.then38, label %if.end80, !dbg !12499

if.then38:                                        ; preds = %if.end35
  %37 = load i32, i32* %to.addr, align 4, !dbg !12500
  %call39 = call %struct.variable_info* @get_varinfo(i32 %37), !dbg !12503
  %solution40 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call39, i32 0, i32 8, !dbg !12504
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution40, align 8, !dbg !12504
  %39 = load i32, i32* %from.addr, align 4, !dbg !12505
  %call41 = call %struct.variable_info* @get_varinfo(i32 %39), !dbg !12506
  %solution42 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call41, i32 0, i32 8, !dbg !12507
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution42, align 8, !dbg !12507
  %call43 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %38, %struct.bitmap_head_def* %40), !dbg !12508
  %tobool44 = icmp ne i8 %call43, 0, !dbg !12508
  br i1 %tobool44, label %if.then45, label %if.end61, !dbg !12509

if.then45:                                        ; preds = %if.then38
  %41 = load i8, i8* %update_changed.addr, align 1, !dbg !12510
  %conv46 = zext i8 %41 to i32, !dbg !12510
  %tobool47 = icmp ne i32 %conv46, 0, !dbg !12510
  br i1 %tobool47, label %land.lhs.true48, label %if.end60, !dbg !12513

land.lhs.true48:                                  ; preds = %if.then45
  %42 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !12514
  %elms49 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %42, i32 0, i32 3, !dbg !12514
  %43 = load i32, i32* %to.addr, align 4, !dbg !12514
  %div50 = udiv i32 %43, 64, !dbg !12514
  %idxprom51 = zext i32 %div50 to i64, !dbg !12514
  %arrayidx52 = getelementptr inbounds [1 x i64], [1 x i64]* %elms49, i64 0, i64 %idxprom51, !dbg !12514
  %44 = load i64, i64* %arrayidx52, align 8, !dbg !12514
  %45 = load i32, i32* %to.addr, align 4, !dbg !12514
  %rem53 = urem i32 %45, 64, !dbg !12514
  %sh_prom54 = zext i32 %rem53 to i64, !dbg !12514
  %shr55 = lshr i64 %44, %sh_prom54, !dbg !12514
  %and56 = and i64 %shr55, 1, !dbg !12514
  %tobool57 = icmp ne i64 %and56, 0, !dbg !12514
  br i1 %tobool57, label %if.end60, label %if.then58, !dbg !12515

if.then58:                                        ; preds = %land.lhs.true48
  %46 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !12516
  %47 = load i32, i32* %to.addr, align 4, !dbg !12518
  call void @SET_BIT(%struct.simple_bitmap_def* %46, i32 %47), !dbg !12519
  %48 = load i32, i32* @changed_count, align 4, !dbg !12520
  %inc59 = add i32 %48, 1, !dbg !12520
  store i32 %inc59, i32* @changed_count, align 4, !dbg !12520
  br label %if.end60, !dbg !12521

if.end60:                                         ; preds = %if.then58, %land.lhs.true48, %if.then45
  br label %if.end61, !dbg !12522

if.end61:                                         ; preds = %if.end60, %if.then38
  %49 = load i32, i32* %from.addr, align 4, !dbg !12523
  %call62 = call %struct.variable_info* @get_varinfo(i32 %49), !dbg !12523
  %solution63 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call62, i32 0, i32 8, !dbg !12523
  %50 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution63, align 8, !dbg !12523
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %50), !dbg !12523
  %51 = load i32, i32* %from.addr, align 4, !dbg !12523
  %call64 = call %struct.variable_info* @get_varinfo(i32 %51), !dbg !12523
  %solution65 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call64, i32 0, i32 8, !dbg !12523
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %solution65, align 8, !dbg !12523
  %52 = load i32, i32* %from.addr, align 4, !dbg !12524
  %call66 = call %struct.variable_info* @get_varinfo(i32 %52), !dbg !12524
  %oldsolution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call66, i32 0, i32 9, !dbg !12524
  %53 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %oldsolution, align 8, !dbg !12524
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %53), !dbg !12524
  %54 = load i32, i32* %from.addr, align 4, !dbg !12524
  %call67 = call %struct.variable_info* @get_varinfo(i32 %54), !dbg !12524
  %oldsolution68 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call67, i32 0, i32 9, !dbg !12524
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %oldsolution68, align 8, !dbg !12524
  %55 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 4), align 4, !dbg !12525
  %cmp69 = icmp ugt i32 %55, 0, !dbg !12527
  br i1 %cmp69, label %if.then71, label %if.end79, !dbg !12528

if.then71:                                        ; preds = %if.end61
  %56 = load i32, i32* %to.addr, align 4, !dbg !12529
  %call72 = call %struct.variable_info* @get_varinfo(i32 %56), !dbg !12529
  %oldsolution73 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call72, i32 0, i32 9, !dbg !12529
  %57 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %oldsolution73, align 8, !dbg !12529
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %57), !dbg !12529
  %58 = load i32, i32* %to.addr, align 4, !dbg !12529
  %call74 = call %struct.variable_info* @get_varinfo(i32 %58), !dbg !12529
  %oldsolution75 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call74, i32 0, i32 9, !dbg !12529
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %oldsolution75, align 8, !dbg !12529
  %call76 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @oldpta_obstack), !dbg !12531
  %59 = load i32, i32* %to.addr, align 4, !dbg !12532
  %call77 = call %struct.variable_info* @get_varinfo(i32 %59), !dbg !12533
  %oldsolution78 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call77, i32 0, i32 9, !dbg !12534
  store %struct.bitmap_head_def* %call76, %struct.bitmap_head_def** %oldsolution78, align 8, !dbg !12535
  br label %if.end79, !dbg !12536

if.end79:                                         ; preds = %if.then71, %if.end61
  br label %if.end80, !dbg !12537

if.end80:                                         ; preds = %if.end79, %if.end35
  %60 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12538
  %61 = load i32, i32* %to.addr, align 4, !dbg !12540
  %62 = load i32, i32* %to.addr, align 4, !dbg !12541
  %call81 = call zeroext i8 @valid_graph_edge(%struct.constraint_graph* %60, i32 %61, i32 %62), !dbg !12542
  %tobool82 = icmp ne i8 %call81, 0, !dbg !12542
  br i1 %tobool82, label %if.then83, label %if.end93, !dbg !12543

if.then83:                                        ; preds = %if.end80
  %63 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12544
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %63, i32 0, i32 1, !dbg !12547
  %64 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !12547
  %65 = load i32, i32* %to.addr, align 4, !dbg !12548
  %idxprom84 = zext i32 %65 to i64, !dbg !12544
  %arrayidx85 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %64, i64 %idxprom84, !dbg !12544
  %66 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx85, align 8, !dbg !12544
  %tobool86 = icmp ne %struct.bitmap_head_def* %66, null, !dbg !12544
  br i1 %tobool86, label %if.then87, label %if.end92, !dbg !12549

if.then87:                                        ; preds = %if.then83
  %67 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12550
  %succs88 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %67, i32 0, i32 1, !dbg !12551
  %68 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs88, align 8, !dbg !12551
  %69 = load i32, i32* %to.addr, align 4, !dbg !12552
  %idxprom89 = zext i32 %69 to i64, !dbg !12550
  %arrayidx90 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %68, i64 %idxprom89, !dbg !12550
  %70 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx90, align 8, !dbg !12550
  %71 = load i32, i32* %to.addr, align 4, !dbg !12553
  %call91 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %70, i32 %71), !dbg !12554
  br label %if.end92, !dbg !12554

if.end92:                                         ; preds = %if.then87, %if.then83
  br label %if.end93, !dbg !12555

if.end93:                                         ; preds = %if.end92, %if.end80
  ret void, !dbg !12556
}

; Function Attrs: noinline nounwind uwtable
define internal void @merge_graph_nodes(%struct.constraint_graph* %graph, i32 %to, i32 %from) #0 !dbg !12557 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %to.addr = alloca i32, align 4
  %from.addr = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !12558, metadata !DIExpression()), !dbg !12559
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !12560, metadata !DIExpression()), !dbg !12561
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !12562, metadata !DIExpression()), !dbg !12563
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12564
  %indirect_cycles = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 4, !dbg !12566
  %1 = load i32*, i32** %indirect_cycles, align 8, !dbg !12566
  %2 = load i32, i32* %from.addr, align 4, !dbg !12567
  %idxprom = zext i32 %2 to i64, !dbg !12564
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !12564
  %3 = load i32, i32* %arrayidx, align 4, !dbg !12564
  %cmp = icmp ne i32 %3, -1, !dbg !12568
  br i1 %cmp, label %if.then, label %if.end12, !dbg !12569

if.then:                                          ; preds = %entry
  %4 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12570
  %indirect_cycles1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %4, i32 0, i32 4, !dbg !12573
  %5 = load i32*, i32** %indirect_cycles1, align 8, !dbg !12573
  %6 = load i32, i32* %to.addr, align 4, !dbg !12574
  %idxprom2 = zext i32 %6 to i64, !dbg !12570
  %arrayidx3 = getelementptr inbounds i32, i32* %5, i64 %idxprom2, !dbg !12570
  %7 = load i32, i32* %arrayidx3, align 4, !dbg !12570
  %cmp4 = icmp eq i32 %7, -1, !dbg !12575
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !12576

if.then5:                                         ; preds = %if.then
  %8 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12577
  %indirect_cycles6 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %8, i32 0, i32 4, !dbg !12578
  %9 = load i32*, i32** %indirect_cycles6, align 8, !dbg !12578
  %10 = load i32, i32* %from.addr, align 4, !dbg !12579
  %idxprom7 = zext i32 %10 to i64, !dbg !12577
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i64 %idxprom7, !dbg !12577
  %11 = load i32, i32* %arrayidx8, align 4, !dbg !12577
  %12 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12580
  %indirect_cycles9 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %12, i32 0, i32 4, !dbg !12581
  %13 = load i32*, i32** %indirect_cycles9, align 8, !dbg !12581
  %14 = load i32, i32* %to.addr, align 4, !dbg !12582
  %idxprom10 = zext i32 %14 to i64, !dbg !12580
  %arrayidx11 = getelementptr inbounds i32, i32* %13, i64 %idxprom10, !dbg !12580
  store i32 %11, i32* %arrayidx11, align 4, !dbg !12583
  br label %if.end, !dbg !12580

if.end:                                           ; preds = %if.then5, %if.then
  br label %if.end12, !dbg !12584

if.end12:                                         ; preds = %if.end, %entry
  %15 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12585
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %15, i32 0, i32 1, !dbg !12587
  %16 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !12587
  %17 = load i32, i32* %from.addr, align 4, !dbg !12588
  %idxprom13 = zext i32 %17 to i64, !dbg !12585
  %arrayidx14 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %16, i64 %idxprom13, !dbg !12585
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx14, align 8, !dbg !12585
  %tobool = icmp ne %struct.bitmap_head_def* %18, null, !dbg !12585
  br i1 %tobool, label %if.then15, label %if.end32, !dbg !12589

if.then15:                                        ; preds = %if.end12
  %19 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12590
  %succs16 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %19, i32 0, i32 1, !dbg !12593
  %20 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs16, align 8, !dbg !12593
  %21 = load i32, i32* %to.addr, align 4, !dbg !12594
  %idxprom17 = zext i32 %21 to i64, !dbg !12590
  %arrayidx18 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %20, i64 %idxprom17, !dbg !12590
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx18, align 8, !dbg !12590
  %tobool19 = icmp ne %struct.bitmap_head_def* %22, null, !dbg !12590
  br i1 %tobool19, label %if.end24, label %if.then20, !dbg !12595

if.then20:                                        ; preds = %if.then15
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @pta_obstack), !dbg !12596
  %23 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12597
  %succs21 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %23, i32 0, i32 1, !dbg !12598
  %24 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs21, align 8, !dbg !12598
  %25 = load i32, i32* %to.addr, align 4, !dbg !12599
  %idxprom22 = zext i32 %25 to i64, !dbg !12597
  %arrayidx23 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %24, i64 %idxprom22, !dbg !12597
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %arrayidx23, align 8, !dbg !12600
  br label %if.end24, !dbg !12597

if.end24:                                         ; preds = %if.then20, %if.then15
  %26 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12601
  %succs25 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %26, i32 0, i32 1, !dbg !12602
  %27 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs25, align 8, !dbg !12602
  %28 = load i32, i32* %to.addr, align 4, !dbg !12603
  %idxprom26 = zext i32 %28 to i64, !dbg !12601
  %arrayidx27 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %27, i64 %idxprom26, !dbg !12601
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx27, align 8, !dbg !12601
  %30 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12604
  %succs28 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %30, i32 0, i32 1, !dbg !12605
  %31 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs28, align 8, !dbg !12605
  %32 = load i32, i32* %from.addr, align 4, !dbg !12606
  %idxprom29 = zext i32 %32 to i64, !dbg !12604
  %arrayidx30 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %31, i64 %idxprom29, !dbg !12604
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx30, align 8, !dbg !12604
  %call31 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %29, %struct.bitmap_head_def* %33), !dbg !12607
  br label %if.end32, !dbg !12608

if.end32:                                         ; preds = %if.end24, %if.end12
  %34 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12609
  %35 = load i32, i32* %from.addr, align 4, !dbg !12610
  call void @clear_edges_for_node(%struct.constraint_graph* %34, i32 %35), !dbg !12611
  ret void, !dbg !12612
}

; Function Attrs: noinline nounwind uwtable
define internal void @merge_node_constraints(%struct.constraint_graph* %graph, i32 %to, i32 %from) #0 !dbg !12613 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %to.addr = alloca i32, align 4
  %from.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca %struct.constraint*, align 8
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !12614, metadata !DIExpression()), !dbg !12615
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !12616, metadata !DIExpression()), !dbg !12617
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !12618, metadata !DIExpression()), !dbg !12619
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12620, metadata !DIExpression()), !dbg !12621
  call void @llvm.dbg.declare(metadata %struct.constraint** %c, metadata !12622, metadata !DIExpression()), !dbg !12623
  %0 = load i32, i32* %from.addr, align 4, !dbg !12624
  %call = call i32 @find(i32 %0), !dbg !12624
  %1 = load i32, i32* %to.addr, align 4, !dbg !12624
  %cmp = icmp eq i32 %call, %1, !dbg !12624
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12624

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 969, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !12624
  br label %cond.end, !dbg !12624

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12624

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12624
  store i32 0, i32* %i, align 4, !dbg !12625
  br label %for.cond, !dbg !12627

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12628
  %complex = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %2, i32 0, i32 15, !dbg !12628
  %3 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex, align 8, !dbg !12628
  %4 = load i32, i32* %from.addr, align 4, !dbg !12628
  %idxprom = zext i32 %4 to i64, !dbg !12628
  %arrayidx = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %3, i64 %idxprom, !dbg !12628
  %5 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %arrayidx, align 8, !dbg !12628
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %5, null, !dbg !12628
  br i1 %tobool, label %cond.true1, label %cond.false5, !dbg !12628

cond.true1:                                       ; preds = %for.cond
  %6 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12628
  %complex2 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %6, i32 0, i32 15, !dbg !12628
  %7 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex2, align 8, !dbg !12628
  %8 = load i32, i32* %from.addr, align 4, !dbg !12628
  %idxprom3 = zext i32 %8 to i64, !dbg !12628
  %arrayidx4 = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %7, i64 %idxprom3, !dbg !12628
  %9 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %arrayidx4, align 8, !dbg !12628
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %9, i32 0, i32 0, !dbg !12628
  br label %cond.end6, !dbg !12628

cond.false5:                                      ; preds = %for.cond
  br label %cond.end6, !dbg !12628

cond.end6:                                        ; preds = %cond.false5, %cond.true1
  %cond7 = phi %struct.VEC_constraint_t_base* [ %base, %cond.true1 ], [ null, %cond.false5 ], !dbg !12628
  %10 = load i32, i32* %i, align 4, !dbg !12628
  %call8 = call i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %cond7, i32 %10, %struct.constraint** %c), !dbg !12628
  %tobool9 = icmp ne i32 %call8, 0, !dbg !12630
  br i1 %tobool9, label %for.body, label %for.end, !dbg !12630

for.body:                                         ; preds = %cond.end6
  %11 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !12631
  %rhs = getelementptr inbounds %struct.constraint, %struct.constraint* %11, i32 0, i32 1, !dbg !12634
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !12635
  %12 = load i32, i32* %type, align 8, !dbg !12635
  %cmp10 = icmp eq i32 %12, 1, !dbg !12636
  br i1 %cmp10, label %if.then, label %if.else, !dbg !12637

if.then:                                          ; preds = %for.body
  %13 = load i32, i32* %to.addr, align 4, !dbg !12638
  %14 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !12639
  %rhs11 = getelementptr inbounds %struct.constraint, %struct.constraint* %14, i32 0, i32 1, !dbg !12640
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs11, i32 0, i32 1, !dbg !12641
  store i32 %13, i32* %var, align 4, !dbg !12642
  br label %if.end20, !dbg !12639

if.else:                                          ; preds = %for.body
  %15 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !12643
  %lhs = getelementptr inbounds %struct.constraint, %struct.constraint* %15, i32 0, i32 0, !dbg !12645
  %type12 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !12646
  %16 = load i32, i32* %type12, align 8, !dbg !12646
  %cmp13 = icmp eq i32 %16, 1, !dbg !12647
  br i1 %cmp13, label %if.then14, label %if.else17, !dbg !12648

if.then14:                                        ; preds = %if.else
  %17 = load i32, i32* %to.addr, align 4, !dbg !12649
  %18 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !12650
  %lhs15 = getelementptr inbounds %struct.constraint, %struct.constraint* %18, i32 0, i32 0, !dbg !12651
  %var16 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs15, i32 0, i32 1, !dbg !12652
  store i32 %17, i32* %var16, align 4, !dbg !12653
  br label %if.end, !dbg !12650

if.else17:                                        ; preds = %if.else
  %19 = load i32, i32* %to.addr, align 4, !dbg !12654
  %20 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !12655
  %rhs18 = getelementptr inbounds %struct.constraint, %struct.constraint* %20, i32 0, i32 1, !dbg !12656
  %var19 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs18, i32 0, i32 1, !dbg !12657
  store i32 %19, i32* %var19, align 4, !dbg !12658
  br label %if.end

if.end:                                           ; preds = %if.else17, %if.then14
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !12659

for.inc:                                          ; preds = %if.end20
  %21 = load i32, i32* %i, align 4, !dbg !12660
  %inc = add i32 %21, 1, !dbg !12660
  store i32 %inc, i32* %i, align 4, !dbg !12660
  br label %for.cond, !dbg !12661, !llvm.loop !12662

for.end:                                          ; preds = %cond.end6
  %22 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12664
  %complex21 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %22, i32 0, i32 15, !dbg !12665
  %23 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex21, align 8, !dbg !12665
  %24 = load i32, i32* %to.addr, align 4, !dbg !12666
  %idxprom22 = zext i32 %24 to i64, !dbg !12664
  %arrayidx23 = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %23, i64 %idxprom22, !dbg !12664
  %25 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12667
  %complex24 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %25, i32 0, i32 15, !dbg !12668
  %26 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex24, align 8, !dbg !12668
  %27 = load i32, i32* %from.addr, align 4, !dbg !12669
  %idxprom25 = zext i32 %27 to i64, !dbg !12667
  %arrayidx26 = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %26, i64 %idxprom25, !dbg !12667
  call void @constraint_set_union(%struct.VEC_constraint_t_heap** %arrayidx23, %struct.VEC_constraint_t_heap** %arrayidx26), !dbg !12670
  %28 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12671
  %complex27 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %28, i32 0, i32 15, !dbg !12671
  %29 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex27, align 8, !dbg !12671
  %30 = load i32, i32* %from.addr, align 4, !dbg !12671
  %idxprom28 = zext i32 %30 to i64, !dbg !12671
  %arrayidx29 = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %29, i64 %idxprom28, !dbg !12671
  call void @VEC_constraint_t_heap_free(%struct.VEC_constraint_t_heap** %arrayidx29), !dbg !12671
  %31 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12672
  %complex30 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %31, i32 0, i32 15, !dbg !12673
  %32 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex30, align 8, !dbg !12673
  %33 = load i32, i32* %from.addr, align 4, !dbg !12674
  %idxprom31 = zext i32 %33 to i64, !dbg !12672
  %arrayidx32 = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %32, i64 %idxprom31, !dbg !12672
  store %struct.VEC_constraint_t_heap* null, %struct.VEC_constraint_t_heap** %arrayidx32, align 8, !dbg !12675
  ret void, !dbg !12676
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @valid_graph_edge(%struct.constraint_graph* %graph, i32 %src, i32 %dest) #0 !dbg !12677 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %src.addr = alloca i32, align 4
  %dest.addr = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !12680, metadata !DIExpression()), !dbg !12681
  store i32 %src, i32* %src.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src.addr, metadata !12682, metadata !DIExpression()), !dbg !12683
  store i32 %dest, i32* %dest.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dest.addr, metadata !12684, metadata !DIExpression()), !dbg !12685
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12686
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 1, !dbg !12687
  %1 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !12687
  %2 = load i32, i32* %dest.addr, align 4, !dbg !12688
  %idxprom = zext i32 %2 to i64, !dbg !12686
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %1, i64 %idxprom, !dbg !12686
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !12686
  %tobool = icmp ne %struct.bitmap_head_def* %3, null, !dbg !12686
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12689

land.rhs:                                         ; preds = %entry
  %4 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12690
  %succs1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %4, i32 0, i32 1, !dbg !12691
  %5 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs1, align 8, !dbg !12691
  %6 = load i32, i32* %dest.addr, align 4, !dbg !12692
  %idxprom2 = zext i32 %6 to i64, !dbg !12690
  %arrayidx3 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %5, i64 %idxprom2, !dbg !12690
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx3, align 8, !dbg !12690
  %8 = load i32, i32* %src.addr, align 4, !dbg !12693
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %7, i32 %8), !dbg !12694
  %tobool4 = icmp ne i32 %call, 0, !dbg !12689
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %9 = phi i1 [ false, %entry ], [ %tobool4, %land.rhs ], !dbg !12695
  %land.ext = zext i1 %9 to i32, !dbg !12689
  %conv = trunc i32 %land.ext to i8, !dbg !12696
  ret i8 %conv, !dbg !12697
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @constraint_set_union(%struct.VEC_constraint_t_heap** %to, %struct.VEC_constraint_t_heap** %from) #0 !dbg !12698 {
entry:
  %to.addr = alloca %struct.VEC_constraint_t_heap**, align 8
  %from.addr = alloca %struct.VEC_constraint_t_heap**, align 8
  %i = alloca i32, align 4
  %c = alloca %struct.constraint*, align 8
  %place = alloca i32, align 4
  store %struct.VEC_constraint_t_heap** %to, %struct.VEC_constraint_t_heap*** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_heap*** %to.addr, metadata !12701, metadata !DIExpression()), !dbg !12702
  store %struct.VEC_constraint_t_heap** %from, %struct.VEC_constraint_t_heap*** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_heap*** %from.addr, metadata !12703, metadata !DIExpression()), !dbg !12704
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12705, metadata !DIExpression()), !dbg !12706
  call void @llvm.dbg.declare(metadata %struct.constraint** %c, metadata !12707, metadata !DIExpression()), !dbg !12708
  store i32 0, i32* %i, align 4, !dbg !12709
  br label %for.cond, !dbg !12711

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %from.addr, align 8, !dbg !12712
  %1 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %0, align 8, !dbg !12712
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %1, null, !dbg !12712
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12712

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %from.addr, align 8, !dbg !12712
  %3 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %2, align 8, !dbg !12712
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %3, i32 0, i32 0, !dbg !12712
  br label %cond.end, !dbg !12712

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !12712

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12712
  %4 = load i32, i32* %i, align 4, !dbg !12712
  %call = call i32 @VEC_constraint_t_base_iterate(%struct.VEC_constraint_t_base* %cond, i32 %4, %struct.constraint** %c), !dbg !12712
  %tobool1 = icmp ne i32 %call, 0, !dbg !12714
  br i1 %tobool1, label %for.body, label %for.end, !dbg !12714

for.body:                                         ; preds = %cond.end
  %5 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %to.addr, align 8, !dbg !12715
  %6 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %5, align 8, !dbg !12718
  %7 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !12719
  %call2 = call %struct.constraint* @constraint_vec_find(%struct.VEC_constraint_t_heap* %6, %struct.constraint* byval(%struct.constraint) align 8 %7), !dbg !12720
  %cmp = icmp eq %struct.constraint* %call2, null, !dbg !12721
  br i1 %cmp, label %if.then, label %if.end, !dbg !12722

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %place, metadata !12723, metadata !DIExpression()), !dbg !12725
  %8 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %to.addr, align 8, !dbg !12726
  %9 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %8, align 8, !dbg !12726
  %tobool3 = icmp ne %struct.VEC_constraint_t_heap* %9, null, !dbg !12726
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !12726

cond.true4:                                       ; preds = %if.then
  %10 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %to.addr, align 8, !dbg !12726
  %11 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %10, align 8, !dbg !12726
  %base5 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %11, i32 0, i32 0, !dbg !12726
  br label %cond.end7, !dbg !12726

cond.false6:                                      ; preds = %if.then
  br label %cond.end7, !dbg !12726

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_constraint_t_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !12726
  %12 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !12726
  %call9 = call i32 @VEC_constraint_t_base_lower_bound(%struct.VEC_constraint_t_base* %cond8, %struct.constraint* %12, i8 (%struct.constraint*, %struct.constraint*)* @constraint_less), !dbg !12726
  store i32 %call9, i32* %place, align 4, !dbg !12725
  %13 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %to.addr, align 8, !dbg !12727
  %14 = load i32, i32* %place, align 4, !dbg !12727
  %15 = load %struct.constraint*, %struct.constraint** %c, align 8, !dbg !12727
  %call10 = call %struct.constraint** @VEC_constraint_t_heap_safe_insert(%struct.VEC_constraint_t_heap** %13, i32 %14, %struct.constraint* %15), !dbg !12727
  br label %if.end, !dbg !12728

if.end:                                           ; preds = %cond.end7, %for.body
  br label %for.inc, !dbg !12729

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4, !dbg !12730
  %inc = add nsw i32 %16, 1, !dbg !12730
  store i32 %inc, i32* %i, align 4, !dbg !12730
  br label %for.cond, !dbg !12731, !llvm.loop !12732

for.end:                                          ; preds = %cond.end
  ret void, !dbg !12734
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_constraint_t_heap_free(%struct.VEC_constraint_t_heap** %vec_) #0 !dbg !12735 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_heap**, align 8
  store %struct.VEC_constraint_t_heap** %vec_, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_heap*** %vec_.addr, metadata !12738, metadata !DIExpression()), !dbg !12739
  %0 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !12740
  %1 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %0, align 8, !dbg !12740
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %1, null, !dbg !12740
  br i1 %tobool, label %if.then, label %if.end, !dbg !12739

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !12740
  %3 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %2, align 8, !dbg !12740
  %4 = bitcast %struct.VEC_constraint_t_heap* %3 to i8*, !dbg !12740
  call void @free(i8* %4), !dbg !12740
  br label %if.end, !dbg !12740

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !12739
  store %struct.VEC_constraint_t_heap* null, %struct.VEC_constraint_t_heap** %5, align 8, !dbg !12739
  ret void, !dbg !12739
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint* @constraint_vec_find(%struct.VEC_constraint_t_heap* %vec, %struct.constraint* byval(%struct.constraint) align 8 %lookfor) #0 !dbg !12742 {
entry:
  %retval = alloca %struct.constraint*, align 8
  %vec.addr = alloca %struct.VEC_constraint_t_heap*, align 8
  %place = alloca i32, align 4
  %found = alloca %struct.constraint*, align 8
  store %struct.VEC_constraint_t_heap* %vec, %struct.VEC_constraint_t_heap** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_heap** %vec.addr, metadata !12745, metadata !DIExpression()), !dbg !12746
  call void @llvm.dbg.declare(metadata %struct.constraint* %lookfor, metadata !12747, metadata !DIExpression()), !dbg !12748
  call void @llvm.dbg.declare(metadata i32* %place, metadata !12749, metadata !DIExpression()), !dbg !12750
  call void @llvm.dbg.declare(metadata %struct.constraint** %found, metadata !12751, metadata !DIExpression()), !dbg !12752
  %0 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %vec.addr, align 8, !dbg !12753
  %cmp = icmp eq %struct.VEC_constraint_t_heap* %0, null, !dbg !12755
  br i1 %cmp, label %if.then, label %if.end, !dbg !12756

if.then:                                          ; preds = %entry
  store %struct.constraint* null, %struct.constraint** %retval, align 8, !dbg !12757
  br label %return, !dbg !12757

if.end:                                           ; preds = %entry
  %1 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %vec.addr, align 8, !dbg !12758
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %1, null, !dbg !12758
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12758

cond.true:                                        ; preds = %if.end
  %2 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %vec.addr, align 8, !dbg !12758
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %2, i32 0, i32 0, !dbg !12758
  br label %cond.end, !dbg !12758

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !12758

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12758
  %call = call i32 @VEC_constraint_t_base_lower_bound(%struct.VEC_constraint_t_base* %cond, %struct.constraint* %lookfor, i8 (%struct.constraint*, %struct.constraint*)* @constraint_less), !dbg !12758
  store i32 %call, i32* %place, align 4, !dbg !12759
  %3 = load i32, i32* %place, align 4, !dbg !12760
  %4 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %vec.addr, align 8, !dbg !12762
  %tobool1 = icmp ne %struct.VEC_constraint_t_heap* %4, null, !dbg !12762
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !12762

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %vec.addr, align 8, !dbg !12762
  %base3 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %5, i32 0, i32 0, !dbg !12762
  br label %cond.end5, !dbg !12762

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !12762

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_constraint_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !12762
  %call7 = call i32 @VEC_constraint_t_base_length(%struct.VEC_constraint_t_base* %cond6), !dbg !12762
  %cmp8 = icmp uge i32 %3, %call7, !dbg !12763
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !12764

if.then9:                                         ; preds = %cond.end5
  store %struct.constraint* null, %struct.constraint** %retval, align 8, !dbg !12765
  br label %return, !dbg !12765

if.end10:                                         ; preds = %cond.end5
  %6 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %vec.addr, align 8, !dbg !12766
  %tobool11 = icmp ne %struct.VEC_constraint_t_heap* %6, null, !dbg !12766
  br i1 %tobool11, label %cond.true12, label %cond.false14, !dbg !12766

cond.true12:                                      ; preds = %if.end10
  %7 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %vec.addr, align 8, !dbg !12766
  %base13 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %7, i32 0, i32 0, !dbg !12766
  br label %cond.end15, !dbg !12766

cond.false14:                                     ; preds = %if.end10
  br label %cond.end15, !dbg !12766

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi %struct.VEC_constraint_t_base* [ %base13, %cond.true12 ], [ null, %cond.false14 ], !dbg !12766
  %8 = load i32, i32* %place, align 4, !dbg !12766
  %call17 = call %struct.constraint* @VEC_constraint_t_base_index(%struct.VEC_constraint_t_base* %cond16, i32 %8), !dbg !12766
  store %struct.constraint* %call17, %struct.constraint** %found, align 8, !dbg !12767
  %9 = load %struct.constraint*, %struct.constraint** %found, align 8, !dbg !12768
  %call18 = call zeroext i8 @constraint_equal(%struct.constraint* byval(%struct.constraint) align 8 %9, %struct.constraint* byval(%struct.constraint) align 8 %lookfor), !dbg !12770
  %tobool19 = icmp ne i8 %call18, 0, !dbg !12770
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !12771

if.then20:                                        ; preds = %cond.end15
  store %struct.constraint* null, %struct.constraint** %retval, align 8, !dbg !12772
  br label %return, !dbg !12772

if.end21:                                         ; preds = %cond.end15
  %10 = load %struct.constraint*, %struct.constraint** %found, align 8, !dbg !12773
  store %struct.constraint* %10, %struct.constraint** %retval, align 8, !dbg !12774
  br label %return, !dbg !12774

return:                                           ; preds = %if.end21, %if.then20, %if.then9, %if.then
  %11 = load %struct.constraint*, %struct.constraint** %retval, align 8, !dbg !12775
  ret %struct.constraint* %11, !dbg !12775
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constraint_t_base_lower_bound(%struct.VEC_constraint_t_base* %vec_, %struct.constraint* %obj_, i8 (%struct.constraint*, %struct.constraint*)* %lessthan_) #0 !dbg !12776 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_base*, align 8
  %obj_.addr = alloca %struct.constraint*, align 8
  %lessthan_.addr = alloca i8 (%struct.constraint*, %struct.constraint*)*, align 8
  %len_ = alloca i32, align 4
  %half_ = alloca i32, align 4
  %middle_ = alloca i32, align 4
  %first_ = alloca i32, align 4
  %middle_elem_ = alloca %struct.constraint*, align 8
  store %struct.VEC_constraint_t_base* %vec_, %struct.VEC_constraint_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_base** %vec_.addr, metadata !12783, metadata !DIExpression()), !dbg !12784
  store %struct.constraint* %obj_, %struct.constraint** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %obj_.addr, metadata !12785, metadata !DIExpression()), !dbg !12784
  store i8 (%struct.constraint*, %struct.constraint*)* %lessthan_, i8 (%struct.constraint*, %struct.constraint*)** %lessthan_.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%struct.constraint*, %struct.constraint*)** %lessthan_.addr, metadata !12786, metadata !DIExpression()), !dbg !12784
  call void @llvm.dbg.declare(metadata i32* %len_, metadata !12787, metadata !DIExpression()), !dbg !12784
  %0 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12784
  %call = call i32 @VEC_constraint_t_base_length(%struct.VEC_constraint_t_base* %0), !dbg !12784
  store i32 %call, i32* %len_, align 4, !dbg !12784
  call void @llvm.dbg.declare(metadata i32* %half_, metadata !12788, metadata !DIExpression()), !dbg !12784
  call void @llvm.dbg.declare(metadata i32* %middle_, metadata !12789, metadata !DIExpression()), !dbg !12784
  call void @llvm.dbg.declare(metadata i32* %first_, metadata !12790, metadata !DIExpression()), !dbg !12784
  store i32 0, i32* %first_, align 4, !dbg !12784
  br label %while.cond, !dbg !12784

while.cond:                                       ; preds = %if.end, %entry
  %1 = load i32, i32* %len_, align 4, !dbg !12784
  %cmp = icmp ugt i32 %1, 0, !dbg !12784
  br i1 %cmp, label %while.body, label %while.end, !dbg !12784

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.constraint** %middle_elem_, metadata !12791, metadata !DIExpression()), !dbg !12793
  %2 = load i32, i32* %len_, align 4, !dbg !12793
  %shr = lshr i32 %2, 1, !dbg !12793
  store i32 %shr, i32* %half_, align 4, !dbg !12793
  %3 = load i32, i32* %first_, align 4, !dbg !12793
  store i32 %3, i32* %middle_, align 4, !dbg !12793
  %4 = load i32, i32* %half_, align 4, !dbg !12793
  %5 = load i32, i32* %middle_, align 4, !dbg !12793
  %add = add i32 %5, %4, !dbg !12793
  store i32 %add, i32* %middle_, align 4, !dbg !12793
  %6 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12793
  %7 = load i32, i32* %middle_, align 4, !dbg !12793
  %call1 = call %struct.constraint* @VEC_constraint_t_base_index(%struct.VEC_constraint_t_base* %6, i32 %7), !dbg !12793
  store %struct.constraint* %call1, %struct.constraint** %middle_elem_, align 8, !dbg !12793
  %8 = load i8 (%struct.constraint*, %struct.constraint*)*, i8 (%struct.constraint*, %struct.constraint*)** %lessthan_.addr, align 8, !dbg !12794
  %9 = load %struct.constraint*, %struct.constraint** %middle_elem_, align 8, !dbg !12794
  %10 = load %struct.constraint*, %struct.constraint** %obj_.addr, align 8, !dbg !12794
  %call2 = call zeroext i8 %8(%struct.constraint* %9, %struct.constraint* %10), !dbg !12794
  %tobool = icmp ne i8 %call2, 0, !dbg !12794
  br i1 %tobool, label %if.then, label %if.else, !dbg !12793

if.then:                                          ; preds = %while.body
  %11 = load i32, i32* %middle_, align 4, !dbg !12796
  store i32 %11, i32* %first_, align 4, !dbg !12796
  %12 = load i32, i32* %first_, align 4, !dbg !12796
  %inc = add i32 %12, 1, !dbg !12796
  store i32 %inc, i32* %first_, align 4, !dbg !12796
  %13 = load i32, i32* %len_, align 4, !dbg !12796
  %14 = load i32, i32* %half_, align 4, !dbg !12796
  %sub = sub i32 %13, %14, !dbg !12796
  %sub3 = sub i32 %sub, 1, !dbg !12796
  store i32 %sub3, i32* %len_, align 4, !dbg !12796
  br label %if.end, !dbg !12796

if.else:                                          ; preds = %while.body
  %15 = load i32, i32* %half_, align 4, !dbg !12794
  store i32 %15, i32* %len_, align 4, !dbg !12794
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond, !dbg !12784, !llvm.loop !12798

while.end:                                        ; preds = %while.cond
  %16 = load i32, i32* %first_, align 4, !dbg !12784
  ret i32 %16, !dbg !12784
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @constraint_less(%struct.constraint* %a, %struct.constraint* %b) #0 !dbg !12799 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.constraint*, align 8
  %b.addr = alloca %struct.constraint*, align 8
  store %struct.constraint* %a, %struct.constraint** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %a.addr, metadata !12800, metadata !DIExpression()), !dbg !12801
  store %struct.constraint* %b, %struct.constraint** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %b.addr, metadata !12802, metadata !DIExpression()), !dbg !12803
  %0 = load %struct.constraint*, %struct.constraint** %a.addr, align 8, !dbg !12804
  %lhs = getelementptr inbounds %struct.constraint, %struct.constraint* %0, i32 0, i32 0, !dbg !12806
  %1 = load %struct.constraint*, %struct.constraint** %b.addr, align 8, !dbg !12807
  %lhs1 = getelementptr inbounds %struct.constraint, %struct.constraint* %1, i32 0, i32 0, !dbg !12808
  %2 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !12809
  %3 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 0, !dbg !12809
  %4 = load i64, i64* %3, align 8, !dbg !12809
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 1, !dbg !12809
  %6 = load i64, i64* %5, align 8, !dbg !12809
  %7 = bitcast %struct.constraint_expr* %lhs1 to { i64, i64 }*, !dbg !12809
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !12809
  %9 = load i64, i64* %8, align 8, !dbg !12809
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !12809
  %11 = load i64, i64* %10, align 8, !dbg !12809
  %call = call zeroext i8 @constraint_expr_less(i64 %4, i64 %6, i64 %9, i64 %11), !dbg !12809
  %tobool = icmp ne i8 %call, 0, !dbg !12809
  br i1 %tobool, label %if.then, label %if.else, !dbg !12810

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !12811
  br label %return, !dbg !12811

if.else:                                          ; preds = %entry
  %12 = load %struct.constraint*, %struct.constraint** %b.addr, align 8, !dbg !12812
  %lhs2 = getelementptr inbounds %struct.constraint, %struct.constraint* %12, i32 0, i32 0, !dbg !12814
  %13 = load %struct.constraint*, %struct.constraint** %a.addr, align 8, !dbg !12815
  %lhs3 = getelementptr inbounds %struct.constraint, %struct.constraint* %13, i32 0, i32 0, !dbg !12816
  %14 = bitcast %struct.constraint_expr* %lhs2 to { i64, i64 }*, !dbg !12817
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 0, !dbg !12817
  %16 = load i64, i64* %15, align 8, !dbg !12817
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 1, !dbg !12817
  %18 = load i64, i64* %17, align 8, !dbg !12817
  %19 = bitcast %struct.constraint_expr* %lhs3 to { i64, i64 }*, !dbg !12817
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 0, !dbg !12817
  %21 = load i64, i64* %20, align 8, !dbg !12817
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 1, !dbg !12817
  %23 = load i64, i64* %22, align 8, !dbg !12817
  %call4 = call zeroext i8 @constraint_expr_less(i64 %16, i64 %18, i64 %21, i64 %23), !dbg !12817
  %tobool5 = icmp ne i8 %call4, 0, !dbg !12817
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !12818

if.then6:                                         ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !12819
  br label %return, !dbg !12819

if.else7:                                         ; preds = %if.else
  %24 = load %struct.constraint*, %struct.constraint** %a.addr, align 8, !dbg !12820
  %rhs = getelementptr inbounds %struct.constraint, %struct.constraint* %24, i32 0, i32 1, !dbg !12821
  %25 = load %struct.constraint*, %struct.constraint** %b.addr, align 8, !dbg !12822
  %rhs8 = getelementptr inbounds %struct.constraint, %struct.constraint* %25, i32 0, i32 1, !dbg !12823
  %26 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !12824
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !12824
  %28 = load i64, i64* %27, align 8, !dbg !12824
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !12824
  %30 = load i64, i64* %29, align 8, !dbg !12824
  %31 = bitcast %struct.constraint_expr* %rhs8 to { i64, i64 }*, !dbg !12824
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !12824
  %33 = load i64, i64* %32, align 8, !dbg !12824
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !12824
  %35 = load i64, i64* %34, align 8, !dbg !12824
  %call9 = call zeroext i8 @constraint_expr_less(i64 %28, i64 %30, i64 %33, i64 %35), !dbg !12824
  store i8 %call9, i8* %retval, align 1, !dbg !12825
  br label %return, !dbg !12825

return:                                           ; preds = %if.else7, %if.then6, %if.then
  %36 = load i8, i8* %retval, align 1, !dbg !12826
  ret i8 %36, !dbg !12826
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint** @VEC_constraint_t_heap_safe_insert(%struct.VEC_constraint_t_heap** %vec_, i32 %ix_, %struct.constraint* %obj_) #0 !dbg !12827 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_heap**, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.constraint*, align 8
  store %struct.VEC_constraint_t_heap** %vec_, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_heap*** %vec_.addr, metadata !12830, metadata !DIExpression()), !dbg !12831
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12832, metadata !DIExpression()), !dbg !12831
  store %struct.constraint* %obj_, %struct.constraint** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %obj_.addr, metadata !12833, metadata !DIExpression()), !dbg !12831
  %0 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !12831
  %call = call i32 @VEC_constraint_t_heap_reserve(%struct.VEC_constraint_t_heap** %0, i32 1), !dbg !12831
  %1 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !12831
  %2 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %1, align 8, !dbg !12831
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %2, null, !dbg !12831
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12831

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %vec_.addr, align 8, !dbg !12831
  %4 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %3, align 8, !dbg !12831
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %4, i32 0, i32 0, !dbg !12831
  br label %cond.end, !dbg !12831

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12831

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12831
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !12831
  %6 = load %struct.constraint*, %struct.constraint** %obj_.addr, align 8, !dbg !12831
  %call1 = call %struct.constraint** @VEC_constraint_t_base_quick_insert(%struct.VEC_constraint_t_base* %cond, i32 %5, %struct.constraint* %6), !dbg !12831
  ret %struct.constraint** %call1, !dbg !12831
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constraint_t_base_length(%struct.VEC_constraint_t_base* %vec_) #0 !dbg !12834 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_base*, align 8
  store %struct.VEC_constraint_t_base* %vec_, %struct.VEC_constraint_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_base** %vec_.addr, metadata !12837, metadata !DIExpression()), !dbg !12838
  %0 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12838
  %tobool = icmp ne %struct.VEC_constraint_t_base* %0, null, !dbg !12838
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12838

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12838
  %num = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %1, i32 0, i32 0, !dbg !12838
  %2 = load i32, i32* %num, align 8, !dbg !12838
  br label %cond.end, !dbg !12838

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12838

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !12838
  ret i32 %cond, !dbg !12838
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint* @VEC_constraint_t_base_index(%struct.VEC_constraint_t_base* %vec_, i32 %ix_) #0 !dbg !12839 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_constraint_t_base* %vec_, %struct.VEC_constraint_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_base** %vec_.addr, metadata !12842, metadata !DIExpression()), !dbg !12843
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12844, metadata !DIExpression()), !dbg !12843
  %0 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12843
  %tobool = icmp ne %struct.VEC_constraint_t_base* %0, null, !dbg !12843
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12843

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !12843
  %2 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12843
  %num = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %2, i32 0, i32 0, !dbg !12843
  %3 = load i32, i32* %num, align 8, !dbg !12843
  %cmp = icmp ult i32 %1, %3, !dbg !12843
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !12845
  %land.ext = zext i1 %4 to i32, !dbg !12843
  %5 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12843
  %vec = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %5, i32 0, i32 2, !dbg !12843
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !12843
  %idxprom = zext i32 %6 to i64, !dbg !12843
  %arrayidx = getelementptr inbounds [1 x %struct.constraint*], [1 x %struct.constraint*]* %vec, i64 0, i64 %idxprom, !dbg !12843
  %7 = load %struct.constraint*, %struct.constraint** %arrayidx, align 8, !dbg !12843
  ret %struct.constraint* %7, !dbg !12843
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @constraint_equal(%struct.constraint* byval(%struct.constraint) align 8 %a, %struct.constraint* byval(%struct.constraint) align 8 %b) #0 !dbg !12846 {
entry:
  call void @llvm.dbg.declare(metadata %struct.constraint* %a, metadata !12849, metadata !DIExpression()), !dbg !12850
  call void @llvm.dbg.declare(metadata %struct.constraint* %b, metadata !12851, metadata !DIExpression()), !dbg !12852
  %lhs = getelementptr inbounds %struct.constraint, %struct.constraint* %a, i32 0, i32 0, !dbg !12853
  %lhs1 = getelementptr inbounds %struct.constraint, %struct.constraint* %b, i32 0, i32 0, !dbg !12854
  %0 = bitcast %struct.constraint_expr* %lhs to { i64, i64 }*, !dbg !12855
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !12855
  %2 = load i64, i64* %1, align 8, !dbg !12855
  %3 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !12855
  %4 = load i64, i64* %3, align 8, !dbg !12855
  %5 = bitcast %struct.constraint_expr* %lhs1 to { i64, i64 }*, !dbg !12855
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 0, !dbg !12855
  %7 = load i64, i64* %6, align 8, !dbg !12855
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 1, !dbg !12855
  %9 = load i64, i64* %8, align 8, !dbg !12855
  %call = call zeroext i8 @constraint_expr_equal(i64 %2, i64 %4, i64 %7, i64 %9), !dbg !12855
  %conv = zext i8 %call to i32, !dbg !12855
  %tobool = icmp ne i32 %conv, 0, !dbg !12855
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12856

land.rhs:                                         ; preds = %entry
  %rhs = getelementptr inbounds %struct.constraint, %struct.constraint* %a, i32 0, i32 1, !dbg !12857
  %rhs2 = getelementptr inbounds %struct.constraint, %struct.constraint* %b, i32 0, i32 1, !dbg !12858
  %10 = bitcast %struct.constraint_expr* %rhs to { i64, i64 }*, !dbg !12859
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i32 0, i32 0, !dbg !12859
  %12 = load i64, i64* %11, align 8, !dbg !12859
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i32 0, i32 1, !dbg !12859
  %14 = load i64, i64* %13, align 8, !dbg !12859
  %15 = bitcast %struct.constraint_expr* %rhs2 to { i64, i64 }*, !dbg !12859
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i32 0, i32 0, !dbg !12859
  %17 = load i64, i64* %16, align 8, !dbg !12859
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i32 0, i32 1, !dbg !12859
  %19 = load i64, i64* %18, align 8, !dbg !12859
  %call3 = call zeroext i8 @constraint_expr_equal(i64 %12, i64 %14, i64 %17, i64 %19), !dbg !12859
  %conv4 = zext i8 %call3 to i32, !dbg !12859
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !12856
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %20 = phi i1 [ false, %entry ], [ %tobool5, %land.rhs ], !dbg !12860
  %land.ext = zext i1 %20 to i32, !dbg !12856
  %conv6 = trunc i32 %land.ext to i8, !dbg !12855
  ret i8 %conv6, !dbg !12861
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @constraint_expr_equal(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !12862 {
entry:
  %a = alloca %struct.constraint_expr, align 8
  %b = alloca %struct.constraint_expr, align 8
  %0 = bitcast %struct.constraint_expr* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.constraint_expr* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %a, metadata !12865, metadata !DIExpression()), !dbg !12866
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %b, metadata !12867, metadata !DIExpression()), !dbg !12868
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %a, i32 0, i32 0, !dbg !12869
  %6 = load i32, i32* %type, align 8, !dbg !12869
  %type1 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %b, i32 0, i32 0, !dbg !12870
  %7 = load i32, i32* %type1, align 8, !dbg !12870
  %cmp = icmp eq i32 %6, %7, !dbg !12871
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !12872

land.lhs.true:                                    ; preds = %entry
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %a, i32 0, i32 1, !dbg !12873
  %8 = load i32, i32* %var, align 4, !dbg !12873
  %var2 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %b, i32 0, i32 1, !dbg !12874
  %9 = load i32, i32* %var2, align 4, !dbg !12874
  %cmp3 = icmp eq i32 %8, %9, !dbg !12875
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !12876

land.rhs:                                         ; preds = %land.lhs.true
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %a, i32 0, i32 2, !dbg !12877
  %10 = load i64, i64* %offset, align 8, !dbg !12877
  %offset4 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %b, i32 0, i32 2, !dbg !12878
  %11 = load i64, i64* %offset4, align 8, !dbg !12878
  %cmp5 = icmp eq i64 %10, %11, !dbg !12879
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %12 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp5, %land.rhs ], !dbg !12880
  %land.ext = zext i1 %12 to i32, !dbg !12876
  %conv = trunc i32 %land.ext to i8, !dbg !12881
  ret i8 %conv, !dbg !12882
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @constraint_expr_less(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #0 !dbg !12883 {
entry:
  %retval = alloca i8, align 1
  %a = alloca %struct.constraint_expr, align 8
  %b = alloca %struct.constraint_expr, align 8
  %0 = bitcast %struct.constraint_expr* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.constraint_expr* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %a, metadata !12884, metadata !DIExpression()), !dbg !12885
  call void @llvm.dbg.declare(metadata %struct.constraint_expr* %b, metadata !12886, metadata !DIExpression()), !dbg !12887
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %a, i32 0, i32 0, !dbg !12888
  %6 = load i32, i32* %type, align 8, !dbg !12888
  %type1 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %b, i32 0, i32 0, !dbg !12890
  %7 = load i32, i32* %type1, align 8, !dbg !12890
  %cmp = icmp eq i32 %6, %7, !dbg !12891
  br i1 %cmp, label %if.then, label %if.else13, !dbg !12892

if.then:                                          ; preds = %entry
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %a, i32 0, i32 1, !dbg !12893
  %8 = load i32, i32* %var, align 4, !dbg !12893
  %var2 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %b, i32 0, i32 1, !dbg !12896
  %9 = load i32, i32* %var2, align 4, !dbg !12896
  %cmp3 = icmp eq i32 %8, %9, !dbg !12897
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !12898

if.then4:                                         ; preds = %if.then
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %a, i32 0, i32 2, !dbg !12899
  %10 = load i64, i64* %offset, align 8, !dbg !12899
  %offset5 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %b, i32 0, i32 2, !dbg !12900
  %11 = load i64, i64* %offset5, align 8, !dbg !12900
  %cmp6 = icmp slt i64 %10, %11, !dbg !12901
  %conv = zext i1 %cmp6 to i32, !dbg !12901
  %conv7 = trunc i32 %conv to i8, !dbg !12902
  store i8 %conv7, i8* %retval, align 1, !dbg !12903
  br label %return, !dbg !12903

if.else:                                          ; preds = %if.then
  %var8 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %a, i32 0, i32 1, !dbg !12904
  %12 = load i32, i32* %var8, align 4, !dbg !12904
  %var9 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %b, i32 0, i32 1, !dbg !12905
  %13 = load i32, i32* %var9, align 4, !dbg !12905
  %cmp10 = icmp ult i32 %12, %13, !dbg !12906
  %conv11 = zext i1 %cmp10 to i32, !dbg !12906
  %conv12 = trunc i32 %conv11 to i8, !dbg !12907
  store i8 %conv12, i8* %retval, align 1, !dbg !12908
  br label %return, !dbg !12908

if.else13:                                        ; preds = %entry
  %type14 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %a, i32 0, i32 0, !dbg !12909
  %14 = load i32, i32* %type14, align 8, !dbg !12909
  %type15 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %b, i32 0, i32 0, !dbg !12910
  %15 = load i32, i32* %type15, align 8, !dbg !12910
  %cmp16 = icmp ult i32 %14, %15, !dbg !12911
  %conv17 = zext i1 %cmp16 to i32, !dbg !12911
  %conv18 = trunc i32 %conv17 to i8, !dbg !12912
  store i8 %conv18, i8* %retval, align 1, !dbg !12913
  br label %return, !dbg !12913

return:                                           ; preds = %if.else13, %if.else, %if.then4
  %16 = load i8, i8* %retval, align 1, !dbg !12914
  ret i8 %16, !dbg !12914
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constraint** @VEC_constraint_t_base_quick_insert(%struct.VEC_constraint_t_base* %vec_, i32 %ix_, %struct.constraint* %obj_) #0 !dbg !12915 {
entry:
  %vec_.addr = alloca %struct.VEC_constraint_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.constraint*, align 8
  %slot_ = alloca %struct.constraint**, align 8
  store %struct.VEC_constraint_t_base* %vec_, %struct.VEC_constraint_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_base** %vec_.addr, metadata !12918, metadata !DIExpression()), !dbg !12919
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12920, metadata !DIExpression()), !dbg !12919
  store %struct.constraint* %obj_, %struct.constraint** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %obj_.addr, metadata !12921, metadata !DIExpression()), !dbg !12919
  call void @llvm.dbg.declare(metadata %struct.constraint*** %slot_, metadata !12922, metadata !DIExpression()), !dbg !12919
  %0 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12919
  %num = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %0, i32 0, i32 0, !dbg !12919
  %1 = load i32, i32* %num, align 8, !dbg !12919
  %2 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12919
  %alloc = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %2, i32 0, i32 1, !dbg !12919
  %3 = load i32, i32* %alloc, align 4, !dbg !12919
  %cmp = icmp ult i32 %1, %3, !dbg !12919
  %conv = zext i1 %cmp to i32, !dbg !12919
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !12919
  %5 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12919
  %num1 = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %5, i32 0, i32 0, !dbg !12919
  %6 = load i32, i32* %num1, align 8, !dbg !12919
  %cmp2 = icmp ule i32 %4, %6, !dbg !12919
  %conv3 = zext i1 %cmp2 to i32, !dbg !12919
  %7 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12919
  %vec = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %7, i32 0, i32 2, !dbg !12919
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !12919
  %idxprom = zext i32 %8 to i64, !dbg !12919
  %arrayidx = getelementptr inbounds [1 x %struct.constraint*], [1 x %struct.constraint*]* %vec, i64 0, i64 %idxprom, !dbg !12919
  store %struct.constraint** %arrayidx, %struct.constraint*** %slot_, align 8, !dbg !12919
  %9 = load %struct.constraint**, %struct.constraint*** %slot_, align 8, !dbg !12919
  %add.ptr = getelementptr inbounds %struct.constraint*, %struct.constraint** %9, i64 1, !dbg !12919
  %10 = bitcast %struct.constraint** %add.ptr to i8*, !dbg !12919
  %11 = load %struct.constraint**, %struct.constraint*** %slot_, align 8, !dbg !12919
  %12 = bitcast %struct.constraint** %11 to i8*, !dbg !12919
  %13 = load %struct.VEC_constraint_t_base*, %struct.VEC_constraint_t_base** %vec_.addr, align 8, !dbg !12919
  %num4 = getelementptr inbounds %struct.VEC_constraint_t_base, %struct.VEC_constraint_t_base* %13, i32 0, i32 0, !dbg !12919
  %14 = load i32, i32* %num4, align 8, !dbg !12919
  %inc = add i32 %14, 1, !dbg !12919
  store i32 %inc, i32* %num4, align 8, !dbg !12919
  %15 = load i32, i32* %ix_.addr, align 4, !dbg !12919
  %sub = sub i32 %14, %15, !dbg !12919
  %conv5 = zext i32 %sub to i64, !dbg !12919
  %mul = mul i64 %conv5, 8, !dbg !12919
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 %mul, i1 false), !dbg !12919
  %16 = load %struct.constraint*, %struct.constraint** %obj_.addr, align 8, !dbg !12919
  %17 = load %struct.constraint**, %struct.constraint*** %slot_, align 8, !dbg !12919
  store %struct.constraint* %16, %struct.constraint** %17, align 8, !dbg !12919
  %18 = load %struct.constraint**, %struct.constraint*** %slot_, align 8, !dbg !12919
  ret %struct.constraint** %18, !dbg !12919
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @add_graph_edge(%struct.constraint_graph* %graph, i32 %to, i32 %from) #0 !dbg !12923 {
entry:
  %retval = alloca i8, align 1
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %to.addr = alloca i32, align 4
  %from.addr = alloca i32, align 4
  %r = alloca i8, align 1
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !12924, metadata !DIExpression()), !dbg !12925
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !12926, metadata !DIExpression()), !dbg !12927
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !12928, metadata !DIExpression()), !dbg !12929
  %0 = load i32, i32* %to.addr, align 4, !dbg !12930
  %1 = load i32, i32* %from.addr, align 4, !dbg !12932
  %cmp = icmp eq i32 %0, %1, !dbg !12933
  br i1 %cmp, label %if.then, label %if.else, !dbg !12934

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !12935
  br label %return, !dbg !12935

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %r, metadata !12937, metadata !DIExpression()), !dbg !12939
  store i8 0, i8* %r, align 1, !dbg !12939
  %2 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12940
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %2, i32 0, i32 1, !dbg !12942
  %3 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !12942
  %4 = load i32, i32* %from.addr, align 4, !dbg !12943
  %idxprom = zext i32 %4 to i64, !dbg !12940
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, i64 %idxprom, !dbg !12940
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !12940
  %tobool = icmp ne %struct.bitmap_head_def* %5, null, !dbg !12940
  br i1 %tobool, label %if.end, label %if.then1, !dbg !12944

if.then1:                                         ; preds = %if.else
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @pta_obstack), !dbg !12945
  %6 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12946
  %succs2 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %6, i32 0, i32 1, !dbg !12947
  %7 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs2, align 8, !dbg !12947
  %8 = load i32, i32* %from.addr, align 4, !dbg !12948
  %idxprom3 = zext i32 %8 to i64, !dbg !12946
  %arrayidx4 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %7, i64 %idxprom3, !dbg !12946
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %arrayidx4, align 8, !dbg !12949
  br label %if.end, !dbg !12946

if.end:                                           ; preds = %if.then1, %if.else
  %9 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !12950
  %succs5 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %9, i32 0, i32 1, !dbg !12952
  %10 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs5, align 8, !dbg !12952
  %11 = load i32, i32* %from.addr, align 4, !dbg !12953
  %idxprom6 = zext i32 %11 to i64, !dbg !12950
  %arrayidx7 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %10, i64 %idxprom6, !dbg !12950
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx7, align 8, !dbg !12950
  %13 = load i32, i32* %to.addr, align 4, !dbg !12954
  %call8 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %12, i32 %13), !dbg !12955
  %tobool9 = icmp ne i8 %call8, 0, !dbg !12955
  br i1 %tobool9, label %if.then10, label %if.end24, !dbg !12956

if.then10:                                        ; preds = %if.end
  store i8 1, i8* %r, align 1, !dbg !12957
  %14 = load i32, i32* %to.addr, align 4, !dbg !12959
  %15 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !12961
  %tobool11 = icmp ne %struct.VEC_varinfo_t_heap* %15, null, !dbg !12961
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !12961

cond.true:                                        ; preds = %if.then10
  %16 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !12961
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %16, i32 0, i32 0, !dbg !12961
  br label %cond.end, !dbg !12961

cond.false:                                       ; preds = %if.then10
  br label %cond.end, !dbg !12961

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12961
  %call12 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !12961
  %cmp13 = icmp ult i32 %14, %call12, !dbg !12962
  br i1 %cmp13, label %land.lhs.true, label %if.end23, !dbg !12963

land.lhs.true:                                    ; preds = %cond.end
  %17 = load i32, i32* %from.addr, align 4, !dbg !12964
  %18 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !12965
  %tobool14 = icmp ne %struct.VEC_varinfo_t_heap* %18, null, !dbg !12965
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !12965

cond.true15:                                      ; preds = %land.lhs.true
  %19 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !12965
  %base16 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %19, i32 0, i32 0, !dbg !12965
  br label %cond.end18, !dbg !12965

cond.false17:                                     ; preds = %land.lhs.true
  br label %cond.end18, !dbg !12965

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_varinfo_t_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !12965
  %call20 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond19), !dbg !12965
  %cmp21 = icmp ult i32 %17, %call20, !dbg !12966
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !12967

if.then22:                                        ; preds = %cond.end18
  %20 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 5), align 4, !dbg !12968
  %inc = add i32 %20, 1, !dbg !12968
  store i32 %inc, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 5), align 4, !dbg !12968
  br label %if.end23, !dbg !12969

if.end23:                                         ; preds = %if.then22, %cond.end18, %cond.end
  br label %if.end24, !dbg !12970

if.end24:                                         ; preds = %if.end23, %if.end
  %21 = load i8, i8* %r, align 1, !dbg !12971
  store i8 %21, i8* %retval, align 1, !dbg !12972
  br label %return, !dbg !12972

return:                                           ; preds = %if.end24, %if.then
  %22 = load i8, i8* %retval, align 1, !dbg !12973
  ret i8 %22, !dbg !12973
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_scc_info(%struct.scc_info* %si) #0 !dbg !12974 {
entry:
  %si.addr = alloca %struct.scc_info*, align 8
  store %struct.scc_info* %si, %struct.scc_info** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si.addr, metadata !12975, metadata !DIExpression()), !dbg !12976
  %0 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12977
  %visited = getelementptr inbounds %struct.scc_info, %struct.scc_info* %0, i32 0, i32 0, !dbg !12977
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !12977
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1, i32 0, i32 0, !dbg !12977
  %2 = load i8*, i8** %popcount, align 8, !dbg !12977
  call void @free(i8* %2), !dbg !12977
  %3 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12977
  %visited1 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %3, i32 0, i32 0, !dbg !12977
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited1, align 8, !dbg !12977
  %5 = bitcast %struct.simple_bitmap_def* %4 to i8*, !dbg !12977
  call void @free(i8* %5), !dbg !12977
  %6 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12978
  %deleted = getelementptr inbounds %struct.scc_info, %struct.scc_info* %6, i32 0, i32 1, !dbg !12978
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %deleted, align 8, !dbg !12978
  %popcount2 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !12978
  %8 = load i8*, i8** %popcount2, align 8, !dbg !12978
  call void @free(i8* %8), !dbg !12978
  %9 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12978
  %deleted3 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %9, i32 0, i32 1, !dbg !12978
  %10 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %deleted3, align 8, !dbg !12978
  %11 = bitcast %struct.simple_bitmap_def* %10 to i8*, !dbg !12978
  call void @free(i8* %11), !dbg !12978
  %12 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12979
  %node_mapping = getelementptr inbounds %struct.scc_info, %struct.scc_info* %12, i32 0, i32 3, !dbg !12980
  %13 = load i32*, i32** %node_mapping, align 8, !dbg !12980
  %14 = bitcast i32* %13 to i8*, !dbg !12979
  call void @free(i8* %14), !dbg !12981
  %15 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12982
  %dfs = getelementptr inbounds %struct.scc_info, %struct.scc_info* %15, i32 0, i32 2, !dbg !12983
  %16 = load i32*, i32** %dfs, align 8, !dbg !12983
  %17 = bitcast i32* %16 to i8*, !dbg !12982
  call void @free(i8* %17), !dbg !12984
  %18 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12985
  %scc_stack = getelementptr inbounds %struct.scc_info, %struct.scc_info* %18, i32 0, i32 5, !dbg !12985
  call void @VEC_unsigned_heap_free(%struct.VEC_unsigned_heap** %scc_stack), !dbg !12985
  %19 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !12986
  %20 = bitcast %struct.scc_info* %19 to i8*, !dbg !12986
  call void @free(i8* %20), !dbg !12987
  ret void, !dbg !12988
}

declare dso_local void @bitmap_obstack_release(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_unsigned_heap_free(%struct.VEC_unsigned_heap** %vec_) #0 !dbg !12989 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_heap**, align 8
  store %struct.VEC_unsigned_heap** %vec_, %struct.VEC_unsigned_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_heap*** %vec_.addr, metadata !12992, metadata !DIExpression()), !dbg !12993
  %0 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12994
  %1 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %0, align 8, !dbg !12994
  %tobool = icmp ne %struct.VEC_unsigned_heap* %1, null, !dbg !12994
  br i1 %tobool, label %if.then, label %if.end, !dbg !12993

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12994
  %3 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %2, align 8, !dbg !12994
  %4 = bitcast %struct.VEC_unsigned_heap* %3 to i8*, !dbg !12994
  call void @free(i8* %4), !dbg !12994
  br label %if.end, !dbg !12994

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12993
  store %struct.VEC_unsigned_heap* null, %struct.VEC_unsigned_heap** %5, align 8, !dbg !12993
  ret void, !dbg !12993
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_into_complex(%struct.constraint_graph* %graph, i32 %var, %struct.constraint* %c) #0 !dbg !12996 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %var.addr = alloca i32, align 4
  %c.addr = alloca %struct.constraint*, align 8
  %complex = alloca %struct.VEC_constraint_t_heap*, align 8
  %place = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !12999, metadata !DIExpression()), !dbg !13000
  store i32 %var, i32* %var.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %var.addr, metadata !13001, metadata !DIExpression()), !dbg !13002
  store %struct.constraint* %c, %struct.constraint** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %c.addr, metadata !13003, metadata !DIExpression()), !dbg !13004
  call void @llvm.dbg.declare(metadata %struct.VEC_constraint_t_heap** %complex, metadata !13005, metadata !DIExpression()), !dbg !13006
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13007
  %complex1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 15, !dbg !13008
  %1 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex1, align 8, !dbg !13008
  %2 = load i32, i32* %var.addr, align 4, !dbg !13009
  %idxprom = zext i32 %2 to i64, !dbg !13007
  %arrayidx = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %1, i64 %idxprom, !dbg !13007
  %3 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %arrayidx, align 8, !dbg !13007
  store %struct.VEC_constraint_t_heap* %3, %struct.VEC_constraint_t_heap** %complex, align 8, !dbg !13006
  call void @llvm.dbg.declare(metadata i32* %place, metadata !13010, metadata !DIExpression()), !dbg !13011
  %4 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %complex, align 8, !dbg !13012
  %tobool = icmp ne %struct.VEC_constraint_t_heap* %4, null, !dbg !13012
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13012

cond.true:                                        ; preds = %entry
  %5 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %complex, align 8, !dbg !13012
  %base = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %5, i32 0, i32 0, !dbg !13012
  br label %cond.end, !dbg !13012

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13012

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constraint_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13012
  %6 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13012
  %call = call i32 @VEC_constraint_t_base_lower_bound(%struct.VEC_constraint_t_base* %cond, %struct.constraint* %6, i8 (%struct.constraint*, %struct.constraint*)* @constraint_less), !dbg !13012
  store i32 %call, i32* %place, align 4, !dbg !13011
  %7 = load i32, i32* %place, align 4, !dbg !13013
  %8 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %complex, align 8, !dbg !13015
  %tobool2 = icmp ne %struct.VEC_constraint_t_heap* %8, null, !dbg !13015
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !13015

cond.true3:                                       ; preds = %cond.end
  %9 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %complex, align 8, !dbg !13015
  %base4 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %9, i32 0, i32 0, !dbg !13015
  br label %cond.end6, !dbg !13015

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !13015

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_constraint_t_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !13015
  %call8 = call i32 @VEC_constraint_t_base_length(%struct.VEC_constraint_t_base* %cond7), !dbg !13015
  %cmp = icmp uge i32 %7, %call8, !dbg !13016
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13017

lor.lhs.false:                                    ; preds = %cond.end6
  %10 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13018
  %11 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %complex, align 8, !dbg !13019
  %tobool9 = icmp ne %struct.VEC_constraint_t_heap* %11, null, !dbg !13019
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !13019

cond.true10:                                      ; preds = %lor.lhs.false
  %12 = load %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %complex, align 8, !dbg !13019
  %base11 = getelementptr inbounds %struct.VEC_constraint_t_heap, %struct.VEC_constraint_t_heap* %12, i32 0, i32 0, !dbg !13019
  br label %cond.end13, !dbg !13019

cond.false12:                                     ; preds = %lor.lhs.false
  br label %cond.end13, !dbg !13019

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_constraint_t_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !13019
  %13 = load i32, i32* %place, align 4, !dbg !13019
  %call15 = call %struct.constraint* @VEC_constraint_t_base_index(%struct.VEC_constraint_t_base* %cond14, i32 %13), !dbg !13019
  %call16 = call zeroext i8 @constraint_equal(%struct.constraint* byval(%struct.constraint) align 8 %10, %struct.constraint* byval(%struct.constraint) align 8 %call15), !dbg !13020
  %tobool17 = icmp ne i8 %call16, 0, !dbg !13020
  br i1 %tobool17, label %if.end, label %if.then, !dbg !13021

if.then:                                          ; preds = %cond.end13, %cond.end6
  %14 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13022
  %complex18 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %14, i32 0, i32 15, !dbg !13022
  %15 = load %struct.VEC_constraint_t_heap**, %struct.VEC_constraint_t_heap*** %complex18, align 8, !dbg !13022
  %16 = load i32, i32* %var.addr, align 4, !dbg !13022
  %idxprom19 = zext i32 %16 to i64, !dbg !13022
  %arrayidx20 = getelementptr inbounds %struct.VEC_constraint_t_heap*, %struct.VEC_constraint_t_heap** %15, i64 %idxprom19, !dbg !13022
  %17 = load i32, i32* %place, align 4, !dbg !13022
  %18 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13022
  %call21 = call %struct.constraint** @VEC_constraint_t_heap_safe_insert(%struct.VEC_constraint_t_heap** %arrayidx20, i32 %17, %struct.constraint* %18), !dbg !13022
  br label %if.end, !dbg !13022

if.end:                                           ; preds = %if.then, %cond.end13
  ret void, !dbg !13023
}

; Function Attrs: noinline nounwind uwtable
define internal void @scc_visit(%struct.constraint_graph* %graph, %struct.scc_info* %si, i32 %n) #0 !dbg !13024 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %si.addr = alloca %struct.scc_info*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %my_dfs = alloca i32, align 4
  %w = alloca i32, align 4
  %t = alloca i32, align 4
  %nnode = alloca i32, align 4
  %scc = alloca %struct.bitmap_head_def*, align 8
  %lowest_node = alloca i32, align 4
  %bi90 = alloca %struct.bitmap_iterator, align 8
  %w115 = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !13025, metadata !DIExpression()), !dbg !13026
  store %struct.scc_info* %si, %struct.scc_info** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.scc_info** %si.addr, metadata !13027, metadata !DIExpression()), !dbg !13028
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !13029, metadata !DIExpression()), !dbg !13030
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13031, metadata !DIExpression()), !dbg !13032
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13033, metadata !DIExpression()), !dbg !13034
  call void @llvm.dbg.declare(metadata i32* %my_dfs, metadata !13035, metadata !DIExpression()), !dbg !13036
  %0 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13037
  %visited = getelementptr inbounds %struct.scc_info, %struct.scc_info* %0, i32 0, i32 0, !dbg !13038
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !13038
  %2 = load i32, i32* %n.addr, align 4, !dbg !13039
  call void @SET_BIT(%struct.simple_bitmap_def* %1, i32 %2), !dbg !13040
  %3 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13041
  %current_index = getelementptr inbounds %struct.scc_info, %struct.scc_info* %3, i32 0, i32 4, !dbg !13042
  %4 = load i32, i32* %current_index, align 8, !dbg !13043
  %inc = add nsw i32 %4, 1, !dbg !13043
  store i32 %inc, i32* %current_index, align 8, !dbg !13043
  %5 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13044
  %dfs = getelementptr inbounds %struct.scc_info, %struct.scc_info* %5, i32 0, i32 2, !dbg !13045
  %6 = load i32*, i32** %dfs, align 8, !dbg !13045
  %7 = load i32, i32* %n.addr, align 4, !dbg !13046
  %idxprom = zext i32 %7 to i64, !dbg !13044
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !13044
  store i32 %4, i32* %arrayidx, align 4, !dbg !13047
  %8 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13048
  %dfs1 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %8, i32 0, i32 2, !dbg !13049
  %9 = load i32*, i32** %dfs1, align 8, !dbg !13049
  %10 = load i32, i32* %n.addr, align 4, !dbg !13050
  %idxprom2 = zext i32 %10 to i64, !dbg !13048
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i64 %idxprom2, !dbg !13048
  %11 = load i32, i32* %arrayidx3, align 4, !dbg !13048
  store i32 %11, i32* %my_dfs, align 4, !dbg !13051
  %12 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13052
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %12, i32 0, i32 1, !dbg !13052
  %13 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !13052
  %14 = load i32, i32* %n.addr, align 4, !dbg !13052
  %idxprom4 = zext i32 %14 to i64, !dbg !13052
  %arrayidx5 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %13, i64 %idxprom4, !dbg !13052
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx5, align 8, !dbg !13052
  %tobool = icmp ne %struct.bitmap_head_def* %15, null, !dbg !13052
  br i1 %tobool, label %if.then, label %if.end60, !dbg !13054

if.then:                                          ; preds = %entry
  %16 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13055
  %succs6 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %16, i32 0, i32 1, !dbg !13055
  %17 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs6, align 8, !dbg !13055
  %18 = load i32, i32* %n.addr, align 4, !dbg !13055
  %idxprom7 = zext i32 %18 to i64, !dbg !13055
  %arrayidx8 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %17, i64 %idxprom7, !dbg !13055
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx8, align 8, !dbg !13055
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %19, i32 0, i32* %i), !dbg !13055
  br label %for.cond, !dbg !13055

for.cond:                                         ; preds = %for.inc, %if.then
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13057
  %tobool9 = icmp ne i8 %call, 0, !dbg !13055
  br i1 %tobool9, label %for.body, label %for.end, !dbg !13055

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %w, metadata !13059, metadata !DIExpression()), !dbg !13061
  %20 = load i32, i32* %i, align 4, !dbg !13062
  %21 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13064
  %tobool10 = icmp ne %struct.VEC_varinfo_t_heap* %21, null, !dbg !13064
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !13064

cond.true:                                        ; preds = %for.body
  %22 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13064
  %base = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %22, i32 0, i32 0, !dbg !13064
  br label %cond.end, !dbg !13064

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !13064

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_varinfo_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13064
  %call11 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond), !dbg !13064
  %23 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13064
  %tobool12 = icmp ne %struct.VEC_varinfo_t_heap* %23, null, !dbg !13064
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !13064

cond.true13:                                      ; preds = %cond.end
  %24 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13064
  %base14 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %24, i32 0, i32 0, !dbg !13064
  br label %cond.end16, !dbg !13064

cond.false15:                                     ; preds = %cond.end
  br label %cond.end16, !dbg !13064

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_varinfo_t_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !13064
  %call18 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond17), !dbg !13064
  %sub = sub i32 %call18, 1, !dbg !13064
  %add = add i32 %call11, %sub, !dbg !13064
  %cmp = icmp ugt i32 %20, %add, !dbg !13065
  br i1 %cmp, label %if.then19, label %if.end, !dbg !13066

if.then19:                                        ; preds = %cond.end16
  br label %for.end, !dbg !13067

if.end:                                           ; preds = %cond.end16
  %25 = load i32, i32* %i, align 4, !dbg !13068
  %call20 = call i32 @find(i32 %25), !dbg !13069
  store i32 %call20, i32* %w, align 4, !dbg !13070
  %26 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13071
  %deleted = getelementptr inbounds %struct.scc_info, %struct.scc_info* %26, i32 0, i32 1, !dbg !13071
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %deleted, align 8, !dbg !13071
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %27, i32 0, i32 3, !dbg !13071
  %28 = load i32, i32* %w, align 4, !dbg !13071
  %div = udiv i32 %28, 64, !dbg !13071
  %idxprom21 = zext i32 %div to i64, !dbg !13071
  %arrayidx22 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom21, !dbg !13071
  %29 = load i64, i64* %arrayidx22, align 8, !dbg !13071
  %30 = load i32, i32* %w, align 4, !dbg !13071
  %rem = urem i32 %30, 64, !dbg !13071
  %sh_prom = zext i32 %rem to i64, !dbg !13071
  %shr = lshr i64 %29, %sh_prom, !dbg !13071
  %and = and i64 %shr, 1, !dbg !13071
  %tobool23 = icmp ne i64 %and, 0, !dbg !13071
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !13073

if.then24:                                        ; preds = %if.end
  br label %for.inc, !dbg !13074

if.end25:                                         ; preds = %if.end
  %31 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13075
  %visited26 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %31, i32 0, i32 0, !dbg !13075
  %32 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited26, align 8, !dbg !13075
  %elms27 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %32, i32 0, i32 3, !dbg !13075
  %33 = load i32, i32* %w, align 4, !dbg !13075
  %div28 = udiv i32 %33, 64, !dbg !13075
  %idxprom29 = zext i32 %div28 to i64, !dbg !13075
  %arrayidx30 = getelementptr inbounds [1 x i64], [1 x i64]* %elms27, i64 0, i64 %idxprom29, !dbg !13075
  %34 = load i64, i64* %arrayidx30, align 8, !dbg !13075
  %35 = load i32, i32* %w, align 4, !dbg !13075
  %rem31 = urem i32 %35, 64, !dbg !13075
  %sh_prom32 = zext i32 %rem31 to i64, !dbg !13075
  %shr33 = lshr i64 %34, %sh_prom32, !dbg !13075
  %and34 = and i64 %shr33, 1, !dbg !13075
  %tobool35 = icmp ne i64 %and34, 0, !dbg !13075
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !13077

if.then36:                                        ; preds = %if.end25
  %36 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13078
  %37 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13079
  %38 = load i32, i32* %w, align 4, !dbg !13080
  call void @scc_visit(%struct.constraint_graph* %36, %struct.scc_info* %37, i32 %38), !dbg !13081
  br label %if.end37, !dbg !13081

if.end37:                                         ; preds = %if.then36, %if.end25
  call void @llvm.dbg.declare(metadata i32* %t, metadata !13082, metadata !DIExpression()), !dbg !13084
  %39 = load i32, i32* %w, align 4, !dbg !13085
  %call38 = call i32 @find(i32 %39), !dbg !13086
  store i32 %call38, i32* %t, align 4, !dbg !13084
  call void @llvm.dbg.declare(metadata i32* %nnode, metadata !13087, metadata !DIExpression()), !dbg !13088
  %40 = load i32, i32* %n.addr, align 4, !dbg !13089
  %call39 = call i32 @find(i32 %40), !dbg !13090
  store i32 %call39, i32* %nnode, align 4, !dbg !13088
  %41 = load i32, i32* %nnode, align 4, !dbg !13091
  %42 = load i32, i32* %n.addr, align 4, !dbg !13091
  %cmp40 = icmp eq i32 %41, %42, !dbg !13091
  br i1 %cmp40, label %cond.false42, label %cond.true41, !dbg !13091

cond.true41:                                      ; preds = %if.end37
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1344, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !13091
  br label %cond.end43, !dbg !13091

cond.false42:                                     ; preds = %if.end37
  br label %cond.end43, !dbg !13091

cond.end43:                                       ; preds = %cond.false42, %cond.true41
  %cond44 = phi i32 [ 0, %cond.true41 ], [ 0, %cond.false42 ], !dbg !13091
  %43 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13092
  %dfs45 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %43, i32 0, i32 2, !dbg !13094
  %44 = load i32*, i32** %dfs45, align 8, !dbg !13094
  %45 = load i32, i32* %t, align 4, !dbg !13095
  %idxprom46 = zext i32 %45 to i64, !dbg !13092
  %arrayidx47 = getelementptr inbounds i32, i32* %44, i64 %idxprom46, !dbg !13092
  %46 = load i32, i32* %arrayidx47, align 4, !dbg !13092
  %47 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13096
  %dfs48 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %47, i32 0, i32 2, !dbg !13097
  %48 = load i32*, i32** %dfs48, align 8, !dbg !13097
  %49 = load i32, i32* %nnode, align 4, !dbg !13098
  %idxprom49 = zext i32 %49 to i64, !dbg !13096
  %arrayidx50 = getelementptr inbounds i32, i32* %48, i64 %idxprom49, !dbg !13096
  %50 = load i32, i32* %arrayidx50, align 4, !dbg !13096
  %cmp51 = icmp ult i32 %46, %50, !dbg !13099
  br i1 %cmp51, label %if.then52, label %if.end59, !dbg !13100

if.then52:                                        ; preds = %cond.end43
  %51 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13101
  %dfs53 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %51, i32 0, i32 2, !dbg !13102
  %52 = load i32*, i32** %dfs53, align 8, !dbg !13102
  %53 = load i32, i32* %t, align 4, !dbg !13103
  %idxprom54 = zext i32 %53 to i64, !dbg !13101
  %arrayidx55 = getelementptr inbounds i32, i32* %52, i64 %idxprom54, !dbg !13101
  %54 = load i32, i32* %arrayidx55, align 4, !dbg !13101
  %55 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13104
  %dfs56 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %55, i32 0, i32 2, !dbg !13105
  %56 = load i32*, i32** %dfs56, align 8, !dbg !13105
  %57 = load i32, i32* %n.addr, align 4, !dbg !13106
  %idxprom57 = zext i32 %57 to i64, !dbg !13104
  %arrayidx58 = getelementptr inbounds i32, i32* %56, i64 %idxprom57, !dbg !13104
  store i32 %54, i32* %arrayidx58, align 4, !dbg !13107
  br label %if.end59, !dbg !13104

if.end59:                                         ; preds = %if.then52, %cond.end43
  br label %for.inc, !dbg !13108

for.inc:                                          ; preds = %if.end59, %if.then24
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13057
  br label %for.cond, !dbg !13057, !llvm.loop !13109

for.end:                                          ; preds = %if.then19, %for.cond
  br label %if.end60, !dbg !13110

if.end60:                                         ; preds = %for.end, %entry
  %58 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13111
  %dfs61 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %58, i32 0, i32 2, !dbg !13113
  %59 = load i32*, i32** %dfs61, align 8, !dbg !13113
  %60 = load i32, i32* %n.addr, align 4, !dbg !13114
  %idxprom62 = zext i32 %60 to i64, !dbg !13111
  %arrayidx63 = getelementptr inbounds i32, i32* %59, i64 %idxprom62, !dbg !13111
  %61 = load i32, i32* %arrayidx63, align 4, !dbg !13111
  %62 = load i32, i32* %my_dfs, align 4, !dbg !13115
  %cmp64 = icmp eq i32 %61, %62, !dbg !13116
  br i1 %cmp64, label %if.then65, label %if.else172, !dbg !13117

if.then65:                                        ; preds = %if.end60
  %63 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13118
  %scc_stack = getelementptr inbounds %struct.scc_info, %struct.scc_info* %63, i32 0, i32 5, !dbg !13118
  %64 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack, align 8, !dbg !13118
  %tobool66 = icmp ne %struct.VEC_unsigned_heap* %64, null, !dbg !13118
  br i1 %tobool66, label %cond.true67, label %cond.false70, !dbg !13118

cond.true67:                                      ; preds = %if.then65
  %65 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13118
  %scc_stack68 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %65, i32 0, i32 5, !dbg !13118
  %66 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack68, align 8, !dbg !13118
  %base69 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %66, i32 0, i32 0, !dbg !13118
  br label %cond.end71, !dbg !13118

cond.false70:                                     ; preds = %if.then65
  br label %cond.end71, !dbg !13118

cond.end71:                                       ; preds = %cond.false70, %cond.true67
  %cond72 = phi %struct.VEC_unsigned_base* [ %base69, %cond.true67 ], [ null, %cond.false70 ], !dbg !13118
  %call73 = call i32 @VEC_unsigned_base_length(%struct.VEC_unsigned_base* %cond72), !dbg !13118
  %cmp74 = icmp ugt i32 %call73, 0, !dbg !13121
  br i1 %cmp74, label %land.lhs.true, label %if.end170, !dbg !13122

land.lhs.true:                                    ; preds = %cond.end71
  %67 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13123
  %dfs75 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %67, i32 0, i32 2, !dbg !13124
  %68 = load i32*, i32** %dfs75, align 8, !dbg !13124
  %69 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13125
  %scc_stack76 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %69, i32 0, i32 5, !dbg !13125
  %70 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack76, align 8, !dbg !13125
  %tobool77 = icmp ne %struct.VEC_unsigned_heap* %70, null, !dbg !13125
  br i1 %tobool77, label %cond.true78, label %cond.false81, !dbg !13125

cond.true78:                                      ; preds = %land.lhs.true
  %71 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13125
  %scc_stack79 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %71, i32 0, i32 5, !dbg !13125
  %72 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack79, align 8, !dbg !13125
  %base80 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %72, i32 0, i32 0, !dbg !13125
  br label %cond.end82, !dbg !13125

cond.false81:                                     ; preds = %land.lhs.true
  br label %cond.end82, !dbg !13125

cond.end82:                                       ; preds = %cond.false81, %cond.true78
  %cond83 = phi %struct.VEC_unsigned_base* [ %base80, %cond.true78 ], [ null, %cond.false81 ], !dbg !13125
  %call84 = call i32 @VEC_unsigned_base_last(%struct.VEC_unsigned_base* %cond83), !dbg !13125
  %idxprom85 = zext i32 %call84 to i64, !dbg !13123
  %arrayidx86 = getelementptr inbounds i32, i32* %68, i64 %idxprom85, !dbg !13123
  %73 = load i32, i32* %arrayidx86, align 4, !dbg !13123
  %74 = load i32, i32* %my_dfs, align 4, !dbg !13126
  %cmp87 = icmp uge i32 %73, %74, !dbg !13127
  br i1 %cmp87, label %if.then88, label %if.end170, !dbg !13128

if.then88:                                        ; preds = %cond.end82
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %scc, metadata !13129, metadata !DIExpression()), !dbg !13131
  %call89 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !13132
  store %struct.bitmap_head_def* %call89, %struct.bitmap_head_def** %scc, align 8, !dbg !13131
  call void @llvm.dbg.declare(metadata i32* %lowest_node, metadata !13133, metadata !DIExpression()), !dbg !13134
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi90, metadata !13135, metadata !DIExpression()), !dbg !13136
  %75 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %scc, align 8, !dbg !13137
  %76 = load i32, i32* %n.addr, align 4, !dbg !13138
  %call91 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %75, i32 %76), !dbg !13139
  br label %while.cond, !dbg !13140

while.cond:                                       ; preds = %cond.end122, %if.then88
  %77 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13141
  %scc_stack92 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %77, i32 0, i32 5, !dbg !13141
  %78 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack92, align 8, !dbg !13141
  %tobool93 = icmp ne %struct.VEC_unsigned_heap* %78, null, !dbg !13141
  br i1 %tobool93, label %cond.true94, label %cond.false97, !dbg !13141

cond.true94:                                      ; preds = %while.cond
  %79 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13141
  %scc_stack95 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %79, i32 0, i32 5, !dbg !13141
  %80 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack95, align 8, !dbg !13141
  %base96 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %80, i32 0, i32 0, !dbg !13141
  br label %cond.end98, !dbg !13141

cond.false97:                                     ; preds = %while.cond
  br label %cond.end98, !dbg !13141

cond.end98:                                       ; preds = %cond.false97, %cond.true94
  %cond99 = phi %struct.VEC_unsigned_base* [ %base96, %cond.true94 ], [ null, %cond.false97 ], !dbg !13141
  %call100 = call i32 @VEC_unsigned_base_length(%struct.VEC_unsigned_base* %cond99), !dbg !13141
  %cmp101 = icmp ne i32 %call100, 0, !dbg !13142
  br i1 %cmp101, label %land.rhs, label %land.end, !dbg !13143

land.rhs:                                         ; preds = %cond.end98
  %81 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13144
  %dfs102 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %81, i32 0, i32 2, !dbg !13145
  %82 = load i32*, i32** %dfs102, align 8, !dbg !13145
  %83 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13146
  %scc_stack103 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %83, i32 0, i32 5, !dbg !13146
  %84 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack103, align 8, !dbg !13146
  %tobool104 = icmp ne %struct.VEC_unsigned_heap* %84, null, !dbg !13146
  br i1 %tobool104, label %cond.true105, label %cond.false108, !dbg !13146

cond.true105:                                     ; preds = %land.rhs
  %85 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13146
  %scc_stack106 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %85, i32 0, i32 5, !dbg !13146
  %86 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack106, align 8, !dbg !13146
  %base107 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %86, i32 0, i32 0, !dbg !13146
  br label %cond.end109, !dbg !13146

cond.false108:                                    ; preds = %land.rhs
  br label %cond.end109, !dbg !13146

cond.end109:                                      ; preds = %cond.false108, %cond.true105
  %cond110 = phi %struct.VEC_unsigned_base* [ %base107, %cond.true105 ], [ null, %cond.false108 ], !dbg !13146
  %call111 = call i32 @VEC_unsigned_base_last(%struct.VEC_unsigned_base* %cond110), !dbg !13146
  %idxprom112 = zext i32 %call111 to i64, !dbg !13144
  %arrayidx113 = getelementptr inbounds i32, i32* %82, i64 %idxprom112, !dbg !13144
  %87 = load i32, i32* %arrayidx113, align 4, !dbg !13144
  %88 = load i32, i32* %my_dfs, align 4, !dbg !13147
  %cmp114 = icmp uge i32 %87, %88, !dbg !13148
  br label %land.end

land.end:                                         ; preds = %cond.end109, %cond.end98
  %89 = phi i1 [ false, %cond.end98 ], [ %cmp114, %cond.end109 ], !dbg !13149
  br i1 %89, label %while.body, label %while.end, !dbg !13140

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %w115, metadata !13150, metadata !DIExpression()), !dbg !13152
  %90 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13153
  %scc_stack116 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %90, i32 0, i32 5, !dbg !13153
  %91 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack116, align 8, !dbg !13153
  %tobool117 = icmp ne %struct.VEC_unsigned_heap* %91, null, !dbg !13153
  br i1 %tobool117, label %cond.true118, label %cond.false121, !dbg !13153

cond.true118:                                     ; preds = %while.body
  %92 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13153
  %scc_stack119 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %92, i32 0, i32 5, !dbg !13153
  %93 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %scc_stack119, align 8, !dbg !13153
  %base120 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %93, i32 0, i32 0, !dbg !13153
  br label %cond.end122, !dbg !13153

cond.false121:                                    ; preds = %while.body
  br label %cond.end122, !dbg !13153

cond.end122:                                      ; preds = %cond.false121, %cond.true118
  %cond123 = phi %struct.VEC_unsigned_base* [ %base120, %cond.true118 ], [ null, %cond.false121 ], !dbg !13153
  %call124 = call i32 @VEC_unsigned_base_pop(%struct.VEC_unsigned_base* %cond123), !dbg !13153
  store i32 %call124, i32* %w115, align 4, !dbg !13152
  %94 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %scc, align 8, !dbg !13154
  %95 = load i32, i32* %w115, align 4, !dbg !13155
  %call125 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %94, i32 %95), !dbg !13156
  br label %while.cond, !dbg !13140, !llvm.loop !13157

while.end:                                        ; preds = %land.end
  %96 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %scc, align 8, !dbg !13159
  %call126 = call i32 @bitmap_first_set_bit(%struct.bitmap_head_def* %96), !dbg !13160
  store i32 %call126, i32* %lowest_node, align 4, !dbg !13161
  %97 = load i32, i32* %lowest_node, align 4, !dbg !13162
  %98 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13162
  %tobool127 = icmp ne %struct.VEC_varinfo_t_heap* %98, null, !dbg !13162
  br i1 %tobool127, label %cond.true128, label %cond.false130, !dbg !13162

cond.true128:                                     ; preds = %while.end
  %99 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13162
  %base129 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %99, i32 0, i32 0, !dbg !13162
  br label %cond.end131, !dbg !13162

cond.false130:                                    ; preds = %while.end
  br label %cond.end131, !dbg !13162

cond.end131:                                      ; preds = %cond.false130, %cond.true128
  %cond132 = phi %struct.VEC_varinfo_t_base* [ %base129, %cond.true128 ], [ null, %cond.false130 ], !dbg !13162
  %call133 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond132), !dbg !13162
  %cmp134 = icmp ult i32 %97, %call133, !dbg !13162
  br i1 %cmp134, label %cond.false136, label %cond.true135, !dbg !13162

cond.true135:                                     ; preds = %cond.end131
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1372, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !13162
  br label %cond.end137, !dbg !13162

cond.false136:                                    ; preds = %cond.end131
  br label %cond.end137, !dbg !13162

cond.end137:                                      ; preds = %cond.false136, %cond.true135
  %cond138 = phi i32 [ 0, %cond.true135 ], [ 0, %cond.false136 ], !dbg !13162
  %100 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %scc, align 8, !dbg !13163
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi90, %struct.bitmap_head_def* %100, i32 0, i32* %i), !dbg !13163
  br label %for.cond139, !dbg !13163

for.cond139:                                      ; preds = %for.inc168, %cond.end137
  %call140 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi90, i32* %i), !dbg !13165
  %tobool141 = icmp ne i8 %call140, 0, !dbg !13163
  br i1 %tobool141, label %for.body142, label %for.end169, !dbg !13163

for.body142:                                      ; preds = %for.cond139
  %101 = load i32, i32* %i, align 4, !dbg !13167
  %102 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13170
  %tobool143 = icmp ne %struct.VEC_varinfo_t_heap* %102, null, !dbg !13170
  br i1 %tobool143, label %cond.true144, label %cond.false146, !dbg !13170

cond.true144:                                     ; preds = %for.body142
  %103 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13170
  %base145 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %103, i32 0, i32 0, !dbg !13170
  br label %cond.end147, !dbg !13170

cond.false146:                                    ; preds = %for.body142
  br label %cond.end147, !dbg !13170

cond.end147:                                      ; preds = %cond.false146, %cond.true144
  %cond148 = phi %struct.VEC_varinfo_t_base* [ %base145, %cond.true144 ], [ null, %cond.false146 ], !dbg !13170
  %call149 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond148), !dbg !13170
  %cmp150 = icmp ult i32 %101, %call149, !dbg !13171
  br i1 %cmp150, label %if.then151, label %if.else, !dbg !13172

if.then151:                                       ; preds = %cond.end147
  %104 = load i32, i32* %lowest_node, align 4, !dbg !13173
  %105 = load i32, i32* %i, align 4, !dbg !13176
  %call152 = call zeroext i8 @unite(i32 %104, i32 %105), !dbg !13177
  %tobool153 = icmp ne i8 %call152, 0, !dbg !13177
  br i1 %tobool153, label %if.then154, label %if.end155, !dbg !13178

if.then154:                                       ; preds = %if.then151
  %106 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13179
  %107 = load i32, i32* %lowest_node, align 4, !dbg !13180
  %108 = load i32, i32* %i, align 4, !dbg !13181
  call void @unify_nodes(%struct.constraint_graph* %106, i32 %107, i32 %108, i8 zeroext 0), !dbg !13182
  br label %if.end155, !dbg !13182

if.end155:                                        ; preds = %if.then154, %if.then151
  br label %if.end167, !dbg !13183

if.else:                                          ; preds = %cond.end147
  %109 = load i32, i32* %lowest_node, align 4, !dbg !13184
  %110 = load i32, i32* %i, align 4, !dbg !13186
  %call156 = call zeroext i8 @unite(i32 %109, i32 %110), !dbg !13187
  %111 = load i32, i32* %lowest_node, align 4, !dbg !13188
  %112 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13189
  %indirect_cycles = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %112, i32 0, i32 4, !dbg !13190
  %113 = load i32*, i32** %indirect_cycles, align 8, !dbg !13190
  %114 = load i32, i32* %i, align 4, !dbg !13191
  %115 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13192
  %tobool157 = icmp ne %struct.VEC_varinfo_t_heap* %115, null, !dbg !13192
  br i1 %tobool157, label %cond.true158, label %cond.false160, !dbg !13192

cond.true158:                                     ; preds = %if.else
  %116 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** @varmap, align 8, !dbg !13192
  %base159 = getelementptr inbounds %struct.VEC_varinfo_t_heap, %struct.VEC_varinfo_t_heap* %116, i32 0, i32 0, !dbg !13192
  br label %cond.end161, !dbg !13192

cond.false160:                                    ; preds = %if.else
  br label %cond.end161, !dbg !13192

cond.end161:                                      ; preds = %cond.false160, %cond.true158
  %cond162 = phi %struct.VEC_varinfo_t_base* [ %base159, %cond.true158 ], [ null, %cond.false160 ], !dbg !13192
  %call163 = call i32 @VEC_varinfo_t_base_length(%struct.VEC_varinfo_t_base* %cond162), !dbg !13192
  %sub164 = sub i32 %114, %call163, !dbg !13193
  %idxprom165 = zext i32 %sub164 to i64, !dbg !13189
  %arrayidx166 = getelementptr inbounds i32, i32* %113, i64 %idxprom165, !dbg !13189
  store i32 %111, i32* %arrayidx166, align 4, !dbg !13194
  br label %if.end167

if.end167:                                        ; preds = %cond.end161, %if.end155
  br label %for.inc168, !dbg !13195

for.inc168:                                       ; preds = %if.end167
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi90, i32* %i), !dbg !13165
  br label %for.cond139, !dbg !13165, !llvm.loop !13196

for.end169:                                       ; preds = %for.cond139
  br label %if.end170, !dbg !13198

if.end170:                                        ; preds = %for.end169, %cond.end82, %cond.end71
  %117 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13199
  %deleted171 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %117, i32 0, i32 1, !dbg !13200
  %118 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %deleted171, align 8, !dbg !13200
  %119 = load i32, i32* %n.addr, align 4, !dbg !13201
  call void @SET_BIT(%struct.simple_bitmap_def* %118, i32 %119), !dbg !13202
  br label %if.end175, !dbg !13203

if.else172:                                       ; preds = %if.end60
  %120 = load %struct.scc_info*, %struct.scc_info** %si.addr, align 8, !dbg !13204
  %scc_stack173 = getelementptr inbounds %struct.scc_info, %struct.scc_info* %120, i32 0, i32 5, !dbg !13204
  %121 = load i32, i32* %n.addr, align 4, !dbg !13204
  %call174 = call i32* @VEC_unsigned_heap_safe_push(%struct.VEC_unsigned_heap** %scc_stack173, i32 %121), !dbg !13204
  br label %if.end175

if.end175:                                        ; preds = %if.else172, %if.end170
  ret void, !dbg !13205
}

declare dso_local i32 @bitmap_first_set_bit(%struct.bitmap_head_def*) #2

declare dso_local void @bitmap_clear_range(%struct.bitmap_head_def*, i32, i32) #2

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.topo_info* @init_topo_info() #0 !dbg !13206 {
entry:
  %size = alloca i64, align 8
  %ti = alloca %struct.topo_info*, align 8
  call void @llvm.dbg.declare(metadata i64* %size, metadata !13209, metadata !DIExpression()), !dbg !13210
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !13211
  %size1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 0, !dbg !13212
  %1 = load i32, i32* %size1, align 8, !dbg !13212
  %conv = zext i32 %1 to i64, !dbg !13211
  store i64 %conv, i64* %size, align 8, !dbg !13210
  call void @llvm.dbg.declare(metadata %struct.topo_info** %ti, metadata !13213, metadata !DIExpression()), !dbg !13214
  %call = call i8* @xmalloc(i64 16), !dbg !13215
  %2 = bitcast i8* %call to %struct.topo_info*, !dbg !13215
  store %struct.topo_info* %2, %struct.topo_info** %ti, align 8, !dbg !13214
  %3 = load i64, i64* %size, align 8, !dbg !13216
  %conv2 = trunc i64 %3 to i32, !dbg !13216
  %call3 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %conv2), !dbg !13217
  %4 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !13218
  %visited = getelementptr inbounds %struct.topo_info, %struct.topo_info* %4, i32 0, i32 0, !dbg !13219
  store %struct.simple_bitmap_def* %call3, %struct.simple_bitmap_def** %visited, align 8, !dbg !13220
  %5 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !13221
  %visited4 = getelementptr inbounds %struct.topo_info, %struct.topo_info* %5, i32 0, i32 0, !dbg !13222
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited4, align 8, !dbg !13222
  call void @sbitmap_zero(%struct.simple_bitmap_def* %6), !dbg !13223
  %call5 = call %struct.VEC_unsigned_heap* @VEC_unsigned_heap_alloc(i32 1), !dbg !13224
  %7 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !13225
  %topo_order = getelementptr inbounds %struct.topo_info, %struct.topo_info* %7, i32 0, i32 1, !dbg !13226
  store %struct.VEC_unsigned_heap* %call5, %struct.VEC_unsigned_heap** %topo_order, align 8, !dbg !13227
  %8 = load %struct.topo_info*, %struct.topo_info** %ti, align 8, !dbg !13228
  ret %struct.topo_info* %8, !dbg !13229
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_topo_order(%struct.constraint_graph* %graph, %struct.topo_info* %ti) #0 !dbg !13230 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %ti.addr = alloca %struct.topo_info*, align 8
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !13233, metadata !DIExpression()), !dbg !13234
  store %struct.topo_info* %ti, %struct.topo_info** %ti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.topo_info** %ti.addr, metadata !13235, metadata !DIExpression()), !dbg !13236
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13237, metadata !DIExpression()), !dbg !13238
  call void @llvm.dbg.declare(metadata i32* %size, metadata !13239, metadata !DIExpression()), !dbg !13240
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13241
  %size1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 0, !dbg !13242
  %1 = load i32, i32* %size1, align 8, !dbg !13242
  store i32 %1, i32* %size, align 4, !dbg !13240
  store i32 0, i32* %i, align 4, !dbg !13243
  br label %for.cond, !dbg !13245

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !13246
  %3 = load i32, i32* %size, align 4, !dbg !13248
  %cmp = icmp ne i32 %2, %3, !dbg !13249
  br i1 %cmp, label %for.body, label %for.end, !dbg !13250

for.body:                                         ; preds = %for.cond
  %4 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13251
  %visited = getelementptr inbounds %struct.topo_info, %struct.topo_info* %4, i32 0, i32 0, !dbg !13251
  %5 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !13251
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %5, i32 0, i32 3, !dbg !13251
  %6 = load i32, i32* %i, align 4, !dbg !13251
  %div = udiv i32 %6, 64, !dbg !13251
  %idxprom = zext i32 %div to i64, !dbg !13251
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !13251
  %7 = load i64, i64* %arrayidx, align 8, !dbg !13251
  %8 = load i32, i32* %i, align 4, !dbg !13251
  %rem = urem i32 %8, 64, !dbg !13251
  %sh_prom = zext i32 %rem to i64, !dbg !13251
  %shr = lshr i64 %7, %sh_prom, !dbg !13251
  %and = and i64 %shr, 1, !dbg !13251
  %tobool = icmp ne i64 %and, 0, !dbg !13251
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !13253

land.lhs.true:                                    ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !13254
  %call = call i32 @find(i32 %9), !dbg !13255
  %10 = load i32, i32* %i, align 4, !dbg !13256
  %cmp2 = icmp eq i32 %call, %10, !dbg !13257
  br i1 %cmp2, label %if.then, label %if.end, !dbg !13258

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13259
  %12 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13260
  %13 = load i32, i32* %i, align 4, !dbg !13261
  call void @topo_visit(%struct.constraint_graph* %11, %struct.topo_info* %12, i32 %13), !dbg !13262
  br label %if.end, !dbg !13262

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !13256

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4, !dbg !13263
  %inc = add i32 %14, 1, !dbg !13263
  store i32 %inc, i32* %i, align 4, !dbg !13263
  br label %for.cond, !dbg !13264, !llvm.loop !13265

for.end:                                          ; preds = %for.cond
  ret void, !dbg !13267
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @eliminate_indirect_cycles(i32 %node) #0 !dbg !13268 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %queue = alloca %struct.VEC_unsigned_heap*, align 8
  %queuepos = alloca i32, align 4
  %to = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  store i32 %node, i32* %node.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %node.addr, metadata !13271, metadata !DIExpression()), !dbg !13272
  %0 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !13273
  %indirect_cycles = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %0, i32 0, i32 4, !dbg !13275
  %1 = load i32*, i32** %indirect_cycles, align 8, !dbg !13275
  %2 = load i32, i32* %node.addr, align 4, !dbg !13276
  %idxprom = zext i32 %2 to i64, !dbg !13273
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !13273
  %3 = load i32, i32* %arrayidx, align 4, !dbg !13273
  %cmp = icmp ne i32 %3, -1, !dbg !13277
  br i1 %cmp, label %land.lhs.true, label %if.end26, !dbg !13278

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* %node.addr, align 4, !dbg !13279
  %call = call %struct.variable_info* @get_varinfo(i32 %4), !dbg !13279
  %solution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call, i32 0, i32 8, !dbg !13279
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution, align 8, !dbg !13279
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %5, i32 0, i32 0, !dbg !13279
  %6 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !13279
  %tobool = icmp ne %struct.bitmap_element_def* %6, null, !dbg !13279
  br i1 %tobool, label %if.then, label %if.end26, !dbg !13280

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13281, metadata !DIExpression()), !dbg !13283
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_heap** %queue, metadata !13284, metadata !DIExpression()), !dbg !13285
  store %struct.VEC_unsigned_heap* null, %struct.VEC_unsigned_heap** %queue, align 8, !dbg !13285
  call void @llvm.dbg.declare(metadata i32* %queuepos, metadata !13286, metadata !DIExpression()), !dbg !13287
  call void @llvm.dbg.declare(metadata i32* %to, metadata !13288, metadata !DIExpression()), !dbg !13289
  %7 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !13290
  %indirect_cycles1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %7, i32 0, i32 4, !dbg !13291
  %8 = load i32*, i32** %indirect_cycles1, align 8, !dbg !13291
  %9 = load i32, i32* %node.addr, align 4, !dbg !13292
  %idxprom2 = zext i32 %9 to i64, !dbg !13290
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i64 %idxprom2, !dbg !13290
  %10 = load i32, i32* %arrayidx3, align 4, !dbg !13290
  %call4 = call i32 @find(i32 %10), !dbg !13293
  store i32 %call4, i32* %to, align 4, !dbg !13289
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13294, metadata !DIExpression()), !dbg !13295
  %11 = load i32, i32* %node.addr, align 4, !dbg !13296
  %call5 = call %struct.variable_info* @get_varinfo(i32 %11), !dbg !13296
  %solution6 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call5, i32 0, i32 8, !dbg !13296
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution6, align 8, !dbg !13296
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %12, i32 0, i32* %i), !dbg !13296
  br label %for.cond, !dbg !13296

for.cond:                                         ; preds = %for.inc, %if.then
  %call7 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13298
  %tobool8 = icmp ne i8 %call7, 0, !dbg !13296
  br i1 %tobool8, label %for.body, label %for.end, !dbg !13296

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %i, align 4, !dbg !13300
  %call9 = call i32 @find(i32 %13), !dbg !13303
  %14 = load i32, i32* %i, align 4, !dbg !13304
  %cmp10 = icmp eq i32 %call9, %14, !dbg !13305
  br i1 %cmp10, label %land.lhs.true11, label %if.end18, !dbg !13306

land.lhs.true11:                                  ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !13307
  %16 = load i32, i32* %to, align 4, !dbg !13308
  %cmp12 = icmp ne i32 %15, %16, !dbg !13309
  br i1 %cmp12, label %if.then13, label %if.end18, !dbg !13310

if.then13:                                        ; preds = %land.lhs.true11
  %17 = load i32, i32* %to, align 4, !dbg !13311
  %18 = load i32, i32* %i, align 4, !dbg !13314
  %call14 = call zeroext i8 @unite(i32 %17, i32 %18), !dbg !13315
  %tobool15 = icmp ne i8 %call14, 0, !dbg !13315
  br i1 %tobool15, label %if.then16, label %if.end, !dbg !13316

if.then16:                                        ; preds = %if.then13
  %19 = load i32, i32* %i, align 4, !dbg !13317
  %call17 = call i32* @VEC_unsigned_heap_safe_push(%struct.VEC_unsigned_heap** %queue, i32 %19), !dbg !13317
  br label %if.end, !dbg !13317

if.end:                                           ; preds = %if.then16, %if.then13
  br label %if.end18, !dbg !13318

if.end18:                                         ; preds = %if.end, %land.lhs.true11, %for.body
  br label %for.inc, !dbg !13319

for.inc:                                          ; preds = %if.end18
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13298
  br label %for.cond, !dbg !13298, !llvm.loop !13320

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %queuepos, align 4, !dbg !13322
  br label %for.cond19, !dbg !13324

for.cond19:                                       ; preds = %for.inc24, %for.end
  %20 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %queue, align 8, !dbg !13325
  %tobool20 = icmp ne %struct.VEC_unsigned_heap* %20, null, !dbg !13325
  br i1 %tobool20, label %cond.true, label %cond.false, !dbg !13325

cond.true:                                        ; preds = %for.cond19
  %21 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %queue, align 8, !dbg !13325
  %base = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %21, i32 0, i32 0, !dbg !13325
  br label %cond.end, !dbg !13325

cond.false:                                       ; preds = %for.cond19
  br label %cond.end, !dbg !13325

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_unsigned_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13325
  %22 = load i32, i32* %queuepos, align 4, !dbg !13325
  %call21 = call i32 @VEC_unsigned_base_iterate(%struct.VEC_unsigned_base* %cond, i32 %22, i32* %i), !dbg !13325
  %tobool22 = icmp ne i32 %call21, 0, !dbg !13327
  br i1 %tobool22, label %for.body23, label %for.end25, !dbg !13327

for.body23:                                       ; preds = %cond.end
  %23 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !13328
  %24 = load i32, i32* %to, align 4, !dbg !13330
  %25 = load i32, i32* %i, align 4, !dbg !13331
  call void @unify_nodes(%struct.constraint_graph* %23, i32 %24, i32 %25, i8 zeroext 1), !dbg !13332
  br label %for.inc24, !dbg !13333

for.inc24:                                        ; preds = %for.body23
  %26 = load i32, i32* %queuepos, align 4, !dbg !13334
  %inc = add nsw i32 %26, 1, !dbg !13334
  store i32 %inc, i32* %queuepos, align 4, !dbg !13334
  br label %for.cond19, !dbg !13335, !llvm.loop !13336

for.end25:                                        ; preds = %cond.end
  call void @VEC_unsigned_heap_free(%struct.VEC_unsigned_heap** %queue), !dbg !13338
  store i8 1, i8* %retval, align 1, !dbg !13339
  br label %return, !dbg !13339

if.end26:                                         ; preds = %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !13340
  br label %return, !dbg !13340

return:                                           ; preds = %if.end26, %for.end25
  %27 = load i8, i8* %retval, align 1, !dbg !13341
  ret i8 %27, !dbg !13341
}

declare dso_local zeroext i8 @bitmap_and_compl(%struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @do_complex_constraint(%struct.constraint_graph* %graph, %struct.constraint* %c, %struct.bitmap_head_def* %delta) #0 !dbg !13342 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %c.addr = alloca %struct.constraint*, align 8
  %delta.addr = alloca %struct.bitmap_head_def*, align 8
  %tmp = alloca %struct.bitmap_head_def*, align 8
  %solution = alloca %struct.bitmap_head_def*, align 8
  %flag = alloca i8, align 1
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !13345, metadata !DIExpression()), !dbg !13346
  store %struct.constraint* %c, %struct.constraint** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %c.addr, metadata !13347, metadata !DIExpression()), !dbg !13348
  store %struct.bitmap_head_def* %delta, %struct.bitmap_head_def** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %delta.addr, metadata !13349, metadata !DIExpression()), !dbg !13350
  %0 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13351
  %lhs = getelementptr inbounds %struct.constraint, %struct.constraint* %0, i32 0, i32 0, !dbg !13353
  %type = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 0, !dbg !13354
  %1 = load i32, i32* %type, align 8, !dbg !13354
  %cmp = icmp eq i32 %1, 1, !dbg !13355
  br i1 %cmp, label %if.then, label %if.else4, !dbg !13356

if.then:                                          ; preds = %entry
  %2 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13357
  %rhs = getelementptr inbounds %struct.constraint, %struct.constraint* %2, i32 0, i32 1, !dbg !13360
  %type1 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 0, !dbg !13361
  %3 = load i32, i32* %type1, align 8, !dbg !13361
  %cmp2 = icmp eq i32 %3, 2, !dbg !13362
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !13363

if.then3:                                         ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1729, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !13364
  br label %if.end, !dbg !13366

if.else:                                          ; preds = %if.then
  %4 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13367
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13369
  call void @do_ds_constraint(%struct.constraint* %4, %struct.bitmap_head_def* %5), !dbg !13370
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end46, !dbg !13371

if.else4:                                         ; preds = %entry
  %6 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13372
  %rhs5 = getelementptr inbounds %struct.constraint, %struct.constraint* %6, i32 0, i32 1, !dbg !13374
  %type6 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs5, i32 0, i32 0, !dbg !13375
  %7 = load i32, i32* %type6, align 8, !dbg !13375
  %cmp7 = icmp eq i32 %7, 1, !dbg !13376
  br i1 %cmp7, label %if.then8, label %if.else12, !dbg !13377

if.then8:                                         ; preds = %if.else4
  %8 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13378
  %lhs9 = getelementptr inbounds %struct.constraint, %struct.constraint* %8, i32 0, i32 0, !dbg !13381
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs9, i32 0, i32 1, !dbg !13382
  %9 = load i32, i32* %var, align 4, !dbg !13382
  %call = call %struct.variable_info* @get_varinfo(i32 %9), !dbg !13383
  %is_special_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call, i32 0, i32 1, !dbg !13384
  %bf.load = load i8, i8* %is_special_var, align 4, !dbg !13384
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !13384
  %bf.clear = and i8 %bf.lshr, 1, !dbg !13384
  %bf.cast = zext i8 %bf.clear to i32, !dbg !13384
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !13385
  br i1 %tobool, label %if.end11, label %if.then10, !dbg !13386

if.then10:                                        ; preds = %if.then8
  %10 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13387
  %11 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13388
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13389
  call void @do_sd_constraint(%struct.constraint_graph* %10, %struct.constraint* %11, %struct.bitmap_head_def* %12), !dbg !13390
  br label %if.end11, !dbg !13390

if.end11:                                         ; preds = %if.then10, %if.then8
  br label %if.end45, !dbg !13391

if.else12:                                        ; preds = %if.else4
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp, metadata !13392, metadata !DIExpression()), !dbg !13394
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %solution, metadata !13395, metadata !DIExpression()), !dbg !13396
  call void @llvm.dbg.declare(metadata i8* %flag, metadata !13397, metadata !DIExpression()), !dbg !13398
  store i8 0, i8* %flag, align 1, !dbg !13398
  %13 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13399
  %rhs13 = getelementptr inbounds %struct.constraint, %struct.constraint* %13, i32 0, i32 1, !dbg !13399
  %type14 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs13, i32 0, i32 0, !dbg !13399
  %14 = load i32, i32* %type14, align 8, !dbg !13399
  %cmp15 = icmp eq i32 %14, 0, !dbg !13399
  br i1 %cmp15, label %land.lhs.true, label %cond.true, !dbg !13399

land.lhs.true:                                    ; preds = %if.else12
  %15 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13399
  %lhs16 = getelementptr inbounds %struct.constraint, %struct.constraint* %15, i32 0, i32 0, !dbg !13399
  %type17 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs16, i32 0, i32 0, !dbg !13399
  %16 = load i32, i32* %type17, align 8, !dbg !13399
  %cmp18 = icmp eq i32 %16, 0, !dbg !13399
  br i1 %cmp18, label %cond.false, label %cond.true, !dbg !13399

cond.true:                                        ; preds = %land.lhs.true, %if.else12
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1749, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !13399
  br label %cond.end, !dbg !13399

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !13399

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13399
  %17 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13400
  %rhs19 = getelementptr inbounds %struct.constraint, %struct.constraint* %17, i32 0, i32 1, !dbg !13401
  %var20 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs19, i32 0, i32 1, !dbg !13402
  %18 = load i32, i32* %var20, align 4, !dbg !13402
  %call21 = call %struct.variable_info* @get_varinfo(i32 %18), !dbg !13403
  %solution22 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call21, i32 0, i32 8, !dbg !13404
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution22, align 8, !dbg !13404
  store %struct.bitmap_head_def* %19, %struct.bitmap_head_def** %solution, align 8, !dbg !13405
  %20 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13406
  %lhs23 = getelementptr inbounds %struct.constraint, %struct.constraint* %20, i32 0, i32 0, !dbg !13407
  %var24 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs23, i32 0, i32 1, !dbg !13408
  %21 = load i32, i32* %var24, align 4, !dbg !13408
  %call25 = call %struct.variable_info* @get_varinfo(i32 %21), !dbg !13409
  %solution26 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call25, i32 0, i32 8, !dbg !13410
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution26, align 8, !dbg !13410
  store %struct.bitmap_head_def* %22, %struct.bitmap_head_def** %tmp, align 8, !dbg !13411
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !13412
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution, align 8, !dbg !13413
  %25 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13414
  %rhs27 = getelementptr inbounds %struct.constraint, %struct.constraint* %25, i32 0, i32 1, !dbg !13415
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs27, i32 0, i32 2, !dbg !13416
  %26 = load i64, i64* %offset, align 8, !dbg !13416
  %call28 = call zeroext i8 @set_union_with_increment(%struct.bitmap_head_def* %23, %struct.bitmap_head_def* %24, i64 %26), !dbg !13417
  store i8 %call28, i8* %flag, align 1, !dbg !13418
  %27 = load i8, i8* %flag, align 1, !dbg !13419
  %tobool29 = icmp ne i8 %27, 0, !dbg !13419
  br i1 %tobool29, label %if.then30, label %if.end44, !dbg !13421

if.then30:                                        ; preds = %cond.end
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !13422
  %29 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13424
  %lhs31 = getelementptr inbounds %struct.constraint, %struct.constraint* %29, i32 0, i32 0, !dbg !13425
  %var32 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs31, i32 0, i32 1, !dbg !13426
  %30 = load i32, i32* %var32, align 4, !dbg !13426
  %call33 = call %struct.variable_info* @get_varinfo(i32 %30), !dbg !13427
  %solution34 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call33, i32 0, i32 8, !dbg !13428
  store %struct.bitmap_head_def* %28, %struct.bitmap_head_def** %solution34, align 8, !dbg !13429
  %31 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13430
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %31, i32 0, i32 3, !dbg !13430
  %32 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13430
  %lhs35 = getelementptr inbounds %struct.constraint, %struct.constraint* %32, i32 0, i32 0, !dbg !13430
  %var36 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs35, i32 0, i32 1, !dbg !13430
  %33 = load i32, i32* %var36, align 4, !dbg !13430
  %div = udiv i32 %33, 64, !dbg !13430
  %idxprom = zext i32 %div to i64, !dbg !13430
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !13430
  %34 = load i64, i64* %arrayidx, align 8, !dbg !13430
  %35 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13430
  %lhs37 = getelementptr inbounds %struct.constraint, %struct.constraint* %35, i32 0, i32 0, !dbg !13430
  %var38 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs37, i32 0, i32 1, !dbg !13430
  %36 = load i32, i32* %var38, align 4, !dbg !13430
  %rem = urem i32 %36, 64, !dbg !13430
  %sh_prom = zext i32 %rem to i64, !dbg !13430
  %shr = lshr i64 %34, %sh_prom, !dbg !13430
  %and = and i64 %shr, 1, !dbg !13430
  %tobool39 = icmp ne i64 %and, 0, !dbg !13430
  br i1 %tobool39, label %if.end43, label %if.then40, !dbg !13432

if.then40:                                        ; preds = %if.then30
  %37 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13433
  %38 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13435
  %lhs41 = getelementptr inbounds %struct.constraint, %struct.constraint* %38, i32 0, i32 0, !dbg !13436
  %var42 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs41, i32 0, i32 1, !dbg !13437
  %39 = load i32, i32* %var42, align 4, !dbg !13437
  call void @SET_BIT(%struct.simple_bitmap_def* %37, i32 %39), !dbg !13438
  %40 = load i32, i32* @changed_count, align 4, !dbg !13439
  %inc = add i32 %40, 1, !dbg !13439
  store i32 %inc, i32* @changed_count, align 4, !dbg !13439
  br label %if.end43, !dbg !13440

if.end43:                                         ; preds = %if.then40, %if.then30
  br label %if.end44, !dbg !13441

if.end44:                                         ; preds = %if.end43, %cond.end
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end11
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end
  ret void, !dbg !13442
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @set_union_with_increment(%struct.bitmap_head_def* %to, %struct.bitmap_head_def* %from, i64 %inc) #0 !dbg !13443 {
entry:
  %retval = alloca i8, align 1
  %to.addr = alloca %struct.bitmap_head_def*, align 8
  %from.addr = alloca %struct.bitmap_head_def*, align 8
  %inc.addr = alloca i64, align 8
  %tmp = alloca %struct.bitmap_head_def*, align 8
  %res = alloca i8, align 1
  store %struct.bitmap_head_def* %to, %struct.bitmap_head_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %to.addr, metadata !13446, metadata !DIExpression()), !dbg !13447
  store %struct.bitmap_head_def* %from, %struct.bitmap_head_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %from.addr, metadata !13448, metadata !DIExpression()), !dbg !13449
  store i64 %inc, i64* %inc.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %inc.addr, metadata !13450, metadata !DIExpression()), !dbg !13451
  %0 = load i64, i64* %inc.addr, align 8, !dbg !13452
  %cmp = icmp eq i64 %0, 0, !dbg !13454
  br i1 %cmp, label %if.then, label %if.else, !dbg !13455

if.then:                                          ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to.addr, align 8, !dbg !13456
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %from.addr, align 8, !dbg !13457
  %call = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %1, %struct.bitmap_head_def* %2), !dbg !13458
  store i8 %call, i8* %retval, align 1, !dbg !13459
  br label %return, !dbg !13459

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp, metadata !13460, metadata !DIExpression()), !dbg !13462
  call void @llvm.dbg.declare(metadata i8* %res, metadata !13463, metadata !DIExpression()), !dbg !13464
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @iteration_obstack), !dbg !13465
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %tmp, align 8, !dbg !13466
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !13467
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %from.addr, align 8, !dbg !13468
  call void @bitmap_copy(%struct.bitmap_head_def* %3, %struct.bitmap_head_def* %4), !dbg !13469
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !13470
  %6 = load i64, i64* %inc.addr, align 8, !dbg !13471
  call void @solution_set_add(%struct.bitmap_head_def* %5, i64 %6), !dbg !13472
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to.addr, align 8, !dbg !13473
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !13474
  %call2 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %7, %struct.bitmap_head_def* %8), !dbg !13475
  store i8 %call2, i8* %res, align 1, !dbg !13476
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !13477
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %9), !dbg !13477
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %tmp, align 8, !dbg !13477
  %10 = load i8, i8* %res, align 1, !dbg !13478
  store i8 %10, i8* %retval, align 1, !dbg !13479
  br label %return, !dbg !13479

return:                                           ; preds = %if.else, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !13480
  ret i8 %11, !dbg !13480
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_topo_info(%struct.topo_info* %ti) #0 !dbg !13481 {
entry:
  %ti.addr = alloca %struct.topo_info*, align 8
  store %struct.topo_info* %ti, %struct.topo_info** %ti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.topo_info** %ti.addr, metadata !13484, metadata !DIExpression()), !dbg !13485
  %0 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13486
  %visited = getelementptr inbounds %struct.topo_info, %struct.topo_info* %0, i32 0, i32 0, !dbg !13486
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !13486
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %1, i32 0, i32 0, !dbg !13486
  %2 = load i8*, i8** %popcount, align 8, !dbg !13486
  call void @free(i8* %2), !dbg !13486
  %3 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13486
  %visited1 = getelementptr inbounds %struct.topo_info, %struct.topo_info* %3, i32 0, i32 0, !dbg !13486
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited1, align 8, !dbg !13486
  %5 = bitcast %struct.simple_bitmap_def* %4 to i8*, !dbg !13486
  call void @free(i8* %5), !dbg !13486
  %6 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13487
  %topo_order = getelementptr inbounds %struct.topo_info, %struct.topo_info* %6, i32 0, i32 1, !dbg !13487
  call void @VEC_unsigned_heap_free(%struct.VEC_unsigned_heap** %topo_order), !dbg !13487
  %7 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13488
  %8 = bitcast %struct.topo_info* %7 to i8*, !dbg !13488
  call void @free(i8* %8), !dbg !13489
  ret void, !dbg !13490
}

; Function Attrs: noinline nounwind uwtable
define internal void @topo_visit(%struct.constraint_graph* %graph, %struct.topo_info* %ti, i32 %n) #0 !dbg !13491 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %ti.addr = alloca %struct.topo_info*, align 8
  %n.addr = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %j = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !13494, metadata !DIExpression()), !dbg !13495
  store %struct.topo_info* %ti, %struct.topo_info** %ti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.topo_info** %ti.addr, metadata !13496, metadata !DIExpression()), !dbg !13497
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !13498, metadata !DIExpression()), !dbg !13499
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13500, metadata !DIExpression()), !dbg !13501
  call void @llvm.dbg.declare(metadata i32* %j, metadata !13502, metadata !DIExpression()), !dbg !13503
  %0 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13504
  %visited = getelementptr inbounds %struct.topo_info, %struct.topo_info* %0, i32 0, i32 0, !dbg !13505
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !13505
  %2 = load i32, i32* %n.addr, align 4, !dbg !13506
  call void @SET_BIT(%struct.simple_bitmap_def* %1, i32 %2), !dbg !13507
  %3 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13508
  %succs = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %3, i32 0, i32 1, !dbg !13510
  %4 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs, align 8, !dbg !13510
  %5 = load i32, i32* %n.addr, align 4, !dbg !13511
  %idxprom = zext i32 %5 to i64, !dbg !13508
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %4, i64 %idxprom, !dbg !13508
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !13508
  %tobool = icmp ne %struct.bitmap_head_def* %6, null, !dbg !13508
  br i1 %tobool, label %if.then, label %if.end10, !dbg !13512

if.then:                                          ; preds = %entry
  %7 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13513
  %succs1 = getelementptr inbounds %struct.constraint_graph, %struct.constraint_graph* %7, i32 0, i32 1, !dbg !13513
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %succs1, align 8, !dbg !13513
  %9 = load i32, i32* %n.addr, align 4, !dbg !13513
  %idxprom2 = zext i32 %9 to i64, !dbg !13513
  %arrayidx3 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %8, i64 %idxprom2, !dbg !13513
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx3, align 8, !dbg !13513
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %10, i32 0, i32* %j), !dbg !13513
  br label %for.cond, !dbg !13513

for.cond:                                         ; preds = %for.inc, %if.then
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13515
  %tobool4 = icmp ne i8 %call, 0, !dbg !13513
  br i1 %tobool4, label %for.body, label %for.end, !dbg !13513

for.body:                                         ; preds = %for.cond
  %11 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13517
  %visited5 = getelementptr inbounds %struct.topo_info, %struct.topo_info* %11, i32 0, i32 0, !dbg !13517
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited5, align 8, !dbg !13517
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !13517
  %13 = load i32, i32* %j, align 4, !dbg !13517
  %div = udiv i32 %13, 64, !dbg !13517
  %idxprom6 = zext i32 %div to i64, !dbg !13517
  %arrayidx7 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom6, !dbg !13517
  %14 = load i64, i64* %arrayidx7, align 8, !dbg !13517
  %15 = load i32, i32* %j, align 4, !dbg !13517
  %rem = urem i32 %15, 64, !dbg !13517
  %sh_prom = zext i32 %rem to i64, !dbg !13517
  %shr = lshr i64 %14, %sh_prom, !dbg !13517
  %and = and i64 %shr, 1, !dbg !13517
  %tobool8 = icmp ne i64 %and, 0, !dbg !13517
  br i1 %tobool8, label %if.end, label %if.then9, !dbg !13520

if.then9:                                         ; preds = %for.body
  %16 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13521
  %17 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13522
  %18 = load i32, i32* %j, align 4, !dbg !13523
  call void @topo_visit(%struct.constraint_graph* %16, %struct.topo_info* %17, i32 %18), !dbg !13524
  br label %if.end, !dbg !13524

if.end:                                           ; preds = %if.then9, %for.body
  br label %for.inc, !dbg !13525

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13515
  br label %for.cond, !dbg !13515, !llvm.loop !13526

for.end:                                          ; preds = %for.cond
  br label %if.end10, !dbg !13527

if.end10:                                         ; preds = %for.end, %entry
  %19 = load %struct.topo_info*, %struct.topo_info** %ti.addr, align 8, !dbg !13528
  %topo_order = getelementptr inbounds %struct.topo_info, %struct.topo_info* %19, i32 0, i32 1, !dbg !13528
  %20 = load i32, i32* %n.addr, align 4, !dbg !13528
  %call11 = call i32* @VEC_unsigned_heap_safe_push(%struct.VEC_unsigned_heap** %topo_order, i32 %20), !dbg !13528
  ret void, !dbg !13529
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_base_iterate(%struct.VEC_unsigned_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !13530 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !13533, metadata !DIExpression()), !dbg !13534
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !13535, metadata !DIExpression()), !dbg !13534
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !13536, metadata !DIExpression()), !dbg !13534
  %0 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !13537
  %tobool = icmp ne %struct.VEC_unsigned_base* %0, null, !dbg !13537
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !13537

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !13537
  %2 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !13537
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %2, i32 0, i32 0, !dbg !13537
  %3 = load i32, i32* %num, align 4, !dbg !13537
  %cmp = icmp ult i32 %1, %3, !dbg !13537
  br i1 %cmp, label %if.then, label %if.else, !dbg !13534

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !13539
  %vec = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %4, i32 0, i32 2, !dbg !13539
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !13539
  %idxprom = zext i32 %5 to i64, !dbg !13539
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !13539
  %6 = load i32, i32* %arrayidx, align 4, !dbg !13539
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !13539
  store i32 %6, i32* %7, align 4, !dbg !13539
  store i32 1, i32* %retval, align 4, !dbg !13539
  br label %return, !dbg !13539

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !13541
  store i32 0, i32* %8, align 4, !dbg !13541
  store i32 0, i32* %retval, align 4, !dbg !13541
  br label %return, !dbg !13541

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !13534
  ret i32 %9, !dbg !13534
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_ds_constraint(%struct.constraint* %c, %struct.bitmap_head_def* %delta) #0 !dbg !13543 {
entry:
  %c.addr = alloca %struct.constraint*, align 8
  %delta.addr = alloca %struct.bitmap_head_def*, align 8
  %rhs = alloca i32, align 4
  %sol = alloca %struct.bitmap_head_def*, align 8
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %loff = alloca i64, align 8
  %t = alloca i32, align 4
  %v = alloca %struct.variable_info*, align 8
  %t32 = alloca i32, align 4
  %fieldoffset = alloca i64, align 8
  store %struct.constraint* %c, %struct.constraint** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %c.addr, metadata !13546, metadata !DIExpression()), !dbg !13547
  store %struct.bitmap_head_def* %delta, %struct.bitmap_head_def** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %delta.addr, metadata !13548, metadata !DIExpression()), !dbg !13549
  call void @llvm.dbg.declare(metadata i32* %rhs, metadata !13550, metadata !DIExpression()), !dbg !13551
  %0 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13552
  %rhs1 = getelementptr inbounds %struct.constraint, %struct.constraint* %0, i32 0, i32 1, !dbg !13553
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs1, i32 0, i32 1, !dbg !13554
  %1 = load i32, i32* %var, align 4, !dbg !13554
  store i32 %1, i32* %rhs, align 4, !dbg !13551
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %sol, metadata !13555, metadata !DIExpression()), !dbg !13556
  %2 = load i32, i32* %rhs, align 4, !dbg !13557
  %call = call %struct.variable_info* @get_varinfo(i32 %2), !dbg !13558
  %solution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call, i32 0, i32 8, !dbg !13559
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution, align 8, !dbg !13559
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %sol, align 8, !dbg !13556
  call void @llvm.dbg.declare(metadata i32* %j, metadata !13560, metadata !DIExpression()), !dbg !13561
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13562, metadata !DIExpression()), !dbg !13563
  call void @llvm.dbg.declare(metadata i64* %loff, metadata !13564, metadata !DIExpression()), !dbg !13565
  %4 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13566
  %lhs = getelementptr inbounds %struct.constraint, %struct.constraint* %4, i32 0, i32 0, !dbg !13567
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs, i32 0, i32 2, !dbg !13568
  %5 = load i64, i64* %offset, align 8, !dbg !13568
  store i64 %5, i64* %loff, align 8, !dbg !13565
  %6 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13569
  %rhs2 = getelementptr inbounds %struct.constraint, %struct.constraint* %6, i32 0, i32 1, !dbg !13569
  %offset3 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs2, i32 0, i32 2, !dbg !13569
  %7 = load i64, i64* %offset3, align 8, !dbg !13569
  %cmp = icmp eq i64 %7, 0, !dbg !13569
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !13569

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1624, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !13569
  br label %cond.end, !dbg !13569

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13569

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13569
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sol, align 8, !dbg !13570
  %call4 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %8, i32 1), !dbg !13572
  %tobool = icmp ne i32 %call4, 0, !dbg !13572
  br i1 %tobool, label %if.then, label %if.end, !dbg !13573

if.then:                                          ; preds = %cond.end
  %call5 = call i32 @find(i32 1), !dbg !13574
  %call6 = call %struct.variable_info* @get_varinfo(i32 %call5), !dbg !13575
  %solution7 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call6, i32 0, i32 8, !dbg !13576
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution7, align 8, !dbg !13576
  store %struct.bitmap_head_def* %9, %struct.bitmap_head_def** %sol, align 8, !dbg !13577
  br label %if.end, !dbg !13578

if.end:                                           ; preds = %if.then, %cond.end
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13579
  %call8 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %10, i32 1), !dbg !13581
  %tobool9 = icmp ne i32 %call8, 0, !dbg !13581
  br i1 %tobool9, label %if.then10, label %if.end25, !dbg !13582

if.then10:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %t, metadata !13583, metadata !DIExpression()), !dbg !13585
  %call11 = call i32 @find(i32 6), !dbg !13586
  store i32 %call11, i32* %t, align 4, !dbg !13585
  %11 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !13587
  %12 = load i32, i32* %t, align 4, !dbg !13589
  %13 = load i32, i32* %rhs, align 4, !dbg !13590
  %call12 = call zeroext i8 @add_graph_edge(%struct.constraint_graph* %11, i32 %12, i32 %13), !dbg !13591
  %tobool13 = icmp ne i8 %call12, 0, !dbg !13591
  br i1 %tobool13, label %if.then14, label %if.end24, !dbg !13592

if.then14:                                        ; preds = %if.then10
  %14 = load i32, i32* %t, align 4, !dbg !13593
  %call15 = call %struct.variable_info* @get_varinfo(i32 %14), !dbg !13596
  %solution16 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call15, i32 0, i32 8, !dbg !13597
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution16, align 8, !dbg !13597
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sol, align 8, !dbg !13598
  %call17 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %15, %struct.bitmap_head_def* %16), !dbg !13599
  %tobool18 = icmp ne i8 %call17, 0, !dbg !13599
  br i1 %tobool18, label %if.then19, label %if.end23, !dbg !13600

if.then19:                                        ; preds = %if.then14
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13601
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %17, i32 0, i32 3, !dbg !13601
  %18 = load i32, i32* %t, align 4, !dbg !13601
  %div = udiv i32 %18, 64, !dbg !13601
  %idxprom = zext i32 %div to i64, !dbg !13601
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !13601
  %19 = load i64, i64* %arrayidx, align 8, !dbg !13601
  %20 = load i32, i32* %t, align 4, !dbg !13601
  %rem = urem i32 %20, 64, !dbg !13601
  %sh_prom = zext i32 %rem to i64, !dbg !13601
  %shr = lshr i64 %19, %sh_prom, !dbg !13601
  %and = and i64 %shr, 1, !dbg !13601
  %tobool20 = icmp ne i64 %and, 0, !dbg !13601
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !13604

if.then21:                                        ; preds = %if.then19
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13605
  %22 = load i32, i32* %t, align 4, !dbg !13607
  call void @SET_BIT(%struct.simple_bitmap_def* %21, i32 %22), !dbg !13608
  %23 = load i32, i32* @changed_count, align 4, !dbg !13609
  %inc = add i32 %23, 1, !dbg !13609
  store i32 %inc, i32* @changed_count, align 4, !dbg !13609
  br label %if.end22, !dbg !13610

if.end22:                                         ; preds = %if.then21, %if.then19
  br label %if.end23, !dbg !13611

if.end23:                                         ; preds = %if.end22, %if.then14
  br label %if.end24, !dbg !13612

if.end24:                                         ; preds = %if.end23, %if.then10
  br label %for.end, !dbg !13613

if.end25:                                         ; preds = %if.end
  %24 = load i64, i64* %loff, align 8, !dbg !13614
  %cmp26 = icmp eq i64 %24, -9223372036854775808, !dbg !13616
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !13617

if.then27:                                        ; preds = %if.end25
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13618
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13620
  call void @solution_set_expand(%struct.bitmap_head_def* %25, %struct.bitmap_head_def* %26), !dbg !13621
  store i64 0, i64* %loff, align 8, !dbg !13622
  br label %if.end28, !dbg !13623

if.end28:                                         ; preds = %if.then27, %if.end25
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13624
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %27, i32 0, i32* %j), !dbg !13624
  br label %for.cond, !dbg !13624

for.cond:                                         ; preds = %for.inc, %if.end28
  %call29 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13626
  %tobool30 = icmp ne i8 %call29, 0, !dbg !13624
  br i1 %tobool30, label %for.body, label %for.end, !dbg !13624

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %v, metadata !13628, metadata !DIExpression()), !dbg !13630
  %28 = load i32, i32* %j, align 4, !dbg !13631
  %call31 = call %struct.variable_info* @get_varinfo(i32 %28), !dbg !13632
  store %struct.variable_info* %call31, %struct.variable_info** %v, align 8, !dbg !13630
  call void @llvm.dbg.declare(metadata i32* %t32, metadata !13633, metadata !DIExpression()), !dbg !13634
  call void @llvm.dbg.declare(metadata i64* %fieldoffset, metadata !13635, metadata !DIExpression()), !dbg !13636
  %29 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13637
  %offset33 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %29, i32 0, i32 3, !dbg !13638
  %30 = load i64, i64* %offset33, align 8, !dbg !13638
  %31 = load i64, i64* %loff, align 8, !dbg !13639
  %add = add i64 %30, %31, !dbg !13640
  store i64 %add, i64* %fieldoffset, align 8, !dbg !13636
  %32 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13641
  %is_global_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %32, i32 0, i32 1, !dbg !13643
  %bf.load = load i8, i8* %is_global_var, align 4, !dbg !13643
  %bf.lshr = lshr i8 %bf.load, 7, !dbg !13643
  %bf.cast = zext i8 %bf.lshr to i32, !dbg !13643
  %tobool34 = icmp ne i32 %bf.cast, 0, !dbg !13641
  br i1 %tobool34, label %if.then35, label %if.end57, !dbg !13644

if.then35:                                        ; preds = %for.body
  %call36 = call i32 @find(i32 3), !dbg !13645
  store i32 %call36, i32* %t32, align 4, !dbg !13647
  %33 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !13648
  %34 = load i32, i32* %t32, align 4, !dbg !13650
  %35 = load i32, i32* %rhs, align 4, !dbg !13651
  %call37 = call zeroext i8 @add_graph_edge(%struct.constraint_graph* %33, i32 %34, i32 %35), !dbg !13652
  %conv = zext i8 %call37 to i32, !dbg !13652
  %tobool38 = icmp ne i32 %conv, 0, !dbg !13652
  br i1 %tobool38, label %land.lhs.true, label %if.end56, !dbg !13653

land.lhs.true:                                    ; preds = %if.then35
  %36 = load i32, i32* %t32, align 4, !dbg !13654
  %call39 = call %struct.variable_info* @get_varinfo(i32 %36), !dbg !13655
  %solution40 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call39, i32 0, i32 8, !dbg !13656
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution40, align 8, !dbg !13656
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sol, align 8, !dbg !13657
  %call41 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %37, %struct.bitmap_head_def* %38), !dbg !13658
  %conv42 = zext i8 %call41 to i32, !dbg !13658
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !13658
  br i1 %tobool43, label %land.lhs.true44, label %if.end56, !dbg !13659

land.lhs.true44:                                  ; preds = %land.lhs.true
  %39 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13660
  %elms45 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %39, i32 0, i32 3, !dbg !13660
  %40 = load i32, i32* %t32, align 4, !dbg !13660
  %div46 = udiv i32 %40, 64, !dbg !13660
  %idxprom47 = zext i32 %div46 to i64, !dbg !13660
  %arrayidx48 = getelementptr inbounds [1 x i64], [1 x i64]* %elms45, i64 0, i64 %idxprom47, !dbg !13660
  %41 = load i64, i64* %arrayidx48, align 8, !dbg !13660
  %42 = load i32, i32* %t32, align 4, !dbg !13660
  %rem49 = urem i32 %42, 64, !dbg !13660
  %sh_prom50 = zext i32 %rem49 to i64, !dbg !13660
  %shr51 = lshr i64 %41, %sh_prom50, !dbg !13660
  %and52 = and i64 %shr51, 1, !dbg !13660
  %tobool53 = icmp ne i64 %and52, 0, !dbg !13660
  br i1 %tobool53, label %if.end56, label %if.then54, !dbg !13661

if.then54:                                        ; preds = %land.lhs.true44
  %43 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13662
  %44 = load i32, i32* %t32, align 4, !dbg !13664
  call void @SET_BIT(%struct.simple_bitmap_def* %43, i32 %44), !dbg !13665
  %45 = load i32, i32* @changed_count, align 4, !dbg !13666
  %inc55 = add i32 %45, 1, !dbg !13666
  store i32 %inc55, i32* @changed_count, align 4, !dbg !13666
  br label %if.end56, !dbg !13667

if.end56:                                         ; preds = %if.then54, %land.lhs.true44, %land.lhs.true, %if.then35
  br label %if.end57, !dbg !13668

if.end57:                                         ; preds = %if.end56, %for.body
  %46 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13669
  %is_special_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %46, i32 0, i32 1, !dbg !13671
  %bf.load58 = load i8, i8* %is_special_var, align 4, !dbg !13671
  %bf.lshr59 = lshr i8 %bf.load58, 1, !dbg !13671
  %bf.clear = and i8 %bf.lshr59, 1, !dbg !13671
  %bf.cast60 = zext i8 %bf.clear to i32, !dbg !13671
  %tobool61 = icmp ne i32 %bf.cast60, 0, !dbg !13669
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !13672

if.then62:                                        ; preds = %if.end57
  br label %for.inc, !dbg !13673

if.end63:                                         ; preds = %if.end57
  %47 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13674
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %47, i32 0, i32 1, !dbg !13676
  %bf.load64 = load i8, i8* %is_full_var, align 4, !dbg !13676
  %bf.lshr65 = lshr i8 %bf.load64, 3, !dbg !13676
  %bf.clear66 = and i8 %bf.lshr65, 1, !dbg !13676
  %bf.cast67 = zext i8 %bf.clear66 to i32, !dbg !13676
  %tobool68 = icmp ne i32 %bf.cast67, 0, !dbg !13674
  br i1 %tobool68, label %if.then69, label %if.else, !dbg !13677

if.then69:                                        ; preds = %if.end63
  %48 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13678
  %offset70 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %48, i32 0, i32 3, !dbg !13679
  %49 = load i64, i64* %offset70, align 8, !dbg !13679
  store i64 %49, i64* %fieldoffset, align 8, !dbg !13680
  br label %if.end76, !dbg !13681

if.else:                                          ; preds = %if.end63
  %50 = load i64, i64* %loff, align 8, !dbg !13682
  %cmp71 = icmp ne i64 %50, 0, !dbg !13684
  br i1 %cmp71, label %if.then73, label %if.end75, !dbg !13685

if.then73:                                        ; preds = %if.else
  %51 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13686
  %52 = load i64, i64* %fieldoffset, align 8, !dbg !13687
  %call74 = call %struct.variable_info* @first_vi_for_offset(%struct.variable_info* %51, i64 %52), !dbg !13688
  store %struct.variable_info* %call74, %struct.variable_info** %v, align 8, !dbg !13689
  br label %if.end75, !dbg !13690

if.end75:                                         ; preds = %if.then73, %if.else
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.then69
  %53 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13691
  %tobool77 = icmp ne %struct.variable_info* %53, null, !dbg !13691
  br i1 %tobool77, label %if.end79, label %if.then78, !dbg !13693

if.then78:                                        ; preds = %if.end76
  br label %for.inc, !dbg !13694

if.end79:                                         ; preds = %if.end76
  br label %do.body, !dbg !13695

do.body:                                          ; preds = %do.cond, %if.end79
  %54 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13696
  %may_have_pointers = getelementptr inbounds %struct.variable_info, %struct.variable_info* %54, i32 0, i32 1, !dbg !13699
  %bf.load80 = load i8, i8* %may_have_pointers, align 4, !dbg !13699
  %bf.lshr81 = lshr i8 %bf.load80, 6, !dbg !13699
  %bf.clear82 = and i8 %bf.lshr81, 1, !dbg !13699
  %bf.cast83 = zext i8 %bf.clear82 to i32, !dbg !13699
  %tobool84 = icmp ne i32 %bf.cast83, 0, !dbg !13696
  br i1 %tobool84, label %if.then85, label %if.end109, !dbg !13700

if.then85:                                        ; preds = %do.body
  %55 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13701
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %55, i32 0, i32 0, !dbg !13703
  %56 = load i32, i32* %id, align 8, !dbg !13703
  %call86 = call i32 @find(i32 %56), !dbg !13704
  store i32 %call86, i32* %t32, align 4, !dbg !13705
  %57 = load %struct.constraint_graph*, %struct.constraint_graph** @graph, align 8, !dbg !13706
  %58 = load i32, i32* %t32, align 4, !dbg !13708
  %59 = load i32, i32* %rhs, align 4, !dbg !13709
  %call87 = call zeroext i8 @add_graph_edge(%struct.constraint_graph* %57, i32 %58, i32 %59), !dbg !13710
  %conv88 = zext i8 %call87 to i32, !dbg !13710
  %tobool89 = icmp ne i32 %conv88, 0, !dbg !13710
  br i1 %tobool89, label %land.lhs.true90, label %if.end108, !dbg !13711

land.lhs.true90:                                  ; preds = %if.then85
  %60 = load i32, i32* %t32, align 4, !dbg !13712
  %call91 = call %struct.variable_info* @get_varinfo(i32 %60), !dbg !13713
  %solution92 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call91, i32 0, i32 8, !dbg !13714
  %61 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution92, align 8, !dbg !13714
  %62 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sol, align 8, !dbg !13715
  %call93 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %61, %struct.bitmap_head_def* %62), !dbg !13716
  %conv94 = zext i8 %call93 to i32, !dbg !13716
  %tobool95 = icmp ne i32 %conv94, 0, !dbg !13716
  br i1 %tobool95, label %land.lhs.true96, label %if.end108, !dbg !13717

land.lhs.true96:                                  ; preds = %land.lhs.true90
  %63 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13718
  %elms97 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %63, i32 0, i32 3, !dbg !13718
  %64 = load i32, i32* %t32, align 4, !dbg !13718
  %div98 = udiv i32 %64, 64, !dbg !13718
  %idxprom99 = zext i32 %div98 to i64, !dbg !13718
  %arrayidx100 = getelementptr inbounds [1 x i64], [1 x i64]* %elms97, i64 0, i64 %idxprom99, !dbg !13718
  %65 = load i64, i64* %arrayidx100, align 8, !dbg !13718
  %66 = load i32, i32* %t32, align 4, !dbg !13718
  %rem101 = urem i32 %66, 64, !dbg !13718
  %sh_prom102 = zext i32 %rem101 to i64, !dbg !13718
  %shr103 = lshr i64 %65, %sh_prom102, !dbg !13718
  %and104 = and i64 %shr103, 1, !dbg !13718
  %tobool105 = icmp ne i64 %and104, 0, !dbg !13718
  br i1 %tobool105, label %if.end108, label %if.then106, !dbg !13719

if.then106:                                       ; preds = %land.lhs.true96
  %67 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13720
  %68 = load i32, i32* %t32, align 4, !dbg !13722
  call void @SET_BIT(%struct.simple_bitmap_def* %67, i32 %68), !dbg !13723
  %69 = load i32, i32* @changed_count, align 4, !dbg !13724
  %inc107 = add i32 %69, 1, !dbg !13724
  store i32 %inc107, i32* @changed_count, align 4, !dbg !13724
  br label %if.end108, !dbg !13725

if.end108:                                        ; preds = %if.then106, %land.lhs.true96, %land.lhs.true90, %if.then85
  br label %if.end109, !dbg !13726

if.end109:                                        ; preds = %if.end108, %do.body
  %70 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13727
  %offset110 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %70, i32 0, i32 3, !dbg !13729
  %71 = load i64, i64* %offset110, align 8, !dbg !13729
  %72 = load i64, i64* %fieldoffset, align 8, !dbg !13730
  %cmp111 = icmp eq i64 %71, %72, !dbg !13731
  br i1 %cmp111, label %if.then115, label %lor.lhs.false, !dbg !13732

lor.lhs.false:                                    ; preds = %if.end109
  %73 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13733
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %73, i32 0, i32 2, !dbg !13734
  %74 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !13734
  %cmp113 = icmp eq %struct.variable_info* %74, null, !dbg !13735
  br i1 %cmp113, label %if.then115, label %if.end116, !dbg !13736

if.then115:                                       ; preds = %lor.lhs.false, %if.end109
  br label %do.end, !dbg !13737

if.end116:                                        ; preds = %lor.lhs.false
  %75 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13738
  %next117 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %75, i32 0, i32 2, !dbg !13739
  %76 = load %struct.variable_info*, %struct.variable_info** %next117, align 8, !dbg !13739
  store %struct.variable_info* %76, %struct.variable_info** %v, align 8, !dbg !13740
  %77 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13741
  %offset118 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %77, i32 0, i32 3, !dbg !13742
  %78 = load i64, i64* %offset118, align 8, !dbg !13742
  store i64 %78, i64* %fieldoffset, align 8, !dbg !13743
  br label %do.cond, !dbg !13744

do.cond:                                          ; preds = %if.end116
  br i1 true, label %do.body, label %do.end, !dbg !13744, !llvm.loop !13745

do.end:                                           ; preds = %do.cond, %if.then115
  br label %for.inc, !dbg !13747

for.inc:                                          ; preds = %do.end, %if.then78, %if.then62
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13626
  br label %for.cond, !dbg !13626, !llvm.loop !13748

for.end:                                          ; preds = %if.end24, %for.cond
  ret void, !dbg !13750
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_sd_constraint(%struct.constraint_graph* %graph, %struct.constraint* %c, %struct.bitmap_head_def* %delta) #0 !dbg !13751 {
entry:
  %graph.addr = alloca %struct.constraint_graph*, align 8
  %c.addr = alloca %struct.constraint*, align 8
  %delta.addr = alloca %struct.bitmap_head_def*, align 8
  %lhs = alloca i32, align 4
  %flag = alloca i8, align 1
  %sol = alloca %struct.bitmap_head_def*, align 8
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %roffset = alloca i64, align 8
  %v = alloca %struct.variable_info*, align 8
  %fieldoffset = alloca i64, align 8
  %t = alloca i32, align 4
  store %struct.constraint_graph* %graph, %struct.constraint_graph** %graph.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint_graph** %graph.addr, metadata !13752, metadata !DIExpression()), !dbg !13753
  store %struct.constraint* %c, %struct.constraint** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constraint** %c.addr, metadata !13754, metadata !DIExpression()), !dbg !13755
  store %struct.bitmap_head_def* %delta, %struct.bitmap_head_def** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %delta.addr, metadata !13756, metadata !DIExpression()), !dbg !13757
  call void @llvm.dbg.declare(metadata i32* %lhs, metadata !13758, metadata !DIExpression()), !dbg !13759
  %0 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13760
  %lhs1 = getelementptr inbounds %struct.constraint, %struct.constraint* %0, i32 0, i32 0, !dbg !13761
  %var = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs1, i32 0, i32 1, !dbg !13762
  %1 = load i32, i32* %var, align 4, !dbg !13762
  store i32 %1, i32* %lhs, align 4, !dbg !13759
  call void @llvm.dbg.declare(metadata i8* %flag, metadata !13763, metadata !DIExpression()), !dbg !13764
  store i8 0, i8* %flag, align 1, !dbg !13764
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %sol, metadata !13765, metadata !DIExpression()), !dbg !13766
  %2 = load i32, i32* %lhs, align 4, !dbg !13767
  %call = call %struct.variable_info* @get_varinfo(i32 %2), !dbg !13768
  %solution = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call, i32 0, i32 8, !dbg !13769
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution, align 8, !dbg !13769
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %sol, align 8, !dbg !13766
  call void @llvm.dbg.declare(metadata i32* %j, metadata !13770, metadata !DIExpression()), !dbg !13771
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13772, metadata !DIExpression()), !dbg !13773
  call void @llvm.dbg.declare(metadata i64* %roffset, metadata !13774, metadata !DIExpression()), !dbg !13775
  %4 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13776
  %rhs = getelementptr inbounds %struct.constraint, %struct.constraint* %4, i32 0, i32 1, !dbg !13777
  %offset = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %rhs, i32 0, i32 2, !dbg !13778
  %5 = load i64, i64* %offset, align 8, !dbg !13778
  store i64 %5, i64* %roffset, align 8, !dbg !13775
  %6 = load %struct.constraint*, %struct.constraint** %c.addr, align 8, !dbg !13779
  %lhs2 = getelementptr inbounds %struct.constraint, %struct.constraint* %6, i32 0, i32 0, !dbg !13779
  %offset3 = getelementptr inbounds %struct.constraint_expr, %struct.constraint_expr* %lhs2, i32 0, i32 2, !dbg !13779
  %7 = load i64, i64* %offset3, align 8, !dbg !13779
  %cmp = icmp eq i64 %7, 0, !dbg !13779
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !13779

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 1535, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !13779
  br label %cond.end, !dbg !13779

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13779

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13779
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13780
  %call4 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %8, i32 1), !dbg !13782
  %tobool = icmp ne i32 %call4, 0, !dbg !13782
  br i1 %tobool, label %if.then, label %if.end, !dbg !13783

if.then:                                          ; preds = %cond.end
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sol, align 8, !dbg !13784
  %call5 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %9, i32 1), !dbg !13786
  %conv = zext i8 %call5 to i32, !dbg !13786
  %10 = load i8, i8* %flag, align 1, !dbg !13787
  %conv6 = zext i8 %10 to i32, !dbg !13787
  %or = or i32 %conv6, %conv, !dbg !13787
  %conv7 = trunc i32 %or to i8, !dbg !13787
  store i8 %conv7, i8* %flag, align 1, !dbg !13787
  br label %done, !dbg !13788

if.end:                                           ; preds = %cond.end
  %11 = load i64, i64* %roffset, align 8, !dbg !13789
  %cmp8 = icmp eq i64 %11, -9223372036854775808, !dbg !13791
  br i1 %cmp8, label %if.then10, label %if.end11, !dbg !13792

if.then10:                                        ; preds = %if.end
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13793
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13795
  call void @solution_set_expand(%struct.bitmap_head_def* %12, %struct.bitmap_head_def* %13), !dbg !13796
  store i64 0, i64* %roffset, align 8, !dbg !13797
  br label %if.end11, !dbg !13798

if.end11:                                         ; preds = %if.then10, %if.end
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %delta.addr, align 8, !dbg !13799
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %14, i32 0, i32* %j), !dbg !13799
  br label %for.cond, !dbg !13799

for.cond:                                         ; preds = %for.inc, %if.end11
  %call12 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13801
  %tobool13 = icmp ne i8 %call12, 0, !dbg !13799
  br i1 %tobool13, label %for.body, label %for.end, !dbg !13799

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %v, metadata !13803, metadata !DIExpression()), !dbg !13805
  %15 = load i32, i32* %j, align 4, !dbg !13806
  %call14 = call %struct.variable_info* @get_varinfo(i32 %15), !dbg !13807
  store %struct.variable_info* %call14, %struct.variable_info** %v, align 8, !dbg !13805
  call void @llvm.dbg.declare(metadata i64* %fieldoffset, metadata !13808, metadata !DIExpression()), !dbg !13809
  %16 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13810
  %offset15 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %16, i32 0, i32 3, !dbg !13811
  %17 = load i64, i64* %offset15, align 8, !dbg !13811
  %18 = load i64, i64* %roffset, align 8, !dbg !13812
  %add = add i64 %17, %18, !dbg !13813
  store i64 %add, i64* %fieldoffset, align 8, !dbg !13809
  call void @llvm.dbg.declare(metadata i32* %t, metadata !13814, metadata !DIExpression()), !dbg !13815
  %19 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13816
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %19, i32 0, i32 1, !dbg !13818
  %bf.load = load i8, i8* %is_full_var, align 4, !dbg !13818
  %bf.lshr = lshr i8 %bf.load, 3, !dbg !13818
  %bf.clear = and i8 %bf.lshr, 1, !dbg !13818
  %bf.cast = zext i8 %bf.clear to i32, !dbg !13818
  %tobool16 = icmp ne i32 %bf.cast, 0, !dbg !13816
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !13819

if.then17:                                        ; preds = %for.body
  %20 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13820
  %offset18 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %20, i32 0, i32 3, !dbg !13821
  %21 = load i64, i64* %offset18, align 8, !dbg !13821
  store i64 %21, i64* %fieldoffset, align 8, !dbg !13822
  br label %if.end24, !dbg !13823

if.else:                                          ; preds = %for.body
  %22 = load i64, i64* %roffset, align 8, !dbg !13824
  %cmp19 = icmp ne i64 %22, 0, !dbg !13826
  br i1 %cmp19, label %if.then21, label %if.end23, !dbg !13827

if.then21:                                        ; preds = %if.else
  %23 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13828
  %24 = load i64, i64* %fieldoffset, align 8, !dbg !13829
  %call22 = call %struct.variable_info* @first_vi_for_offset(%struct.variable_info* %23, i64 %24), !dbg !13830
  store %struct.variable_info* %call22, %struct.variable_info** %v, align 8, !dbg !13831
  br label %if.end23, !dbg !13832

if.end23:                                         ; preds = %if.then21, %if.else
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then17
  %25 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13833
  %tobool25 = icmp ne %struct.variable_info* %25, null, !dbg !13833
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !13835

if.then26:                                        ; preds = %if.end24
  br label %for.inc, !dbg !13836

if.end27:                                         ; preds = %if.end24
  br label %do.body, !dbg !13837

do.body:                                          ; preds = %do.cond, %if.end27
  %26 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13838
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %26, i32 0, i32 0, !dbg !13840
  %27 = load i32, i32* %id, align 8, !dbg !13840
  %call28 = call i32 @find(i32 %27), !dbg !13841
  store i32 %call28, i32* %t, align 4, !dbg !13842
  %28 = load i32, i32* %t, align 4, !dbg !13843
  %call29 = call %struct.variable_info* @get_varinfo(i32 %28), !dbg !13845
  %is_special_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call29, i32 0, i32 1, !dbg !13846
  %bf.load30 = load i8, i8* %is_special_var, align 4, !dbg !13846
  %bf.lshr31 = lshr i8 %bf.load30, 1, !dbg !13846
  %bf.clear32 = and i8 %bf.lshr31, 1, !dbg !13846
  %bf.cast33 = zext i8 %bf.clear32 to i32, !dbg !13846
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !13845
  br i1 %tobool34, label %if.then35, label %if.else43, !dbg !13847

if.then35:                                        ; preds = %do.body
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sol, align 8, !dbg !13848
  %30 = load i32, i32* %t, align 4, !dbg !13849
  %call36 = call %struct.variable_info* @get_varinfo(i32 %30), !dbg !13850
  %solution37 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call36, i32 0, i32 8, !dbg !13851
  %31 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution37, align 8, !dbg !13851
  %call38 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %29, %struct.bitmap_head_def* %31), !dbg !13852
  %conv39 = zext i8 %call38 to i32, !dbg !13852
  %32 = load i8, i8* %flag, align 1, !dbg !13853
  %conv40 = zext i8 %32 to i32, !dbg !13853
  %or41 = or i32 %conv40, %conv39, !dbg !13853
  %conv42 = trunc i32 %or41 to i8, !dbg !13853
  store i8 %conv42, i8* %flag, align 1, !dbg !13853
  br label %if.end66, !dbg !13854

if.else43:                                        ; preds = %do.body
  %33 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13855
  %id44 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %33, i32 0, i32 0, !dbg !13857
  %34 = load i32, i32* %id44, align 8, !dbg !13857
  %cmp45 = icmp eq i32 %34, 3, !dbg !13858
  br i1 %cmp45, label %if.then47, label %if.else53, !dbg !13859

if.then47:                                        ; preds = %if.else43
  %35 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sol, align 8, !dbg !13860
  %call48 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %35, i32 3), !dbg !13861
  %conv49 = zext i8 %call48 to i32, !dbg !13861
  %36 = load i8, i8* %flag, align 1, !dbg !13862
  %conv50 = zext i8 %36 to i32, !dbg !13862
  %or51 = or i32 %conv50, %conv49, !dbg !13862
  %conv52 = trunc i32 %or51 to i8, !dbg !13862
  store i8 %conv52, i8* %flag, align 1, !dbg !13862
  br label %if.end65, !dbg !13863

if.else53:                                        ; preds = %if.else43
  %37 = load %struct.constraint_graph*, %struct.constraint_graph** %graph.addr, align 8, !dbg !13864
  %38 = load i32, i32* %lhs, align 4, !dbg !13866
  %39 = load i32, i32* %t, align 4, !dbg !13867
  %call54 = call zeroext i8 @add_graph_edge(%struct.constraint_graph* %37, i32 %38, i32 %39), !dbg !13868
  %tobool55 = icmp ne i8 %call54, 0, !dbg !13868
  br i1 %tobool55, label %if.then56, label %if.end64, !dbg !13869

if.then56:                                        ; preds = %if.else53
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sol, align 8, !dbg !13870
  %41 = load i32, i32* %t, align 4, !dbg !13871
  %call57 = call %struct.variable_info* @get_varinfo(i32 %41), !dbg !13872
  %solution58 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call57, i32 0, i32 8, !dbg !13873
  %42 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %solution58, align 8, !dbg !13873
  %call59 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %40, %struct.bitmap_head_def* %42), !dbg !13874
  %conv60 = zext i8 %call59 to i32, !dbg !13874
  %43 = load i8, i8* %flag, align 1, !dbg !13875
  %conv61 = zext i8 %43 to i32, !dbg !13875
  %or62 = or i32 %conv61, %conv60, !dbg !13875
  %conv63 = trunc i32 %or62 to i8, !dbg !13875
  store i8 %conv63, i8* %flag, align 1, !dbg !13875
  br label %if.end64, !dbg !13876

if.end64:                                         ; preds = %if.then56, %if.else53
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then47
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then35
  %44 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13877
  %offset67 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %44, i32 0, i32 3, !dbg !13879
  %45 = load i64, i64* %offset67, align 8, !dbg !13879
  %46 = load i64, i64* %fieldoffset, align 8, !dbg !13880
  %cmp68 = icmp eq i64 %45, %46, !dbg !13881
  br i1 %cmp68, label %if.then72, label %lor.lhs.false, !dbg !13882

lor.lhs.false:                                    ; preds = %if.end66
  %47 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13883
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %47, i32 0, i32 2, !dbg !13884
  %48 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !13884
  %cmp70 = icmp eq %struct.variable_info* %48, null, !dbg !13885
  br i1 %cmp70, label %if.then72, label %if.end73, !dbg !13886

if.then72:                                        ; preds = %lor.lhs.false, %if.end66
  br label %do.end, !dbg !13887

if.end73:                                         ; preds = %lor.lhs.false
  %49 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13888
  %next74 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %49, i32 0, i32 2, !dbg !13889
  %50 = load %struct.variable_info*, %struct.variable_info** %next74, align 8, !dbg !13889
  store %struct.variable_info* %50, %struct.variable_info** %v, align 8, !dbg !13890
  %51 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13891
  %offset75 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %51, i32 0, i32 3, !dbg !13892
  %52 = load i64, i64* %offset75, align 8, !dbg !13892
  store i64 %52, i64* %fieldoffset, align 8, !dbg !13893
  br label %do.cond, !dbg !13894

do.cond:                                          ; preds = %if.end73
  br i1 true, label %do.body, label %do.end, !dbg !13894, !llvm.loop !13895

do.end:                                           ; preds = %do.cond, %if.then72
  br label %for.inc, !dbg !13897

for.inc:                                          ; preds = %do.end, %if.then26
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13801
  br label %for.cond, !dbg !13801, !llvm.loop !13898

for.end:                                          ; preds = %for.cond
  br label %done, !dbg !13899

done:                                             ; preds = %for.end, %if.then
  call void @llvm.dbg.label(metadata !13900), !dbg !13901
  %53 = load i8, i8* %flag, align 1, !dbg !13902
  %tobool76 = icmp ne i8 %53, 0, !dbg !13902
  br i1 %tobool76, label %if.then77, label %if.end83, !dbg !13904

if.then77:                                        ; preds = %done
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %sol, align 8, !dbg !13905
  %55 = load i32, i32* %lhs, align 4, !dbg !13907
  %call78 = call %struct.variable_info* @get_varinfo(i32 %55), !dbg !13908
  %solution79 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %call78, i32 0, i32 8, !dbg !13909
  store %struct.bitmap_head_def* %54, %struct.bitmap_head_def** %solution79, align 8, !dbg !13910
  %56 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13911
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %56, i32 0, i32 3, !dbg !13911
  %57 = load i32, i32* %lhs, align 4, !dbg !13911
  %div = udiv i32 %57, 64, !dbg !13911
  %idxprom = zext i32 %div to i64, !dbg !13911
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !13911
  %58 = load i64, i64* %arrayidx, align 8, !dbg !13911
  %59 = load i32, i32* %lhs, align 4, !dbg !13911
  %rem = urem i32 %59, 64, !dbg !13911
  %sh_prom = zext i32 %rem to i64, !dbg !13911
  %shr = lshr i64 %58, %sh_prom, !dbg !13911
  %and = and i64 %shr, 1, !dbg !13911
  %tobool80 = icmp ne i64 %and, 0, !dbg !13911
  br i1 %tobool80, label %if.end82, label %if.then81, !dbg !13913

if.then81:                                        ; preds = %if.then77
  %60 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed, align 8, !dbg !13914
  %61 = load i32, i32* %lhs, align 4, !dbg !13916
  call void @SET_BIT(%struct.simple_bitmap_def* %60, i32 %61), !dbg !13917
  %62 = load i32, i32* @changed_count, align 4, !dbg !13918
  %inc = add i32 %62, 1, !dbg !13918
  store i32 %inc, i32* @changed_count, align 4, !dbg !13918
  br label %if.end82, !dbg !13919

if.end82:                                         ; preds = %if.then81, %if.then77
  br label %if.end83, !dbg !13920

if.end83:                                         ; preds = %if.end82, %done
  ret void, !dbg !13921
}

; Function Attrs: noinline nounwind uwtable
define internal void @solution_set_expand(%struct.bitmap_head_def* %result, %struct.bitmap_head_def* %set) #0 !dbg !13922 {
entry:
  %result.addr = alloca %struct.bitmap_head_def*, align 8
  %set.addr = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %vars = alloca %struct.bitmap_head_def*, align 8
  %j = alloca i32, align 4
  %v = alloca %struct.variable_info*, align 8
  %v18 = alloca %struct.variable_info*, align 8
  store %struct.bitmap_head_def* %result, %struct.bitmap_head_def** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %result.addr, metadata !13925, metadata !DIExpression()), !dbg !13926
  store %struct.bitmap_head_def* %set, %struct.bitmap_head_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %set.addr, metadata !13927, metadata !DIExpression()), !dbg !13928
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13929, metadata !DIExpression()), !dbg !13930
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %vars, metadata !13931, metadata !DIExpression()), !dbg !13932
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %vars, align 8, !dbg !13932
  call void @llvm.dbg.declare(metadata i32* %j, metadata !13933, metadata !DIExpression()), !dbg !13934
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !13935
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %0, i32 0, i32* %j), !dbg !13935
  br label %for.cond, !dbg !13935

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13937
  %tobool = icmp ne i8 %call, 0, !dbg !13935
  br i1 %tobool, label %for.body, label %for.end, !dbg !13935

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %v, metadata !13939, metadata !DIExpression()), !dbg !13941
  %1 = load i32, i32* %j, align 4, !dbg !13942
  %call1 = call %struct.variable_info* @get_varinfo(i32 %1), !dbg !13943
  store %struct.variable_info* %call1, %struct.variable_info** %v, align 8, !dbg !13941
  %2 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13944
  %is_artificial_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %2, i32 0, i32 1, !dbg !13946
  %bf.load = load i8, i8* %is_artificial_var, align 4, !dbg !13946
  %bf.clear = and i8 %bf.load, 1, !dbg !13946
  %bf.cast = zext i8 %bf.clear to i32, !dbg !13946
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !13944
  br i1 %tobool2, label %if.then, label %lor.lhs.false, !dbg !13947

lor.lhs.false:                                    ; preds = %for.body
  %3 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13948
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %3, i32 0, i32 1, !dbg !13949
  %bf.load3 = load i8, i8* %is_full_var, align 4, !dbg !13949
  %bf.lshr = lshr i8 %bf.load3, 3, !dbg !13949
  %bf.clear4 = and i8 %bf.lshr, 1, !dbg !13949
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !13949
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !13948
  br i1 %tobool6, label %if.then, label %if.end, !dbg !13950

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc, !dbg !13951

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13952
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %4, i32 0, i32 7, !dbg !13953
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13953
  %call7 = call %struct.variable_info* @lookup_vi_for_tree(%union.tree_node* %5), !dbg !13954
  store %struct.variable_info* %call7, %struct.variable_info** %v, align 8, !dbg !13955
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !13956
  %cmp = icmp eq %struct.bitmap_head_def* %6, null, !dbg !13958
  br i1 %cmp, label %if.then8, label %if.end10, !dbg !13959

if.then8:                                         ; preds = %if.end
  %call9 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !13960
  store %struct.bitmap_head_def* %call9, %struct.bitmap_head_def** %vars, align 8, !dbg !13961
  br label %if.end10, !dbg !13962

if.end10:                                         ; preds = %if.then8, %if.end
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !13963
  %8 = load %struct.variable_info*, %struct.variable_info** %v, align 8, !dbg !13964
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %8, i32 0, i32 0, !dbg !13965
  %9 = load i32, i32* %id, align 8, !dbg !13965
  %call11 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %7, i32 %9), !dbg !13966
  br label %for.inc, !dbg !13967

for.inc:                                          ; preds = %if.end10, %if.then
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13937
  br label %for.cond, !dbg !13937, !llvm.loop !13968

for.end:                                          ; preds = %for.cond
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !13970
  %cmp12 = icmp ne %struct.bitmap_head_def* %10, null, !dbg !13972
  br i1 %cmp12, label %if.then13, label %if.end29, !dbg !13973

if.then13:                                        ; preds = %for.end
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !13974
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %11, i32 0, i32* %j), !dbg !13974
  br label %for.cond14, !dbg !13974

for.cond14:                                       ; preds = %for.inc27, %if.then13
  %call15 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13977
  %tobool16 = icmp ne i8 %call15, 0, !dbg !13974
  br i1 %tobool16, label %for.body17, label %for.end28, !dbg !13974

for.body17:                                       ; preds = %for.cond14
  call void @llvm.dbg.declare(metadata %struct.variable_info** %v18, metadata !13979, metadata !DIExpression()), !dbg !13981
  %12 = load i32, i32* %j, align 4, !dbg !13982
  %call19 = call %struct.variable_info* @get_varinfo(i32 %12), !dbg !13983
  store %struct.variable_info* %call19, %struct.variable_info** %v18, align 8, !dbg !13981
  br label %for.cond20, !dbg !13984

for.cond20:                                       ; preds = %for.inc25, %for.body17
  %13 = load %struct.variable_info*, %struct.variable_info** %v18, align 8, !dbg !13985
  %cmp21 = icmp ne %struct.variable_info* %13, null, !dbg !13988
  br i1 %cmp21, label %for.body22, label %for.end26, !dbg !13989

for.body22:                                       ; preds = %for.cond20
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %result.addr, align 8, !dbg !13990
  %15 = load %struct.variable_info*, %struct.variable_info** %v18, align 8, !dbg !13991
  %id23 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %15, i32 0, i32 0, !dbg !13992
  %16 = load i32, i32* %id23, align 8, !dbg !13992
  %call24 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %14, i32 %16), !dbg !13993
  br label %for.inc25, !dbg !13993

for.inc25:                                        ; preds = %for.body22
  %17 = load %struct.variable_info*, %struct.variable_info** %v18, align 8, !dbg !13994
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %17, i32 0, i32 2, !dbg !13995
  %18 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !13995
  store %struct.variable_info* %18, %struct.variable_info** %v18, align 8, !dbg !13996
  br label %for.cond20, !dbg !13997, !llvm.loop !13998

for.end26:                                        ; preds = %for.cond20
  br label %for.inc27, !dbg !14000

for.inc27:                                        ; preds = %for.end26
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !13977
  br label %for.cond14, !dbg !13977, !llvm.loop !14001

for.end28:                                        ; preds = %for.cond14
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !14003
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %19), !dbg !14003
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %vars, align 8, !dbg !14003
  br label %if.end29, !dbg !14004

if.end29:                                         ; preds = %for.end28, %for.end
  ret void, !dbg !14005
}

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @solution_set_add(%struct.bitmap_head_def* %set, i64 %offset) #0 !dbg !14006 {
entry:
  %set.addr = alloca %struct.bitmap_head_def*, align 8
  %offset.addr = alloca i64, align 8
  %result = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %vi = alloca %struct.variable_info*, align 8
  %fieldoffset = alloca i64, align 8
  store %struct.bitmap_head_def* %set, %struct.bitmap_head_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %set.addr, metadata !14009, metadata !DIExpression()), !dbg !14010
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !14011, metadata !DIExpression()), !dbg !14012
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %result, metadata !14013, metadata !DIExpression()), !dbg !14014
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @iteration_obstack), !dbg !14015
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %result, align 8, !dbg !14014
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14016, metadata !DIExpression()), !dbg !14017
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !14018, metadata !DIExpression()), !dbg !14019
  %0 = load i64, i64* %offset.addr, align 8, !dbg !14020
  %cmp = icmp eq i64 %0, -9223372036854775808, !dbg !14022
  br i1 %cmp, label %if.then, label %if.end, !dbg !14023

if.then:                                          ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !14024
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !14026
  call void @solution_set_expand(%struct.bitmap_head_def* %1, %struct.bitmap_head_def* %2), !dbg !14027
  br label %return, !dbg !14028

if.end:                                           ; preds = %entry
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !14029
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %3, i32 0, i32* %i), !dbg !14029
  br label %for.cond, !dbg !14029

for.cond:                                         ; preds = %for.inc, %if.end
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !14031
  %tobool = icmp ne i8 %call1, 0, !dbg !14029
  br i1 %tobool, label %for.body, label %for.end, !dbg !14029

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !14033, metadata !DIExpression()), !dbg !14035
  %4 = load i32, i32* %i, align 4, !dbg !14036
  %call2 = call %struct.variable_info* @get_varinfo(i32 %4), !dbg !14037
  store %struct.variable_info* %call2, %struct.variable_info** %vi, align 8, !dbg !14035
  %5 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14038
  %is_artificial_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %5, i32 0, i32 1, !dbg !14040
  %bf.load = load i8, i8* %is_artificial_var, align 4, !dbg !14040
  %bf.clear = and i8 %bf.load, 1, !dbg !14040
  %bf.cast = zext i8 %bf.clear to i32, !dbg !14040
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !14038
  br i1 %tobool3, label %if.then14, label %lor.lhs.false, !dbg !14041

lor.lhs.false:                                    ; preds = %for.body
  %6 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14042
  %is_unknown_size_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %6, i32 0, i32 1, !dbg !14043
  %bf.load4 = load i8, i8* %is_unknown_size_var, align 4, !dbg !14043
  %bf.lshr = lshr i8 %bf.load4, 2, !dbg !14043
  %bf.clear5 = and i8 %bf.lshr, 1, !dbg !14043
  %bf.cast6 = zext i8 %bf.clear5 to i32, !dbg !14043
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !14042
  br i1 %tobool7, label %if.then14, label %lor.lhs.false8, !dbg !14044

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %7 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14045
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %7, i32 0, i32 1, !dbg !14046
  %bf.load9 = load i8, i8* %is_full_var, align 4, !dbg !14046
  %bf.lshr10 = lshr i8 %bf.load9, 3, !dbg !14046
  %bf.clear11 = and i8 %bf.lshr10, 1, !dbg !14046
  %bf.cast12 = zext i8 %bf.clear11 to i32, !dbg !14046
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !14045
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !14047

if.then14:                                        ; preds = %lor.lhs.false8, %lor.lhs.false, %for.body
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %result, align 8, !dbg !14048
  %9 = load i32, i32* %i, align 4, !dbg !14049
  %call15 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %8, i32 %9), !dbg !14050
  br label %if.end36, !dbg !14050

if.else:                                          ; preds = %lor.lhs.false8
  call void @llvm.dbg.declare(metadata i64* %fieldoffset, metadata !14051, metadata !DIExpression()), !dbg !14053
  %10 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14054
  %offset16 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %10, i32 0, i32 3, !dbg !14055
  %11 = load i64, i64* %offset16, align 8, !dbg !14055
  %12 = load i64, i64* %offset.addr, align 8, !dbg !14056
  %add = add i64 %11, %12, !dbg !14057
  store i64 %add, i64* %fieldoffset, align 8, !dbg !14053
  %13 = load i64, i64* %offset.addr, align 8, !dbg !14058
  %cmp17 = icmp slt i64 %13, 0, !dbg !14060
  br i1 %cmp17, label %land.lhs.true, label %if.end21, !dbg !14061

land.lhs.true:                                    ; preds = %if.else
  %14 = load i64, i64* %fieldoffset, align 8, !dbg !14062
  %15 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14063
  %offset18 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %15, i32 0, i32 3, !dbg !14064
  %16 = load i64, i64* %offset18, align 8, !dbg !14064
  %cmp19 = icmp ugt i64 %14, %16, !dbg !14065
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !14066

if.then20:                                        ; preds = %land.lhs.true
  store i64 0, i64* %fieldoffset, align 8, !dbg !14067
  br label %if.end21, !dbg !14068

if.end21:                                         ; preds = %if.then20, %land.lhs.true, %if.else
  %17 = load i64, i64* %offset.addr, align 8, !dbg !14069
  %cmp22 = icmp ne i64 %17, 0, !dbg !14071
  br i1 %cmp22, label %if.then23, label %if.end25, !dbg !14072

if.then23:                                        ; preds = %if.end21
  %18 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14073
  %19 = load i64, i64* %fieldoffset, align 8, !dbg !14074
  %call24 = call %struct.variable_info* @first_or_preceding_vi_for_offset(%struct.variable_info* %18, i64 %19), !dbg !14075
  store %struct.variable_info* %call24, %struct.variable_info** %vi, align 8, !dbg !14076
  br label %if.end25, !dbg !14077

if.end25:                                         ; preds = %if.then23, %if.end21
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %result, align 8, !dbg !14078
  %21 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14079
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %21, i32 0, i32 0, !dbg !14080
  %22 = load i32, i32* %id, align 8, !dbg !14080
  %call26 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %20, i32 %22), !dbg !14081
  %23 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14082
  %offset27 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %23, i32 0, i32 3, !dbg !14084
  %24 = load i64, i64* %offset27, align 8, !dbg !14084
  %25 = load i64, i64* %fieldoffset, align 8, !dbg !14085
  %cmp28 = icmp ne i64 %24, %25, !dbg !14086
  br i1 %cmp28, label %land.lhs.true29, label %if.end35, !dbg !14087

land.lhs.true29:                                  ; preds = %if.end25
  %26 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14088
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %26, i32 0, i32 2, !dbg !14089
  %27 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !14089
  %cmp30 = icmp ne %struct.variable_info* %27, null, !dbg !14090
  br i1 %cmp30, label %if.then31, label %if.end35, !dbg !14091

if.then31:                                        ; preds = %land.lhs.true29
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %result, align 8, !dbg !14092
  %29 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14093
  %next32 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %29, i32 0, i32 2, !dbg !14094
  %30 = load %struct.variable_info*, %struct.variable_info** %next32, align 8, !dbg !14094
  %id33 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %30, i32 0, i32 0, !dbg !14095
  %31 = load i32, i32* %id33, align 8, !dbg !14095
  %call34 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %28, i32 %31), !dbg !14096
  br label %if.end35, !dbg !14096

if.end35:                                         ; preds = %if.then31, %land.lhs.true29, %if.end25
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then14
  br label %for.inc, !dbg !14097

for.inc:                                          ; preds = %if.end36
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !14031
  br label %for.cond, !dbg !14031, !llvm.loop !14098

for.end:                                          ; preds = %for.cond
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !14100
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %result, align 8, !dbg !14101
  call void @bitmap_copy(%struct.bitmap_head_def* %32, %struct.bitmap_head_def* %33), !dbg !14102
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %result, align 8, !dbg !14103
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %34), !dbg !14103
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %result, align 8, !dbg !14103
  br label %return, !dbg !14104

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !14104
}

declare dso_local %struct.bitmap_head_def* @bitmap_gc_alloc_stat() #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_uids_in_ptset(%struct.bitmap_head_def* %into, %struct.bitmap_head_def* %from, %struct.pt_solution* %pt) #0 !dbg !14105 {
entry:
  %into.addr = alloca %struct.bitmap_head_def*, align 8
  %from.addr = alloca %struct.bitmap_head_def*, align 8
  %pt.addr = alloca %struct.pt_solution*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %vi = alloca %struct.variable_info*, align 8
  store %struct.bitmap_head_def* %into, %struct.bitmap_head_def** %into.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %into.addr, metadata !14108, metadata !DIExpression()), !dbg !14109
  store %struct.bitmap_head_def* %from, %struct.bitmap_head_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %from.addr, metadata !14110, metadata !DIExpression()), !dbg !14111
  store %struct.pt_solution* %pt, %struct.pt_solution** %pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt.addr, metadata !14112, metadata !DIExpression()), !dbg !14113
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14114, metadata !DIExpression()), !dbg !14115
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !14116, metadata !DIExpression()), !dbg !14117
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %from.addr, align 8, !dbg !14118
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %0, i32 0, i32* %i), !dbg !14118
  br label %for.cond, !dbg !14118

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !14120
  %tobool = icmp ne i8 %call, 0, !dbg !14118
  br i1 %tobool, label %for.body, label %for.end, !dbg !14118

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !14122, metadata !DIExpression()), !dbg !14124
  %1 = load i32, i32* %i, align 4, !dbg !14125
  %call1 = call %struct.variable_info* @get_varinfo(i32 %1), !dbg !14126
  store %struct.variable_info* %call1, %struct.variable_info** %vi, align 8, !dbg !14124
  %2 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14127
  %is_artificial_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %2, i32 0, i32 1, !dbg !14129
  %bf.load = load i8, i8* %is_artificial_var, align 4, !dbg !14129
  %bf.clear = and i8 %bf.load, 1, !dbg !14129
  %bf.cast = zext i8 %bf.clear to i32, !dbg !14129
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !14127
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !14130

land.lhs.true:                                    ; preds = %for.body
  %3 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14131
  %is_heap_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %3, i32 0, i32 1, !dbg !14132
  %bf.load3 = load i8, i8* %is_heap_var, align 4, !dbg !14132
  %bf.lshr = lshr i8 %bf.load3, 4, !dbg !14132
  %bf.clear4 = and i8 %bf.lshr, 1, !dbg !14132
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !14132
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !14131
  br i1 %tobool6, label %if.end, label %if.then, !dbg !14133

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc, !dbg !14134

if.end:                                           ; preds = %land.lhs.true, %for.body
  %4 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14135
  %decl = getelementptr inbounds %struct.variable_info, %struct.variable_info* %4, i32 0, i32 7, !dbg !14135
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !14135
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !14135
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !14135
  %bf.load7 = load i64, i64* %6, align 8, !dbg !14135
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !14135
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !14135
  %cmp = icmp eq i32 %bf.cast9, 32, !dbg !14137
  br i1 %cmp, label %if.then23, label %lor.lhs.false, !dbg !14138

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14139
  %decl10 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %7, i32 0, i32 7, !dbg !14139
  %8 = load %union.tree_node*, %union.tree_node** %decl10, align 8, !dbg !14139
  %base11 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !14139
  %9 = bitcast %struct.tree_base* %base11 to i64*, !dbg !14139
  %bf.load12 = load i64, i64* %9, align 8, !dbg !14139
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !14139
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !14139
  %cmp15 = icmp eq i32 %bf.cast14, 34, !dbg !14140
  br i1 %cmp15, label %if.then23, label %lor.lhs.false16, !dbg !14141

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %10 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14142
  %decl17 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %10, i32 0, i32 7, !dbg !14142
  %11 = load %union.tree_node*, %union.tree_node** %decl17, align 8, !dbg !14142
  %base18 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !14142
  %12 = bitcast %struct.tree_base* %base18 to i64*, !dbg !14142
  %bf.load19 = load i64, i64* %12, align 8, !dbg !14142
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !14142
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !14142
  %cmp22 = icmp eq i32 %bf.cast21, 36, !dbg !14143
  br i1 %cmp22, label %if.then23, label %if.end34, !dbg !14144

if.then23:                                        ; preds = %lor.lhs.false16, %lor.lhs.false, %if.end
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %into.addr, align 8, !dbg !14145
  %14 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14147
  %decl24 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %14, i32 0, i32 7, !dbg !14147
  %15 = load %union.tree_node*, %union.tree_node** %decl24, align 8, !dbg !14147
  %decl_minimal = bitcast %union.tree_node* %15 to %struct.tree_decl_minimal*, !dbg !14147
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !14147
  %16 = load i32, i32* %uid, align 4, !dbg !14147
  %call25 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %13, i32 %16), !dbg !14148
  %17 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14149
  %is_global_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %17, i32 0, i32 1, !dbg !14151
  %bf.load26 = load i8, i8* %is_global_var, align 4, !dbg !14151
  %bf.lshr27 = lshr i8 %bf.load26, 7, !dbg !14151
  %bf.cast28 = zext i8 %bf.lshr27 to i32, !dbg !14151
  %tobool29 = icmp ne i32 %bf.cast28, 0, !dbg !14149
  br i1 %tobool29, label %if.then30, label %if.end33, !dbg !14152

if.then30:                                        ; preds = %if.then23
  %18 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !14153
  %19 = bitcast %struct.pt_solution* %18 to i8*, !dbg !14154
  %bf.load31 = load i8, i8* %19, align 8, !dbg !14155
  %bf.clear32 = and i8 %bf.load31, -17, !dbg !14155
  %bf.set = or i8 %bf.clear32, 16, !dbg !14155
  store i8 %bf.set, i8* %19, align 8, !dbg !14155
  br label %if.end33, !dbg !14153

if.end33:                                         ; preds = %if.then30, %if.then23
  br label %if.end34, !dbg !14156

if.end34:                                         ; preds = %if.end33, %lor.lhs.false16
  br label %for.inc, !dbg !14157

for.inc:                                          ; preds = %if.end34, %if.then
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !14120
  br label %for.cond, !dbg !14120, !llvm.loop !14158

for.end:                                          ; preds = %for.cond
  ret void, !dbg !14160
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def* @shared_bitmap_lookup(%struct.bitmap_head_def* %pt_vars) #0 !dbg !14161 {
entry:
  %retval = alloca %struct.bitmap_head_def*, align 8
  %pt_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %slot = alloca i8**, align 8
  %sbi = alloca %struct.shared_bitmap_info, align 8
  store %struct.bitmap_head_def* %pt_vars, %struct.bitmap_head_def** %pt_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %pt_vars.addr, metadata !14164, metadata !DIExpression()), !dbg !14165
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !14166, metadata !DIExpression()), !dbg !14167
  call void @llvm.dbg.declare(metadata %struct.shared_bitmap_info* %sbi, metadata !14168, metadata !DIExpression()), !dbg !14169
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pt_vars.addr, align 8, !dbg !14170
  %pt_vars1 = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %sbi, i32 0, i32 0, !dbg !14171
  store %struct.bitmap_head_def* %0, %struct.bitmap_head_def** %pt_vars1, align 8, !dbg !14172
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pt_vars.addr, align 8, !dbg !14173
  %call = call i32 @bitmap_hash(%struct.bitmap_head_def* %1), !dbg !14174
  %hashcode = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %sbi, i32 0, i32 1, !dbg !14175
  store i32 %call, i32* %hashcode, align 8, !dbg !14176
  %2 = load %struct.htab*, %struct.htab** @shared_bitmap_table, align 8, !dbg !14177
  %3 = bitcast %struct.shared_bitmap_info* %sbi to i8*, !dbg !14178
  %hashcode2 = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %sbi, i32 0, i32 1, !dbg !14179
  %4 = load i32, i32* %hashcode2, align 8, !dbg !14179
  %call3 = call i8** @htab_find_slot_with_hash(%struct.htab* %2, i8* %3, i32 %4, i32 0), !dbg !14180
  store i8** %call3, i8*** %slot, align 8, !dbg !14181
  %5 = load i8**, i8*** %slot, align 8, !dbg !14182
  %tobool = icmp ne i8** %5, null, !dbg !14182
  br i1 %tobool, label %if.else, label %if.then, !dbg !14184

if.then:                                          ; preds = %entry
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %retval, align 8, !dbg !14185
  br label %return, !dbg !14185

if.else:                                          ; preds = %entry
  %6 = load i8**, i8*** %slot, align 8, !dbg !14186
  %7 = load i8*, i8** %6, align 8, !dbg !14187
  %8 = bitcast i8* %7 to %struct.shared_bitmap_info*, !dbg !14188
  %pt_vars4 = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %8, i32 0, i32 0, !dbg !14189
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pt_vars4, align 8, !dbg !14189
  store %struct.bitmap_head_def* %9, %struct.bitmap_head_def** %retval, align 8, !dbg !14190
  br label %return, !dbg !14190

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %retval, align 8, !dbg !14191
  ret %struct.bitmap_head_def* %10, !dbg !14191
}

; Function Attrs: noinline nounwind uwtable
define internal void @shared_bitmap_add(%struct.bitmap_head_def* %pt_vars) #0 !dbg !14192 {
entry:
  %pt_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %slot = alloca i8**, align 8
  %sbi = alloca %struct.shared_bitmap_info*, align 8
  store %struct.bitmap_head_def* %pt_vars, %struct.bitmap_head_def** %pt_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %pt_vars.addr, metadata !14195, metadata !DIExpression()), !dbg !14196
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !14197, metadata !DIExpression()), !dbg !14198
  call void @llvm.dbg.declare(metadata %struct.shared_bitmap_info** %sbi, metadata !14199, metadata !DIExpression()), !dbg !14200
  %call = call i8* @xmalloc(i64 16), !dbg !14201
  %0 = bitcast i8* %call to %struct.shared_bitmap_info*, !dbg !14201
  store %struct.shared_bitmap_info* %0, %struct.shared_bitmap_info** %sbi, align 8, !dbg !14200
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pt_vars.addr, align 8, !dbg !14202
  %2 = load %struct.shared_bitmap_info*, %struct.shared_bitmap_info** %sbi, align 8, !dbg !14203
  %pt_vars1 = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %2, i32 0, i32 0, !dbg !14204
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %pt_vars1, align 8, !dbg !14205
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pt_vars.addr, align 8, !dbg !14206
  %call2 = call i32 @bitmap_hash(%struct.bitmap_head_def* %3), !dbg !14207
  %4 = load %struct.shared_bitmap_info*, %struct.shared_bitmap_info** %sbi, align 8, !dbg !14208
  %hashcode = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %4, i32 0, i32 1, !dbg !14209
  store i32 %call2, i32* %hashcode, align 8, !dbg !14210
  %5 = load %struct.htab*, %struct.htab** @shared_bitmap_table, align 8, !dbg !14211
  %6 = load %struct.shared_bitmap_info*, %struct.shared_bitmap_info** %sbi, align 8, !dbg !14212
  %7 = bitcast %struct.shared_bitmap_info* %6 to i8*, !dbg !14212
  %8 = load %struct.shared_bitmap_info*, %struct.shared_bitmap_info** %sbi, align 8, !dbg !14213
  %hashcode3 = getelementptr inbounds %struct.shared_bitmap_info, %struct.shared_bitmap_info* %8, i32 0, i32 1, !dbg !14214
  %9 = load i32, i32* %hashcode3, align 8, !dbg !14214
  %call4 = call i8** @htab_find_slot_with_hash(%struct.htab* %5, i8* %7, i32 %9, i32 1), !dbg !14215
  store i8** %call4, i8*** %slot, align 8, !dbg !14216
  %10 = load i8**, i8*** %slot, align 8, !dbg !14217
  %11 = load i8*, i8** %10, align 8, !dbg !14217
  %tobool = icmp ne i8* %11, null, !dbg !14217
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14217

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i32 4754, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !14217
  br label %cond.end, !dbg !14217

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14217

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14217
  %12 = load %struct.shared_bitmap_info*, %struct.shared_bitmap_info** %sbi, align 8, !dbg !14218
  %13 = bitcast %struct.shared_bitmap_info* %12 to i8*, !dbg !14219
  %14 = load i8**, i8*** %slot, align 8, !dbg !14220
  store i8* %13, i8** %14, align 8, !dbg !14221
  ret void, !dbg !14222
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

declare dso_local %struct.ptr_info_def* @get_ptr_info(%union.tree_node*) #2

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_varinfo_t_heap_free(%struct.VEC_varinfo_t_heap** %vec_) #0 !dbg !14223 {
entry:
  %vec_.addr = alloca %struct.VEC_varinfo_t_heap**, align 8
  store %struct.VEC_varinfo_t_heap** %vec_, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_varinfo_t_heap*** %vec_.addr, metadata !14226, metadata !DIExpression()), !dbg !14227
  %0 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !14228
  %1 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** %0, align 8, !dbg !14228
  %tobool = icmp ne %struct.VEC_varinfo_t_heap* %1, null, !dbg !14228
  br i1 %tobool, label %if.then, label %if.end, !dbg !14227

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !14228
  %3 = load %struct.VEC_varinfo_t_heap*, %struct.VEC_varinfo_t_heap** %2, align 8, !dbg !14228
  %4 = bitcast %struct.VEC_varinfo_t_heap* %3 to i8*, !dbg !14228
  call void @free(i8* %4), !dbg !14228
  br label %if.end, !dbg !14228

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_varinfo_t_heap**, %struct.VEC_varinfo_t_heap*** %vec_.addr, align 8, !dbg !14227
  store %struct.VEC_varinfo_t_heap* null, %struct.VEC_varinfo_t_heap** %5, align 8, !dbg !14227
  ret void, !dbg !14227
}

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #2

declare dso_local zeroext i8 @gimple_has_body_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @create_function_info_for(%union.tree_node* %decl, i8* %name) #0 !dbg !14230 {
entry:
  %retval = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %vi = alloca %struct.variable_info*, align 8
  %arg = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %is_varargs = alloca i8, align 1
  %argvi = alloca %struct.variable_info*, align 8
  %newname = alloca i8*, align 8
  %tempname = alloca i8*, align 8
  %argdecl = alloca %union.tree_node*, align 8
  %resultvi = alloca %struct.variable_info*, align 8
  %newname38 = alloca i8*, align 8
  %tempname39 = alloca i8*, align 8
  %resultdecl = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !14231, metadata !DIExpression()), !dbg !14232
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !14233, metadata !DIExpression()), !dbg !14234
  call void @llvm.dbg.declare(metadata %struct.variable_info** %vi, metadata !14235, metadata !DIExpression()), !dbg !14236
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !14237, metadata !DIExpression()), !dbg !14238
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14239, metadata !DIExpression()), !dbg !14240
  call void @llvm.dbg.declare(metadata i8* %is_varargs, metadata !14241, metadata !DIExpression()), !dbg !14242
  store i8 0, i8* %is_varargs, align 1, !dbg !14242
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14243
  %1 = load i8*, i8** %name.addr, align 8, !dbg !14244
  %call = call %struct.variable_info* @new_var_info(%union.tree_node* %0, i8* %1), !dbg !14245
  store %struct.variable_info* %call, %struct.variable_info** %vi, align 8, !dbg !14246
  %2 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14247
  %offset = getelementptr inbounds %struct.variable_info, %struct.variable_info* %2, i32 0, i32 3, !dbg !14248
  store i64 0, i64* %offset, align 8, !dbg !14249
  %3 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14250
  %size = getelementptr inbounds %struct.variable_info, %struct.variable_info* %3, i32 0, i32 4, !dbg !14251
  store i64 1, i64* %size, align 8, !dbg !14252
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14253
  %call1 = call i32 @count_num_arguments(%union.tree_node* %4, i8* %is_varargs), !dbg !14254
  %add = add i32 %call1, 1, !dbg !14255
  %conv = zext i32 %add to i64, !dbg !14254
  %5 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14256
  %fullsize = getelementptr inbounds %struct.variable_info, %struct.variable_info* %5, i32 0, i32 5, !dbg !14257
  store i64 %conv, i64* %fullsize, align 8, !dbg !14258
  %6 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14259
  %decl2 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %6, i32 0, i32 7, !dbg !14260
  %7 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !14260
  %8 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14261
  call void @insert_vi_for_tree(%union.tree_node* %7, %struct.variable_info* %8), !dbg !14262
  %9 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !14263
  %inc = add i32 %9, 1, !dbg !14263
  store i32 %inc, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !14263
  %10 = load i8, i8* %is_varargs, align 1, !dbg !14264
  %tobool = icmp ne i8 %10, 0, !dbg !14264
  br i1 %tobool, label %if.then, label %if.end, !dbg !14266

if.then:                                          ; preds = %entry
  %11 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14267
  %fullsize3 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %11, i32 0, i32 5, !dbg !14269
  store i64 -1, i64* %fullsize3, align 8, !dbg !14270
  %12 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14271
  %size4 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %12, i32 0, i32 4, !dbg !14272
  store i64 -1, i64* %size4, align 8, !dbg !14273
  %13 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14274
  %is_unknown_size_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %13, i32 0, i32 1, !dbg !14275
  %bf.load = load i8, i8* %is_unknown_size_var, align 4, !dbg !14276
  %bf.clear = and i8 %bf.load, -5, !dbg !14276
  %bf.set = or i8 %bf.clear, 4, !dbg !14276
  store i8 %bf.set, i8* %is_unknown_size_var, align 4, !dbg !14276
  %14 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14277
  %id = getelementptr inbounds %struct.variable_info, %struct.variable_info* %14, i32 0, i32 0, !dbg !14278
  %15 = load i32, i32* %id, align 8, !dbg !14278
  store i32 %15, i32* %retval, align 4, !dbg !14279
  br label %return, !dbg !14279

if.end:                                           ; preds = %entry
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14280
  %decl_non_common = bitcast %union.tree_node* %16 to %struct.tree_decl_non_common*, !dbg !14280
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !14280
  %17 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !14280
  store %union.tree_node* %17, %union.tree_node** %arg, align 8, !dbg !14281
  store i32 1, i32* %i, align 4, !dbg !14282
  br label %for.cond, !dbg !14284

for.cond:                                         ; preds = %for.inc, %if.end
  %18 = load i32, i32* %i, align 4, !dbg !14285
  %conv5 = zext i32 %18 to i64, !dbg !14285
  %19 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14287
  %fullsize6 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %19, i32 0, i32 5, !dbg !14288
  %20 = load i64, i64* %fullsize6, align 8, !dbg !14288
  %cmp = icmp ult i64 %conv5, %20, !dbg !14289
  br i1 %cmp, label %for.body, label %for.end, !dbg !14290

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.variable_info** %argvi, metadata !14291, metadata !DIExpression()), !dbg !14293
  call void @llvm.dbg.declare(metadata i8** %newname, metadata !14294, metadata !DIExpression()), !dbg !14295
  call void @llvm.dbg.declare(metadata i8** %tempname, metadata !14296, metadata !DIExpression()), !dbg !14297
  call void @llvm.dbg.declare(metadata %union.tree_node** %argdecl, metadata !14298, metadata !DIExpression()), !dbg !14299
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14300
  store %union.tree_node* %21, %union.tree_node** %argdecl, align 8, !dbg !14299
  %22 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !14301
  %tobool8 = icmp ne %union.tree_node* %22, null, !dbg !14301
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !14303

if.then9:                                         ; preds = %for.body
  %23 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !14304
  store %union.tree_node* %23, %union.tree_node** %argdecl, align 8, !dbg !14305
  br label %if.end10, !dbg !14306

if.end10:                                         ; preds = %if.then9, %for.body
  %24 = load i8*, i8** %name.addr, align 8, !dbg !14307
  %25 = load i32, i32* %i, align 4, !dbg !14308
  %sub = sub i32 %25, 1, !dbg !14309
  %call11 = call i32 (i8**, i8*, ...) @asprintf(i8** %tempname, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i64 0, i64 0), i8* %24, i32 %sub), !dbg !14310
  %26 = load i8*, i8** %tempname, align 8, !dbg !14311
  %call12 = call i8* @ggc_alloc_string(i8* %26, i32 -1), !dbg !14311
  store i8* %call12, i8** %newname, align 8, !dbg !14312
  %27 = load i8*, i8** %tempname, align 8, !dbg !14313
  call void @free(i8* %27), !dbg !14314
  %28 = load %union.tree_node*, %union.tree_node** %argdecl, align 8, !dbg !14315
  %29 = load i8*, i8** %newname, align 8, !dbg !14316
  %call13 = call %struct.variable_info* @new_var_info(%union.tree_node* %28, i8* %29), !dbg !14317
  store %struct.variable_info* %call13, %struct.variable_info** %argvi, align 8, !dbg !14318
  %30 = load i32, i32* %i, align 4, !dbg !14319
  %conv14 = zext i32 %30 to i64, !dbg !14319
  %31 = load %struct.variable_info*, %struct.variable_info** %argvi, align 8, !dbg !14320
  %offset15 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %31, i32 0, i32 3, !dbg !14321
  store i64 %conv14, i64* %offset15, align 8, !dbg !14322
  %32 = load %struct.variable_info*, %struct.variable_info** %argvi, align 8, !dbg !14323
  %size16 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %32, i32 0, i32 4, !dbg !14324
  store i64 1, i64* %size16, align 8, !dbg !14325
  %33 = load %struct.variable_info*, %struct.variable_info** %argvi, align 8, !dbg !14326
  %is_full_var = getelementptr inbounds %struct.variable_info, %struct.variable_info* %33, i32 0, i32 1, !dbg !14327
  %bf.load17 = load i8, i8* %is_full_var, align 4, !dbg !14328
  %bf.clear18 = and i8 %bf.load17, -9, !dbg !14328
  %bf.set19 = or i8 %bf.clear18, 8, !dbg !14328
  store i8 %bf.set19, i8* %is_full_var, align 4, !dbg !14328
  %34 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14329
  %fullsize20 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %34, i32 0, i32 5, !dbg !14330
  %35 = load i64, i64* %fullsize20, align 8, !dbg !14330
  %36 = load %struct.variable_info*, %struct.variable_info** %argvi, align 8, !dbg !14331
  %fullsize21 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %36, i32 0, i32 5, !dbg !14332
  store i64 %35, i64* %fullsize21, align 8, !dbg !14333
  %37 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14334
  %38 = load %struct.variable_info*, %struct.variable_info** %argvi, align 8, !dbg !14335
  call void @insert_into_field_list_sorted(%struct.variable_info* %37, %struct.variable_info* %38), !dbg !14336
  %39 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !14337
  %inc22 = add i32 %39, 1, !dbg !14337
  store i32 %inc22, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !14337
  %40 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !14338
  %tobool23 = icmp ne %union.tree_node* %40, null, !dbg !14338
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !14340

if.then24:                                        ; preds = %if.end10
  %41 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !14341
  %42 = load %struct.variable_info*, %struct.variable_info** %argvi, align 8, !dbg !14343
  call void @insert_vi_for_tree(%union.tree_node* %41, %struct.variable_info* %42), !dbg !14344
  %43 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !14345
  %common = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !14345
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !14345
  %44 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !14345
  store %union.tree_node* %44, %union.tree_node** %arg, align 8, !dbg !14346
  br label %if.end25, !dbg !14347

if.end25:                                         ; preds = %if.then24, %if.end10
  br label %for.inc, !dbg !14348

for.inc:                                          ; preds = %if.end25
  %45 = load i32, i32* %i, align 4, !dbg !14349
  %inc26 = add i32 %45, 1, !dbg !14349
  store i32 %inc26, i32* %i, align 4, !dbg !14349
  br label %for.cond, !dbg !14350, !llvm.loop !14351

for.end:                                          ; preds = %for.cond
  %46 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14353
  %decl_non_common27 = bitcast %union.tree_node* %46 to %struct.tree_decl_non_common*, !dbg !14353
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common27, i32 0, i32 3, !dbg !14353
  %47 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !14353
  %cmp28 = icmp ne %union.tree_node* %47, null, !dbg !14355
  br i1 %cmp28, label %if.then37, label %lor.lhs.false, !dbg !14356

lor.lhs.false:                                    ; preds = %for.end
  %48 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14357
  %common30 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !14357
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !14357
  %49 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14357
  %common31 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !14357
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !14357
  %50 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !14357
  %base = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !14357
  %51 = bitcast %struct.tree_base* %base to i64*, !dbg !14357
  %bf.load33 = load i64, i64* %51, align 8, !dbg !14357
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !14357
  %bf.cast = trunc i64 %bf.clear34 to i32, !dbg !14357
  %cmp35 = icmp eq i32 %bf.cast, 19, !dbg !14357
  br i1 %cmp35, label %if.end69, label %if.then37, !dbg !14358

if.then37:                                        ; preds = %lor.lhs.false, %for.end
  call void @llvm.dbg.declare(metadata %struct.variable_info** %resultvi, metadata !14359, metadata !DIExpression()), !dbg !14361
  call void @llvm.dbg.declare(metadata i8** %newname38, metadata !14362, metadata !DIExpression()), !dbg !14363
  call void @llvm.dbg.declare(metadata i8** %tempname39, metadata !14364, metadata !DIExpression()), !dbg !14365
  call void @llvm.dbg.declare(metadata %union.tree_node** %resultdecl, metadata !14366, metadata !DIExpression()), !dbg !14367
  %52 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14368
  store %union.tree_node* %52, %union.tree_node** %resultdecl, align 8, !dbg !14367
  %53 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14369
  %fullsize40 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %53, i32 0, i32 5, !dbg !14370
  %54 = load i64, i64* %fullsize40, align 8, !dbg !14371
  %inc41 = add i64 %54, 1, !dbg !14371
  store i64 %inc41, i64* %fullsize40, align 8, !dbg !14371
  %55 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14372
  %decl_non_common42 = bitcast %union.tree_node* %55 to %struct.tree_decl_non_common*, !dbg !14372
  %result43 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common42, i32 0, i32 3, !dbg !14372
  %56 = load %union.tree_node*, %union.tree_node** %result43, align 8, !dbg !14372
  %tobool44 = icmp ne %union.tree_node* %56, null, !dbg !14372
  br i1 %tobool44, label %if.then45, label %if.end48, !dbg !14374

if.then45:                                        ; preds = %if.then37
  %57 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14375
  %decl_non_common46 = bitcast %union.tree_node* %57 to %struct.tree_decl_non_common*, !dbg !14375
  %result47 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common46, i32 0, i32 3, !dbg !14375
  %58 = load %union.tree_node*, %union.tree_node** %result47, align 8, !dbg !14375
  store %union.tree_node* %58, %union.tree_node** %resultdecl, align 8, !dbg !14376
  br label %if.end48, !dbg !14377

if.end48:                                         ; preds = %if.then45, %if.then37
  %59 = load i8*, i8** %name.addr, align 8, !dbg !14378
  %call49 = call i32 (i8**, i8*, ...) @asprintf(i8** %tempname39, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.87, i64 0, i64 0), i8* %59), !dbg !14379
  %60 = load i8*, i8** %tempname39, align 8, !dbg !14380
  %call50 = call i8* @ggc_alloc_string(i8* %60, i32 -1), !dbg !14380
  store i8* %call50, i8** %newname38, align 8, !dbg !14381
  %61 = load i8*, i8** %tempname39, align 8, !dbg !14382
  call void @free(i8* %61), !dbg !14383
  %62 = load %union.tree_node*, %union.tree_node** %resultdecl, align 8, !dbg !14384
  %63 = load i8*, i8** %newname38, align 8, !dbg !14385
  %call51 = call %struct.variable_info* @new_var_info(%union.tree_node* %62, i8* %63), !dbg !14386
  store %struct.variable_info* %call51, %struct.variable_info** %resultvi, align 8, !dbg !14387
  %64 = load i32, i32* %i, align 4, !dbg !14388
  %conv52 = zext i32 %64 to i64, !dbg !14388
  %65 = load %struct.variable_info*, %struct.variable_info** %resultvi, align 8, !dbg !14389
  %offset53 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %65, i32 0, i32 3, !dbg !14390
  store i64 %conv52, i64* %offset53, align 8, !dbg !14391
  %66 = load %struct.variable_info*, %struct.variable_info** %resultvi, align 8, !dbg !14392
  %size54 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %66, i32 0, i32 4, !dbg !14393
  store i64 1, i64* %size54, align 8, !dbg !14394
  %67 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14395
  %fullsize55 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %67, i32 0, i32 5, !dbg !14396
  %68 = load i64, i64* %fullsize55, align 8, !dbg !14396
  %69 = load %struct.variable_info*, %struct.variable_info** %resultvi, align 8, !dbg !14397
  %fullsize56 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %69, i32 0, i32 5, !dbg !14398
  store i64 %68, i64* %fullsize56, align 8, !dbg !14399
  %70 = load %struct.variable_info*, %struct.variable_info** %resultvi, align 8, !dbg !14400
  %is_full_var57 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %70, i32 0, i32 1, !dbg !14401
  %bf.load58 = load i8, i8* %is_full_var57, align 4, !dbg !14402
  %bf.clear59 = and i8 %bf.load58, -9, !dbg !14402
  %bf.set60 = or i8 %bf.clear59, 8, !dbg !14402
  store i8 %bf.set60, i8* %is_full_var57, align 4, !dbg !14402
  %71 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14403
  %72 = load %struct.variable_info*, %struct.variable_info** %resultvi, align 8, !dbg !14404
  call void @insert_into_field_list_sorted(%struct.variable_info* %71, %struct.variable_info* %72), !dbg !14405
  %73 = load i32, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !14406
  %inc61 = add i32 %73, 1, !dbg !14406
  store i32 %inc61, i32* getelementptr inbounds (%struct.constraint_stats, %struct.constraint_stats* @stats, i32 0, i32 0), align 4, !dbg !14406
  %74 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14407
  %decl_non_common62 = bitcast %union.tree_node* %74 to %struct.tree_decl_non_common*, !dbg !14407
  %result63 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common62, i32 0, i32 3, !dbg !14407
  %75 = load %union.tree_node*, %union.tree_node** %result63, align 8, !dbg !14407
  %tobool64 = icmp ne %union.tree_node* %75, null, !dbg !14407
  br i1 %tobool64, label %if.then65, label %if.end68, !dbg !14409

if.then65:                                        ; preds = %if.end48
  %76 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14410
  %decl_non_common66 = bitcast %union.tree_node* %76 to %struct.tree_decl_non_common*, !dbg !14410
  %result67 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common66, i32 0, i32 3, !dbg !14410
  %77 = load %union.tree_node*, %union.tree_node** %result67, align 8, !dbg !14410
  %78 = load %struct.variable_info*, %struct.variable_info** %resultvi, align 8, !dbg !14411
  call void @insert_vi_for_tree(%union.tree_node* %77, %struct.variable_info* %78), !dbg !14412
  br label %if.end68, !dbg !14412

if.end68:                                         ; preds = %if.then65, %if.end48
  br label %if.end69, !dbg !14413

if.end69:                                         ; preds = %if.end68, %lor.lhs.false
  %79 = load %struct.variable_info*, %struct.variable_info** %vi, align 8, !dbg !14414
  %id70 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %79, i32 0, i32 0, !dbg !14415
  %80 = load i32, i32* %id70, align 8, !dbg !14415
  store i32 %80, i32* %retval, align 4, !dbg !14416
  br label %return, !dbg !14416

return:                                           ; preds = %if.end69, %if.then
  %81 = load i32, i32* %retval, align 4, !dbg !14417
  ret i32 %81, !dbg !14417
}

declare dso_local i8* @cgraph_node_name(%struct.cgraph_node*) #2

declare dso_local void @push_cfun(%struct.function*) #2

declare dso_local void @pop_cfun() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @count_num_arguments(%union.tree_node* %decl, i8* %is_varargs) #0 !dbg !14418 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %is_varargs.addr = alloca i8*, align 8
  %num = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !14421, metadata !DIExpression()), !dbg !14422
  store i8* %is_varargs, i8** %is_varargs.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %is_varargs.addr, metadata !14423, metadata !DIExpression()), !dbg !14424
  call void @llvm.dbg.declare(metadata i32* %num, metadata !14425, metadata !DIExpression()), !dbg !14426
  store i32 0, i32* %num, align 4, !dbg !14426
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !14427, metadata !DIExpression()), !dbg !14428
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14429
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !14429
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !14429
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !14429
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !14431
  br label %for.cond, !dbg !14432

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14433
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !14435
  br i1 %tobool, label %for.body, label %for.end, !dbg !14435

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %num, align 4, !dbg !14436
  %inc = add i32 %3, 1, !dbg !14436
  store i32 %inc, i32* %num, align 4, !dbg !14436
  br label %for.inc, !dbg !14436

for.inc:                                          ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14437
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !14437
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !14437
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !14437
  store %union.tree_node* %5, %union.tree_node** %t, align 8, !dbg !14438
  br label %for.cond, !dbg !14439, !llvm.loop !14440

for.end:                                          ; preds = %for.cond
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14442
  %common1 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !14442
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !14442
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14442
  %type2 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !14442
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 1, !dbg !14442
  %8 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !14442
  store %union.tree_node* %8, %union.tree_node** %t, align 8, !dbg !14444
  br label %for.cond3, !dbg !14445

for.cond3:                                        ; preds = %for.inc6, %for.end
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14446
  %tobool4 = icmp ne %union.tree_node* %9, null, !dbg !14448
  br i1 %tobool4, label %for.body5, label %for.end9, !dbg !14448

for.body5:                                        ; preds = %for.cond3
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14449
  %list = bitcast %union.tree_node* %10 to %struct.tree_list*, !dbg !14449
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !14449
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14449
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !14451
  %cmp = icmp eq %union.tree_node* %11, %12, !dbg !14452
  br i1 %cmp, label %if.then, label %if.end, !dbg !14453

if.then:                                          ; preds = %for.body5
  br label %for.end9, !dbg !14454

if.end:                                           ; preds = %for.body5
  br label %for.inc6, !dbg !14451

for.inc6:                                         ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14455
  %common7 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !14455
  %chain8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 1, !dbg !14455
  %14 = load %union.tree_node*, %union.tree_node** %chain8, align 8, !dbg !14455
  store %union.tree_node* %14, %union.tree_node** %t, align 8, !dbg !14456
  br label %for.cond3, !dbg !14457, !llvm.loop !14458

for.end9:                                         ; preds = %if.then, %for.cond3
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14460
  %tobool10 = icmp ne %union.tree_node* %15, null, !dbg !14460
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !14462

if.then11:                                        ; preds = %for.end9
  %16 = load i8*, i8** %is_varargs.addr, align 8, !dbg !14463
  store i8 1, i8* %16, align 1, !dbg !14464
  br label %if.end12, !dbg !14465

if.end12:                                         ; preds = %if.then11, %for.end9
  %17 = load i32, i32* %num, align 4, !dbg !14466
  ret i32 %17, !dbg !14467
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_into_field_list_sorted(%struct.variable_info* %base, %struct.variable_info* %field) #0 !dbg !14468 {
entry:
  %base.addr = alloca %struct.variable_info*, align 8
  %field.addr = alloca %struct.variable_info*, align 8
  %prev = alloca %struct.variable_info*, align 8
  %curr = alloca %struct.variable_info*, align 8
  store %struct.variable_info* %base, %struct.variable_info** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %base.addr, metadata !14469, metadata !DIExpression()), !dbg !14470
  store %struct.variable_info* %field, %struct.variable_info** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.variable_info** %field.addr, metadata !14471, metadata !DIExpression()), !dbg !14472
  call void @llvm.dbg.declare(metadata %struct.variable_info** %prev, metadata !14473, metadata !DIExpression()), !dbg !14474
  %0 = load %struct.variable_info*, %struct.variable_info** %base.addr, align 8, !dbg !14475
  store %struct.variable_info* %0, %struct.variable_info** %prev, align 8, !dbg !14474
  call void @llvm.dbg.declare(metadata %struct.variable_info** %curr, metadata !14476, metadata !DIExpression()), !dbg !14477
  %1 = load %struct.variable_info*, %struct.variable_info** %base.addr, align 8, !dbg !14478
  %next = getelementptr inbounds %struct.variable_info, %struct.variable_info* %1, i32 0, i32 2, !dbg !14479
  %2 = load %struct.variable_info*, %struct.variable_info** %next, align 8, !dbg !14479
  store %struct.variable_info* %2, %struct.variable_info** %curr, align 8, !dbg !14477
  %3 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !14480
  %cmp = icmp eq %struct.variable_info* %3, null, !dbg !14482
  br i1 %cmp, label %if.then, label %if.else, !dbg !14483

if.then:                                          ; preds = %entry
  %4 = load %struct.variable_info*, %struct.variable_info** %field.addr, align 8, !dbg !14484
  %5 = load %struct.variable_info*, %struct.variable_info** %prev, align 8, !dbg !14486
  %next1 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %5, i32 0, i32 2, !dbg !14487
  store %struct.variable_info* %4, %struct.variable_info** %next1, align 8, !dbg !14488
  %6 = load %struct.variable_info*, %struct.variable_info** %field.addr, align 8, !dbg !14489
  %next2 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %6, i32 0, i32 2, !dbg !14490
  store %struct.variable_info* null, %struct.variable_info** %next2, align 8, !dbg !14491
  br label %if.end10, !dbg !14492

if.else:                                          ; preds = %entry
  br label %while.cond, !dbg !14493

while.cond:                                       ; preds = %if.end, %if.else
  %7 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !14495
  %tobool = icmp ne %struct.variable_info* %7, null, !dbg !14493
  br i1 %tobool, label %while.body, label %while.end, !dbg !14493

while.body:                                       ; preds = %while.cond
  %8 = load %struct.variable_info*, %struct.variable_info** %field.addr, align 8, !dbg !14496
  %offset = getelementptr inbounds %struct.variable_info, %struct.variable_info* %8, i32 0, i32 3, !dbg !14499
  %9 = load i64, i64* %offset, align 8, !dbg !14499
  %10 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !14500
  %offset3 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %10, i32 0, i32 3, !dbg !14501
  %11 = load i64, i64* %offset3, align 8, !dbg !14501
  %cmp4 = icmp ule i64 %9, %11, !dbg !14502
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !14503

if.then5:                                         ; preds = %while.body
  br label %while.end, !dbg !14504

if.end:                                           ; preds = %while.body
  %12 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !14505
  store %struct.variable_info* %12, %struct.variable_info** %prev, align 8, !dbg !14506
  %13 = load %struct.variable_info*, %struct.variable_info** %curr, align 8, !dbg !14507
  %next6 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %13, i32 0, i32 2, !dbg !14508
  %14 = load %struct.variable_info*, %struct.variable_info** %next6, align 8, !dbg !14508
  store %struct.variable_info* %14, %struct.variable_info** %curr, align 8, !dbg !14509
  br label %while.cond, !dbg !14493, !llvm.loop !14510

while.end:                                        ; preds = %if.then5, %while.cond
  %15 = load %struct.variable_info*, %struct.variable_info** %prev, align 8, !dbg !14512
  %next7 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %15, i32 0, i32 2, !dbg !14513
  %16 = load %struct.variable_info*, %struct.variable_info** %next7, align 8, !dbg !14513
  %17 = load %struct.variable_info*, %struct.variable_info** %field.addr, align 8, !dbg !14514
  %next8 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %17, i32 0, i32 2, !dbg !14515
  store %struct.variable_info* %16, %struct.variable_info** %next8, align 8, !dbg !14516
  %18 = load %struct.variable_info*, %struct.variable_info** %field.addr, align 8, !dbg !14517
  %19 = load %struct.variable_info*, %struct.variable_info** %prev, align 8, !dbg !14518
  %next9 = getelementptr inbounds %struct.variable_info, %struct.variable_info* %19, i32 0, i32 2, !dbg !14519
  store %struct.variable_info* %18, %struct.variable_info** %next9, align 8, !dbg !14520
  br label %if.end10

if.end10:                                         ; preds = %while.end, %if.then
  ret void, !dbg !14521
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3386, !3387, !3388}
!llvm.ident = !{!3389}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pta_stats", scope: !2, file: !3, line: 4894, type: !3380, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1713, globals: !3240, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-structalias.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !11, !139, !334, !340, !345, !350, !368, !375, !382, !389, !565, !575, !698, !711, !716, !850, !889, !895, !1615, !1641, !1654, !1660, !1674, !1690}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !3, line: 382, baseType: !6, size: 32, elements: !7)
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !{!8, !9, !10}
!8 = !DIEnumerator(name: "SCALAR", value: 0, isUnsigned: true)
!9 = !DIEnumerator(name: "DEREF", value: 1, isUnsigned: true)
!10 = !DIEnumerator(name: "ADDRESSOF", value: 2, isUnsigned: true)
!11 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !12, line: 7, baseType: !6, size: 32, elements: !13)
!12 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!13 = !{!14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138}
!14 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!15 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!16 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!17 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!18 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!19 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!20 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!21 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!22 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!23 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!24 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!25 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!26 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!27 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!28 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!29 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!30 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!31 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!32 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!33 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!34 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!35 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!36 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!37 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!38 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!39 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!40 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!41 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!42 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!43 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!44 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!45 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!46 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!47 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!48 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!49 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!50 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!51 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!52 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!53 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!54 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!55 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!56 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!57 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!58 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!59 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!60 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!61 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!62 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!63 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!64 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!65 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!66 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!67 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!68 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!69 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!70 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!71 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!72 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!73 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!74 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!75 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!76 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!77 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!78 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!79 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!80 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!81 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!82 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!83 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!84 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!85 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!86 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!87 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!88 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!89 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!90 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!91 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!92 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!93 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!94 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!95 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!96 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!97 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!98 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!99 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!100 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!101 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!102 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!103 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!104 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!105 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!106 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!107 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!108 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!109 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!110 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!111 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!112 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!113 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!114 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!115 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!116 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!117 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!118 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!119 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!120 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!121 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!122 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!123 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!124 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!125 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!126 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!127 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!128 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!132 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!133 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!134 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!135 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!137 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!138 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!139 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !140, line: 39, baseType: !6, size: 32, elements: !141)
!140 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!141 = !{!142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333}
!142 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!145 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!146 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!147 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!148 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!149 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!150 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!151 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!152 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!153 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!154 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!155 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!156 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!157 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!158 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!159 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!160 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!161 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!162 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!163 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!164 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!165 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!166 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!167 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!168 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!169 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!170 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!171 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!172 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!173 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!174 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!175 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!176 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!177 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!178 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!179 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!180 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!181 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!182 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!183 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!184 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!185 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!186 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!187 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!188 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!189 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!190 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!191 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!192 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!193 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!194 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!195 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!196 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!197 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!198 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!199 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!200 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!201 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!202 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!203 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!204 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!205 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!206 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!207 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!208 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!209 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!210 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!211 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!212 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!213 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!214 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!216 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!217 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!218 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!219 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!220 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!221 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!222 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!223 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!224 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!225 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!226 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!227 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!228 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!229 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!230 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!231 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!232 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!234 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!235 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!236 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!237 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!238 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!239 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!240 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!241 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!242 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!243 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!244 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!245 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!246 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!247 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!248 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!249 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!250 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!251 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!252 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!253 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!254 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!255 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!256 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!257 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!258 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!259 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!260 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!261 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!262 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!263 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!264 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!265 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!266 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!267 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!268 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!269 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!270 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!271 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!272 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!273 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!274 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!275 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!276 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!277 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!278 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!279 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!280 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!281 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!282 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!283 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!284 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!285 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!286 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!287 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!288 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!289 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!290 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!291 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!292 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!293 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!294 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!301 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!302 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!303 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!304 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!305 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!306 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!307 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!308 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!309 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!310 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!311 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!322 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!323 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!324 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!325 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!326 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!327 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!328 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!329 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!330 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!331 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!332 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!333 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!334 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !335, line: 363, baseType: !6, size: 32, elements: !336)
!335 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!336 = !{!337, !338, !339}
!337 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!338 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!339 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !335, line: 355, baseType: !6, size: 32, elements: !341)
!341 = !{!342, !343, !344}
!342 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!343 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!344 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!345 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !346, line: 474, baseType: !6, size: 32, elements: !347)
!346 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!347 = !{!348, !349}
!348 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!349 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!350 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !140, line: 280, baseType: !6, size: 32, elements: !351)
!351 = !{!352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367}
!352 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!368 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !140, line: 1817, baseType: !6, size: 32, elements: !369)
!369 = !{!370, !371, !372, !373, !374}
!370 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!375 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !140, line: 1805, baseType: !6, size: 32, elements: !376)
!376 = !{!377, !378, !379, !380, !381}
!377 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!382 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !383, line: 104, baseType: !6, size: 32, elements: !384)
!383 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!384 = !{!385, !386, !387, !388}
!385 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!386 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!387 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!388 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!389 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !390, line: 74, baseType: !6, size: 32, elements: !391)
!390 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!391 = !{!392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564}
!392 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!393 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!394 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!395 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!396 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!397 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!398 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!399 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!400 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!401 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!402 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!564 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!565 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !3, line: 290, baseType: !6, size: 32, elements: !566)
!566 = !{!567, !568, !569, !570, !571, !572, !573, !574}
!567 = !DIEnumerator(name: "nothing_id", value: 0, isUnsigned: true)
!568 = !DIEnumerator(name: "anything_id", value: 1, isUnsigned: true)
!569 = !DIEnumerator(name: "readonly_id", value: 2, isUnsigned: true)
!570 = !DIEnumerator(name: "escaped_id", value: 3, isUnsigned: true)
!571 = !DIEnumerator(name: "nonlocal_id", value: 4, isUnsigned: true)
!572 = !DIEnumerator(name: "callused_id", value: 5, isUnsigned: true)
!573 = !DIEnumerator(name: "storedanything_id", value: 6, isUnsigned: true)
!574 = !DIEnumerator(name: "integer_id", value: 7, isUnsigned: true)
!575 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !576, line: 82, baseType: !6, size: 32, elements: !577)
!576 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!577 = !{!578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697}
!578 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!579 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!580 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!581 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!582 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!583 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!584 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!585 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!586 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!587 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!588 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!589 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!590 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!591 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!592 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!593 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!594 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!595 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!596 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!597 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!598 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!599 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!600 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!601 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!602 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!603 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!604 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!605 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!606 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!607 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!608 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!609 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!610 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!611 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!612 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!613 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!614 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!615 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!616 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!617 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!618 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!619 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!620 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!621 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!622 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!623 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!624 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!625 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!626 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!627 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!628 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!629 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!630 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!631 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!632 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!633 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!634 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!635 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!636 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!637 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!638 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!639 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!640 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!641 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!642 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!643 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!644 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!645 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!646 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!647 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!648 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!649 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!650 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!651 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!652 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!653 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!654 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!655 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!656 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!657 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!658 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!659 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!660 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!661 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!675 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!676 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!683 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!684 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!688 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!689 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!690 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!691 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!692 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!693 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!694 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!695 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!696 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!697 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!698 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !140, line: 58, baseType: !6, size: 32, elements: !699)
!699 = !{!700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710}
!700 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!701 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!702 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!703 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!704 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!705 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!706 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!707 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!708 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!709 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!710 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!711 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !712, line: 147, baseType: !6, size: 32, elements: !713)
!712 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!713 = !{!714, !715}
!714 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!715 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!716 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !140, line: 3410, baseType: !6, size: 32, elements: !717)
!717 = !{!718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849}
!718 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!743 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!744 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!745 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!746 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!747 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!748 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!749 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!750 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!751 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!752 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!753 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!754 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!755 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!756 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!757 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!758 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!759 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!760 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!761 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!762 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!763 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!764 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!765 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!766 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!767 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!768 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!769 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!770 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!771 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!772 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!773 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!774 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!775 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!776 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!777 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!778 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!779 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!780 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!781 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!782 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!783 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!784 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!785 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!786 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!787 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!788 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!789 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!790 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!791 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!792 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!793 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!794 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!795 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!796 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!797 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!798 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!799 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!800 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!801 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!802 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!803 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!804 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!805 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!806 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!807 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!808 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!809 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!810 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!811 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!812 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!813 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!814 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!815 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!816 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!817 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!818 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!819 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!820 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!821 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!822 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!823 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!824 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!825 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!826 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!827 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!828 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!829 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!830 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!831 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!832 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!833 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!834 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!835 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!836 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!837 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!838 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!839 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!840 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!841 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!842 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!843 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!844 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!845 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!846 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!847 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!848 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!849 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!850 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !851, line: 51, baseType: !6, size: 32, elements: !852)
!851 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!852 = !{!853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888}
!853 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!854 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!855 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!856 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!857 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!858 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!859 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!860 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!861 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!862 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!863 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!864 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!865 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!866 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!867 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!868 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!869 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!870 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!871 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!872 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!873 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!874 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!875 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!876 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!877 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!878 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!879 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!880 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!881 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!882 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!883 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!884 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!885 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!886 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!887 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!888 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!889 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !140, line: 205, baseType: !6, size: 32, elements: !890)
!890 = !{!891, !892, !893, !894}
!891 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!895 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !140, line: 220, baseType: !6, size: 32, elements: !896)
!896 = !{!897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614}
!897 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1407 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1408 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1409 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1410 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1411 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1412 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1413 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1414 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1415 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1416 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1417 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1418 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1419 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1420 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1421 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1422 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1423 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1424 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1425 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1426 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1427 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1428 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1429 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1430 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1431 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1432 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1433 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1434 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1435 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1436 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1437 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1438 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1439 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1440 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1441 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1442 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1443 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1444 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1445 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1446 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1447 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1448 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1449 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1450 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1451 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1452 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1453 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1454 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1455 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1456 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1457 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1458 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1459 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1460 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1461 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1462 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1463 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1464 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1465 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1466 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1467 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1468 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1469 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1470 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1471 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1472 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1473 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1474 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1475 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1476 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1477 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1478 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1479 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1480 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1481 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1482 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1483 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1484 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1485 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1486 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1487 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1488 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1489 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1490 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1491 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1492 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1493 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1494 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1495 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1496 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1497 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1498 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1499 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1500 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1501 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1502 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1503 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1504 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1505 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1506 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1507 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1508 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1509 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1510 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1511 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1512 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1513 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1514 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1515 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1516 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1517 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1518 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1519 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1520 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1521 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1522 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1523 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1524 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1525 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1526 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1527 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1528 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1529 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1530 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1531 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1532 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1533 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1534 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1535 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1536 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1537 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1538 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1539 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1540 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1541 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1542 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1543 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1544 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1545 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1546 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1547 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1548 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1549 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1550 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1551 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1552 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1553 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1554 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1555 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1556 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1557 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1558 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1559 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1560 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1561 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1562 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1563 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1564 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1565 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1566 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1567 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1568 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1569 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1570 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1571 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1572 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1573 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1574 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1575 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1576 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1577 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1578 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1579 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1580 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1581 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1582 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1583 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1584 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1585 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1586 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1587 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1588 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1589 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1590 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1591 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1592 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1593 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1594 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1595 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1596 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1597 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1598 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1599 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1600 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1601 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1602 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1603 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1604 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1605 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1606 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1607 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1608 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1609 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1610 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1611 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1612 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1613 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1614 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1615 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !851, line: 727, baseType: !6, size: 32, elements: !1616)
!1616 = !{!1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640}
!1617 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1618 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1619 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1620 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1621 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1622 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1623 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1624 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1625 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1626 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1627 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1628 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1629 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1630 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1631 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1632 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1633 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1634 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1635 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1636 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1637 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1638 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1639 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1640 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1641 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !851, line: 100, baseType: !6, size: 32, elements: !1642)
!1642 = !{!1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653}
!1643 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!1644 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!1645 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!1646 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!1647 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!1648 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!1649 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!1650 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!1651 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!1652 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!1653 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!1654 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !851, line: 80, baseType: !6, size: 32, elements: !1655)
!1655 = !{!1656, !1657, !1658, !1659}
!1656 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!1657 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!1658 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!1659 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!1660 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !335, line: 295, baseType: !6, size: 32, elements: !1661)
!1661 = !{!1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673}
!1662 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1663 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1664 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1665 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1666 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1667 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1668 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1669 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1670 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1671 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1672 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1673 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1674 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1675, line: 29, baseType: !6, size: 32, elements: !1676)
!1675 = !DIFile(filename: "./diagnostic.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1676 = !{!1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689}
!1677 = !DIEnumerator(name: "DK_UNSPECIFIED", value: 0, isUnsigned: true)
!1678 = !DIEnumerator(name: "DK_IGNORED", value: 1, isUnsigned: true)
!1679 = !DIEnumerator(name: "DK_FATAL", value: 2, isUnsigned: true)
!1680 = !DIEnumerator(name: "DK_ICE", value: 3, isUnsigned: true)
!1681 = !DIEnumerator(name: "DK_ERROR", value: 4, isUnsigned: true)
!1682 = !DIEnumerator(name: "DK_SORRY", value: 5, isUnsigned: true)
!1683 = !DIEnumerator(name: "DK_WARNING", value: 6, isUnsigned: true)
!1684 = !DIEnumerator(name: "DK_ANACHRONISM", value: 7, isUnsigned: true)
!1685 = !DIEnumerator(name: "DK_NOTE", value: 8, isUnsigned: true)
!1686 = !DIEnumerator(name: "DK_DEBUG", value: 9, isUnsigned: true)
!1687 = !DIEnumerator(name: "DK_PEDWARN", value: 10, isUnsigned: true)
!1688 = !DIEnumerator(name: "DK_PERMERROR", value: 11, isUnsigned: true)
!1689 = !DIEnumerator(name: "DK_LAST_DIAGNOSTIC_KIND", value: 12, isUnsigned: true)
!1690 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1691, line: 309, baseType: !6, size: 32, elements: !1692)
!1691 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1692 = !{!1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712}
!1693 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!1694 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!1695 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!1696 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!1697 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!1698 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!1699 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!1700 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!1701 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!1702 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!1703 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!1704 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!1705 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!1706 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!1707 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!1708 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!1709 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!1710 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!1711 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!1712 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!1713 = !{!1714, !1715, !139, !1727, !1730, !1731, !1745, !1746, !3104, !1780, !1758, !6, !3111, !3125, !3126, !3127, !3147, !1782, !3149, !3151, !1776, !1904, !1729, !2103, !3152, !2137, !2041, !1654, !3154, !3167, !3172, !3176, !3178, !3200, !2649, !3201, !3210, !3223, !3231, !3232, !3233, !3238, !3239}
!1714 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1715 = !DIDerivedType(tag: DW_TAG_typedef, name: "constraint_t", file: !3, line: 187, baseType: !1716)
!1716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1717, size: 64)
!1717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constraint", file: !3, line: 418, size: 256, elements: !1718)
!1718 = !{!1719, !1726}
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1717, file: !3, line: 420, baseType: !1720, size: 128)
!1720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constraint_expr", file: !3, line: 386, size: 128, elements: !1721)
!1721 = !{!1722, !1724, !1725}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1720, file: !3, line: 389, baseType: !1723, size: 32)
!1723 = !DIDerivedType(tag: DW_TAG_typedef, name: "constraint_expr_type", file: !3, line: 382, baseType: !5)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1720, file: !3, line: 392, baseType: !6, size: 32, offset: 32)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1720, file: !3, line: 399, baseType: !1714, size: 64, offset: 64)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1717, file: !3, line: 421, baseType: !1720, size: 128, offset: 128)
!1727 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1728, line: 46, baseType: !1729)
!1728 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1729 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1730 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1732, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constraint_t_heap", file: !3, line: 190, baseType: !1733)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constraint_t_heap", file: !3, line: 190, size: 128, elements: !1734)
!1734 = !{!1735}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1733, file: !3, line: 190, baseType: !1736, size: 128)
!1736 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constraint_t_base", file: !3, line: 189, baseType: !1737)
!1737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constraint_t_base", file: !3, line: 189, size: 128, elements: !1738)
!1738 = !{!1739, !1740, !1741}
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1737, file: !3, line: 189, baseType: !6, size: 32)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1737, file: !3, line: 189, baseType: !6, size: 32, offset: 32)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1737, file: !3, line: 189, baseType: !1742, size: 64, offset: 64)
!1742 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1715, size: 64, elements: !1743)
!1743 = !{!1744}
!1744 = !DISubrange(count: 1)
!1745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1747, size: 64)
!1747 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_varinfo_t_heap", file: !3, line: 275, baseType: !1748)
!1748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_varinfo_t_heap", file: !3, line: 275, size: 128, elements: !1749)
!1749 = !{!1750}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1748, file: !3, line: 275, baseType: !1751, size: 128)
!1751 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_varinfo_t_base", file: !3, line: 273, baseType: !1752)
!1752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_varinfo_t_base", file: !3, line: 273, size: 128, elements: !1753)
!1753 = !{!1754, !1755, !1756}
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1752, file: !3, line: 273, baseType: !6, size: 32)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1752, file: !3, line: 273, baseType: !6, size: 32, offset: 32)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1752, file: !3, line: 273, baseType: !1757, size: 64, offset: 64)
!1757 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1758, size: 64, elements: !1743)
!1758 = !DIDerivedType(tag: DW_TAG_typedef, name: "varinfo_t", file: !3, line: 263, baseType: !1759)
!1759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1760, size: 64)
!1760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "variable_info", file: !3, line: 208, size: 576, elements: !1761)
!1761 = !{!1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1779, !3102, !3103}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1760, file: !3, line: 211, baseType: !6, size: 32)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "is_artificial_var", scope: !1760, file: !3, line: 215, baseType: !6, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 32)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "is_special_var", scope: !1760, file: !3, line: 219, baseType: !6, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 32)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "is_unknown_size_var", scope: !1760, file: !3, line: 222, baseType: !6, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 32)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "is_full_var", scope: !1760, file: !3, line: 225, baseType: !6, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 32)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "is_heap_var", scope: !1760, file: !3, line: 228, baseType: !6, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 32)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "is_restrict_var", scope: !1760, file: !3, line: 231, baseType: !6, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 32)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "may_have_pointers", scope: !1760, file: !3, line: 234, baseType: !6, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 32)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "is_global_var", scope: !1760, file: !3, line: 237, baseType: !6, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 32)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1760, file: !3, line: 240, baseType: !1759, size: 64, offset: 64)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1760, file: !3, line: 243, baseType: !1729, size: 64, offset: 128)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1760, file: !3, line: 246, baseType: !1729, size: 64, offset: 192)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "fullsize", scope: !1760, file: !3, line: 249, baseType: !1729, size: 64, offset: 256)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1760, file: !3, line: 252, baseType: !1776, size: 64, offset: 320)
!1776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1777, size: 64)
!1777 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1778)
!1778 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1760, file: !3, line: 255, baseType: !1780, size: 64, offset: 384)
!1780 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1781, line: 56, baseType: !1782)
!1781 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1783, size: 64)
!1783 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !140, line: 3371, size: 1792, elements: !1784)
!1784 = !{!1785, !1818, !1824, !1835, !1854, !1865, !1870, !1877, !1883, !1897, !1909, !1947, !2438, !2466, !2483, !2484, !2489, !2498, !2504, !2509, !2513, !2517, !2753, !2800, !2806, !2812, !2819, !2832, !2846, !2863, !2875, !2897, !2912, !3084}
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1783, file: !140, line: 3372, baseType: !1786, size: 64)
!1786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !140, line: 360, size: 64, elements: !1787)
!1787 = !{!1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817}
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1786, file: !140, line: 361, baseType: !6, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1786, file: !140, line: 363, baseType: !6, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1786, file: !140, line: 364, baseType: !6, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1786, file: !140, line: 365, baseType: !6, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1786, file: !140, line: 366, baseType: !6, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1786, file: !140, line: 367, baseType: !6, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1786, file: !140, line: 368, baseType: !6, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1786, file: !140, line: 369, baseType: !6, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1786, file: !140, line: 370, baseType: !6, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1786, file: !140, line: 372, baseType: !6, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1786, file: !140, line: 373, baseType: !6, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1786, file: !140, line: 374, baseType: !6, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1786, file: !140, line: 375, baseType: !6, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1786, file: !140, line: 376, baseType: !6, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1786, file: !140, line: 377, baseType: !6, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1786, file: !140, line: 378, baseType: !6, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1786, file: !140, line: 379, baseType: !6, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1786, file: !140, line: 381, baseType: !6, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1786, file: !140, line: 382, baseType: !6, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1786, file: !140, line: 383, baseType: !6, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1786, file: !140, line: 384, baseType: !6, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1786, file: !140, line: 385, baseType: !6, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1786, file: !140, line: 386, baseType: !6, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1786, file: !140, line: 387, baseType: !6, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1786, file: !140, line: 388, baseType: !6, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1786, file: !140, line: 390, baseType: !6, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1786, file: !140, line: 391, baseType: !6, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1786, file: !140, line: 392, baseType: !6, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1786, file: !140, line: 394, baseType: !6, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1786, file: !140, line: 399, baseType: !6, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1783, file: !140, line: 3373, baseType: !1819, size: 192)
!1819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !140, line: 402, size: 192, elements: !1820)
!1820 = !{!1821, !1822, !1823}
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1819, file: !140, line: 403, baseType: !1786, size: 64)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1819, file: !140, line: 404, baseType: !1780, size: 64, offset: 64)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1819, file: !140, line: 405, baseType: !1780, size: 64, offset: 128)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1783, file: !140, line: 3374, baseType: !1825, size: 320)
!1825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !140, line: 1384, size: 320, elements: !1826)
!1826 = !{!1827, !1828}
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1825, file: !140, line: 1385, baseType: !1819, size: 192)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1825, file: !140, line: 1386, baseType: !1829, size: 128, offset: 192)
!1829 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1830, line: 58, baseType: !1831)
!1830 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1831 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1830, line: 54, size: 128, elements: !1832)
!1832 = !{!1833, !1834}
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1831, file: !1830, line: 56, baseType: !1729, size: 64)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1831, file: !1830, line: 57, baseType: !1714, size: 64, offset: 64)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1783, file: !140, line: 3375, baseType: !1836, size: 256)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !140, line: 1397, size: 256, elements: !1837)
!1837 = !{!1838, !1839}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1836, file: !140, line: 1398, baseType: !1819, size: 192)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1836, file: !140, line: 1399, baseType: !1840, size: 64, offset: 192)
!1840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1841, size: 64)
!1841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1842, line: 52, size: 256, elements: !1843)
!1842 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1843 = !{!1844, !1845, !1846, !1847, !1848, !1849, !1850}
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1841, file: !1842, line: 56, baseType: !6, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1841, file: !1842, line: 57, baseType: !6, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1841, file: !1842, line: 58, baseType: !6, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1841, file: !1842, line: 59, baseType: !6, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1841, file: !1842, line: 60, baseType: !6, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1841, file: !1842, line: 61, baseType: !6, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1841, file: !1842, line: 62, baseType: !1851, size: 192, offset: 64)
!1851 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1729, size: 192, elements: !1852)
!1852 = !{!1853}
!1853 = !DISubrange(count: 3)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1783, file: !140, line: 3376, baseType: !1855, size: 256)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !140, line: 1408, size: 256, elements: !1856)
!1856 = !{!1857, !1858}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1855, file: !140, line: 1409, baseType: !1819, size: 192)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1855, file: !140, line: 1410, baseType: !1859, size: 64, offset: 192)
!1859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1860, size: 64)
!1860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1861, line: 27, size: 192, elements: !1862)
!1861 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1862 = !{!1863, !1864}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1860, file: !1861, line: 29, baseType: !1829, size: 128)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1860, file: !1861, line: 30, baseType: !11, size: 32, offset: 128)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1783, file: !140, line: 3377, baseType: !1866, size: 256)
!1866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !140, line: 1437, size: 256, elements: !1867)
!1867 = !{!1868, !1869}
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1866, file: !140, line: 1438, baseType: !1819, size: 192)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1866, file: !140, line: 1439, baseType: !1780, size: 64, offset: 192)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1783, file: !140, line: 3378, baseType: !1871, size: 256)
!1871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !140, line: 1418, size: 256, elements: !1872)
!1872 = !{!1873, !1874, !1875}
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1871, file: !140, line: 1419, baseType: !1819, size: 192)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1871, file: !140, line: 1420, baseType: !1730, size: 32, offset: 192)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1871, file: !140, line: 1421, baseType: !1876, size: 8, offset: 224)
!1876 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1778, size: 8, elements: !1743)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1783, file: !140, line: 3379, baseType: !1878, size: 320)
!1878 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !140, line: 1428, size: 320, elements: !1879)
!1879 = !{!1880, !1881, !1882}
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1878, file: !140, line: 1429, baseType: !1819, size: 192)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1878, file: !140, line: 1430, baseType: !1780, size: 64, offset: 192)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1878, file: !140, line: 1431, baseType: !1780, size: 64, offset: 256)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1783, file: !140, line: 3380, baseType: !1884, size: 320)
!1884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !140, line: 1460, size: 320, elements: !1885)
!1885 = !{!1886, !1887}
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1884, file: !140, line: 1461, baseType: !1819, size: 192)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1884, file: !140, line: 1462, baseType: !1888, size: 128, offset: 192)
!1888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1889, line: 31, size: 128, elements: !1890)
!1889 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1890 = !{!1891, !1895, !1896}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1888, file: !1889, line: 32, baseType: !1892, size: 64)
!1892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64)
!1893 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1894)
!1894 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1888, file: !1889, line: 33, baseType: !6, size: 32, offset: 64)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1888, file: !1889, line: 34, baseType: !6, size: 32, offset: 96)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1783, file: !140, line: 3381, baseType: !1898, size: 384)
!1898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !140, line: 2507, size: 384, elements: !1899)
!1899 = !{!1900, !1901, !1906, !1907, !1908}
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1898, file: !140, line: 2508, baseType: !1819, size: 192)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1898, file: !140, line: 2509, baseType: !1902, size: 32, offset: 192)
!1902 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1903, line: 58, baseType: !1904)
!1903 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1904 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1905, line: 44, baseType: !6)
!1905 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1898, file: !140, line: 2510, baseType: !6, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1898, file: !140, line: 2511, baseType: !1780, size: 64, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1898, file: !140, line: 2512, baseType: !1780, size: 64, offset: 320)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1783, file: !140, line: 3382, baseType: !1910, size: 896)
!1910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !140, line: 2652, size: 896, elements: !1911)
!1911 = !{!1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944}
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1910, file: !140, line: 2653, baseType: !1898, size: 384)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1910, file: !140, line: 2654, baseType: !1780, size: 64, offset: 384)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1910, file: !140, line: 2656, baseType: !6, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1910, file: !140, line: 2658, baseType: !6, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1910, file: !140, line: 2659, baseType: !6, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1910, file: !140, line: 2660, baseType: !6, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1910, file: !140, line: 2661, baseType: !6, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1910, file: !140, line: 2662, baseType: !6, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1910, file: !140, line: 2663, baseType: !6, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1910, file: !140, line: 2664, baseType: !6, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1910, file: !140, line: 2666, baseType: !6, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1910, file: !140, line: 2667, baseType: !6, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1910, file: !140, line: 2668, baseType: !6, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1910, file: !140, line: 2669, baseType: !6, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1910, file: !140, line: 2670, baseType: !6, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1910, file: !140, line: 2671, baseType: !6, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1910, file: !140, line: 2672, baseType: !6, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1910, file: !140, line: 2673, baseType: !6, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1910, file: !140, line: 2674, baseType: !6, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1910, file: !140, line: 2678, baseType: !6, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1910, file: !140, line: 2682, baseType: !6, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1910, file: !140, line: 2685, baseType: !6, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1910, file: !140, line: 2688, baseType: !6, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1910, file: !140, line: 2690, baseType: !6, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1910, file: !140, line: 2692, baseType: !6, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1910, file: !140, line: 2695, baseType: !6, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1910, file: !140, line: 2698, baseType: !6, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1910, file: !140, line: 2703, baseType: !6, size: 32, offset: 512)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1910, file: !140, line: 2705, baseType: !1780, size: 64, offset: 576)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1910, file: !140, line: 2706, baseType: !1780, size: 64, offset: 640)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1910, file: !140, line: 2707, baseType: !1780, size: 64, offset: 704)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1910, file: !140, line: 2708, baseType: !1780, size: 64, offset: 768)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1910, file: !140, line: 2711, baseType: !1945, size: 64, offset: 832)
!1945 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1946, size: 64)
!1946 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !140, line: 2711, flags: DIFlagFwdDecl)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1783, file: !140, line: 3383, baseType: !1948, size: 960)
!1948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !140, line: 2756, size: 960, elements: !1949)
!1949 = !{!1950, !1951}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1948, file: !140, line: 2757, baseType: !1910, size: 896)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1948, file: !140, line: 2758, baseType: !1952, size: 64, offset: 896)
!1952 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1781, line: 50, baseType: !1953)
!1953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1954, size: 64)
!1954 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1955, line: 240, size: 384, elements: !1956)
!1955 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1956 = !{!1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967}
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1954, file: !1955, line: 242, baseType: !6, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1954, file: !1955, line: 245, baseType: !6, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1954, file: !1955, line: 252, baseType: !6, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1954, file: !1955, line: 257, baseType: !6, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1954, file: !1955, line: 265, baseType: !6, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1954, file: !1955, line: 277, baseType: !6, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1954, file: !1955, line: 291, baseType: !6, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1954, file: !1955, line: 298, baseType: !6, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1954, file: !1955, line: 305, baseType: !6, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1954, file: !1955, line: 310, baseType: !6, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1954, file: !1955, line: 321, baseType: !1968, size: 320, offset: 64)
!1968 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1955, line: 315, size: 320, elements: !1969)
!1969 = !{!1970, !2371, !2373, !2436, !2437}
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1968, file: !1955, line: 316, baseType: !1971, size: 64)
!1971 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1972, size: 64, elements: !1743)
!1972 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1955, line: 183, baseType: !1973)
!1973 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1955, line: 166, size: 64, elements: !1974)
!1974 = !{!1975, !1976, !1977, !1978, !1979, !1987, !1988, !2000, !2003, !2064, !2065, !2348, !2361, !2368}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1973, file: !1955, line: 168, baseType: !1730, size: 32)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1973, file: !1955, line: 169, baseType: !6, size: 32)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1973, file: !1955, line: 170, baseType: !1776, size: 64)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1973, file: !1955, line: 171, baseType: !1952, size: 64)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1973, file: !1955, line: 172, baseType: !1980, size: 64)
!1980 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1781, line: 53, baseType: !1981)
!1981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1982, size: 64)
!1982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1955, line: 359, size: 128, elements: !1983)
!1983 = !{!1984, !1985}
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1982, file: !1955, line: 360, baseType: !1730, size: 32)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1982, file: !1955, line: 361, baseType: !1986, size: 64, offset: 64)
!1986 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1952, size: 64, elements: !1743)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1973, file: !1955, line: 173, baseType: !11, size: 32)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1973, file: !1955, line: 174, baseType: !1989, size: 32)
!1989 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1955, line: 133, baseType: !1990)
!1990 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1955, line: 115, size: 32, elements: !1991)
!1991 = !{!1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999}
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1990, file: !1955, line: 118, baseType: !6, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1990, file: !1955, line: 120, baseType: !6, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1990, file: !1955, line: 121, baseType: !6, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1990, file: !1955, line: 123, baseType: !6, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1990, file: !1955, line: 125, baseType: !6, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1990, file: !1955, line: 127, baseType: !6, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1990, file: !1955, line: 130, baseType: !6, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1990, file: !1955, line: 132, baseType: !6, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1973, file: !1955, line: 175, baseType: !2001, size: 64)
!2001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2002, size: 64)
!2002 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1955, line: 175, flags: DIFlagFwdDecl)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1973, file: !1955, line: 176, baseType: !2004, size: 64)
!2004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2005, size: 64)
!2005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2006, line: 75, size: 256, elements: !2007)
!2006 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2007 = !{!2008, !2022, !2023, !2024}
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2005, file: !2006, line: 76, baseType: !2009, size: 64)
!2009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2010, size: 64)
!2010 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2006, line: 68, baseType: !2011)
!2011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2006, line: 63, size: 320, elements: !2012)
!2012 = !{!2013, !2015, !2016, !2017}
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2011, file: !2006, line: 64, baseType: !2014, size: 64)
!2014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2011, size: 64)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2011, file: !2006, line: 65, baseType: !2014, size: 64, offset: 64)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2011, file: !2006, line: 66, baseType: !6, size: 32, offset: 128)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2011, file: !2006, line: 67, baseType: !2018, size: 128, offset: 192)
!2018 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2019, size: 128, elements: !2020)
!2019 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2006, line: 29, baseType: !1729)
!2020 = !{!2021}
!2021 = !DISubrange(count: 2)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2005, file: !2006, line: 77, baseType: !2009, size: 64, offset: 64)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2005, file: !2006, line: 78, baseType: !6, size: 32, offset: 128)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2005, file: !2006, line: 79, baseType: !2025, size: 64, offset: 192)
!2025 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2026, size: 64)
!2026 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2006, line: 49, baseType: !2027)
!2027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2006, line: 45, size: 832, elements: !2028)
!2028 = !{!2029, !2030, !2031}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2027, file: !2006, line: 46, baseType: !2014, size: 64)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2027, file: !2006, line: 47, baseType: !2004, size: 64, offset: 64)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2027, file: !2006, line: 48, baseType: !2032, size: 704, offset: 128)
!2032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2033, line: 164, size: 704, elements: !2034)
!2033 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2034 = !{!2035, !2036, !2047, !2048, !2049, !2050, !2051, !2052, !2056, !2060, !2061, !2062, !2063}
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2032, file: !2033, line: 166, baseType: !1714, size: 64)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2032, file: !2033, line: 167, baseType: !2037, size: 64, offset: 64)
!2037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2038, size: 64)
!2038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2033, line: 157, size: 192, elements: !2039)
!2039 = !{!2040, !2042, !2043}
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2038, file: !2033, line: 159, baseType: !2041, size: 64)
!2041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1778, size: 64)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2038, file: !2033, line: 160, baseType: !2037, size: 64, offset: 64)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2038, file: !2033, line: 161, baseType: !2044, size: 32, offset: 128)
!2044 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1778, size: 32, elements: !2045)
!2045 = !{!2046}
!2046 = !DISubrange(count: 4)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2032, file: !2033, line: 168, baseType: !2041, size: 64, offset: 128)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2032, file: !2033, line: 169, baseType: !2041, size: 64, offset: 192)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2032, file: !2033, line: 170, baseType: !2041, size: 64, offset: 256)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2032, file: !2033, line: 171, baseType: !1714, size: 64, offset: 320)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2032, file: !2033, line: 172, baseType: !1730, size: 32, offset: 384)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2032, file: !2033, line: 176, baseType: !2053, size: 64, offset: 448)
!2053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!2054 = !DISubroutineType(types: !2055)
!2055 = !{!2037, !1745, !1714}
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2032, file: !2033, line: 177, baseType: !2057, size: 64, offset: 512)
!2057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2058, size: 64)
!2058 = !DISubroutineType(types: !2059)
!2059 = !{null, !1745, !2037}
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2032, file: !2033, line: 178, baseType: !1745, size: 64, offset: 576)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2032, file: !2033, line: 179, baseType: !6, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2032, file: !2033, line: 180, baseType: !6, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2032, file: !2033, line: 184, baseType: !6, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1973, file: !1955, line: 177, baseType: !1780, size: 64)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1973, file: !1955, line: 178, baseType: !2066, size: 64)
!2066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2067, size: 64)
!2067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !335, line: 217, size: 832, elements: !2068)
!2068 = !{!2069, !2313, !2314, !2315, !2318, !2322, !2323, !2324, !2342, !2343, !2344, !2345, !2346, !2347}
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2067, file: !335, line: 219, baseType: !2070, size: 64)
!2070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2071, size: 64)
!2071 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !335, line: 151, baseType: !2072)
!2072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !335, line: 151, size: 128, elements: !2073)
!2073 = !{!2074}
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2072, file: !335, line: 151, baseType: !2075, size: 128)
!2075 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !335, line: 150, baseType: !2076)
!2076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !335, line: 150, size: 128, elements: !2077)
!2077 = !{!2078, !2079, !2080}
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2076, file: !335, line: 150, baseType: !6, size: 32)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2076, file: !335, line: 150, baseType: !6, size: 32, offset: 32)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2076, file: !335, line: 150, baseType: !2081, size: 64, offset: 64)
!2081 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2082, size: 64, elements: !1743)
!2082 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1781, line: 108, baseType: !2083)
!2083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2084, size: 64)
!2084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !335, line: 122, size: 512, elements: !2085)
!2085 = !{!2086, !2087, !2088, !2305, !2306, !2307, !2308, !2309, !2310, !2311}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2084, file: !335, line: 124, baseType: !2066, size: 64)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2084, file: !335, line: 125, baseType: !2066, size: 64, offset: 64)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2084, file: !335, line: 131, baseType: !2089, size: 64, offset: 128)
!2089 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !335, line: 128, size: 64, elements: !2090)
!2090 = !{!2091, !2304}
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2089, file: !335, line: 129, baseType: !2092, size: 64)
!2092 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1781, line: 66, baseType: !2093)
!2093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2094, size: 64)
!2094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !851, line: 143, size: 192, elements: !2095)
!2095 = !{!2096, !2302, !2303}
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2094, file: !851, line: 145, baseType: !2097, size: 64)
!2097 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1781, line: 69, baseType: !2098)
!2098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2099, size: 64)
!2099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !851, line: 136, size: 192, elements: !2100)
!2100 = !{!2101, !2300, !2301}
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2099, file: !851, line: 137, baseType: !2102, size: 64)
!2102 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1781, line: 58, baseType: !2103)
!2103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2104, size: 64)
!2104 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !851, line: 737, size: 768, elements: !2105)
!2105 = !{!2106, !2123, !2157, !2163, !2168, !2173, !2180, !2186, !2192, !2197, !2211, !2216, !2222, !2227, !2237, !2242, !2258, !2265, !2272, !2278, !2283, !2289, !2295}
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2104, file: !851, line: 738, baseType: !2107, size: 256)
!2107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !851, line: 271, size: 256, elements: !2108)
!2108 = !{!2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122}
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2107, file: !851, line: 274, baseType: !6, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2107, file: !851, line: 277, baseType: !6, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2107, file: !851, line: 281, baseType: !6, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2107, file: !851, line: 284, baseType: !6, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2107, file: !851, line: 291, baseType: !6, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2107, file: !851, line: 295, baseType: !6, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2107, file: !851, line: 298, baseType: !6, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2107, file: !851, line: 301, baseType: !6, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2107, file: !851, line: 307, baseType: !6, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2107, file: !851, line: 312, baseType: !6, size: 32, offset: 32)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2107, file: !851, line: 316, baseType: !1902, size: 32, offset: 64)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2107, file: !851, line: 319, baseType: !6, size: 32, offset: 96)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2107, file: !851, line: 323, baseType: !2066, size: 64, offset: 128)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2107, file: !851, line: 327, baseType: !1780, size: 64, offset: 192)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2104, file: !851, line: 739, baseType: !2124, size: 448)
!2124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !851, line: 350, size: 448, elements: !2125)
!2125 = !{!2126, !2155}
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2124, file: !851, line: 353, baseType: !2127, size: 384)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !851, line: 333, size: 384, elements: !2128)
!2128 = !{!2129, !2130, !2138}
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2127, file: !851, line: 336, baseType: !2107, size: 256)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2127, file: !851, line: 343, baseType: !2131, size: 64, offset: 256)
!2131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2132, size: 64)
!2132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !2133, line: 37, size: 128, elements: !2134)
!2133 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2134 = !{!2135, !2136}
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2132, file: !2133, line: 39, baseType: !2131, size: 64)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2132, file: !2133, line: 40, baseType: !2137, size: 64, offset: 64)
!2137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1780, size: 64)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2127, file: !851, line: 344, baseType: !2139, size: 64, offset: 320)
!2139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2140, size: 64)
!2140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !2133, line: 45, size: 320, elements: !2141)
!2141 = !{!2142, !2143}
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2140, file: !2133, line: 47, baseType: !2139, size: 64)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2140, file: !2133, line: 48, baseType: !2144, size: 256, offset: 64)
!2144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !140, line: 1883, size: 256, elements: !2145)
!2145 = !{!2146, !2148, !2149, !2154}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2144, file: !140, line: 1884, baseType: !2147, size: 64)
!2147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2144, size: 64)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2144, file: !140, line: 1885, baseType: !2147, size: 64, offset: 64)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2144, file: !140, line: 1891, baseType: !2150, size: 64, offset: 128)
!2150 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2144, file: !140, line: 1891, size: 64, elements: !2151)
!2151 = !{!2152, !2153}
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2150, file: !140, line: 1891, baseType: !2102, size: 64)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2150, file: !140, line: 1891, baseType: !1780, size: 64)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2144, file: !140, line: 1892, baseType: !2137, size: 64, offset: 192)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2124, file: !851, line: 359, baseType: !2156, size: 64, offset: 384)
!2156 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1780, size: 64, elements: !1743)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2104, file: !851, line: 740, baseType: !2158, size: 512)
!2158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !851, line: 365, size: 512, elements: !2159)
!2159 = !{!2160, !2161, !2162}
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2158, file: !851, line: 368, baseType: !2127, size: 384)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2158, file: !851, line: 373, baseType: !1780, size: 64, offset: 384)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2158, file: !851, line: 374, baseType: !1780, size: 64, offset: 448)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2104, file: !851, line: 741, baseType: !2164, size: 576)
!2164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !851, line: 380, size: 576, elements: !2165)
!2165 = !{!2166, !2167}
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2164, file: !851, line: 383, baseType: !2158, size: 512)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2164, file: !851, line: 389, baseType: !2156, size: 64, offset: 512)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2104, file: !851, line: 742, baseType: !2169, size: 320)
!2169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !851, line: 395, size: 320, elements: !2170)
!2170 = !{!2171, !2172}
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2169, file: !851, line: 397, baseType: !2107, size: 256)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2169, file: !851, line: 400, baseType: !2092, size: 64, offset: 256)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2104, file: !851, line: 743, baseType: !2174, size: 448)
!2174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !851, line: 406, size: 448, elements: !2175)
!2175 = !{!2176, !2177, !2178, !2179}
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2174, file: !851, line: 408, baseType: !2107, size: 256)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2174, file: !851, line: 412, baseType: !1780, size: 64, offset: 256)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2174, file: !851, line: 420, baseType: !1780, size: 64, offset: 320)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2174, file: !851, line: 423, baseType: !2092, size: 64, offset: 384)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2104, file: !851, line: 744, baseType: !2181, size: 384)
!2181 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !851, line: 429, size: 384, elements: !2182)
!2182 = !{!2183, !2184, !2185}
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2181, file: !851, line: 431, baseType: !2107, size: 256)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2181, file: !851, line: 434, baseType: !1780, size: 64, offset: 256)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2181, file: !851, line: 437, baseType: !2092, size: 64, offset: 320)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2104, file: !851, line: 745, baseType: !2187, size: 384)
!2187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !851, line: 443, size: 384, elements: !2188)
!2188 = !{!2189, !2190, !2191}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2187, file: !851, line: 445, baseType: !2107, size: 256)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2187, file: !851, line: 449, baseType: !1780, size: 64, offset: 256)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2187, file: !851, line: 453, baseType: !2092, size: 64, offset: 320)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2104, file: !851, line: 746, baseType: !2193, size: 320)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !851, line: 459, size: 320, elements: !2194)
!2194 = !{!2195, !2196}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2193, file: !851, line: 461, baseType: !2107, size: 256)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2193, file: !851, line: 464, baseType: !1780, size: 64, offset: 256)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2104, file: !851, line: 747, baseType: !2198, size: 768)
!2198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !851, line: 469, size: 768, elements: !2199)
!2199 = !{!2200, !2201, !2202, !2203, !2204}
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2198, file: !851, line: 471, baseType: !2107, size: 256)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2198, file: !851, line: 474, baseType: !6, size: 32, offset: 256)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2198, file: !851, line: 475, baseType: !6, size: 32, offset: 288)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2198, file: !851, line: 478, baseType: !1780, size: 64, offset: 320)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2198, file: !851, line: 481, baseType: !2205, size: 384, offset: 384)
!2205 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2206, size: 384, elements: !1743)
!2206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !140, line: 1917, size: 384, elements: !2207)
!2207 = !{!2208, !2209, !2210}
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2206, file: !140, line: 1920, baseType: !2144, size: 256)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2206, file: !140, line: 1921, baseType: !1780, size: 64, offset: 256)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2206, file: !140, line: 1922, baseType: !1902, size: 32, offset: 320)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2104, file: !851, line: 748, baseType: !2212, size: 320)
!2212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !851, line: 487, size: 320, elements: !2213)
!2213 = !{!2214, !2215}
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2212, file: !851, line: 490, baseType: !2107, size: 256)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2212, file: !851, line: 494, baseType: !1730, size: 32, offset: 256)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2104, file: !851, line: 749, baseType: !2217, size: 384)
!2217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !851, line: 500, size: 384, elements: !2218)
!2218 = !{!2219, !2220, !2221}
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2217, file: !851, line: 502, baseType: !2107, size: 256)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2217, file: !851, line: 506, baseType: !2092, size: 64, offset: 256)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2217, file: !851, line: 510, baseType: !2092, size: 64, offset: 320)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2104, file: !851, line: 750, baseType: !2223, size: 320)
!2223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !851, line: 529, size: 320, elements: !2224)
!2224 = !{!2225, !2226}
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2223, file: !851, line: 531, baseType: !2107, size: 256)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2223, file: !851, line: 540, baseType: !2092, size: 64, offset: 256)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2104, file: !851, line: 751, baseType: !2228, size: 704)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !851, line: 546, size: 704, elements: !2229)
!2229 = !{!2230, !2231, !2232, !2233, !2234, !2235, !2236}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2228, file: !851, line: 549, baseType: !2158, size: 512)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2228, file: !851, line: 553, baseType: !1776, size: 64, offset: 512)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2228, file: !851, line: 557, baseType: !1894, size: 8, offset: 576)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2228, file: !851, line: 558, baseType: !1894, size: 8, offset: 584)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2228, file: !851, line: 559, baseType: !1894, size: 8, offset: 592)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2228, file: !851, line: 560, baseType: !1894, size: 8, offset: 600)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2228, file: !851, line: 566, baseType: !2156, size: 64, offset: 640)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2104, file: !851, line: 752, baseType: !2238, size: 384)
!2238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !851, line: 571, size: 384, elements: !2239)
!2239 = !{!2240, !2241}
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2238, file: !851, line: 573, baseType: !2169, size: 320)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2238, file: !851, line: 577, baseType: !1780, size: 64, offset: 320)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2104, file: !851, line: 753, baseType: !2243, size: 576)
!2243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !851, line: 600, size: 576, elements: !2244)
!2244 = !{!2245, !2246, !2247, !2248, !2257}
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2243, file: !851, line: 602, baseType: !2169, size: 320)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2243, file: !851, line: 605, baseType: !1780, size: 64, offset: 320)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2243, file: !851, line: 609, baseType: !1727, size: 64, offset: 384)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2243, file: !851, line: 612, baseType: !2249, size: 64, offset: 448)
!2249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2250, size: 64)
!2250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !851, line: 581, size: 320, elements: !2251)
!2251 = !{!2252, !2253, !2254, !2255, !2256}
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2250, file: !851, line: 583, baseType: !139, size: 32)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2250, file: !851, line: 586, baseType: !1780, size: 64, offset: 64)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2250, file: !851, line: 589, baseType: !1780, size: 64, offset: 128)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2250, file: !851, line: 592, baseType: !1780, size: 64, offset: 192)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2250, file: !851, line: 595, baseType: !1780, size: 64, offset: 256)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2243, file: !851, line: 616, baseType: !2092, size: 64, offset: 512)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2104, file: !851, line: 754, baseType: !2259, size: 512)
!2259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !851, line: 622, size: 512, elements: !2260)
!2260 = !{!2261, !2262, !2263, !2264}
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2259, file: !851, line: 624, baseType: !2169, size: 320)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2259, file: !851, line: 628, baseType: !1780, size: 64, offset: 320)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2259, file: !851, line: 632, baseType: !1780, size: 64, offset: 384)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2259, file: !851, line: 636, baseType: !1780, size: 64, offset: 448)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2104, file: !851, line: 755, baseType: !2266, size: 704)
!2266 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !851, line: 642, size: 704, elements: !2267)
!2267 = !{!2268, !2269, !2270, !2271}
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2266, file: !851, line: 644, baseType: !2259, size: 512)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2266, file: !851, line: 648, baseType: !1780, size: 64, offset: 512)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2266, file: !851, line: 652, baseType: !1780, size: 64, offset: 576)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2266, file: !851, line: 653, baseType: !1780, size: 64, offset: 640)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2104, file: !851, line: 756, baseType: !2273, size: 448)
!2273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !851, line: 663, size: 448, elements: !2274)
!2274 = !{!2275, !2276, !2277}
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2273, file: !851, line: 665, baseType: !2169, size: 320)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2273, file: !851, line: 668, baseType: !1780, size: 64, offset: 320)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2273, file: !851, line: 673, baseType: !1780, size: 64, offset: 384)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2104, file: !851, line: 757, baseType: !2279, size: 384)
!2279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !851, line: 694, size: 384, elements: !2280)
!2280 = !{!2281, !2282}
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2279, file: !851, line: 696, baseType: !2169, size: 320)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2279, file: !851, line: 699, baseType: !1780, size: 64, offset: 320)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2104, file: !851, line: 758, baseType: !2284, size: 384)
!2284 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !851, line: 681, size: 384, elements: !2285)
!2285 = !{!2286, !2287, !2288}
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2284, file: !851, line: 683, baseType: !2107, size: 256)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2284, file: !851, line: 686, baseType: !1780, size: 64, offset: 256)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2284, file: !851, line: 689, baseType: !1780, size: 64, offset: 320)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2104, file: !851, line: 759, baseType: !2290, size: 384)
!2290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !851, line: 707, size: 384, elements: !2291)
!2291 = !{!2292, !2293, !2294}
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2290, file: !851, line: 709, baseType: !2107, size: 256)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2290, file: !851, line: 712, baseType: !1780, size: 64, offset: 256)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2290, file: !851, line: 712, baseType: !1780, size: 64, offset: 320)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2104, file: !851, line: 760, baseType: !2296, size: 320)
!2296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !851, line: 718, size: 320, elements: !2297)
!2297 = !{!2298, !2299}
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2296, file: !851, line: 720, baseType: !2107, size: 256)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2296, file: !851, line: 723, baseType: !1780, size: 64, offset: 256)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2099, file: !851, line: 138, baseType: !2098, size: 64, offset: 64)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2099, file: !851, line: 139, baseType: !2098, size: 64, offset: 128)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2094, file: !851, line: 146, baseType: !2097, size: 64, offset: 64)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2094, file: !851, line: 152, baseType: !2092, size: 64, offset: 128)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2089, file: !335, line: 130, baseType: !1952, size: 64)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2084, file: !335, line: 134, baseType: !1745, size: 64, offset: 192)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2084, file: !335, line: 137, baseType: !1780, size: 64, offset: 256)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2084, file: !335, line: 138, baseType: !1902, size: 32, offset: 320)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2084, file: !335, line: 142, baseType: !6, size: 32, offset: 352)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2084, file: !335, line: 144, baseType: !1730, size: 32, offset: 384)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2084, file: !335, line: 145, baseType: !1730, size: 32, offset: 416)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2084, file: !335, line: 146, baseType: !2312, size: 64, offset: 448)
!2312 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !335, line: 119, baseType: !1714)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2067, file: !335, line: 220, baseType: !2070, size: 64, offset: 64)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2067, file: !335, line: 223, baseType: !1745, size: 64, offset: 128)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2067, file: !335, line: 226, baseType: !2316, size: 64, offset: 192)
!2316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2317, size: 64)
!2317 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !335, line: 185, flags: DIFlagFwdDecl)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2067, file: !335, line: 229, baseType: !2319, size: 128, offset: 256)
!2319 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2320, size: 128, elements: !2020)
!2320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2321, size: 64)
!2321 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !335, line: 229, flags: DIFlagFwdDecl)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2067, file: !335, line: 232, baseType: !2066, size: 64, offset: 384)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2067, file: !335, line: 233, baseType: !2066, size: 64, offset: 448)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2067, file: !335, line: 238, baseType: !2325, size: 64, offset: 512)
!2325 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !335, line: 235, size: 64, elements: !2326)
!2326 = !{!2327, !2333}
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2325, file: !335, line: 236, baseType: !2328, size: 64)
!2328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2329, size: 64)
!2329 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !335, line: 273, size: 128, elements: !2330)
!2330 = !{!2331, !2332}
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2329, file: !335, line: 275, baseType: !2092, size: 64)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2329, file: !335, line: 278, baseType: !2092, size: 64, offset: 64)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2325, file: !335, line: 237, baseType: !2334, size: 64)
!2334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2335, size: 64)
!2335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !335, line: 259, size: 320, elements: !2336)
!2336 = !{!2337, !2338, !2339, !2340, !2341}
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2335, file: !335, line: 261, baseType: !1952, size: 64)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2335, file: !335, line: 262, baseType: !1952, size: 64, offset: 64)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2335, file: !335, line: 266, baseType: !1952, size: 64, offset: 128)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2335, file: !335, line: 267, baseType: !1952, size: 64, offset: 192)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2335, file: !335, line: 270, baseType: !1730, size: 32, offset: 256)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2067, file: !335, line: 241, baseType: !2312, size: 64, offset: 576)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2067, file: !335, line: 244, baseType: !1730, size: 32, offset: 640)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2067, file: !335, line: 247, baseType: !1730, size: 32, offset: 672)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2067, file: !335, line: 250, baseType: !1730, size: 32, offset: 704)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2067, file: !335, line: 253, baseType: !1730, size: 32, offset: 736)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2067, file: !335, line: 256, baseType: !1730, size: 32, offset: 768)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1973, file: !1955, line: 179, baseType: !2349, size: 64)
!2349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2350, size: 64)
!2350 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1955, line: 150, baseType: !2351)
!2351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1955, line: 142, size: 320, elements: !2352)
!2352 = !{!2353, !2354, !2355, !2356, !2359, !2360}
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2351, file: !1955, line: 144, baseType: !1780, size: 64)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2351, file: !1955, line: 145, baseType: !1952, size: 64, offset: 64)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2351, file: !1955, line: 146, baseType: !1952, size: 64, offset: 128)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2351, file: !1955, line: 147, baseType: !2357, size: 32, offset: 192)
!2357 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2358, line: 31, baseType: !1730)
!2358 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2351, file: !1955, line: 148, baseType: !6, size: 32, offset: 224)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2351, file: !1955, line: 149, baseType: !1894, size: 8, offset: 256)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1973, file: !1955, line: 180, baseType: !2362, size: 64)
!2362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2363, size: 64)
!2363 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1955, line: 162, baseType: !2364)
!2364 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1955, line: 159, size: 128, elements: !2365)
!2365 = !{!2366, !2367}
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2364, file: !1955, line: 160, baseType: !1780, size: 64)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2364, file: !1955, line: 161, baseType: !1714, size: 64, offset: 64)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1973, file: !1955, line: 181, baseType: !2369, size: 64)
!2369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2370, size: 64)
!2370 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1955, line: 181, flags: DIFlagFwdDecl)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1968, file: !1955, line: 317, baseType: !2372, size: 64)
!2372 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1714, size: 64, elements: !1743)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1968, file: !1955, line: 318, baseType: !2374, size: 320)
!2374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1955, line: 188, size: 320, elements: !2375)
!2375 = !{!2376, !2378, !2435}
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2374, file: !1955, line: 190, baseType: !2377, size: 192)
!2377 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1972, size: 192, elements: !1852)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2374, file: !1955, line: 193, baseType: !2379, size: 64, offset: 192)
!2379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2380, size: 64)
!2380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1955, line: 206, size: 320, elements: !2381)
!2381 = !{!2382, !2420, !2421, !2422, !2434}
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2380, file: !1955, line: 208, baseType: !2383, size: 64)
!2383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2384, size: 64)
!2384 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1781, line: 62, baseType: !2385)
!2385 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2386, line: 538, size: 256, elements: !2387)
!2386 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2387 = !{!2388, !2392, !2398, !2411}
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2385, file: !2386, line: 539, baseType: !2389, size: 32)
!2389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2386, line: 482, size: 32, elements: !2390)
!2390 = !{!2391}
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2389, file: !2386, line: 484, baseType: !6, size: 32)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2385, file: !2386, line: 540, baseType: !2393, size: 192)
!2393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2386, line: 488, size: 192, elements: !2394)
!2394 = !{!2395, !2396, !2397}
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2393, file: !2386, line: 489, baseType: !2389, size: 32)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2393, file: !2386, line: 492, baseType: !1776, size: 64, offset: 64)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2393, file: !2386, line: 496, baseType: !1780, size: 64, offset: 128)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2385, file: !2386, line: 541, baseType: !2399, size: 256)
!2399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2386, line: 504, size: 256, elements: !2400)
!2400 = !{!2401, !2402, !2409, !2410}
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2399, file: !2386, line: 505, baseType: !2389, size: 32)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2399, file: !2386, line: 509, baseType: !2403, size: 64, offset: 64)
!2403 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2386, line: 501, baseType: !2404)
!2404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2405, size: 64)
!2405 = !DISubroutineType(types: !2406)
!2406 = !{null, !2407}
!2407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2408, size: 64)
!2408 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2399, file: !2386, line: 510, baseType: !2407, size: 64, offset: 128)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2399, file: !2386, line: 513, baseType: !2383, size: 64, offset: 192)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2385, file: !2386, line: 542, baseType: !2412, size: 128)
!2412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2386, line: 530, size: 128, elements: !2413)
!2413 = !{!2414, !2415}
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2412, file: !2386, line: 531, baseType: !2389, size: 32)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2412, file: !2386, line: 534, baseType: !2416, size: 64, offset: 64)
!2416 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2386, line: 525, baseType: !2417)
!2417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2418, size: 64)
!2418 = !DISubroutineType(types: !2419)
!2419 = !{!1894, !1780, !1776, !1729, !1729}
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2380, file: !1955, line: 211, baseType: !6, size: 32, offset: 64)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2380, file: !1955, line: 214, baseType: !1714, size: 64, offset: 128)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2380, file: !1955, line: 224, baseType: !2423, size: 64, offset: 192)
!2423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2424, size: 64)
!2424 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1955, line: 202, baseType: !2425)
!2425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1955, line: 202, size: 128, elements: !2426)
!2426 = !{!2427}
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2425, file: !1955, line: 202, baseType: !2428, size: 128)
!2428 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1955, line: 200, baseType: !2429)
!2429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1955, line: 200, size: 128, elements: !2430)
!2430 = !{!2431, !2432, !2433}
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2429, file: !1955, line: 200, baseType: !6, size: 32)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2429, file: !1955, line: 200, baseType: !6, size: 32, offset: 32)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2429, file: !1955, line: 200, baseType: !1986, size: 64, offset: 64)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2380, file: !1955, line: 234, baseType: !2423, size: 64, offset: 256)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2374, file: !1955, line: 197, baseType: !1714, size: 64, offset: 256)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1968, file: !1955, line: 319, baseType: !1841, size: 256)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1968, file: !1955, line: 320, baseType: !1860, size: 192)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1783, file: !140, line: 3384, baseType: !2439, size: 1472)
!2439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !140, line: 3114, size: 1472, elements: !2440)
!2440 = !{!2441, !2462, !2463, !2464, !2465}
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2439, file: !140, line: 3115, baseType: !2442, size: 1216)
!2442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !140, line: 2984, size: 1216, elements: !2443)
!2443 = !{!2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461}
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2442, file: !140, line: 2985, baseType: !1948, size: 960)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2442, file: !140, line: 2986, baseType: !1780, size: 64, offset: 960)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2442, file: !140, line: 2987, baseType: !1780, size: 64, offset: 1024)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2442, file: !140, line: 2988, baseType: !1780, size: 64, offset: 1088)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2442, file: !140, line: 2991, baseType: !6, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2442, file: !140, line: 2992, baseType: !6, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2442, file: !140, line: 2993, baseType: !6, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2442, file: !140, line: 2994, baseType: !6, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2442, file: !140, line: 2995, baseType: !6, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2442, file: !140, line: 2996, baseType: !6, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2442, file: !140, line: 2998, baseType: !6, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2442, file: !140, line: 3000, baseType: !6, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2442, file: !140, line: 3002, baseType: !6, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2442, file: !140, line: 3003, baseType: !6, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2442, file: !140, line: 3004, baseType: !6, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2442, file: !140, line: 3005, baseType: !6, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2442, file: !140, line: 3007, baseType: !6, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2442, file: !140, line: 3010, baseType: !6, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2439, file: !140, line: 3117, baseType: !1780, size: 64, offset: 1216)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2439, file: !140, line: 3119, baseType: !1780, size: 64, offset: 1280)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2439, file: !140, line: 3121, baseType: !1780, size: 64, offset: 1344)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2439, file: !140, line: 3123, baseType: !1780, size: 64, offset: 1408)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1783, file: !140, line: 3385, baseType: !2467, size: 1088)
!2467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !140, line: 2874, size: 1088, elements: !2468)
!2468 = !{!2469, !2470, !2471}
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2467, file: !140, line: 2875, baseType: !1948, size: 960)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2467, file: !140, line: 2876, baseType: !1952, size: 64, offset: 960)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2467, file: !140, line: 2877, baseType: !2472, size: 64, offset: 1024)
!2472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2473, size: 64)
!2473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2474, line: 172, size: 128, elements: !2475)
!2474 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2475 = !{!2476, !2477, !2478, !2479, !2480, !2481, !2482}
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2473, file: !2474, line: 174, baseType: !6, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2473, file: !2474, line: 178, baseType: !6, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2473, file: !2474, line: 183, baseType: !6, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2473, file: !2474, line: 187, baseType: !6, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2473, file: !2474, line: 192, baseType: !6, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2473, file: !2474, line: 195, baseType: !6, size: 32, offset: 32)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2473, file: !2474, line: 199, baseType: !1780, size: 64, offset: 64)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1783, file: !140, line: 3386, baseType: !2442, size: 1216)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1783, file: !140, line: 3387, baseType: !2485, size: 1280)
!2485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !140, line: 3093, size: 1280, elements: !2486)
!2486 = !{!2487, !2488}
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2485, file: !140, line: 3094, baseType: !2442, size: 1216)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2485, file: !140, line: 3095, baseType: !2472, size: 64, offset: 1216)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1783, file: !140, line: 3388, baseType: !2490, size: 1216)
!2490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !140, line: 2824, size: 1216, elements: !2491)
!2491 = !{!2492, !2493, !2494, !2495, !2496, !2497}
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2490, file: !140, line: 2825, baseType: !1910, size: 896)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2490, file: !140, line: 2827, baseType: !1780, size: 64, offset: 896)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2490, file: !140, line: 2828, baseType: !1780, size: 64, offset: 960)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2490, file: !140, line: 2829, baseType: !1780, size: 64, offset: 1024)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2490, file: !140, line: 2830, baseType: !1780, size: 64, offset: 1088)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2490, file: !140, line: 2831, baseType: !1780, size: 64, offset: 1152)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1783, file: !140, line: 3389, baseType: !2499, size: 1024)
!2499 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !140, line: 2850, size: 1024, elements: !2500)
!2500 = !{!2501, !2502, !2503}
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2499, file: !140, line: 2851, baseType: !1948, size: 960)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2499, file: !140, line: 2852, baseType: !1730, size: 32, offset: 960)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2499, file: !140, line: 2853, baseType: !1730, size: 32, offset: 992)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1783, file: !140, line: 3390, baseType: !2505, size: 1024)
!2505 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !140, line: 2857, size: 1024, elements: !2506)
!2506 = !{!2507, !2508}
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2505, file: !140, line: 2858, baseType: !1948, size: 960)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2505, file: !140, line: 2859, baseType: !2472, size: 64, offset: 960)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1783, file: !140, line: 3391, baseType: !2510, size: 960)
!2510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !140, line: 2862, size: 960, elements: !2511)
!2511 = !{!2512}
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2510, file: !140, line: 2863, baseType: !1948, size: 960)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1783, file: !140, line: 3392, baseType: !2514, size: 1472)
!2514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !140, line: 3304, size: 1472, elements: !2515)
!2515 = !{!2516}
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2514, file: !140, line: 3305, baseType: !2439, size: 1472)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1783, file: !140, line: 3393, baseType: !2518, size: 1792)
!2518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !140, line: 3248, size: 1792, elements: !2519)
!2519 = !{!2520, !2521, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752}
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2518, file: !140, line: 3249, baseType: !2439, size: 1472)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2518, file: !140, line: 3251, baseType: !2522, size: 64, offset: 1472)
!2522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2523, size: 64)
!2523 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2524, line: 463, size: 1152, elements: !2525)
!2524 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2525 = !{!2526, !2529, !2560, !2561, !2673, !2676, !2677, !2678, !2679, !2680, !2681, !2705, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731}
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2523, file: !2524, line: 464, baseType: !2527, size: 64)
!2527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2528, size: 64)
!2528 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2524, line: 464, flags: DIFlagFwdDecl)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2523, file: !2524, line: 467, baseType: !2530, size: 64, offset: 64)
!2530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2531, size: 64)
!2531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !335, line: 374, size: 640, elements: !2532)
!2532 = !{!2533, !2535, !2536, !2549, !2550, !2551, !2552, !2553, !2554, !2556, !2558, !2559}
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2531, file: !335, line: 377, baseType: !2534, size: 64)
!2534 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1781, line: 111, baseType: !2066)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2531, file: !335, line: 378, baseType: !2534, size: 64, offset: 64)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2531, file: !335, line: 381, baseType: !2537, size: 64, offset: 128)
!2537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2538, size: 64)
!2538 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !335, line: 282, baseType: !2539)
!2539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !335, line: 282, size: 128, elements: !2540)
!2540 = !{!2541}
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2539, file: !335, line: 282, baseType: !2542, size: 128)
!2542 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !335, line: 281, baseType: !2543)
!2543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !335, line: 281, size: 128, elements: !2544)
!2544 = !{!2545, !2546, !2547}
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2543, file: !335, line: 281, baseType: !6, size: 32)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2543, file: !335, line: 281, baseType: !6, size: 32, offset: 32)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2543, file: !335, line: 281, baseType: !2548, size: 64, offset: 64)
!2548 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2534, size: 64, elements: !1743)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2531, file: !335, line: 384, baseType: !1730, size: 32, offset: 192)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2531, file: !335, line: 387, baseType: !1730, size: 32, offset: 224)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2531, file: !335, line: 390, baseType: !1730, size: 32, offset: 256)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2531, file: !335, line: 394, baseType: !2537, size: 64, offset: 320)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2531, file: !335, line: 396, baseType: !334, size: 32, offset: 384)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2531, file: !335, line: 399, baseType: !2555, size: 64, offset: 416)
!2555 = !DICompositeType(tag: DW_TAG_array_type, baseType: !340, size: 64, elements: !2020)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2531, file: !335, line: 402, baseType: !2557, size: 64, offset: 480)
!2557 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 64, elements: !2020)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2531, file: !335, line: 406, baseType: !1730, size: 32, offset: 544)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2531, file: !335, line: 409, baseType: !1730, size: 32, offset: 576)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2523, file: !2524, line: 470, baseType: !2093, size: 64, offset: 128)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2523, file: !2524, line: 473, baseType: !2562, size: 64, offset: 192)
!2562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2563, size: 64)
!2563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2474, line: 39, size: 1152, elements: !2564)
!2564 = !{!2565, !2612, !2625, !2637, !2638, !2650, !2651, !2655, !2656, !2657, !2658, !2659}
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2563, file: !2474, line: 41, baseType: !2566, size: 64)
!2566 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !712, line: 144, baseType: !2567)
!2567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2568, size: 64)
!2568 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !712, line: 100, size: 896, elements: !2569)
!2569 = !{!2570, !2576, !2581, !2586, !2588, !2589, !2590, !2591, !2592, !2593, !2598, !2600, !2601, !2606, !2611}
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2568, file: !712, line: 102, baseType: !2571, size: 64)
!2571 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !712, line: 52, baseType: !2572)
!2572 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2573, size: 64)
!2573 = !DISubroutineType(types: !2574)
!2574 = !{!2575, !2407}
!2575 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !712, line: 47, baseType: !6)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2568, file: !712, line: 105, baseType: !2577, size: 64, offset: 64)
!2577 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !712, line: 59, baseType: !2578)
!2578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2579, size: 64)
!2579 = !DISubroutineType(types: !2580)
!2580 = !{!1730, !2407, !2407}
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2568, file: !712, line: 108, baseType: !2582, size: 64, offset: 128)
!2582 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !712, line: 63, baseType: !2583)
!2583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2584, size: 64)
!2584 = !DISubroutineType(types: !2585)
!2585 = !{null, !1745}
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2568, file: !712, line: 111, baseType: !2587, size: 64, offset: 192)
!2587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1745, size: 64)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2568, file: !712, line: 114, baseType: !1727, size: 64, offset: 256)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2568, file: !712, line: 117, baseType: !1727, size: 64, offset: 320)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2568, file: !712, line: 120, baseType: !1727, size: 64, offset: 384)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2568, file: !712, line: 124, baseType: !6, size: 32, offset: 448)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2568, file: !712, line: 128, baseType: !6, size: 32, offset: 480)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2568, file: !712, line: 131, baseType: !2594, size: 64, offset: 512)
!2594 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !712, line: 75, baseType: !2595)
!2595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2596, size: 64)
!2596 = !DISubroutineType(types: !2597)
!2597 = !{!1745, !1727, !1727}
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2568, file: !712, line: 132, baseType: !2599, size: 64, offset: 576)
!2599 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !712, line: 78, baseType: !2583)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2568, file: !712, line: 135, baseType: !1745, size: 64, offset: 640)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2568, file: !712, line: 136, baseType: !2602, size: 64, offset: 704)
!2602 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !712, line: 82, baseType: !2603)
!2603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2604, size: 64)
!2604 = !DISubroutineType(types: !2605)
!2605 = !{!1745, !1745, !1727, !1727}
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2568, file: !712, line: 137, baseType: !2607, size: 64, offset: 768)
!2607 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !712, line: 83, baseType: !2608)
!2608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2609, size: 64)
!2609 = !DISubroutineType(types: !2610)
!2610 = !{null, !1745, !1745}
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2568, file: !712, line: 141, baseType: !6, size: 32, offset: 832)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2563, file: !2474, line: 48, baseType: !2613, size: 64, offset: 64)
!2613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2614, size: 64)
!2614 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !851, line: 35, baseType: !2615)
!2615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !851, line: 35, size: 128, elements: !2616)
!2616 = !{!2617}
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2615, file: !851, line: 35, baseType: !2618, size: 128)
!2618 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !851, line: 33, baseType: !2619)
!2619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !851, line: 33, size: 128, elements: !2620)
!2620 = !{!2621, !2622, !2623}
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2619, file: !851, line: 33, baseType: !6, size: 32)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2619, file: !851, line: 33, baseType: !6, size: 32, offset: 32)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2619, file: !851, line: 33, baseType: !2624, size: 64, offset: 64)
!2624 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2102, size: 64, elements: !1743)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2563, file: !2474, line: 51, baseType: !2626, size: 64, offset: 128)
!2626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2627, size: 64)
!2627 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !140, line: 183, baseType: !2628)
!2628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !140, line: 183, size: 128, elements: !2629)
!2629 = !{!2630}
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2628, file: !140, line: 183, baseType: !2631, size: 128)
!2631 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !140, line: 182, baseType: !2632)
!2632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !140, line: 182, size: 128, elements: !2633)
!2633 = !{!2634, !2635, !2636}
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2632, file: !140, line: 182, baseType: !6, size: 32)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2632, file: !140, line: 182, baseType: !6, size: 32, offset: 32)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2632, file: !140, line: 182, baseType: !2156, size: 64, offset: 64)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2563, file: !2474, line: 54, baseType: !1780, size: 64, offset: 192)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2563, file: !2474, line: 57, baseType: !2639, size: 128, offset: 256)
!2639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2640, line: 31, size: 128, elements: !2641)
!2640 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2641 = !{!2642, !2643, !2644, !2645, !2646, !2647, !2648}
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2639, file: !2640, line: 35, baseType: !6, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2639, file: !2640, line: 39, baseType: !6, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2639, file: !2640, line: 42, baseType: !6, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2639, file: !2640, line: 46, baseType: !6, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2639, file: !2640, line: 50, baseType: !6, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2639, file: !2640, line: 53, baseType: !6, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2639, file: !2640, line: 56, baseType: !2649, size: 64, offset: 64)
!2649 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1781, line: 47, baseType: !2004)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2563, file: !2474, line: 60, baseType: !2639, size: 128, offset: 384)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2563, file: !2474, line: 64, baseType: !2652, size: 64, offset: 512)
!2652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2653, size: 64)
!2653 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2654, line: 33, flags: DIFlagFwdDecl)
!2654 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2563, file: !2474, line: 67, baseType: !1780, size: 64, offset: 576)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2563, file: !2474, line: 73, baseType: !2566, size: 64, offset: 640)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2563, file: !2474, line: 77, baseType: !2649, size: 64, offset: 704)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2563, file: !2474, line: 80, baseType: !6, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2563, file: !2474, line: 82, baseType: !2660, size: 320, offset: 832)
!2660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !2133, line: 62, size: 320, elements: !2661)
!2661 = !{!2662, !2668, !2669, !2670, !2671, !2672}
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2660, file: !2133, line: 63, baseType: !2663, size: 64)
!2663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2664, size: 64)
!2664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !2133, line: 56, size: 128, elements: !2665)
!2665 = !{!2666, !2667}
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2664, file: !2133, line: 57, baseType: !2663, size: 64)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2664, file: !2133, line: 58, baseType: !1876, size: 8, offset: 64)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2660, file: !2133, line: 64, baseType: !6, size: 32, offset: 64)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2660, file: !2133, line: 66, baseType: !6, size: 32, offset: 96)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2660, file: !2133, line: 68, baseType: !1894, size: 8, offset: 128)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2660, file: !2133, line: 70, baseType: !2131, size: 64, offset: 192)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2660, file: !2133, line: 71, baseType: !2139, size: 64, offset: 256)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2523, file: !2524, line: 476, baseType: !2674, size: 64, offset: 256)
!2674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2675, size: 64)
!2675 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2524, line: 476, flags: DIFlagFwdDecl)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2523, file: !2524, line: 479, baseType: !2566, size: 64, offset: 320)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2523, file: !2524, line: 484, baseType: !1780, size: 64, offset: 384)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2523, file: !2524, line: 488, baseType: !1780, size: 64, offset: 448)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2523, file: !2524, line: 493, baseType: !1780, size: 64, offset: 512)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2523, file: !2524, line: 496, baseType: !1780, size: 64, offset: 576)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2523, file: !2524, line: 501, baseType: !2682, size: 64, offset: 640)
!2682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2683, size: 64)
!2683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !346, line: 2355, size: 576, elements: !2684)
!2684 = !{!2685, !2688, !2689, !2690, !2691, !2693, !2694, !2699, !2700, !2701, !2702, !2703, !2704}
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2683, file: !346, line: 2356, baseType: !2686, size: 64)
!2686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2687, size: 64)
!2687 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !346, line: 2356, flags: DIFlagFwdDecl)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2683, file: !346, line: 2357, baseType: !1776, size: 64, offset: 64)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2683, file: !346, line: 2358, baseType: !1730, size: 32, offset: 128)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2683, file: !346, line: 2359, baseType: !1730, size: 32, offset: 160)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2683, file: !346, line: 2360, baseType: !2692, size: 128, offset: 192)
!2692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1730, size: 128, elements: !2045)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2683, file: !346, line: 2364, baseType: !1730, size: 32, offset: 320)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2683, file: !346, line: 2367, baseType: !2695, size: 128, offset: 384)
!2695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !346, line: 2349, size: 128, elements: !2696)
!2696 = !{!2697, !2698}
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2695, file: !346, line: 2351, baseType: !1952, size: 64)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2695, file: !346, line: 2352, baseType: !1714, size: 64, offset: 64)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2683, file: !346, line: 2371, baseType: !345, size: 32, offset: 512)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2683, file: !346, line: 2374, baseType: !6, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2683, file: !346, line: 2377, baseType: !6, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2683, file: !346, line: 2381, baseType: !6, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2683, file: !346, line: 2392, baseType: !6, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2683, file: !346, line: 2396, baseType: !6, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2523, file: !2524, line: 504, baseType: !2706, size: 64, offset: 704)
!2706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2707, size: 64)
!2707 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2524, line: 504, flags: DIFlagFwdDecl)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2523, file: !2524, line: 507, baseType: !2566, size: 64, offset: 768)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2523, file: !2524, line: 510, baseType: !1730, size: 32, offset: 832)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2523, file: !2524, line: 513, baseType: !1730, size: 32, offset: 864)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2523, file: !2524, line: 516, baseType: !1902, size: 32, offset: 896)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2523, file: !2524, line: 519, baseType: !1902, size: 32, offset: 928)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2523, file: !2524, line: 522, baseType: !6, size: 32, offset: 960)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2523, file: !2524, line: 523, baseType: !6, size: 32, offset: 992)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2523, file: !2524, line: 528, baseType: !1776, size: 64, offset: 1024)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2523, file: !2524, line: 535, baseType: !6, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2523, file: !2524, line: 539, baseType: !6, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2523, file: !2524, line: 543, baseType: !6, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2523, file: !2524, line: 546, baseType: !6, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2523, file: !2524, line: 550, baseType: !6, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2523, file: !2524, line: 554, baseType: !6, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2523, file: !2524, line: 559, baseType: !6, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2523, file: !2524, line: 562, baseType: !6, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2523, file: !2524, line: 571, baseType: !6, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2523, file: !2524, line: 573, baseType: !6, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2523, file: !2524, line: 574, baseType: !6, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2523, file: !2524, line: 581, baseType: !6, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2523, file: !2524, line: 585, baseType: !6, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2523, file: !2524, line: 588, baseType: !6, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2523, file: !2524, line: 592, baseType: !6, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2523, file: !2524, line: 598, baseType: !6, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2518, file: !140, line: 3254, baseType: !1780, size: 64, offset: 1536)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2518, file: !140, line: 3257, baseType: !1780, size: 64, offset: 1600)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2518, file: !140, line: 3258, baseType: !1780, size: 64, offset: 1664)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2518, file: !140, line: 3264, baseType: !6, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2518, file: !140, line: 3265, baseType: !6, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2518, file: !140, line: 3267, baseType: !6, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2518, file: !140, line: 3268, baseType: !6, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2518, file: !140, line: 3269, baseType: !6, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2518, file: !140, line: 3271, baseType: !6, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2518, file: !140, line: 3272, baseType: !6, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2518, file: !140, line: 3273, baseType: !6, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2518, file: !140, line: 3274, baseType: !6, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2518, file: !140, line: 3275, baseType: !6, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2518, file: !140, line: 3276, baseType: !6, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2518, file: !140, line: 3277, baseType: !6, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2518, file: !140, line: 3279, baseType: !6, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2518, file: !140, line: 3280, baseType: !6, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2518, file: !140, line: 3281, baseType: !6, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2518, file: !140, line: 3282, baseType: !6, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2518, file: !140, line: 3283, baseType: !6, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2518, file: !140, line: 3284, baseType: !6, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1783, file: !140, line: 3394, baseType: !2754, size: 1344)
!2754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !140, line: 2279, size: 1344, elements: !2755)
!2755 = !{!2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797}
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2754, file: !140, line: 2280, baseType: !1819, size: 192)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2754, file: !140, line: 2281, baseType: !1780, size: 64, offset: 192)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2754, file: !140, line: 2282, baseType: !1780, size: 64, offset: 256)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2754, file: !140, line: 2283, baseType: !1780, size: 64, offset: 320)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2754, file: !140, line: 2284, baseType: !1780, size: 64, offset: 384)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2754, file: !140, line: 2285, baseType: !6, size: 32, offset: 448)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2754, file: !140, line: 2287, baseType: !6, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2754, file: !140, line: 2288, baseType: !6, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2754, file: !140, line: 2289, baseType: !6, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2754, file: !140, line: 2290, baseType: !6, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2754, file: !140, line: 2291, baseType: !6, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2754, file: !140, line: 2292, baseType: !6, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2754, file: !140, line: 2294, baseType: !6, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2754, file: !140, line: 2296, baseType: !6, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2754, file: !140, line: 2297, baseType: !6, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2754, file: !140, line: 2298, baseType: !6, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2754, file: !140, line: 2299, baseType: !6, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2754, file: !140, line: 2300, baseType: !6, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2754, file: !140, line: 2301, baseType: !6, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2754, file: !140, line: 2302, baseType: !6, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2754, file: !140, line: 2303, baseType: !6, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2754, file: !140, line: 2305, baseType: !6, size: 32, offset: 512)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2754, file: !140, line: 2306, baseType: !2357, size: 32, offset: 544)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2754, file: !140, line: 2307, baseType: !1780, size: 64, offset: 576)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2754, file: !140, line: 2308, baseType: !1780, size: 64, offset: 640)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2754, file: !140, line: 2314, baseType: !2782, size: 64, offset: 704)
!2782 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !140, line: 2309, size: 64, elements: !2783)
!2783 = !{!2784, !2785, !2786}
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2782, file: !140, line: 2310, baseType: !1730, size: 32)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2782, file: !140, line: 2311, baseType: !1776, size: 64)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2782, file: !140, line: 2312, baseType: !2787, size: 64)
!2787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2788, size: 64)
!2788 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !140, line: 2277, flags: DIFlagFwdDecl)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2754, file: !140, line: 2315, baseType: !1780, size: 64, offset: 768)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2754, file: !140, line: 2316, baseType: !1780, size: 64, offset: 832)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2754, file: !140, line: 2317, baseType: !1780, size: 64, offset: 896)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2754, file: !140, line: 2318, baseType: !1780, size: 64, offset: 960)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2754, file: !140, line: 2319, baseType: !1780, size: 64, offset: 1024)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2754, file: !140, line: 2320, baseType: !1780, size: 64, offset: 1088)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2754, file: !140, line: 2321, baseType: !1780, size: 64, offset: 1152)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2754, file: !140, line: 2322, baseType: !1780, size: 64, offset: 1216)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2754, file: !140, line: 2324, baseType: !2798, size: 64, offset: 1280)
!2798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2799, size: 64)
!2799 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !140, line: 2324, flags: DIFlagFwdDecl)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1783, file: !140, line: 3395, baseType: !2801, size: 320)
!2801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !140, line: 1469, size: 320, elements: !2802)
!2802 = !{!2803, !2804, !2805}
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2801, file: !140, line: 1470, baseType: !1819, size: 192)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2801, file: !140, line: 1471, baseType: !1780, size: 64, offset: 192)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2801, file: !140, line: 1472, baseType: !1780, size: 64, offset: 256)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1783, file: !140, line: 3396, baseType: !2807, size: 320)
!2807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !140, line: 1482, size: 320, elements: !2808)
!2808 = !{!2809, !2810, !2811}
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2807, file: !140, line: 1483, baseType: !1819, size: 192)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2807, file: !140, line: 1484, baseType: !1730, size: 32, offset: 192)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2807, file: !140, line: 1485, baseType: !2156, size: 64, offset: 256)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1783, file: !140, line: 3397, baseType: !2813, size: 384)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !140, line: 1829, size: 384, elements: !2814)
!2814 = !{!2815, !2816, !2817, !2818}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2813, file: !140, line: 1830, baseType: !1819, size: 192)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2813, file: !140, line: 1831, baseType: !1902, size: 32, offset: 192)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2813, file: !140, line: 1832, baseType: !1780, size: 64, offset: 256)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2813, file: !140, line: 1835, baseType: !2156, size: 64, offset: 320)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1783, file: !140, line: 3398, baseType: !2820, size: 704)
!2820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !140, line: 1898, size: 704, elements: !2821)
!2821 = !{!2822, !2823, !2824, !2825, !2826, !2831}
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2820, file: !140, line: 1899, baseType: !1819, size: 192)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2820, file: !140, line: 1902, baseType: !1780, size: 64, offset: 192)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2820, file: !140, line: 1905, baseType: !2102, size: 64, offset: 256)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2820, file: !140, line: 1908, baseType: !6, size: 32, offset: 320)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2820, file: !140, line: 1911, baseType: !2827, size: 64, offset: 384)
!2827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2828, size: 64)
!2828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2474, line: 117, size: 128, elements: !2829)
!2829 = !{!2830}
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2828, file: !2474, line: 120, baseType: !2639, size: 128)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2820, file: !140, line: 1914, baseType: !2144, size: 256, offset: 448)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1783, file: !140, line: 3399, baseType: !2833, size: 704)
!2833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !140, line: 2008, size: 704, elements: !2834)
!2834 = !{!2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845}
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2833, file: !140, line: 2009, baseType: !1819, size: 192)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2833, file: !140, line: 2011, baseType: !6, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2833, file: !140, line: 2012, baseType: !6, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2833, file: !140, line: 2014, baseType: !1902, size: 32, offset: 224)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2833, file: !140, line: 2016, baseType: !1780, size: 64, offset: 256)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2833, file: !140, line: 2017, baseType: !2626, size: 64, offset: 320)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2833, file: !140, line: 2019, baseType: !1780, size: 64, offset: 384)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2833, file: !140, line: 2020, baseType: !1780, size: 64, offset: 448)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2833, file: !140, line: 2021, baseType: !1780, size: 64, offset: 512)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2833, file: !140, line: 2022, baseType: !1780, size: 64, offset: 576)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2833, file: !140, line: 2023, baseType: !1780, size: 64, offset: 640)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1783, file: !140, line: 3400, baseType: !2847, size: 832)
!2847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !140, line: 2430, size: 832, elements: !2848)
!2848 = !{!2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858}
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2847, file: !140, line: 2431, baseType: !1819, size: 192)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2847, file: !140, line: 2433, baseType: !1780, size: 64, offset: 192)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2847, file: !140, line: 2434, baseType: !1780, size: 64, offset: 256)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2847, file: !140, line: 2435, baseType: !1780, size: 64, offset: 320)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2847, file: !140, line: 2436, baseType: !1780, size: 64, offset: 384)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2847, file: !140, line: 2437, baseType: !2626, size: 64, offset: 448)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2847, file: !140, line: 2438, baseType: !1780, size: 64, offset: 512)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2847, file: !140, line: 2440, baseType: !1780, size: 64, offset: 576)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2847, file: !140, line: 2441, baseType: !1780, size: 64, offset: 640)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2847, file: !140, line: 2443, baseType: !2859, size: 128, offset: 704)
!2859 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !140, line: 182, baseType: !2860)
!2860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !140, line: 182, size: 128, elements: !2861)
!2861 = !{!2862}
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2860, file: !140, line: 182, baseType: !2631, size: 128)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1783, file: !140, line: 3401, baseType: !2864, size: 320)
!2864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !140, line: 3327, size: 320, elements: !2865)
!2865 = !{!2866, !2867, !2874}
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2864, file: !140, line: 3329, baseType: !1819, size: 192)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2864, file: !140, line: 3330, baseType: !2868, size: 64, offset: 192)
!2868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2869, size: 64)
!2869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !140, line: 3320, size: 192, elements: !2870)
!2870 = !{!2871, !2872, !2873}
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2869, file: !140, line: 3322, baseType: !2868, size: 64)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2869, file: !140, line: 3323, baseType: !2868, size: 64, offset: 64)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2869, file: !140, line: 3324, baseType: !1780, size: 64, offset: 128)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2864, file: !140, line: 3331, baseType: !2868, size: 64, offset: 256)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1783, file: !140, line: 3402, baseType: !2876, size: 256)
!2876 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !140, line: 1540, size: 256, elements: !2877)
!2877 = !{!2878, !2879}
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2876, file: !140, line: 1541, baseType: !1819, size: 192)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2876, file: !140, line: 1542, baseType: !2880, size: 64, offset: 192)
!2880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2881, size: 64)
!2881 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !140, line: 1538, baseType: !2882)
!2882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !140, line: 1538, size: 192, elements: !2883)
!2883 = !{!2884}
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2882, file: !140, line: 1538, baseType: !2885, size: 192)
!2885 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !140, line: 1537, baseType: !2886)
!2886 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !140, line: 1537, size: 192, elements: !2887)
!2887 = !{!2888, !2889, !2890}
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2886, file: !140, line: 1537, baseType: !6, size: 32)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2886, file: !140, line: 1537, baseType: !6, size: 32, offset: 32)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2886, file: !140, line: 1537, baseType: !2891, size: 128, offset: 64)
!2891 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2892, size: 128, elements: !1743)
!2892 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !140, line: 1535, baseType: !2893)
!2893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !140, line: 1532, size: 128, elements: !2894)
!2894 = !{!2895, !2896}
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2893, file: !140, line: 1533, baseType: !1780, size: 64)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2893, file: !140, line: 1534, baseType: !1780, size: 64, offset: 64)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1783, file: !140, line: 3403, baseType: !2898, size: 512)
!2898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !140, line: 1938, size: 512, elements: !2899)
!2899 = !{!2900, !2901, !2902, !2903, !2909, !2910, !2911}
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2898, file: !140, line: 1939, baseType: !1819, size: 192)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2898, file: !140, line: 1940, baseType: !1902, size: 32, offset: 192)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2898, file: !140, line: 1941, baseType: !350, size: 32, offset: 224)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2898, file: !140, line: 1946, baseType: !2904, size: 32, offset: 256)
!2904 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !140, line: 1942, size: 32, elements: !2905)
!2905 = !{!2906, !2907, !2908}
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2904, file: !140, line: 1943, baseType: !368, size: 32)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2904, file: !140, line: 1944, baseType: !375, size: 32)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2904, file: !140, line: 1945, baseType: !139, size: 32)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2898, file: !140, line: 1950, baseType: !2092, size: 64, offset: 320)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2898, file: !140, line: 1951, baseType: !2092, size: 64, offset: 384)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2898, file: !140, line: 1953, baseType: !2156, size: 64, offset: 448)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1783, file: !140, line: 3404, baseType: !2913, size: 1664)
!2913 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !140, line: 3337, size: 1664, elements: !2914)
!2914 = !{!2915, !2916}
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2913, file: !140, line: 3338, baseType: !1819, size: 192)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2913, file: !140, line: 3341, baseType: !2917, size: 1472, offset: 192)
!2917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2918, line: 410, size: 1472, elements: !2919)
!2918 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2919 = !{!2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083}
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2917, file: !2918, line: 412, baseType: !1730, size: 32)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2917, file: !2918, line: 413, baseType: !1730, size: 32, offset: 32)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2917, file: !2918, line: 414, baseType: !1730, size: 32, offset: 64)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2917, file: !2918, line: 415, baseType: !1730, size: 32, offset: 96)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2917, file: !2918, line: 416, baseType: !1730, size: 32, offset: 128)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2917, file: !2918, line: 417, baseType: !1730, size: 32, offset: 160)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2917, file: !2918, line: 418, baseType: !1894, size: 8, offset: 192)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2917, file: !2918, line: 419, baseType: !1894, size: 8, offset: 200)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2917, file: !2918, line: 420, baseType: !2929, size: 8, offset: 208)
!2929 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2917, file: !2918, line: 421, baseType: !2929, size: 8, offset: 216)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2917, file: !2918, line: 422, baseType: !2929, size: 8, offset: 224)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2917, file: !2918, line: 423, baseType: !2929, size: 8, offset: 232)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2917, file: !2918, line: 424, baseType: !2929, size: 8, offset: 240)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2917, file: !2918, line: 425, baseType: !2929, size: 8, offset: 248)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2917, file: !2918, line: 426, baseType: !2929, size: 8, offset: 256)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2917, file: !2918, line: 427, baseType: !2929, size: 8, offset: 264)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2917, file: !2918, line: 428, baseType: !2929, size: 8, offset: 272)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2917, file: !2918, line: 429, baseType: !2929, size: 8, offset: 280)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2917, file: !2918, line: 430, baseType: !2929, size: 8, offset: 288)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2917, file: !2918, line: 431, baseType: !2929, size: 8, offset: 296)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2917, file: !2918, line: 432, baseType: !2929, size: 8, offset: 304)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2917, file: !2918, line: 433, baseType: !2929, size: 8, offset: 312)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2917, file: !2918, line: 434, baseType: !2929, size: 8, offset: 320)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2917, file: !2918, line: 435, baseType: !2929, size: 8, offset: 328)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2917, file: !2918, line: 436, baseType: !2929, size: 8, offset: 336)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2917, file: !2918, line: 437, baseType: !2929, size: 8, offset: 344)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2917, file: !2918, line: 438, baseType: !2929, size: 8, offset: 352)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2917, file: !2918, line: 439, baseType: !2929, size: 8, offset: 360)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2917, file: !2918, line: 440, baseType: !2929, size: 8, offset: 368)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2917, file: !2918, line: 441, baseType: !2929, size: 8, offset: 376)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2917, file: !2918, line: 442, baseType: !2929, size: 8, offset: 384)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2917, file: !2918, line: 443, baseType: !2929, size: 8, offset: 392)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2917, file: !2918, line: 444, baseType: !2929, size: 8, offset: 400)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2917, file: !2918, line: 445, baseType: !2929, size: 8, offset: 408)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2917, file: !2918, line: 446, baseType: !2929, size: 8, offset: 416)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2917, file: !2918, line: 447, baseType: !2929, size: 8, offset: 424)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2917, file: !2918, line: 448, baseType: !2929, size: 8, offset: 432)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2917, file: !2918, line: 449, baseType: !2929, size: 8, offset: 440)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2917, file: !2918, line: 450, baseType: !2929, size: 8, offset: 448)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2917, file: !2918, line: 451, baseType: !2929, size: 8, offset: 456)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2917, file: !2918, line: 452, baseType: !2929, size: 8, offset: 464)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2917, file: !2918, line: 453, baseType: !2929, size: 8, offset: 472)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2917, file: !2918, line: 454, baseType: !2929, size: 8, offset: 480)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2917, file: !2918, line: 455, baseType: !2929, size: 8, offset: 488)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2917, file: !2918, line: 456, baseType: !2929, size: 8, offset: 496)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2917, file: !2918, line: 457, baseType: !2929, size: 8, offset: 504)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2917, file: !2918, line: 458, baseType: !2929, size: 8, offset: 512)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2917, file: !2918, line: 459, baseType: !2929, size: 8, offset: 520)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2917, file: !2918, line: 460, baseType: !2929, size: 8, offset: 528)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2917, file: !2918, line: 461, baseType: !2929, size: 8, offset: 536)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2917, file: !2918, line: 462, baseType: !2929, size: 8, offset: 544)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2917, file: !2918, line: 463, baseType: !2929, size: 8, offset: 552)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2917, file: !2918, line: 464, baseType: !2929, size: 8, offset: 560)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2917, file: !2918, line: 465, baseType: !2929, size: 8, offset: 568)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2917, file: !2918, line: 466, baseType: !2929, size: 8, offset: 576)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2917, file: !2918, line: 467, baseType: !2929, size: 8, offset: 584)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2917, file: !2918, line: 468, baseType: !2929, size: 8, offset: 592)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2917, file: !2918, line: 469, baseType: !2929, size: 8, offset: 600)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2917, file: !2918, line: 470, baseType: !2929, size: 8, offset: 608)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2917, file: !2918, line: 471, baseType: !2929, size: 8, offset: 616)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2917, file: !2918, line: 472, baseType: !2929, size: 8, offset: 624)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2917, file: !2918, line: 473, baseType: !2929, size: 8, offset: 632)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2917, file: !2918, line: 474, baseType: !2929, size: 8, offset: 640)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2917, file: !2918, line: 475, baseType: !2929, size: 8, offset: 648)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2917, file: !2918, line: 476, baseType: !2929, size: 8, offset: 656)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2917, file: !2918, line: 477, baseType: !2929, size: 8, offset: 664)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2917, file: !2918, line: 478, baseType: !2929, size: 8, offset: 672)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2917, file: !2918, line: 479, baseType: !2929, size: 8, offset: 680)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2917, file: !2918, line: 480, baseType: !2929, size: 8, offset: 688)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2917, file: !2918, line: 481, baseType: !2929, size: 8, offset: 696)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2917, file: !2918, line: 482, baseType: !2929, size: 8, offset: 704)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2917, file: !2918, line: 483, baseType: !2929, size: 8, offset: 712)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2917, file: !2918, line: 484, baseType: !2929, size: 8, offset: 720)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2917, file: !2918, line: 485, baseType: !2929, size: 8, offset: 728)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2917, file: !2918, line: 486, baseType: !2929, size: 8, offset: 736)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2917, file: !2918, line: 487, baseType: !2929, size: 8, offset: 744)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2917, file: !2918, line: 488, baseType: !2929, size: 8, offset: 752)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2917, file: !2918, line: 489, baseType: !2929, size: 8, offset: 760)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2917, file: !2918, line: 490, baseType: !2929, size: 8, offset: 768)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2917, file: !2918, line: 491, baseType: !2929, size: 8, offset: 776)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2917, file: !2918, line: 492, baseType: !2929, size: 8, offset: 784)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2917, file: !2918, line: 493, baseType: !2929, size: 8, offset: 792)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2917, file: !2918, line: 494, baseType: !2929, size: 8, offset: 800)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2917, file: !2918, line: 495, baseType: !2929, size: 8, offset: 808)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2917, file: !2918, line: 496, baseType: !2929, size: 8, offset: 816)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2917, file: !2918, line: 497, baseType: !2929, size: 8, offset: 824)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2917, file: !2918, line: 498, baseType: !2929, size: 8, offset: 832)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2917, file: !2918, line: 499, baseType: !2929, size: 8, offset: 840)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2917, file: !2918, line: 500, baseType: !2929, size: 8, offset: 848)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2917, file: !2918, line: 501, baseType: !2929, size: 8, offset: 856)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2917, file: !2918, line: 502, baseType: !2929, size: 8, offset: 864)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2917, file: !2918, line: 503, baseType: !2929, size: 8, offset: 872)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2917, file: !2918, line: 504, baseType: !2929, size: 8, offset: 880)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2917, file: !2918, line: 505, baseType: !2929, size: 8, offset: 888)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2917, file: !2918, line: 506, baseType: !2929, size: 8, offset: 896)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2917, file: !2918, line: 507, baseType: !2929, size: 8, offset: 904)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2917, file: !2918, line: 508, baseType: !2929, size: 8, offset: 912)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2917, file: !2918, line: 509, baseType: !2929, size: 8, offset: 920)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2917, file: !2918, line: 510, baseType: !2929, size: 8, offset: 928)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2917, file: !2918, line: 511, baseType: !2929, size: 8, offset: 936)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2917, file: !2918, line: 512, baseType: !2929, size: 8, offset: 944)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2917, file: !2918, line: 513, baseType: !2929, size: 8, offset: 952)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2917, file: !2918, line: 514, baseType: !2929, size: 8, offset: 960)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2917, file: !2918, line: 515, baseType: !2929, size: 8, offset: 968)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2917, file: !2918, line: 516, baseType: !2929, size: 8, offset: 976)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2917, file: !2918, line: 517, baseType: !2929, size: 8, offset: 984)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2917, file: !2918, line: 518, baseType: !2929, size: 8, offset: 992)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2917, file: !2918, line: 519, baseType: !2929, size: 8, offset: 1000)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2917, file: !2918, line: 520, baseType: !2929, size: 8, offset: 1008)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2917, file: !2918, line: 521, baseType: !2929, size: 8, offset: 1016)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2917, file: !2918, line: 522, baseType: !2929, size: 8, offset: 1024)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2917, file: !2918, line: 523, baseType: !2929, size: 8, offset: 1032)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2917, file: !2918, line: 524, baseType: !2929, size: 8, offset: 1040)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2917, file: !2918, line: 525, baseType: !2929, size: 8, offset: 1048)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2917, file: !2918, line: 526, baseType: !2929, size: 8, offset: 1056)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2917, file: !2918, line: 527, baseType: !2929, size: 8, offset: 1064)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2917, file: !2918, line: 528, baseType: !2929, size: 8, offset: 1072)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2917, file: !2918, line: 529, baseType: !2929, size: 8, offset: 1080)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2917, file: !2918, line: 530, baseType: !2929, size: 8, offset: 1088)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2917, file: !2918, line: 531, baseType: !2929, size: 8, offset: 1096)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2917, file: !2918, line: 532, baseType: !2929, size: 8, offset: 1104)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2917, file: !2918, line: 533, baseType: !2929, size: 8, offset: 1112)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2917, file: !2918, line: 534, baseType: !2929, size: 8, offset: 1120)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2917, file: !2918, line: 535, baseType: !2929, size: 8, offset: 1128)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2917, file: !2918, line: 536, baseType: !2929, size: 8, offset: 1136)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2917, file: !2918, line: 537, baseType: !2929, size: 8, offset: 1144)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2917, file: !2918, line: 538, baseType: !2929, size: 8, offset: 1152)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2917, file: !2918, line: 539, baseType: !2929, size: 8, offset: 1160)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2917, file: !2918, line: 540, baseType: !2929, size: 8, offset: 1168)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2917, file: !2918, line: 541, baseType: !2929, size: 8, offset: 1176)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2917, file: !2918, line: 542, baseType: !2929, size: 8, offset: 1184)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2917, file: !2918, line: 543, baseType: !2929, size: 8, offset: 1192)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2917, file: !2918, line: 544, baseType: !2929, size: 8, offset: 1200)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2917, file: !2918, line: 545, baseType: !2929, size: 8, offset: 1208)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2917, file: !2918, line: 546, baseType: !2929, size: 8, offset: 1216)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2917, file: !2918, line: 547, baseType: !2929, size: 8, offset: 1224)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2917, file: !2918, line: 548, baseType: !2929, size: 8, offset: 1232)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2917, file: !2918, line: 549, baseType: !2929, size: 8, offset: 1240)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2917, file: !2918, line: 550, baseType: !2929, size: 8, offset: 1248)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2917, file: !2918, line: 551, baseType: !2929, size: 8, offset: 1256)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2917, file: !2918, line: 552, baseType: !2929, size: 8, offset: 1264)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2917, file: !2918, line: 553, baseType: !2929, size: 8, offset: 1272)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2917, file: !2918, line: 554, baseType: !2929, size: 8, offset: 1280)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2917, file: !2918, line: 555, baseType: !2929, size: 8, offset: 1288)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2917, file: !2918, line: 556, baseType: !2929, size: 8, offset: 1296)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2917, file: !2918, line: 557, baseType: !2929, size: 8, offset: 1304)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2917, file: !2918, line: 558, baseType: !2929, size: 8, offset: 1312)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2917, file: !2918, line: 559, baseType: !2929, size: 8, offset: 1320)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2917, file: !2918, line: 560, baseType: !2929, size: 8, offset: 1328)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2917, file: !2918, line: 561, baseType: !2929, size: 8, offset: 1336)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2917, file: !2918, line: 562, baseType: !2929, size: 8, offset: 1344)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2917, file: !2918, line: 563, baseType: !2929, size: 8, offset: 1352)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2917, file: !2918, line: 564, baseType: !2929, size: 8, offset: 1360)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2917, file: !2918, line: 565, baseType: !2929, size: 8, offset: 1368)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2917, file: !2918, line: 566, baseType: !2929, size: 8, offset: 1376)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2917, file: !2918, line: 567, baseType: !2929, size: 8, offset: 1384)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2917, file: !2918, line: 568, baseType: !2929, size: 8, offset: 1392)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2917, file: !2918, line: 569, baseType: !2929, size: 8, offset: 1400)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2917, file: !2918, line: 570, baseType: !2929, size: 8, offset: 1408)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2917, file: !2918, line: 571, baseType: !2929, size: 8, offset: 1416)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2917, file: !2918, line: 572, baseType: !2929, size: 8, offset: 1424)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2917, file: !2918, line: 573, baseType: !2929, size: 8, offset: 1432)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2917, file: !2918, line: 574, baseType: !2929, size: 8, offset: 1440)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1783, file: !140, line: 3405, baseType: !3085, size: 384)
!3085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !140, line: 3352, size: 384, elements: !3086)
!3086 = !{!3087, !3088}
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3085, file: !140, line: 3353, baseType: !1819, size: 192)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3085, file: !140, line: 3356, baseType: !3089, size: 192, offset: 192)
!3089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2918, line: 578, size: 192, elements: !3090)
!3090 = !{!3091, !3092, !3093, !3094, !3095, !3096, !3097, !3098, !3099, !3100, !3101}
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3089, file: !2918, line: 580, baseType: !1730, size: 32)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3089, file: !2918, line: 581, baseType: !1730, size: 32, offset: 32)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3089, file: !2918, line: 582, baseType: !1730, size: 32, offset: 64)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3089, file: !2918, line: 583, baseType: !1730, size: 32, offset: 96)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3089, file: !2918, line: 584, baseType: !1894, size: 8, offset: 128)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3089, file: !2918, line: 585, baseType: !1894, size: 8, offset: 136)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3089, file: !2918, line: 586, baseType: !1894, size: 8, offset: 144)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3089, file: !2918, line: 587, baseType: !1894, size: 8, offset: 152)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3089, file: !2918, line: 588, baseType: !1894, size: 8, offset: 160)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3089, file: !2918, line: 589, baseType: !1894, size: 8, offset: 168)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3089, file: !2918, line: 590, baseType: !1894, size: 8, offset: 176)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "solution", scope: !1760, file: !3, line: 258, baseType: !2649, size: 64, offset: 448)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "oldsolution", scope: !1760, file: !3, line: 261, baseType: !2649, size: 64, offset: 512)
!3104 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_shared_bitmap_info_t", file: !3, line: 4697, baseType: !3105)
!3105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3106, size: 64)
!3106 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3107)
!3107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "shared_bitmap_info", file: !3, line: 4692, size: 128, elements: !3108)
!3108 = !{!3109, !3110}
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "pt_vars", scope: !3107, file: !3, line: 4694, baseType: !2649, size: 64)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "hashcode", scope: !3107, file: !3, line: 4695, baseType: !2575, size: 32, offset: 64)
!3111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3112, size: 64)
!3112 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3113)
!3113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "heapvar_map", file: !3, line: 294, size: 256, elements: !3114)
!3114 = !{!3115, !3124}
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !3113, file: !3, line: 295, baseType: !3116, size: 192)
!3116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_map", file: !140, line: 5278, size: 192, elements: !3117)
!3117 = !{!3118, !3122, !3123}
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3116, file: !140, line: 5279, baseType: !3119, size: 64)
!3119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_map_base", file: !140, line: 5267, size: 64, elements: !3120)
!3120 = !{!3121}
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "from", scope: !3119, file: !140, line: 5268, baseType: !1780, size: 64)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !3116, file: !140, line: 5280, baseType: !6, size: 32, offset: 64)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !3116, file: !140, line: 5281, baseType: !1780, size: 64, offset: 128)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3113, file: !3, line: 296, baseType: !1729, size: 64, offset: 192)
!3125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3113, size: 64)
!3126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3125, size: 64)
!3127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3128, size: 64)
!3128 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_fieldoff_s_heap", file: !3, line: 4140, baseType: !3129)
!3129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_fieldoff_s_heap", file: !3, line: 4140, size: 256, elements: !3130)
!3130 = !{!3131}
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3129, file: !3, line: 4140, baseType: !3132, size: 256)
!3132 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_fieldoff_s_base", file: !3, line: 4139, baseType: !3133)
!3133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_fieldoff_s_base", file: !3, line: 4139, size: 256, elements: !3134)
!3134 = !{!3135, !3136, !3137}
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3133, file: !3, line: 4139, baseType: !6, size: 32)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3133, file: !3, line: 4139, baseType: !6, size: 32, offset: 32)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3133, file: !3, line: 4139, baseType: !3138, size: 192, offset: 64)
!3138 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3139, size: 192, elements: !1743)
!3139 = !DIDerivedType(tag: DW_TAG_typedef, name: "fieldoff_s", file: !3, line: 4137, baseType: !3140)
!3140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fieldoff", file: !3, line: 4123, size: 192, elements: !3141)
!3141 = !{!3142, !3143, !3144, !3145, !3146}
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3140, file: !3, line: 4126, baseType: !1714, size: 64)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3140, file: !3, line: 4129, baseType: !1729, size: 64, offset: 64)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "has_unknown_size", scope: !3140, file: !3, line: 4131, baseType: !6, size: 1, offset: 128, flags: DIFlagBitField, extraData: i64 128)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "may_have_pointers", scope: !3140, file: !3, line: 4133, baseType: !6, size: 1, offset: 129, flags: DIFlagBitField, extraData: i64 128)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "only_restrict_pointers", scope: !3140, file: !3, line: 4135, baseType: !6, size: 1, offset: 130, flags: DIFlagBitField, extraData: i64 128)
!3147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3148, size: 64)
!3148 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3139)
!3149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3150, size: 64)
!3150 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1783)
!3151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1776, size: 64)
!3152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3153, size: 64)
!3153 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2104)
!3154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3155, size: 64)
!3155 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ce_s_heap", file: !3, line: 407, baseType: !3156)
!3156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ce_s_heap", file: !3, line: 407, size: 192, elements: !3157)
!3157 = !{!3158}
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3156, file: !3, line: 407, baseType: !3159, size: 192)
!3159 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ce_s_base", file: !3, line: 406, baseType: !3160)
!3160 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ce_s_base", file: !3, line: 406, size: 192, elements: !3161)
!3161 = !{!3162, !3163, !3164}
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3160, file: !3, line: 406, baseType: !6, size: 32)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3160, file: !3, line: 406, baseType: !6, size: 32, offset: 32)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3160, file: !3, line: 406, baseType: !3165, size: 128, offset: 64)
!3165 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3166, size: 128, elements: !1743)
!3166 = !DIDerivedType(tag: DW_TAG_typedef, name: "ce_s", file: !3, line: 405, baseType: !1720)
!3167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3168, size: 64)
!3168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constraint_graph", file: !3, line: 432, size: 1024, elements: !3169)
!3169 = !{!3170, !3171, !3173, !3174, !3175, !3177, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3198, !3199}
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3168, file: !3, line: 436, baseType: !6, size: 32)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !3168, file: !3, line: 439, baseType: !3172, size: 64, offset: 64)
!3172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2649, size: 64)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "implicit_preds", scope: !3168, file: !3, line: 443, baseType: !3172, size: 64, offset: 128)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !3168, file: !3, line: 446, baseType: !3172, size: 64, offset: 192)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_cycles", scope: !3168, file: !3, line: 450, baseType: !3176, size: 64, offset: 256)
!3176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1730, size: 64)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "rep", scope: !3168, file: !3, line: 454, baseType: !3178, size: 64, offset: 320)
!3178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "eq_rep", scope: !3168, file: !3, line: 458, baseType: !3176, size: 64, offset: 384)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !3168, file: !3, line: 464, baseType: !3178, size: 64, offset: 448)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "pe_rep", scope: !3168, file: !3, line: 470, baseType: !3176, size: 64, offset: 512)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_label", scope: !3168, file: !3, line: 474, baseType: !3178, size: 64, offset: 576)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "loc_label", scope: !3168, file: !3, line: 478, baseType: !3178, size: 64, offset: 640)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "pointed_by", scope: !3168, file: !3, line: 483, baseType: !3172, size: 64, offset: 704)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "points_to", scope: !3168, file: !3, line: 487, baseType: !3172, size: 64, offset: 768)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "direct_nodes", scope: !3168, file: !3, line: 491, baseType: !3187, size: 64, offset: 832)
!3187 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !3188, line: 45, baseType: !3189)
!3188 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3190, size: 64)
!3190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !3188, line: 39, size: 192, elements: !3191)
!3191 = !{!3192, !3194, !3195, !3196}
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !3190, file: !3188, line: 41, baseType: !3193, size: 64)
!3193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1894, size: 64)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !3190, file: !3188, line: 42, baseType: !6, size: 32, offset: 64)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3190, file: !3188, line: 43, baseType: !6, size: 32, offset: 96)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3190, file: !3188, line: 44, baseType: !3197, size: 64, offset: 128)
!3197 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1729, size: 64, elements: !1743)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !3168, file: !3, line: 495, baseType: !2649, size: 64, offset: 896)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !3168, file: !3, line: 500, baseType: !3200, size: 64, offset: 960)
!3200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1731, size: 64)
!3201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3202, size: 64)
!3202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "scc_info", file: !3, line: 1294, size: 384, elements: !3203)
!3203 = !{!3204, !3205, !3206, !3207, !3208, !3209}
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3202, file: !3, line: 1296, baseType: !3187, size: 64)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "deleted", scope: !3202, file: !3, line: 1297, baseType: !3187, size: 64, offset: 64)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "dfs", scope: !3202, file: !3, line: 1298, baseType: !3178, size: 64, offset: 128)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "node_mapping", scope: !3202, file: !3, line: 1299, baseType: !3178, size: 64, offset: 192)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "current_index", scope: !3202, file: !3, line: 1300, baseType: !1730, size: 32, offset: 256)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "scc_stack", scope: !3202, file: !3, line: 1301, baseType: !3210, size: 64, offset: 320)
!3210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3211, size: 64)
!3211 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_heap", file: !3212, line: 35, baseType: !3213)
!3212 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_heap", file: !3212, line: 35, size: 96, elements: !3214)
!3214 = !{!3215}
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3213, file: !3212, line: 35, baseType: !3216, size: 96)
!3216 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_base", file: !3212, line: 34, baseType: !3217)
!3217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_base", file: !3212, line: 34, size: 96, elements: !3218)
!3218 = !{!3219, !3220, !3221}
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3217, file: !3212, line: 34, baseType: !6, size: 32)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3217, file: !3212, line: 34, baseType: !6, size: 32, offset: 32)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3217, file: !3212, line: 34, baseType: !3222, size: 32, offset: 64)
!3222 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 32, elements: !1743)
!3223 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_equiv_class_label_t", file: !3, line: 1849, baseType: !3224)
!3224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3225, size: 64)
!3225 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3226)
!3226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "equiv_class_label", file: !3, line: 1843, size: 128, elements: !3227)
!3227 = !{!3228, !3229, !3230}
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "hashcode", scope: !3226, file: !3, line: 1845, baseType: !2575, size: 32)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "equivalence_class", scope: !3226, file: !3, line: 1846, baseType: !6, size: 32, offset: 32)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "labels", scope: !3226, file: !3, line: 1847, baseType: !2649, size: 64, offset: 64)
!3231 = !DIDerivedType(tag: DW_TAG_typedef, name: "equiv_class_label_t", file: !3, line: 1848, baseType: !3232)
!3232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3226, size: 64)
!3233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3234, size: 64)
!3234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "topo_info", file: !3, line: 1464, size: 128, elements: !3235)
!3235 = !{!3236, !3237}
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3234, file: !3, line: 1467, baseType: !3187, size: 64)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "topo_order", scope: !3234, file: !3, line: 1470, baseType: !3210, size: 64, offset: 64)
!3238 = !DIDerivedType(tag: DW_TAG_typedef, name: "shared_bitmap_info_t", file: !3, line: 4696, baseType: !3239)
!3239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3107, size: 64)
!3240 = !{!3241, !3269, !3271, !3276, !3295, !3306, !0, !3308, !3310, !3312, !3315, !3327, !3329, !3331, !3333, !3335, !3358, !3360, !3362, !3364, !3366, !3368, !3370, !3372, !3374, !3376, !3378}
!3241 = !DIGlobalVariableExpression(var: !3242, expr: !DIExpression())
!3242 = distinct !DIGlobalVariable(name: "pass_build_alias", scope: !2, file: !3, line: 5625, type: !3243, isLocal: false, isDefinition: true)
!3243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !383, line: 156, size: 640, elements: !3244)
!3244 = !{!3245}
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3243, file: !383, line: 158, baseType: !3246, size: 640)
!3246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !383, line: 114, size: 640, elements: !3247)
!3247 = !{!3248, !3249, !3250, !3254, !3258, !3260, !3261, !3262, !3264, !3265, !3266, !3267, !3268}
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3246, file: !383, line: 117, baseType: !382, size: 32)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3246, file: !383, line: 121, baseType: !1776, size: 64, offset: 64)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3246, file: !383, line: 125, baseType: !3251, size: 64, offset: 128)
!3251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3252, size: 64)
!3252 = !DISubroutineType(types: !3253)
!3253 = !{!1894}
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3246, file: !383, line: 130, baseType: !3255, size: 64, offset: 192)
!3255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3256, size: 64)
!3256 = !DISubroutineType(types: !3257)
!3257 = !{!6}
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3246, file: !383, line: 133, baseType: !3259, size: 64, offset: 256)
!3259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3246, size: 64)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3246, file: !383, line: 136, baseType: !3259, size: 64, offset: 320)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3246, file: !383, line: 139, baseType: !1730, size: 32, offset: 384)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3246, file: !383, line: 143, baseType: !3263, size: 32, offset: 416)
!3263 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !390, line: 80, baseType: !389)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3246, file: !383, line: 146, baseType: !6, size: 32, offset: 448)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3246, file: !383, line: 147, baseType: !6, size: 32, offset: 480)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3246, file: !383, line: 148, baseType: !6, size: 32, offset: 512)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3246, file: !383, line: 151, baseType: !6, size: 32, offset: 544)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3246, file: !383, line: 152, baseType: !6, size: 32, offset: 576)
!3269 = !DIGlobalVariableExpression(var: !3270, expr: !DIExpression())
!3270 = distinct !DIGlobalVariable(name: "pass_build_ealias", scope: !2, file: !3, line: 5647, type: !3243, isLocal: false, isDefinition: true)
!3271 = !DIGlobalVariableExpression(var: !3272, expr: !DIExpression())
!3272 = distinct !DIGlobalVariable(name: "pass_ipa_pta", scope: !2, file: !3, line: 5771, type: !3273, isLocal: false, isDefinition: true)
!3273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_ipa_opt_pass", file: !383, line: 202, size: 640, elements: !3274)
!3274 = !{!3275}
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3273, file: !383, line: 204, baseType: !3246, size: 640)
!3276 = !DIGlobalVariableExpression(var: !3277, expr: !DIExpression())
!3277 = distinct !DIGlobalVariable(name: "gt_ggc_rc_gt_tree_ssa_structalias_h", scope: !2, file: !3278, line: 24, type: !3279, isLocal: false, isDefinition: true)
!3278 = !DIFile(filename: "./gt-tree-ssa-structalias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3279 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3280, size: 768, elements: !2020)
!3280 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3281)
!3281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_cache_tab", file: !3282, line: 85, size: 384, elements: !3283)
!3282 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3283 = !{!3284, !3286, !3287, !3288, !3290, !3291}
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3281, file: !3282, line: 86, baseType: !3285, size: 64)
!3285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2567, size: 64)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !3281, file: !3282, line: 87, baseType: !1727, size: 64, offset: 64)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !3281, file: !3282, line: 88, baseType: !1727, size: 64, offset: 128)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !3281, file: !3282, line: 89, baseType: !3289, size: 64, offset: 192)
!3289 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !3282, line: 65, baseType: !2583)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !3281, file: !3282, line: 90, baseType: !3289, size: 64, offset: 256)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "marked_p", scope: !3281, file: !3282, line: 91, baseType: !3292, size: 64, offset: 320)
!3292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3293, size: 64)
!3293 = !DISubroutineType(types: !3294)
!3294 = !{!1730, !2407}
!3295 = !DIGlobalVariableExpression(var: !3296, expr: !DIExpression())
!3296 = distinct !DIGlobalVariable(name: "gt_pch_rc_gt_tree_ssa_structalias_h", scope: !2, file: !3278, line: 36, type: !3297, isLocal: false, isDefinition: true)
!3297 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3298, size: 640, elements: !2020)
!3298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3299)
!3299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !3282, line: 69, size: 320, elements: !3300)
!3300 = !{!3301, !3302, !3303, !3304, !3305}
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3299, file: !3282, line: 70, baseType: !1745, size: 64)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !3299, file: !3282, line: 71, baseType: !1727, size: 64, offset: 64)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !3299, file: !3282, line: 72, baseType: !1727, size: 64, offset: 128)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !3299, file: !3282, line: 73, baseType: !3289, size: 64, offset: 192)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !3299, file: !3282, line: 74, baseType: !3289, size: 64, offset: 256)
!3306 = !DIGlobalVariableExpression(var: !3307, expr: !DIExpression())
!3307 = distinct !DIGlobalVariable(name: "heapvar_for_stmt", scope: !2, file: !3, line: 165, type: !2566, isLocal: true, isDefinition: true)
!3308 = !DIGlobalVariableExpression(var: !3309, expr: !DIExpression())
!3309 = distinct !DIGlobalVariable(name: "varmap", scope: !2, file: !3, line: 279, type: !1746, isLocal: true, isDefinition: true)
!3310 = !DIGlobalVariableExpression(var: !3311, expr: !DIExpression())
!3311 = distinct !DIGlobalVariable(name: "constraints", scope: !2, file: !3, line: 426, type: !1731, isLocal: true, isDefinition: true)
!3312 = !DIGlobalVariableExpression(var: !3313, expr: !DIExpression())
!3313 = distinct !DIGlobalVariable(name: "graph", scope: !2, file: !3, line: 503, type: !3314, isLocal: true, isDefinition: true)
!3314 = !DIDerivedType(tag: DW_TAG_typedef, name: "constraint_graph_t", file: !3, line: 183, baseType: !3167)
!3315 = !DIGlobalVariableExpression(var: !3316, expr: !DIExpression())
!3316 = distinct !DIGlobalVariable(name: "stats", scope: !2, file: !3, line: 206, type: !3317, isLocal: true, isDefinition: true)
!3317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constraint_stats", file: !3, line: 196, size: 256, elements: !3318)
!3318 = !{!3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326}
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "total_vars", scope: !3317, file: !3, line: 198, baseType: !6, size: 32)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "nonpointer_vars", scope: !3317, file: !3, line: 199, baseType: !6, size: 32, offset: 32)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "unified_vars_static", scope: !3317, file: !3, line: 200, baseType: !6, size: 32, offset: 64)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "unified_vars_dynamic", scope: !3317, file: !3, line: 201, baseType: !6, size: 32, offset: 96)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "iterations", scope: !3317, file: !3, line: 202, baseType: !6, size: 32, offset: 128)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "num_edges", scope: !3317, file: !3, line: 203, baseType: !6, size: 32, offset: 160)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "num_implicit_edges", scope: !3317, file: !3, line: 204, baseType: !6, size: 32, offset: 192)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "points_to_sets_created", scope: !3317, file: !3, line: 205, baseType: !6, size: 32, offset: 224)
!3327 = !DIGlobalVariableExpression(var: !3328, expr: !DIExpression())
!3328 = distinct !DIGlobalVariable(name: "use_field_sensitive", scope: !2, file: !3, line: 167, type: !1894, isLocal: true, isDefinition: true)
!3329 = !DIGlobalVariableExpression(var: !3330, expr: !DIExpression())
!3330 = distinct !DIGlobalVariable(name: "pta_obstack", scope: !2, file: !3, line: 174, type: !2026, isLocal: true, isDefinition: true)
!3331 = !DIGlobalVariableExpression(var: !3332, expr: !DIExpression())
!3332 = distinct !DIGlobalVariable(name: "oldpta_obstack", scope: !2, file: !3, line: 177, type: !2026, isLocal: true, isDefinition: true)
!3333 = !DIGlobalVariableExpression(var: !3334, expr: !DIExpression())
!3334 = distinct !DIGlobalVariable(name: "predbitmap_obstack", scope: !2, file: !3, line: 171, type: !2026, isLocal: true, isDefinition: true)
!3335 = !DIGlobalVariableExpression(var: !3336, expr: !DIExpression())
!3336 = distinct !DIGlobalVariable(name: "constraint_pool", scope: !2, file: !3, line: 427, type: !3337, isLocal: true, isDefinition: true)
!3337 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !3338, line: 58, baseType: !3339)
!3338 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3340, size: 64)
!3340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !3338, line: 32, size: 704, elements: !3341)
!3341 = !{!3342, !3343, !3344, !3350, !3351, !3352, !3353, !3354, !3355, !3356, !3357}
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3340, file: !3338, line: 34, baseType: !1776, size: 64)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !3340, file: !3338, line: 38, baseType: !1727, size: 64, offset: 64)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !3340, file: !3338, line: 41, baseType: !3345, size: 64, offset: 128)
!3345 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !3338, line: 30, baseType: !3346)
!3346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3347, size: 64)
!3347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !3338, line: 26, size: 64, elements: !3348)
!3348 = !{!3349}
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3347, file: !3338, line: 28, baseType: !3346, size: 64)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !3340, file: !3338, line: 45, baseType: !2041, size: 64, offset: 192)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !3340, file: !3338, line: 49, baseType: !1727, size: 64, offset: 256)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !3340, file: !3338, line: 51, baseType: !1727, size: 64, offset: 320)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !3340, file: !3338, line: 52, baseType: !1727, size: 64, offset: 384)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !3340, file: !3338, line: 53, baseType: !1727, size: 64, offset: 448)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !3340, file: !3338, line: 54, baseType: !3345, size: 64, offset: 512)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !3340, file: !3338, line: 55, baseType: !1727, size: 64, offset: 576)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !3340, file: !3338, line: 56, baseType: !1727, size: 64, offset: 640)
!3358 = !DIGlobalVariableExpression(var: !3359, expr: !DIExpression())
!3359 = distinct !DIGlobalVariable(name: "variable_info_pool", scope: !2, file: !3, line: 271, type: !3337, isLocal: true, isDefinition: true)
!3360 = !DIGlobalVariableExpression(var: !3361, expr: !DIExpression())
!3361 = distinct !DIGlobalVariable(name: "vi_for_tree", scope: !2, file: !3, line: 2594, type: !2652, isLocal: true, isDefinition: true)
!3362 = !DIGlobalVariableExpression(var: !3363, expr: !DIExpression())
!3363 = distinct !DIGlobalVariable(name: "shared_bitmap_table", scope: !2, file: !3, line: 4699, type: !2566, isLocal: true, isDefinition: true)
!3364 = !DIGlobalVariableExpression(var: !3365, expr: !DIExpression())
!3365 = distinct !DIGlobalVariable(name: "in_ipa_mode", scope: !2, file: !3, line: 168, type: !1730, isLocal: true, isDefinition: true)
!3366 = !DIGlobalVariableExpression(var: !3367, expr: !DIExpression())
!3367 = distinct !DIGlobalVariable(name: "iteration_obstack", scope: !2, file: !3, line: 180, type: !2026, isLocal: true, isDefinition: true)
!3368 = !DIGlobalVariableExpression(var: !3369, expr: !DIExpression())
!3369 = distinct !DIGlobalVariable(name: "pointer_equiv_class_table", scope: !2, file: !3, line: 1853, type: !2566, isLocal: true, isDefinition: true)
!3370 = !DIGlobalVariableExpression(var: !3371, expr: !DIExpression())
!3371 = distinct !DIGlobalVariable(name: "location_equiv_class_table", scope: !2, file: !3, line: 1857, type: !2566, isLocal: true, isDefinition: true)
!3372 = !DIGlobalVariableExpression(var: !3373, expr: !DIExpression())
!3373 = distinct !DIGlobalVariable(name: "pointer_equiv_class", scope: !2, file: !3, line: 1964, type: !1730, isLocal: true, isDefinition: true)
!3374 = !DIGlobalVariableExpression(var: !3375, expr: !DIExpression())
!3375 = distinct !DIGlobalVariable(name: "location_equiv_class", scope: !2, file: !3, line: 1967, type: !1730, isLocal: true, isDefinition: true)
!3376 = !DIGlobalVariableExpression(var: !3377, expr: !DIExpression())
!3377 = distinct !DIGlobalVariable(name: "changed", scope: !2, file: !3, line: 1290, type: !3187, isLocal: true, isDefinition: true)
!3378 = !DIGlobalVariableExpression(var: !3379, expr: !DIExpression())
!3379 = distinct !DIGlobalVariable(name: "changed_count", scope: !2, file: !3, line: 1289, type: !6, isLocal: true, isDefinition: true)
!3380 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 4889, size: 256, elements: !3381)
!3381 = !{!3382, !3383, !3384, !3385}
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "pt_solution_includes_may_alias", scope: !3380, file: !3, line: 4890, baseType: !1729, size: 64)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "pt_solution_includes_no_alias", scope: !3380, file: !3, line: 4891, baseType: !1729, size: 64, offset: 64)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "pt_solutions_intersect_may_alias", scope: !3380, file: !3, line: 4892, baseType: !1729, size: 64, offset: 128)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "pt_solutions_intersect_no_alias", scope: !3380, file: !3, line: 4893, baseType: !1729, size: 64, offset: 192)
!3386 = !{i32 7, !"Dwarf Version", i32 4}
!3387 = !{i32 2, !"Debug Info Version", i32 3}
!3388 = !{i32 1, !"wchar_size", i32 4}
!3389 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3390 = distinct !DISubprogram(name: "debug_constraint", scope: !3, file: !3, line: 592, type: !3391, scopeLine: 593, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3391 = !DISubroutineType(types: !3392)
!3392 = !{null, !1715}
!3393 = !{}
!3394 = !DILocalVariable(name: "c", arg: 1, scope: !3390, file: !3, line: 592, type: !1715)
!3395 = !DILocation(line: 592, column: 32, scope: !3390)
!3396 = !DILocation(line: 594, column: 20, scope: !3390)
!3397 = !DILocation(line: 594, column: 28, scope: !3390)
!3398 = !DILocation(line: 594, column: 3, scope: !3390)
!3399 = !DILocation(line: 595, column: 1, scope: !3390)
!3400 = distinct !DISubprogram(name: "dump_constraint", scope: !3, file: !3, line: 558, type: !3401, scopeLine: 559, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3401 = !DISubroutineType(types: !3402)
!3402 = !{null, !3403, !1715}
!3403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3404, size: 64)
!3404 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3405, line: 7, baseType: !3406)
!3405 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3407, line: 49, size: 1728, elements: !3408)
!3407 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3408 = !{!3409, !3410, !3411, !3412, !3413, !3414, !3415, !3416, !3417, !3418, !3419, !3420, !3421, !3424, !3426, !3427, !3428, !3431, !3433, !3434, !3435, !3438, !3440, !3443, !3446, !3447, !3448, !3449, !3450}
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3406, file: !3407, line: 51, baseType: !1730, size: 32)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3406, file: !3407, line: 54, baseType: !2041, size: 64, offset: 64)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3406, file: !3407, line: 55, baseType: !2041, size: 64, offset: 128)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3406, file: !3407, line: 56, baseType: !2041, size: 64, offset: 192)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3406, file: !3407, line: 57, baseType: !2041, size: 64, offset: 256)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3406, file: !3407, line: 58, baseType: !2041, size: 64, offset: 320)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3406, file: !3407, line: 59, baseType: !2041, size: 64, offset: 384)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3406, file: !3407, line: 60, baseType: !2041, size: 64, offset: 448)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3406, file: !3407, line: 61, baseType: !2041, size: 64, offset: 512)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3406, file: !3407, line: 64, baseType: !2041, size: 64, offset: 576)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3406, file: !3407, line: 65, baseType: !2041, size: 64, offset: 640)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3406, file: !3407, line: 66, baseType: !2041, size: 64, offset: 704)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3406, file: !3407, line: 68, baseType: !3422, size: 64, offset: 768)
!3422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3423, size: 64)
!3423 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3407, line: 36, flags: DIFlagFwdDecl)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3406, file: !3407, line: 70, baseType: !3425, size: 64, offset: 832)
!3425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3406, size: 64)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3406, file: !3407, line: 72, baseType: !1730, size: 32, offset: 896)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3406, file: !3407, line: 73, baseType: !1730, size: 32, offset: 928)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3406, file: !3407, line: 74, baseType: !3429, size: 64, offset: 960)
!3429 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3430, line: 152, baseType: !1714)
!3430 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3406, file: !3407, line: 77, baseType: !3432, size: 16, offset: 1024)
!3432 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3406, file: !3407, line: 78, baseType: !2929, size: 8, offset: 1040)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3406, file: !3407, line: 79, baseType: !1876, size: 8, offset: 1048)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3406, file: !3407, line: 81, baseType: !3436, size: 64, offset: 1088)
!3436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3437, size: 64)
!3437 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3407, line: 43, baseType: null)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3406, file: !3407, line: 89, baseType: !3439, size: 64, offset: 1152)
!3439 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3430, line: 153, baseType: !1714)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3406, file: !3407, line: 91, baseType: !3441, size: 64, offset: 1216)
!3441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3442, size: 64)
!3442 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3407, line: 37, flags: DIFlagFwdDecl)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3406, file: !3407, line: 92, baseType: !3444, size: 64, offset: 1280)
!3444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3445, size: 64)
!3445 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3407, line: 38, flags: DIFlagFwdDecl)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3406, file: !3407, line: 93, baseType: !3425, size: 64, offset: 1344)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3406, file: !3407, line: 94, baseType: !1745, size: 64, offset: 1408)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3406, file: !3407, line: 95, baseType: !1727, size: 64, offset: 1472)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3406, file: !3407, line: 96, baseType: !1730, size: 32, offset: 1536)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3406, file: !3407, line: 98, baseType: !3451, size: 160, offset: 1568)
!3451 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1778, size: 160, elements: !3452)
!3452 = !{!3453}
!3453 = !DISubrange(count: 20)
!3454 = !DILocalVariable(name: "file", arg: 1, scope: !3400, file: !3, line: 558, type: !3403)
!3455 = !DILocation(line: 558, column: 24, scope: !3400)
!3456 = !DILocalVariable(name: "c", arg: 2, scope: !3400, file: !3, line: 558, type: !1715)
!3457 = !DILocation(line: 558, column: 43, scope: !3400)
!3458 = !DILocation(line: 560, column: 7, scope: !3459)
!3459 = distinct !DILexicalBlock(scope: !3400, file: !3, line: 560, column: 7)
!3460 = !DILocation(line: 560, column: 10, scope: !3459)
!3461 = !DILocation(line: 560, column: 14, scope: !3459)
!3462 = !DILocation(line: 560, column: 19, scope: !3459)
!3463 = !DILocation(line: 560, column: 7, scope: !3400)
!3464 = !DILocation(line: 561, column: 14, scope: !3459)
!3465 = !DILocation(line: 561, column: 5, scope: !3459)
!3466 = !DILocation(line: 562, column: 12, scope: !3467)
!3467 = distinct !DILexicalBlock(scope: !3459, file: !3, line: 562, column: 12)
!3468 = !DILocation(line: 562, column: 15, scope: !3467)
!3469 = !DILocation(line: 562, column: 19, scope: !3467)
!3470 = !DILocation(line: 562, column: 24, scope: !3467)
!3471 = !DILocation(line: 562, column: 12, scope: !3459)
!3472 = !DILocation(line: 563, column: 14, scope: !3467)
!3473 = !DILocation(line: 563, column: 5, scope: !3467)
!3474 = !DILocation(line: 564, column: 12, scope: !3400)
!3475 = !DILocation(line: 564, column: 37, scope: !3400)
!3476 = !DILocation(line: 564, column: 40, scope: !3400)
!3477 = !DILocation(line: 564, column: 44, scope: !3400)
!3478 = !DILocation(line: 564, column: 24, scope: !3400)
!3479 = !DILocation(line: 564, column: 50, scope: !3400)
!3480 = !DILocation(line: 564, column: 3, scope: !3400)
!3481 = !DILocation(line: 565, column: 7, scope: !3482)
!3482 = distinct !DILexicalBlock(scope: !3400, file: !3, line: 565, column: 7)
!3483 = !DILocation(line: 565, column: 10, scope: !3482)
!3484 = !DILocation(line: 565, column: 14, scope: !3482)
!3485 = !DILocation(line: 565, column: 21, scope: !3482)
!3486 = !DILocation(line: 565, column: 7, scope: !3400)
!3487 = !DILocation(line: 566, column: 14, scope: !3482)
!3488 = !DILocation(line: 566, column: 5, scope: !3482)
!3489 = !DILocation(line: 567, column: 12, scope: !3490)
!3490 = distinct !DILexicalBlock(scope: !3482, file: !3, line: 567, column: 12)
!3491 = !DILocation(line: 567, column: 15, scope: !3490)
!3492 = !DILocation(line: 567, column: 19, scope: !3490)
!3493 = !DILocation(line: 567, column: 26, scope: !3490)
!3494 = !DILocation(line: 567, column: 12, scope: !3482)
!3495 = !DILocation(line: 568, column: 14, scope: !3490)
!3496 = !DILocation(line: 568, column: 51, scope: !3490)
!3497 = !DILocation(line: 568, column: 54, scope: !3490)
!3498 = !DILocation(line: 568, column: 58, scope: !3490)
!3499 = !DILocation(line: 568, column: 5, scope: !3490)
!3500 = !DILocation(line: 569, column: 12, scope: !3400)
!3501 = !DILocation(line: 569, column: 3, scope: !3400)
!3502 = !DILocation(line: 570, column: 7, scope: !3503)
!3503 = distinct !DILexicalBlock(scope: !3400, file: !3, line: 570, column: 7)
!3504 = !DILocation(line: 570, column: 10, scope: !3503)
!3505 = !DILocation(line: 570, column: 14, scope: !3503)
!3506 = !DILocation(line: 570, column: 19, scope: !3503)
!3507 = !DILocation(line: 570, column: 7, scope: !3400)
!3508 = !DILocation(line: 571, column: 14, scope: !3503)
!3509 = !DILocation(line: 571, column: 5, scope: !3503)
!3510 = !DILocation(line: 572, column: 12, scope: !3511)
!3511 = distinct !DILexicalBlock(scope: !3503, file: !3, line: 572, column: 12)
!3512 = !DILocation(line: 572, column: 15, scope: !3511)
!3513 = !DILocation(line: 572, column: 19, scope: !3511)
!3514 = !DILocation(line: 572, column: 24, scope: !3511)
!3515 = !DILocation(line: 572, column: 12, scope: !3503)
!3516 = !DILocation(line: 573, column: 14, scope: !3511)
!3517 = !DILocation(line: 573, column: 5, scope: !3511)
!3518 = !DILocation(line: 574, column: 12, scope: !3400)
!3519 = !DILocation(line: 574, column: 37, scope: !3400)
!3520 = !DILocation(line: 574, column: 40, scope: !3400)
!3521 = !DILocation(line: 574, column: 44, scope: !3400)
!3522 = !DILocation(line: 574, column: 24, scope: !3400)
!3523 = !DILocation(line: 574, column: 50, scope: !3400)
!3524 = !DILocation(line: 574, column: 3, scope: !3400)
!3525 = !DILocation(line: 575, column: 7, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3400, file: !3, line: 575, column: 7)
!3527 = !DILocation(line: 575, column: 10, scope: !3526)
!3528 = !DILocation(line: 575, column: 14, scope: !3526)
!3529 = !DILocation(line: 575, column: 21, scope: !3526)
!3530 = !DILocation(line: 575, column: 7, scope: !3400)
!3531 = !DILocation(line: 576, column: 14, scope: !3526)
!3532 = !DILocation(line: 576, column: 5, scope: !3526)
!3533 = !DILocation(line: 577, column: 12, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !3526, file: !3, line: 577, column: 12)
!3535 = !DILocation(line: 577, column: 15, scope: !3534)
!3536 = !DILocation(line: 577, column: 19, scope: !3534)
!3537 = !DILocation(line: 577, column: 26, scope: !3534)
!3538 = !DILocation(line: 577, column: 12, scope: !3526)
!3539 = !DILocation(line: 578, column: 14, scope: !3534)
!3540 = !DILocation(line: 578, column: 51, scope: !3534)
!3541 = !DILocation(line: 578, column: 54, scope: !3534)
!3542 = !DILocation(line: 578, column: 58, scope: !3534)
!3543 = !DILocation(line: 578, column: 5, scope: !3534)
!3544 = !DILocation(line: 579, column: 12, scope: !3400)
!3545 = !DILocation(line: 579, column: 3, scope: !3400)
!3546 = !DILocation(line: 580, column: 1, scope: !3400)
!3547 = distinct !DISubprogram(name: "debug_constraints", scope: !3, file: !3, line: 611, type: !3548, scopeLine: 612, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3548 = !DISubroutineType(types: !3549)
!3549 = !{null}
!3550 = !DILocation(line: 613, column: 21, scope: !3547)
!3551 = !DILocation(line: 613, column: 3, scope: !3547)
!3552 = !DILocation(line: 614, column: 1, scope: !3547)
!3553 = distinct !DISubprogram(name: "dump_constraints", scope: !3, file: !3, line: 600, type: !3554, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3554 = !DISubroutineType(types: !3555)
!3555 = !{null, !3403}
!3556 = !DILocalVariable(name: "file", arg: 1, scope: !3553, file: !3, line: 600, type: !3403)
!3557 = !DILocation(line: 600, column: 25, scope: !3553)
!3558 = !DILocalVariable(name: "i", scope: !3553, file: !3, line: 602, type: !1730)
!3559 = !DILocation(line: 602, column: 7, scope: !3553)
!3560 = !DILocalVariable(name: "c", scope: !3553, file: !3, line: 603, type: !1715)
!3561 = !DILocation(line: 603, column: 16, scope: !3553)
!3562 = !DILocation(line: 604, column: 10, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !3553, file: !3, line: 604, column: 3)
!3564 = !DILocation(line: 604, column: 8, scope: !3563)
!3565 = !DILocation(line: 604, column: 15, scope: !3566)
!3566 = distinct !DILexicalBlock(scope: !3563, file: !3, line: 604, column: 3)
!3567 = !DILocation(line: 604, column: 3, scope: !3563)
!3568 = !DILocation(line: 605, column: 22, scope: !3566)
!3569 = !DILocation(line: 605, column: 28, scope: !3566)
!3570 = !DILocation(line: 605, column: 5, scope: !3566)
!3571 = !DILocation(line: 604, column: 63, scope: !3566)
!3572 = !DILocation(line: 604, column: 3, scope: !3566)
!3573 = distinct !{!3573, !3567, !3574}
!3574 = !DILocation(line: 605, column: 29, scope: !3563)
!3575 = !DILocation(line: 606, column: 1, scope: !3553)
!3576 = distinct !DISubprogram(name: "debug_constraint_graph", scope: !3, file: !3, line: 701, type: !3548, scopeLine: 702, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3577 = !DILocation(line: 703, column: 26, scope: !3576)
!3578 = !DILocation(line: 703, column: 3, scope: !3576)
!3579 = !DILocation(line: 704, column: 1, scope: !3576)
!3580 = distinct !DISubprogram(name: "dump_constraint_graph", scope: !3, file: !3, line: 652, type: !3554, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3581 = !DILocalVariable(name: "file", arg: 1, scope: !3580, file: !3, line: 652, type: !3403)
!3582 = !DILocation(line: 652, column: 30, scope: !3580)
!3583 = !DILocalVariable(name: "i", scope: !3580, file: !3, line: 654, type: !6)
!3584 = !DILocation(line: 654, column: 16, scope: !3580)
!3585 = !DILocalVariable(name: "size", scope: !3580, file: !3, line: 654, type: !6)
!3586 = !DILocation(line: 654, column: 21, scope: !3580)
!3587 = !DILocalVariable(name: "c", scope: !3580, file: !3, line: 655, type: !1715)
!3588 = !DILocation(line: 655, column: 16, scope: !3580)
!3589 = !DILocation(line: 658, column: 8, scope: !3590)
!3590 = distinct !DILexicalBlock(scope: !3580, file: !3, line: 658, column: 7)
!3591 = !DILocation(line: 658, column: 7, scope: !3580)
!3592 = !DILocation(line: 659, column: 5, scope: !3590)
!3593 = !DILocation(line: 663, column: 12, scope: !3580)
!3594 = !DILocation(line: 663, column: 3, scope: !3580)
!3595 = !DILocation(line: 664, column: 21, scope: !3580)
!3596 = !DILocation(line: 664, column: 3, scope: !3580)
!3597 = !DILocation(line: 665, column: 12, scope: !3580)
!3598 = !DILocation(line: 665, column: 3, scope: !3580)
!3599 = !DILocation(line: 668, column: 12, scope: !3580)
!3600 = !DILocation(line: 668, column: 3, scope: !3580)
!3601 = !DILocation(line: 669, column: 12, scope: !3580)
!3602 = !DILocation(line: 669, column: 3, scope: !3580)
!3603 = !DILocation(line: 670, column: 12, scope: !3580)
!3604 = !DILocation(line: 670, column: 3, scope: !3580)
!3605 = !DILocation(line: 671, column: 12, scope: !3580)
!3606 = !DILocation(line: 671, column: 3, scope: !3580)
!3607 = !DILocation(line: 672, column: 12, scope: !3580)
!3608 = !DILocation(line: 672, column: 3, scope: !3580)
!3609 = !DILocation(line: 679, column: 10, scope: !3580)
!3610 = !DILocation(line: 679, column: 8, scope: !3580)
!3611 = !DILocation(line: 680, column: 10, scope: !3580)
!3612 = !DILocation(line: 680, column: 17, scope: !3580)
!3613 = !DILocation(line: 680, column: 24, scope: !3580)
!3614 = !DILocation(line: 680, column: 15, scope: !3580)
!3615 = !DILocation(line: 680, column: 31, scope: !3580)
!3616 = !DILocation(line: 680, column: 38, scope: !3580)
!3617 = !DILocation(line: 680, column: 45, scope: !3580)
!3618 = !DILocation(line: 680, column: 8, scope: !3580)
!3619 = !DILocation(line: 681, column: 10, scope: !3620)
!3620 = distinct !DILexicalBlock(scope: !3580, file: !3, line: 681, column: 3)
!3621 = !DILocation(line: 681, column: 8, scope: !3620)
!3622 = !DILocation(line: 681, column: 15, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3620, file: !3, line: 681, column: 3)
!3624 = !DILocation(line: 681, column: 19, scope: !3623)
!3625 = !DILocation(line: 681, column: 17, scope: !3623)
!3626 = !DILocation(line: 681, column: 3, scope: !3620)
!3627 = !DILocalVariable(name: "name", scope: !3628, file: !3, line: 683, type: !1776)
!3628 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 682, column: 5)
!3629 = !DILocation(line: 683, column: 19, scope: !3628)
!3630 = !DILocation(line: 683, column: 39, scope: !3628)
!3631 = !DILocation(line: 683, column: 46, scope: !3628)
!3632 = !DILocation(line: 683, column: 50, scope: !3628)
!3633 = !DILocation(line: 683, column: 26, scope: !3628)
!3634 = !DILocation(line: 683, column: 55, scope: !3628)
!3635 = !DILocation(line: 684, column: 16, scope: !3628)
!3636 = !DILocation(line: 684, column: 38, scope: !3628)
!3637 = !DILocation(line: 684, column: 7, scope: !3628)
!3638 = !DILocation(line: 685, column: 5, scope: !3628)
!3639 = !DILocation(line: 681, column: 26, scope: !3623)
!3640 = !DILocation(line: 681, column: 3, scope: !3623)
!3641 = distinct !{!3641, !3626, !3642}
!3642 = !DILocation(line: 685, column: 5, scope: !3620)
!3643 = !DILocation(line: 689, column: 12, scope: !3580)
!3644 = !DILocation(line: 689, column: 3, scope: !3580)
!3645 = !DILocation(line: 690, column: 10, scope: !3646)
!3646 = distinct !DILexicalBlock(scope: !3580, file: !3, line: 690, column: 3)
!3647 = !DILocation(line: 690, column: 8, scope: !3646)
!3648 = !DILocation(line: 690, column: 15, scope: !3649)
!3649 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 690, column: 3)
!3650 = !DILocation(line: 690, column: 3, scope: !3646)
!3651 = !DILocation(line: 691, column: 9, scope: !3652)
!3652 = distinct !DILexicalBlock(scope: !3649, file: !3, line: 691, column: 9)
!3653 = !DILocation(line: 691, column: 9, scope: !3649)
!3654 = !DILocation(line: 692, column: 29, scope: !3652)
!3655 = !DILocation(line: 692, column: 35, scope: !3652)
!3656 = !DILocation(line: 692, column: 7, scope: !3652)
!3657 = !DILocation(line: 690, column: 63, scope: !3649)
!3658 = !DILocation(line: 690, column: 3, scope: !3649)
!3659 = distinct !{!3659, !3650, !3660}
!3660 = !DILocation(line: 692, column: 36, scope: !3646)
!3661 = !DILocation(line: 695, column: 12, scope: !3580)
!3662 = !DILocation(line: 695, column: 3, scope: !3580)
!3663 = !DILocation(line: 696, column: 1, scope: !3580)
!3664 = distinct !DISubprogram(name: "debug_solution_for_var", scope: !3, file: !3, line: 4607, type: !3665, scopeLine: 4608, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3665 = !DISubroutineType(types: !3666)
!3666 = !{null, !6}
!3667 = !DILocalVariable(name: "var", arg: 1, scope: !3664, file: !3, line: 4607, type: !6)
!3668 = !DILocation(line: 4607, column: 38, scope: !3664)
!3669 = !DILocation(line: 4609, column: 26, scope: !3664)
!3670 = !DILocation(line: 4609, column: 34, scope: !3664)
!3671 = !DILocation(line: 4609, column: 3, scope: !3664)
!3672 = !DILocation(line: 4610, column: 1, scope: !3664)
!3673 = distinct !DISubprogram(name: "dump_solution_for_var", scope: !3, file: !3, line: 4582, type: !3674, scopeLine: 4583, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3674 = !DISubroutineType(types: !3675)
!3675 = !{null, !3403, !6}
!3676 = !DILocalVariable(name: "file", arg: 1, scope: !3673, file: !3, line: 4582, type: !3403)
!3677 = !DILocation(line: 4582, column: 30, scope: !3673)
!3678 = !DILocalVariable(name: "var", arg: 2, scope: !3673, file: !3, line: 4582, type: !6)
!3679 = !DILocation(line: 4582, column: 49, scope: !3673)
!3680 = !DILocalVariable(name: "vi", scope: !3673, file: !3, line: 4584, type: !1758)
!3681 = !DILocation(line: 4584, column: 13, scope: !3673)
!3682 = !DILocation(line: 4584, column: 31, scope: !3673)
!3683 = !DILocation(line: 4584, column: 18, scope: !3673)
!3684 = !DILocalVariable(name: "i", scope: !3673, file: !3, line: 4585, type: !6)
!3685 = !DILocation(line: 4585, column: 16, scope: !3673)
!3686 = !DILocalVariable(name: "bi", scope: !3673, file: !3, line: 4586, type: !3687)
!3687 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !2006, line: 218, baseType: !3688)
!3688 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2006, line: 203, size: 256, elements: !3689)
!3689 = !{!3690, !3691, !3692, !3693}
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !3688, file: !2006, line: 206, baseType: !2009, size: 64)
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !3688, file: !2006, line: 209, baseType: !2009, size: 64, offset: 64)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !3688, file: !2006, line: 212, baseType: !6, size: 32, offset: 128)
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !3688, file: !2006, line: 217, baseType: !2019, size: 64, offset: 192)
!3694 = !DILocation(line: 4586, column: 19, scope: !3673)
!3695 = !DILocation(line: 4588, column: 13, scope: !3696)
!3696 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 4588, column: 7)
!3697 = !DILocation(line: 4588, column: 7, scope: !3696)
!3698 = !DILocation(line: 4588, column: 21, scope: !3696)
!3699 = !DILocation(line: 4588, column: 18, scope: !3696)
!3700 = !DILocation(line: 4588, column: 7, scope: !3673)
!3701 = !DILocalVariable(name: "vipt", scope: !3702, file: !3, line: 4590, type: !1758)
!3702 = distinct !DILexicalBlock(scope: !3696, file: !3, line: 4589, column: 5)
!3703 = !DILocation(line: 4590, column: 17, scope: !3702)
!3704 = !DILocation(line: 4590, column: 43, scope: !3702)
!3705 = !DILocation(line: 4590, column: 37, scope: !3702)
!3706 = !DILocation(line: 4590, column: 24, scope: !3702)
!3707 = !DILocation(line: 4591, column: 16, scope: !3702)
!3708 = !DILocation(line: 4591, column: 43, scope: !3702)
!3709 = !DILocation(line: 4591, column: 47, scope: !3702)
!3710 = !DILocation(line: 4591, column: 53, scope: !3702)
!3711 = !DILocation(line: 4591, column: 59, scope: !3702)
!3712 = !DILocation(line: 4591, column: 7, scope: !3702)
!3713 = !DILocation(line: 4592, column: 5, scope: !3702)
!3714 = !DILocation(line: 4595, column: 16, scope: !3715)
!3715 = distinct !DILexicalBlock(scope: !3696, file: !3, line: 4594, column: 5)
!3716 = !DILocation(line: 4595, column: 33, scope: !3715)
!3717 = !DILocation(line: 4595, column: 37, scope: !3715)
!3718 = !DILocation(line: 4595, column: 7, scope: !3715)
!3719 = !DILocation(line: 4596, column: 7, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3715, file: !3, line: 4596, column: 7)
!3721 = !DILocation(line: 4596, column: 7, scope: !3722)
!3722 = distinct !DILexicalBlock(scope: !3720, file: !3, line: 4596, column: 7)
!3723 = !DILocation(line: 4598, column: 13, scope: !3724)
!3724 = distinct !DILexicalBlock(scope: !3722, file: !3, line: 4597, column: 2)
!3725 = !DILocation(line: 4598, column: 39, scope: !3724)
!3726 = !DILocation(line: 4598, column: 26, scope: !3724)
!3727 = !DILocation(line: 4598, column: 43, scope: !3724)
!3728 = !DILocation(line: 4598, column: 4, scope: !3724)
!3729 = !DILocation(line: 4599, column: 2, scope: !3724)
!3730 = distinct !{!3730, !3719, !3731}
!3731 = !DILocation(line: 4599, column: 2, scope: !3720)
!3732 = !DILocation(line: 4600, column: 16, scope: !3715)
!3733 = !DILocation(line: 4600, column: 7, scope: !3715)
!3734 = !DILocation(line: 4602, column: 1, scope: !3673)
!3735 = distinct !DISubprogram(name: "dump_pta_stats", scope: !3, file: !3, line: 4897, type: !3554, scopeLine: 4898, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3736 = !DILocalVariable(name: "s", arg: 1, scope: !3735, file: !3, line: 4897, type: !3403)
!3737 = !DILocation(line: 4897, column: 23, scope: !3735)
!3738 = !DILocation(line: 4899, column: 12, scope: !3735)
!3739 = !DILocation(line: 4899, column: 3, scope: !3735)
!3740 = !DILocation(line: 4900, column: 12, scope: !3735)
!3741 = !DILocation(line: 4903, column: 15, scope: !3735)
!3742 = !DILocation(line: 4904, column: 15, scope: !3735)
!3743 = !DILocation(line: 4905, column: 17, scope: !3735)
!3744 = !DILocation(line: 4905, column: 5, scope: !3735)
!3745 = !DILocation(line: 4900, column: 3, scope: !3735)
!3746 = !DILocation(line: 4906, column: 12, scope: !3735)
!3747 = !DILocation(line: 4909, column: 15, scope: !3735)
!3748 = !DILocation(line: 4910, column: 15, scope: !3735)
!3749 = !DILocation(line: 4911, column: 17, scope: !3735)
!3750 = !DILocation(line: 4911, column: 5, scope: !3735)
!3751 = !DILocation(line: 4906, column: 3, scope: !3735)
!3752 = !DILocation(line: 4912, column: 1, scope: !3735)
!3753 = distinct !DISubprogram(name: "pt_solution_reset", scope: !3, file: !3, line: 4919, type: !3754, scopeLine: 4920, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3754 = !DISubroutineType(types: !3755)
!3755 = !{null, !3756}
!3756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2639, size: 64)
!3757 = !DILocalVariable(name: "pt", arg: 1, scope: !3753, file: !3, line: 4919, type: !3756)
!3758 = !DILocation(line: 4919, column: 40, scope: !3753)
!3759 = !DILocation(line: 4921, column: 11, scope: !3753)
!3760 = !DILocation(line: 4921, column: 3, scope: !3753)
!3761 = !DILocation(line: 4922, column: 3, scope: !3753)
!3762 = !DILocation(line: 4922, column: 7, scope: !3753)
!3763 = !DILocation(line: 4922, column: 16, scope: !3753)
!3764 = !DILocation(line: 4923, column: 1, scope: !3753)
!3765 = distinct !DISubprogram(name: "pt_solution_set", scope: !3, file: !3, line: 4929, type: !3766, scopeLine: 4930, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3766 = !DISubroutineType(types: !3767)
!3767 = !{null, !3756, !2649}
!3768 = !DILocalVariable(name: "pt", arg: 1, scope: !3765, file: !3, line: 4929, type: !3756)
!3769 = !DILocation(line: 4929, column: 38, scope: !3765)
!3770 = !DILocalVariable(name: "vars", arg: 2, scope: !3765, file: !3, line: 4929, type: !2649)
!3771 = !DILocation(line: 4929, column: 49, scope: !3765)
!3772 = !DILocalVariable(name: "bi", scope: !3765, file: !3, line: 4931, type: !3687)
!3773 = !DILocation(line: 4931, column: 19, scope: !3765)
!3774 = !DILocalVariable(name: "i", scope: !3765, file: !3, line: 4932, type: !6)
!3775 = !DILocation(line: 4932, column: 12, scope: !3765)
!3776 = !DILocation(line: 4934, column: 11, scope: !3765)
!3777 = !DILocation(line: 4934, column: 3, scope: !3765)
!3778 = !DILocation(line: 4935, column: 14, scope: !3765)
!3779 = !DILocation(line: 4935, column: 3, scope: !3765)
!3780 = !DILocation(line: 4935, column: 7, scope: !3765)
!3781 = !DILocation(line: 4935, column: 12, scope: !3765)
!3782 = !DILocation(line: 4936, column: 3, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3765, file: !3, line: 4936, column: 3)
!3784 = !DILocation(line: 4936, column: 3, scope: !3785)
!3785 = distinct !DILexicalBlock(scope: !3783, file: !3, line: 4936, column: 3)
!3786 = !DILocalVariable(name: "var", scope: !3787, file: !3, line: 4938, type: !1780)
!3787 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 4937, column: 5)
!3788 = !DILocation(line: 4938, column: 12, scope: !3787)
!3789 = !DILocation(line: 4938, column: 41, scope: !3787)
!3790 = !DILocation(line: 4938, column: 18, scope: !3787)
!3791 = !DILocation(line: 4939, column: 26, scope: !3792)
!3792 = distinct !DILexicalBlock(scope: !3787, file: !3, line: 4939, column: 11)
!3793 = !DILocation(line: 4939, column: 11, scope: !3792)
!3794 = !DILocation(line: 4939, column: 11, scope: !3787)
!3795 = !DILocation(line: 4941, column: 4, scope: !3796)
!3796 = distinct !DILexicalBlock(scope: !3792, file: !3, line: 4940, column: 2)
!3797 = !DILocation(line: 4941, column: 8, scope: !3796)
!3798 = !DILocation(line: 4941, column: 29, scope: !3796)
!3799 = !DILocation(line: 4942, column: 4, scope: !3796)
!3800 = !DILocation(line: 4944, column: 5, scope: !3787)
!3801 = distinct !{!3801, !3782, !3802}
!3802 = !DILocation(line: 4944, column: 5, scope: !3783)
!3803 = !DILocation(line: 4945, column: 1, scope: !3765)
!3804 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !2006, file: !2006, line: 224, type: !3805, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3805 = !DISubroutineType(types: !3806)
!3806 = !{null, !3807, !3808, !6, !3178}
!3807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3687, size: 64)
!3808 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1781, line: 48, baseType: !3809)
!3809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3810, size: 64)
!3810 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2005)
!3811 = !DILocalVariable(name: "bi", arg: 1, scope: !3804, file: !2006, line: 224, type: !3807)
!3812 = !DILocation(line: 224, column: 37, scope: !3804)
!3813 = !DILocalVariable(name: "map", arg: 2, scope: !3804, file: !2006, line: 224, type: !3808)
!3814 = !DILocation(line: 224, column: 54, scope: !3804)
!3815 = !DILocalVariable(name: "start_bit", arg: 3, scope: !3804, file: !2006, line: 225, type: !6)
!3816 = !DILocation(line: 225, column: 15, scope: !3804)
!3817 = !DILocalVariable(name: "bit_no", arg: 4, scope: !3804, file: !2006, line: 225, type: !3178)
!3818 = !DILocation(line: 225, column: 36, scope: !3804)
!3819 = !DILocation(line: 227, column: 14, scope: !3804)
!3820 = !DILocation(line: 227, column: 19, scope: !3804)
!3821 = !DILocation(line: 227, column: 3, scope: !3804)
!3822 = !DILocation(line: 227, column: 7, scope: !3804)
!3823 = !DILocation(line: 227, column: 12, scope: !3804)
!3824 = !DILocation(line: 228, column: 3, scope: !3804)
!3825 = !DILocation(line: 228, column: 7, scope: !3804)
!3826 = !DILocation(line: 228, column: 12, scope: !3804)
!3827 = !DILocation(line: 231, column: 3, scope: !3804)
!3828 = !DILocation(line: 233, column: 12, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3830, file: !2006, line: 233, column: 11)
!3830 = distinct !DILexicalBlock(scope: !3804, file: !2006, line: 232, column: 5)
!3831 = !DILocation(line: 233, column: 16, scope: !3829)
!3832 = !DILocation(line: 233, column: 11, scope: !3830)
!3833 = !DILocation(line: 235, column: 4, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !3829, file: !2006, line: 234, column: 2)
!3835 = !DILocation(line: 235, column: 8, scope: !3834)
!3836 = !DILocation(line: 235, column: 13, scope: !3834)
!3837 = !DILocation(line: 236, column: 4, scope: !3834)
!3838 = !DILocation(line: 239, column: 11, scope: !3839)
!3839 = distinct !DILexicalBlock(scope: !3830, file: !2006, line: 239, column: 11)
!3840 = !DILocation(line: 239, column: 15, scope: !3839)
!3841 = !DILocation(line: 239, column: 21, scope: !3839)
!3842 = !DILocation(line: 239, column: 29, scope: !3839)
!3843 = !DILocation(line: 239, column: 39, scope: !3839)
!3844 = !DILocation(line: 239, column: 26, scope: !3839)
!3845 = !DILocation(line: 239, column: 11, scope: !3830)
!3846 = !DILocation(line: 240, column: 2, scope: !3839)
!3847 = !DILocation(line: 241, column: 18, scope: !3830)
!3848 = !DILocation(line: 241, column: 22, scope: !3830)
!3849 = !DILocation(line: 241, column: 28, scope: !3830)
!3850 = !DILocation(line: 241, column: 7, scope: !3830)
!3851 = !DILocation(line: 241, column: 11, scope: !3830)
!3852 = !DILocation(line: 241, column: 16, scope: !3830)
!3853 = distinct !{!3853, !3827, !3854}
!3854 = !DILocation(line: 242, column: 5, scope: !3804)
!3855 = !DILocation(line: 245, column: 7, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !3804, file: !2006, line: 245, column: 7)
!3857 = !DILocation(line: 245, column: 11, scope: !3856)
!3858 = !DILocation(line: 245, column: 17, scope: !3856)
!3859 = !DILocation(line: 245, column: 25, scope: !3856)
!3860 = !DILocation(line: 245, column: 35, scope: !3856)
!3861 = !DILocation(line: 245, column: 22, scope: !3856)
!3862 = !DILocation(line: 245, column: 7, scope: !3804)
!3863 = !DILocation(line: 246, column: 17, scope: !3856)
!3864 = !DILocation(line: 246, column: 21, scope: !3856)
!3865 = !DILocation(line: 246, column: 27, scope: !3856)
!3866 = !DILocation(line: 246, column: 32, scope: !3856)
!3867 = !DILocation(line: 246, column: 15, scope: !3856)
!3868 = !DILocation(line: 246, column: 5, scope: !3856)
!3869 = !DILocation(line: 249, column: 17, scope: !3804)
!3870 = !DILocation(line: 249, column: 27, scope: !3804)
!3871 = !DILocation(line: 249, column: 46, scope: !3804)
!3872 = !DILocation(line: 249, column: 3, scope: !3804)
!3873 = !DILocation(line: 249, column: 7, scope: !3804)
!3874 = !DILocation(line: 249, column: 15, scope: !3804)
!3875 = !DILocation(line: 250, column: 14, scope: !3804)
!3876 = !DILocation(line: 250, column: 18, scope: !3804)
!3877 = !DILocation(line: 250, column: 24, scope: !3804)
!3878 = !DILocation(line: 250, column: 29, scope: !3804)
!3879 = !DILocation(line: 250, column: 33, scope: !3804)
!3880 = !DILocation(line: 250, column: 3, scope: !3804)
!3881 = !DILocation(line: 250, column: 7, scope: !3804)
!3882 = !DILocation(line: 250, column: 12, scope: !3804)
!3883 = !DILocation(line: 251, column: 16, scope: !3804)
!3884 = !DILocation(line: 251, column: 26, scope: !3804)
!3885 = !DILocation(line: 251, column: 3, scope: !3804)
!3886 = !DILocation(line: 251, column: 7, scope: !3804)
!3887 = !DILocation(line: 251, column: 12, scope: !3804)
!3888 = !DILocation(line: 257, column: 17, scope: !3804)
!3889 = !DILocation(line: 257, column: 21, scope: !3804)
!3890 = !DILocation(line: 257, column: 16, scope: !3804)
!3891 = !DILocation(line: 257, column: 13, scope: !3804)
!3892 = !DILocation(line: 259, column: 13, scope: !3804)
!3893 = !DILocation(line: 259, column: 4, scope: !3804)
!3894 = !DILocation(line: 259, column: 11, scope: !3804)
!3895 = !DILocation(line: 260, column: 1, scope: !3804)
!3896 = distinct !DISubprogram(name: "bmp_iter_set", scope: !2006, file: !2006, line: 393, type: !3897, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3897 = !DISubroutineType(types: !3898)
!3898 = !{!1894, !3807, !3178}
!3899 = !DILocalVariable(name: "bi", arg: 1, scope: !3896, file: !2006, line: 393, type: !3807)
!3900 = !DILocation(line: 393, column: 32, scope: !3896)
!3901 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3896, file: !2006, line: 393, type: !3178)
!3902 = !DILocation(line: 393, column: 46, scope: !3896)
!3903 = !DILocation(line: 396, column: 7, scope: !3904)
!3904 = distinct !DILexicalBlock(scope: !3896, file: !2006, line: 396, column: 7)
!3905 = !DILocation(line: 396, column: 11, scope: !3904)
!3906 = !DILocation(line: 396, column: 7, scope: !3896)
!3907 = !DILocation(line: 397, column: 5, scope: !3904)
!3908 = !DILabel(scope: !3909, name: "next_bit", file: !2006, line: 398)
!3909 = distinct !DILexicalBlock(scope: !3904, file: !2006, line: 397, column: 5)
!3910 = !DILocation(line: 398, column: 5, scope: !3909)
!3911 = !DILocation(line: 399, column: 7, scope: !3909)
!3912 = !DILocation(line: 399, column: 16, scope: !3909)
!3913 = !DILocation(line: 399, column: 20, scope: !3909)
!3914 = !DILocation(line: 399, column: 25, scope: !3909)
!3915 = !DILocation(line: 399, column: 14, scope: !3909)
!3916 = !DILocation(line: 401, column: 4, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3909, file: !2006, line: 400, column: 2)
!3918 = !DILocation(line: 401, column: 8, scope: !3917)
!3919 = !DILocation(line: 401, column: 13, scope: !3917)
!3920 = !DILocation(line: 402, column: 5, scope: !3917)
!3921 = !DILocation(line: 402, column: 12, scope: !3917)
!3922 = distinct !{!3922, !3911, !3923}
!3923 = !DILocation(line: 403, column: 2, scope: !3909)
!3924 = !DILocation(line: 404, column: 7, scope: !3909)
!3925 = !DILocation(line: 410, column: 16, scope: !3896)
!3926 = !DILocation(line: 410, column: 15, scope: !3896)
!3927 = !DILocation(line: 410, column: 23, scope: !3896)
!3928 = !DILocation(line: 410, column: 42, scope: !3896)
!3929 = !DILocation(line: 411, column: 7, scope: !3896)
!3930 = !DILocation(line: 411, column: 26, scope: !3896)
!3931 = !DILocation(line: 410, column: 4, scope: !3896)
!3932 = !DILocation(line: 410, column: 11, scope: !3896)
!3933 = !DILocation(line: 412, column: 3, scope: !3896)
!3934 = !DILocation(line: 412, column: 7, scope: !3896)
!3935 = !DILocation(line: 412, column: 14, scope: !3896)
!3936 = !DILocation(line: 414, column: 3, scope: !3896)
!3937 = !DILocation(line: 417, column: 7, scope: !3938)
!3938 = distinct !DILexicalBlock(scope: !3896, file: !2006, line: 415, column: 5)
!3939 = !DILocation(line: 417, column: 14, scope: !3938)
!3940 = !DILocation(line: 417, column: 18, scope: !3938)
!3941 = !DILocation(line: 417, column: 26, scope: !3938)
!3942 = !DILocation(line: 419, column: 15, scope: !3943)
!3943 = distinct !DILexicalBlock(scope: !3938, file: !2006, line: 418, column: 2)
!3944 = !DILocation(line: 419, column: 19, scope: !3943)
!3945 = !DILocation(line: 419, column: 25, scope: !3943)
!3946 = !DILocation(line: 419, column: 30, scope: !3943)
!3947 = !DILocation(line: 419, column: 34, scope: !3943)
!3948 = !DILocation(line: 419, column: 4, scope: !3943)
!3949 = !DILocation(line: 419, column: 8, scope: !3943)
!3950 = !DILocation(line: 419, column: 13, scope: !3943)
!3951 = !DILocation(line: 420, column: 8, scope: !3952)
!3952 = distinct !DILexicalBlock(scope: !3943, file: !2006, line: 420, column: 8)
!3953 = !DILocation(line: 420, column: 12, scope: !3952)
!3954 = !DILocation(line: 420, column: 8, scope: !3943)
!3955 = !DILocation(line: 421, column: 6, scope: !3952)
!3956 = !DILocation(line: 422, column: 5, scope: !3943)
!3957 = !DILocation(line: 422, column: 12, scope: !3943)
!3958 = !DILocation(line: 423, column: 4, scope: !3943)
!3959 = !DILocation(line: 423, column: 8, scope: !3943)
!3960 = !DILocation(line: 423, column: 15, scope: !3943)
!3961 = distinct !{!3961, !3937, !3962}
!3962 = !DILocation(line: 424, column: 2, scope: !3938)
!3963 = !DILocation(line: 427, column: 18, scope: !3938)
!3964 = !DILocation(line: 427, column: 22, scope: !3938)
!3965 = !DILocation(line: 427, column: 28, scope: !3938)
!3966 = !DILocation(line: 427, column: 7, scope: !3938)
!3967 = !DILocation(line: 427, column: 11, scope: !3938)
!3968 = !DILocation(line: 427, column: 16, scope: !3938)
!3969 = !DILocation(line: 428, column: 12, scope: !3970)
!3970 = distinct !DILexicalBlock(scope: !3938, file: !2006, line: 428, column: 11)
!3971 = !DILocation(line: 428, column: 16, scope: !3970)
!3972 = !DILocation(line: 428, column: 11, scope: !3938)
!3973 = !DILocation(line: 429, column: 2, scope: !3970)
!3974 = !DILocation(line: 430, column: 17, scope: !3938)
!3975 = !DILocation(line: 430, column: 21, scope: !3938)
!3976 = !DILocation(line: 430, column: 27, scope: !3938)
!3977 = !DILocation(line: 430, column: 32, scope: !3938)
!3978 = !DILocation(line: 430, column: 8, scope: !3938)
!3979 = !DILocation(line: 430, column: 15, scope: !3938)
!3980 = !DILocation(line: 431, column: 7, scope: !3938)
!3981 = !DILocation(line: 431, column: 11, scope: !3938)
!3982 = !DILocation(line: 431, column: 19, scope: !3938)
!3983 = distinct !{!3983, !3936, !3984}
!3984 = !DILocation(line: 432, column: 5, scope: !3896)
!3985 = !DILocation(line: 433, column: 1, scope: !3896)
!3986 = distinct !DISubprogram(name: "is_global_var", scope: !3987, file: !3987, line: 575, type: !3988, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3987 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3988 = !DISubroutineType(types: !3989)
!3989 = !{!1894, !3990}
!3990 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1781, line: 59, baseType: !3149)
!3991 = !DILocalVariable(name: "t", arg: 1, scope: !3986, file: !3987, line: 575, type: !3990)
!3992 = !DILocation(line: 575, column: 27, scope: !3986)
!3993 = !DILocation(line: 577, column: 11, scope: !3986)
!3994 = !DILocation(line: 577, column: 27, scope: !3986)
!3995 = !DILocation(line: 577, column: 30, scope: !3986)
!3996 = !DILocation(line: 577, column: 10, scope: !3986)
!3997 = !DILocation(line: 577, column: 3, scope: !3986)
!3998 = distinct !DISubprogram(name: "bmp_iter_next", scope: !2006, file: !2006, line: 382, type: !3999, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!3999 = !DISubroutineType(types: !4000)
!4000 = !{null, !3807, !3178}
!4001 = !DILocalVariable(name: "bi", arg: 1, scope: !3998, file: !2006, line: 382, type: !3807)
!4002 = !DILocation(line: 382, column: 33, scope: !3998)
!4003 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3998, file: !2006, line: 382, type: !3178)
!4004 = !DILocation(line: 382, column: 47, scope: !3998)
!4005 = !DILocation(line: 384, column: 3, scope: !3998)
!4006 = !DILocation(line: 384, column: 7, scope: !3998)
!4007 = !DILocation(line: 384, column: 12, scope: !3998)
!4008 = !DILocation(line: 385, column: 4, scope: !3998)
!4009 = !DILocation(line: 385, column: 11, scope: !3998)
!4010 = !DILocation(line: 386, column: 1, scope: !3998)
!4011 = distinct !DISubprogram(name: "pt_solution_includes_global", scope: !3, file: !3, line: 4971, type: !4012, scopeLine: 4972, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4012 = !DISubroutineType(types: !4013)
!4013 = !{!1894, !3756}
!4014 = !DILocalVariable(name: "pt", arg: 1, scope: !4011, file: !3, line: 4971, type: !3756)
!4015 = !DILocation(line: 4971, column: 50, scope: !4011)
!4016 = !DILocation(line: 4973, column: 7, scope: !4017)
!4017 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 4973, column: 7)
!4018 = !DILocation(line: 4973, column: 11, scope: !4017)
!4019 = !DILocation(line: 4974, column: 7, scope: !4017)
!4020 = !DILocation(line: 4974, column: 10, scope: !4017)
!4021 = !DILocation(line: 4974, column: 14, scope: !4017)
!4022 = !DILocation(line: 4975, column: 7, scope: !4017)
!4023 = !DILocation(line: 4975, column: 10, scope: !4017)
!4024 = !DILocation(line: 4975, column: 14, scope: !4017)
!4025 = !DILocation(line: 4973, column: 7, scope: !4011)
!4026 = !DILocation(line: 4976, column: 5, scope: !4017)
!4027 = !DILocation(line: 4978, column: 7, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 4978, column: 7)
!4029 = !DILocation(line: 4978, column: 11, scope: !4028)
!4030 = !DILocation(line: 4978, column: 7, scope: !4011)
!4031 = !DILocation(line: 4979, column: 42, scope: !4028)
!4032 = !DILocation(line: 4979, column: 48, scope: !4028)
!4033 = !DILocation(line: 4979, column: 59, scope: !4028)
!4034 = !DILocation(line: 4979, column: 12, scope: !4028)
!4035 = !DILocation(line: 4979, column: 5, scope: !4028)
!4036 = !DILocation(line: 4981, column: 3, scope: !4011)
!4037 = !DILocation(line: 4982, column: 1, scope: !4011)
!4038 = distinct !DISubprogram(name: "pt_solution_includes", scope: !3, file: !3, line: 5010, type: !4039, scopeLine: 5011, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4039 = !DISubroutineType(types: !4040)
!4040 = !{!1894, !3756, !3990}
!4041 = !DILocalVariable(name: "pt", arg: 1, scope: !4038, file: !3, line: 5010, type: !3756)
!4042 = !DILocation(line: 5010, column: 43, scope: !4038)
!4043 = !DILocalVariable(name: "decl", arg: 2, scope: !4038, file: !3, line: 5010, type: !3990)
!4044 = !DILocation(line: 5010, column: 58, scope: !4038)
!4045 = !DILocalVariable(name: "res", scope: !4038, file: !3, line: 5012, type: !1894)
!4046 = !DILocation(line: 5012, column: 8, scope: !4038)
!4047 = !DILocation(line: 5012, column: 38, scope: !4038)
!4048 = !DILocation(line: 5012, column: 42, scope: !4038)
!4049 = !DILocation(line: 5012, column: 14, scope: !4038)
!4050 = !DILocation(line: 5013, column: 7, scope: !4051)
!4051 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 5013, column: 7)
!4052 = !DILocation(line: 5013, column: 7, scope: !4038)
!4053 = !DILocation(line: 5014, column: 5, scope: !4051)
!4054 = !DILocation(line: 5016, column: 5, scope: !4051)
!4055 = !DILocation(line: 5017, column: 10, scope: !4038)
!4056 = !DILocation(line: 5017, column: 3, scope: !4038)
!4057 = distinct !DISubprogram(name: "pt_solution_includes_1", scope: !3, file: !3, line: 4988, type: !4039, scopeLine: 4989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4058 = !DILocalVariable(name: "pt", arg: 1, scope: !4057, file: !3, line: 4988, type: !3756)
!4059 = !DILocation(line: 4988, column: 45, scope: !4057)
!4060 = !DILocalVariable(name: "decl", arg: 2, scope: !4057, file: !3, line: 4988, type: !3990)
!4061 = !DILocation(line: 4988, column: 60, scope: !4057)
!4062 = !DILocation(line: 4990, column: 7, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 4990, column: 7)
!4064 = !DILocation(line: 4990, column: 11, scope: !4063)
!4065 = !DILocation(line: 4990, column: 7, scope: !4057)
!4066 = !DILocation(line: 4991, column: 5, scope: !4063)
!4067 = !DILocation(line: 4993, column: 7, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 4993, column: 7)
!4069 = !DILocation(line: 4993, column: 11, scope: !4068)
!4070 = !DILocation(line: 4994, column: 7, scope: !4068)
!4071 = !DILocation(line: 4994, column: 25, scope: !4068)
!4072 = !DILocation(line: 4994, column: 10, scope: !4068)
!4073 = !DILocation(line: 4993, column: 7, scope: !4057)
!4074 = !DILocation(line: 4995, column: 5, scope: !4068)
!4075 = !DILocation(line: 4997, column: 7, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 4997, column: 7)
!4077 = !DILocation(line: 4997, column: 11, scope: !4076)
!4078 = !DILocation(line: 4998, column: 7, scope: !4076)
!4079 = !DILocation(line: 4998, column: 24, scope: !4076)
!4080 = !DILocation(line: 4998, column: 28, scope: !4076)
!4081 = !DILocation(line: 4998, column: 34, scope: !4076)
!4082 = !DILocation(line: 4998, column: 10, scope: !4076)
!4083 = !DILocation(line: 4997, column: 7, scope: !4057)
!4084 = !DILocation(line: 4999, column: 5, scope: !4076)
!4085 = !DILocation(line: 5002, column: 7, scope: !4086)
!4086 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 5002, column: 7)
!4087 = !DILocation(line: 5002, column: 11, scope: !4086)
!4088 = !DILocation(line: 5003, column: 7, scope: !4086)
!4089 = !DILocation(line: 5003, column: 35, scope: !4086)
!4090 = !DILocation(line: 5003, column: 41, scope: !4086)
!4091 = !DILocation(line: 5003, column: 52, scope: !4086)
!4092 = !DILocation(line: 5003, column: 61, scope: !4086)
!4093 = !DILocation(line: 5003, column: 10, scope: !4086)
!4094 = !DILocation(line: 5002, column: 7, scope: !4057)
!4095 = !DILocation(line: 5004, column: 5, scope: !4086)
!4096 = !DILocation(line: 5006, column: 3, scope: !4057)
!4097 = !DILocation(line: 5007, column: 1, scope: !4057)
!4098 = distinct !DISubprogram(name: "pt_solutions_intersect", scope: !3, file: !3, line: 5063, type: !4099, scopeLine: 5064, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4099 = !DISubroutineType(types: !4100)
!4100 = !{!1894, !3756, !3756}
!4101 = !DILocalVariable(name: "pt1", arg: 1, scope: !4098, file: !3, line: 5063, type: !3756)
!4102 = !DILocation(line: 5063, column: 45, scope: !4098)
!4103 = !DILocalVariable(name: "pt2", arg: 2, scope: !4098, file: !3, line: 5063, type: !3756)
!4104 = !DILocation(line: 5063, column: 70, scope: !4098)
!4105 = !DILocalVariable(name: "res", scope: !4098, file: !3, line: 5065, type: !1894)
!4106 = !DILocation(line: 5065, column: 8, scope: !4098)
!4107 = !DILocation(line: 5065, column: 40, scope: !4098)
!4108 = !DILocation(line: 5065, column: 45, scope: !4098)
!4109 = !DILocation(line: 5065, column: 14, scope: !4098)
!4110 = !DILocation(line: 5066, column: 7, scope: !4111)
!4111 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 5066, column: 7)
!4112 = !DILocation(line: 5066, column: 7, scope: !4098)
!4113 = !DILocation(line: 5067, column: 5, scope: !4111)
!4114 = !DILocation(line: 5069, column: 5, scope: !4111)
!4115 = !DILocation(line: 5070, column: 10, scope: !4098)
!4116 = !DILocation(line: 5070, column: 3, scope: !4098)
!4117 = distinct !DISubprogram(name: "pt_solutions_intersect_1", scope: !3, file: !3, line: 5024, type: !4099, scopeLine: 5025, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4118 = !DILocalVariable(name: "pt1", arg: 1, scope: !4117, file: !3, line: 5024, type: !3756)
!4119 = !DILocation(line: 5024, column: 47, scope: !4117)
!4120 = !DILocalVariable(name: "pt2", arg: 2, scope: !4117, file: !3, line: 5024, type: !3756)
!4121 = !DILocation(line: 5024, column: 72, scope: !4117)
!4122 = !DILocation(line: 5026, column: 7, scope: !4123)
!4123 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 5026, column: 7)
!4124 = !DILocation(line: 5026, column: 12, scope: !4123)
!4125 = !DILocation(line: 5026, column: 21, scope: !4123)
!4126 = !DILocation(line: 5026, column: 24, scope: !4123)
!4127 = !DILocation(line: 5026, column: 29, scope: !4123)
!4128 = !DILocation(line: 5026, column: 7, scope: !4117)
!4129 = !DILocation(line: 5027, column: 5, scope: !4123)
!4130 = !DILocation(line: 5031, column: 8, scope: !4131)
!4131 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 5031, column: 7)
!4132 = !DILocation(line: 5031, column: 13, scope: !4131)
!4133 = !DILocation(line: 5032, column: 8, scope: !4131)
!4134 = !DILocation(line: 5032, column: 12, scope: !4131)
!4135 = !DILocation(line: 5032, column: 17, scope: !4131)
!4136 = !DILocation(line: 5033, column: 5, scope: !4131)
!4137 = !DILocation(line: 5033, column: 8, scope: !4131)
!4138 = !DILocation(line: 5033, column: 13, scope: !4131)
!4139 = !DILocation(line: 5034, column: 7, scope: !4131)
!4140 = !DILocation(line: 5034, column: 11, scope: !4131)
!4141 = !DILocation(line: 5034, column: 16, scope: !4131)
!4142 = !DILocation(line: 5035, column: 4, scope: !4131)
!4143 = !DILocation(line: 5035, column: 7, scope: !4131)
!4144 = !DILocation(line: 5035, column: 12, scope: !4131)
!4145 = !DILocation(line: 5031, column: 7, scope: !4117)
!4146 = !DILocation(line: 5036, column: 5, scope: !4131)
!4147 = !DILocation(line: 5039, column: 8, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 5039, column: 7)
!4149 = !DILocation(line: 5039, column: 13, scope: !4148)
!4150 = !DILocation(line: 5039, column: 21, scope: !4148)
!4151 = !DILocation(line: 5039, column: 24, scope: !4148)
!4152 = !DILocation(line: 5039, column: 29, scope: !4148)
!4153 = !DILocation(line: 5040, column: 7, scope: !4148)
!4154 = !DILocation(line: 5040, column: 33, scope: !4148)
!4155 = !DILocation(line: 5040, column: 39, scope: !4148)
!4156 = !DILocation(line: 5040, column: 50, scope: !4148)
!4157 = !DILocation(line: 5040, column: 11, scope: !4148)
!4158 = !DILocation(line: 5039, column: 7, scope: !4117)
!4159 = !DILocation(line: 5044, column: 11, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !4161, file: !3, line: 5044, column: 11)
!4161 = distinct !DILexicalBlock(scope: !4148, file: !3, line: 5041, column: 5)
!4162 = !DILocation(line: 5044, column: 16, scope: !4160)
!4163 = !DILocation(line: 5044, column: 24, scope: !4160)
!4164 = !DILocation(line: 5044, column: 27, scope: !4160)
!4165 = !DILocation(line: 5044, column: 32, scope: !4160)
!4166 = !DILocation(line: 5044, column: 11, scope: !4161)
!4167 = !DILocation(line: 5045, column: 2, scope: !4160)
!4168 = !DILocation(line: 5049, column: 12, scope: !4169)
!4169 = distinct !DILexicalBlock(scope: !4161, file: !3, line: 5049, column: 11)
!4170 = !DILocation(line: 5049, column: 17, scope: !4169)
!4171 = !DILocation(line: 5050, column: 5, scope: !4169)
!4172 = !DILocation(line: 5050, column: 35, scope: !4169)
!4173 = !DILocation(line: 5050, column: 41, scope: !4169)
!4174 = !DILocation(line: 5050, column: 52, scope: !4169)
!4175 = !DILocation(line: 5050, column: 61, scope: !4169)
!4176 = !DILocation(line: 5050, column: 8, scope: !4169)
!4177 = !DILocation(line: 5051, column: 4, scope: !4169)
!4178 = !DILocation(line: 5051, column: 8, scope: !4169)
!4179 = !DILocation(line: 5051, column: 13, scope: !4169)
!4180 = !DILocation(line: 5052, column: 8, scope: !4169)
!4181 = !DILocation(line: 5052, column: 38, scope: !4169)
!4182 = !DILocation(line: 5052, column: 44, scope: !4169)
!4183 = !DILocation(line: 5052, column: 55, scope: !4169)
!4184 = !DILocation(line: 5052, column: 64, scope: !4169)
!4185 = !DILocation(line: 5052, column: 11, scope: !4169)
!4186 = !DILocation(line: 5049, column: 11, scope: !4161)
!4187 = !DILocation(line: 5053, column: 2, scope: !4169)
!4188 = !DILocation(line: 5054, column: 5, scope: !4161)
!4189 = !DILocation(line: 5057, column: 11, scope: !4117)
!4190 = !DILocation(line: 5057, column: 16, scope: !4117)
!4191 = !DILocation(line: 5058, column: 4, scope: !4117)
!4192 = !DILocation(line: 5058, column: 7, scope: !4117)
!4193 = !DILocation(line: 5058, column: 12, scope: !4117)
!4194 = !DILocation(line: 5059, column: 4, scope: !4117)
!4195 = !DILocation(line: 5059, column: 27, scope: !4117)
!4196 = !DILocation(line: 5059, column: 32, scope: !4117)
!4197 = !DILocation(line: 5059, column: 38, scope: !4117)
!4198 = !DILocation(line: 5059, column: 43, scope: !4117)
!4199 = !DILocation(line: 5059, column: 7, scope: !4117)
!4200 = !DILocation(line: 0, scope: !4117)
!4201 = !DILocation(line: 5057, column: 10, scope: !4117)
!4202 = !DILocation(line: 5057, column: 3, scope: !4117)
!4203 = !DILocation(line: 5060, column: 1, scope: !4117)
!4204 = distinct !DISubprogram(name: "pt_solutions_same_restrict_base", scope: !3, file: !3, line: 5077, type: !4099, scopeLine: 5079, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4205 = !DILocalVariable(name: "pt1", arg: 1, scope: !4204, file: !3, line: 5077, type: !3756)
!4206 = !DILocation(line: 5077, column: 54, scope: !4204)
!4207 = !DILocalVariable(name: "pt2", arg: 2, scope: !4204, file: !3, line: 5078, type: !3756)
!4208 = !DILocation(line: 5078, column: 26, scope: !4204)
!4209 = !DILocation(line: 5084, column: 7, scope: !4210)
!4210 = distinct !DILexicalBlock(scope: !4204, file: !3, line: 5084, column: 7)
!4211 = !DILocation(line: 5084, column: 12, scope: !4210)
!4212 = !DILocation(line: 5085, column: 7, scope: !4210)
!4213 = !DILocation(line: 5085, column: 10, scope: !4210)
!4214 = !DILocation(line: 5085, column: 15, scope: !4210)
!4215 = !DILocation(line: 5084, column: 7, scope: !4204)
!4216 = !DILocation(line: 5087, column: 7, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4210, file: !3, line: 5086, column: 5)
!4218 = !DILocation(line: 5088, column: 34, scope: !4217)
!4219 = !DILocation(line: 5088, column: 39, scope: !4217)
!4220 = !DILocation(line: 5088, column: 45, scope: !4217)
!4221 = !DILocation(line: 5088, column: 50, scope: !4217)
!4222 = !DILocation(line: 5088, column: 14, scope: !4217)
!4223 = !DILocation(line: 5088, column: 7, scope: !4217)
!4224 = !DILocation(line: 5091, column: 3, scope: !4204)
!4225 = !DILocation(line: 5092, column: 1, scope: !4204)
!4226 = distinct !DISubprogram(name: "debug_sa_points_to_info", scope: !3, file: !3, line: 5128, type: !3548, scopeLine: 5129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4227 = !DILocation(line: 5130, column: 27, scope: !4226)
!4228 = !DILocation(line: 5130, column: 3, scope: !4226)
!4229 = !DILocation(line: 5131, column: 1, scope: !4226)
!4230 = distinct !DISubprogram(name: "dump_sa_points_to_info", scope: !3, file: !3, line: 5098, type: !3554, scopeLine: 5099, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4231 = !DILocalVariable(name: "outfile", arg: 1, scope: !4230, file: !3, line: 5098, type: !3403)
!4232 = !DILocation(line: 5098, column: 31, scope: !4230)
!4233 = !DILocalVariable(name: "i", scope: !4230, file: !3, line: 5100, type: !6)
!4234 = !DILocation(line: 5100, column: 16, scope: !4230)
!4235 = !DILocation(line: 5102, column: 12, scope: !4230)
!4236 = !DILocation(line: 5102, column: 3, scope: !4230)
!4237 = !DILocation(line: 5104, column: 7, scope: !4238)
!4238 = distinct !DILexicalBlock(scope: !4230, file: !3, line: 5104, column: 7)
!4239 = !DILocation(line: 5104, column: 18, scope: !4238)
!4240 = !DILocation(line: 5104, column: 7, scope: !4230)
!4241 = !DILocation(line: 5106, column: 16, scope: !4242)
!4242 = distinct !DILexicalBlock(scope: !4238, file: !3, line: 5105, column: 5)
!4243 = !DILocation(line: 5106, column: 7, scope: !4242)
!4244 = !DILocation(line: 5107, column: 16, scope: !4242)
!4245 = !DILocation(line: 5107, column: 65, scope: !4242)
!4246 = !DILocation(line: 5107, column: 7, scope: !4242)
!4247 = !DILocation(line: 5108, column: 16, scope: !4242)
!4248 = !DILocation(line: 5109, column: 15, scope: !4242)
!4249 = !DILocation(line: 5108, column: 7, scope: !4242)
!4250 = !DILocation(line: 5110, column: 16, scope: !4242)
!4251 = !DILocation(line: 5111, column: 15, scope: !4242)
!4252 = !DILocation(line: 5110, column: 7, scope: !4242)
!4253 = !DILocation(line: 5112, column: 16, scope: !4242)
!4254 = !DILocation(line: 5113, column: 15, scope: !4242)
!4255 = !DILocation(line: 5112, column: 7, scope: !4242)
!4256 = !DILocation(line: 5114, column: 16, scope: !4242)
!4257 = !DILocation(line: 5114, column: 65, scope: !4242)
!4258 = !DILocation(line: 5114, column: 7, scope: !4242)
!4259 = !DILocation(line: 5115, column: 16, scope: !4242)
!4260 = !DILocation(line: 5115, column: 65, scope: !4242)
!4261 = !DILocation(line: 5115, column: 7, scope: !4242)
!4262 = !DILocation(line: 5116, column: 16, scope: !4242)
!4263 = !DILocation(line: 5117, column: 15, scope: !4242)
!4264 = !DILocation(line: 5116, column: 7, scope: !4242)
!4265 = !DILocation(line: 5118, column: 5, scope: !4242)
!4266 = !DILocation(line: 5120, column: 10, scope: !4267)
!4267 = distinct !DILexicalBlock(scope: !4230, file: !3, line: 5120, column: 3)
!4268 = !DILocation(line: 5120, column: 8, scope: !4267)
!4269 = !DILocation(line: 5120, column: 15, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 5120, column: 3)
!4271 = !DILocation(line: 5120, column: 19, scope: !4270)
!4272 = !DILocation(line: 5120, column: 17, scope: !4270)
!4273 = !DILocation(line: 5120, column: 3, scope: !4267)
!4274 = !DILocation(line: 5121, column: 28, scope: !4270)
!4275 = !DILocation(line: 5121, column: 37, scope: !4270)
!4276 = !DILocation(line: 5121, column: 5, scope: !4270)
!4277 = !DILocation(line: 5120, column: 52, scope: !4270)
!4278 = !DILocation(line: 5120, column: 3, scope: !4270)
!4279 = distinct !{!4279, !4273, !4280}
!4280 = !DILocation(line: 5121, column: 38, scope: !4267)
!4281 = !DILocation(line: 5122, column: 1, scope: !4230)
!4282 = distinct !DISubprogram(name: "delete_alias_heapvars", scope: !3, file: !3, line: 5408, type: !3548, scopeLine: 5409, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4283 = !DILocation(line: 5410, column: 7, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 5410, column: 7)
!4285 = !DILocation(line: 5410, column: 7, scope: !4282)
!4286 = !DILocation(line: 5411, column: 18, scope: !4284)
!4287 = !DILocation(line: 5411, column: 5, scope: !4284)
!4288 = !DILocation(line: 5412, column: 20, scope: !4282)
!4289 = !DILocation(line: 5413, column: 1, scope: !4282)
!4290 = distinct !DISubprogram(name: "compute_may_aliases", scope: !3, file: !3, line: 5591, type: !3256, scopeLine: 5592, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4291 = !DILocation(line: 5596, column: 3, scope: !4290)
!4292 = !DILocation(line: 5599, column: 7, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4290, file: !3, line: 5599, column: 7)
!4294 = !DILocation(line: 5599, column: 7, scope: !4290)
!4295 = !DILocation(line: 5601, column: 24, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4293, file: !3, line: 5600, column: 5)
!4297 = !DILocation(line: 5601, column: 7, scope: !4296)
!4298 = !DILocation(line: 5603, column: 11, scope: !4299)
!4299 = distinct !DILexicalBlock(scope: !4296, file: !3, line: 5603, column: 11)
!4300 = !DILocation(line: 5603, column: 22, scope: !4299)
!4301 = !DILocation(line: 5603, column: 11, scope: !4296)
!4302 = !DILocation(line: 5604, column: 24, scope: !4299)
!4303 = !DILocation(line: 5604, column: 2, scope: !4299)
!4304 = !DILocation(line: 5605, column: 5, scope: !4296)
!4305 = !DILocation(line: 5609, column: 3, scope: !4290)
!4306 = !DILocation(line: 5611, column: 3, scope: !4290)
!4307 = !DILocation(line: 5613, column: 3, scope: !4290)
!4308 = distinct !DISubprogram(name: "compute_points_to_sets", scope: !3, file: !3, line: 5483, type: !3548, scopeLine: 5484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4309 = !DILocalVariable(name: "bb", scope: !4308, file: !3, line: 5485, type: !2534)
!4310 = !DILocation(line: 5485, column: 15, scope: !4308)
!4311 = !DILocalVariable(name: "i", scope: !4308, file: !3, line: 5486, type: !6)
!4312 = !DILocation(line: 5486, column: 12, scope: !4308)
!4313 = !DILocalVariable(name: "vi", scope: !4308, file: !3, line: 5487, type: !1758)
!4314 = !DILocation(line: 5487, column: 13, scope: !4308)
!4315 = !DILocation(line: 5489, column: 3, scope: !4308)
!4316 = !DILocation(line: 5489, column: 3, scope: !4317)
!4317 = distinct !DILexicalBlock(scope: !4318, file: !3, line: 5489, column: 3)
!4318 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 5489, column: 3)
!4319 = !DILocation(line: 5489, column: 3, scope: !4318)
!4320 = !DILocation(line: 5491, column: 3, scope: !4308)
!4321 = !DILocation(line: 5492, column: 3, scope: !4308)
!4322 = !DILocation(line: 5494, column: 3, scope: !4308)
!4323 = !DILocation(line: 5497, column: 3, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 5497, column: 3)
!4325 = !DILocation(line: 5497, column: 3, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4324, file: !3, line: 5497, column: 3)
!4327 = !DILocalVariable(name: "gsi", scope: !4328, file: !3, line: 5499, type: !4329)
!4328 = distinct !DILexicalBlock(scope: !4326, file: !3, line: 5498, column: 5)
!4329 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !851, line: 265, baseType: !4330)
!4330 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !851, line: 254, size: 192, elements: !4331)
!4331 = !{!4332, !4333, !4334}
!4332 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4330, file: !851, line: 257, baseType: !2097, size: 64)
!4333 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4330, file: !851, line: 263, baseType: !2092, size: 64, offset: 64)
!4334 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4330, file: !851, line: 264, baseType: !2534, size: 64, offset: 128)
!4335 = !DILocation(line: 5499, column: 28, scope: !4328)
!4336 = !DILocation(line: 5501, column: 34, scope: !4337)
!4337 = distinct !DILexicalBlock(scope: !4328, file: !3, line: 5501, column: 7)
!4338 = !DILocation(line: 5501, column: 18, scope: !4337)
!4339 = !DILocation(line: 5501, column: 12, scope: !4337)
!4340 = !DILocation(line: 5501, column: 40, scope: !4341)
!4341 = distinct !DILexicalBlock(scope: !4337, file: !3, line: 5501, column: 7)
!4342 = !DILocation(line: 5501, column: 39, scope: !4341)
!4343 = !DILocation(line: 5501, column: 7, scope: !4337)
!4344 = !DILocalVariable(name: "phi", scope: !4345, file: !3, line: 5503, type: !2102)
!4345 = distinct !DILexicalBlock(scope: !4341, file: !3, line: 5502, column: 2)
!4346 = !DILocation(line: 5503, column: 11, scope: !4345)
!4347 = !DILocation(line: 5503, column: 17, scope: !4345)
!4348 = !DILocation(line: 5505, column: 42, scope: !4349)
!4349 = distinct !DILexicalBlock(scope: !4345, file: !3, line: 5505, column: 8)
!4350 = !DILocation(line: 5505, column: 23, scope: !4349)
!4351 = !DILocation(line: 5505, column: 8, scope: !4349)
!4352 = !DILocation(line: 5505, column: 8, scope: !4345)
!4353 = !DILocation(line: 5506, column: 25, scope: !4349)
!4354 = !DILocation(line: 5506, column: 6, scope: !4349)
!4355 = !DILocation(line: 5507, column: 2, scope: !4345)
!4356 = !DILocation(line: 5501, column: 57, scope: !4341)
!4357 = !DILocation(line: 5501, column: 7, scope: !4341)
!4358 = distinct !{!4358, !4343, !4359}
!4359 = !DILocation(line: 5507, column: 2, scope: !4337)
!4360 = !DILocation(line: 5509, column: 32, scope: !4361)
!4361 = distinct !DILexicalBlock(scope: !4328, file: !3, line: 5509, column: 7)
!4362 = !DILocation(line: 5509, column: 18, scope: !4361)
!4363 = !DILocation(line: 5509, column: 12, scope: !4361)
!4364 = !DILocation(line: 5509, column: 38, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 5509, column: 7)
!4366 = !DILocation(line: 5509, column: 37, scope: !4365)
!4367 = !DILocation(line: 5509, column: 7, scope: !4361)
!4368 = !DILocalVariable(name: "stmt", scope: !4369, file: !3, line: 5511, type: !2102)
!4369 = distinct !DILexicalBlock(scope: !4365, file: !3, line: 5510, column: 2)
!4370 = !DILocation(line: 5511, column: 11, scope: !4369)
!4371 = !DILocation(line: 5511, column: 18, scope: !4369)
!4372 = !DILocation(line: 5513, column: 23, scope: !4369)
!4373 = !DILocation(line: 5513, column: 4, scope: !4369)
!4374 = !DILocation(line: 5514, column: 2, scope: !4369)
!4375 = !DILocation(line: 5509, column: 55, scope: !4365)
!4376 = !DILocation(line: 5509, column: 7, scope: !4365)
!4377 = distinct !{!4377, !4367, !4378}
!4378 = !DILocation(line: 5514, column: 2, scope: !4361)
!4379 = !DILocation(line: 5515, column: 5, scope: !4328)
!4380 = distinct !{!4380, !4323, !4381}
!4381 = !DILocation(line: 5515, column: 5, scope: !4324)
!4382 = !DILocation(line: 5518, column: 3, scope: !4308)
!4383 = !DILocation(line: 5522, column: 28, scope: !4308)
!4384 = !DILocation(line: 5523, column: 8, scope: !4308)
!4385 = !DILocation(line: 5523, column: 14, scope: !4308)
!4386 = !DILocation(line: 5523, column: 25, scope: !4308)
!4387 = !DILocation(line: 5522, column: 3, scope: !4308)
!4388 = !DILocation(line: 5524, column: 28, scope: !4308)
!4389 = !DILocation(line: 5525, column: 8, scope: !4308)
!4390 = !DILocation(line: 5525, column: 14, scope: !4308)
!4391 = !DILocation(line: 5525, column: 25, scope: !4308)
!4392 = !DILocation(line: 5524, column: 3, scope: !4308)
!4393 = !DILocation(line: 5530, column: 3, scope: !4308)
!4394 = !DILocation(line: 5530, column: 9, scope: !4308)
!4395 = !DILocation(line: 5530, column: 20, scope: !4308)
!4396 = !DILocation(line: 5530, column: 28, scope: !4308)
!4397 = !DILocation(line: 5530, column: 36, scope: !4308)
!4398 = !DILocation(line: 5533, column: 10, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 5533, column: 3)
!4400 = !DILocation(line: 5533, column: 8, scope: !4399)
!4401 = !DILocation(line: 5533, column: 15, scope: !4402)
!4402 = distinct !DILexicalBlock(scope: !4399, file: !3, line: 5533, column: 3)
!4403 = !DILocation(line: 5533, column: 3, scope: !4399)
!4404 = !DILocation(line: 5534, column: 9, scope: !4405)
!4405 = distinct !DILexicalBlock(scope: !4402, file: !3, line: 5534, column: 9)
!4406 = !DILocation(line: 5534, column: 13, scope: !4405)
!4407 = !DILocation(line: 5535, column: 2, scope: !4405)
!4408 = !DILocation(line: 5535, column: 6, scope: !4405)
!4409 = !DILocation(line: 5535, column: 10, scope: !4405)
!4410 = !DILocation(line: 5536, column: 2, scope: !4405)
!4411 = !DILocation(line: 5536, column: 6, scope: !4405)
!4412 = !DILocation(line: 5536, column: 10, scope: !4405)
!4413 = !DILocation(line: 5534, column: 9, scope: !4402)
!4414 = !DILocation(line: 5538, column: 27, scope: !4405)
!4415 = !DILocation(line: 5538, column: 33, scope: !4405)
!4416 = !DILocation(line: 5538, column: 44, scope: !4405)
!4417 = !DILocation(line: 5538, column: 53, scope: !4405)
!4418 = !DILocation(line: 5538, column: 57, scope: !4405)
!4419 = !DILocation(line: 5538, column: 4, scope: !4405)
!4420 = !DILocation(line: 5537, column: 34, scope: !4405)
!4421 = !DILocation(line: 5537, column: 38, scope: !4405)
!4422 = !DILocation(line: 5538, column: 2, scope: !4405)
!4423 = !DILocation(line: 5537, column: 7, scope: !4405)
!4424 = !DILocation(line: 5537, column: 32, scope: !4405)
!4425 = !DILocation(line: 5533, column: 55, scope: !4402)
!4426 = !DILocation(line: 5533, column: 3, scope: !4402)
!4427 = distinct !{!4427, !4403, !4428}
!4428 = !DILocation(line: 5538, column: 61, scope: !4399)
!4429 = !DILocation(line: 5541, column: 10, scope: !4430)
!4430 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 5541, column: 3)
!4431 = !DILocation(line: 5541, column: 8, scope: !4430)
!4432 = !DILocation(line: 5541, column: 15, scope: !4433)
!4433 = distinct !DILexicalBlock(scope: !4430, file: !3, line: 5541, column: 3)
!4434 = !DILocation(line: 5541, column: 19, scope: !4433)
!4435 = !DILocation(line: 5541, column: 17, scope: !4433)
!4436 = !DILocation(line: 5541, column: 3, scope: !4430)
!4437 = !DILocalVariable(name: "ptr", scope: !4438, file: !3, line: 5543, type: !1780)
!4438 = distinct !DILexicalBlock(scope: !4433, file: !3, line: 5542, column: 5)
!4439 = !DILocation(line: 5543, column: 12, scope: !4438)
!4440 = !DILocation(line: 5543, column: 18, scope: !4438)
!4441 = !DILocation(line: 5544, column: 11, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !4438, file: !3, line: 5544, column: 11)
!4443 = !DILocation(line: 5545, column: 4, scope: !4442)
!4444 = !DILocation(line: 5545, column: 7, scope: !4442)
!4445 = !DILocation(line: 5544, column: 11, scope: !4438)
!4446 = !DILocation(line: 5546, column: 25, scope: !4442)
!4447 = !DILocation(line: 5546, column: 2, scope: !4442)
!4448 = !DILocation(line: 5547, column: 5, scope: !4438)
!4449 = !DILocation(line: 5541, column: 34, scope: !4433)
!4450 = !DILocation(line: 5541, column: 3, scope: !4433)
!4451 = distinct !{!4451, !4436, !4452}
!4452 = !DILocation(line: 5547, column: 5, scope: !4430)
!4453 = !DILocation(line: 5549, column: 3, scope: !4308)
!4454 = !DILocation(line: 5549, column: 3, scope: !4455)
!4455 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 5549, column: 3)
!4456 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 5549, column: 3)
!4457 = !DILocation(line: 5549, column: 3, scope: !4456)
!4458 = !DILocation(line: 5550, column: 1, scope: !4308)
!4459 = distinct !DISubprogram(name: "delete_points_to_sets", scope: !3, file: !3, line: 5556, type: !3548, scopeLine: 5557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4460 = !DILocalVariable(name: "i", scope: !4459, file: !3, line: 5558, type: !6)
!4461 = !DILocation(line: 5558, column: 16, scope: !4459)
!4462 = !DILocation(line: 5560, column: 16, scope: !4459)
!4463 = !DILocation(line: 5560, column: 3, scope: !4459)
!4464 = !DILocation(line: 5561, column: 7, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 5561, column: 7)
!4466 = !DILocation(line: 5561, column: 17, scope: !4465)
!4467 = !DILocation(line: 5561, column: 21, scope: !4465)
!4468 = !DILocation(line: 5561, column: 32, scope: !4465)
!4469 = !DILocation(line: 5561, column: 7, scope: !4459)
!4470 = !DILocation(line: 5562, column: 14, scope: !4465)
!4471 = !DILocation(line: 5563, column: 13, scope: !4465)
!4472 = !DILocation(line: 5562, column: 5, scope: !4465)
!4473 = !DILocation(line: 5565, column: 24, scope: !4459)
!4474 = !DILocation(line: 5565, column: 3, scope: !4459)
!4475 = !DILocation(line: 5566, column: 3, scope: !4459)
!4476 = !DILocation(line: 5567, column: 3, scope: !4459)
!4477 = !DILocation(line: 5569, column: 10, scope: !4478)
!4478 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 5569, column: 3)
!4479 = !DILocation(line: 5569, column: 8, scope: !4478)
!4480 = !DILocation(line: 5569, column: 15, scope: !4481)
!4481 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 5569, column: 3)
!4482 = !DILocation(line: 5569, column: 19, scope: !4481)
!4483 = !DILocation(line: 5569, column: 26, scope: !4481)
!4484 = !DILocation(line: 5569, column: 17, scope: !4481)
!4485 = !DILocation(line: 5569, column: 3, scope: !4478)
!4486 = !DILocation(line: 5570, column: 5, scope: !4481)
!4487 = !DILocation(line: 5569, column: 33, scope: !4481)
!4488 = !DILocation(line: 5569, column: 3, scope: !4481)
!4489 = distinct !{!4489, !4485, !4490}
!4490 = !DILocation(line: 5570, column: 5, scope: !4478)
!4491 = !DILocation(line: 5571, column: 9, scope: !4459)
!4492 = !DILocation(line: 5571, column: 16, scope: !4459)
!4493 = !DILocation(line: 5571, column: 3, scope: !4459)
!4494 = !DILocation(line: 5573, column: 9, scope: !4459)
!4495 = !DILocation(line: 5573, column: 16, scope: !4459)
!4496 = !DILocation(line: 5573, column: 3, scope: !4459)
!4497 = !DILocation(line: 5574, column: 9, scope: !4459)
!4498 = !DILocation(line: 5574, column: 16, scope: !4459)
!4499 = !DILocation(line: 5574, column: 3, scope: !4459)
!4500 = !DILocation(line: 5575, column: 9, scope: !4459)
!4501 = !DILocation(line: 5575, column: 16, scope: !4459)
!4502 = !DILocation(line: 5575, column: 3, scope: !4459)
!4503 = !DILocation(line: 5576, column: 9, scope: !4459)
!4504 = !DILocation(line: 5576, column: 16, scope: !4459)
!4505 = !DILocation(line: 5576, column: 3, scope: !4459)
!4506 = !DILocation(line: 5577, column: 9, scope: !4459)
!4507 = !DILocation(line: 5577, column: 16, scope: !4459)
!4508 = !DILocation(line: 5577, column: 3, scope: !4459)
!4509 = !DILocation(line: 5578, column: 9, scope: !4459)
!4510 = !DILocation(line: 5578, column: 3, scope: !4459)
!4511 = !DILocation(line: 5580, column: 3, scope: !4459)
!4512 = !DILocation(line: 5581, column: 20, scope: !4459)
!4513 = !DILocation(line: 5581, column: 3, scope: !4459)
!4514 = !DILocation(line: 5582, column: 20, scope: !4459)
!4515 = !DILocation(line: 5582, column: 3, scope: !4459)
!4516 = !DILocation(line: 5583, column: 1, scope: !4459)
!4517 = distinct !DISubprogram(name: "gate_tree_pta", scope: !3, file: !3, line: 5617, type: !3252, scopeLine: 5618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4518 = !DILocation(line: 5619, column: 10, scope: !4517)
!4519 = !DILocation(line: 5619, column: 3, scope: !4517)
!4520 = distinct !DISubprogram(name: "gate_ipa_pta", scope: !3, file: !3, line: 5669, type: !3252, scopeLine: 5670, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4521 = !DILocation(line: 5671, column: 11, scope: !4520)
!4522 = !DILocation(line: 5672, column: 4, scope: !4520)
!4523 = !DILocation(line: 5672, column: 7, scope: !4520)
!4524 = !DILocation(line: 5674, column: 4, scope: !4520)
!4525 = !DILocation(line: 5674, column: 9, scope: !4520)
!4526 = !DILocation(line: 5674, column: 20, scope: !4520)
!4527 = !DILocation(line: 5674, column: 23, scope: !4520)
!4528 = !DILocation(line: 5674, column: 7, scope: !4520)
!4529 = !DILocation(line: 0, scope: !4520)
!4530 = !DILocation(line: 5671, column: 10, scope: !4520)
!4531 = !DILocation(line: 5671, column: 3, scope: !4520)
!4532 = distinct !DISubprogram(name: "ipa_pta_execute", scope: !3, file: !3, line: 5679, type: !3256, scopeLine: 5680, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4533 = !DILocalVariable(name: "node", scope: !4532, file: !3, line: 5681, type: !4534)
!4534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4535, size: 64)
!4535 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !1691, line: 181, size: 2496, elements: !4536)
!4536 = !{!4537, !4538, !4560, !4561, !4562, !4563, !4564, !4565, !4566, !4567, !4568, !4569, !4570, !4571, !4572, !4573, !4574, !4575, !4652, !4674, !4684, !4688, !4714, !4723, !4724, !4725, !4726, !4727, !4728, !4729, !4730, !4731, !4732, !4733, !4734, !4735, !4736}
!4537 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !4535, file: !1691, line: 182, baseType: !1780, size: 64)
!4538 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !4535, file: !1691, line: 183, baseType: !4539, size: 64, offset: 64)
!4539 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4540, size: 64)
!4540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !1691, line: 314, size: 768, elements: !4541)
!4541 = !{!4542, !4543, !4544, !4545, !4546, !4547, !4548, !4549, !4550, !4551, !4553, !4554, !4555, !4556, !4557, !4558, !4559}
!4542 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !4540, file: !1691, line: 316, baseType: !2312, size: 64)
!4543 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !4540, file: !1691, line: 317, baseType: !4534, size: 64, offset: 64)
!4544 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !4540, file: !1691, line: 318, baseType: !4534, size: 64, offset: 128)
!4545 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !4540, file: !1691, line: 319, baseType: !4539, size: 64, offset: 192)
!4546 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !4540, file: !1691, line: 320, baseType: !4539, size: 64, offset: 256)
!4547 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !4540, file: !1691, line: 321, baseType: !4539, size: 64, offset: 320)
!4548 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !4540, file: !1691, line: 322, baseType: !4539, size: 64, offset: 384)
!4549 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !4540, file: !1691, line: 323, baseType: !2102, size: 64, offset: 448)
!4550 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !4540, file: !1691, line: 324, baseType: !1745, size: 64, offset: 512)
!4551 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !4540, file: !1691, line: 327, baseType: !4552, size: 32, offset: 576)
!4552 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !1691, line: 312, baseType: !1690)
!4553 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !4540, file: !1691, line: 330, baseType: !6, size: 32, offset: 608)
!4554 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !4540, file: !1691, line: 334, baseType: !1730, size: 32, offset: 640)
!4555 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !4540, file: !1691, line: 336, baseType: !1730, size: 32, offset: 672)
!4556 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !4540, file: !1691, line: 338, baseType: !3432, size: 16, offset: 704)
!4557 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !4540, file: !1691, line: 340, baseType: !6, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!4558 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !4540, file: !1691, line: 342, baseType: !6, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!4559 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !4540, file: !1691, line: 344, baseType: !6, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!4560 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !4535, file: !1691, line: 184, baseType: !4539, size: 64, offset: 128)
!4561 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4535, file: !1691, line: 185, baseType: !4534, size: 64, offset: 192)
!4562 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !4535, file: !1691, line: 186, baseType: !4534, size: 64, offset: 256)
!4563 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !4535, file: !1691, line: 188, baseType: !4534, size: 64, offset: 320)
!4564 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !4535, file: !1691, line: 190, baseType: !4534, size: 64, offset: 384)
!4565 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !4535, file: !1691, line: 192, baseType: !4534, size: 64, offset: 448)
!4566 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !4535, file: !1691, line: 194, baseType: !4534, size: 64, offset: 512)
!4567 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !4535, file: !1691, line: 196, baseType: !4534, size: 64, offset: 576)
!4568 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !4535, file: !1691, line: 197, baseType: !4534, size: 64, offset: 640)
!4569 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !4535, file: !1691, line: 198, baseType: !4534, size: 64, offset: 704)
!4570 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !4535, file: !1691, line: 199, baseType: !4534, size: 64, offset: 768)
!4571 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !4535, file: !1691, line: 202, baseType: !4534, size: 64, offset: 832)
!4572 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !4535, file: !1691, line: 204, baseType: !4534, size: 64, offset: 896)
!4573 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !4535, file: !1691, line: 207, baseType: !2566, size: 64, offset: 960)
!4574 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !4535, file: !1691, line: 209, baseType: !1745, size: 64, offset: 1024)
!4575 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !4535, file: !1691, line: 214, baseType: !4576, size: 64, offset: 1088)
!4576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4577, size: 64)
!4577 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !2524, line: 177, baseType: !4578)
!4578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !2524, line: 177, size: 128, elements: !4579)
!4579 = !{!4580}
!4580 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4578, file: !2524, line: 177, baseType: !4581, size: 128)
!4581 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !2524, line: 176, baseType: !4582)
!4582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !2524, line: 176, size: 128, elements: !4583)
!4583 = !{!4584, !4585, !4586}
!4584 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4582, file: !2524, line: 176, baseType: !6, size: 32)
!4585 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4582, file: !2524, line: 176, baseType: !6, size: 32, offset: 32)
!4586 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4582, file: !2524, line: 176, baseType: !4587, size: 64, offset: 64)
!4587 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4588, size: 64, elements: !1743)
!4588 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !2524, line: 174, baseType: !4589)
!4589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4590, size: 64)
!4590 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !383, line: 173, size: 1152, elements: !4591)
!4591 = !{!4592, !4593, !4595, !4618, !4619, !4623, !4628, !4629, !4633}
!4592 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !4590, file: !383, line: 175, baseType: !3246, size: 640)
!4593 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !4590, file: !383, line: 179, baseType: !4594, size: 64, offset: 640)
!4594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3548, size: 64)
!4595 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !4590, file: !383, line: 182, baseType: !4596, size: 64, offset: 704)
!4596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4597, size: 64)
!4597 = !DISubroutineType(types: !4598)
!4598 = !{null, !4599}
!4599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4600, size: 64)
!4600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !1691, line: 276, size: 192, elements: !4601)
!4601 = !{!4602, !4603, !4617}
!4602 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !4600, file: !1691, line: 278, baseType: !2566, size: 64)
!4603 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !4600, file: !1691, line: 279, baseType: !4604, size: 64, offset: 64)
!4604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4605, size: 64)
!4605 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !1691, line: 272, baseType: !4606)
!4606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !1691, line: 272, size: 128, elements: !4607)
!4607 = !{!4608}
!4608 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4606, file: !1691, line: 272, baseType: !4609, size: 128)
!4609 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !1691, line: 270, baseType: !4610)
!4610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !1691, line: 270, size: 128, elements: !4611)
!4611 = !{!4612, !4613, !4614}
!4612 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4610, file: !1691, line: 270, baseType: !6, size: 32)
!4613 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4610, file: !1691, line: 270, baseType: !6, size: 32, offset: 32)
!4614 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4610, file: !1691, line: 270, baseType: !4615, size: 64, offset: 64)
!4615 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4616, size: 64, elements: !1743)
!4616 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !1691, line: 268, baseType: !4534)
!4617 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !4600, file: !1691, line: 280, baseType: !1745, size: 64, offset: 128)
!4618 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !4590, file: !383, line: 187, baseType: !4594, size: 64, offset: 768)
!4619 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !4590, file: !383, line: 188, baseType: !4620, size: 64, offset: 832)
!4620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4621, size: 64)
!4621 = !DISubroutineType(types: !4622)
!4622 = !{null, !4534}
!4623 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !4590, file: !383, line: 191, baseType: !4624, size: 64, offset: 896)
!4624 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4625, size: 64)
!4625 = !DISubroutineType(types: !4626)
!4626 = !{null, !4534, !4627}
!4627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2102, size: 64)
!4628 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !4590, file: !383, line: 195, baseType: !6, size: 32, offset: 960)
!4629 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !4590, file: !383, line: 196, baseType: !4630, size: 64, offset: 1024)
!4630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4631, size: 64)
!4631 = !DISubroutineType(types: !4632)
!4632 = !{!6, !4534}
!4633 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !4590, file: !383, line: 197, baseType: !4634, size: 64, offset: 1088)
!4634 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4635, size: 64)
!4635 = !DISubroutineType(types: !4636)
!4636 = !{null, !4637}
!4637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4638, size: 64)
!4638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !1691, line: 358, size: 320, elements: !4639)
!4639 = !{!4640, !4641, !4642, !4643, !4644, !4645, !4646, !4647, !4648, !4649, !4650, !4651}
!4640 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !4638, file: !1691, line: 359, baseType: !1780, size: 64)
!4641 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4638, file: !1691, line: 361, baseType: !4637, size: 64, offset: 64)
!4642 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !4638, file: !1691, line: 363, baseType: !4637, size: 64, offset: 128)
!4643 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !4638, file: !1691, line: 366, baseType: !4637, size: 64, offset: 192)
!4644 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !4638, file: !1691, line: 368, baseType: !1730, size: 32, offset: 256)
!4645 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !4638, file: !1691, line: 372, baseType: !6, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!4646 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !4638, file: !1691, line: 375, baseType: !6, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!4647 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !4638, file: !1691, line: 378, baseType: !6, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!4648 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !4638, file: !1691, line: 380, baseType: !6, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!4649 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !4638, file: !1691, line: 382, baseType: !6, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!4650 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !4638, file: !1691, line: 384, baseType: !6, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!4651 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !4638, file: !1691, line: 387, baseType: !6, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!4652 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !4535, file: !1691, line: 216, baseType: !4653, size: 320, offset: 1152)
!4653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !1691, line: 88, size: 320, elements: !4654)
!4654 = !{!4655, !4658, !4666, !4667, !4668, !4669, !4670, !4671, !4672, !4673}
!4655 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !4653, file: !1691, line: 90, baseType: !4656, size: 64)
!4656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4657, size: 64)
!4657 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !1691, line: 51, flags: DIFlagFwdDecl)
!4658 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !4653, file: !1691, line: 92, baseType: !4659, size: 192, offset: 64)
!4659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !1691, line: 57, size: 192, elements: !4660)
!4660 = !{!4661, !4662, !4663, !4664, !4665}
!4661 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !4659, file: !1691, line: 60, baseType: !1714, size: 64)
!4662 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !4659, file: !1691, line: 63, baseType: !1730, size: 32, offset: 64)
!4663 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !4659, file: !1691, line: 65, baseType: !1730, size: 32, offset: 96)
!4664 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !4659, file: !1691, line: 67, baseType: !1730, size: 32, offset: 128)
!4665 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !4659, file: !1691, line: 69, baseType: !1730, size: 32, offset: 160)
!4666 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !4653, file: !1691, line: 96, baseType: !6, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!4667 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !4653, file: !1691, line: 99, baseType: !6, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!4668 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !4653, file: !1691, line: 102, baseType: !6, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!4669 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !4653, file: !1691, line: 105, baseType: !6, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!4670 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !4653, file: !1691, line: 108, baseType: !6, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!4671 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !4653, file: !1691, line: 112, baseType: !6, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!4672 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !4653, file: !1691, line: 116, baseType: !6, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!4673 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !4653, file: !1691, line: 120, baseType: !6, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!4674 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !4535, file: !1691, line: 217, baseType: !4675, size: 320, offset: 1472)
!4675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !1691, line: 126, size: 320, elements: !4676)
!4676 = !{!4677, !4678, !4679, !4680, !4681, !4682, !4683}
!4677 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !4675, file: !1691, line: 128, baseType: !1714, size: 64)
!4678 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !4675, file: !1691, line: 130, baseType: !1714, size: 64, offset: 64)
!4679 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !4675, file: !1691, line: 134, baseType: !4534, size: 64, offset: 128)
!4680 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !4675, file: !1691, line: 137, baseType: !1730, size: 32, offset: 192)
!4681 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4675, file: !1691, line: 138, baseType: !1730, size: 32, offset: 224)
!4682 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !4675, file: !1691, line: 141, baseType: !1730, size: 32, offset: 256)
!4683 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !4675, file: !1691, line: 144, baseType: !1894, size: 8, offset: 288)
!4684 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !4535, file: !1691, line: 218, baseType: !4685, size: 32, offset: 1792)
!4685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !1691, line: 150, size: 32, elements: !4686)
!4686 = !{!4687}
!4687 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !4685, file: !1691, line: 151, baseType: !6, size: 32)
!4688 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !4535, file: !1691, line: 219, baseType: !4689, size: 192, offset: 1856)
!4689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !1691, line: 171, size: 192, elements: !4690)
!4690 = !{!4691, !4712, !4713}
!4691 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !4689, file: !1691, line: 173, baseType: !4692, size: 64)
!4692 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4693, size: 64)
!4693 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !1691, line: 169, baseType: !4694)
!4694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !1691, line: 169, size: 128, elements: !4695)
!4695 = !{!4696}
!4696 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4694, file: !1691, line: 169, baseType: !4697, size: 128)
!4697 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !1691, line: 168, baseType: !4698)
!4698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !1691, line: 168, size: 128, elements: !4699)
!4699 = !{!4700, !4701, !4702}
!4700 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4698, file: !1691, line: 168, baseType: !6, size: 32)
!4701 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4698, file: !1691, line: 168, baseType: !6, size: 32, offset: 32)
!4702 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4698, file: !1691, line: 168, baseType: !4703, size: 64, offset: 64)
!4703 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4704, size: 64, elements: !1743)
!4704 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !1691, line: 167, baseType: !4705)
!4705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4706, size: 64)
!4706 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !1691, line: 156, size: 192, elements: !4707)
!4707 = !{!4708, !4709, !4710, !4711}
!4708 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !4706, file: !1691, line: 159, baseType: !1780, size: 64)
!4709 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !4706, file: !1691, line: 161, baseType: !1780, size: 64, offset: 64)
!4710 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !4706, file: !1691, line: 163, baseType: !1894, size: 8, offset: 128)
!4711 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !4706, file: !1691, line: 165, baseType: !1894, size: 8, offset: 136)
!4712 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !4689, file: !1691, line: 174, baseType: !2649, size: 64, offset: 64)
!4713 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !4689, file: !1691, line: 175, baseType: !2649, size: 64, offset: 128)
!4714 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !4535, file: !1691, line: 220, baseType: !4715, size: 256, offset: 2048)
!4715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !1691, line: 74, size: 256, elements: !4716)
!4716 = !{!4717, !4718, !4719, !4720, !4721, !4722}
!4717 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !4715, file: !1691, line: 76, baseType: !1714, size: 64)
!4718 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !4715, file: !1691, line: 77, baseType: !1714, size: 64, offset: 64)
!4719 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !4715, file: !1691, line: 78, baseType: !1780, size: 64, offset: 128)
!4720 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !4715, file: !1691, line: 79, baseType: !1894, size: 8, offset: 192)
!4721 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !4715, file: !1691, line: 80, baseType: !1894, size: 8, offset: 200)
!4722 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !4715, file: !1691, line: 82, baseType: !1894, size: 8, offset: 208)
!4723 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !4535, file: !1691, line: 223, baseType: !2312, size: 64, offset: 2304)
!4724 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !4535, file: !1691, line: 225, baseType: !1730, size: 32, offset: 2368)
!4725 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !4535, file: !1691, line: 227, baseType: !1730, size: 32, offset: 2400)
!4726 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !4535, file: !1691, line: 231, baseType: !1730, size: 32, offset: 2432)
!4727 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !4535, file: !1691, line: 238, baseType: !6, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!4728 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !4535, file: !1691, line: 241, baseType: !6, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!4729 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !4535, file: !1691, line: 244, baseType: !6, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!4730 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !4535, file: !1691, line: 251, baseType: !6, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!4731 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !4535, file: !1691, line: 253, baseType: !6, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!4732 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !4535, file: !1691, line: 256, baseType: !6, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!4733 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !4535, file: !1691, line: 258, baseType: !6, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!4734 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !4535, file: !1691, line: 260, baseType: !6, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!4735 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !4535, file: !1691, line: 262, baseType: !6, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!4736 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !4535, file: !1691, line: 265, baseType: !6, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!4737 = !DILocation(line: 5681, column: 23, scope: !4532)
!4738 = !DILocation(line: 5683, column: 15, scope: !4532)
!4739 = !DILocation(line: 5685, column: 3, scope: !4532)
!4740 = !DILocation(line: 5686, column: 3, scope: !4532)
!4741 = !DILocation(line: 5689, column: 15, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 5689, column: 3)
!4743 = !DILocation(line: 5689, column: 13, scope: !4742)
!4744 = !DILocation(line: 5689, column: 8, scope: !4742)
!4745 = !DILocation(line: 5689, column: 29, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4742, file: !3, line: 5689, column: 3)
!4747 = !DILocation(line: 5689, column: 3, scope: !4742)
!4748 = !DILocation(line: 5694, column: 31, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4750, file: !3, line: 5694, column: 11)
!4750 = distinct !DILexicalBlock(scope: !4746, file: !3, line: 5690, column: 5)
!4751 = !DILocation(line: 5694, column: 37, scope: !4749)
!4752 = !DILocation(line: 5694, column: 12, scope: !4749)
!4753 = !DILocation(line: 5695, column: 4, scope: !4749)
!4754 = !DILocation(line: 5695, column: 7, scope: !4749)
!4755 = !DILocation(line: 5695, column: 13, scope: !4749)
!4756 = !DILocation(line: 5694, column: 11, scope: !4750)
!4757 = !DILocation(line: 5696, column: 2, scope: !4749)
!4758 = !DILocation(line: 5701, column: 11, scope: !4759)
!4759 = distinct !DILexicalBlock(scope: !4750, file: !3, line: 5701, column: 11)
!4760 = !DILocation(line: 5701, column: 17, scope: !4759)
!4761 = !DILocation(line: 5701, column: 23, scope: !4759)
!4762 = !DILocation(line: 5701, column: 11, scope: !4750)
!4763 = !DILocation(line: 5702, column: 2, scope: !4759)
!4764 = !DILocation(line: 5704, column: 33, scope: !4750)
!4765 = !DILocation(line: 5704, column: 39, scope: !4750)
!4766 = !DILocation(line: 5705, column: 23, scope: !4750)
!4767 = !DILocation(line: 5705, column: 5, scope: !4750)
!4768 = !DILocation(line: 5704, column: 7, scope: !4750)
!4769 = !DILocation(line: 5706, column: 5, scope: !4750)
!4770 = !DILocation(line: 5689, column: 42, scope: !4746)
!4771 = !DILocation(line: 5689, column: 48, scope: !4746)
!4772 = !DILocation(line: 5689, column: 40, scope: !4746)
!4773 = !DILocation(line: 5689, column: 3, scope: !4746)
!4774 = distinct !{!4774, !4747, !4775}
!4775 = !DILocation(line: 5706, column: 5, scope: !4742)
!4776 = !DILocation(line: 5708, column: 15, scope: !4777)
!4777 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 5708, column: 3)
!4778 = !DILocation(line: 5708, column: 13, scope: !4777)
!4779 = !DILocation(line: 5708, column: 8, scope: !4777)
!4780 = !DILocation(line: 5708, column: 29, scope: !4781)
!4781 = distinct !DILexicalBlock(scope: !4777, file: !3, line: 5708, column: 3)
!4782 = !DILocation(line: 5708, column: 3, scope: !4777)
!4783 = !DILocalVariable(name: "func", scope: !4784, file: !3, line: 5710, type: !2522)
!4784 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 5709, column: 5)
!4785 = !DILocation(line: 5710, column: 24, scope: !4784)
!4786 = !DILocalVariable(name: "bb", scope: !4784, file: !3, line: 5711, type: !2534)
!4787 = !DILocation(line: 5711, column: 19, scope: !4784)
!4788 = !DILocalVariable(name: "old_func_decl", scope: !4784, file: !3, line: 5712, type: !1780)
!4789 = !DILocation(line: 5712, column: 12, scope: !4784)
!4790 = !DILocation(line: 5715, column: 31, scope: !4791)
!4791 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 5715, column: 11)
!4792 = !DILocation(line: 5715, column: 37, scope: !4791)
!4793 = !DILocation(line: 5715, column: 12, scope: !4791)
!4794 = !DILocation(line: 5716, column: 4, scope: !4791)
!4795 = !DILocation(line: 5716, column: 7, scope: !4791)
!4796 = !DILocation(line: 5716, column: 13, scope: !4791)
!4797 = !DILocation(line: 5715, column: 11, scope: !4784)
!4798 = !DILocation(line: 5717, column: 2, scope: !4791)
!4799 = !DILocation(line: 5719, column: 11, scope: !4800)
!4800 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 5719, column: 11)
!4801 = !DILocation(line: 5719, column: 11, scope: !4784)
!4802 = !DILocation(line: 5720, column: 11, scope: !4800)
!4803 = !DILocation(line: 5722, column: 22, scope: !4800)
!4804 = !DILocation(line: 5722, column: 4, scope: !4800)
!4805 = !DILocation(line: 5720, column: 2, scope: !4800)
!4806 = !DILocation(line: 5724, column: 14, scope: !4784)
!4807 = !DILocation(line: 5724, column: 12, scope: !4784)
!4808 = !DILocation(line: 5725, column: 23, scope: !4784)
!4809 = !DILocation(line: 5725, column: 21, scope: !4784)
!4810 = !DILocation(line: 5726, column: 18, scope: !4784)
!4811 = !DILocation(line: 5726, column: 7, scope: !4784)
!4812 = !DILocation(line: 5727, column: 31, scope: !4784)
!4813 = !DILocation(line: 5727, column: 37, scope: !4784)
!4814 = !DILocation(line: 5727, column: 29, scope: !4784)
!4815 = !DILocation(line: 5732, column: 11, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 5732, column: 11)
!4817 = !DILocation(line: 5732, column: 17, scope: !4816)
!4818 = !DILocation(line: 5732, column: 23, scope: !4816)
!4819 = !DILocation(line: 5732, column: 11, scope: !4784)
!4820 = !DILocation(line: 5733, column: 2, scope: !4816)
!4821 = !DILocation(line: 5736, column: 7, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 5736, column: 7)
!4823 = !DILocation(line: 5736, column: 7, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 5736, column: 7)
!4825 = !DILocalVariable(name: "gsi", scope: !4826, file: !3, line: 5738, type: !4329)
!4826 = distinct !DILexicalBlock(scope: !4824, file: !3, line: 5737, column: 2)
!4827 = !DILocation(line: 5738, column: 25, scope: !4826)
!4828 = !DILocation(line: 5740, column: 31, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4826, file: !3, line: 5740, column: 4)
!4830 = !DILocation(line: 5740, column: 15, scope: !4829)
!4831 = !DILocation(line: 5740, column: 9, scope: !4829)
!4832 = !DILocation(line: 5740, column: 37, scope: !4833)
!4833 = distinct !DILexicalBlock(scope: !4829, file: !3, line: 5740, column: 4)
!4834 = !DILocation(line: 5740, column: 36, scope: !4833)
!4835 = !DILocation(line: 5740, column: 4, scope: !4829)
!4836 = !DILocalVariable(name: "phi", scope: !4837, file: !3, line: 5743, type: !2102)
!4837 = distinct !DILexicalBlock(scope: !4833, file: !3, line: 5742, column: 6)
!4838 = !DILocation(line: 5743, column: 15, scope: !4837)
!4839 = !DILocation(line: 5743, column: 21, scope: !4837)
!4840 = !DILocation(line: 5745, column: 46, scope: !4841)
!4841 = distinct !DILexicalBlock(scope: !4837, file: !3, line: 5745, column: 12)
!4842 = !DILocation(line: 5745, column: 27, scope: !4841)
!4843 = !DILocation(line: 5745, column: 12, scope: !4841)
!4844 = !DILocation(line: 5745, column: 12, scope: !4837)
!4845 = !DILocation(line: 5746, column: 22, scope: !4841)
!4846 = !DILocation(line: 5746, column: 3, scope: !4841)
!4847 = !DILocation(line: 5747, column: 6, scope: !4837)
!4848 = !DILocation(line: 5741, column: 9, scope: !4833)
!4849 = !DILocation(line: 5740, column: 4, scope: !4833)
!4850 = distinct !{!4850, !4835, !4851}
!4851 = !DILocation(line: 5747, column: 6, scope: !4829)
!4852 = !DILocation(line: 5749, column: 29, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4826, file: !3, line: 5749, column: 4)
!4854 = !DILocation(line: 5749, column: 15, scope: !4853)
!4855 = !DILocation(line: 5749, column: 9, scope: !4853)
!4856 = !DILocation(line: 5749, column: 35, scope: !4857)
!4857 = distinct !DILexicalBlock(scope: !4853, file: !3, line: 5749, column: 4)
!4858 = !DILocation(line: 5749, column: 34, scope: !4857)
!4859 = !DILocation(line: 5749, column: 4, scope: !4853)
!4860 = !DILocalVariable(name: "stmt", scope: !4861, file: !3, line: 5751, type: !2102)
!4861 = distinct !DILexicalBlock(scope: !4857, file: !3, line: 5750, column: 6)
!4862 = !DILocation(line: 5751, column: 15, scope: !4861)
!4863 = !DILocation(line: 5751, column: 22, scope: !4861)
!4864 = !DILocation(line: 5753, column: 27, scope: !4861)
!4865 = !DILocation(line: 5753, column: 8, scope: !4861)
!4866 = !DILocation(line: 5754, column: 6, scope: !4861)
!4867 = !DILocation(line: 5749, column: 52, scope: !4857)
!4868 = !DILocation(line: 5749, column: 4, scope: !4857)
!4869 = distinct !{!4869, !4859, !4870}
!4870 = !DILocation(line: 5754, column: 6, scope: !4853)
!4871 = !DILocation(line: 5755, column: 2, scope: !4826)
!4872 = distinct !{!4872, !4821, !4873}
!4873 = !DILocation(line: 5755, column: 2, scope: !4822)
!4874 = !DILocation(line: 5757, column: 31, scope: !4784)
!4875 = !DILocation(line: 5757, column: 29, scope: !4784)
!4876 = !DILocation(line: 5758, column: 7, scope: !4784)
!4877 = !DILocation(line: 5759, column: 5, scope: !4784)
!4878 = !DILocation(line: 5708, column: 42, scope: !4781)
!4879 = !DILocation(line: 5708, column: 48, scope: !4781)
!4880 = !DILocation(line: 5708, column: 40, scope: !4781)
!4881 = !DILocation(line: 5708, column: 3, scope: !4781)
!4882 = distinct !{!4882, !4782, !4883}
!4883 = !DILocation(line: 5759, column: 5, scope: !4777)
!4884 = !DILocation(line: 5762, column: 3, scope: !4532)
!4885 = !DILocation(line: 5764, column: 3, scope: !4532)
!4886 = !DILocation(line: 5766, column: 15, scope: !4532)
!4887 = !DILocation(line: 5768, column: 3, scope: !4532)
!4888 = distinct !DISubprogram(name: "get_varinfo", scope: !3, file: !3, line: 284, type: !4889, scopeLine: 285, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4889 = !DISubroutineType(types: !4890)
!4890 = !{!1758, !6}
!4891 = !DILocalVariable(name: "n", arg: 1, scope: !4888, file: !3, line: 284, type: !6)
!4892 = !DILocation(line: 284, column: 27, scope: !4888)
!4893 = !DILocation(line: 286, column: 10, scope: !4888)
!4894 = !DILocation(line: 286, column: 3, scope: !4888)
!4895 = distinct !DISubprogram(name: "VEC_varinfo_t_base_index", scope: !3, file: !3, line: 273, type: !4896, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4896 = !DISubroutineType(types: !4897)
!4897 = !{!1758, !4898, !6}
!4898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4899, size: 64)
!4899 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1751)
!4900 = !DILocalVariable(name: "vec_", arg: 1, scope: !4895, file: !3, line: 273, type: !4898)
!4901 = !DILocation(line: 273, column: 1, scope: !4895)
!4902 = !DILocalVariable(name: "ix_", arg: 2, scope: !4895, file: !3, line: 273, type: !6)
!4903 = !DILocation(line: 0, scope: !4895)
!4904 = distinct !DISubprogram(name: "VEC_constraint_t_base_iterate", scope: !3, file: !3, line: 189, type: !4905, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4905 = !DISubroutineType(types: !4906)
!4906 = !{!1730, !4907, !6, !4909}
!4907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4908, size: 64)
!4908 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1736)
!4909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1715, size: 64)
!4910 = !DILocalVariable(name: "vec_", arg: 1, scope: !4904, file: !3, line: 189, type: !4907)
!4911 = !DILocation(line: 189, column: 1, scope: !4904)
!4912 = !DILocalVariable(name: "ix_", arg: 2, scope: !4904, file: !3, line: 189, type: !6)
!4913 = !DILocalVariable(name: "ptr", arg: 3, scope: !4904, file: !3, line: 189, type: !4909)
!4914 = !DILocation(line: 189, column: 1, scope: !4915)
!4915 = distinct !DILexicalBlock(scope: !4904, file: !3, line: 189, column: 1)
!4916 = !DILocation(line: 189, column: 1, scope: !4917)
!4917 = distinct !DILexicalBlock(scope: !4915, file: !3, line: 189, column: 1)
!4918 = !DILocation(line: 189, column: 1, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4915, file: !3, line: 189, column: 1)
!4920 = distinct !DISubprogram(name: "VEC_varinfo_t_base_length", scope: !3, file: !3, line: 273, type: !4921, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4921 = !DISubroutineType(types: !4922)
!4922 = !{!6, !4898}
!4923 = !DILocalVariable(name: "vec_", arg: 1, scope: !4920, file: !3, line: 273, type: !4898)
!4924 = !DILocation(line: 273, column: 1, scope: !4920)
!4925 = distinct !DISubprogram(name: "dump_constraint_edge", scope: !3, file: !3, line: 624, type: !3401, scopeLine: 625, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4926 = !DILocalVariable(name: "file", arg: 1, scope: !4925, file: !3, line: 624, type: !3403)
!4927 = !DILocation(line: 624, column: 29, scope: !4925)
!4928 = !DILocalVariable(name: "c", arg: 2, scope: !4925, file: !3, line: 624, type: !1715)
!4929 = !DILocation(line: 624, column: 48, scope: !4925)
!4930 = !DILocation(line: 626, column: 7, scope: !4931)
!4931 = distinct !DILexicalBlock(scope: !4925, file: !3, line: 626, column: 7)
!4932 = !DILocation(line: 626, column: 10, scope: !4931)
!4933 = !DILocation(line: 626, column: 14, scope: !4931)
!4934 = !DILocation(line: 626, column: 19, scope: !4931)
!4935 = !DILocation(line: 626, column: 7, scope: !4925)
!4936 = !DILocalVariable(name: "src", scope: !4937, file: !3, line: 628, type: !1776)
!4937 = distinct !DILexicalBlock(scope: !4931, file: !3, line: 627, column: 5)
!4938 = !DILocation(line: 628, column: 19, scope: !4937)
!4939 = !DILocation(line: 628, column: 38, scope: !4937)
!4940 = !DILocation(line: 628, column: 41, scope: !4937)
!4941 = !DILocation(line: 628, column: 45, scope: !4937)
!4942 = !DILocation(line: 628, column: 25, scope: !4937)
!4943 = !DILocation(line: 628, column: 51, scope: !4937)
!4944 = !DILocalVariable(name: "dst", scope: !4937, file: !3, line: 629, type: !1776)
!4945 = !DILocation(line: 629, column: 19, scope: !4937)
!4946 = !DILocation(line: 629, column: 38, scope: !4937)
!4947 = !DILocation(line: 629, column: 41, scope: !4937)
!4948 = !DILocation(line: 629, column: 45, scope: !4937)
!4949 = !DILocation(line: 629, column: 25, scope: !4937)
!4950 = !DILocation(line: 629, column: 51, scope: !4937)
!4951 = !DILocation(line: 630, column: 16, scope: !4937)
!4952 = !DILocation(line: 630, column: 45, scope: !4937)
!4953 = !DILocation(line: 630, column: 50, scope: !4937)
!4954 = !DILocation(line: 630, column: 7, scope: !4937)
!4955 = !DILocation(line: 633, column: 11, scope: !4956)
!4956 = distinct !DILexicalBlock(scope: !4937, file: !3, line: 633, column: 11)
!4957 = !DILocation(line: 633, column: 14, scope: !4956)
!4958 = !DILocation(line: 633, column: 18, scope: !4956)
!4959 = !DILocation(line: 633, column: 23, scope: !4956)
!4960 = !DILocation(line: 633, column: 11, scope: !4937)
!4961 = !DILocation(line: 634, column: 18, scope: !4956)
!4962 = !DILocation(line: 634, column: 9, scope: !4956)
!4963 = !DILocation(line: 635, column: 16, scope: !4964)
!4964 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 635, column: 16)
!4965 = !DILocation(line: 635, column: 19, scope: !4964)
!4966 = !DILocation(line: 635, column: 23, scope: !4964)
!4967 = !DILocation(line: 635, column: 28, scope: !4964)
!4968 = !DILocation(line: 635, column: 16, scope: !4956)
!4969 = !DILocation(line: 636, column: 18, scope: !4964)
!4970 = !DILocation(line: 636, column: 9, scope: !4964)
!4971 = !DILocation(line: 641, column: 15, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4973, file: !3, line: 641, column: 15)
!4973 = distinct !DILexicalBlock(scope: !4964, file: !3, line: 638, column: 9)
!4974 = !DILocation(line: 641, column: 18, scope: !4972)
!4975 = !DILocation(line: 641, column: 22, scope: !4972)
!4976 = !DILocation(line: 641, column: 32, scope: !4972)
!4977 = !DILocation(line: 641, column: 35, scope: !4972)
!4978 = !DILocation(line: 641, column: 39, scope: !4972)
!4979 = !DILocation(line: 641, column: 29, scope: !4972)
!4980 = !DILocation(line: 641, column: 15, scope: !4973)
!4981 = !DILocation(line: 642, column: 22, scope: !4972)
!4982 = !DILocation(line: 642, column: 13, scope: !4972)
!4983 = !DILocation(line: 644, column: 22, scope: !4972)
!4984 = !DILocation(line: 644, column: 13, scope: !4972)
!4985 = !DILocation(line: 646, column: 5, scope: !4937)
!4986 = !DILocation(line: 647, column: 1, scope: !4925)
!4987 = distinct !DISubprogram(name: "find", scope: !3, file: !3, line: 518, type: !4988, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!4988 = !DISubroutineType(types: !4989)
!4989 = !{!6, !6}
!4990 = !DILocalVariable(name: "node", arg: 1, scope: !4987, file: !3, line: 518, type: !6)
!4991 = !DILocation(line: 518, column: 20, scope: !4987)
!4992 = !DILocation(line: 520, column: 3, scope: !4987)
!4993 = !DILocation(line: 521, column: 7, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4987, file: !3, line: 521, column: 7)
!4995 = !DILocation(line: 521, column: 14, scope: !4994)
!4996 = !DILocation(line: 521, column: 18, scope: !4994)
!4997 = !DILocation(line: 521, column: 27, scope: !4994)
!4998 = !DILocation(line: 521, column: 24, scope: !4994)
!4999 = !DILocation(line: 521, column: 7, scope: !4987)
!5000 = !DILocation(line: 522, column: 37, scope: !4994)
!5001 = !DILocation(line: 522, column: 44, scope: !4994)
!5002 = !DILocation(line: 522, column: 48, scope: !4994)
!5003 = !DILocation(line: 522, column: 31, scope: !4994)
!5004 = !DILocation(line: 522, column: 12, scope: !4994)
!5005 = !DILocation(line: 522, column: 19, scope: !4994)
!5006 = !DILocation(line: 522, column: 23, scope: !4994)
!5007 = !DILocation(line: 522, column: 29, scope: !4994)
!5008 = !DILocation(line: 522, column: 5, scope: !4994)
!5009 = !DILocation(line: 523, column: 10, scope: !4987)
!5010 = !DILocation(line: 523, column: 3, scope: !4987)
!5011 = !DILocation(line: 524, column: 1, scope: !4987)
!5012 = distinct !DISubprogram(name: "pt_solution_empty_p", scope: !3, file: !3, line: 4950, type: !4012, scopeLine: 4951, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!5013 = !DILocalVariable(name: "pt", arg: 1, scope: !5012, file: !3, line: 4950, type: !3756)
!5014 = !DILocation(line: 4950, column: 42, scope: !5012)
!5015 = !DILocation(line: 4952, column: 7, scope: !5016)
!5016 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 4952, column: 7)
!5017 = !DILocation(line: 4952, column: 11, scope: !5016)
!5018 = !DILocation(line: 4953, column: 7, scope: !5016)
!5019 = !DILocation(line: 4953, column: 10, scope: !5016)
!5020 = !DILocation(line: 4953, column: 14, scope: !5016)
!5021 = !DILocation(line: 4952, column: 7, scope: !5012)
!5022 = !DILocation(line: 4954, column: 5, scope: !5016)
!5023 = !DILocation(line: 4956, column: 7, scope: !5024)
!5024 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 4956, column: 7)
!5025 = !DILocation(line: 4956, column: 11, scope: !5024)
!5026 = !DILocation(line: 4957, column: 7, scope: !5024)
!5027 = !DILocation(line: 4957, column: 11, scope: !5024)
!5028 = !DILocation(line: 4956, column: 7, scope: !5012)
!5029 = !DILocation(line: 4958, column: 5, scope: !5024)
!5030 = !DILocation(line: 4961, column: 7, scope: !5031)
!5031 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 4961, column: 7)
!5032 = !DILocation(line: 4961, column: 11, scope: !5031)
!5033 = !DILocation(line: 4962, column: 7, scope: !5031)
!5034 = !DILocation(line: 4962, column: 33, scope: !5031)
!5035 = !DILocation(line: 4962, column: 39, scope: !5031)
!5036 = !DILocation(line: 4962, column: 50, scope: !5031)
!5037 = !DILocation(line: 4962, column: 11, scope: !5031)
!5038 = !DILocation(line: 4961, column: 7, scope: !5012)
!5039 = !DILocation(line: 4963, column: 5, scope: !5031)
!5040 = !DILocation(line: 4965, column: 3, scope: !5012)
!5041 = !DILocation(line: 4966, column: 1, scope: !5012)
!5042 = distinct !DISubprogram(name: "init_alias_vars", scope: !3, file: !3, line: 5337, type: !3548, scopeLine: 5338, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!5043 = !DILocation(line: 5339, column: 26, scope: !5042)
!5044 = !DILocation(line: 5339, column: 57, scope: !5042)
!5045 = !DILocation(line: 5339, column: 25, scope: !5042)
!5046 = !DILocation(line: 5339, column: 23, scope: !5042)
!5047 = !DILocation(line: 5341, column: 3, scope: !5042)
!5048 = !DILocation(line: 5342, column: 3, scope: !5042)
!5049 = !DILocation(line: 5343, column: 3, scope: !5042)
!5050 = !DILocation(line: 5345, column: 21, scope: !5042)
!5051 = !DILocation(line: 5345, column: 19, scope: !5042)
!5052 = !DILocation(line: 5347, column: 24, scope: !5042)
!5053 = !DILocation(line: 5347, column: 22, scope: !5042)
!5054 = !DILocation(line: 5349, column: 17, scope: !5042)
!5055 = !DILocation(line: 5349, column: 15, scope: !5042)
!5056 = !DILocation(line: 5350, column: 12, scope: !5042)
!5057 = !DILocation(line: 5350, column: 10, scope: !5042)
!5058 = !DILocation(line: 5351, column: 17, scope: !5042)
!5059 = !DILocation(line: 5351, column: 15, scope: !5042)
!5060 = !DILocation(line: 5353, column: 3, scope: !5042)
!5061 = !DILocation(line: 5354, column: 25, scope: !5042)
!5062 = !DILocation(line: 5354, column: 23, scope: !5042)
!5063 = !DILocation(line: 5356, column: 3, scope: !5042)
!5064 = !DILocation(line: 5357, column: 1, scope: !5042)
!5065 = distinct !DISubprogram(name: "init_alias_heapvars", scope: !3, file: !3, line: 5398, type: !3548, scopeLine: 5399, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!5066 = !DILocation(line: 5400, column: 8, scope: !5067)
!5067 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 5400, column: 7)
!5068 = !DILocation(line: 5400, column: 7, scope: !5065)
!5069 = !DILocation(line: 5401, column: 24, scope: !5067)
!5070 = !DILocation(line: 5401, column: 22, scope: !5067)
!5071 = !DILocation(line: 5401, column: 5, scope: !5067)
!5072 = !DILocation(line: 5403, column: 1, scope: !5065)
!5073 = distinct !DISubprogram(name: "intra_create_variable_infos", scope: !3, file: !3, line: 4616, type: !3548, scopeLine: 4617, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!5074 = !DILocalVariable(name: "t", scope: !5073, file: !3, line: 4618, type: !1780)
!5075 = !DILocation(line: 4618, column: 8, scope: !5073)
!5076 = !DILocation(line: 4622, column: 12, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 4622, column: 3)
!5078 = !DILocation(line: 4622, column: 10, scope: !5077)
!5079 = !DILocation(line: 4622, column: 8, scope: !5077)
!5080 = !DILocation(line: 4622, column: 52, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !5077, file: !3, line: 4622, column: 3)
!5082 = !DILocation(line: 4622, column: 3, scope: !5077)
!5083 = !DILocalVariable(name: "p", scope: !5084, file: !3, line: 4624, type: !1758)
!5084 = distinct !DILexicalBlock(scope: !5081, file: !3, line: 4623, column: 5)
!5085 = !DILocation(line: 4624, column: 17, scope: !5084)
!5086 = !DILocation(line: 4626, column: 33, scope: !5087)
!5087 = distinct !DILexicalBlock(scope: !5084, file: !3, line: 4626, column: 11)
!5088 = !DILocation(line: 4626, column: 12, scope: !5087)
!5089 = !DILocation(line: 4626, column: 11, scope: !5084)
!5090 = !DILocation(line: 4627, column: 2, scope: !5087)
!5091 = !DILocation(line: 4631, column: 11, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !5084, file: !3, line: 4631, column: 11)
!5093 = !DILocation(line: 4632, column: 4, scope: !5092)
!5094 = !DILocation(line: 4632, column: 7, scope: !5092)
!5095 = !DILocation(line: 4633, column: 4, scope: !5092)
!5096 = !DILocation(line: 4633, column: 7, scope: !5092)
!5097 = !DILocation(line: 4631, column: 11, scope: !5084)
!5098 = !DILocalVariable(name: "lhsc", scope: !5099, file: !3, line: 4635, type: !1720)
!5099 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 4634, column: 2)
!5100 = !DILocation(line: 4635, column: 27, scope: !5099)
!5101 = !DILocalVariable(name: "rhsc", scope: !5099, file: !3, line: 4635, type: !1720)
!5102 = !DILocation(line: 4635, column: 33, scope: !5099)
!5103 = !DILocalVariable(name: "vi", scope: !5099, file: !3, line: 4636, type: !1758)
!5104 = !DILocation(line: 4636, column: 14, scope: !5099)
!5105 = !DILocalVariable(name: "heapvar", scope: !5099, file: !3, line: 4637, type: !1780)
!5106 = !DILocation(line: 4637, column: 9, scope: !5099)
!5107 = !DILocation(line: 4637, column: 35, scope: !5099)
!5108 = !DILocation(line: 4637, column: 19, scope: !5099)
!5109 = !DILocation(line: 4638, column: 8, scope: !5110)
!5110 = distinct !DILexicalBlock(scope: !5099, file: !3, line: 4638, column: 8)
!5111 = !DILocation(line: 4638, column: 16, scope: !5110)
!5112 = !DILocation(line: 4638, column: 8, scope: !5099)
!5113 = !DILocalVariable(name: "ann", scope: !5114, file: !3, line: 4640, type: !5115)
!5114 = distinct !DILexicalBlock(scope: !5110, file: !3, line: 4639, column: 6)
!5115 = !DIDerivedType(tag: DW_TAG_typedef, name: "var_ann_t", file: !2474, line: 297, baseType: !2472)
!5116 = !DILocation(line: 4640, column: 18, scope: !5114)
!5117 = !DILocation(line: 4641, column: 38, scope: !5114)
!5118 = !DILocation(line: 4641, column: 18, scope: !5114)
!5119 = !DILocation(line: 4641, column: 16, scope: !5114)
!5120 = !DILocation(line: 4643, column: 8, scope: !5114)
!5121 = !DILocation(line: 4643, column: 32, scope: !5114)
!5122 = !DILocation(line: 4644, column: 24, scope: !5114)
!5123 = !DILocation(line: 4644, column: 30, scope: !5114)
!5124 = !DILocation(line: 4644, column: 8, scope: !5114)
!5125 = !DILocation(line: 4645, column: 27, scope: !5114)
!5126 = !DILocation(line: 4645, column: 14, scope: !5114)
!5127 = !DILocation(line: 4645, column: 12, scope: !5114)
!5128 = !DILocation(line: 4646, column: 8, scope: !5114)
!5129 = !DILocation(line: 4646, column: 13, scope: !5114)
!5130 = !DILocation(line: 4646, column: 24, scope: !5114)
!5131 = !DILocation(line: 4647, column: 6, scope: !5114)
!5132 = !DILocation(line: 4648, column: 32, scope: !5133)
!5133 = distinct !DILexicalBlock(scope: !5099, file: !3, line: 4648, column: 8)
!5134 = !DILocation(line: 4648, column: 8, scope: !5133)
!5135 = !DILocation(line: 4648, column: 8, scope: !5099)
!5136 = !DILocation(line: 4649, column: 26, scope: !5133)
!5137 = !DILocation(line: 4649, column: 6, scope: !5133)
!5138 = !DILocation(line: 4650, column: 32, scope: !5099)
!5139 = !DILocation(line: 4650, column: 15, scope: !5099)
!5140 = !DILocation(line: 4650, column: 36, scope: !5099)
!5141 = !DILocation(line: 4650, column: 9, scope: !5099)
!5142 = !DILocation(line: 4650, column: 13, scope: !5099)
!5143 = !DILocation(line: 4651, column: 9, scope: !5099)
!5144 = !DILocation(line: 4651, column: 14, scope: !5099)
!5145 = !DILocation(line: 4652, column: 9, scope: !5099)
!5146 = !DILocation(line: 4652, column: 16, scope: !5099)
!5147 = !DILocation(line: 4653, column: 38, scope: !5099)
!5148 = !DILocation(line: 4653, column: 21, scope: !5099)
!5149 = !DILocation(line: 4653, column: 19, scope: !5099)
!5150 = !DILocation(line: 4653, column: 49, scope: !5099)
!5151 = !DILocation(line: 4653, column: 9, scope: !5099)
!5152 = !DILocation(line: 4653, column: 13, scope: !5099)
!5153 = !DILocation(line: 4654, column: 9, scope: !5099)
!5154 = !DILocation(line: 4654, column: 14, scope: !5099)
!5155 = !DILocation(line: 4655, column: 9, scope: !5099)
!5156 = !DILocation(line: 4655, column: 16, scope: !5099)
!5157 = !DILocation(line: 4656, column: 24, scope: !5099)
!5158 = !DILocation(line: 4656, column: 4, scope: !5099)
!5159 = !DILocation(line: 4657, column: 4, scope: !5099)
!5160 = !DILocation(line: 4657, column: 8, scope: !5099)
!5161 = !DILocation(line: 4657, column: 24, scope: !5099)
!5162 = !DILocation(line: 4658, column: 4, scope: !5099)
!5163 = !DILocation(line: 4661, column: 33, scope: !5164)
!5164 = distinct !DILexicalBlock(scope: !5084, file: !3, line: 4661, column: 7)
!5165 = !DILocation(line: 4661, column: 16, scope: !5164)
!5166 = !DILocation(line: 4661, column: 14, scope: !5164)
!5167 = !DILocation(line: 4661, column: 12, scope: !5164)
!5168 = !DILocation(line: 4661, column: 37, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5164, file: !3, line: 4661, column: 7)
!5170 = !DILocation(line: 4661, column: 7, scope: !5164)
!5171 = !DILocation(line: 4662, column: 6, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5169, file: !3, line: 4662, column: 6)
!5173 = !DILocation(line: 4662, column: 9, scope: !5172)
!5174 = !DILocation(line: 4662, column: 6, scope: !5169)
!5175 = !DILocation(line: 4663, column: 26, scope: !5172)
!5176 = !DILocation(line: 4663, column: 4, scope: !5172)
!5177 = !DILocation(line: 4661, column: 44, scope: !5169)
!5178 = !DILocation(line: 4661, column: 47, scope: !5169)
!5179 = !DILocation(line: 4661, column: 42, scope: !5169)
!5180 = !DILocation(line: 4661, column: 7, scope: !5169)
!5181 = distinct !{!5181, !5170, !5182}
!5182 = !DILocation(line: 4663, column: 40, scope: !5164)
!5183 = !DILocation(line: 4664, column: 11, scope: !5184)
!5184 = distinct !DILexicalBlock(scope: !5084, file: !3, line: 4664, column: 11)
!5185 = !DILocation(line: 4665, column: 4, scope: !5184)
!5186 = !DILocation(line: 4665, column: 7, scope: !5184)
!5187 = !DILocation(line: 4664, column: 11, scope: !5084)
!5188 = !DILocation(line: 4666, column: 50, scope: !5184)
!5189 = !DILocation(line: 4666, column: 33, scope: !5184)
!5190 = !DILocation(line: 4666, column: 2, scope: !5184)
!5191 = !DILocation(line: 4667, column: 5, scope: !5084)
!5192 = !DILocation(line: 4622, column: 59, scope: !5081)
!5193 = !DILocation(line: 4622, column: 57, scope: !5081)
!5194 = !DILocation(line: 4622, column: 3, scope: !5081)
!5195 = distinct !{!5195, !5082, !5196}
!5196 = !DILocation(line: 4667, column: 5, scope: !5077)
!5197 = !DILocation(line: 4670, column: 7, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 4670, column: 7)
!5199 = !DILocation(line: 4671, column: 7, scope: !5198)
!5200 = !DILocation(line: 4671, column: 10, scope: !5198)
!5201 = !DILocation(line: 4670, column: 7, scope: !5073)
!5202 = !DILocalVariable(name: "p", scope: !5203, file: !3, line: 4673, type: !1758)
!5203 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 4672, column: 5)
!5204 = !DILocation(line: 4673, column: 17, scope: !5203)
!5205 = !DILocalVariable(name: "result_vi", scope: !5203, file: !3, line: 4673, type: !1758)
!5206 = !DILocation(line: 4673, column: 20, scope: !5203)
!5207 = !DILocation(line: 4673, column: 49, scope: !5203)
!5208 = !DILocation(line: 4673, column: 32, scope: !5203)
!5209 = !DILocation(line: 4675, column: 16, scope: !5210)
!5210 = distinct !DILexicalBlock(scope: !5203, file: !3, line: 4675, column: 7)
!5211 = !DILocation(line: 4675, column: 14, scope: !5210)
!5212 = !DILocation(line: 4675, column: 12, scope: !5210)
!5213 = !DILocation(line: 4675, column: 27, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5210, file: !3, line: 4675, column: 7)
!5215 = !DILocation(line: 4675, column: 7, scope: !5210)
!5216 = !DILocation(line: 4676, column: 24, scope: !5214)
!5217 = !DILocation(line: 4676, column: 2, scope: !5214)
!5218 = !DILocation(line: 4675, column: 34, scope: !5214)
!5219 = !DILocation(line: 4675, column: 37, scope: !5214)
!5220 = !DILocation(line: 4675, column: 32, scope: !5214)
!5221 = !DILocation(line: 4675, column: 7, scope: !5214)
!5222 = distinct !{!5222, !5215, !5223}
!5223 = !DILocation(line: 4676, column: 38, scope: !5210)
!5224 = !DILocation(line: 4677, column: 5, scope: !5203)
!5225 = !DILocation(line: 4680, column: 7, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 4680, column: 7)
!5227 = !DILocation(line: 4680, column: 13, scope: !5226)
!5228 = !DILocation(line: 4680, column: 31, scope: !5226)
!5229 = !DILocation(line: 4680, column: 7, scope: !5073)
!5230 = !DILocalVariable(name: "p", scope: !5231, file: !3, line: 4682, type: !1758)
!5231 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 4681, column: 5)
!5232 = !DILocation(line: 4682, column: 17, scope: !5231)
!5233 = !DILocalVariable(name: "chain_vi", scope: !5231, file: !3, line: 4682, type: !1758)
!5234 = !DILocation(line: 4682, column: 20, scope: !5231)
!5235 = !DILocation(line: 4682, column: 48, scope: !5231)
!5236 = !DILocation(line: 4682, column: 54, scope: !5231)
!5237 = !DILocation(line: 4682, column: 31, scope: !5231)
!5238 = !DILocation(line: 4684, column: 16, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 4684, column: 7)
!5240 = !DILocation(line: 4684, column: 14, scope: !5239)
!5241 = !DILocation(line: 4684, column: 12, scope: !5239)
!5242 = !DILocation(line: 4684, column: 26, scope: !5243)
!5243 = distinct !DILexicalBlock(scope: !5239, file: !3, line: 4684, column: 7)
!5244 = !DILocation(line: 4684, column: 7, scope: !5239)
!5245 = !DILocation(line: 4685, column: 24, scope: !5243)
!5246 = !DILocation(line: 4685, column: 2, scope: !5243)
!5247 = !DILocation(line: 4684, column: 33, scope: !5243)
!5248 = !DILocation(line: 4684, column: 36, scope: !5243)
!5249 = !DILocation(line: 4684, column: 31, scope: !5243)
!5250 = !DILocation(line: 4684, column: 7, scope: !5243)
!5251 = distinct !{!5251, !5244, !5252}
!5252 = !DILocation(line: 4685, column: 38, scope: !5239)
!5253 = !DILocation(line: 4686, column: 5, scope: !5231)
!5254 = !DILocation(line: 4687, column: 1, scope: !5073)
!5255 = distinct !DISubprogram(name: "gsi_end_p", scope: !851, file: !851, line: 4467, type: !5256, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!5256 = !DISubroutineType(types: !5257)
!5257 = !{!1894, !4329}
!5258 = !DILocalVariable(name: "i", arg: 1, scope: !5255, file: !851, line: 4467, type: !4329)
!5259 = !DILocation(line: 4467, column: 33, scope: !5255)
!5260 = !DILocation(line: 4469, column: 12, scope: !5255)
!5261 = !DILocation(line: 4469, column: 16, scope: !5255)
!5262 = !DILocation(line: 4469, column: 10, scope: !5255)
!5263 = !DILocation(line: 4469, column: 3, scope: !5255)
!5264 = distinct !DISubprogram(name: "gsi_stmt", scope: !851, file: !851, line: 4501, type: !5265, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!5265 = !DISubroutineType(types: !5266)
!5266 = !{!2102, !4329}
!5267 = !DILocalVariable(name: "i", arg: 1, scope: !5264, file: !851, line: 4501, type: !4329)
!5268 = !DILocation(line: 4501, column: 32, scope: !5264)
!5269 = !DILocation(line: 4503, column: 12, scope: !5264)
!5270 = !DILocation(line: 4503, column: 17, scope: !5264)
!5271 = !DILocation(line: 4503, column: 3, scope: !5264)
!5272 = distinct !DISubprogram(name: "gimple_phi_result", scope: !851, file: !851, line: 3071, type: !5273, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!5273 = !DISubroutineType(types: !5274)
!5274 = !{!1780, !5275}
!5275 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1781, line: 60, baseType: !3152)
!5276 = !DILocalVariable(name: "gs", arg: 1, scope: !5272, file: !851, line: 3071, type: !5275)
!5277 = !DILocation(line: 3071, column: 33, scope: !5272)
!5278 = !DILocation(line: 3074, column: 10, scope: !5272)
!5279 = !DILocation(line: 3074, column: 14, scope: !5272)
!5280 = !DILocation(line: 3074, column: 25, scope: !5272)
!5281 = !DILocation(line: 3074, column: 3, scope: !5272)
!5282 = distinct !DISubprogram(name: "find_func_aliases", scope: !3, file: !3, line: 3620, type: !5283, scopeLine: 3621, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!5283 = !DISubroutineType(types: !5284)
!5284 = !{null, !2102}
!5285 = !DILocalVariable(name: "origt", arg: 1, scope: !5282, file: !3, line: 3620, type: !2102)
!5286 = !DILocation(line: 3620, column: 27, scope: !5282)
!5287 = !DILocalVariable(name: "t", scope: !5282, file: !3, line: 3622, type: !2102)
!5288 = !DILocation(line: 3622, column: 10, scope: !5282)
!5289 = !DILocation(line: 3622, column: 14, scope: !5282)
!5290 = !DILocalVariable(name: "lhsc", scope: !5282, file: !3, line: 3623, type: !3154)
!5291 = !DILocation(line: 3623, column: 20, scope: !5282)
!5292 = !DILocalVariable(name: "rhsc", scope: !5282, file: !3, line: 3624, type: !3154)
!5293 = !DILocation(line: 3624, column: 20, scope: !5282)
!5294 = !DILocalVariable(name: "c", scope: !5282, file: !3, line: 3625, type: !5295)
!5295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1720, size: 64)
!5296 = !DILocation(line: 3625, column: 27, scope: !5282)
!5297 = !DILocation(line: 3628, column: 20, scope: !5298)
!5298 = distinct !DILexicalBlock(scope: !5282, file: !3, line: 3628, column: 7)
!5299 = !DILocation(line: 3628, column: 7, scope: !5298)
!5300 = !DILocation(line: 3628, column: 23, scope: !5298)
!5301 = !DILocation(line: 3628, column: 7, scope: !5282)
!5302 = !DILocation(line: 3630, column: 7, scope: !5303)
!5303 = distinct !DILexicalBlock(scope: !5298, file: !3, line: 3629, column: 5)
!5304 = !DILocation(line: 3634, column: 51, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5303, file: !3, line: 3634, column: 11)
!5306 = !DILocation(line: 3634, column: 32, scope: !5305)
!5307 = !DILocation(line: 3634, column: 11, scope: !5305)
!5308 = !DILocation(line: 3634, column: 11, scope: !5303)
!5309 = !DILocalVariable(name: "i", scope: !5310, file: !3, line: 3636, type: !1727)
!5310 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 3635, column: 2)
!5311 = !DILocation(line: 3636, column: 11, scope: !5310)
!5312 = !DILocalVariable(name: "j", scope: !5310, file: !3, line: 3637, type: !6)
!5313 = !DILocation(line: 3637, column: 17, scope: !5310)
!5314 = !DILocation(line: 3641, column: 43, scope: !5310)
!5315 = !DILocation(line: 3641, column: 24, scope: !5310)
!5316 = !DILocation(line: 3641, column: 4, scope: !5310)
!5317 = !DILocation(line: 3642, column: 11, scope: !5318)
!5318 = distinct !DILexicalBlock(scope: !5310, file: !3, line: 3642, column: 4)
!5319 = !DILocation(line: 3642, column: 9, scope: !5318)
!5320 = !DILocation(line: 3642, column: 16, scope: !5321)
!5321 = distinct !DILexicalBlock(scope: !5318, file: !3, line: 3642, column: 4)
!5322 = !DILocation(line: 3642, column: 41, scope: !5321)
!5323 = !DILocation(line: 3642, column: 20, scope: !5321)
!5324 = !DILocation(line: 3642, column: 18, scope: !5321)
!5325 = !DILocation(line: 3642, column: 4, scope: !5318)
!5326 = !DILocalVariable(name: "strippedrhs", scope: !5327, file: !3, line: 3644, type: !1780)
!5327 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 3643, column: 6)
!5328 = !DILocation(line: 3644, column: 13, scope: !5327)
!5329 = !DILocation(line: 3644, column: 27, scope: !5327)
!5330 = !DILocation(line: 3646, column: 8, scope: !5327)
!5331 = !DILocation(line: 3647, column: 48, scope: !5327)
!5332 = !DILocation(line: 3647, column: 51, scope: !5327)
!5333 = !DILocation(line: 3647, column: 28, scope: !5327)
!5334 = !DILocation(line: 3647, column: 8, scope: !5327)
!5335 = !DILocation(line: 3649, column: 15, scope: !5336)
!5336 = distinct !DILexicalBlock(scope: !5327, file: !3, line: 3649, column: 8)
!5337 = !DILocation(line: 3649, column: 13, scope: !5336)
!5338 = !DILocation(line: 3649, column: 20, scope: !5339)
!5339 = distinct !DILexicalBlock(scope: !5336, file: !3, line: 3649, column: 8)
!5340 = !DILocation(line: 3649, column: 8, scope: !5336)
!5341 = !DILocalVariable(name: "c2", scope: !5342, file: !3, line: 3651, type: !5295)
!5342 = distinct !DILexicalBlock(scope: !5339, file: !3, line: 3650, column: 3)
!5343 = !DILocation(line: 3651, column: 29, scope: !5342)
!5344 = !DILocation(line: 3652, column: 5, scope: !5342)
!5345 = !DILocation(line: 3652, column: 12, scope: !5342)
!5346 = !DILocation(line: 3652, column: 36, scope: !5342)
!5347 = !DILocation(line: 3654, column: 14, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5342, file: !3, line: 3653, column: 7)
!5349 = !DILocation(line: 3654, column: 12, scope: !5348)
!5350 = !DILocation(line: 3655, column: 46, scope: !5348)
!5351 = !DILocation(line: 3655, column: 50, scope: !5348)
!5352 = !DILocation(line: 3655, column: 29, scope: !5348)
!5353 = !DILocation(line: 3655, column: 9, scope: !5348)
!5354 = !DILocation(line: 3656, column: 9, scope: !5348)
!5355 = distinct !{!5355, !5344, !5356}
!5356 = !DILocation(line: 3657, column: 7, scope: !5342)
!5357 = !DILocation(line: 3658, column: 3, scope: !5342)
!5358 = !DILocation(line: 3649, column: 53, scope: !5339)
!5359 = !DILocation(line: 3649, column: 8, scope: !5339)
!5360 = distinct !{!5360, !5340, !5361}
!5361 = !DILocation(line: 3658, column: 3, scope: !5336)
!5362 = !DILocation(line: 3659, column: 6, scope: !5327)
!5363 = !DILocation(line: 3642, column: 46, scope: !5321)
!5364 = !DILocation(line: 3642, column: 4, scope: !5321)
!5365 = distinct !{!5365, !5325, !5366}
!5366 = !DILocation(line: 3659, column: 6, scope: !5318)
!5367 = !DILocation(line: 3660, column: 2, scope: !5310)
!5368 = !DILocation(line: 3661, column: 5, scope: !5303)
!5369 = !DILocation(line: 3669, column: 28, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5298, file: !3, line: 3669, column: 12)
!5371 = !DILocation(line: 3669, column: 12, scope: !5370)
!5372 = !DILocation(line: 3669, column: 12, scope: !5298)
!5373 = !DILocalVariable(name: "fndecl", scope: !5374, file: !3, line: 3671, type: !1780)
!5374 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 3670, column: 5)
!5375 = !DILocation(line: 3671, column: 12, scope: !5374)
!5376 = !DILocation(line: 3671, column: 41, scope: !5374)
!5377 = !DILocation(line: 3671, column: 21, scope: !5374)
!5378 = !DILocation(line: 3672, column: 11, scope: !5379)
!5379 = distinct !DILexicalBlock(scope: !5374, file: !3, line: 3672, column: 11)
!5380 = !DILocation(line: 3672, column: 18, scope: !5379)
!5381 = !DILocation(line: 3673, column: 4, scope: !5379)
!5382 = !DILocation(line: 3673, column: 7, scope: !5379)
!5383 = !DILocation(line: 3673, column: 36, scope: !5379)
!5384 = !DILocation(line: 3672, column: 11, scope: !5374)
!5385 = !DILocation(line: 3676, column: 10, scope: !5379)
!5386 = !DILocation(line: 3676, column: 2, scope: !5379)
!5387 = !DILocalVariable(name: "res", scope: !5388, file: !3, line: 3694, type: !1780)
!5388 = distinct !DILexicalBlock(scope: !5389, file: !3, line: 3693, column: 6)
!5389 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3677, column: 4)
!5390 = !DILocation(line: 3694, column: 13, scope: !5388)
!5391 = !DILocation(line: 3694, column: 36, scope: !5388)
!5392 = !DILocation(line: 3694, column: 19, scope: !5388)
!5393 = !DILocalVariable(name: "dest", scope: !5388, file: !3, line: 3695, type: !1780)
!5394 = !DILocation(line: 3695, column: 13, scope: !5388)
!5395 = !DILocation(line: 3695, column: 37, scope: !5388)
!5396 = !DILocation(line: 3695, column: 41, scope: !5388)
!5397 = !DILocation(line: 3696, column: 13, scope: !5388)
!5398 = !DILocation(line: 3695, column: 20, scope: !5388)
!5399 = !DILocalVariable(name: "src", scope: !5388, file: !3, line: 3697, type: !1780)
!5400 = !DILocation(line: 3697, column: 13, scope: !5388)
!5401 = !DILocation(line: 3697, column: 36, scope: !5388)
!5402 = !DILocation(line: 3697, column: 40, scope: !5388)
!5403 = !DILocation(line: 3698, column: 12, scope: !5388)
!5404 = !DILocation(line: 3697, column: 19, scope: !5388)
!5405 = !DILocation(line: 3699, column: 12, scope: !5406)
!5406 = distinct !DILexicalBlock(scope: !5388, file: !3, line: 3699, column: 12)
!5407 = !DILocation(line: 3699, column: 16, scope: !5406)
!5408 = !DILocation(line: 3699, column: 12, scope: !5388)
!5409 = !DILocation(line: 3701, column: 25, scope: !5410)
!5410 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 3700, column: 3)
!5411 = !DILocation(line: 3701, column: 5, scope: !5410)
!5412 = !DILocation(line: 3702, column: 9, scope: !5413)
!5413 = distinct !DILexicalBlock(scope: !5410, file: !3, line: 3702, column: 9)
!5414 = !DILocation(line: 3702, column: 37, scope: !5413)
!5415 = !DILocation(line: 3703, column: 9, scope: !5413)
!5416 = !DILocation(line: 3703, column: 12, scope: !5413)
!5417 = !DILocation(line: 3703, column: 40, scope: !5413)
!5418 = !DILocation(line: 3704, column: 9, scope: !5413)
!5419 = !DILocation(line: 3704, column: 12, scope: !5413)
!5420 = !DILocation(line: 3704, column: 40, scope: !5413)
!5421 = !DILocation(line: 3702, column: 9, scope: !5410)
!5422 = !DILocation(line: 3705, column: 38, scope: !5413)
!5423 = !DILocation(line: 3705, column: 7, scope: !5413)
!5424 = !DILocation(line: 3707, column: 27, scope: !5413)
!5425 = !DILocation(line: 3707, column: 7, scope: !5413)
!5426 = !DILocation(line: 3708, column: 34, scope: !5410)
!5427 = !DILocation(line: 3708, column: 40, scope: !5410)
!5428 = !DILocation(line: 3708, column: 5, scope: !5410)
!5429 = !DILocation(line: 3709, column: 5, scope: !5410)
!5430 = !DILocation(line: 3710, column: 5, scope: !5410)
!5431 = !DILocation(line: 3711, column: 3, scope: !5410)
!5432 = !DILocation(line: 3712, column: 39, scope: !5388)
!5433 = !DILocation(line: 3712, column: 8, scope: !5388)
!5434 = !DILocation(line: 3713, column: 39, scope: !5388)
!5435 = !DILocation(line: 3713, column: 8, scope: !5388)
!5436 = !DILocation(line: 3714, column: 8, scope: !5388)
!5437 = !DILocation(line: 3715, column: 8, scope: !5388)
!5438 = !DILocation(line: 3716, column: 37, scope: !5388)
!5439 = !DILocation(line: 3716, column: 43, scope: !5388)
!5440 = !DILocation(line: 3716, column: 8, scope: !5388)
!5441 = !DILocation(line: 3717, column: 8, scope: !5388)
!5442 = !DILocation(line: 3718, column: 8, scope: !5388)
!5443 = !DILocation(line: 3719, column: 8, scope: !5388)
!5444 = !DILocalVariable(name: "res", scope: !5445, file: !3, line: 3723, type: !1780)
!5445 = distinct !DILexicalBlock(scope: !5389, file: !3, line: 3722, column: 6)
!5446 = !DILocation(line: 3723, column: 13, scope: !5445)
!5447 = !DILocation(line: 3723, column: 36, scope: !5445)
!5448 = !DILocation(line: 3723, column: 19, scope: !5445)
!5449 = !DILocalVariable(name: "dest", scope: !5445, file: !3, line: 3724, type: !1780)
!5450 = !DILocation(line: 3724, column: 13, scope: !5445)
!5451 = !DILocation(line: 3724, column: 37, scope: !5445)
!5452 = !DILocation(line: 3724, column: 20, scope: !5445)
!5453 = !DILocalVariable(name: "i", scope: !5445, file: !3, line: 3725, type: !6)
!5454 = !DILocation(line: 3725, column: 17, scope: !5445)
!5455 = !DILocalVariable(name: "lhsp", scope: !5445, file: !3, line: 3726, type: !5456)
!5456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3166, size: 64)
!5457 = !DILocation(line: 3726, column: 14, scope: !5445)
!5458 = !DILocalVariable(name: "ac", scope: !5445, file: !3, line: 3727, type: !1720)
!5459 = !DILocation(line: 3727, column: 31, scope: !5445)
!5460 = !DILocation(line: 3728, column: 12, scope: !5461)
!5461 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 3728, column: 12)
!5462 = !DILocation(line: 3728, column: 16, scope: !5461)
!5463 = !DILocation(line: 3728, column: 12, scope: !5445)
!5464 = !DILocation(line: 3730, column: 25, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5461, file: !3, line: 3729, column: 3)
!5466 = !DILocation(line: 3730, column: 5, scope: !5465)
!5467 = !DILocation(line: 3731, column: 25, scope: !5465)
!5468 = !DILocation(line: 3731, column: 5, scope: !5465)
!5469 = !DILocation(line: 3732, column: 34, scope: !5465)
!5470 = !DILocation(line: 3732, column: 40, scope: !5465)
!5471 = !DILocation(line: 3732, column: 5, scope: !5465)
!5472 = !DILocation(line: 3733, column: 5, scope: !5465)
!5473 = !DILocation(line: 3734, column: 5, scope: !5465)
!5474 = !DILocation(line: 3735, column: 3, scope: !5465)
!5475 = !DILocation(line: 3736, column: 39, scope: !5445)
!5476 = !DILocation(line: 3736, column: 8, scope: !5445)
!5477 = !DILocation(line: 3737, column: 8, scope: !5445)
!5478 = !DILocation(line: 3738, column: 12, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 3738, column: 12)
!5480 = !DILocation(line: 3739, column: 5, scope: !5479)
!5481 = !DILocation(line: 3739, column: 40, scope: !5479)
!5482 = !DILocation(line: 3739, column: 23, scope: !5479)
!5483 = !DILocation(line: 3739, column: 8, scope: !5479)
!5484 = !DILocation(line: 3738, column: 12, scope: !5445)
!5485 = !DILocation(line: 3741, column: 8, scope: !5486)
!5486 = distinct !DILexicalBlock(scope: !5479, file: !3, line: 3740, column: 3)
!5487 = !DILocation(line: 3741, column: 13, scope: !5486)
!5488 = !DILocation(line: 3742, column: 8, scope: !5486)
!5489 = !DILocation(line: 3742, column: 12, scope: !5486)
!5490 = !DILocation(line: 3743, column: 3, scope: !5486)
!5491 = !DILocation(line: 3746, column: 8, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5479, file: !3, line: 3745, column: 3)
!5493 = !DILocation(line: 3746, column: 13, scope: !5492)
!5494 = !DILocation(line: 3747, column: 8, scope: !5492)
!5495 = !DILocation(line: 3747, column: 12, scope: !5492)
!5496 = !DILocation(line: 3749, column: 11, scope: !5445)
!5497 = !DILocation(line: 3749, column: 18, scope: !5445)
!5498 = !DILocation(line: 3750, column: 15, scope: !5499)
!5499 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 3750, column: 8)
!5500 = !DILocation(line: 3750, column: 13, scope: !5499)
!5501 = !DILocation(line: 3750, column: 20, scope: !5502)
!5502 = distinct !DILexicalBlock(scope: !5499, file: !3, line: 3750, column: 8)
!5503 = !DILocation(line: 3750, column: 8, scope: !5499)
!5504 = !DILocation(line: 3751, column: 40, scope: !5502)
!5505 = !DILocation(line: 3751, column: 23, scope: !5502)
!5506 = !DILocation(line: 3751, column: 3, scope: !5502)
!5507 = !DILocation(line: 3750, column: 55, scope: !5502)
!5508 = !DILocation(line: 3750, column: 8, scope: !5502)
!5509 = distinct !{!5509, !5503, !5510}
!5510 = !DILocation(line: 3751, column: 49, scope: !5499)
!5511 = !DILocation(line: 3752, column: 8, scope: !5445)
!5512 = !DILocation(line: 3753, column: 8, scope: !5445)
!5513 = !DILocation(line: 3777, column: 6, scope: !5389)
!5514 = !DILocation(line: 3783, column: 4, scope: !5389)
!5515 = !DILocation(line: 3784, column: 12, scope: !5516)
!5516 = distinct !DILexicalBlock(scope: !5374, file: !3, line: 3784, column: 11)
!5517 = !DILocation(line: 3785, column: 4, scope: !5516)
!5518 = !DILocation(line: 3785, column: 8, scope: !5516)
!5519 = !DILocation(line: 3786, column: 8, scope: !5516)
!5520 = !DILocation(line: 3786, column: 32, scope: !5516)
!5521 = !DILocation(line: 3786, column: 12, scope: !5516)
!5522 = !DILocation(line: 3784, column: 11, scope: !5374)
!5523 = !DILocalVariable(name: "rhsc", scope: !5524, file: !3, line: 3788, type: !3154)
!5524 = distinct !DILexicalBlock(scope: !5516, file: !3, line: 3787, column: 2)
!5525 = !DILocation(line: 3788, column: 21, scope: !5524)
!5526 = !DILocalVariable(name: "flags", scope: !5524, file: !3, line: 3789, type: !1730)
!5527 = !DILocation(line: 3789, column: 8, scope: !5524)
!5528 = !DILocation(line: 3789, column: 35, scope: !5524)
!5529 = !DILocation(line: 3789, column: 16, scope: !5524)
!5530 = !DILocation(line: 3793, column: 8, scope: !5531)
!5531 = distinct !DILexicalBlock(scope: !5524, file: !3, line: 3793, column: 8)
!5532 = !DILocation(line: 3793, column: 14, scope: !5531)
!5533 = !DILocation(line: 3793, column: 8, scope: !5524)
!5534 = !DILocation(line: 3795, column: 29, scope: !5535)
!5535 = distinct !DILexicalBlock(scope: !5536, file: !3, line: 3795, column: 12)
!5536 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 3794, column: 6)
!5537 = !DILocation(line: 3795, column: 12, scope: !5535)
!5538 = !DILocation(line: 3796, column: 5, scope: !5535)
!5539 = !DILocation(line: 3796, column: 46, scope: !5535)
!5540 = !DILocation(line: 3796, column: 29, scope: !5535)
!5541 = !DILocation(line: 3796, column: 8, scope: !5535)
!5542 = !DILocation(line: 3795, column: 12, scope: !5536)
!5543 = !DILocation(line: 3797, column: 22, scope: !5535)
!5544 = !DILocation(line: 3797, column: 3, scope: !5535)
!5545 = !DILocation(line: 3798, column: 6, scope: !5536)
!5546 = !DILocation(line: 3802, column: 13, scope: !5547)
!5547 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 3802, column: 13)
!5548 = !DILocation(line: 3802, column: 19, scope: !5547)
!5549 = !DILocation(line: 3802, column: 13, scope: !5531)
!5550 = !DILocation(line: 3803, column: 24, scope: !5547)
!5551 = !DILocation(line: 3803, column: 6, scope: !5547)
!5552 = !DILocation(line: 3805, column: 23, scope: !5547)
!5553 = !DILocation(line: 3805, column: 6, scope: !5547)
!5554 = !DILocation(line: 3806, column: 25, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5524, file: !3, line: 3806, column: 8)
!5556 = !DILocation(line: 3806, column: 8, scope: !5555)
!5557 = !DILocation(line: 3807, column: 8, scope: !5555)
!5558 = !DILocation(line: 3807, column: 49, scope: !5555)
!5559 = !DILocation(line: 3807, column: 32, scope: !5555)
!5560 = !DILocation(line: 3807, column: 11, scope: !5555)
!5561 = !DILocation(line: 3806, column: 8, scope: !5524)
!5562 = !DILocation(line: 3808, column: 40, scope: !5555)
!5563 = !DILocation(line: 3808, column: 23, scope: !5555)
!5564 = !DILocation(line: 3808, column: 44, scope: !5555)
!5565 = !DILocation(line: 3808, column: 51, scope: !5555)
!5566 = !DILocation(line: 3808, column: 57, scope: !5555)
!5567 = !DILocation(line: 3808, column: 6, scope: !5555)
!5568 = !DILocation(line: 3809, column: 4, scope: !5524)
!5569 = !DILocation(line: 3810, column: 2, scope: !5524)
!5570 = !DILocalVariable(name: "lhsop", scope: !5571, file: !3, line: 3813, type: !1780)
!5571 = distinct !DILexicalBlock(scope: !5516, file: !3, line: 3812, column: 2)
!5572 = !DILocation(line: 3813, column: 9, scope: !5571)
!5573 = !DILocalVariable(name: "fi", scope: !5571, file: !3, line: 3814, type: !1758)
!5574 = !DILocation(line: 3814, column: 14, scope: !5571)
!5575 = !DILocalVariable(name: "i", scope: !5571, file: !3, line: 3815, type: !1730)
!5576 = !DILocation(line: 3815, column: 8, scope: !5571)
!5577 = !DILocalVariable(name: "j", scope: !5571, file: !3, line: 3816, type: !1727)
!5578 = !DILocation(line: 3816, column: 11, scope: !5571)
!5579 = !DILocalVariable(name: "decl", scope: !5571, file: !3, line: 3817, type: !1780)
!5580 = !DILocation(line: 3817, column: 9, scope: !5571)
!5581 = !DILocation(line: 3819, column: 29, scope: !5571)
!5582 = !DILocation(line: 3819, column: 12, scope: !5571)
!5583 = !DILocation(line: 3819, column: 10, scope: !5571)
!5584 = !DILocation(line: 3820, column: 31, scope: !5571)
!5585 = !DILocation(line: 3820, column: 11, scope: !5571)
!5586 = !DILocation(line: 3820, column: 9, scope: !5571)
!5587 = !DILocation(line: 3825, column: 8, scope: !5588)
!5588 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 3825, column: 8)
!5589 = !DILocation(line: 3825, column: 8, scope: !5571)
!5590 = !DILocation(line: 3826, column: 28, scope: !5588)
!5591 = !DILocation(line: 3826, column: 11, scope: !5588)
!5592 = !DILocation(line: 3826, column: 9, scope: !5588)
!5593 = !DILocation(line: 3826, column: 6, scope: !5588)
!5594 = !DILocation(line: 3829, column: 31, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5588, file: !3, line: 3828, column: 6)
!5596 = !DILocation(line: 3829, column: 15, scope: !5595)
!5597 = !DILocation(line: 3829, column: 13, scope: !5595)
!5598 = !DILocation(line: 3830, column: 30, scope: !5595)
!5599 = !DILocation(line: 3830, column: 13, scope: !5595)
!5600 = !DILocation(line: 3830, column: 11, scope: !5595)
!5601 = !DILocation(line: 3835, column: 11, scope: !5602)
!5602 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 3835, column: 4)
!5603 = !DILocation(line: 3835, column: 9, scope: !5602)
!5604 = !DILocation(line: 3835, column: 16, scope: !5605)
!5605 = distinct !DILexicalBlock(scope: !5602, file: !3, line: 3835, column: 4)
!5606 = !DILocation(line: 3835, column: 42, scope: !5605)
!5607 = !DILocation(line: 3835, column: 20, scope: !5605)
!5608 = !DILocation(line: 3835, column: 18, scope: !5605)
!5609 = !DILocation(line: 3835, column: 4, scope: !5602)
!5610 = !DILocalVariable(name: "lhs", scope: !5611, file: !3, line: 3837, type: !1720)
!5611 = distinct !DILexicalBlock(scope: !5605, file: !3, line: 3836, column: 6)
!5612 = !DILocation(line: 3837, column: 31, scope: !5611)
!5613 = !DILocalVariable(name: "rhsp", scope: !5611, file: !3, line: 3838, type: !5295)
!5614 = !DILocation(line: 3838, column: 32, scope: !5611)
!5615 = !DILocalVariable(name: "arg", scope: !5611, file: !3, line: 3839, type: !1780)
!5616 = !DILocation(line: 3839, column: 13, scope: !5611)
!5617 = !DILocation(line: 3839, column: 36, scope: !5611)
!5618 = !DILocation(line: 3839, column: 39, scope: !5611)
!5619 = !DILocation(line: 3839, column: 19, scope: !5611)
!5620 = !DILocation(line: 3841, column: 28, scope: !5611)
!5621 = !DILocation(line: 3841, column: 8, scope: !5611)
!5622 = !DILocation(line: 3842, column: 12, scope: !5623)
!5623 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 3842, column: 12)
!5624 = !DILocation(line: 3842, column: 29, scope: !5623)
!5625 = !DILocation(line: 3842, column: 12, scope: !5611)
!5626 = !DILocation(line: 3844, column: 9, scope: !5627)
!5627 = distinct !DILexicalBlock(scope: !5623, file: !3, line: 3843, column: 3)
!5628 = !DILocation(line: 3844, column: 14, scope: !5627)
!5629 = !DILocation(line: 3845, column: 15, scope: !5627)
!5630 = !DILocation(line: 3845, column: 19, scope: !5627)
!5631 = !DILocation(line: 3845, column: 9, scope: !5627)
!5632 = !DILocation(line: 3845, column: 13, scope: !5627)
!5633 = !DILocation(line: 3846, column: 18, scope: !5627)
!5634 = !DILocation(line: 3846, column: 9, scope: !5627)
!5635 = !DILocation(line: 3846, column: 16, scope: !5627)
!5636 = !DILocation(line: 3847, column: 3, scope: !5627)
!5637 = !DILocation(line: 3850, column: 9, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5623, file: !3, line: 3849, column: 3)
!5639 = !DILocation(line: 3850, column: 14, scope: !5638)
!5640 = !DILocation(line: 3851, column: 36, scope: !5638)
!5641 = !DILocation(line: 3851, column: 40, scope: !5638)
!5642 = !DILocation(line: 3851, column: 15, scope: !5638)
!5643 = !DILocation(line: 3851, column: 44, scope: !5638)
!5644 = !DILocation(line: 3851, column: 9, scope: !5638)
!5645 = !DILocation(line: 3851, column: 13, scope: !5638)
!5646 = !DILocation(line: 3852, column: 9, scope: !5638)
!5647 = !DILocation(line: 3852, column: 16, scope: !5638)
!5648 = !DILocation(line: 3854, column: 8, scope: !5611)
!5649 = !DILocation(line: 3854, column: 15, scope: !5611)
!5650 = !DILocation(line: 3854, column: 39, scope: !5611)
!5651 = !DILocation(line: 3856, column: 12, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 3855, column: 3)
!5653 = !DILocation(line: 3856, column: 10, scope: !5652)
!5654 = !DILocation(line: 3857, column: 47, scope: !5652)
!5655 = !DILocation(line: 3857, column: 25, scope: !5652)
!5656 = !DILocation(line: 3857, column: 5, scope: !5652)
!5657 = !DILocation(line: 3858, column: 5, scope: !5652)
!5658 = distinct !{!5658, !5648, !5659}
!5659 = !DILocation(line: 3859, column: 3, scope: !5611)
!5660 = !DILocation(line: 3860, column: 9, scope: !5611)
!5661 = !DILocation(line: 3861, column: 6, scope: !5611)
!5662 = !DILocation(line: 3835, column: 47, scope: !5605)
!5663 = !DILocation(line: 3835, column: 4, scope: !5605)
!5664 = distinct !{!5664, !5609, !5665}
!5665 = !DILocation(line: 3861, column: 6, scope: !5602)
!5666 = !DILocation(line: 3864, column: 8, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 3864, column: 8)
!5668 = !DILocation(line: 3864, column: 8, scope: !5571)
!5669 = !DILocalVariable(name: "rhs", scope: !5670, file: !3, line: 3866, type: !1720)
!5670 = distinct !DILexicalBlock(scope: !5667, file: !3, line: 3865, column: 6)
!5671 = !DILocation(line: 3866, column: 31, scope: !5670)
!5672 = !DILocalVariable(name: "lhsp", scope: !5670, file: !3, line: 3867, type: !5295)
!5673 = !DILocation(line: 3867, column: 32, scope: !5670)
!5674 = !DILocalVariable(name: "j", scope: !5670, file: !3, line: 3868, type: !6)
!5675 = !DILocation(line: 3868, column: 21, scope: !5670)
!5676 = !DILocation(line: 3870, column: 28, scope: !5670)
!5677 = !DILocation(line: 3870, column: 8, scope: !5670)
!5678 = !DILocation(line: 3871, column: 12, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 3871, column: 12)
!5680 = !DILocation(line: 3871, column: 29, scope: !5679)
!5681 = !DILocation(line: 3871, column: 12, scope: !5670)
!5682 = !DILocation(line: 3873, column: 9, scope: !5683)
!5683 = distinct !DILexicalBlock(scope: !5679, file: !3, line: 3872, column: 3)
!5684 = !DILocation(line: 3873, column: 14, scope: !5683)
!5685 = !DILocation(line: 3874, column: 15, scope: !5683)
!5686 = !DILocation(line: 3874, column: 19, scope: !5683)
!5687 = !DILocation(line: 3874, column: 9, scope: !5683)
!5688 = !DILocation(line: 3874, column: 13, scope: !5683)
!5689 = !DILocation(line: 3875, column: 18, scope: !5683)
!5690 = !DILocation(line: 3875, column: 9, scope: !5683)
!5691 = !DILocation(line: 3875, column: 16, scope: !5683)
!5692 = !DILocation(line: 3876, column: 3, scope: !5683)
!5693 = !DILocation(line: 3879, column: 9, scope: !5694)
!5694 = distinct !DILexicalBlock(scope: !5679, file: !3, line: 3878, column: 3)
!5695 = !DILocation(line: 3879, column: 14, scope: !5694)
!5696 = !DILocation(line: 3880, column: 36, scope: !5694)
!5697 = !DILocation(line: 3880, column: 40, scope: !5694)
!5698 = !DILocation(line: 3880, column: 15, scope: !5694)
!5699 = !DILocation(line: 3880, column: 44, scope: !5694)
!5700 = !DILocation(line: 3880, column: 9, scope: !5694)
!5701 = !DILocation(line: 3880, column: 13, scope: !5694)
!5702 = !DILocation(line: 3881, column: 9, scope: !5694)
!5703 = !DILocation(line: 3881, column: 16, scope: !5694)
!5704 = !DILocation(line: 3883, column: 15, scope: !5705)
!5705 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 3883, column: 8)
!5706 = !DILocation(line: 3883, column: 13, scope: !5705)
!5707 = !DILocation(line: 3883, column: 20, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5705, file: !3, line: 3883, column: 8)
!5709 = !DILocation(line: 3883, column: 8, scope: !5705)
!5710 = !DILocation(line: 3884, column: 40, scope: !5708)
!5711 = !DILocation(line: 3884, column: 23, scope: !5708)
!5712 = !DILocation(line: 3884, column: 3, scope: !5708)
!5713 = !DILocation(line: 3883, column: 56, scope: !5708)
!5714 = !DILocation(line: 3883, column: 8, scope: !5708)
!5715 = distinct !{!5715, !5709, !5716}
!5716 = !DILocation(line: 3884, column: 50, scope: !5705)
!5717 = !DILocation(line: 3885, column: 6, scope: !5670)
!5718 = !DILocation(line: 3887, column: 5, scope: !5374)
!5719 = !DILocation(line: 3891, column: 30, scope: !5720)
!5720 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 3891, column: 12)
!5721 = !DILocation(line: 3891, column: 12, scope: !5720)
!5722 = !DILocation(line: 3892, column: 5, scope: !5720)
!5723 = !DILocation(line: 3892, column: 48, scope: !5720)
!5724 = !DILocation(line: 3892, column: 29, scope: !5720)
!5725 = !DILocation(line: 3892, column: 8, scope: !5720)
!5726 = !DILocation(line: 3891, column: 12, scope: !5370)
!5727 = !DILocalVariable(name: "lhsop", scope: !5728, file: !3, line: 3895, type: !1780)
!5728 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 3893, column: 5)
!5729 = !DILocation(line: 3895, column: 12, scope: !5728)
!5730 = !DILocation(line: 3895, column: 39, scope: !5728)
!5731 = !DILocation(line: 3895, column: 20, scope: !5728)
!5732 = !DILocalVariable(name: "rhsop", scope: !5728, file: !3, line: 3896, type: !1780)
!5733 = !DILocation(line: 3896, column: 12, scope: !5728)
!5734 = !DILocation(line: 3896, column: 37, scope: !5728)
!5735 = !DILocation(line: 3896, column: 21, scope: !5728)
!5736 = !DILocation(line: 3896, column: 40, scope: !5728)
!5737 = !DILocation(line: 3896, column: 20, scope: !5728)
!5738 = !DILocation(line: 3896, column: 68, scope: !5728)
!5739 = !DILocation(line: 3896, column: 48, scope: !5728)
!5740 = !DILocation(line: 3898, column: 11, scope: !5741)
!5741 = distinct !DILexicalBlock(scope: !5728, file: !3, line: 3898, column: 11)
!5742 = !DILocation(line: 3898, column: 17, scope: !5741)
!5743 = !DILocation(line: 3898, column: 20, scope: !5741)
!5744 = !DILocation(line: 3898, column: 11, scope: !5728)
!5745 = !DILocation(line: 3899, column: 21, scope: !5741)
!5746 = !DILocation(line: 3899, column: 28, scope: !5741)
!5747 = !DILocation(line: 3899, column: 2, scope: !5741)
!5748 = !DILocalVariable(name: "temp", scope: !5749, file: !3, line: 3902, type: !1720)
!5749 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 3901, column: 2)
!5750 = !DILocation(line: 3902, column: 27, scope: !5749)
!5751 = !DILocation(line: 3903, column: 24, scope: !5749)
!5752 = !DILocation(line: 3903, column: 4, scope: !5749)
!5753 = !DILocation(line: 3905, column: 32, scope: !5754)
!5754 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 3905, column: 8)
!5755 = !DILocation(line: 3905, column: 8, scope: !5754)
!5756 = !DILocation(line: 3905, column: 35, scope: !5754)
!5757 = !DILocation(line: 3905, column: 8, scope: !5749)
!5758 = !DILocation(line: 3906, column: 57, scope: !5754)
!5759 = !DILocation(line: 3906, column: 37, scope: !5754)
!5760 = !DILocation(line: 3907, column: 29, scope: !5754)
!5761 = !DILocation(line: 3907, column: 9, scope: !5754)
!5762 = !DILocation(line: 3906, column: 6, scope: !5754)
!5763 = !DILocation(line: 3908, column: 14, scope: !5764)
!5764 = distinct !DILexicalBlock(scope: !5754, file: !3, line: 3908, column: 13)
!5765 = !DILocation(line: 3909, column: 7, scope: !5764)
!5766 = !DILocation(line: 3909, column: 12, scope: !5764)
!5767 = !DILocation(line: 3910, column: 5, scope: !5764)
!5768 = !DILocation(line: 3910, column: 9, scope: !5764)
!5769 = !DILocation(line: 3911, column: 6, scope: !5764)
!5770 = !DILocation(line: 3911, column: 33, scope: !5764)
!5771 = !DILocation(line: 3911, column: 9, scope: !5764)
!5772 = !DILocation(line: 3908, column: 13, scope: !5754)
!5773 = !DILocation(line: 3912, column: 26, scope: !5764)
!5774 = !DILocation(line: 3912, column: 6, scope: !5764)
!5775 = !DILocation(line: 3915, column: 13, scope: !5776)
!5776 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 3914, column: 6)
!5777 = !DILocation(line: 3915, column: 18, scope: !5776)
!5778 = !DILocation(line: 3916, column: 13, scope: !5776)
!5779 = !DILocation(line: 3916, column: 17, scope: !5776)
!5780 = !DILocation(line: 3917, column: 13, scope: !5776)
!5781 = !DILocation(line: 3917, column: 20, scope: !5776)
!5782 = !DILocation(line: 3918, column: 8, scope: !5776)
!5783 = !DILocation(line: 3920, column: 33, scope: !5749)
!5784 = !DILocation(line: 3920, column: 39, scope: !5749)
!5785 = !DILocation(line: 3920, column: 4, scope: !5749)
!5786 = !DILocation(line: 3923, column: 38, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5728, file: !3, line: 3923, column: 11)
!5788 = !DILocation(line: 3923, column: 20, scope: !5787)
!5789 = !DILocation(line: 3923, column: 18, scope: !5787)
!5790 = !DILocation(line: 3923, column: 46, scope: !5787)
!5791 = !DILocation(line: 3924, column: 4, scope: !5787)
!5792 = !DILocation(line: 3924, column: 7, scope: !5787)
!5793 = !DILocation(line: 3925, column: 4, scope: !5787)
!5794 = !DILocation(line: 3925, column: 22, scope: !5787)
!5795 = !DILocation(line: 3925, column: 7, scope: !5787)
!5796 = !DILocation(line: 3923, column: 11, scope: !5728)
!5797 = !DILocation(line: 3926, column: 26, scope: !5787)
!5798 = !DILocation(line: 3926, column: 2, scope: !5787)
!5799 = !DILocation(line: 3929, column: 38, scope: !5800)
!5800 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 3929, column: 16)
!5801 = !DILocation(line: 3929, column: 16, scope: !5800)
!5802 = !DILocation(line: 3930, column: 9, scope: !5800)
!5803 = !DILocation(line: 3930, column: 12, scope: !5800)
!5804 = !DILocation(line: 3931, column: 9, scope: !5800)
!5805 = !DILocation(line: 3931, column: 12, scope: !5800)
!5806 = !DILocation(line: 3932, column: 9, scope: !5800)
!5807 = !DILocation(line: 3932, column: 13, scope: !5800)
!5808 = !DILocation(line: 3933, column: 9, scope: !5800)
!5809 = !DILocation(line: 3933, column: 12, scope: !5800)
!5810 = !DILocation(line: 3929, column: 16, scope: !5787)
!5811 = !DILocation(line: 3934, column: 50, scope: !5800)
!5812 = !DILocation(line: 3934, column: 33, scope: !5800)
!5813 = !DILocation(line: 3934, column: 2, scope: !5800)
!5814 = !DILocation(line: 3936, column: 5, scope: !5728)
!5815 = !DILocation(line: 3938, column: 34, scope: !5816)
!5816 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 3938, column: 12)
!5817 = !DILocation(line: 3938, column: 12, scope: !5816)
!5818 = !DILocation(line: 3939, column: 5, scope: !5816)
!5819 = !DILocation(line: 3939, column: 8, scope: !5816)
!5820 = !DILocation(line: 3940, column: 5, scope: !5816)
!5821 = !DILocation(line: 3940, column: 9, scope: !5816)
!5822 = !DILocation(line: 3938, column: 12, scope: !5720)
!5823 = !DILocation(line: 3942, column: 51, scope: !5824)
!5824 = distinct !DILexicalBlock(scope: !5816, file: !3, line: 3941, column: 5)
!5825 = !DILocation(line: 3942, column: 31, scope: !5824)
!5826 = !DILocation(line: 3942, column: 7, scope: !5824)
!5827 = !DILocation(line: 3943, column: 5, scope: !5824)
!5828 = !DILocation(line: 3945, column: 25, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5816, file: !3, line: 3945, column: 12)
!5830 = !DILocation(line: 3945, column: 12, scope: !5829)
!5831 = !DILocation(line: 3945, column: 28, scope: !5829)
!5832 = !DILocation(line: 3946, column: 5, scope: !5829)
!5833 = !DILocation(line: 3946, column: 30, scope: !5829)
!5834 = !DILocation(line: 3946, column: 8, scope: !5829)
!5835 = !DILocation(line: 3946, column: 33, scope: !5829)
!5836 = !DILocation(line: 3947, column: 5, scope: !5829)
!5837 = !DILocation(line: 3947, column: 51, scope: !5829)
!5838 = !DILocation(line: 3947, column: 29, scope: !5829)
!5839 = !DILocation(line: 3947, column: 8, scope: !5829)
!5840 = !DILocation(line: 3945, column: 12, scope: !5816)
!5841 = !DILocation(line: 3949, column: 53, scope: !5842)
!5842 = distinct !DILexicalBlock(scope: !5829, file: !3, line: 3948, column: 5)
!5843 = !DILocation(line: 3949, column: 31, scope: !5842)
!5844 = !DILocation(line: 3949, column: 7, scope: !5842)
!5845 = !DILocation(line: 3950, column: 5, scope: !5842)
!5846 = !DILocation(line: 3952, column: 25, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5829, file: !3, line: 3952, column: 12)
!5848 = !DILocation(line: 3952, column: 12, scope: !5847)
!5849 = !DILocation(line: 3952, column: 28, scope: !5847)
!5850 = !DILocation(line: 3952, column: 12, scope: !5829)
!5851 = !DILocalVariable(name: "i", scope: !5852, file: !3, line: 3954, type: !6)
!5852 = distinct !DILexicalBlock(scope: !5847, file: !3, line: 3953, column: 5)
!5853 = !DILocation(line: 3954, column: 16, scope: !5852)
!5854 = !DILocalVariable(name: "noutputs", scope: !5852, file: !3, line: 3954, type: !6)
!5855 = !DILocation(line: 3954, column: 19, scope: !5852)
!5856 = !DILocalVariable(name: "oconstraints", scope: !5852, file: !3, line: 3955, type: !3151)
!5857 = !DILocation(line: 3955, column: 20, scope: !5852)
!5858 = !DILocalVariable(name: "constraint", scope: !5852, file: !3, line: 3956, type: !1776)
!5859 = !DILocation(line: 3956, column: 19, scope: !5852)
!5860 = !DILocalVariable(name: "allows_mem", scope: !5852, file: !3, line: 3957, type: !1894)
!5861 = !DILocation(line: 3957, column: 12, scope: !5852)
!5862 = !DILocalVariable(name: "allows_reg", scope: !5852, file: !3, line: 3957, type: !1894)
!5863 = !DILocation(line: 3957, column: 24, scope: !5852)
!5864 = !DILocalVariable(name: "is_inout", scope: !5852, file: !3, line: 3957, type: !1894)
!5865 = !DILocation(line: 3957, column: 36, scope: !5852)
!5866 = !DILocation(line: 3959, column: 39, scope: !5852)
!5867 = !DILocation(line: 3959, column: 18, scope: !5852)
!5868 = !DILocation(line: 3959, column: 16, scope: !5852)
!5869 = !DILocation(line: 3960, column: 22, scope: !5852)
!5870 = !DILocation(line: 3960, column: 20, scope: !5852)
!5871 = !DILocation(line: 3962, column: 14, scope: !5872)
!5872 = distinct !DILexicalBlock(scope: !5852, file: !3, line: 3962, column: 7)
!5873 = !DILocation(line: 3962, column: 12, scope: !5872)
!5874 = !DILocation(line: 3962, column: 19, scope: !5875)
!5875 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 3962, column: 7)
!5876 = !DILocation(line: 3962, column: 23, scope: !5875)
!5877 = !DILocation(line: 3962, column: 21, scope: !5875)
!5878 = !DILocation(line: 3962, column: 7, scope: !5872)
!5879 = !DILocalVariable(name: "link", scope: !5880, file: !3, line: 3964, type: !1780)
!5880 = distinct !DILexicalBlock(scope: !5875, file: !3, line: 3963, column: 2)
!5881 = !DILocation(line: 3964, column: 9, scope: !5880)
!5882 = !DILocation(line: 3964, column: 38, scope: !5880)
!5883 = !DILocation(line: 3964, column: 41, scope: !5880)
!5884 = !DILocation(line: 3964, column: 16, scope: !5880)
!5885 = !DILocalVariable(name: "op", scope: !5880, file: !3, line: 3965, type: !1780)
!5886 = !DILocation(line: 3965, column: 9, scope: !5880)
!5887 = !DILocation(line: 3965, column: 14, scope: !5880)
!5888 = !DILocation(line: 3967, column: 17, scope: !5880)
!5889 = !DILocation(line: 3967, column: 15, scope: !5880)
!5890 = !DILocation(line: 3968, column: 22, scope: !5880)
!5891 = !DILocation(line: 3968, column: 4, scope: !5880)
!5892 = !DILocation(line: 3968, column: 17, scope: !5880)
!5893 = !DILocation(line: 3968, column: 20, scope: !5880)
!5894 = !DILocation(line: 3969, column: 42, scope: !5880)
!5895 = !DILocation(line: 3969, column: 4, scope: !5880)
!5896 = !DILocation(line: 3973, column: 9, scope: !5897)
!5897 = distinct !DILexicalBlock(scope: !5880, file: !3, line: 3973, column: 8)
!5898 = !DILocation(line: 3973, column: 20, scope: !5897)
!5899 = !DILocation(line: 3973, column: 23, scope: !5897)
!5900 = !DILocation(line: 3973, column: 8, scope: !5880)
!5901 = !DILocation(line: 3974, column: 30, scope: !5897)
!5902 = !DILocation(line: 3974, column: 6, scope: !5897)
!5903 = !DILocation(line: 3978, column: 8, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5880, file: !3, line: 3978, column: 8)
!5905 = !DILocation(line: 3978, column: 11, scope: !5904)
!5906 = !DILocation(line: 3978, column: 35, scope: !5904)
!5907 = !DILocation(line: 3978, column: 14, scope: !5904)
!5908 = !DILocation(line: 3978, column: 8, scope: !5880)
!5909 = !DILocalVariable(name: "lhsc", scope: !5910, file: !3, line: 3980, type: !3154)
!5910 = distinct !DILexicalBlock(scope: !5904, file: !3, line: 3979, column: 6)
!5911 = !DILocation(line: 3980, column: 25, scope: !5910)
!5912 = !DILocalVariable(name: "rhsc", scope: !5910, file: !3, line: 3981, type: !1720)
!5913 = !DILocation(line: 3981, column: 31, scope: !5910)
!5914 = !DILocalVariable(name: "lhsp", scope: !5910, file: !3, line: 3981, type: !5295)
!5915 = !DILocation(line: 3981, column: 38, scope: !5910)
!5916 = !DILocalVariable(name: "j", scope: !5910, file: !3, line: 3982, type: !6)
!5917 = !DILocation(line: 3982, column: 17, scope: !5910)
!5918 = !DILocation(line: 3983, column: 28, scope: !5910)
!5919 = !DILocation(line: 3983, column: 8, scope: !5910)
!5920 = !DILocation(line: 3984, column: 13, scope: !5910)
!5921 = !DILocation(line: 3984, column: 17, scope: !5910)
!5922 = !DILocation(line: 3985, column: 13, scope: !5910)
!5923 = !DILocation(line: 3985, column: 20, scope: !5910)
!5924 = !DILocation(line: 3986, column: 13, scope: !5910)
!5925 = !DILocation(line: 3986, column: 18, scope: !5910)
!5926 = !DILocation(line: 3987, column: 15, scope: !5927)
!5927 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 3987, column: 8)
!5928 = !DILocation(line: 3987, column: 13, scope: !5927)
!5929 = !DILocation(line: 3987, column: 20, scope: !5930)
!5930 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 3987, column: 8)
!5931 = !DILocation(line: 3987, column: 8, scope: !5927)
!5932 = !DILocation(line: 3988, column: 40, scope: !5930)
!5933 = !DILocation(line: 3988, column: 23, scope: !5930)
!5934 = !DILocation(line: 3988, column: 3, scope: !5930)
!5935 = !DILocation(line: 3987, column: 56, scope: !5930)
!5936 = !DILocation(line: 3987, column: 8, scope: !5930)
!5937 = distinct !{!5937, !5931, !5938}
!5938 = !DILocation(line: 3988, column: 51, scope: !5927)
!5939 = !DILocation(line: 3989, column: 8, scope: !5910)
!5940 = !DILocation(line: 3990, column: 6, scope: !5910)
!5941 = !DILocation(line: 3991, column: 2, scope: !5880)
!5942 = !DILocation(line: 3962, column: 33, scope: !5875)
!5943 = !DILocation(line: 3962, column: 7, scope: !5875)
!5944 = distinct !{!5944, !5878, !5945}
!5945 = !DILocation(line: 3991, column: 2, scope: !5872)
!5946 = !DILocation(line: 3992, column: 14, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5852, file: !3, line: 3992, column: 7)
!5948 = !DILocation(line: 3992, column: 12, scope: !5947)
!5949 = !DILocation(line: 3992, column: 19, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5947, file: !3, line: 3992, column: 7)
!5951 = !DILocation(line: 3992, column: 43, scope: !5950)
!5952 = !DILocation(line: 3992, column: 23, scope: !5950)
!5953 = !DILocation(line: 3992, column: 21, scope: !5950)
!5954 = !DILocation(line: 3992, column: 7, scope: !5947)
!5955 = !DILocalVariable(name: "link", scope: !5956, file: !3, line: 3994, type: !1780)
!5956 = distinct !DILexicalBlock(scope: !5950, file: !3, line: 3993, column: 2)
!5957 = !DILocation(line: 3994, column: 9, scope: !5956)
!5958 = !DILocation(line: 3994, column: 37, scope: !5956)
!5959 = !DILocation(line: 3994, column: 40, scope: !5956)
!5960 = !DILocation(line: 3994, column: 16, scope: !5956)
!5961 = !DILocalVariable(name: "op", scope: !5956, file: !3, line: 3995, type: !1780)
!5962 = !DILocation(line: 3995, column: 9, scope: !5956)
!5963 = !DILocation(line: 3995, column: 14, scope: !5956)
!5964 = !DILocation(line: 3997, column: 17, scope: !5956)
!5965 = !DILocation(line: 3997, column: 15, scope: !5956)
!5966 = !DILocation(line: 3999, column: 47, scope: !5956)
!5967 = !DILocation(line: 3999, column: 60, scope: !5956)
!5968 = !DILocation(line: 3999, column: 4, scope: !5956)
!5969 = !DILocation(line: 4003, column: 9, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5956, file: !3, line: 4003, column: 8)
!5971 = !DILocation(line: 4003, column: 20, scope: !5970)
!5972 = !DILocation(line: 4003, column: 23, scope: !5970)
!5973 = !DILocation(line: 4003, column: 8, scope: !5956)
!5974 = !DILocation(line: 4004, column: 30, scope: !5970)
!5975 = !DILocation(line: 4004, column: 6, scope: !5970)
!5976 = !DILocation(line: 4008, column: 13, scope: !5977)
!5977 = distinct !DILexicalBlock(scope: !5970, file: !3, line: 4008, column: 13)
!5978 = !DILocation(line: 4008, column: 16, scope: !5977)
!5979 = !DILocation(line: 4008, column: 40, scope: !5977)
!5980 = !DILocation(line: 4008, column: 19, scope: !5977)
!5981 = !DILocation(line: 4008, column: 13, scope: !5970)
!5982 = !DILocation(line: 4009, column: 30, scope: !5977)
!5983 = !DILocation(line: 4009, column: 6, scope: !5977)
!5984 = !DILocation(line: 4010, column: 2, scope: !5956)
!5985 = !DILocation(line: 3992, column: 47, scope: !5950)
!5986 = !DILocation(line: 3992, column: 7, scope: !5950)
!5987 = distinct !{!5987, !5954, !5988}
!5988 = !DILocation(line: 4010, column: 2, scope: !5947)
!5989 = !DILocation(line: 4011, column: 5, scope: !5852)
!5990 = !DILocation(line: 4013, column: 3, scope: !5282)
!5991 = !DILocation(line: 4014, column: 3, scope: !5282)
!5992 = !DILocation(line: 4015, column: 1, scope: !5282)
!5993 = distinct !DISubprogram(name: "gsi_next", scope: !851, file: !851, line: 4485, type: !5994, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!5994 = !DISubroutineType(types: !5995)
!5995 = !{null, !5996}
!5996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4329, size: 64)
!5997 = !DILocalVariable(name: "i", arg: 1, scope: !5993, file: !851, line: 4485, type: !5996)
!5998 = !DILocation(line: 4485, column: 33, scope: !5993)
!5999 = !DILocation(line: 4487, column: 12, scope: !5993)
!6000 = !DILocation(line: 4487, column: 15, scope: !5993)
!6001 = !DILocation(line: 4487, column: 20, scope: !5993)
!6002 = !DILocation(line: 4487, column: 3, scope: !5993)
!6003 = !DILocation(line: 4487, column: 6, scope: !5993)
!6004 = !DILocation(line: 4487, column: 10, scope: !5993)
!6005 = !DILocation(line: 4488, column: 1, scope: !5993)
!6006 = distinct !DISubprogram(name: "gsi_start_bb", scope: !851, file: !851, line: 4418, type: !6007, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6007 = !DISubroutineType(types: !6008)
!6008 = !{!4329, !2534}
!6009 = !DILocalVariable(name: "bb", arg: 1, scope: !6006, file: !851, line: 4418, type: !2534)
!6010 = !DILocation(line: 4418, column: 27, scope: !6006)
!6011 = !DILocalVariable(name: "i", scope: !6006, file: !851, line: 4420, type: !4329)
!6012 = !DILocation(line: 4420, column: 24, scope: !6006)
!6013 = !DILocalVariable(name: "seq", scope: !6006, file: !851, line: 4421, type: !2092)
!6014 = !DILocation(line: 4421, column: 14, scope: !6006)
!6015 = !DILocation(line: 4423, column: 17, scope: !6006)
!6016 = !DILocation(line: 4423, column: 9, scope: !6006)
!6017 = !DILocation(line: 4423, column: 7, scope: !6006)
!6018 = !DILocation(line: 4424, column: 29, scope: !6006)
!6019 = !DILocation(line: 4424, column: 11, scope: !6006)
!6020 = !DILocation(line: 4424, column: 5, scope: !6006)
!6021 = !DILocation(line: 4424, column: 9, scope: !6006)
!6022 = !DILocation(line: 4425, column: 11, scope: !6006)
!6023 = !DILocation(line: 4425, column: 5, scope: !6006)
!6024 = !DILocation(line: 4425, column: 9, scope: !6006)
!6025 = !DILocation(line: 4426, column: 10, scope: !6006)
!6026 = !DILocation(line: 4426, column: 5, scope: !6006)
!6027 = !DILocation(line: 4426, column: 8, scope: !6006)
!6028 = !DILocation(line: 4428, column: 3, scope: !6006)
!6029 = distinct !DISubprogram(name: "solve_constraints", scope: !3, file: !3, line: 5418, type: !3548, scopeLine: 5419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6030 = !DILocalVariable(name: "si", scope: !6029, file: !3, line: 5420, type: !3201)
!6031 = !DILocation(line: 5420, column: 20, scope: !6029)
!6032 = !DILocation(line: 5422, column: 7, scope: !6033)
!6033 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5422, column: 7)
!6034 = !DILocation(line: 5422, column: 7, scope: !6029)
!6035 = !DILocation(line: 5424, column: 16, scope: !6036)
!6036 = distinct !DILexicalBlock(scope: !6033, file: !3, line: 5423, column: 5)
!6037 = !DILocation(line: 5424, column: 7, scope: !6036)
!6038 = !DILocation(line: 5425, column: 25, scope: !6036)
!6039 = !DILocation(line: 5425, column: 7, scope: !6036)
!6040 = !DILocation(line: 5426, column: 5, scope: !6036)
!6041 = !DILocation(line: 5428, column: 7, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5428, column: 7)
!6043 = !DILocation(line: 5428, column: 7, scope: !6029)
!6044 = !DILocation(line: 5429, column: 14, scope: !6042)
!6045 = !DILocation(line: 5429, column: 5, scope: !6042)
!6046 = !DILocation(line: 5433, column: 15, scope: !6029)
!6047 = !DILocation(line: 5433, column: 46, scope: !6029)
!6048 = !DILocation(line: 5433, column: 3, scope: !6029)
!6049 = !DILocation(line: 5435, column: 7, scope: !6050)
!6050 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5435, column: 7)
!6051 = !DILocation(line: 5435, column: 7, scope: !6029)
!6052 = !DILocation(line: 5436, column: 14, scope: !6050)
!6053 = !DILocation(line: 5436, column: 5, scope: !6050)
!6054 = !DILocation(line: 5437, column: 3, scope: !6029)
!6055 = !DILocation(line: 5439, column: 7, scope: !6056)
!6056 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5439, column: 7)
!6057 = !DILocation(line: 5439, column: 7, scope: !6029)
!6058 = !DILocation(line: 5440, column: 14, scope: !6056)
!6059 = !DILocation(line: 5440, column: 5, scope: !6056)
!6060 = !DILocation(line: 5442, column: 34, scope: !6029)
!6061 = !DILocation(line: 5442, column: 8, scope: !6029)
!6062 = !DILocation(line: 5442, column: 6, scope: !6029)
!6063 = !DILocation(line: 5444, column: 7, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5444, column: 7)
!6065 = !DILocation(line: 5444, column: 7, scope: !6029)
!6066 = !DILocation(line: 5445, column: 14, scope: !6064)
!6067 = !DILocation(line: 5445, column: 5, scope: !6064)
!6068 = !DILocation(line: 5447, column: 24, scope: !6029)
!6069 = !DILocation(line: 5447, column: 31, scope: !6029)
!6070 = !DILocation(line: 5447, column: 3, scope: !6029)
!6071 = !DILocation(line: 5449, column: 3, scope: !6029)
!6072 = !DILocation(line: 5450, column: 31, scope: !6029)
!6073 = !DILocation(line: 5450, column: 3, scope: !6029)
!6074 = !DILocation(line: 5452, column: 7, scope: !6075)
!6075 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5452, column: 7)
!6076 = !DILocation(line: 5452, column: 17, scope: !6075)
!6077 = !DILocation(line: 5452, column: 21, scope: !6075)
!6078 = !DILocation(line: 5452, column: 32, scope: !6075)
!6079 = !DILocation(line: 5452, column: 7, scope: !6029)
!6080 = !DILocation(line: 5453, column: 28, scope: !6075)
!6081 = !DILocation(line: 5453, column: 5, scope: !6075)
!6082 = !DILocation(line: 5455, column: 29, scope: !6029)
!6083 = !DILocation(line: 5455, column: 3, scope: !6029)
!6084 = !DILocation(line: 5457, column: 7, scope: !6085)
!6085 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5457, column: 7)
!6086 = !DILocation(line: 5457, column: 7, scope: !6029)
!6087 = !DILocation(line: 5458, column: 14, scope: !6085)
!6088 = !DILocation(line: 5458, column: 5, scope: !6085)
!6089 = !DILocation(line: 5460, column: 31, scope: !6029)
!6090 = !DILocation(line: 5460, column: 3, scope: !6029)
!6091 = !DILocation(line: 5462, column: 7, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5462, column: 7)
!6093 = !DILocation(line: 5462, column: 7, scope: !6029)
!6094 = !DILocation(line: 5463, column: 14, scope: !6092)
!6095 = !DILocation(line: 5463, column: 5, scope: !6092)
!6096 = !DILocation(line: 5464, column: 25, scope: !6029)
!6097 = !DILocation(line: 5464, column: 3, scope: !6029)
!6098 = !DILocation(line: 5468, column: 32, scope: !6029)
!6099 = !DILocation(line: 5468, column: 3, scope: !6029)
!6100 = !DILocation(line: 5470, column: 7, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5470, column: 7)
!6102 = !DILocation(line: 5470, column: 7, scope: !6029)
!6103 = !DILocation(line: 5471, column: 14, scope: !6101)
!6104 = !DILocation(line: 5471, column: 5, scope: !6101)
!6105 = !DILocation(line: 5473, column: 16, scope: !6029)
!6106 = !DILocation(line: 5473, column: 3, scope: !6029)
!6107 = !DILocation(line: 5475, column: 7, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 5475, column: 7)
!6109 = !DILocation(line: 5475, column: 7, scope: !6029)
!6110 = !DILocation(line: 5476, column: 29, scope: !6108)
!6111 = !DILocation(line: 5476, column: 5, scope: !6108)
!6112 = !DILocation(line: 5477, column: 1, scope: !6029)
!6113 = distinct !DISubprogram(name: "find_what_var_points_to", scope: !3, file: !3, line: 4793, type: !6114, scopeLine: 4794, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6114 = !DISubroutineType(types: !6115)
!6115 = !{null, !1758, !3756}
!6116 = !DILocalVariable(name: "orig_vi", arg: 1, scope: !6113, file: !3, line: 4793, type: !1758)
!6117 = !DILocation(line: 4793, column: 36, scope: !6113)
!6118 = !DILocalVariable(name: "pt", arg: 2, scope: !6113, file: !3, line: 4793, type: !3756)
!6119 = !DILocation(line: 4793, column: 65, scope: !6113)
!6120 = !DILocalVariable(name: "i", scope: !6113, file: !3, line: 4795, type: !6)
!6121 = !DILocation(line: 4795, column: 16, scope: !6113)
!6122 = !DILocalVariable(name: "bi", scope: !6113, file: !3, line: 4796, type: !3687)
!6123 = !DILocation(line: 4796, column: 19, scope: !6113)
!6124 = !DILocalVariable(name: "finished_solution", scope: !6113, file: !3, line: 4797, type: !2649)
!6125 = !DILocation(line: 4797, column: 10, scope: !6113)
!6126 = !DILocalVariable(name: "result", scope: !6113, file: !3, line: 4798, type: !2649)
!6127 = !DILocation(line: 4798, column: 10, scope: !6113)
!6128 = !DILocalVariable(name: "vi", scope: !6113, file: !3, line: 4799, type: !1758)
!6129 = !DILocation(line: 4799, column: 13, scope: !6113)
!6130 = !DILocation(line: 4801, column: 11, scope: !6113)
!6131 = !DILocation(line: 4801, column: 3, scope: !6113)
!6132 = !DILocation(line: 4805, column: 27, scope: !6113)
!6133 = !DILocation(line: 4805, column: 36, scope: !6113)
!6134 = !DILocation(line: 4805, column: 21, scope: !6113)
!6135 = !DILocation(line: 4805, column: 8, scope: !6113)
!6136 = !DILocation(line: 4805, column: 6, scope: !6113)
!6137 = !DILocation(line: 4809, column: 3, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6113, file: !3, line: 4809, column: 3)
!6139 = !DILocation(line: 4809, column: 3, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !6138, file: !3, line: 4809, column: 3)
!6141 = !DILocalVariable(name: "vi", scope: !6142, file: !3, line: 4811, type: !1758)
!6142 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 4810, column: 5)
!6143 = !DILocation(line: 4811, column: 17, scope: !6142)
!6144 = !DILocation(line: 4811, column: 35, scope: !6142)
!6145 = !DILocation(line: 4811, column: 22, scope: !6142)
!6146 = !DILocation(line: 4813, column: 11, scope: !6147)
!6147 = distinct !DILexicalBlock(scope: !6142, file: !3, line: 4813, column: 11)
!6148 = !DILocation(line: 4813, column: 15, scope: !6147)
!6149 = !DILocation(line: 4813, column: 11, scope: !6142)
!6150 = !DILocation(line: 4815, column: 8, scope: !6151)
!6151 = distinct !DILexicalBlock(scope: !6152, file: !3, line: 4815, column: 8)
!6152 = distinct !DILexicalBlock(scope: !6147, file: !3, line: 4814, column: 2)
!6153 = !DILocation(line: 4815, column: 12, scope: !6151)
!6154 = !DILocation(line: 4815, column: 15, scope: !6151)
!6155 = !DILocation(line: 4815, column: 8, scope: !6152)
!6156 = !DILocation(line: 4816, column: 6, scope: !6151)
!6157 = !DILocation(line: 4816, column: 10, scope: !6151)
!6158 = !DILocation(line: 4816, column: 15, scope: !6151)
!6159 = !DILocation(line: 4817, column: 13, scope: !6160)
!6160 = distinct !DILexicalBlock(scope: !6151, file: !3, line: 4817, column: 13)
!6161 = !DILocation(line: 4817, column: 17, scope: !6160)
!6162 = !DILocation(line: 4817, column: 20, scope: !6160)
!6163 = !DILocation(line: 4817, column: 13, scope: !6151)
!6164 = !DILocation(line: 4818, column: 6, scope: !6160)
!6165 = !DILocation(line: 4818, column: 10, scope: !6160)
!6166 = !DILocation(line: 4818, column: 18, scope: !6160)
!6167 = !DILocation(line: 4819, column: 13, scope: !6168)
!6168 = distinct !DILexicalBlock(scope: !6160, file: !3, line: 4819, column: 13)
!6169 = !DILocation(line: 4819, column: 17, scope: !6168)
!6170 = !DILocation(line: 4819, column: 20, scope: !6168)
!6171 = !DILocation(line: 4819, column: 13, scope: !6160)
!6172 = !DILocation(line: 4820, column: 6, scope: !6168)
!6173 = !DILocation(line: 4821, column: 13, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6168, file: !3, line: 4821, column: 13)
!6175 = !DILocation(line: 4821, column: 17, scope: !6174)
!6176 = !DILocation(line: 4821, column: 20, scope: !6174)
!6177 = !DILocation(line: 4821, column: 13, scope: !6168)
!6178 = !DILocation(line: 4822, column: 6, scope: !6174)
!6179 = !DILocation(line: 4822, column: 10, scope: !6174)
!6180 = !DILocation(line: 4822, column: 19, scope: !6174)
!6181 = !DILocation(line: 4823, column: 13, scope: !6182)
!6182 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 4823, column: 13)
!6183 = !DILocation(line: 4823, column: 17, scope: !6182)
!6184 = !DILocation(line: 4823, column: 13, scope: !6174)
!6185 = !DILocation(line: 4826, column: 13, scope: !6186)
!6186 = distinct !DILexicalBlock(scope: !6182, file: !3, line: 4826, column: 13)
!6187 = !DILocation(line: 4826, column: 17, scope: !6186)
!6188 = !DILocation(line: 4826, column: 20, scope: !6186)
!6189 = !DILocation(line: 4826, column: 13, scope: !6182)
!6190 = !DILocation(line: 4829, column: 13, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6186, file: !3, line: 4829, column: 13)
!6192 = !DILocation(line: 4829, column: 17, scope: !6191)
!6193 = !DILocation(line: 4829, column: 20, scope: !6191)
!6194 = !DILocation(line: 4830, column: 6, scope: !6191)
!6195 = !DILocation(line: 4830, column: 9, scope: !6191)
!6196 = !DILocation(line: 4830, column: 13, scope: !6191)
!6197 = !DILocation(line: 4830, column: 16, scope: !6191)
!6198 = !DILocation(line: 4829, column: 13, scope: !6186)
!6199 = !DILocation(line: 4831, column: 6, scope: !6191)
!6200 = !DILocation(line: 4831, column: 10, scope: !6191)
!6201 = !DILocation(line: 4831, column: 19, scope: !6191)
!6202 = !DILocation(line: 4832, column: 2, scope: !6152)
!6203 = !DILocation(line: 4833, column: 11, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6142, file: !3, line: 4833, column: 11)
!6205 = !DILocation(line: 4833, column: 15, scope: !6204)
!6206 = !DILocation(line: 4833, column: 11, scope: !6142)
!6207 = !DILocation(line: 4834, column: 2, scope: !6204)
!6208 = !DILocation(line: 4834, column: 6, scope: !6204)
!6209 = !DILocation(line: 4834, column: 29, scope: !6204)
!6210 = !DILocation(line: 4835, column: 5, scope: !6142)
!6211 = distinct !{!6211, !6137, !6212}
!6212 = !DILocation(line: 4835, column: 5, scope: !6138)
!6213 = !DILocation(line: 4839, column: 7, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6113, file: !3, line: 4839, column: 7)
!6215 = !DILocation(line: 4839, column: 11, scope: !6214)
!6216 = !DILocation(line: 4840, column: 7, scope: !6214)
!6217 = !DILocation(line: 4840, column: 11, scope: !6214)
!6218 = !DILocation(line: 4840, column: 20, scope: !6214)
!6219 = !DILocation(line: 4841, column: 4, scope: !6214)
!6220 = !DILocation(line: 4841, column: 8, scope: !6214)
!6221 = !DILocation(line: 4841, column: 12, scope: !6214)
!6222 = !DILocation(line: 4839, column: 7, scope: !6113)
!6223 = !DILocation(line: 4842, column: 5, scope: !6214)
!6224 = !DILocation(line: 4845, column: 23, scope: !6113)
!6225 = !DILocation(line: 4845, column: 21, scope: !6113)
!6226 = !DILocation(line: 4846, column: 31, scope: !6113)
!6227 = !DILocation(line: 4848, column: 22, scope: !6113)
!6228 = !DILocation(line: 4848, column: 41, scope: !6113)
!6229 = !DILocation(line: 4848, column: 45, scope: !6113)
!6230 = !DILocation(line: 4848, column: 55, scope: !6113)
!6231 = !DILocation(line: 4848, column: 3, scope: !6113)
!6232 = !DILocation(line: 4849, column: 34, scope: !6113)
!6233 = !DILocation(line: 4849, column: 12, scope: !6113)
!6234 = !DILocation(line: 4849, column: 10, scope: !6113)
!6235 = !DILocation(line: 4850, column: 8, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6113, file: !3, line: 4850, column: 7)
!6237 = !DILocation(line: 4850, column: 7, scope: !6113)
!6238 = !DILocation(line: 4852, column: 26, scope: !6239)
!6239 = distinct !DILexicalBlock(scope: !6236, file: !3, line: 4851, column: 5)
!6240 = !DILocation(line: 4852, column: 7, scope: !6239)
!6241 = !DILocation(line: 4853, column: 18, scope: !6239)
!6242 = !DILocation(line: 4853, column: 7, scope: !6239)
!6243 = !DILocation(line: 4853, column: 11, scope: !6239)
!6244 = !DILocation(line: 4853, column: 16, scope: !6239)
!6245 = !DILocation(line: 4854, column: 5, scope: !6239)
!6246 = !DILocation(line: 4857, column: 18, scope: !6247)
!6247 = distinct !DILexicalBlock(scope: !6236, file: !3, line: 4856, column: 5)
!6248 = !DILocation(line: 4857, column: 7, scope: !6247)
!6249 = !DILocation(line: 4857, column: 11, scope: !6247)
!6250 = !DILocation(line: 4857, column: 16, scope: !6247)
!6251 = !DILocation(line: 4858, column: 21, scope: !6247)
!6252 = !DILocation(line: 4858, column: 7, scope: !6247)
!6253 = !DILocation(line: 4860, column: 1, scope: !6113)
!6254 = distinct !DISubprogram(name: "VEC_varinfo_t_base_iterate", scope: !3, file: !3, line: 273, type: !6255, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6255 = !DISubroutineType(types: !6256)
!6256 = !{!1730, !4898, !6, !6257}
!6257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1758, size: 64)
!6258 = !DILocalVariable(name: "vec_", arg: 1, scope: !6254, file: !3, line: 273, type: !4898)
!6259 = !DILocation(line: 273, column: 1, scope: !6254)
!6260 = !DILocalVariable(name: "ix_", arg: 2, scope: !6254, file: !3, line: 273, type: !6)
!6261 = !DILocalVariable(name: "ptr", arg: 3, scope: !6254, file: !3, line: 273, type: !6257)
!6262 = !DILocation(line: 273, column: 1, scope: !6263)
!6263 = distinct !DILexicalBlock(scope: !6254, file: !3, line: 273, column: 1)
!6264 = !DILocation(line: 273, column: 1, scope: !6265)
!6265 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 273, column: 1)
!6266 = !DILocation(line: 273, column: 1, scope: !6267)
!6267 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 273, column: 1)
!6268 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !140, file: !140, line: 182, type: !6269, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6269 = !DISubroutineType(types: !6270)
!6270 = !{!6, !6271}
!6271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6272, size: 64)
!6272 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2631)
!6273 = !DILocalVariable(name: "vec_", arg: 1, scope: !6268, file: !140, line: 182, type: !6271)
!6274 = !DILocation(line: 182, column: 1, scope: !6268)
!6275 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !140, file: !140, line: 182, type: !6276, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6276 = !DISubroutineType(types: !6277)
!6277 = !{!1780, !6271, !6}
!6278 = !DILocalVariable(name: "vec_", arg: 1, scope: !6275, file: !140, line: 182, type: !6271)
!6279 = !DILocation(line: 182, column: 1, scope: !6275)
!6280 = !DILocalVariable(name: "ix_", arg: 2, scope: !6275, file: !140, line: 182, type: !6)
!6281 = !DILocation(line: 0, scope: !6275)
!6282 = distinct !DISubprogram(name: "find_what_p_points_to", scope: !3, file: !3, line: 4865, type: !6283, scopeLine: 4866, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6283 = !DISubroutineType(types: !6284)
!6284 = !{null, !1780}
!6285 = !DILocalVariable(name: "p", arg: 1, scope: !6282, file: !3, line: 4865, type: !1780)
!6286 = !DILocation(line: 4865, column: 29, scope: !6282)
!6287 = !DILocalVariable(name: "pi", scope: !6282, file: !3, line: 4867, type: !2827)
!6288 = !DILocation(line: 4867, column: 24, scope: !6282)
!6289 = !DILocalVariable(name: "lookup_p", scope: !6282, file: !3, line: 4868, type: !1780)
!6290 = !DILocation(line: 4868, column: 8, scope: !6282)
!6291 = !DILocation(line: 4868, column: 19, scope: !6282)
!6292 = !DILocalVariable(name: "vi", scope: !6282, file: !3, line: 4869, type: !1758)
!6293 = !DILocation(line: 4869, column: 13, scope: !6282)
!6294 = !DILocation(line: 4873, column: 7, scope: !6295)
!6295 = distinct !DILexicalBlock(scope: !6282, file: !3, line: 4873, column: 7)
!6296 = !DILocation(line: 4873, column: 21, scope: !6295)
!6297 = !DILocation(line: 4874, column: 7, scope: !6295)
!6298 = !DILocation(line: 4874, column: 10, scope: !6295)
!6299 = !DILocation(line: 4874, column: 39, scope: !6295)
!6300 = !DILocation(line: 4875, column: 7, scope: !6295)
!6301 = !DILocation(line: 4875, column: 10, scope: !6295)
!6302 = !DILocation(line: 4873, column: 7, scope: !6282)
!6303 = !DILocation(line: 4876, column: 16, scope: !6295)
!6304 = !DILocation(line: 4876, column: 14, scope: !6295)
!6305 = !DILocation(line: 4876, column: 5, scope: !6295)
!6306 = !DILocation(line: 4878, column: 28, scope: !6282)
!6307 = !DILocation(line: 4878, column: 8, scope: !6282)
!6308 = !DILocation(line: 4878, column: 6, scope: !6282)
!6309 = !DILocation(line: 4879, column: 8, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6282, file: !3, line: 4879, column: 7)
!6311 = !DILocation(line: 4879, column: 7, scope: !6282)
!6312 = !DILocation(line: 4880, column: 5, scope: !6310)
!6313 = !DILocation(line: 4882, column: 22, scope: !6282)
!6314 = !DILocation(line: 4882, column: 8, scope: !6282)
!6315 = !DILocation(line: 4882, column: 6, scope: !6282)
!6316 = !DILocation(line: 4883, column: 28, scope: !6282)
!6317 = !DILocation(line: 4883, column: 33, scope: !6282)
!6318 = !DILocation(line: 4883, column: 37, scope: !6282)
!6319 = !DILocation(line: 4883, column: 3, scope: !6282)
!6320 = !DILocation(line: 4884, column: 1, scope: !6282)
!6321 = distinct !DISubprogram(name: "VEC_constraint_t_heap_alloc", scope: !3, file: !3, line: 190, type: !6322, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6322 = !DISubroutineType(types: !6323)
!6323 = !{!1731, !1730}
!6324 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6321, file: !3, line: 190, type: !1730)
!6325 = !DILocation(line: 190, column: 1, scope: !6321)
!6326 = distinct !DISubprogram(name: "VEC_varinfo_t_heap_alloc", scope: !3, file: !3, line: 275, type: !6327, scopeLine: 275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6327 = !DISubroutineType(types: !6328)
!6328 = !{!1746, !1730}
!6329 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6326, file: !3, line: 275, type: !1730)
!6330 = !DILocation(line: 275, column: 1, scope: !6326)
!6331 = distinct !DISubprogram(name: "shared_bitmap_hash", scope: !3, file: !3, line: 4704, type: !2573, scopeLine: 4705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6332 = !DILocalVariable(name: "p", arg: 1, scope: !6331, file: !3, line: 4704, type: !2407)
!6333 = !DILocation(line: 4704, column: 33, scope: !6331)
!6334 = !DILocalVariable(name: "bi", scope: !6331, file: !3, line: 4706, type: !6335)
!6335 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3104)
!6336 = !DILocation(line: 4706, column: 36, scope: !6331)
!6337 = !DILocation(line: 4706, column: 70, scope: !6331)
!6338 = !DILocation(line: 4706, column: 41, scope: !6331)
!6339 = !DILocation(line: 4707, column: 10, scope: !6331)
!6340 = !DILocation(line: 4707, column: 14, scope: !6331)
!6341 = !DILocation(line: 4707, column: 3, scope: !6331)
!6342 = distinct !DISubprogram(name: "shared_bitmap_eq", scope: !3, file: !3, line: 4713, type: !2579, scopeLine: 4714, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6343 = !DILocalVariable(name: "p1", arg: 1, scope: !6342, file: !3, line: 4713, type: !2407)
!6344 = !DILocation(line: 4713, column: 31, scope: !6342)
!6345 = !DILocalVariable(name: "p2", arg: 2, scope: !6342, file: !3, line: 4713, type: !2407)
!6346 = !DILocation(line: 4713, column: 47, scope: !6342)
!6347 = !DILocalVariable(name: "sbi1", scope: !6342, file: !3, line: 4715, type: !6335)
!6348 = !DILocation(line: 4715, column: 36, scope: !6342)
!6349 = !DILocation(line: 4715, column: 72, scope: !6342)
!6350 = !DILocation(line: 4715, column: 43, scope: !6342)
!6351 = !DILocalVariable(name: "sbi2", scope: !6342, file: !3, line: 4716, type: !6335)
!6352 = !DILocation(line: 4716, column: 36, scope: !6342)
!6353 = !DILocation(line: 4716, column: 72, scope: !6342)
!6354 = !DILocation(line: 4716, column: 43, scope: !6342)
!6355 = !DILocation(line: 4717, column: 26, scope: !6342)
!6356 = !DILocation(line: 4717, column: 32, scope: !6342)
!6357 = !DILocation(line: 4717, column: 41, scope: !6342)
!6358 = !DILocation(line: 4717, column: 47, scope: !6342)
!6359 = !DILocation(line: 4717, column: 10, scope: !6342)
!6360 = !DILocation(line: 4717, column: 3, scope: !6342)
!6361 = distinct !DISubprogram(name: "init_base_vars", scope: !3, file: !3, line: 5138, type: !3548, scopeLine: 5139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6362 = !DILocalVariable(name: "lhs", scope: !6361, file: !3, line: 5140, type: !1720)
!6363 = !DILocation(line: 5140, column: 26, scope: !6361)
!6364 = !DILocalVariable(name: "rhs", scope: !6361, file: !3, line: 5140, type: !1720)
!6365 = !DILocation(line: 5140, column: 31, scope: !6361)
!6366 = !DILocalVariable(name: "var_anything", scope: !6361, file: !3, line: 5141, type: !1758)
!6367 = !DILocation(line: 5141, column: 13, scope: !6361)
!6368 = !DILocalVariable(name: "var_nothing", scope: !6361, file: !3, line: 5142, type: !1758)
!6369 = !DILocation(line: 5142, column: 13, scope: !6361)
!6370 = !DILocalVariable(name: "var_readonly", scope: !6361, file: !3, line: 5143, type: !1758)
!6371 = !DILocation(line: 5143, column: 13, scope: !6361)
!6372 = !DILocalVariable(name: "var_escaped", scope: !6361, file: !3, line: 5144, type: !1758)
!6373 = !DILocation(line: 5144, column: 13, scope: !6361)
!6374 = !DILocalVariable(name: "var_nonlocal", scope: !6361, file: !3, line: 5145, type: !1758)
!6375 = !DILocation(line: 5145, column: 13, scope: !6361)
!6376 = !DILocalVariable(name: "var_callused", scope: !6361, file: !3, line: 5146, type: !1758)
!6377 = !DILocation(line: 5146, column: 13, scope: !6361)
!6378 = !DILocalVariable(name: "var_storedanything", scope: !6361, file: !3, line: 5147, type: !1758)
!6379 = !DILocation(line: 5147, column: 13, scope: !6361)
!6380 = !DILocalVariable(name: "var_integer", scope: !6361, file: !3, line: 5148, type: !1758)
!6381 = !DILocation(line: 5148, column: 13, scope: !6361)
!6382 = !DILocation(line: 5152, column: 17, scope: !6361)
!6383 = !DILocation(line: 5152, column: 15, scope: !6361)
!6384 = !DILocation(line: 5153, column: 3, scope: !6361)
!6385 = !DILocation(line: 5154, column: 3, scope: !6361)
!6386 = !DILocation(line: 5154, column: 16, scope: !6361)
!6387 = !DILocation(line: 5154, column: 34, scope: !6361)
!6388 = !DILocation(line: 5155, column: 3, scope: !6361)
!6389 = !DILocation(line: 5155, column: 16, scope: !6361)
!6390 = !DILocation(line: 5155, column: 23, scope: !6361)
!6391 = !DILocation(line: 5156, column: 3, scope: !6361)
!6392 = !DILocation(line: 5156, column: 16, scope: !6361)
!6393 = !DILocation(line: 5156, column: 21, scope: !6361)
!6394 = !DILocation(line: 5157, column: 3, scope: !6361)
!6395 = !DILocation(line: 5157, column: 16, scope: !6361)
!6396 = !DILocation(line: 5157, column: 25, scope: !6361)
!6397 = !DILocation(line: 5158, column: 3, scope: !6361)
!6398 = !DILocation(line: 5158, column: 16, scope: !6361)
!6399 = !DILocation(line: 5158, column: 31, scope: !6361)
!6400 = !DILocation(line: 5162, column: 18, scope: !6361)
!6401 = !DILocation(line: 5162, column: 16, scope: !6361)
!6402 = !DILocation(line: 5163, column: 3, scope: !6361)
!6403 = !DILocation(line: 5164, column: 3, scope: !6361)
!6404 = !DILocation(line: 5164, column: 17, scope: !6361)
!6405 = !DILocation(line: 5164, column: 35, scope: !6361)
!6406 = !DILocation(line: 5165, column: 3, scope: !6361)
!6407 = !DILocation(line: 5165, column: 17, scope: !6361)
!6408 = !DILocation(line: 5165, column: 22, scope: !6361)
!6409 = !DILocation(line: 5166, column: 3, scope: !6361)
!6410 = !DILocation(line: 5166, column: 17, scope: !6361)
!6411 = !DILocation(line: 5166, column: 24, scope: !6361)
!6412 = !DILocation(line: 5167, column: 3, scope: !6361)
!6413 = !DILocation(line: 5167, column: 17, scope: !6361)
!6414 = !DILocation(line: 5167, column: 22, scope: !6361)
!6415 = !DILocation(line: 5168, column: 3, scope: !6361)
!6416 = !DILocation(line: 5168, column: 17, scope: !6361)
!6417 = !DILocation(line: 5168, column: 26, scope: !6361)
!6418 = !DILocation(line: 5169, column: 3, scope: !6361)
!6419 = !DILocation(line: 5169, column: 17, scope: !6361)
!6420 = !DILocation(line: 5169, column: 32, scope: !6361)
!6421 = !DILocation(line: 5174, column: 7, scope: !6361)
!6422 = !DILocation(line: 5174, column: 12, scope: !6361)
!6423 = !DILocation(line: 5175, column: 7, scope: !6361)
!6424 = !DILocation(line: 5175, column: 11, scope: !6361)
!6425 = !DILocation(line: 5176, column: 7, scope: !6361)
!6426 = !DILocation(line: 5176, column: 14, scope: !6361)
!6427 = !DILocation(line: 5177, column: 7, scope: !6361)
!6428 = !DILocation(line: 5177, column: 12, scope: !6361)
!6429 = !DILocation(line: 5178, column: 7, scope: !6361)
!6430 = !DILocation(line: 5178, column: 11, scope: !6361)
!6431 = !DILocation(line: 5179, column: 7, scope: !6361)
!6432 = !DILocation(line: 5179, column: 14, scope: !6361)
!6433 = !DILocation(line: 5184, column: 3, scope: !6361)
!6434 = !DILocation(line: 5188, column: 18, scope: !6361)
!6435 = !DILocation(line: 5188, column: 16, scope: !6361)
!6436 = !DILocation(line: 5189, column: 3, scope: !6361)
!6437 = !DILocation(line: 5190, column: 3, scope: !6361)
!6438 = !DILocation(line: 5190, column: 17, scope: !6361)
!6439 = !DILocation(line: 5190, column: 35, scope: !6361)
!6440 = !DILocation(line: 5191, column: 3, scope: !6361)
!6441 = !DILocation(line: 5191, column: 17, scope: !6361)
!6442 = !DILocation(line: 5191, column: 24, scope: !6361)
!6443 = !DILocation(line: 5192, column: 3, scope: !6361)
!6444 = !DILocation(line: 5192, column: 17, scope: !6361)
!6445 = !DILocation(line: 5192, column: 22, scope: !6361)
!6446 = !DILocation(line: 5193, column: 3, scope: !6361)
!6447 = !DILocation(line: 5193, column: 17, scope: !6361)
!6448 = !DILocation(line: 5193, column: 26, scope: !6361)
!6449 = !DILocation(line: 5194, column: 3, scope: !6361)
!6450 = !DILocation(line: 5194, column: 17, scope: !6361)
!6451 = !DILocation(line: 5194, column: 22, scope: !6361)
!6452 = !DILocation(line: 5195, column: 3, scope: !6361)
!6453 = !DILocation(line: 5195, column: 17, scope: !6361)
!6454 = !DILocation(line: 5195, column: 32, scope: !6361)
!6455 = !DILocation(line: 5201, column: 7, scope: !6361)
!6456 = !DILocation(line: 5201, column: 12, scope: !6361)
!6457 = !DILocation(line: 5202, column: 7, scope: !6361)
!6458 = !DILocation(line: 5202, column: 11, scope: !6361)
!6459 = !DILocation(line: 5203, column: 7, scope: !6361)
!6460 = !DILocation(line: 5203, column: 14, scope: !6361)
!6461 = !DILocation(line: 5204, column: 7, scope: !6361)
!6462 = !DILocation(line: 5204, column: 12, scope: !6361)
!6463 = !DILocation(line: 5205, column: 7, scope: !6361)
!6464 = !DILocation(line: 5205, column: 11, scope: !6361)
!6465 = !DILocation(line: 5206, column: 7, scope: !6361)
!6466 = !DILocation(line: 5206, column: 14, scope: !6361)
!6467 = !DILocation(line: 5207, column: 23, scope: !6361)
!6468 = !DILocation(line: 5207, column: 3, scope: !6361)
!6469 = !DILocation(line: 5211, column: 17, scope: !6361)
!6470 = !DILocation(line: 5211, column: 15, scope: !6361)
!6471 = !DILocation(line: 5212, column: 3, scope: !6361)
!6472 = !DILocation(line: 5213, column: 3, scope: !6361)
!6473 = !DILocation(line: 5213, column: 16, scope: !6361)
!6474 = !DILocation(line: 5213, column: 34, scope: !6361)
!6475 = !DILocation(line: 5214, column: 3, scope: !6361)
!6476 = !DILocation(line: 5214, column: 16, scope: !6361)
!6477 = !DILocation(line: 5214, column: 23, scope: !6361)
!6478 = !DILocation(line: 5215, column: 3, scope: !6361)
!6479 = !DILocation(line: 5215, column: 16, scope: !6361)
!6480 = !DILocation(line: 5215, column: 21, scope: !6361)
!6481 = !DILocation(line: 5216, column: 3, scope: !6361)
!6482 = !DILocation(line: 5216, column: 16, scope: !6361)
!6483 = !DILocation(line: 5216, column: 25, scope: !6361)
!6484 = !DILocation(line: 5217, column: 3, scope: !6361)
!6485 = !DILocation(line: 5217, column: 16, scope: !6361)
!6486 = !DILocation(line: 5217, column: 31, scope: !6361)
!6487 = !DILocation(line: 5221, column: 18, scope: !6361)
!6488 = !DILocation(line: 5221, column: 16, scope: !6361)
!6489 = !DILocation(line: 5222, column: 3, scope: !6361)
!6490 = !DILocation(line: 5223, column: 3, scope: !6361)
!6491 = !DILocation(line: 5223, column: 17, scope: !6361)
!6492 = !DILocation(line: 5223, column: 35, scope: !6361)
!6493 = !DILocation(line: 5224, column: 3, scope: !6361)
!6494 = !DILocation(line: 5224, column: 17, scope: !6361)
!6495 = !DILocation(line: 5224, column: 24, scope: !6361)
!6496 = !DILocation(line: 5225, column: 3, scope: !6361)
!6497 = !DILocation(line: 5225, column: 17, scope: !6361)
!6498 = !DILocation(line: 5225, column: 22, scope: !6361)
!6499 = !DILocation(line: 5226, column: 3, scope: !6361)
!6500 = !DILocation(line: 5226, column: 17, scope: !6361)
!6501 = !DILocation(line: 5226, column: 26, scope: !6361)
!6502 = !DILocation(line: 5227, column: 3, scope: !6361)
!6503 = !DILocation(line: 5227, column: 17, scope: !6361)
!6504 = !DILocation(line: 5227, column: 32, scope: !6361)
!6505 = !DILocation(line: 5230, column: 7, scope: !6361)
!6506 = !DILocation(line: 5230, column: 12, scope: !6361)
!6507 = !DILocation(line: 5231, column: 7, scope: !6361)
!6508 = !DILocation(line: 5231, column: 11, scope: !6361)
!6509 = !DILocation(line: 5232, column: 7, scope: !6361)
!6510 = !DILocation(line: 5232, column: 14, scope: !6361)
!6511 = !DILocation(line: 5233, column: 7, scope: !6361)
!6512 = !DILocation(line: 5233, column: 12, scope: !6361)
!6513 = !DILocation(line: 5234, column: 7, scope: !6361)
!6514 = !DILocation(line: 5234, column: 11, scope: !6361)
!6515 = !DILocation(line: 5235, column: 7, scope: !6361)
!6516 = !DILocation(line: 5235, column: 14, scope: !6361)
!6517 = !DILocation(line: 5236, column: 23, scope: !6361)
!6518 = !DILocation(line: 5236, column: 3, scope: !6361)
!6519 = !DILocation(line: 5240, column: 7, scope: !6361)
!6520 = !DILocation(line: 5240, column: 12, scope: !6361)
!6521 = !DILocation(line: 5241, column: 7, scope: !6361)
!6522 = !DILocation(line: 5241, column: 11, scope: !6361)
!6523 = !DILocation(line: 5242, column: 7, scope: !6361)
!6524 = !DILocation(line: 5242, column: 14, scope: !6361)
!6525 = !DILocation(line: 5243, column: 7, scope: !6361)
!6526 = !DILocation(line: 5243, column: 12, scope: !6361)
!6527 = !DILocation(line: 5244, column: 7, scope: !6361)
!6528 = !DILocation(line: 5244, column: 11, scope: !6361)
!6529 = !DILocation(line: 5245, column: 7, scope: !6361)
!6530 = !DILocation(line: 5245, column: 14, scope: !6361)
!6531 = !DILocation(line: 5246, column: 23, scope: !6361)
!6532 = !DILocation(line: 5246, column: 3, scope: !6361)
!6533 = !DILocation(line: 5251, column: 7, scope: !6361)
!6534 = !DILocation(line: 5251, column: 12, scope: !6361)
!6535 = !DILocation(line: 5252, column: 7, scope: !6361)
!6536 = !DILocation(line: 5252, column: 11, scope: !6361)
!6537 = !DILocation(line: 5253, column: 7, scope: !6361)
!6538 = !DILocation(line: 5253, column: 14, scope: !6361)
!6539 = !DILocation(line: 5254, column: 7, scope: !6361)
!6540 = !DILocation(line: 5254, column: 12, scope: !6361)
!6541 = !DILocation(line: 5255, column: 7, scope: !6361)
!6542 = !DILocation(line: 5255, column: 11, scope: !6361)
!6543 = !DILocation(line: 5256, column: 7, scope: !6361)
!6544 = !DILocation(line: 5256, column: 14, scope: !6361)
!6545 = !DILocation(line: 5257, column: 23, scope: !6361)
!6546 = !DILocation(line: 5257, column: 3, scope: !6361)
!6547 = !DILocation(line: 5261, column: 7, scope: !6361)
!6548 = !DILocation(line: 5261, column: 12, scope: !6361)
!6549 = !DILocation(line: 5262, column: 7, scope: !6361)
!6550 = !DILocation(line: 5262, column: 11, scope: !6361)
!6551 = !DILocation(line: 5263, column: 7, scope: !6361)
!6552 = !DILocation(line: 5263, column: 14, scope: !6361)
!6553 = !DILocation(line: 5264, column: 7, scope: !6361)
!6554 = !DILocation(line: 5264, column: 12, scope: !6361)
!6555 = !DILocation(line: 5265, column: 7, scope: !6361)
!6556 = !DILocation(line: 5265, column: 11, scope: !6361)
!6557 = !DILocation(line: 5266, column: 7, scope: !6361)
!6558 = !DILocation(line: 5266, column: 14, scope: !6361)
!6559 = !DILocation(line: 5267, column: 23, scope: !6361)
!6560 = !DILocation(line: 5267, column: 3, scope: !6361)
!6561 = !DILocation(line: 5268, column: 7, scope: !6361)
!6562 = !DILocation(line: 5268, column: 12, scope: !6361)
!6563 = !DILocation(line: 5269, column: 7, scope: !6361)
!6564 = !DILocation(line: 5269, column: 11, scope: !6361)
!6565 = !DILocation(line: 5270, column: 7, scope: !6361)
!6566 = !DILocation(line: 5270, column: 14, scope: !6361)
!6567 = !DILocation(line: 5271, column: 23, scope: !6361)
!6568 = !DILocation(line: 5271, column: 3, scope: !6361)
!6569 = !DILocation(line: 5275, column: 18, scope: !6361)
!6570 = !DILocation(line: 5275, column: 16, scope: !6361)
!6571 = !DILocation(line: 5276, column: 3, scope: !6361)
!6572 = !DILocation(line: 5277, column: 3, scope: !6361)
!6573 = !DILocation(line: 5277, column: 17, scope: !6361)
!6574 = !DILocation(line: 5277, column: 35, scope: !6361)
!6575 = !DILocation(line: 5278, column: 3, scope: !6361)
!6576 = !DILocation(line: 5278, column: 17, scope: !6361)
!6577 = !DILocation(line: 5278, column: 24, scope: !6361)
!6578 = !DILocation(line: 5279, column: 3, scope: !6361)
!6579 = !DILocation(line: 5279, column: 17, scope: !6361)
!6580 = !DILocation(line: 5279, column: 22, scope: !6361)
!6581 = !DILocation(line: 5280, column: 3, scope: !6361)
!6582 = !DILocation(line: 5280, column: 17, scope: !6361)
!6583 = !DILocation(line: 5280, column: 26, scope: !6361)
!6584 = !DILocation(line: 5281, column: 3, scope: !6361)
!6585 = !DILocation(line: 5281, column: 17, scope: !6361)
!6586 = !DILocation(line: 5281, column: 32, scope: !6361)
!6587 = !DILocation(line: 5284, column: 7, scope: !6361)
!6588 = !DILocation(line: 5284, column: 12, scope: !6361)
!6589 = !DILocation(line: 5285, column: 7, scope: !6361)
!6590 = !DILocation(line: 5285, column: 11, scope: !6361)
!6591 = !DILocation(line: 5286, column: 7, scope: !6361)
!6592 = !DILocation(line: 5286, column: 14, scope: !6361)
!6593 = !DILocation(line: 5287, column: 7, scope: !6361)
!6594 = !DILocation(line: 5287, column: 12, scope: !6361)
!6595 = !DILocation(line: 5288, column: 7, scope: !6361)
!6596 = !DILocation(line: 5288, column: 11, scope: !6361)
!6597 = !DILocation(line: 5289, column: 7, scope: !6361)
!6598 = !DILocation(line: 5289, column: 14, scope: !6361)
!6599 = !DILocation(line: 5290, column: 23, scope: !6361)
!6600 = !DILocation(line: 5290, column: 3, scope: !6361)
!6601 = !DILocation(line: 5294, column: 7, scope: !6361)
!6602 = !DILocation(line: 5294, column: 12, scope: !6361)
!6603 = !DILocation(line: 5295, column: 7, scope: !6361)
!6604 = !DILocation(line: 5295, column: 11, scope: !6361)
!6605 = !DILocation(line: 5296, column: 7, scope: !6361)
!6606 = !DILocation(line: 5296, column: 14, scope: !6361)
!6607 = !DILocation(line: 5297, column: 7, scope: !6361)
!6608 = !DILocation(line: 5297, column: 12, scope: !6361)
!6609 = !DILocation(line: 5298, column: 7, scope: !6361)
!6610 = !DILocation(line: 5298, column: 11, scope: !6361)
!6611 = !DILocation(line: 5299, column: 7, scope: !6361)
!6612 = !DILocation(line: 5299, column: 14, scope: !6361)
!6613 = !DILocation(line: 5300, column: 23, scope: !6361)
!6614 = !DILocation(line: 5300, column: 3, scope: !6361)
!6615 = !DILocation(line: 5304, column: 24, scope: !6361)
!6616 = !DILocation(line: 5304, column: 22, scope: !6361)
!6617 = !DILocation(line: 5305, column: 3, scope: !6361)
!6618 = !DILocation(line: 5306, column: 3, scope: !6361)
!6619 = !DILocation(line: 5306, column: 23, scope: !6361)
!6620 = !DILocation(line: 5306, column: 41, scope: !6361)
!6621 = !DILocation(line: 5307, column: 3, scope: !6361)
!6622 = !DILocation(line: 5307, column: 23, scope: !6361)
!6623 = !DILocation(line: 5307, column: 30, scope: !6361)
!6624 = !DILocation(line: 5308, column: 3, scope: !6361)
!6625 = !DILocation(line: 5308, column: 23, scope: !6361)
!6626 = !DILocation(line: 5308, column: 28, scope: !6361)
!6627 = !DILocation(line: 5309, column: 3, scope: !6361)
!6628 = !DILocation(line: 5309, column: 23, scope: !6361)
!6629 = !DILocation(line: 5309, column: 32, scope: !6361)
!6630 = !DILocation(line: 5310, column: 3, scope: !6361)
!6631 = !DILocation(line: 5310, column: 23, scope: !6361)
!6632 = !DILocation(line: 5310, column: 38, scope: !6361)
!6633 = !DILocation(line: 5314, column: 17, scope: !6361)
!6634 = !DILocation(line: 5314, column: 15, scope: !6361)
!6635 = !DILocation(line: 5315, column: 3, scope: !6361)
!6636 = !DILocation(line: 5316, column: 3, scope: !6361)
!6637 = !DILocation(line: 5316, column: 16, scope: !6361)
!6638 = !DILocation(line: 5316, column: 34, scope: !6361)
!6639 = !DILocation(line: 5317, column: 3, scope: !6361)
!6640 = !DILocation(line: 5317, column: 16, scope: !6361)
!6641 = !DILocation(line: 5317, column: 21, scope: !6361)
!6642 = !DILocation(line: 5318, column: 3, scope: !6361)
!6643 = !DILocation(line: 5318, column: 16, scope: !6361)
!6644 = !DILocation(line: 5318, column: 25, scope: !6361)
!6645 = !DILocation(line: 5319, column: 3, scope: !6361)
!6646 = !DILocation(line: 5319, column: 16, scope: !6361)
!6647 = !DILocation(line: 5319, column: 23, scope: !6361)
!6648 = !DILocation(line: 5320, column: 3, scope: !6361)
!6649 = !DILocation(line: 5320, column: 16, scope: !6361)
!6650 = !DILocation(line: 5320, column: 21, scope: !6361)
!6651 = !DILocation(line: 5321, column: 3, scope: !6361)
!6652 = !DILocation(line: 5321, column: 16, scope: !6361)
!6653 = !DILocation(line: 5321, column: 31, scope: !6361)
!6654 = !DILocation(line: 5325, column: 7, scope: !6361)
!6655 = !DILocation(line: 5325, column: 12, scope: !6361)
!6656 = !DILocation(line: 5326, column: 7, scope: !6361)
!6657 = !DILocation(line: 5326, column: 11, scope: !6361)
!6658 = !DILocation(line: 5327, column: 7, scope: !6361)
!6659 = !DILocation(line: 5327, column: 14, scope: !6361)
!6660 = !DILocation(line: 5328, column: 7, scope: !6361)
!6661 = !DILocation(line: 5328, column: 12, scope: !6361)
!6662 = !DILocation(line: 5329, column: 7, scope: !6361)
!6663 = !DILocation(line: 5329, column: 11, scope: !6361)
!6664 = !DILocation(line: 5330, column: 7, scope: !6361)
!6665 = !DILocation(line: 5330, column: 14, scope: !6361)
!6666 = !DILocation(line: 5331, column: 23, scope: !6361)
!6667 = !DILocation(line: 5331, column: 3, scope: !6361)
!6668 = !DILocation(line: 5332, column: 1, scope: !6361)
!6669 = distinct !DISubprogram(name: "new_var_info", scope: !3, file: !3, line: 354, type: !6670, scopeLine: 355, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6670 = !DISubroutineType(types: !6671)
!6671 = !{!1758, !1780, !1776}
!6672 = !DILocalVariable(name: "t", arg: 1, scope: !6669, file: !3, line: 354, type: !1780)
!6673 = !DILocation(line: 354, column: 20, scope: !6669)
!6674 = !DILocalVariable(name: "name", arg: 2, scope: !6669, file: !3, line: 354, type: !1776)
!6675 = !DILocation(line: 354, column: 35, scope: !6669)
!6676 = !DILocalVariable(name: "index", scope: !6669, file: !3, line: 356, type: !6)
!6677 = !DILocation(line: 356, column: 12, scope: !6669)
!6678 = !DILocation(line: 356, column: 20, scope: !6669)
!6679 = !DILocalVariable(name: "ret", scope: !6669, file: !3, line: 357, type: !1758)
!6680 = !DILocation(line: 357, column: 13, scope: !6669)
!6681 = !DILocation(line: 357, column: 43, scope: !6669)
!6682 = !DILocation(line: 357, column: 31, scope: !6669)
!6683 = !DILocation(line: 357, column: 19, scope: !6669)
!6684 = !DILocation(line: 359, column: 13, scope: !6669)
!6685 = !DILocation(line: 359, column: 3, scope: !6669)
!6686 = !DILocation(line: 359, column: 8, scope: !6669)
!6687 = !DILocation(line: 359, column: 11, scope: !6669)
!6688 = !DILocation(line: 360, column: 15, scope: !6669)
!6689 = !DILocation(line: 360, column: 3, scope: !6669)
!6690 = !DILocation(line: 360, column: 8, scope: !6669)
!6691 = !DILocation(line: 360, column: 13, scope: !6669)
!6692 = !DILocation(line: 361, column: 15, scope: !6669)
!6693 = !DILocation(line: 361, column: 3, scope: !6669)
!6694 = !DILocation(line: 361, column: 8, scope: !6669)
!6695 = !DILocation(line: 361, column: 13, scope: !6669)
!6696 = !DILocation(line: 363, column: 29, scope: !6669)
!6697 = !DILocation(line: 363, column: 31, scope: !6669)
!6698 = !DILocation(line: 363, column: 3, scope: !6669)
!6699 = !DILocation(line: 363, column: 8, scope: !6669)
!6700 = !DILocation(line: 363, column: 26, scope: !6669)
!6701 = !DILocation(line: 364, column: 3, scope: !6669)
!6702 = !DILocation(line: 364, column: 8, scope: !6669)
!6703 = !DILocation(line: 364, column: 23, scope: !6669)
!6704 = !DILocation(line: 365, column: 3, scope: !6669)
!6705 = !DILocation(line: 365, column: 8, scope: !6669)
!6706 = !DILocation(line: 365, column: 28, scope: !6669)
!6707 = !DILocation(line: 366, column: 23, scope: !6669)
!6708 = !DILocation(line: 366, column: 25, scope: !6669)
!6709 = !DILocation(line: 366, column: 3, scope: !6669)
!6710 = !DILocation(line: 366, column: 8, scope: !6669)
!6711 = !DILocation(line: 366, column: 20, scope: !6669)
!6712 = !DILocation(line: 367, column: 3, scope: !6669)
!6713 = !DILocation(line: 367, column: 8, scope: !6669)
!6714 = !DILocation(line: 367, column: 20, scope: !6669)
!6715 = !DILocation(line: 368, column: 3, scope: !6669)
!6716 = !DILocation(line: 368, column: 8, scope: !6669)
!6717 = !DILocation(line: 368, column: 24, scope: !6669)
!6718 = !DILocation(line: 369, column: 3, scope: !6669)
!6719 = !DILocation(line: 369, column: 8, scope: !6669)
!6720 = !DILocation(line: 369, column: 26, scope: !6669)
!6721 = !DILocation(line: 370, column: 25, scope: !6669)
!6722 = !DILocation(line: 370, column: 27, scope: !6669)
!6723 = !DILocation(line: 370, column: 3, scope: !6669)
!6724 = !DILocation(line: 370, column: 8, scope: !6669)
!6725 = !DILocation(line: 370, column: 22, scope: !6669)
!6726 = !DILocation(line: 371, column: 7, scope: !6727)
!6727 = distinct !DILexicalBlock(scope: !6669, file: !3, line: 371, column: 7)
!6728 = !DILocation(line: 371, column: 9, scope: !6727)
!6729 = !DILocation(line: 371, column: 12, scope: !6727)
!6730 = !DILocation(line: 371, column: 7, scope: !6669)
!6731 = !DILocation(line: 372, column: 41, scope: !6727)
!6732 = !DILocation(line: 372, column: 26, scope: !6727)
!6733 = !DILocation(line: 372, column: 5, scope: !6727)
!6734 = !DILocation(line: 372, column: 10, scope: !6727)
!6735 = !DILocation(line: 372, column: 24, scope: !6727)
!6736 = !DILocation(line: 373, column: 19, scope: !6669)
!6737 = !DILocation(line: 373, column: 3, scope: !6669)
!6738 = !DILocation(line: 373, column: 8, scope: !6669)
!6739 = !DILocation(line: 373, column: 17, scope: !6669)
!6740 = !DILocation(line: 374, column: 22, scope: !6669)
!6741 = !DILocation(line: 374, column: 3, scope: !6669)
!6742 = !DILocation(line: 374, column: 8, scope: !6669)
!6743 = !DILocation(line: 374, column: 20, scope: !6669)
!6744 = !DILocation(line: 375, column: 3, scope: !6669)
!6745 = !DILocation(line: 375, column: 8, scope: !6669)
!6746 = !DILocation(line: 375, column: 13, scope: !6669)
!6747 = !DILocation(line: 377, column: 3, scope: !6669)
!6748 = !DILocation(line: 379, column: 10, scope: !6669)
!6749 = !DILocation(line: 379, column: 3, scope: !6669)
!6750 = distinct !DISubprogram(name: "VEC_constraint_t_heap_safe_push", scope: !3, file: !3, line: 190, type: !6751, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6751 = !DISubroutineType(types: !6752)
!6752 = !{!4909, !3200, !1715}
!6753 = !DILocalVariable(name: "vec_", arg: 1, scope: !6750, file: !3, line: 190, type: !3200)
!6754 = !DILocation(line: 190, column: 1, scope: !6750)
!6755 = !DILocalVariable(name: "obj_", arg: 2, scope: !6750, file: !3, line: 190, type: !1715)
!6756 = distinct !DISubprogram(name: "new_constraint", scope: !3, file: !3, line: 546, type: !6757, scopeLine: 548, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6757 = !DISubroutineType(types: !6758)
!6758 = !{!1715, !6759, !6759}
!6759 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1720)
!6760 = !DILocalVariable(name: "lhs", arg: 1, scope: !6756, file: !3, line: 546, type: !6759)
!6761 = !DILocation(line: 546, column: 46, scope: !6756)
!6762 = !DILocalVariable(name: "rhs", arg: 2, scope: !6756, file: !3, line: 547, type: !6759)
!6763 = !DILocation(line: 547, column: 32, scope: !6756)
!6764 = !DILocalVariable(name: "ret", scope: !6756, file: !3, line: 549, type: !1715)
!6765 = !DILocation(line: 549, column: 16, scope: !6756)
!6766 = !DILocation(line: 549, column: 49, scope: !6756)
!6767 = !DILocation(line: 549, column: 37, scope: !6756)
!6768 = !DILocation(line: 549, column: 22, scope: !6756)
!6769 = !DILocation(line: 550, column: 3, scope: !6756)
!6770 = !DILocation(line: 550, column: 8, scope: !6756)
!6771 = !DILocation(line: 550, column: 14, scope: !6756)
!6772 = !DILocation(line: 551, column: 3, scope: !6756)
!6773 = !DILocation(line: 551, column: 8, scope: !6756)
!6774 = !DILocation(line: 551, column: 14, scope: !6756)
!6775 = !DILocation(line: 552, column: 10, scope: !6756)
!6776 = !DILocation(line: 552, column: 3, scope: !6756)
!6777 = distinct !DISubprogram(name: "process_constraint", scope: !3, file: !3, line: 2744, type: !3391, scopeLine: 2745, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6778 = !DILocalVariable(name: "t", arg: 1, scope: !6777, file: !3, line: 2744, type: !1715)
!6779 = !DILocation(line: 2744, column: 34, scope: !6777)
!6780 = !DILocalVariable(name: "rhs", scope: !6777, file: !3, line: 2746, type: !1720)
!6781 = !DILocation(line: 2746, column: 26, scope: !6777)
!6782 = !DILocation(line: 2746, column: 32, scope: !6777)
!6783 = !DILocation(line: 2746, column: 35, scope: !6777)
!6784 = !DILocalVariable(name: "lhs", scope: !6777, file: !3, line: 2747, type: !1720)
!6785 = !DILocation(line: 2747, column: 26, scope: !6777)
!6786 = !DILocation(line: 2747, column: 32, scope: !6777)
!6787 = !DILocation(line: 2747, column: 35, scope: !6777)
!6788 = !DILocation(line: 2749, column: 3, scope: !6777)
!6789 = !DILocation(line: 2750, column: 3, scope: !6777)
!6790 = !DILocation(line: 2755, column: 11, scope: !6791)
!6791 = distinct !DILexicalBlock(scope: !6777, file: !3, line: 2755, column: 7)
!6792 = !DILocation(line: 2755, column: 16, scope: !6791)
!6793 = !DILocation(line: 2756, column: 7, scope: !6791)
!6794 = !DILocation(line: 2756, column: 14, scope: !6791)
!6795 = !DILocation(line: 2756, column: 18, scope: !6791)
!6796 = !DILocation(line: 2755, column: 7, scope: !6777)
!6797 = !DILocation(line: 2757, column: 9, scope: !6791)
!6798 = !DILocation(line: 2757, column: 14, scope: !6791)
!6799 = !DILocation(line: 2757, column: 5, scope: !6791)
!6800 = !DILocation(line: 2760, column: 3, scope: !6777)
!6801 = !DILocation(line: 2763, column: 11, scope: !6802)
!6802 = distinct !DILexicalBlock(scope: !6777, file: !3, line: 2763, column: 7)
!6803 = !DILocation(line: 2763, column: 16, scope: !6802)
!6804 = !DILocation(line: 2763, column: 25, scope: !6802)
!6805 = !DILocation(line: 2763, column: 32, scope: !6802)
!6806 = !DILocation(line: 2763, column: 37, scope: !6802)
!6807 = !DILocation(line: 2763, column: 46, scope: !6802)
!6808 = !DILocation(line: 2763, column: 53, scope: !6802)
!6809 = !DILocation(line: 2763, column: 57, scope: !6802)
!6810 = !DILocation(line: 2763, column: 7, scope: !6777)
!6811 = !DILocalVariable(name: "tmplhs", scope: !6812, file: !3, line: 2766, type: !1720)
!6812 = distinct !DILexicalBlock(scope: !6802, file: !3, line: 2764, column: 5)
!6813 = !DILocation(line: 2766, column: 30, scope: !6812)
!6814 = !DILocation(line: 2767, column: 16, scope: !6812)
!6815 = !DILocation(line: 2768, column: 27, scope: !6812)
!6816 = !DILocation(line: 2768, column: 7, scope: !6812)
!6817 = !DILocation(line: 2769, column: 27, scope: !6812)
!6818 = !DILocation(line: 2769, column: 7, scope: !6812)
!6819 = !DILocation(line: 2770, column: 5, scope: !6812)
!6820 = !DILocation(line: 2771, column: 16, scope: !6821)
!6821 = distinct !DILexicalBlock(scope: !6802, file: !3, line: 2771, column: 12)
!6822 = !DILocation(line: 2771, column: 21, scope: !6821)
!6823 = !DILocation(line: 2771, column: 34, scope: !6821)
!6824 = !DILocation(line: 2771, column: 41, scope: !6821)
!6825 = !DILocation(line: 2771, column: 46, scope: !6821)
!6826 = !DILocation(line: 2771, column: 12, scope: !6802)
!6827 = !DILocalVariable(name: "tmplhs", scope: !6828, file: !3, line: 2774, type: !1720)
!6828 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 2772, column: 5)
!6829 = !DILocation(line: 2774, column: 30, scope: !6828)
!6830 = !DILocation(line: 2775, column: 16, scope: !6828)
!6831 = !DILocation(line: 2776, column: 27, scope: !6828)
!6832 = !DILocation(line: 2776, column: 7, scope: !6828)
!6833 = !DILocation(line: 2777, column: 27, scope: !6828)
!6834 = !DILocation(line: 2777, column: 7, scope: !6828)
!6835 = !DILocation(line: 2778, column: 5, scope: !6828)
!6836 = !DILocation(line: 2781, column: 7, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 2780, column: 5)
!6838 = !DILocation(line: 2782, column: 7, scope: !6837)
!6839 = !DILocation(line: 2784, column: 1, scope: !6777)
!6840 = distinct !DISubprogram(name: "VEC_varinfo_t_heap_safe_push", scope: !3, file: !3, line: 275, type: !6841, scopeLine: 275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6841 = !DISubroutineType(types: !6842)
!6842 = !{!6257, !6843, !1758}
!6843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1746, size: 64)
!6844 = !DILocalVariable(name: "vec_", arg: 1, scope: !6840, file: !3, line: 275, type: !6843)
!6845 = !DILocation(line: 275, column: 1, scope: !6840)
!6846 = !DILocalVariable(name: "obj_", arg: 2, scope: !6840, file: !3, line: 275, type: !1758)
!6847 = distinct !DISubprogram(name: "VEC_varinfo_t_heap_reserve", scope: !3, file: !3, line: 275, type: !6848, scopeLine: 275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6848 = !DISubroutineType(types: !6849)
!6849 = !{!1730, !6843, !1730}
!6850 = !DILocalVariable(name: "vec_", arg: 1, scope: !6847, file: !3, line: 275, type: !6843)
!6851 = !DILocation(line: 275, column: 1, scope: !6847)
!6852 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6847, file: !3, line: 275, type: !1730)
!6853 = !DILocalVariable(name: "extend", scope: !6847, file: !3, line: 275, type: !1730)
!6854 = !DILocation(line: 275, column: 1, scope: !6855)
!6855 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 275, column: 1)
!6856 = distinct !DISubprogram(name: "VEC_varinfo_t_base_quick_push", scope: !3, file: !3, line: 273, type: !6857, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6857 = !DISubroutineType(types: !6858)
!6858 = !{!6257, !6859, !1758}
!6859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1751, size: 64)
!6860 = !DILocalVariable(name: "vec_", arg: 1, scope: !6856, file: !3, line: 273, type: !6859)
!6861 = !DILocation(line: 273, column: 1, scope: !6856)
!6862 = !DILocalVariable(name: "obj_", arg: 2, scope: !6856, file: !3, line: 273, type: !1758)
!6863 = !DILocalVariable(name: "slot_", scope: !6856, file: !3, line: 273, type: !6257)
!6864 = distinct !DISubprogram(name: "VEC_varinfo_t_base_space", scope: !3, file: !3, line: 273, type: !6865, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6865 = !DISubroutineType(types: !6866)
!6866 = !{!1730, !6859, !1730}
!6867 = !DILocalVariable(name: "vec_", arg: 1, scope: !6864, file: !3, line: 273, type: !6859)
!6868 = !DILocation(line: 273, column: 1, scope: !6864)
!6869 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6864, file: !3, line: 273, type: !1730)
!6870 = distinct !DISubprogram(name: "VEC_constraint_t_heap_reserve", scope: !3, file: !3, line: 190, type: !6871, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6871 = !DISubroutineType(types: !6872)
!6872 = !{!1730, !3200, !1730}
!6873 = !DILocalVariable(name: "vec_", arg: 1, scope: !6870, file: !3, line: 190, type: !3200)
!6874 = !DILocation(line: 190, column: 1, scope: !6870)
!6875 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6870, file: !3, line: 190, type: !1730)
!6876 = !DILocalVariable(name: "extend", scope: !6870, file: !3, line: 190, type: !1730)
!6877 = !DILocation(line: 190, column: 1, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6870, file: !3, line: 190, column: 1)
!6879 = distinct !DISubprogram(name: "VEC_constraint_t_base_quick_push", scope: !3, file: !3, line: 189, type: !6880, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6880 = !DISubroutineType(types: !6881)
!6881 = !{!4909, !6882, !1715}
!6882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1736, size: 64)
!6883 = !DILocalVariable(name: "vec_", arg: 1, scope: !6879, file: !3, line: 189, type: !6882)
!6884 = !DILocation(line: 189, column: 1, scope: !6879)
!6885 = !DILocalVariable(name: "obj_", arg: 2, scope: !6879, file: !3, line: 189, type: !1715)
!6886 = !DILocalVariable(name: "slot_", scope: !6879, file: !3, line: 189, type: !4909)
!6887 = distinct !DISubprogram(name: "VEC_constraint_t_base_space", scope: !3, file: !3, line: 189, type: !6888, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6888 = !DISubroutineType(types: !6889)
!6889 = !{!1730, !6882, !1730}
!6890 = !DILocalVariable(name: "vec_", arg: 1, scope: !6887, file: !3, line: 189, type: !6882)
!6891 = !DILocation(line: 189, column: 1, scope: !6887)
!6892 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6887, file: !3, line: 189, type: !1730)
!6893 = distinct !DISubprogram(name: "new_scalar_tmp_constraint_exp", scope: !3, file: !3, line: 2671, type: !6894, scopeLine: 2672, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6894 = !DISubroutineType(types: !6895)
!6895 = !{!1720, !1776}
!6896 = !DILocalVariable(name: "name", arg: 1, scope: !6893, file: !3, line: 2671, type: !1776)
!6897 = !DILocation(line: 2671, column: 44, scope: !6893)
!6898 = !DILocalVariable(name: "tmp", scope: !6893, file: !3, line: 2673, type: !1720)
!6899 = !DILocation(line: 2673, column: 26, scope: !6893)
!6900 = !DILocalVariable(name: "vi", scope: !6893, file: !3, line: 2674, type: !1758)
!6901 = !DILocation(line: 2674, column: 13, scope: !6893)
!6902 = !DILocation(line: 2676, column: 33, scope: !6893)
!6903 = !DILocation(line: 2676, column: 8, scope: !6893)
!6904 = !DILocation(line: 2676, column: 6, scope: !6893)
!6905 = !DILocation(line: 2677, column: 3, scope: !6893)
!6906 = !DILocation(line: 2677, column: 7, scope: !6893)
!6907 = !DILocation(line: 2677, column: 14, scope: !6893)
!6908 = !DILocation(line: 2678, column: 3, scope: !6893)
!6909 = !DILocation(line: 2678, column: 7, scope: !6893)
!6910 = !DILocation(line: 2678, column: 12, scope: !6893)
!6911 = !DILocation(line: 2679, column: 3, scope: !6893)
!6912 = !DILocation(line: 2679, column: 7, scope: !6893)
!6913 = !DILocation(line: 2679, column: 16, scope: !6893)
!6914 = !DILocation(line: 2680, column: 3, scope: !6893)
!6915 = !DILocation(line: 2680, column: 7, scope: !6893)
!6916 = !DILocation(line: 2680, column: 19, scope: !6893)
!6917 = !DILocation(line: 2682, column: 13, scope: !6893)
!6918 = !DILocation(line: 2682, column: 17, scope: !6893)
!6919 = !DILocation(line: 2682, column: 7, scope: !6893)
!6920 = !DILocation(line: 2682, column: 11, scope: !6893)
!6921 = !DILocation(line: 2683, column: 7, scope: !6893)
!6922 = !DILocation(line: 2683, column: 12, scope: !6893)
!6923 = !DILocation(line: 2684, column: 7, scope: !6893)
!6924 = !DILocation(line: 2684, column: 14, scope: !6893)
!6925 = !DILocation(line: 2686, column: 3, scope: !6893)
!6926 = distinct !DISubprogram(name: "heapvar_map_eq", scope: !3, file: !3, line: 300, type: !2579, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6927 = !DILocalVariable(name: "p1", arg: 1, scope: !6926, file: !3, line: 300, type: !2407)
!6928 = !DILocation(line: 300, column: 29, scope: !6926)
!6929 = !DILocalVariable(name: "p2", arg: 2, scope: !6926, file: !3, line: 300, type: !2407)
!6930 = !DILocation(line: 300, column: 45, scope: !6926)
!6931 = !DILocalVariable(name: "h1", scope: !6926, file: !3, line: 302, type: !3111)
!6932 = !DILocation(line: 302, column: 29, scope: !6926)
!6933 = !DILocation(line: 302, column: 62, scope: !6926)
!6934 = !DILocation(line: 302, column: 34, scope: !6926)
!6935 = !DILocalVariable(name: "h2", scope: !6926, file: !3, line: 303, type: !3111)
!6936 = !DILocation(line: 303, column: 29, scope: !6926)
!6937 = !DILocation(line: 303, column: 62, scope: !6926)
!6938 = !DILocation(line: 303, column: 34, scope: !6926)
!6939 = !DILocation(line: 304, column: 11, scope: !6926)
!6940 = !DILocation(line: 304, column: 15, scope: !6926)
!6941 = !DILocation(line: 304, column: 19, scope: !6926)
!6942 = !DILocation(line: 304, column: 24, scope: !6926)
!6943 = !DILocation(line: 304, column: 32, scope: !6926)
!6944 = !DILocation(line: 304, column: 36, scope: !6926)
!6945 = !DILocation(line: 304, column: 40, scope: !6926)
!6946 = !DILocation(line: 304, column: 45, scope: !6926)
!6947 = !DILocation(line: 304, column: 29, scope: !6926)
!6948 = !DILocation(line: 305, column: 4, scope: !6926)
!6949 = !DILocation(line: 305, column: 7, scope: !6926)
!6950 = !DILocation(line: 305, column: 11, scope: !6926)
!6951 = !DILocation(line: 305, column: 21, scope: !6926)
!6952 = !DILocation(line: 305, column: 25, scope: !6926)
!6953 = !DILocation(line: 305, column: 18, scope: !6926)
!6954 = !DILocation(line: 0, scope: !6926)
!6955 = !DILocation(line: 304, column: 3, scope: !6926)
!6956 = distinct !DISubprogram(name: "could_have_pointers", scope: !3, file: !3, line: 2804, type: !6957, scopeLine: 2805, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6957 = !DISubroutineType(types: !6958)
!6958 = !{!1894, !1780}
!6959 = !DILocalVariable(name: "t", arg: 1, scope: !6956, file: !3, line: 2804, type: !1780)
!6960 = !DILocation(line: 2804, column: 27, scope: !6956)
!6961 = !DILocation(line: 2806, column: 36, scope: !6956)
!6962 = !DILocation(line: 2806, column: 10, scope: !6956)
!6963 = !DILocation(line: 2806, column: 3, scope: !6956)
!6964 = distinct !DISubprogram(name: "heapvar_lookup", scope: !3, file: !3, line: 318, type: !6965, scopeLine: 319, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6965 = !DISubroutineType(types: !6966)
!6966 = !{!1780, !1780, !1729}
!6967 = !DILocalVariable(name: "from", arg: 1, scope: !6964, file: !3, line: 318, type: !1780)
!6968 = !DILocation(line: 318, column: 22, scope: !6964)
!6969 = !DILocalVariable(name: "offset", arg: 2, scope: !6964, file: !3, line: 318, type: !1729)
!6970 = !DILocation(line: 318, column: 51, scope: !6964)
!6971 = !DILocalVariable(name: "h", scope: !6964, file: !3, line: 320, type: !3125)
!6972 = !DILocation(line: 320, column: 23, scope: !6964)
!6973 = !DILocalVariable(name: "in", scope: !6964, file: !3, line: 320, type: !3113)
!6974 = !DILocation(line: 320, column: 26, scope: !6964)
!6975 = !DILocation(line: 321, column: 22, scope: !6964)
!6976 = !DILocation(line: 321, column: 6, scope: !6964)
!6977 = !DILocation(line: 321, column: 10, scope: !6964)
!6978 = !DILocation(line: 321, column: 15, scope: !6964)
!6979 = !DILocation(line: 321, column: 20, scope: !6964)
!6980 = !DILocation(line: 322, column: 15, scope: !6964)
!6981 = !DILocation(line: 322, column: 6, scope: !6964)
!6982 = !DILocation(line: 322, column: 13, scope: !6964)
!6983 = !DILocation(line: 323, column: 51, scope: !6964)
!6984 = !DILocation(line: 323, column: 69, scope: !6964)
!6985 = !DILocation(line: 324, column: 9, scope: !6964)
!6986 = !DILocation(line: 323, column: 30, scope: !6964)
!6987 = !DILocation(line: 323, column: 7, scope: !6964)
!6988 = !DILocation(line: 323, column: 5, scope: !6964)
!6989 = !DILocation(line: 325, column: 7, scope: !6990)
!6990 = distinct !DILexicalBlock(scope: !6964, file: !3, line: 325, column: 7)
!6991 = !DILocation(line: 325, column: 7, scope: !6964)
!6992 = !DILocation(line: 326, column: 12, scope: !6990)
!6993 = !DILocation(line: 326, column: 15, scope: !6990)
!6994 = !DILocation(line: 326, column: 19, scope: !6990)
!6995 = !DILocation(line: 326, column: 5, scope: !6990)
!6996 = !DILocation(line: 327, column: 3, scope: !6964)
!6997 = !DILocation(line: 328, column: 1, scope: !6964)
!6998 = distinct !DISubprogram(name: "heapvar_insert", scope: !3, file: !3, line: 334, type: !6999, scopeLine: 335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!6999 = !DISubroutineType(types: !7000)
!7000 = !{null, !1780, !1729, !1780}
!7001 = !DILocalVariable(name: "from", arg: 1, scope: !6998, file: !3, line: 334, type: !1780)
!7002 = !DILocation(line: 334, column: 22, scope: !6998)
!7003 = !DILocalVariable(name: "offset", arg: 2, scope: !6998, file: !3, line: 334, type: !1729)
!7004 = !DILocation(line: 334, column: 51, scope: !6998)
!7005 = !DILocalVariable(name: "to", arg: 3, scope: !6998, file: !3, line: 334, type: !1780)
!7006 = !DILocation(line: 334, column: 64, scope: !6998)
!7007 = !DILocalVariable(name: "h", scope: !6998, file: !3, line: 336, type: !3125)
!7008 = !DILocation(line: 336, column: 23, scope: !6998)
!7009 = !DILocalVariable(name: "loc", scope: !6998, file: !3, line: 337, type: !2587)
!7010 = !DILocation(line: 337, column: 10, scope: !6998)
!7011 = !DILocation(line: 339, column: 7, scope: !6998)
!7012 = !DILocation(line: 339, column: 5, scope: !6998)
!7013 = !DILocation(line: 340, column: 22, scope: !6998)
!7014 = !DILocation(line: 340, column: 3, scope: !6998)
!7015 = !DILocation(line: 340, column: 6, scope: !6998)
!7016 = !DILocation(line: 340, column: 10, scope: !6998)
!7017 = !DILocation(line: 340, column: 15, scope: !6998)
!7018 = !DILocation(line: 340, column: 20, scope: !6998)
!7019 = !DILocation(line: 341, column: 15, scope: !6998)
!7020 = !DILocation(line: 341, column: 3, scope: !6998)
!7021 = !DILocation(line: 341, column: 6, scope: !6998)
!7022 = !DILocation(line: 341, column: 13, scope: !6998)
!7023 = !DILocation(line: 342, column: 35, scope: !6998)
!7024 = !DILocation(line: 342, column: 17, scope: !6998)
!7025 = !DILocation(line: 342, column: 3, scope: !6998)
!7026 = !DILocation(line: 342, column: 6, scope: !6998)
!7027 = !DILocation(line: 342, column: 10, scope: !6998)
!7028 = !DILocation(line: 342, column: 15, scope: !6998)
!7029 = !DILocation(line: 343, column: 15, scope: !6998)
!7030 = !DILocation(line: 343, column: 3, scope: !6998)
!7031 = !DILocation(line: 343, column: 6, scope: !6998)
!7032 = !DILocation(line: 343, column: 10, scope: !6998)
!7033 = !DILocation(line: 343, column: 13, scope: !6998)
!7034 = !DILocation(line: 344, column: 35, scope: !6998)
!7035 = !DILocation(line: 344, column: 53, scope: !6998)
!7036 = !DILocation(line: 344, column: 56, scope: !6998)
!7037 = !DILocation(line: 344, column: 59, scope: !6998)
!7038 = !DILocation(line: 344, column: 63, scope: !6998)
!7039 = !DILocation(line: 344, column: 9, scope: !6998)
!7040 = !DILocation(line: 344, column: 7, scope: !6998)
!7041 = !DILocation(line: 345, column: 3, scope: !6998)
!7042 = !DILocation(line: 346, column: 34, scope: !6998)
!7043 = !DILocation(line: 346, column: 28, scope: !6998)
!7044 = !DILocation(line: 346, column: 3, scope: !6998)
!7045 = !DILocation(line: 346, column: 32, scope: !6998)
!7046 = !DILocation(line: 347, column: 1, scope: !6998)
!7047 = distinct !DISubprogram(name: "get_var_ann", scope: !3987, file: !3987, line: 141, type: !7048, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7048 = !DISubroutineType(types: !7049)
!7049 = !{!5115, !1780}
!7050 = !DILocalVariable(name: "var", arg: 1, scope: !7047, file: !3987, line: 141, type: !1780)
!7051 = !DILocation(line: 141, column: 19, scope: !7047)
!7052 = !DILocalVariable(name: "p", scope: !7047, file: !3987, line: 143, type: !7053)
!7053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5115, size: 64)
!7054 = !DILocation(line: 143, column: 14, scope: !7047)
!7055 = !DILocation(line: 143, column: 18, scope: !7047)
!7056 = !DILocation(line: 144, column: 3, scope: !7047)
!7057 = !DILocation(line: 145, column: 11, scope: !7047)
!7058 = !DILocation(line: 145, column: 10, scope: !7047)
!7059 = !DILocation(line: 145, column: 16, scope: !7047)
!7060 = !DILocation(line: 145, column: 15, scope: !7047)
!7061 = !DILocation(line: 145, column: 36, scope: !7047)
!7062 = !DILocation(line: 145, column: 20, scope: !7047)
!7063 = !DILocation(line: 145, column: 3, scope: !7047)
!7064 = distinct !DISubprogram(name: "gimple_referenced_vars", scope: !3987, file: !3987, line: 40, type: !7065, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7065 = !DISubroutineType(types: !7066)
!7066 = !{!2566, !7067}
!7067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7068, size: 64)
!7068 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2523)
!7069 = !DILocalVariable(name: "fun", arg: 1, scope: !7064, file: !3987, line: 40, type: !7067)
!7070 = !DILocation(line: 40, column: 48, scope: !7064)
!7071 = !DILocation(line: 42, column: 8, scope: !7072)
!7072 = distinct !DILexicalBlock(scope: !7064, file: !3987, line: 42, column: 7)
!7073 = !DILocation(line: 42, column: 13, scope: !7072)
!7074 = !DILocation(line: 42, column: 7, scope: !7064)
!7075 = !DILocation(line: 43, column: 5, scope: !7072)
!7076 = !DILocation(line: 44, column: 10, scope: !7064)
!7077 = !DILocation(line: 44, column: 15, scope: !7064)
!7078 = !DILocation(line: 44, column: 26, scope: !7064)
!7079 = !DILocation(line: 44, column: 3, scope: !7064)
!7080 = !DILocation(line: 45, column: 1, scope: !7064)
!7081 = distinct !DISubprogram(name: "get_vi_for_tree", scope: !3, file: !3, line: 2659, type: !7082, scopeLine: 2660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7082 = !DISubroutineType(types: !7083)
!7083 = !{!1758, !1780}
!7084 = !DILocalVariable(name: "t", arg: 1, scope: !7081, file: !3, line: 2659, type: !1780)
!7085 = !DILocation(line: 2659, column: 23, scope: !7081)
!7086 = !DILocalVariable(name: "slot", scope: !7081, file: !3, line: 2661, type: !2587)
!7087 = !DILocation(line: 2661, column: 10, scope: !7081)
!7088 = !DILocation(line: 2661, column: 39, scope: !7081)
!7089 = !DILocation(line: 2661, column: 52, scope: !7081)
!7090 = !DILocation(line: 2661, column: 17, scope: !7081)
!7091 = !DILocation(line: 2662, column: 7, scope: !7092)
!7092 = distinct !DILexicalBlock(scope: !7081, file: !3, line: 2662, column: 7)
!7093 = !DILocation(line: 2662, column: 12, scope: !7092)
!7094 = !DILocation(line: 2662, column: 7, scope: !7081)
!7095 = !DILocation(line: 2663, column: 51, scope: !7092)
!7096 = !DILocation(line: 2663, column: 70, scope: !7092)
!7097 = !DILocation(line: 2663, column: 54, scope: !7092)
!7098 = !DILocation(line: 2663, column: 25, scope: !7092)
!7099 = !DILocation(line: 2663, column: 12, scope: !7092)
!7100 = !DILocation(line: 2663, column: 5, scope: !7092)
!7101 = !DILocation(line: 2665, column: 23, scope: !7081)
!7102 = !DILocation(line: 2665, column: 22, scope: !7081)
!7103 = !DILocation(line: 2665, column: 10, scope: !7081)
!7104 = !DILocation(line: 2665, column: 3, scope: !7081)
!7105 = !DILocation(line: 2666, column: 1, scope: !7081)
!7106 = distinct !DISubprogram(name: "make_constraint_from", scope: !3, file: !3, line: 3340, type: !7107, scopeLine: 3341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7107 = !DISubroutineType(types: !7108)
!7108 = !{null, !1758, !1730}
!7109 = !DILocalVariable(name: "vi", arg: 1, scope: !7106, file: !3, line: 3340, type: !1758)
!7110 = !DILocation(line: 3340, column: 33, scope: !7106)
!7111 = !DILocalVariable(name: "from", arg: 2, scope: !7106, file: !3, line: 3340, type: !1730)
!7112 = !DILocation(line: 3340, column: 41, scope: !7106)
!7113 = !DILocalVariable(name: "lhs", scope: !7106, file: !3, line: 3342, type: !1720)
!7114 = !DILocation(line: 3342, column: 26, scope: !7106)
!7115 = !DILocalVariable(name: "rhs", scope: !7106, file: !3, line: 3342, type: !1720)
!7116 = !DILocation(line: 3342, column: 31, scope: !7106)
!7117 = !DILocation(line: 3344, column: 13, scope: !7106)
!7118 = !DILocation(line: 3344, column: 17, scope: !7106)
!7119 = !DILocation(line: 3344, column: 7, scope: !7106)
!7120 = !DILocation(line: 3344, column: 11, scope: !7106)
!7121 = !DILocation(line: 3345, column: 7, scope: !7106)
!7122 = !DILocation(line: 3345, column: 14, scope: !7106)
!7123 = !DILocation(line: 3346, column: 7, scope: !7106)
!7124 = !DILocation(line: 3346, column: 12, scope: !7106)
!7125 = !DILocation(line: 3348, column: 13, scope: !7106)
!7126 = !DILocation(line: 3348, column: 7, scope: !7106)
!7127 = !DILocation(line: 3348, column: 11, scope: !7106)
!7128 = !DILocation(line: 3349, column: 7, scope: !7106)
!7129 = !DILocation(line: 3349, column: 14, scope: !7106)
!7130 = !DILocation(line: 3350, column: 7, scope: !7106)
!7131 = !DILocation(line: 3350, column: 12, scope: !7106)
!7132 = !DILocation(line: 3351, column: 23, scope: !7106)
!7133 = !DILocation(line: 3351, column: 3, scope: !7106)
!7134 = !DILocation(line: 3352, column: 1, scope: !7106)
!7135 = distinct !DISubprogram(name: "make_constraint_from_restrict", scope: !3, file: !3, line: 3425, type: !7136, scopeLine: 3426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7136 = !DISubroutineType(types: !7137)
!7137 = !{null, !1758, !1776}
!7138 = !DILocalVariable(name: "lhs", arg: 1, scope: !7135, file: !3, line: 3425, type: !1758)
!7139 = !DILocation(line: 3425, column: 42, scope: !7135)
!7140 = !DILocalVariable(name: "name", arg: 2, scope: !7135, file: !3, line: 3425, type: !1776)
!7141 = !DILocation(line: 3425, column: 59, scope: !7135)
!7142 = !DILocalVariable(name: "vi", scope: !7135, file: !3, line: 3427, type: !1758)
!7143 = !DILocation(line: 3427, column: 13, scope: !7135)
!7144 = !DILocation(line: 3428, column: 38, scope: !7135)
!7145 = !DILocation(line: 3428, column: 43, scope: !7135)
!7146 = !DILocation(line: 3428, column: 8, scope: !7135)
!7147 = !DILocation(line: 3428, column: 6, scope: !7135)
!7148 = !DILocation(line: 3429, column: 3, scope: !7135)
!7149 = !DILocation(line: 3429, column: 7, scope: !7135)
!7150 = !DILocation(line: 3429, column: 23, scope: !7135)
!7151 = !DILocation(line: 3430, column: 3, scope: !7135)
!7152 = !DILocation(line: 3430, column: 7, scope: !7135)
!7153 = !DILocation(line: 3430, column: 21, scope: !7135)
!7154 = !DILocation(line: 3431, column: 3, scope: !7135)
!7155 = !DILocation(line: 3431, column: 7, scope: !7135)
!7156 = !DILocation(line: 3431, column: 22, scope: !7135)
!7157 = !DILocation(line: 3432, column: 3, scope: !7135)
!7158 = !DILocation(line: 3432, column: 7, scope: !7135)
!7159 = !DILocation(line: 3432, column: 25, scope: !7135)
!7160 = !DILocation(line: 3433, column: 1, scope: !7135)
!7161 = distinct !DISubprogram(name: "type_could_have_pointers", scope: !3, file: !3, line: 2789, type: !6957, scopeLine: 2790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7162 = !DILocalVariable(name: "type", arg: 1, scope: !7161, file: !3, line: 2789, type: !1780)
!7163 = !DILocation(line: 2789, column: 32, scope: !7161)
!7164 = !DILocation(line: 2791, column: 7, scope: !7165)
!7165 = distinct !DILexicalBlock(scope: !7161, file: !3, line: 2791, column: 7)
!7166 = !DILocation(line: 2791, column: 7, scope: !7161)
!7167 = !DILocation(line: 2792, column: 5, scope: !7165)
!7168 = !DILocation(line: 2794, column: 7, scope: !7169)
!7169 = distinct !DILexicalBlock(scope: !7161, file: !3, line: 2794, column: 7)
!7170 = !DILocation(line: 2794, column: 24, scope: !7169)
!7171 = !DILocation(line: 2794, column: 7, scope: !7161)
!7172 = !DILocation(line: 2795, column: 38, scope: !7169)
!7173 = !DILocation(line: 2795, column: 12, scope: !7169)
!7174 = !DILocation(line: 2795, column: 5, scope: !7169)
!7175 = !DILocation(line: 2797, column: 10, scope: !7161)
!7176 = !DILocation(line: 2797, column: 3, scope: !7161)
!7177 = !DILocation(line: 2798, column: 1, scope: !7161)
!7178 = distinct !DISubprogram(name: "heapvar_map_hash", scope: !3, file: !3, line: 309, type: !7179, scopeLine: 310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7179 = !DISubroutineType(types: !7180)
!7180 = !{!6, !3125}
!7181 = !DILocalVariable(name: "h", arg: 1, scope: !7178, file: !3, line: 309, type: !3125)
!7182 = !DILocation(line: 309, column: 39, scope: !7178)
!7183 = !DILocation(line: 311, column: 40, scope: !7178)
!7184 = !DILocation(line: 311, column: 43, scope: !7178)
!7185 = !DILocation(line: 312, column: 12, scope: !7178)
!7186 = !DILocation(line: 312, column: 31, scope: !7178)
!7187 = !DILocation(line: 312, column: 34, scope: !7178)
!7188 = !DILocation(line: 312, column: 38, scope: !7178)
!7189 = !DILocation(line: 312, column: 43, scope: !7178)
!7190 = !DILocation(line: 311, column: 10, scope: !7178)
!7191 = !DILocation(line: 311, column: 3, scope: !7178)
!7192 = distinct !DISubprogram(name: "create_variable_info_for", scope: !3, file: !3, line: 4438, type: !7193, scopeLine: 4439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7193 = !DISubroutineType(types: !7194)
!7194 = !{!6, !1780, !1776}
!7195 = !DILocalVariable(name: "decl", arg: 1, scope: !7192, file: !3, line: 4438, type: !1780)
!7196 = !DILocation(line: 4438, column: 32, scope: !7192)
!7197 = !DILocalVariable(name: "name", arg: 2, scope: !7192, file: !3, line: 4438, type: !1776)
!7198 = !DILocation(line: 4438, column: 50, scope: !7192)
!7199 = !DILocalVariable(name: "vi", scope: !7192, file: !3, line: 4440, type: !1758)
!7200 = !DILocation(line: 4440, column: 13, scope: !7192)
!7201 = !DILocalVariable(name: "decl_type", scope: !7192, file: !3, line: 4441, type: !1780)
!7202 = !DILocation(line: 4441, column: 8, scope: !7192)
!7203 = !DILocation(line: 4441, column: 20, scope: !7192)
!7204 = !DILocalVariable(name: "declsize", scope: !7192, file: !3, line: 4442, type: !1780)
!7205 = !DILocation(line: 4442, column: 8, scope: !7192)
!7206 = !DILocation(line: 4442, column: 19, scope: !7192)
!7207 = !DILocation(line: 4442, column: 35, scope: !7192)
!7208 = !DILocation(line: 4442, column: 54, scope: !7192)
!7209 = !DILocalVariable(name: "fieldstack", scope: !7192, file: !3, line: 4443, type: !3127)
!7210 = !DILocation(line: 4443, column: 26, scope: !7192)
!7211 = !DILocation(line: 4445, column: 29, scope: !7212)
!7212 = distinct !DILexicalBlock(scope: !7192, file: !3, line: 4445, column: 7)
!7213 = !DILocation(line: 4445, column: 7, scope: !7212)
!7214 = !DILocation(line: 4445, column: 35, scope: !7212)
!7215 = !DILocation(line: 4445, column: 38, scope: !7212)
!7216 = !DILocation(line: 4445, column: 7, scope: !7192)
!7217 = !DILocation(line: 4446, column: 34, scope: !7212)
!7218 = !DILocation(line: 4446, column: 5, scope: !7212)
!7219 = !DILocation(line: 4451, column: 22, scope: !7192)
!7220 = !DILocation(line: 4451, column: 28, scope: !7192)
!7221 = !DILocation(line: 4451, column: 8, scope: !7192)
!7222 = !DILocation(line: 4451, column: 6, scope: !7192)
!7223 = !DILocation(line: 4452, column: 3, scope: !7192)
!7224 = !DILocation(line: 4452, column: 7, scope: !7192)
!7225 = !DILocation(line: 4452, column: 14, scope: !7192)
!7226 = !DILocation(line: 4453, column: 48, scope: !7192)
!7227 = !DILocation(line: 4453, column: 27, scope: !7192)
!7228 = !DILocation(line: 4453, column: 3, scope: !7192)
!7229 = !DILocation(line: 4453, column: 7, scope: !7192)
!7230 = !DILocation(line: 4453, column: 25, scope: !7192)
!7231 = !DILocation(line: 4454, column: 8, scope: !7232)
!7232 = distinct !DILexicalBlock(scope: !7192, file: !3, line: 4454, column: 7)
!7233 = !DILocation(line: 4455, column: 7, scope: !7232)
!7234 = !DILocation(line: 4455, column: 26, scope: !7232)
!7235 = !DILocation(line: 4455, column: 11, scope: !7232)
!7236 = !DILocation(line: 4454, column: 7, scope: !7192)
!7237 = !DILocation(line: 4457, column: 7, scope: !7238)
!7238 = distinct !DILexicalBlock(scope: !7232, file: !3, line: 4456, column: 5)
!7239 = !DILocation(line: 4457, column: 11, scope: !7238)
!7240 = !DILocation(line: 4457, column: 31, scope: !7238)
!7241 = !DILocation(line: 4458, column: 7, scope: !7238)
!7242 = !DILocation(line: 4458, column: 11, scope: !7238)
!7243 = !DILocation(line: 4458, column: 20, scope: !7238)
!7244 = !DILocation(line: 4459, column: 7, scope: !7238)
!7245 = !DILocation(line: 4459, column: 11, scope: !7238)
!7246 = !DILocation(line: 4459, column: 16, scope: !7238)
!7247 = !DILocation(line: 4460, column: 5, scope: !7238)
!7248 = !DILocation(line: 4463, column: 22, scope: !7249)
!7249 = distinct !DILexicalBlock(scope: !7232, file: !3, line: 4462, column: 5)
!7250 = !DILocation(line: 4463, column: 7, scope: !7249)
!7251 = !DILocation(line: 4463, column: 11, scope: !7249)
!7252 = !DILocation(line: 4463, column: 20, scope: !7249)
!7253 = !DILocation(line: 4464, column: 18, scope: !7249)
!7254 = !DILocation(line: 4464, column: 22, scope: !7249)
!7255 = !DILocation(line: 4464, column: 7, scope: !7249)
!7256 = !DILocation(line: 4464, column: 11, scope: !7249)
!7257 = !DILocation(line: 4464, column: 16, scope: !7249)
!7258 = !DILocation(line: 4467, column: 23, scope: !7192)
!7259 = !DILocation(line: 4467, column: 27, scope: !7192)
!7260 = !DILocation(line: 4467, column: 33, scope: !7192)
!7261 = !DILocation(line: 4467, column: 3, scope: !7192)
!7262 = !DILocation(line: 4468, column: 7, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !7192, file: !3, line: 4468, column: 7)
!7264 = !DILocation(line: 4468, column: 11, scope: !7263)
!7265 = !DILocation(line: 4469, column: 7, scope: !7263)
!7266 = !DILocation(line: 4469, column: 12, scope: !7263)
!7267 = !DILocation(line: 4469, column: 31, scope: !7263)
!7268 = !DILocation(line: 4469, column: 35, scope: !7263)
!7269 = !DILocation(line: 4470, column: 7, scope: !7263)
!7270 = !DILocation(line: 4470, column: 10, scope: !7263)
!7271 = !DILocation(line: 4470, column: 14, scope: !7263)
!7272 = !DILocation(line: 4468, column: 7, scope: !7192)
!7273 = !DILocation(line: 4472, column: 11, scope: !7274)
!7274 = distinct !DILexicalBlock(scope: !7275, file: !3, line: 4472, column: 11)
!7275 = distinct !DILexicalBlock(scope: !7263, file: !3, line: 4471, column: 5)
!7276 = !DILocation(line: 4473, column: 4, scope: !7274)
!7277 = !DILocation(line: 4473, column: 7, scope: !7274)
!7278 = !DILocation(line: 4472, column: 11, scope: !7275)
!7279 = !DILocation(line: 4474, column: 33, scope: !7274)
!7280 = !DILocation(line: 4474, column: 2, scope: !7274)
!7281 = !DILocation(line: 4475, column: 29, scope: !7275)
!7282 = !DILocation(line: 4475, column: 7, scope: !7275)
!7283 = !DILocation(line: 4476, column: 5, scope: !7275)
!7284 = !DILocation(line: 4478, column: 19, scope: !7192)
!7285 = !DILocation(line: 4479, column: 7, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7192, file: !3, line: 4479, column: 7)
!7287 = !DILocation(line: 4480, column: 7, scope: !7286)
!7288 = !DILocation(line: 4480, column: 11, scope: !7286)
!7289 = !DILocation(line: 4480, column: 15, scope: !7286)
!7290 = !DILocation(line: 4481, column: 7, scope: !7286)
!7291 = !DILocation(line: 4481, column: 32, scope: !7286)
!7292 = !DILocation(line: 4481, column: 10, scope: !7286)
!7293 = !DILocation(line: 4482, column: 7, scope: !7286)
!7294 = !DILocation(line: 4482, column: 10, scope: !7286)
!7295 = !DILocation(line: 4482, column: 46, scope: !7286)
!7296 = !DILocation(line: 4483, column: 7, scope: !7286)
!7297 = !DILocation(line: 4483, column: 10, scope: !7286)
!7298 = !DILocation(line: 4483, column: 49, scope: !7286)
!7299 = !DILocation(line: 4483, column: 46, scope: !7286)
!7300 = !DILocation(line: 4479, column: 7, scope: !7192)
!7301 = !DILocalVariable(name: "fo", scope: !7302, file: !3, line: 4485, type: !7303)
!7302 = distinct !DILexicalBlock(scope: !7286, file: !3, line: 4484, column: 5)
!7303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3139, size: 64)
!7304 = !DILocation(line: 4485, column: 19, scope: !7302)
!7305 = !DILocalVariable(name: "notokay", scope: !7302, file: !3, line: 4486, type: !1894)
!7306 = !DILocation(line: 4486, column: 12, scope: !7302)
!7307 = !DILocalVariable(name: "i", scope: !7302, file: !3, line: 4487, type: !6)
!7308 = !DILocation(line: 4487, column: 20, scope: !7302)
!7309 = !DILocation(line: 4489, column: 14, scope: !7310)
!7310 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 4489, column: 7)
!7311 = !DILocation(line: 4489, column: 12, scope: !7310)
!7312 = !DILocation(line: 4489, column: 20, scope: !7313)
!7313 = distinct !DILexicalBlock(scope: !7310, file: !3, line: 4489, column: 7)
!7314 = !DILocation(line: 4489, column: 28, scope: !7313)
!7315 = !DILocation(line: 4489, column: 31, scope: !7313)
!7316 = !DILocation(line: 0, scope: !7313)
!7317 = !DILocation(line: 4489, column: 7, scope: !7310)
!7318 = !DILocation(line: 4491, column: 8, scope: !7319)
!7319 = distinct !DILexicalBlock(scope: !7320, file: !3, line: 4491, column: 8)
!7320 = distinct !DILexicalBlock(scope: !7313, file: !3, line: 4490, column: 2)
!7321 = !DILocation(line: 4491, column: 12, scope: !7319)
!7322 = !DILocation(line: 4492, column: 8, scope: !7319)
!7323 = !DILocation(line: 4492, column: 11, scope: !7319)
!7324 = !DILocation(line: 4492, column: 15, scope: !7319)
!7325 = !DILocation(line: 4492, column: 22, scope: !7319)
!7326 = !DILocation(line: 4491, column: 8, scope: !7320)
!7327 = !DILocation(line: 4494, column: 16, scope: !7328)
!7328 = distinct !DILexicalBlock(scope: !7319, file: !3, line: 4493, column: 6)
!7329 = !DILocation(line: 4495, column: 8, scope: !7328)
!7330 = !DILocation(line: 4497, column: 2, scope: !7320)
!7331 = !DILocation(line: 4489, column: 77, scope: !7313)
!7332 = !DILocation(line: 4489, column: 7, scope: !7313)
!7333 = distinct !{!7333, !7317, !7334}
!7334 = !DILocation(line: 4497, column: 2, scope: !7310)
!7335 = !DILocation(line: 4503, column: 12, scope: !7336)
!7336 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 4503, column: 11)
!7337 = !DILocation(line: 4503, column: 11, scope: !7302)
!7338 = !DILocation(line: 4505, column: 21, scope: !7339)
!7339 = distinct !DILexicalBlock(scope: !7336, file: !3, line: 4504, column: 2)
!7340 = !DILocation(line: 4505, column: 4, scope: !7339)
!7341 = !DILocation(line: 4510, column: 34, scope: !7339)
!7342 = !DILocation(line: 4510, column: 14, scope: !7339)
!7343 = !DILocation(line: 4510, column: 12, scope: !7339)
!7344 = !DILocation(line: 4511, column: 2, scope: !7339)
!7345 = !DILocation(line: 4514, column: 11, scope: !7346)
!7346 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 4514, column: 11)
!7347 = !DILocation(line: 4514, column: 47, scope: !7346)
!7348 = !DILocation(line: 4514, column: 11, scope: !7302)
!7349 = !DILocation(line: 4515, column: 7, scope: !7346)
!7350 = !DILocation(line: 4515, column: 5, scope: !7346)
!7351 = !DILocation(line: 4515, column: 2, scope: !7346)
!7352 = !DILocation(line: 4517, column: 11, scope: !7353)
!7353 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 4517, column: 11)
!7354 = !DILocation(line: 4517, column: 14, scope: !7353)
!7355 = !DILocation(line: 4517, column: 22, scope: !7353)
!7356 = !DILocation(line: 4517, column: 25, scope: !7353)
!7357 = !DILocation(line: 4517, column: 11, scope: !7302)
!7358 = !DILocation(line: 4519, column: 4, scope: !7359)
!7359 = distinct !DILexicalBlock(scope: !7353, file: !3, line: 4518, column: 2)
!7360 = !DILocation(line: 4519, column: 8, scope: !7359)
!7361 = !DILocation(line: 4519, column: 28, scope: !7359)
!7362 = !DILocation(line: 4520, column: 4, scope: !7359)
!7363 = !DILocation(line: 4520, column: 8, scope: !7359)
!7364 = !DILocation(line: 4520, column: 17, scope: !7359)
!7365 = !DILocation(line: 4521, column: 4, scope: !7359)
!7366 = !DILocation(line: 4521, column: 8, scope: !7359)
!7367 = !DILocation(line: 4521, column: 13, scope: !7359)
!7368 = !DILocation(line: 4522, column: 4, scope: !7359)
!7369 = !DILocation(line: 4522, column: 8, scope: !7359)
!7370 = !DILocation(line: 4522, column: 20, scope: !7359)
!7371 = !DILocation(line: 4523, column: 4, scope: !7359)
!7372 = !DILocation(line: 4524, column: 11, scope: !7359)
!7373 = !DILocation(line: 4524, column: 15, scope: !7359)
!7374 = !DILocation(line: 4524, column: 4, scope: !7359)
!7375 = !DILocation(line: 4527, column: 18, scope: !7302)
!7376 = !DILocation(line: 4527, column: 22, scope: !7302)
!7377 = !DILocation(line: 4527, column: 7, scope: !7302)
!7378 = !DILocation(line: 4527, column: 11, scope: !7302)
!7379 = !DILocation(line: 4527, column: 16, scope: !7302)
!7380 = !DILocation(line: 4528, column: 20, scope: !7302)
!7381 = !DILocation(line: 4528, column: 24, scope: !7302)
!7382 = !DILocation(line: 4528, column: 7, scope: !7302)
!7383 = !DILocation(line: 4528, column: 11, scope: !7302)
!7384 = !DILocation(line: 4528, column: 18, scope: !7302)
!7385 = !DILocation(line: 4529, column: 31, scope: !7302)
!7386 = !DILocation(line: 4529, column: 35, scope: !7302)
!7387 = !DILocation(line: 4529, column: 7, scope: !7302)
!7388 = !DILocation(line: 4529, column: 11, scope: !7302)
!7389 = !DILocation(line: 4529, column: 29, scope: !7302)
!7390 = !DILocation(line: 4530, column: 11, scope: !7391)
!7391 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 4530, column: 11)
!7392 = !DILocation(line: 4530, column: 15, scope: !7391)
!7393 = !DILocation(line: 4531, column: 4, scope: !7391)
!7394 = !DILocation(line: 4531, column: 9, scope: !7391)
!7395 = !DILocation(line: 4531, column: 28, scope: !7391)
!7396 = !DILocation(line: 4531, column: 32, scope: !7391)
!7397 = !DILocation(line: 4532, column: 4, scope: !7391)
!7398 = !DILocation(line: 4532, column: 7, scope: !7391)
!7399 = !DILocation(line: 4532, column: 11, scope: !7391)
!7400 = !DILocation(line: 4530, column: 11, scope: !7302)
!7401 = !DILocation(line: 4534, column: 8, scope: !7402)
!7402 = distinct !DILexicalBlock(scope: !7403, file: !3, line: 4534, column: 8)
!7403 = distinct !DILexicalBlock(scope: !7391, file: !3, line: 4533, column: 2)
!7404 = !DILocation(line: 4534, column: 12, scope: !7402)
!7405 = !DILocation(line: 4534, column: 8, scope: !7403)
!7406 = !DILocation(line: 4535, column: 37, scope: !7402)
!7407 = !DILocation(line: 4535, column: 6, scope: !7402)
!7408 = !DILocation(line: 4536, column: 2, scope: !7403)
!7409 = !DILocation(line: 4537, column: 16, scope: !7410)
!7410 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 4537, column: 7)
!7411 = !DILocation(line: 4537, column: 52, scope: !7410)
!7412 = !DILocation(line: 4537, column: 14, scope: !7410)
!7413 = !DILocation(line: 4537, column: 12, scope: !7410)
!7414 = !DILocation(line: 4538, column: 5, scope: !7415)
!7415 = distinct !DILexicalBlock(scope: !7410, file: !3, line: 4537, column: 7)
!7416 = !DILocation(line: 4538, column: 7, scope: !7415)
!7417 = !DILocation(line: 4538, column: 12, scope: !7415)
!7418 = !DILocation(line: 4538, column: 15, scope: !7415)
!7419 = !DILocation(line: 0, scope: !7415)
!7420 = !DILocation(line: 4537, column: 7, scope: !7410)
!7421 = !DILocalVariable(name: "newvi", scope: !7422, file: !3, line: 4541, type: !1758)
!7422 = distinct !DILexicalBlock(scope: !7415, file: !3, line: 4540, column: 2)
!7423 = !DILocation(line: 4541, column: 14, scope: !7422)
!7424 = !DILocalVariable(name: "newname", scope: !7422, file: !3, line: 4542, type: !1776)
!7425 = !DILocation(line: 4542, column: 16, scope: !7422)
!7426 = !DILocalVariable(name: "tempname", scope: !7422, file: !3, line: 4543, type: !2041)
!7427 = !DILocation(line: 4543, column: 10, scope: !7422)
!7428 = !DILocation(line: 4545, column: 8, scope: !7429)
!7429 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 4545, column: 8)
!7430 = !DILocation(line: 4545, column: 8, scope: !7422)
!7431 = !DILocation(line: 4549, column: 4, scope: !7432)
!7432 = distinct !DILexicalBlock(scope: !7429, file: !3, line: 4546, column: 6)
!7433 = !DILocation(line: 4549, column: 8, scope: !7432)
!7434 = !DILocation(line: 4549, column: 14, scope: !7432)
!7435 = !DILocation(line: 4549, column: 18, scope: !7432)
!7436 = !DILocation(line: 4549, column: 26, scope: !7432)
!7437 = !DILocation(line: 4549, column: 30, scope: !7432)
!7438 = !DILocation(line: 4547, column: 8, scope: !7432)
!7439 = !DILocation(line: 4550, column: 18, scope: !7432)
!7440 = !DILocation(line: 4550, column: 16, scope: !7432)
!7441 = !DILocation(line: 4551, column: 14, scope: !7432)
!7442 = !DILocation(line: 4551, column: 8, scope: !7432)
!7443 = !DILocation(line: 4552, column: 6, scope: !7432)
!7444 = !DILocation(line: 4553, column: 26, scope: !7422)
!7445 = !DILocation(line: 4553, column: 32, scope: !7422)
!7446 = !DILocation(line: 4553, column: 12, scope: !7422)
!7447 = !DILocation(line: 4553, column: 10, scope: !7422)
!7448 = !DILocation(line: 4554, column: 20, scope: !7422)
!7449 = !DILocation(line: 4554, column: 24, scope: !7422)
!7450 = !DILocation(line: 4554, column: 4, scope: !7422)
!7451 = !DILocation(line: 4554, column: 11, scope: !7422)
!7452 = !DILocation(line: 4554, column: 18, scope: !7422)
!7453 = !DILocation(line: 4555, column: 18, scope: !7422)
!7454 = !DILocation(line: 4555, column: 22, scope: !7422)
!7455 = !DILocation(line: 4555, column: 4, scope: !7422)
!7456 = !DILocation(line: 4555, column: 11, scope: !7422)
!7457 = !DILocation(line: 4555, column: 16, scope: !7422)
!7458 = !DILocation(line: 4556, column: 22, scope: !7422)
!7459 = !DILocation(line: 4556, column: 26, scope: !7422)
!7460 = !DILocation(line: 4556, column: 4, scope: !7422)
!7461 = !DILocation(line: 4556, column: 11, scope: !7422)
!7462 = !DILocation(line: 4556, column: 20, scope: !7422)
!7463 = !DILocation(line: 4557, column: 31, scope: !7422)
!7464 = !DILocation(line: 4557, column: 35, scope: !7422)
!7465 = !DILocation(line: 4557, column: 4, scope: !7422)
!7466 = !DILocation(line: 4557, column: 11, scope: !7422)
!7467 = !DILocation(line: 4557, column: 29, scope: !7422)
!7468 = !DILocation(line: 4558, column: 28, scope: !7422)
!7469 = !DILocation(line: 4558, column: 32, scope: !7422)
!7470 = !DILocation(line: 4558, column: 4, scope: !7422)
!7471 = !DILocation(line: 4559, column: 9, scope: !7472)
!7472 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 4559, column: 8)
!7473 = !DILocation(line: 4559, column: 16, scope: !7472)
!7474 = !DILocation(line: 4559, column: 30, scope: !7472)
!7475 = !DILocation(line: 4559, column: 33, scope: !7472)
!7476 = !DILocation(line: 4559, column: 50, scope: !7472)
!7477 = !DILocation(line: 4560, column: 8, scope: !7472)
!7478 = !DILocation(line: 4560, column: 11, scope: !7472)
!7479 = !DILocation(line: 4560, column: 18, scope: !7472)
!7480 = !DILocation(line: 4559, column: 8, scope: !7422)
!7481 = !DILocation(line: 4562, column: 13, scope: !7482)
!7482 = distinct !DILexicalBlock(scope: !7483, file: !3, line: 4562, column: 13)
!7483 = distinct !DILexicalBlock(scope: !7472, file: !3, line: 4561, column: 6)
!7484 = !DILocation(line: 4562, column: 17, scope: !7482)
!7485 = !DILocation(line: 4562, column: 13, scope: !7483)
!7486 = !DILocation(line: 4563, column: 35, scope: !7482)
!7487 = !DILocation(line: 4563, column: 4, scope: !7482)
!7488 = !DILocation(line: 4564, column: 13, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7483, file: !3, line: 4564, column: 13)
!7490 = !DILocation(line: 4564, column: 20, scope: !7489)
!7491 = !DILocation(line: 4564, column: 34, scope: !7489)
!7492 = !DILocation(line: 4564, column: 38, scope: !7489)
!7493 = !DILocation(line: 4564, column: 13, scope: !7483)
!7494 = !DILocation(line: 4565, column: 26, scope: !7489)
!7495 = !DILocation(line: 4565, column: 4, scope: !7489)
!7496 = !DILocation(line: 4566, column: 6, scope: !7483)
!7497 = !DILocation(line: 4568, column: 20, scope: !7422)
!7498 = !DILocation(line: 4569, column: 2, scope: !7422)
!7499 = !DILocation(line: 4539, column: 6, scope: !7415)
!7500 = !DILocation(line: 4537, column: 7, scope: !7415)
!7501 = distinct !{!7501, !7420, !7502}
!7502 = !DILocation(line: 4569, column: 2, scope: !7410)
!7503 = !DILocation(line: 4570, column: 5, scope: !7302)
!7504 = !DILocation(line: 4572, column: 5, scope: !7286)
!7505 = !DILocation(line: 4572, column: 9, scope: !7286)
!7506 = !DILocation(line: 4572, column: 21, scope: !7286)
!7507 = !DILocation(line: 4574, column: 3, scope: !7192)
!7508 = !DILocation(line: 4576, column: 10, scope: !7192)
!7509 = !DILocation(line: 4576, column: 14, scope: !7192)
!7510 = !DILocation(line: 4576, column: 3, scope: !7192)
!7511 = !DILocation(line: 4577, column: 1, scope: !7192)
!7512 = distinct !DISubprogram(name: "alias_get_name", scope: !3, file: !3, line: 2624, type: !7513, scopeLine: 2625, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7513 = !DISubroutineType(types: !7514)
!7514 = !{!1776, !1780}
!7515 = !DILocalVariable(name: "decl", arg: 1, scope: !7512, file: !3, line: 2624, type: !1780)
!7516 = !DILocation(line: 2624, column: 22, scope: !7512)
!7517 = !DILocalVariable(name: "res", scope: !7512, file: !3, line: 2626, type: !1776)
!7518 = !DILocation(line: 2626, column: 15, scope: !7512)
!7519 = !DILocation(line: 2626, column: 31, scope: !7512)
!7520 = !DILocation(line: 2626, column: 21, scope: !7512)
!7521 = !DILocalVariable(name: "temp", scope: !7512, file: !3, line: 2627, type: !2041)
!7522 = !DILocation(line: 2627, column: 9, scope: !7512)
!7523 = !DILocalVariable(name: "num_printed", scope: !7512, file: !3, line: 2628, type: !1730)
!7524 = !DILocation(line: 2628, column: 7, scope: !7512)
!7525 = !DILocation(line: 2630, column: 7, scope: !7526)
!7526 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 2630, column: 7)
!7527 = !DILocation(line: 2630, column: 11, scope: !7526)
!7528 = !DILocation(line: 2630, column: 7, scope: !7512)
!7529 = !DILocation(line: 2631, column: 12, scope: !7526)
!7530 = !DILocation(line: 2631, column: 5, scope: !7526)
!7531 = !DILocation(line: 2633, column: 7, scope: !7512)
!7532 = !DILocation(line: 2634, column: 8, scope: !7533)
!7533 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 2634, column: 7)
!7534 = !DILocation(line: 2634, column: 7, scope: !7512)
!7535 = !DILocation(line: 2635, column: 12, scope: !7533)
!7536 = !DILocation(line: 2635, column: 5, scope: !7533)
!7537 = !DILocation(line: 2637, column: 7, scope: !7538)
!7538 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 2637, column: 7)
!7539 = !DILocation(line: 2637, column: 24, scope: !7538)
!7540 = !DILocation(line: 2637, column: 7, scope: !7512)
!7541 = !DILocation(line: 2640, column: 26, scope: !7542)
!7542 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2638, column: 5)
!7543 = !DILocation(line: 2640, column: 10, scope: !7542)
!7544 = !DILocation(line: 2641, column: 10, scope: !7542)
!7545 = !DILocation(line: 2639, column: 21, scope: !7542)
!7546 = !DILocation(line: 2639, column: 19, scope: !7542)
!7547 = !DILocation(line: 2642, column: 5, scope: !7542)
!7548 = !DILocation(line: 2643, column: 12, scope: !7549)
!7549 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2643, column: 12)
!7550 = !DILocation(line: 2643, column: 12, scope: !7538)
!7551 = !DILocation(line: 2645, column: 46, scope: !7552)
!7552 = distinct !DILexicalBlock(scope: !7549, file: !3, line: 2644, column: 5)
!7553 = !DILocation(line: 2645, column: 21, scope: !7552)
!7554 = !DILocation(line: 2645, column: 19, scope: !7552)
!7555 = !DILocation(line: 2646, column: 5, scope: !7552)
!7556 = !DILocation(line: 2647, column: 7, scope: !7557)
!7557 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 2647, column: 7)
!7558 = !DILocation(line: 2647, column: 19, scope: !7557)
!7559 = !DILocation(line: 2647, column: 7, scope: !7512)
!7560 = !DILocation(line: 2649, column: 13, scope: !7561)
!7561 = distinct !DILexicalBlock(scope: !7557, file: !3, line: 2648, column: 5)
!7562 = !DILocation(line: 2649, column: 11, scope: !7561)
!7563 = !DILocation(line: 2650, column: 13, scope: !7561)
!7564 = !DILocation(line: 2650, column: 7, scope: !7561)
!7565 = !DILocation(line: 2651, column: 5, scope: !7561)
!7566 = !DILocation(line: 2652, column: 10, scope: !7512)
!7567 = !DILocation(line: 2652, column: 3, scope: !7512)
!7568 = !DILocation(line: 2653, column: 1, scope: !7512)
!7569 = distinct !DISubprogram(name: "var_can_have_subvars", scope: !3, file: !3, line: 4187, type: !3988, scopeLine: 4188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7570 = !DILocalVariable(name: "v", arg: 1, scope: !7569, file: !3, line: 4187, type: !3990)
!7571 = !DILocation(line: 4187, column: 34, scope: !7569)
!7572 = !DILocation(line: 4190, column: 7, scope: !7573)
!7573 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 4190, column: 7)
!7574 = !DILocation(line: 4190, column: 7, scope: !7569)
!7575 = !DILocation(line: 4191, column: 5, scope: !7573)
!7576 = !DILocation(line: 4194, column: 8, scope: !7577)
!7577 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 4194, column: 7)
!7578 = !DILocation(line: 4194, column: 7, scope: !7569)
!7579 = !DILocation(line: 4195, column: 5, scope: !7577)
!7580 = !DILocation(line: 4198, column: 7, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 4198, column: 7)
!7582 = !DILocation(line: 4198, column: 33, scope: !7581)
!7583 = !DILocation(line: 4198, column: 7, scope: !7569)
!7584 = !DILocation(line: 4199, column: 5, scope: !7581)
!7585 = !DILocation(line: 4201, column: 3, scope: !7569)
!7586 = !DILocation(line: 4202, column: 1, scope: !7569)
!7587 = distinct !DISubprogram(name: "push_fields_onto_fieldstack", scope: !3, file: !3, line: 4213, type: !7588, scopeLine: 4215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7588 = !DISubroutineType(types: !7589)
!7589 = !{!1730, !1780, !7590, !1714}
!7590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3127, size: 64)
!7591 = !DILocalVariable(name: "type", arg: 1, scope: !7587, file: !3, line: 4213, type: !1780)
!7592 = !DILocation(line: 4213, column: 35, scope: !7587)
!7593 = !DILocalVariable(name: "fieldstack", arg: 2, scope: !7587, file: !3, line: 4213, type: !7590)
!7594 = !DILocation(line: 4213, column: 64, scope: !7587)
!7595 = !DILocalVariable(name: "offset", arg: 3, scope: !7587, file: !3, line: 4214, type: !1714)
!7596 = !DILocation(line: 4214, column: 23, scope: !7587)
!7597 = !DILocalVariable(name: "field", scope: !7587, file: !3, line: 4216, type: !1780)
!7598 = !DILocation(line: 4216, column: 8, scope: !7587)
!7599 = !DILocalVariable(name: "count", scope: !7587, file: !3, line: 4217, type: !1730)
!7600 = !DILocation(line: 4217, column: 7, scope: !7587)
!7601 = !DILocation(line: 4219, column: 7, scope: !7602)
!7602 = distinct !DILexicalBlock(scope: !7587, file: !3, line: 4219, column: 7)
!7603 = !DILocation(line: 4219, column: 24, scope: !7602)
!7604 = !DILocation(line: 4219, column: 7, scope: !7587)
!7605 = !DILocation(line: 4220, column: 5, scope: !7602)
!7606 = !DILocation(line: 4225, column: 7, scope: !7607)
!7607 = distinct !DILexicalBlock(scope: !7587, file: !3, line: 4225, column: 7)
!7608 = !DILocation(line: 4225, column: 46, scope: !7607)
!7609 = !DILocation(line: 4225, column: 44, scope: !7607)
!7610 = !DILocation(line: 4225, column: 7, scope: !7587)
!7611 = !DILocation(line: 4226, column: 5, scope: !7607)
!7612 = !DILocation(line: 4228, column: 16, scope: !7613)
!7613 = distinct !DILexicalBlock(scope: !7587, file: !3, line: 4228, column: 3)
!7614 = !DILocation(line: 4228, column: 14, scope: !7613)
!7615 = !DILocation(line: 4228, column: 8, scope: !7613)
!7616 = !DILocation(line: 4228, column: 36, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7613, file: !3, line: 4228, column: 3)
!7618 = !DILocation(line: 4228, column: 3, scope: !7613)
!7619 = !DILocation(line: 4229, column: 9, scope: !7620)
!7620 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 4229, column: 9)
!7621 = !DILocation(line: 4229, column: 27, scope: !7620)
!7622 = !DILocation(line: 4229, column: 9, scope: !7617)
!7623 = !DILocalVariable(name: "push", scope: !7624, file: !3, line: 4231, type: !1894)
!7624 = distinct !DILexicalBlock(scope: !7620, file: !3, line: 4230, column: 7)
!7625 = !DILocation(line: 4231, column: 7, scope: !7624)
!7626 = !DILocalVariable(name: "pushed", scope: !7624, file: !3, line: 4232, type: !1730)
!7627 = !DILocation(line: 4232, column: 6, scope: !7624)
!7628 = !DILocalVariable(name: "foff", scope: !7624, file: !3, line: 4233, type: !1714)
!7629 = !DILocation(line: 4233, column: 16, scope: !7624)
!7630 = !DILocation(line: 4233, column: 40, scope: !7624)
!7631 = !DILocation(line: 4233, column: 23, scope: !7624)
!7632 = !DILocation(line: 4235, column: 29, scope: !7633)
!7633 = distinct !DILexicalBlock(scope: !7624, file: !3, line: 4235, column: 6)
!7634 = !DILocation(line: 4235, column: 7, scope: !7633)
!7635 = !DILocation(line: 4236, column: 6, scope: !7633)
!7636 = !DILocation(line: 4236, column: 9, scope: !7633)
!7637 = !DILocation(line: 4236, column: 39, scope: !7633)
!7638 = !DILocation(line: 4237, column: 6, scope: !7633)
!7639 = !DILocation(line: 4237, column: 9, scope: !7633)
!7640 = !DILocation(line: 4237, column: 39, scope: !7633)
!7641 = !DILocation(line: 4235, column: 6, scope: !7624)
!7642 = !DILocation(line: 4238, column: 9, scope: !7633)
!7643 = !DILocation(line: 4238, column: 4, scope: !7633)
!7644 = !DILocation(line: 4240, column: 7, scope: !7645)
!7645 = distinct !DILexicalBlock(scope: !7633, file: !3, line: 4239, column: 11)
!7646 = !DILocation(line: 4240, column: 26, scope: !7645)
!7647 = !DILocation(line: 4240, column: 38, scope: !7645)
!7648 = !DILocation(line: 4240, column: 47, scope: !7645)
!7649 = !DILocation(line: 4240, column: 45, scope: !7645)
!7650 = !DILocation(line: 4239, column: 22, scope: !7645)
!7651 = !DILocation(line: 4239, column: 20, scope: !7645)
!7652 = !DILocation(line: 4241, column: 4, scope: !7645)
!7653 = !DILocation(line: 4241, column: 8, scope: !7645)
!7654 = !DILocation(line: 4242, column: 8, scope: !7645)
!7655 = !DILocation(line: 4242, column: 27, scope: !7645)
!7656 = !DILocation(line: 4242, column: 12, scope: !7645)
!7657 = !DILocation(line: 4239, column: 11, scope: !7633)
!7658 = !DILocation(line: 4246, column: 9, scope: !7645)
!7659 = !DILocation(line: 4246, column: 4, scope: !7645)
!7660 = !DILocation(line: 4248, column: 6, scope: !7661)
!7661 = distinct !DILexicalBlock(scope: !7624, file: !3, line: 4248, column: 6)
!7662 = !DILocation(line: 4248, column: 6, scope: !7624)
!7663 = !DILocalVariable(name: "pair", scope: !7664, file: !3, line: 4250, type: !7303)
!7664 = distinct !DILexicalBlock(scope: !7661, file: !3, line: 4249, column: 4)
!7665 = !DILocation(line: 4250, column: 18, scope: !7664)
!7666 = !DILocalVariable(name: "has_unknown_size", scope: !7664, file: !3, line: 4251, type: !1894)
!7667 = !DILocation(line: 4251, column: 11, scope: !7664)
!7668 = !DILocation(line: 4253, column: 11, scope: !7669)
!7669 = distinct !DILexicalBlock(scope: !7664, file: !3, line: 4253, column: 10)
!7670 = !DILocation(line: 4253, column: 10, scope: !7664)
!7671 = !DILocation(line: 4254, column: 15, scope: !7669)
!7672 = !DILocation(line: 4254, column: 13, scope: !7669)
!7673 = !DILocation(line: 4254, column: 8, scope: !7669)
!7674 = !DILocation(line: 4256, column: 11, scope: !7675)
!7675 = distinct !DILexicalBlock(scope: !7664, file: !3, line: 4256, column: 10)
!7676 = !DILocation(line: 4257, column: 3, scope: !7675)
!7677 = !DILocation(line: 4257, column: 22, scope: !7675)
!7678 = !DILocation(line: 4257, column: 7, scope: !7675)
!7679 = !DILocation(line: 4256, column: 10, scope: !7664)
!7680 = !DILocation(line: 4258, column: 25, scope: !7675)
!7681 = !DILocation(line: 4258, column: 8, scope: !7675)
!7682 = !DILocation(line: 4261, column: 10, scope: !7683)
!7683 = distinct !DILexicalBlock(scope: !7664, file: !3, line: 4261, column: 10)
!7684 = !DILocation(line: 4262, column: 3, scope: !7683)
!7685 = !DILocation(line: 4262, column: 7, scope: !7683)
!7686 = !DILocation(line: 4262, column: 13, scope: !7683)
!7687 = !DILocation(line: 4263, column: 3, scope: !7683)
!7688 = !DILocation(line: 4263, column: 28, scope: !7683)
!7689 = !DILocation(line: 4263, column: 7, scope: !7683)
!7690 = !DILocation(line: 4264, column: 3, scope: !7683)
!7691 = !DILocation(line: 4264, column: 7, scope: !7683)
!7692 = !DILocation(line: 4264, column: 13, scope: !7683)
!7693 = !DILocation(line: 4265, column: 3, scope: !7683)
!7694 = !DILocation(line: 4265, column: 7, scope: !7683)
!7695 = !DILocation(line: 4266, column: 3, scope: !7683)
!7696 = !DILocation(line: 4266, column: 6, scope: !7683)
!7697 = !DILocation(line: 4266, column: 12, scope: !7683)
!7698 = !DILocation(line: 4266, column: 36, scope: !7683)
!7699 = !DILocation(line: 4266, column: 42, scope: !7683)
!7700 = !DILocation(line: 4266, column: 19, scope: !7683)
!7701 = !DILocation(line: 4266, column: 50, scope: !7683)
!7702 = !DILocation(line: 4266, column: 59, scope: !7683)
!7703 = !DILocation(line: 4266, column: 57, scope: !7683)
!7704 = !DILocation(line: 4266, column: 47, scope: !7683)
!7705 = !DILocation(line: 4261, column: 10, scope: !7664)
!7706 = !DILocation(line: 4268, column: 10, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 4267, column: 8)
!7708 = !DILocation(line: 4268, column: 8, scope: !7707)
!7709 = !DILocation(line: 4269, column: 17, scope: !7707)
!7710 = !DILocation(line: 4269, column: 3, scope: !7707)
!7711 = !DILocation(line: 4269, column: 9, scope: !7707)
!7712 = !DILocation(line: 4269, column: 14, scope: !7707)
!7713 = !DILocation(line: 4270, column: 8, scope: !7707)
!7714 = !DILocation(line: 4273, column: 10, scope: !7715)
!7715 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 4272, column: 8)
!7716 = !DILocation(line: 4273, column: 8, scope: !7715)
!7717 = !DILocation(line: 4274, column: 18, scope: !7715)
!7718 = !DILocation(line: 4274, column: 27, scope: !7715)
!7719 = !DILocation(line: 4274, column: 25, scope: !7715)
!7720 = !DILocation(line: 4274, column: 3, scope: !7715)
!7721 = !DILocation(line: 4274, column: 9, scope: !7715)
!7722 = !DILocation(line: 4274, column: 16, scope: !7715)
!7723 = !DILocation(line: 4275, column: 28, scope: !7715)
!7724 = !DILocation(line: 4275, column: 3, scope: !7715)
!7725 = !DILocation(line: 4275, column: 9, scope: !7715)
!7726 = !DILocation(line: 4275, column: 26, scope: !7715)
!7727 = !DILocation(line: 4276, column: 8, scope: !7728)
!7728 = distinct !DILexicalBlock(scope: !7715, file: !3, line: 4276, column: 7)
!7729 = !DILocation(line: 4276, column: 7, scope: !7715)
!7730 = !DILocation(line: 4277, column: 18, scope: !7728)
!7731 = !DILocation(line: 4277, column: 5, scope: !7728)
!7732 = !DILocation(line: 4277, column: 11, scope: !7728)
!7733 = !DILocation(line: 4277, column: 16, scope: !7728)
!7734 = !DILocation(line: 4279, column: 5, scope: !7728)
!7735 = !DILocation(line: 4279, column: 11, scope: !7728)
!7736 = !DILocation(line: 4279, column: 16, scope: !7728)
!7737 = !DILocation(line: 4280, column: 50, scope: !7715)
!7738 = !DILocation(line: 4280, column: 29, scope: !7715)
!7739 = !DILocation(line: 4280, column: 3, scope: !7715)
!7740 = !DILocation(line: 4280, column: 9, scope: !7715)
!7741 = !DILocation(line: 4280, column: 27, scope: !7715)
!7742 = !DILocation(line: 4282, column: 9, scope: !7715)
!7743 = !DILocation(line: 4283, column: 8, scope: !7715)
!7744 = !DILocation(line: 4283, column: 11, scope: !7715)
!7745 = !DILocation(line: 4284, column: 8, scope: !7715)
!7746 = !DILocation(line: 4284, column: 11, scope: !7715)
!7747 = !DILocation(line: 0, scope: !7715)
!7748 = !DILocation(line: 4281, column: 3, scope: !7715)
!7749 = !DILocation(line: 4281, column: 9, scope: !7715)
!7750 = !DILocation(line: 4282, column: 5, scope: !7715)
!7751 = !DILocation(line: 4285, column: 8, scope: !7715)
!7752 = !DILocation(line: 4287, column: 4, scope: !7664)
!7753 = !DILocation(line: 4289, column: 13, scope: !7661)
!7754 = !DILocation(line: 4289, column: 10, scope: !7661)
!7755 = !DILocation(line: 4290, column: 7, scope: !7624)
!7756 = !DILocation(line: 4229, column: 30, scope: !7620)
!7757 = !DILocation(line: 4228, column: 51, scope: !7617)
!7758 = !DILocation(line: 4228, column: 49, scope: !7617)
!7759 = !DILocation(line: 4228, column: 3, scope: !7617)
!7760 = distinct !{!7760, !7618, !7761}
!7761 = !DILocation(line: 4290, column: 7, scope: !7613)
!7762 = !DILocation(line: 4292, column: 10, scope: !7587)
!7763 = !DILocation(line: 4292, column: 3, scope: !7587)
!7764 = !DILocation(line: 4293, column: 1, scope: !7587)
!7765 = distinct !DISubprogram(name: "insert_vi_for_tree", scope: !3, file: !3, line: 2600, type: !7766, scopeLine: 2601, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7766 = !DISubroutineType(types: !7767)
!7767 = !{null, !1780, !1758}
!7768 = !DILocalVariable(name: "t", arg: 1, scope: !7765, file: !3, line: 2600, type: !1780)
!7769 = !DILocation(line: 2600, column: 26, scope: !7765)
!7770 = !DILocalVariable(name: "vi", arg: 2, scope: !7765, file: !3, line: 2600, type: !1758)
!7771 = !DILocation(line: 2600, column: 39, scope: !7765)
!7772 = !DILocalVariable(name: "slot", scope: !7765, file: !3, line: 2602, type: !2587)
!7773 = !DILocation(line: 2602, column: 10, scope: !7765)
!7774 = !DILocation(line: 2602, column: 37, scope: !7765)
!7775 = !DILocation(line: 2602, column: 50, scope: !7765)
!7776 = !DILocation(line: 2602, column: 17, scope: !7765)
!7777 = !DILocation(line: 2603, column: 3, scope: !7765)
!7778 = !DILocation(line: 2604, column: 3, scope: !7765)
!7779 = !DILocation(line: 2605, column: 11, scope: !7765)
!7780 = !DILocation(line: 2605, column: 4, scope: !7765)
!7781 = !DILocation(line: 2605, column: 9, scope: !7765)
!7782 = !DILocation(line: 2606, column: 1, scope: !7765)
!7783 = distinct !DISubprogram(name: "make_copy_constraint", scope: !3, file: !3, line: 3357, type: !7107, scopeLine: 3358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7784 = !DILocalVariable(name: "vi", arg: 1, scope: !7783, file: !3, line: 3357, type: !1758)
!7785 = !DILocation(line: 3357, column: 33, scope: !7783)
!7786 = !DILocalVariable(name: "from", arg: 2, scope: !7783, file: !3, line: 3357, type: !1730)
!7787 = !DILocation(line: 3357, column: 41, scope: !7783)
!7788 = !DILocalVariable(name: "lhs", scope: !7783, file: !3, line: 3359, type: !1720)
!7789 = !DILocation(line: 3359, column: 26, scope: !7783)
!7790 = !DILocalVariable(name: "rhs", scope: !7783, file: !3, line: 3359, type: !1720)
!7791 = !DILocation(line: 3359, column: 31, scope: !7783)
!7792 = !DILocation(line: 3361, column: 13, scope: !7783)
!7793 = !DILocation(line: 3361, column: 17, scope: !7783)
!7794 = !DILocation(line: 3361, column: 7, scope: !7783)
!7795 = !DILocation(line: 3361, column: 11, scope: !7783)
!7796 = !DILocation(line: 3362, column: 7, scope: !7783)
!7797 = !DILocation(line: 3362, column: 14, scope: !7783)
!7798 = !DILocation(line: 3363, column: 7, scope: !7783)
!7799 = !DILocation(line: 3363, column: 12, scope: !7783)
!7800 = !DILocation(line: 3365, column: 13, scope: !7783)
!7801 = !DILocation(line: 3365, column: 7, scope: !7783)
!7802 = !DILocation(line: 3365, column: 11, scope: !7783)
!7803 = !DILocation(line: 3366, column: 7, scope: !7783)
!7804 = !DILocation(line: 3366, column: 14, scope: !7783)
!7805 = !DILocation(line: 3367, column: 7, scope: !7783)
!7806 = !DILocation(line: 3367, column: 12, scope: !7783)
!7807 = !DILocation(line: 3368, column: 23, scope: !7783)
!7808 = !DILocation(line: 3368, column: 3, scope: !7783)
!7809 = !DILocation(line: 3369, column: 1, scope: !7783)
!7810 = distinct !DISubprogram(name: "VEC_fieldoff_s_base_length", scope: !3, file: !3, line: 4139, type: !7811, scopeLine: 4139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7811 = !DISubroutineType(types: !7812)
!7812 = !{!6, !7813}
!7813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7814, size: 64)
!7814 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3132)
!7815 = !DILocalVariable(name: "vec_", arg: 1, scope: !7810, file: !3, line: 4139, type: !7813)
!7816 = !DILocation(line: 4139, column: 1, scope: !7810)
!7817 = distinct !DISubprogram(name: "VEC_fieldoff_s_base_iterate", scope: !3, file: !3, line: 4139, type: !7818, scopeLine: 4139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7818 = !DISubroutineType(types: !7819)
!7819 = !{!1730, !7820, !6, !7821}
!7820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3132, size: 64)
!7821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7303, size: 64)
!7822 = !DILocalVariable(name: "vec_", arg: 1, scope: !7817, file: !3, line: 4139, type: !7820)
!7823 = !DILocation(line: 4139, column: 1, scope: !7817)
!7824 = !DILocalVariable(name: "ix_", arg: 2, scope: !7817, file: !3, line: 4139, type: !6)
!7825 = !DILocalVariable(name: "ptr", arg: 3, scope: !7817, file: !3, line: 4139, type: !7821)
!7826 = !DILocation(line: 4139, column: 1, scope: !7827)
!7827 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 4139, column: 1)
!7828 = !DILocation(line: 4139, column: 1, scope: !7829)
!7829 = distinct !DILexicalBlock(scope: !7827, file: !3, line: 4139, column: 1)
!7830 = !DILocation(line: 4139, column: 1, scope: !7831)
!7831 = distinct !DILexicalBlock(scope: !7827, file: !3, line: 4139, column: 1)
!7832 = distinct !DISubprogram(name: "sort_fieldstack", scope: !3, file: !3, line: 4167, type: !7833, scopeLine: 4168, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7833 = !DISubroutineType(types: !7834)
!7834 = !{null, !3127}
!7835 = !DILocalVariable(name: "fieldstack", arg: 1, scope: !7832, file: !3, line: 4167, type: !3127)
!7836 = !DILocation(line: 4167, column: 40, scope: !7832)
!7837 = !DILocation(line: 4170, column: 15, scope: !7832)
!7838 = !DILocation(line: 4171, column: 15, scope: !7832)
!7839 = !DILocation(line: 4170, column: 3, scope: !7832)
!7840 = !DILocation(line: 4180, column: 1, scope: !7832)
!7841 = distinct !DISubprogram(name: "check_for_overlaps", scope: !3, file: !3, line: 4418, type: !7842, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7842 = !DISubroutineType(types: !7843)
!7843 = !{!1894, !3127}
!7844 = !DILocalVariable(name: "fieldstack", arg: 1, scope: !7841, file: !3, line: 4418, type: !3127)
!7845 = !DILocation(line: 4418, column: 44, scope: !7841)
!7846 = !DILocalVariable(name: "fo", scope: !7841, file: !3, line: 4420, type: !7303)
!7847 = !DILocation(line: 4420, column: 15, scope: !7841)
!7848 = !DILocalVariable(name: "i", scope: !7841, file: !3, line: 4421, type: !6)
!7849 = !DILocation(line: 4421, column: 16, scope: !7841)
!7850 = !DILocalVariable(name: "lastoffset", scope: !7841, file: !3, line: 4422, type: !1714)
!7851 = !DILocation(line: 4422, column: 17, scope: !7841)
!7852 = !DILocation(line: 4424, column: 10, scope: !7853)
!7853 = distinct !DILexicalBlock(scope: !7841, file: !3, line: 4424, column: 3)
!7854 = !DILocation(line: 4424, column: 8, scope: !7853)
!7855 = !DILocation(line: 4424, column: 15, scope: !7856)
!7856 = distinct !DILexicalBlock(scope: !7853, file: !3, line: 4424, column: 3)
!7857 = !DILocation(line: 4424, column: 3, scope: !7853)
!7858 = !DILocation(line: 4426, column: 11, scope: !7859)
!7859 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 4426, column: 11)
!7860 = distinct !DILexicalBlock(scope: !7856, file: !3, line: 4425, column: 5)
!7861 = !DILocation(line: 4426, column: 15, scope: !7859)
!7862 = !DILocation(line: 4426, column: 25, scope: !7859)
!7863 = !DILocation(line: 4426, column: 22, scope: !7859)
!7864 = !DILocation(line: 4426, column: 11, scope: !7860)
!7865 = !DILocation(line: 4427, column: 2, scope: !7859)
!7866 = !DILocation(line: 4428, column: 20, scope: !7860)
!7867 = !DILocation(line: 4428, column: 24, scope: !7860)
!7868 = !DILocation(line: 4428, column: 18, scope: !7860)
!7869 = !DILocation(line: 4429, column: 5, scope: !7860)
!7870 = !DILocation(line: 4424, column: 61, scope: !7856)
!7871 = !DILocation(line: 4424, column: 3, scope: !7856)
!7872 = distinct !{!7872, !7857, !7873}
!7873 = !DILocation(line: 4429, column: 5, scope: !7853)
!7874 = !DILocation(line: 4430, column: 3, scope: !7841)
!7875 = !DILocation(line: 4431, column: 1, scope: !7841)
!7876 = distinct !DISubprogram(name: "VEC_fieldoff_s_base_index", scope: !3, file: !3, line: 4139, type: !7877, scopeLine: 4139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7877 = !DISubroutineType(types: !7878)
!7878 = !{!7303, !7820, !6}
!7879 = !DILocalVariable(name: "vec_", arg: 1, scope: !7876, file: !3, line: 4139, type: !7820)
!7880 = !DILocation(line: 4139, column: 1, scope: !7876)
!7881 = !DILocalVariable(name: "ix_", arg: 2, scope: !7876, file: !3, line: 4139, type: !6)
!7882 = !DILocation(line: 0, scope: !7876)
!7883 = distinct !DISubprogram(name: "VEC_fieldoff_s_heap_free", scope: !3, file: !3, line: 4140, type: !7884, scopeLine: 4140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7884 = !DISubroutineType(types: !7885)
!7885 = !{null, !7590}
!7886 = !DILocalVariable(name: "vec_", arg: 1, scope: !7883, file: !3, line: 4140, type: !7590)
!7887 = !DILocation(line: 4140, column: 1, scope: !7883)
!7888 = !DILocation(line: 4140, column: 1, scope: !7889)
!7889 = distinct !DILexicalBlock(scope: !7883, file: !3, line: 4140, column: 1)
!7890 = distinct !DISubprogram(name: "insert_into_field_list", scope: !3, file: !3, line: 4081, type: !7891, scopeLine: 4082, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7891 = !DISubroutineType(types: !7892)
!7892 = !{null, !1758, !1758}
!7893 = !DILocalVariable(name: "base", arg: 1, scope: !7890, file: !3, line: 4081, type: !1758)
!7894 = !DILocation(line: 4081, column: 35, scope: !7890)
!7895 = !DILocalVariable(name: "field", arg: 2, scope: !7890, file: !3, line: 4081, type: !1758)
!7896 = !DILocation(line: 4081, column: 51, scope: !7890)
!7897 = !DILocalVariable(name: "prev", scope: !7890, file: !3, line: 4083, type: !1758)
!7898 = !DILocation(line: 4083, column: 13, scope: !7890)
!7899 = !DILocation(line: 4083, column: 20, scope: !7890)
!7900 = !DILocalVariable(name: "curr", scope: !7890, file: !3, line: 4084, type: !1758)
!7901 = !DILocation(line: 4084, column: 13, scope: !7890)
!7902 = !DILocation(line: 4084, column: 20, scope: !7890)
!7903 = !DILocation(line: 4084, column: 26, scope: !7890)
!7904 = !DILocation(line: 4086, column: 17, scope: !7890)
!7905 = !DILocation(line: 4086, column: 3, scope: !7890)
!7906 = !DILocation(line: 4086, column: 10, scope: !7890)
!7907 = !DILocation(line: 4086, column: 15, scope: !7890)
!7908 = !DILocation(line: 4087, column: 16, scope: !7890)
!7909 = !DILocation(line: 4087, column: 3, scope: !7890)
!7910 = !DILocation(line: 4087, column: 9, scope: !7890)
!7911 = !DILocation(line: 4087, column: 14, scope: !7890)
!7912 = !DILocation(line: 4088, column: 1, scope: !7890)
!7913 = distinct !DISubprogram(name: "bitpos_of_field", scope: !3, file: !3, line: 2813, type: !7914, scopeLine: 2814, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7914 = !DISubroutineType(types: !7915)
!7915 = !{!1714, !7916}
!7916 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1780)
!7917 = !DILocalVariable(name: "fdecl", arg: 1, scope: !7913, file: !3, line: 2813, type: !7916)
!7918 = !DILocation(line: 2813, column: 29, scope: !7913)
!7919 = !DILocation(line: 2816, column: 23, scope: !7920)
!7920 = distinct !DILexicalBlock(scope: !7913, file: !3, line: 2816, column: 7)
!7921 = !DILocation(line: 2816, column: 8, scope: !7920)
!7922 = !DILocation(line: 2817, column: 7, scope: !7920)
!7923 = !DILocation(line: 2817, column: 26, scope: !7920)
!7924 = !DILocation(line: 2817, column: 11, scope: !7920)
!7925 = !DILocation(line: 2816, column: 7, scope: !7913)
!7926 = !DILocation(line: 2818, column: 5, scope: !7920)
!7927 = !DILocation(line: 2820, column: 11, scope: !7913)
!7928 = !DILocation(line: 2820, column: 56, scope: !7913)
!7929 = !DILocation(line: 2821, column: 6, scope: !7913)
!7930 = !DILocation(line: 2821, column: 4, scope: !7913)
!7931 = !DILocation(line: 2820, column: 3, scope: !7913)
!7932 = !DILocation(line: 2822, column: 1, scope: !7913)
!7933 = distinct !DISubprogram(name: "VEC_fieldoff_s_base_last", scope: !3, file: !3, line: 4139, type: !7934, scopeLine: 4139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7934 = !DISubroutineType(types: !7935)
!7935 = !{!7303, !7820}
!7936 = !DILocalVariable(name: "vec_", arg: 1, scope: !7933, file: !3, line: 4139, type: !7820)
!7937 = !DILocation(line: 4139, column: 1, scope: !7933)
!7938 = !DILocation(line: 0, scope: !7933)
!7939 = distinct !DISubprogram(name: "VEC_fieldoff_s_heap_safe_push", scope: !3, file: !3, line: 4140, type: !7940, scopeLine: 4140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7940 = !DISubroutineType(types: !7941)
!7941 = !{!7303, !7590, !3147}
!7942 = !DILocalVariable(name: "vec_", arg: 1, scope: !7939, file: !3, line: 4140, type: !7590)
!7943 = !DILocation(line: 4140, column: 1, scope: !7939)
!7944 = !DILocalVariable(name: "obj_", arg: 2, scope: !7939, file: !3, line: 4140, type: !3147)
!7945 = distinct !DISubprogram(name: "VEC_fieldoff_s_heap_reserve", scope: !3, file: !3, line: 4140, type: !7946, scopeLine: 4140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7946 = !DISubroutineType(types: !7947)
!7947 = !{!1730, !7590, !1730}
!7948 = !DILocalVariable(name: "vec_", arg: 1, scope: !7945, file: !3, line: 4140, type: !7590)
!7949 = !DILocation(line: 4140, column: 1, scope: !7945)
!7950 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7945, file: !3, line: 4140, type: !1730)
!7951 = !DILocalVariable(name: "extend", scope: !7945, file: !3, line: 4140, type: !1730)
!7952 = !DILocation(line: 4140, column: 1, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7945, file: !3, line: 4140, column: 1)
!7954 = distinct !DISubprogram(name: "VEC_fieldoff_s_base_quick_push", scope: !3, file: !3, line: 4139, type: !7955, scopeLine: 4139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7955 = !DISubroutineType(types: !7956)
!7956 = !{!7303, !7820, !3147}
!7957 = !DILocalVariable(name: "vec_", arg: 1, scope: !7954, file: !3, line: 4139, type: !7820)
!7958 = !DILocation(line: 4139, column: 1, scope: !7954)
!7959 = !DILocalVariable(name: "obj_", arg: 2, scope: !7954, file: !3, line: 4139, type: !3147)
!7960 = !DILocalVariable(name: "slot_", scope: !7954, file: !3, line: 4139, type: !7303)
!7961 = !DILocation(line: 4139, column: 1, scope: !7962)
!7962 = distinct !DILexicalBlock(scope: !7954, file: !3, line: 4139, column: 1)
!7963 = distinct !DISubprogram(name: "VEC_fieldoff_s_base_space", scope: !3, file: !3, line: 4139, type: !7964, scopeLine: 4139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7964 = !DISubroutineType(types: !7965)
!7965 = !{!1730, !7820, !1730}
!7966 = !DILocalVariable(name: "vec_", arg: 1, scope: !7963, file: !3, line: 4139, type: !7820)
!7967 = !DILocation(line: 4139, column: 1, scope: !7963)
!7968 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7963, file: !3, line: 4139, type: !1730)
!7969 = distinct !DISubprogram(name: "VEC_fieldoff_s_base_address", scope: !3, file: !3, line: 4139, type: !7934, scopeLine: 4139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7970 = !DILocalVariable(name: "vec_", arg: 1, scope: !7969, file: !3, line: 4139, type: !7820)
!7971 = !DILocation(line: 4139, column: 1, scope: !7969)
!7972 = distinct !DISubprogram(name: "fieldoff_compare", scope: !3, file: !3, line: 4145, type: !2579, scopeLine: 4146, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!7973 = !DILocalVariable(name: "pa", arg: 1, scope: !7972, file: !3, line: 4145, type: !2407)
!7974 = !DILocation(line: 4145, column: 31, scope: !7972)
!7975 = !DILocalVariable(name: "pb", arg: 2, scope: !7972, file: !3, line: 4145, type: !2407)
!7976 = !DILocation(line: 4145, column: 47, scope: !7972)
!7977 = !DILocalVariable(name: "foa", scope: !7972, file: !3, line: 4147, type: !3147)
!7978 = !DILocation(line: 4147, column: 21, scope: !7972)
!7979 = !DILocation(line: 4147, column: 47, scope: !7972)
!7980 = !DILocation(line: 4147, column: 27, scope: !7972)
!7981 = !DILocalVariable(name: "fob", scope: !7972, file: !3, line: 4148, type: !3147)
!7982 = !DILocation(line: 4148, column: 21, scope: !7972)
!7983 = !DILocation(line: 4148, column: 47, scope: !7972)
!7984 = !DILocation(line: 4148, column: 27, scope: !7972)
!7985 = !DILocalVariable(name: "foasize", scope: !7972, file: !3, line: 4149, type: !1729)
!7986 = !DILocation(line: 4149, column: 26, scope: !7972)
!7987 = !DILocalVariable(name: "fobsize", scope: !7972, file: !3, line: 4149, type: !1729)
!7988 = !DILocation(line: 4149, column: 35, scope: !7972)
!7989 = !DILocation(line: 4151, column: 7, scope: !7990)
!7990 = distinct !DILexicalBlock(scope: !7972, file: !3, line: 4151, column: 7)
!7991 = !DILocation(line: 4151, column: 12, scope: !7990)
!7992 = !DILocation(line: 4151, column: 21, scope: !7990)
!7993 = !DILocation(line: 4151, column: 26, scope: !7990)
!7994 = !DILocation(line: 4151, column: 19, scope: !7990)
!7995 = !DILocation(line: 4151, column: 7, scope: !7972)
!7996 = !DILocation(line: 4152, column: 5, scope: !7990)
!7997 = !DILocation(line: 4153, column: 12, scope: !7998)
!7998 = distinct !DILexicalBlock(scope: !7990, file: !3, line: 4153, column: 12)
!7999 = !DILocation(line: 4153, column: 17, scope: !7998)
!8000 = !DILocation(line: 4153, column: 26, scope: !7998)
!8001 = !DILocation(line: 4153, column: 31, scope: !7998)
!8002 = !DILocation(line: 4153, column: 24, scope: !7998)
!8003 = !DILocation(line: 4153, column: 12, scope: !7990)
!8004 = !DILocation(line: 4154, column: 5, scope: !7998)
!8005 = !DILocation(line: 4156, column: 13, scope: !7972)
!8006 = !DILocation(line: 4156, column: 18, scope: !7972)
!8007 = !DILocation(line: 4156, column: 11, scope: !7972)
!8008 = !DILocation(line: 4157, column: 13, scope: !7972)
!8009 = !DILocation(line: 4157, column: 18, scope: !7972)
!8010 = !DILocation(line: 4157, column: 11, scope: !7972)
!8011 = !DILocation(line: 4158, column: 7, scope: !8012)
!8012 = distinct !DILexicalBlock(scope: !7972, file: !3, line: 4158, column: 7)
!8013 = !DILocation(line: 4158, column: 17, scope: !8012)
!8014 = !DILocation(line: 4158, column: 15, scope: !8012)
!8015 = !DILocation(line: 4158, column: 7, scope: !7972)
!8016 = !DILocation(line: 4159, column: 5, scope: !8012)
!8017 = !DILocation(line: 4160, column: 12, scope: !8018)
!8018 = distinct !DILexicalBlock(scope: !8012, file: !3, line: 4160, column: 12)
!8019 = !DILocation(line: 4160, column: 22, scope: !8018)
!8020 = !DILocation(line: 4160, column: 20, scope: !8018)
!8021 = !DILocation(line: 4160, column: 12, scope: !8012)
!8022 = !DILocation(line: 4161, column: 5, scope: !8018)
!8023 = !DILocation(line: 4162, column: 3, scope: !7972)
!8024 = !DILocation(line: 4163, column: 1, scope: !7972)
!8025 = distinct !DISubprogram(name: "make_constraint_from_heapvar", scope: !3, file: !3, line: 3383, type: !8026, scopeLine: 3384, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8026 = !DISubroutineType(types: !8027)
!8027 = !{!1758, !1758, !1776}
!8028 = !DILocalVariable(name: "lhs", arg: 1, scope: !8025, file: !3, line: 3383, type: !1758)
!8029 = !DILocation(line: 3383, column: 41, scope: !8025)
!8030 = !DILocalVariable(name: "name", arg: 2, scope: !8025, file: !3, line: 3383, type: !1776)
!8031 = !DILocation(line: 3383, column: 58, scope: !8025)
!8032 = !DILocalVariable(name: "vi", scope: !8025, file: !3, line: 3385, type: !1758)
!8033 = !DILocation(line: 3385, column: 13, scope: !8025)
!8034 = !DILocalVariable(name: "heapvar", scope: !8025, file: !3, line: 3386, type: !1780)
!8035 = !DILocation(line: 3386, column: 8, scope: !8025)
!8036 = !DILocation(line: 3386, column: 34, scope: !8025)
!8037 = !DILocation(line: 3386, column: 39, scope: !8025)
!8038 = !DILocation(line: 3386, column: 45, scope: !8025)
!8039 = !DILocation(line: 3386, column: 50, scope: !8025)
!8040 = !DILocation(line: 3386, column: 18, scope: !8025)
!8041 = !DILocation(line: 3388, column: 7, scope: !8042)
!8042 = distinct !DILexicalBlock(scope: !8025, file: !3, line: 3388, column: 7)
!8043 = !DILocation(line: 3388, column: 15, scope: !8042)
!8044 = !DILocation(line: 3388, column: 7, scope: !8025)
!8045 = !DILocalVariable(name: "ann", scope: !8046, file: !3, line: 3390, type: !5115)
!8046 = distinct !DILexicalBlock(scope: !8042, file: !3, line: 3389, column: 5)
!8047 = !DILocation(line: 3390, column: 17, scope: !8046)
!8048 = !DILocation(line: 3391, column: 37, scope: !8046)
!8049 = !DILocation(line: 3391, column: 52, scope: !8046)
!8050 = !DILocation(line: 3391, column: 17, scope: !8046)
!8051 = !DILocation(line: 3391, column: 15, scope: !8046)
!8052 = !DILocation(line: 3392, column: 7, scope: !8046)
!8053 = !DILocation(line: 3392, column: 31, scope: !8046)
!8054 = !DILocation(line: 3394, column: 23, scope: !8046)
!8055 = !DILocation(line: 3394, column: 28, scope: !8046)
!8056 = !DILocation(line: 3394, column: 34, scope: !8046)
!8057 = !DILocation(line: 3394, column: 39, scope: !8046)
!8058 = !DILocation(line: 3394, column: 47, scope: !8046)
!8059 = !DILocation(line: 3394, column: 7, scope: !8046)
!8060 = !DILocation(line: 3396, column: 26, scope: !8046)
!8061 = !DILocation(line: 3396, column: 13, scope: !8046)
!8062 = !DILocation(line: 3396, column: 11, scope: !8046)
!8063 = !DILocation(line: 3397, column: 7, scope: !8046)
!8064 = !DILocation(line: 3397, column: 12, scope: !8046)
!8065 = !DILocation(line: 3397, column: 23, scope: !8046)
!8066 = !DILocation(line: 3398, column: 5, scope: !8046)
!8067 = !DILocation(line: 3402, column: 31, scope: !8068)
!8068 = distinct !DILexicalBlock(scope: !8025, file: !3, line: 3402, column: 7)
!8069 = !DILocation(line: 3402, column: 7, scope: !8068)
!8070 = !DILocation(line: 3402, column: 7, scope: !8025)
!8071 = !DILocation(line: 3403, column: 25, scope: !8068)
!8072 = !DILocation(line: 3403, column: 5, scope: !8068)
!8073 = !DILocation(line: 3405, column: 22, scope: !8025)
!8074 = !DILocation(line: 3405, column: 31, scope: !8025)
!8075 = !DILocation(line: 3405, column: 8, scope: !8025)
!8076 = !DILocation(line: 3405, column: 6, scope: !8025)
!8077 = !DILocation(line: 3406, column: 3, scope: !8025)
!8078 = !DILocation(line: 3406, column: 7, scope: !8025)
!8079 = !DILocation(line: 3406, column: 25, scope: !8025)
!8080 = !DILocation(line: 3407, column: 3, scope: !8025)
!8081 = !DILocation(line: 3407, column: 7, scope: !8025)
!8082 = !DILocation(line: 3407, column: 19, scope: !8025)
!8083 = !DILocation(line: 3408, column: 3, scope: !8025)
!8084 = !DILocation(line: 3408, column: 7, scope: !8025)
!8085 = !DILocation(line: 3408, column: 27, scope: !8025)
!8086 = !DILocation(line: 3409, column: 3, scope: !8025)
!8087 = !DILocation(line: 3409, column: 7, scope: !8025)
!8088 = !DILocation(line: 3409, column: 14, scope: !8025)
!8089 = !DILocation(line: 3410, column: 3, scope: !8025)
!8090 = !DILocation(line: 3410, column: 7, scope: !8025)
!8091 = !DILocation(line: 3410, column: 16, scope: !8025)
!8092 = !DILocation(line: 3411, column: 3, scope: !8025)
!8093 = !DILocation(line: 3411, column: 7, scope: !8025)
!8094 = !DILocation(line: 3411, column: 12, scope: !8025)
!8095 = !DILocation(line: 3412, column: 3, scope: !8025)
!8096 = !DILocation(line: 3412, column: 7, scope: !8025)
!8097 = !DILocation(line: 3412, column: 19, scope: !8025)
!8098 = !DILocation(line: 3413, column: 23, scope: !8025)
!8099 = !DILocation(line: 3413, column: 32, scope: !8025)
!8100 = !DILocation(line: 3413, column: 3, scope: !8025)
!8101 = !DILocation(line: 3415, column: 25, scope: !8025)
!8102 = !DILocation(line: 3415, column: 30, scope: !8025)
!8103 = !DILocation(line: 3415, column: 34, scope: !8025)
!8104 = !DILocation(line: 3415, column: 3, scope: !8025)
!8105 = !DILocation(line: 3417, column: 10, scope: !8025)
!8106 = !DILocation(line: 3417, column: 3, scope: !8025)
!8107 = distinct !DISubprogram(name: "gimple_code", scope: !851, file: !851, line: 1052, type: !8108, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8108 = !DISubroutineType(types: !8109)
!8109 = !{!850, !5275}
!8110 = !DILocalVariable(name: "g", arg: 1, scope: !8107, file: !851, line: 1052, type: !5275)
!8111 = !DILocation(line: 1052, column: 27, scope: !8107)
!8112 = !DILocation(line: 1054, column: 10, scope: !8107)
!8113 = !DILocation(line: 1054, column: 13, scope: !8107)
!8114 = !DILocation(line: 1054, column: 20, scope: !8107)
!8115 = !DILocation(line: 1054, column: 3, scope: !8107)
!8116 = distinct !DISubprogram(name: "get_constraint_for", scope: !3, file: !3, line: 3227, type: !8117, scopeLine: 3228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8117 = !DISubroutineType(types: !8118)
!8118 = !{null, !1780, !8119}
!8119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3154, size: 64)
!8120 = !DILocalVariable(name: "t", arg: 1, scope: !8116, file: !3, line: 3227, type: !1780)
!8121 = !DILocation(line: 3227, column: 26, scope: !8116)
!8122 = !DILocalVariable(name: "results", arg: 2, scope: !8116, file: !3, line: 3227, type: !8119)
!8123 = !DILocation(line: 3227, column: 48, scope: !8116)
!8124 = !DILocation(line: 3229, column: 3, scope: !8116)
!8125 = !DILocation(line: 3231, column: 25, scope: !8116)
!8126 = !DILocation(line: 3231, column: 28, scope: !8116)
!8127 = !DILocation(line: 3231, column: 3, scope: !8116)
!8128 = !DILocation(line: 3232, column: 1, scope: !8116)
!8129 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !851, file: !851, line: 3061, type: !8130, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8130 = !DISubroutineType(types: !8131)
!8131 = !{!6, !5275}
!8132 = !DILocalVariable(name: "gs", arg: 1, scope: !8129, file: !851, line: 3061, type: !5275)
!8133 = !DILocation(line: 3061, column: 35, scope: !8129)
!8134 = !DILocation(line: 3064, column: 10, scope: !8129)
!8135 = !DILocation(line: 3064, column: 14, scope: !8129)
!8136 = !DILocation(line: 3064, column: 25, scope: !8129)
!8137 = !DILocation(line: 3064, column: 3, scope: !8129)
!8138 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3987, file: !3987, line: 427, type: !8139, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8139 = !DISubroutineType(types: !8140)
!8140 = !{!1780, !8141}
!8141 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !2133, line: 30, baseType: !8142)
!8142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8143, size: 64)
!8143 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !140, line: 1893, baseType: !2144)
!8144 = !DILocalVariable(name: "use", arg: 1, scope: !8138, file: !3987, line: 427, type: !8141)
!8145 = !DILocation(line: 427, column: 33, scope: !8138)
!8146 = !DILocation(line: 429, column: 12, scope: !8138)
!8147 = !DILocation(line: 429, column: 17, scope: !8138)
!8148 = !DILocation(line: 429, column: 10, scope: !8138)
!8149 = !DILocation(line: 429, column: 3, scope: !8138)
!8150 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3987, file: !3987, line: 442, type: !8151, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8151 = !DISubroutineType(types: !8152)
!8152 = !{!8141, !2102, !1730}
!8153 = !DILocalVariable(name: "gs", arg: 1, scope: !8150, file: !3987, line: 442, type: !2102)
!8154 = !DILocation(line: 442, column: 36, scope: !8150)
!8155 = !DILocalVariable(name: "i", arg: 2, scope: !8150, file: !3987, line: 442, type: !1730)
!8156 = !DILocation(line: 442, column: 44, scope: !8150)
!8157 = !DILocation(line: 444, column: 27, scope: !8150)
!8158 = !DILocation(line: 444, column: 31, scope: !8150)
!8159 = !DILocation(line: 444, column: 11, scope: !8150)
!8160 = !DILocation(line: 444, column: 35, scope: !8150)
!8161 = !DILocation(line: 444, column: 3, scope: !8150)
!8162 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !3987, file: !3987, line: 450, type: !8163, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8163 = !DISubroutineType(types: !8164)
!8164 = !{!1780, !2102, !1727}
!8165 = !DILocalVariable(name: "gs", arg: 1, scope: !8162, file: !3987, line: 450, type: !2102)
!8166 = !DILocation(line: 450, column: 28, scope: !8162)
!8167 = !DILocalVariable(name: "index", arg: 2, scope: !8162, file: !3987, line: 450, type: !1727)
!8168 = !DILocation(line: 450, column: 39, scope: !8162)
!8169 = !DILocalVariable(name: "pd", scope: !8162, file: !3987, line: 452, type: !8170)
!8170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2206, size: 64)
!8171 = !DILocation(line: 452, column: 21, scope: !8162)
!8172 = !DILocation(line: 452, column: 42, scope: !8162)
!8173 = !DILocation(line: 452, column: 46, scope: !8162)
!8174 = !DILocation(line: 452, column: 26, scope: !8162)
!8175 = !DILocation(line: 453, column: 29, scope: !8162)
!8176 = !DILocation(line: 453, column: 33, scope: !8162)
!8177 = !DILocation(line: 453, column: 10, scope: !8162)
!8178 = !DILocation(line: 453, column: 3, scope: !8162)
!8179 = distinct !DISubprogram(name: "VEC_ce_s_base_iterate", scope: !3, file: !3, line: 406, type: !8180, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8180 = !DISubroutineType(types: !8181)
!8181 = !{!1730, !8182, !6, !8183}
!8182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3159, size: 64)
!8183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5456, size: 64)
!8184 = !DILocalVariable(name: "vec_", arg: 1, scope: !8179, file: !3, line: 406, type: !8182)
!8185 = !DILocation(line: 406, column: 1, scope: !8179)
!8186 = !DILocalVariable(name: "ix_", arg: 2, scope: !8179, file: !3, line: 406, type: !6)
!8187 = !DILocalVariable(name: "ptr", arg: 3, scope: !8179, file: !3, line: 406, type: !8183)
!8188 = !DILocation(line: 406, column: 1, scope: !8189)
!8189 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 406, column: 1)
!8190 = !DILocation(line: 406, column: 1, scope: !8191)
!8191 = distinct !DILexicalBlock(scope: !8189, file: !3, line: 406, column: 1)
!8192 = !DILocation(line: 406, column: 1, scope: !8193)
!8193 = distinct !DILexicalBlock(scope: !8189, file: !3, line: 406, column: 1)
!8194 = distinct !DISubprogram(name: "VEC_ce_s_base_length", scope: !3, file: !3, line: 406, type: !8195, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8195 = !DISubroutineType(types: !8196)
!8196 = !{!6, !8197}
!8197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8198, size: 64)
!8198 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3159)
!8199 = !DILocalVariable(name: "vec_", arg: 1, scope: !8194, file: !3, line: 406, type: !8197)
!8200 = !DILocation(line: 406, column: 1, scope: !8194)
!8201 = distinct !DISubprogram(name: "VEC_ce_s_base_last", scope: !3, file: !3, line: 406, type: !8202, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8202 = !DISubroutineType(types: !8203)
!8203 = !{!5456, !8182}
!8204 = !DILocalVariable(name: "vec_", arg: 1, scope: !8201, file: !3, line: 406, type: !8182)
!8205 = !DILocation(line: 406, column: 1, scope: !8201)
!8206 = !DILocation(line: 0, scope: !8201)
!8207 = distinct !DISubprogram(name: "VEC_ce_s_base_pop", scope: !3, file: !3, line: 406, type: !8208, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8208 = !DISubroutineType(types: !8209)
!8209 = !{null, !8182}
!8210 = !DILocalVariable(name: "vec_", arg: 1, scope: !8207, file: !3, line: 406, type: !8182)
!8211 = !DILocation(line: 406, column: 1, scope: !8207)
!8212 = distinct !DISubprogram(name: "is_gimple_call", scope: !851, file: !851, line: 1870, type: !8213, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8213 = !DISubroutineType(types: !8214)
!8214 = !{!1894, !5275}
!8215 = !DILocalVariable(name: "gs", arg: 1, scope: !8212, file: !851, line: 1870, type: !5275)
!8216 = !DILocation(line: 1870, column: 30, scope: !8212)
!8217 = !DILocation(line: 1872, column: 23, scope: !8212)
!8218 = !DILocation(line: 1872, column: 10, scope: !8212)
!8219 = !DILocation(line: 1872, column: 27, scope: !8212)
!8220 = !DILocation(line: 1872, column: 3, scope: !8212)
!8221 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !851, file: !851, line: 1954, type: !5273, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8222 = !DILocalVariable(name: "gs", arg: 1, scope: !8221, file: !851, line: 1954, type: !5275)
!8223 = !DILocation(line: 1954, column: 34, scope: !8221)
!8224 = !DILocalVariable(name: "addr", scope: !8221, file: !851, line: 1956, type: !1780)
!8225 = !DILocation(line: 1956, column: 8, scope: !8221)
!8226 = !DILocation(line: 1956, column: 31, scope: !8221)
!8227 = !DILocation(line: 1956, column: 15, scope: !8221)
!8228 = !DILocation(line: 1957, column: 7, scope: !8229)
!8229 = distinct !DILexicalBlock(scope: !8221, file: !851, line: 1957, column: 7)
!8230 = !DILocation(line: 1957, column: 24, scope: !8229)
!8231 = !DILocation(line: 1957, column: 7, scope: !8221)
!8232 = !DILocation(line: 1958, column: 12, scope: !8229)
!8233 = !DILocation(line: 1958, column: 5, scope: !8229)
!8234 = !DILocation(line: 1959, column: 3, scope: !8221)
!8235 = !DILocation(line: 1960, column: 1, scope: !8221)
!8236 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !851, file: !851, line: 1878, type: !5273, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8237 = !DILocalVariable(name: "gs", arg: 1, scope: !8236, file: !851, line: 1878, type: !5275)
!8238 = !DILocation(line: 1878, column: 31, scope: !8236)
!8239 = !DILocation(line: 1881, column: 21, scope: !8236)
!8240 = !DILocation(line: 1881, column: 10, scope: !8236)
!8241 = !DILocation(line: 1881, column: 3, scope: !8236)
!8242 = distinct !DISubprogram(name: "gimple_call_arg", scope: !851, file: !851, line: 2025, type: !8243, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8243 = !DISubroutineType(types: !8244)
!8244 = !{!1780, !5275, !6}
!8245 = !DILocalVariable(name: "gs", arg: 1, scope: !8242, file: !851, line: 2025, type: !5275)
!8246 = !DILocation(line: 2025, column: 31, scope: !8242)
!8247 = !DILocalVariable(name: "index", arg: 2, scope: !8242, file: !851, line: 2025, type: !6)
!8248 = !DILocation(line: 2025, column: 44, scope: !8242)
!8249 = !DILocation(line: 2028, column: 21, scope: !8242)
!8250 = !DILocation(line: 2028, column: 25, scope: !8242)
!8251 = !DILocation(line: 2028, column: 31, scope: !8242)
!8252 = !DILocation(line: 2028, column: 10, scope: !8242)
!8253 = !DILocation(line: 2028, column: 3, scope: !8242)
!8254 = distinct !DISubprogram(name: "get_constraint_for_ptr_offset", scope: !3, file: !3, line: 2829, type: !8255, scopeLine: 2831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8255 = !DISubroutineType(types: !8256)
!8256 = !{null, !1780, !1780, !8119}
!8257 = !DILocalVariable(name: "ptr", arg: 1, scope: !8254, file: !3, line: 2829, type: !1780)
!8258 = !DILocation(line: 2829, column: 37, scope: !8254)
!8259 = !DILocalVariable(name: "offset", arg: 2, scope: !8254, file: !3, line: 2829, type: !1780)
!8260 = !DILocation(line: 2829, column: 47, scope: !8254)
!8261 = !DILocalVariable(name: "results", arg: 3, scope: !8254, file: !3, line: 2830, type: !8119)
!8262 = !DILocation(line: 2830, column: 30, scope: !8254)
!8263 = !DILocalVariable(name: "c", scope: !8254, file: !3, line: 2832, type: !1720)
!8264 = !DILocation(line: 2832, column: 26, scope: !8254)
!8265 = !DILocalVariable(name: "j", scope: !8254, file: !3, line: 2833, type: !6)
!8266 = !DILocation(line: 2833, column: 16, scope: !8254)
!8267 = !DILocalVariable(name: "n", scope: !8254, file: !3, line: 2833, type: !6)
!8268 = !DILocation(line: 2833, column: 19, scope: !8254)
!8269 = !DILocalVariable(name: "rhsunitoffset", scope: !8254, file: !3, line: 2834, type: !1714)
!8270 = !DILocation(line: 2834, column: 17, scope: !8254)
!8271 = !DILocalVariable(name: "rhsoffset", scope: !8254, file: !3, line: 2834, type: !1714)
!8272 = !DILocation(line: 2834, column: 32, scope: !8254)
!8273 = !DILocation(line: 2838, column: 8, scope: !8274)
!8274 = distinct !DILexicalBlock(scope: !8254, file: !3, line: 2838, column: 7)
!8275 = !DILocation(line: 2838, column: 7, scope: !8254)
!8276 = !DILocation(line: 2840, column: 27, scope: !8277)
!8277 = distinct !DILexicalBlock(scope: !8274, file: !3, line: 2839, column: 5)
!8278 = !DILocation(line: 2840, column: 32, scope: !8277)
!8279 = !DILocation(line: 2840, column: 7, scope: !8277)
!8280 = !DILocation(line: 2841, column: 7, scope: !8277)
!8281 = !DILocation(line: 2848, column: 7, scope: !8282)
!8282 = distinct !DILexicalBlock(scope: !8254, file: !3, line: 2848, column: 7)
!8283 = !DILocation(line: 2848, column: 14, scope: !8282)
!8284 = !DILocation(line: 2849, column: 7, scope: !8282)
!8285 = !DILocation(line: 2849, column: 26, scope: !8282)
!8286 = !DILocation(line: 2849, column: 11, scope: !8282)
!8287 = !DILocation(line: 2848, column: 7, scope: !8254)
!8288 = !DILocation(line: 2850, column: 15, scope: !8282)
!8289 = !DILocation(line: 2850, column: 5, scope: !8282)
!8290 = !DILocation(line: 2854, column: 23, scope: !8291)
!8291 = distinct !DILexicalBlock(scope: !8282, file: !3, line: 2852, column: 5)
!8292 = !DILocation(line: 2854, column: 21, scope: !8291)
!8293 = !DILocation(line: 2855, column: 19, scope: !8291)
!8294 = !DILocation(line: 2855, column: 33, scope: !8291)
!8295 = !DILocation(line: 2855, column: 17, scope: !8291)
!8296 = !DILocation(line: 2856, column: 11, scope: !8297)
!8297 = distinct !DILexicalBlock(scope: !8291, file: !3, line: 2856, column: 11)
!8298 = !DILocation(line: 2856, column: 28, scope: !8297)
!8299 = !DILocation(line: 2856, column: 38, scope: !8297)
!8300 = !DILocation(line: 2856, column: 25, scope: !8297)
!8301 = !DILocation(line: 2856, column: 11, scope: !8291)
!8302 = !DILocation(line: 2857, column: 12, scope: !8297)
!8303 = !DILocation(line: 2857, column: 2, scope: !8297)
!8304 = !DILocation(line: 2860, column: 23, scope: !8254)
!8305 = !DILocation(line: 2860, column: 28, scope: !8254)
!8306 = !DILocation(line: 2860, column: 3, scope: !8254)
!8307 = !DILocation(line: 2861, column: 7, scope: !8308)
!8308 = distinct !DILexicalBlock(scope: !8254, file: !3, line: 2861, column: 7)
!8309 = !DILocation(line: 2861, column: 17, scope: !8308)
!8310 = !DILocation(line: 2861, column: 7, scope: !8254)
!8311 = !DILocation(line: 2862, column: 5, scope: !8308)
!8312 = !DILocation(line: 2866, column: 7, scope: !8254)
!8313 = !DILocation(line: 2866, column: 5, scope: !8254)
!8314 = !DILocation(line: 2867, column: 10, scope: !8315)
!8315 = distinct !DILexicalBlock(scope: !8254, file: !3, line: 2867, column: 3)
!8316 = !DILocation(line: 2867, column: 8, scope: !8315)
!8317 = !DILocation(line: 2867, column: 15, scope: !8318)
!8318 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2867, column: 3)
!8319 = !DILocation(line: 2867, column: 19, scope: !8318)
!8320 = !DILocation(line: 2867, column: 17, scope: !8318)
!8321 = !DILocation(line: 2867, column: 3, scope: !8315)
!8322 = !DILocalVariable(name: "curr", scope: !8323, file: !3, line: 2869, type: !1758)
!8323 = distinct !DILexicalBlock(scope: !8318, file: !3, line: 2868, column: 5)
!8324 = !DILocation(line: 2869, column: 17, scope: !8323)
!8325 = !DILocation(line: 2870, column: 12, scope: !8323)
!8326 = !DILocation(line: 2870, column: 11, scope: !8323)
!8327 = !DILocation(line: 2871, column: 29, scope: !8323)
!8328 = !DILocation(line: 2871, column: 14, scope: !8323)
!8329 = !DILocation(line: 2871, column: 12, scope: !8323)
!8330 = !DILocation(line: 2873, column: 13, scope: !8331)
!8331 = distinct !DILexicalBlock(scope: !8323, file: !3, line: 2873, column: 11)
!8332 = !DILocation(line: 2873, column: 18, scope: !8331)
!8333 = !DILocation(line: 2875, column: 4, scope: !8331)
!8334 = !DILocation(line: 2875, column: 7, scope: !8331)
!8335 = !DILocation(line: 2875, column: 13, scope: !8331)
!8336 = !DILocation(line: 2873, column: 11, scope: !8323)
!8337 = !DILocation(line: 2876, column: 4, scope: !8331)
!8338 = !DILocation(line: 2876, column: 11, scope: !8331)
!8339 = !DILocation(line: 2876, column: 2, scope: !8331)
!8340 = !DILocation(line: 2877, column: 18, scope: !8341)
!8341 = distinct !DILexicalBlock(scope: !8331, file: !3, line: 2877, column: 16)
!8342 = !DILocation(line: 2877, column: 23, scope: !8341)
!8343 = !DILocation(line: 2879, column: 9, scope: !8341)
!8344 = !DILocation(line: 2879, column: 12, scope: !8341)
!8345 = !DILocation(line: 2879, column: 22, scope: !8341)
!8346 = !DILocation(line: 2877, column: 16, scope: !8331)
!8347 = !DILocalVariable(name: "temp", scope: !8348, file: !3, line: 2881, type: !1758)
!8348 = distinct !DILexicalBlock(scope: !8341, file: !3, line: 2880, column: 2)
!8349 = !DILocation(line: 2881, column: 14, scope: !8348)
!8350 = !DILocation(line: 2881, column: 41, scope: !8348)
!8351 = !DILocation(line: 2881, column: 47, scope: !8348)
!8352 = !DILocation(line: 2881, column: 21, scope: !8348)
!8353 = !DILocation(line: 2882, column: 4, scope: !8348)
!8354 = !DILocalVariable(name: "c2", scope: !8355, file: !3, line: 2884, type: !1720)
!8355 = distinct !DILexicalBlock(scope: !8348, file: !3, line: 2883, column: 6)
!8356 = !DILocation(line: 2884, column: 31, scope: !8355)
!8357 = !DILocation(line: 2885, column: 17, scope: !8355)
!8358 = !DILocation(line: 2885, column: 23, scope: !8355)
!8359 = !DILocation(line: 2885, column: 11, scope: !8355)
!8360 = !DILocation(line: 2885, column: 15, scope: !8355)
!8361 = !DILocation(line: 2886, column: 11, scope: !8355)
!8362 = !DILocation(line: 2886, column: 16, scope: !8355)
!8363 = !DILocation(line: 2887, column: 11, scope: !8355)
!8364 = !DILocation(line: 2887, column: 18, scope: !8355)
!8365 = !DILocation(line: 2888, column: 15, scope: !8366)
!8366 = distinct !DILexicalBlock(scope: !8355, file: !3, line: 2888, column: 12)
!8367 = !DILocation(line: 2888, column: 24, scope: !8366)
!8368 = !DILocation(line: 2888, column: 19, scope: !8366)
!8369 = !DILocation(line: 2888, column: 12, scope: !8355)
!8370 = !DILocation(line: 2889, column: 3, scope: !8366)
!8371 = !DILocation(line: 2890, column: 15, scope: !8355)
!8372 = !DILocation(line: 2890, column: 21, scope: !8355)
!8373 = !DILocation(line: 2890, column: 13, scope: !8355)
!8374 = !DILocation(line: 2891, column: 6, scope: !8355)
!8375 = !DILocation(line: 2892, column: 11, scope: !8348)
!8376 = distinct !{!8376, !8353, !8377}
!8377 = !DILocation(line: 2892, column: 15, scope: !8348)
!8378 = !DILocation(line: 2893, column: 2, scope: !8348)
!8379 = !DILocation(line: 2894, column: 18, scope: !8380)
!8380 = distinct !DILexicalBlock(scope: !8341, file: !3, line: 2894, column: 16)
!8381 = !DILocation(line: 2894, column: 23, scope: !8380)
!8382 = !DILocation(line: 2894, column: 16, scope: !8341)
!8383 = !DILocalVariable(name: "temp", scope: !8384, file: !3, line: 2896, type: !1758)
!8384 = distinct !DILexicalBlock(scope: !8380, file: !3, line: 2895, column: 2)
!8385 = !DILocation(line: 2896, column: 14, scope: !8384)
!8386 = !DILocalVariable(name: "offset", scope: !8384, file: !3, line: 2897, type: !1729)
!8387 = !DILocation(line: 2897, column: 27, scope: !8384)
!8388 = !DILocation(line: 2897, column: 36, scope: !8384)
!8389 = !DILocation(line: 2897, column: 42, scope: !8384)
!8390 = !DILocation(line: 2897, column: 51, scope: !8384)
!8391 = !DILocation(line: 2897, column: 49, scope: !8384)
!8392 = !DILocation(line: 2907, column: 8, scope: !8393)
!8393 = distinct !DILexicalBlock(scope: !8384, file: !3, line: 2907, column: 8)
!8394 = !DILocation(line: 2907, column: 18, scope: !8393)
!8395 = !DILocation(line: 2908, column: 8, scope: !8393)
!8396 = !DILocation(line: 2908, column: 11, scope: !8393)
!8397 = !DILocation(line: 2908, column: 17, scope: !8393)
!8398 = !DILocation(line: 2908, column: 26, scope: !8393)
!8399 = !DILocation(line: 2908, column: 24, scope: !8393)
!8400 = !DILocation(line: 2907, column: 8, scope: !8384)
!8401 = !DILocation(line: 2909, column: 13, scope: !8393)
!8402 = !DILocation(line: 2909, column: 6, scope: !8393)
!8403 = !DILocation(line: 2910, column: 45, scope: !8384)
!8404 = !DILocation(line: 2910, column: 51, scope: !8384)
!8405 = !DILocation(line: 2910, column: 11, scope: !8384)
!8406 = !DILocation(line: 2910, column: 9, scope: !8384)
!8407 = !DILocation(line: 2917, column: 8, scope: !8408)
!8408 = distinct !DILexicalBlock(scope: !8384, file: !3, line: 2917, column: 8)
!8409 = !DILocation(line: 2917, column: 14, scope: !8408)
!8410 = !DILocation(line: 2917, column: 24, scope: !8408)
!8411 = !DILocation(line: 2917, column: 21, scope: !8408)
!8412 = !DILocation(line: 2918, column: 8, scope: !8408)
!8413 = !DILocation(line: 2918, column: 11, scope: !8408)
!8414 = !DILocation(line: 2918, column: 17, scope: !8408)
!8415 = !DILocation(line: 2918, column: 22, scope: !8408)
!8416 = !DILocation(line: 2917, column: 8, scope: !8384)
!8417 = !DILocalVariable(name: "c2", scope: !8418, file: !3, line: 2920, type: !1720)
!8418 = distinct !DILexicalBlock(scope: !8408, file: !3, line: 2919, column: 6)
!8419 = !DILocation(line: 2920, column: 31, scope: !8418)
!8420 = !DILocation(line: 2921, column: 17, scope: !8418)
!8421 = !DILocation(line: 2921, column: 23, scope: !8418)
!8422 = !DILocation(line: 2921, column: 29, scope: !8418)
!8423 = !DILocation(line: 2921, column: 11, scope: !8418)
!8424 = !DILocation(line: 2921, column: 15, scope: !8418)
!8425 = !DILocation(line: 2922, column: 11, scope: !8418)
!8426 = !DILocation(line: 2922, column: 16, scope: !8418)
!8427 = !DILocation(line: 2923, column: 11, scope: !8418)
!8428 = !DILocation(line: 2923, column: 18, scope: !8418)
!8429 = !DILocation(line: 2924, column: 8, scope: !8418)
!8430 = !DILocation(line: 2925, column: 6, scope: !8418)
!8431 = !DILocation(line: 2926, column: 12, scope: !8384)
!8432 = !DILocation(line: 2926, column: 18, scope: !8384)
!8433 = !DILocation(line: 2926, column: 6, scope: !8384)
!8434 = !DILocation(line: 2926, column: 10, scope: !8384)
!8435 = !DILocation(line: 2927, column: 6, scope: !8384)
!8436 = !DILocation(line: 2927, column: 13, scope: !8384)
!8437 = !DILocation(line: 2928, column: 2, scope: !8384)
!8438 = !DILocation(line: 2930, column: 13, scope: !8380)
!8439 = !DILocation(line: 2930, column: 4, scope: !8380)
!8440 = !DILocation(line: 2930, column: 11, scope: !8380)
!8441 = !DILocation(line: 2932, column: 7, scope: !8323)
!8442 = !DILocation(line: 2933, column: 5, scope: !8323)
!8443 = !DILocation(line: 2867, column: 23, scope: !8318)
!8444 = !DILocation(line: 2867, column: 3, scope: !8318)
!8445 = distinct !{!8445, !8321, !8446}
!8446 = !DILocation(line: 2933, column: 5, scope: !8315)
!8447 = !DILocation(line: 2934, column: 1, scope: !8254)
!8448 = distinct !DISubprogram(name: "process_all_all_constraints", scope: !3, file: !3, line: 3239, type: !8449, scopeLine: 3240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8449 = !DISubroutineType(types: !8450)
!8450 = !{null, !3154, !3154}
!8451 = !DILocalVariable(name: "lhsc", arg: 1, scope: !8448, file: !3, line: 3239, type: !3154)
!8452 = !DILocation(line: 3239, column: 48, scope: !8448)
!8453 = !DILocalVariable(name: "rhsc", arg: 2, scope: !8448, file: !3, line: 3239, type: !3154)
!8454 = !DILocation(line: 3239, column: 72, scope: !8448)
!8455 = !DILocalVariable(name: "lhsp", scope: !8448, file: !3, line: 3241, type: !5295)
!8456 = !DILocation(line: 3241, column: 27, scope: !8448)
!8457 = !DILocalVariable(name: "rhsp", scope: !8448, file: !3, line: 3241, type: !5295)
!8458 = !DILocation(line: 3241, column: 34, scope: !8448)
!8459 = !DILocalVariable(name: "i", scope: !8448, file: !3, line: 3242, type: !6)
!8460 = !DILocation(line: 3242, column: 12, scope: !8448)
!8461 = !DILocalVariable(name: "j", scope: !8448, file: !3, line: 3242, type: !6)
!8462 = !DILocation(line: 3242, column: 15, scope: !8448)
!8463 = !DILocation(line: 3244, column: 7, scope: !8464)
!8464 = distinct !DILexicalBlock(scope: !8448, file: !3, line: 3244, column: 7)
!8465 = !DILocation(line: 3244, column: 31, scope: !8464)
!8466 = !DILocation(line: 3245, column: 7, scope: !8464)
!8467 = !DILocation(line: 3245, column: 10, scope: !8464)
!8468 = !DILocation(line: 3245, column: 34, scope: !8464)
!8469 = !DILocation(line: 3244, column: 7, scope: !8448)
!8470 = !DILocation(line: 3247, column: 14, scope: !8471)
!8471 = distinct !DILexicalBlock(scope: !8472, file: !3, line: 3247, column: 7)
!8472 = distinct !DILexicalBlock(scope: !8464, file: !3, line: 3246, column: 5)
!8473 = !DILocation(line: 3247, column: 12, scope: !8471)
!8474 = !DILocation(line: 3247, column: 19, scope: !8475)
!8475 = distinct !DILexicalBlock(scope: !8471, file: !3, line: 3247, column: 7)
!8476 = !DILocation(line: 3247, column: 7, scope: !8471)
!8477 = !DILocation(line: 3248, column: 9, scope: !8478)
!8478 = distinct !DILexicalBlock(scope: !8475, file: !3, line: 3248, column: 2)
!8479 = !DILocation(line: 3248, column: 7, scope: !8478)
!8480 = !DILocation(line: 3248, column: 14, scope: !8481)
!8481 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 3248, column: 2)
!8482 = !DILocation(line: 3248, column: 2, scope: !8478)
!8483 = !DILocation(line: 3249, column: 41, scope: !8481)
!8484 = !DILocation(line: 3249, column: 48, scope: !8481)
!8485 = !DILocation(line: 3249, column: 24, scope: !8481)
!8486 = !DILocation(line: 3249, column: 4, scope: !8481)
!8487 = !DILocation(line: 3248, column: 49, scope: !8481)
!8488 = !DILocation(line: 3248, column: 2, scope: !8481)
!8489 = distinct !{!8489, !8482, !8490}
!8490 = !DILocation(line: 3249, column: 53, scope: !8478)
!8491 = !DILocation(line: 3247, column: 54, scope: !8475)
!8492 = !DILocation(line: 3247, column: 7, scope: !8475)
!8493 = distinct !{!8493, !8476, !8494}
!8494 = !DILocation(line: 3249, column: 53, scope: !8471)
!8495 = !DILocation(line: 3250, column: 5, scope: !8472)
!8496 = !DILocalVariable(name: "tmp", scope: !8497, file: !3, line: 3253, type: !1720)
!8497 = distinct !DILexicalBlock(scope: !8464, file: !3, line: 3252, column: 5)
!8498 = !DILocation(line: 3253, column: 30, scope: !8497)
!8499 = !DILocation(line: 3254, column: 13, scope: !8497)
!8500 = !DILocation(line: 3255, column: 14, scope: !8501)
!8501 = distinct !DILexicalBlock(scope: !8497, file: !3, line: 3255, column: 7)
!8502 = !DILocation(line: 3255, column: 12, scope: !8501)
!8503 = !DILocation(line: 3255, column: 19, scope: !8504)
!8504 = distinct !DILexicalBlock(scope: !8501, file: !3, line: 3255, column: 7)
!8505 = !DILocation(line: 3255, column: 7, scope: !8501)
!8506 = !DILocation(line: 3256, column: 44, scope: !8504)
!8507 = !DILocation(line: 3256, column: 22, scope: !8504)
!8508 = !DILocation(line: 3256, column: 2, scope: !8504)
!8509 = !DILocation(line: 3255, column: 54, scope: !8504)
!8510 = !DILocation(line: 3255, column: 7, scope: !8504)
!8511 = distinct !{!8511, !8505, !8512}
!8512 = !DILocation(line: 3256, column: 49, scope: !8501)
!8513 = !DILocation(line: 3257, column: 14, scope: !8514)
!8514 = distinct !DILexicalBlock(scope: !8497, file: !3, line: 3257, column: 7)
!8515 = !DILocation(line: 3257, column: 12, scope: !8514)
!8516 = !DILocation(line: 3257, column: 19, scope: !8517)
!8517 = distinct !DILexicalBlock(scope: !8514, file: !3, line: 3257, column: 7)
!8518 = !DILocation(line: 3257, column: 7, scope: !8514)
!8519 = !DILocation(line: 3258, column: 39, scope: !8517)
!8520 = !DILocation(line: 3258, column: 22, scope: !8517)
!8521 = !DILocation(line: 3258, column: 2, scope: !8517)
!8522 = !DILocation(line: 3257, column: 54, scope: !8517)
!8523 = !DILocation(line: 3257, column: 7, scope: !8517)
!8524 = distinct !{!8524, !8518, !8525}
!8525 = !DILocation(line: 3258, column: 49, scope: !8514)
!8526 = !DILocation(line: 3260, column: 1, scope: !8448)
!8527 = distinct !DISubprogram(name: "VEC_ce_s_heap_free", scope: !3, file: !3, line: 407, type: !8528, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8528 = !DISubroutineType(types: !8529)
!8529 = !{null, !8119}
!8530 = !DILocalVariable(name: "vec_", arg: 1, scope: !8527, file: !3, line: 407, type: !8119)
!8531 = !DILocation(line: 407, column: 1, scope: !8527)
!8532 = !DILocation(line: 407, column: 1, scope: !8533)
!8533 = distinct !DILexicalBlock(scope: !8527, file: !3, line: 407, column: 1)
!8534 = distinct !DISubprogram(name: "do_deref", scope: !3, file: !3, line: 3071, type: !8528, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8535 = !DILocalVariable(name: "constraints", arg: 1, scope: !8534, file: !3, line: 3071, type: !8119)
!8536 = !DILocation(line: 3071, column: 30, scope: !8534)
!8537 = !DILocalVariable(name: "c", scope: !8534, file: !3, line: 3073, type: !5295)
!8538 = !DILocation(line: 3073, column: 27, scope: !8534)
!8539 = !DILocalVariable(name: "i", scope: !8534, file: !3, line: 3074, type: !6)
!8540 = !DILocation(line: 3074, column: 16, scope: !8534)
!8541 = !DILocation(line: 3076, column: 10, scope: !8542)
!8542 = distinct !DILexicalBlock(scope: !8534, file: !3, line: 3076, column: 3)
!8543 = !DILocation(line: 3076, column: 8, scope: !8542)
!8544 = !DILocation(line: 3076, column: 15, scope: !8545)
!8545 = distinct !DILexicalBlock(scope: !8542, file: !3, line: 3076, column: 3)
!8546 = !DILocation(line: 3076, column: 3, scope: !8542)
!8547 = !DILocation(line: 3078, column: 11, scope: !8548)
!8548 = distinct !DILexicalBlock(scope: !8549, file: !3, line: 3078, column: 11)
!8549 = distinct !DILexicalBlock(scope: !8545, file: !3, line: 3077, column: 5)
!8550 = !DILocation(line: 3078, column: 14, scope: !8548)
!8551 = !DILocation(line: 3078, column: 19, scope: !8548)
!8552 = !DILocation(line: 3078, column: 11, scope: !8549)
!8553 = !DILocation(line: 3079, column: 2, scope: !8548)
!8554 = !DILocation(line: 3079, column: 5, scope: !8548)
!8555 = !DILocation(line: 3079, column: 10, scope: !8548)
!8556 = !DILocation(line: 3080, column: 16, scope: !8557)
!8557 = distinct !DILexicalBlock(scope: !8548, file: !3, line: 3080, column: 16)
!8558 = !DILocation(line: 3080, column: 19, scope: !8557)
!8559 = !DILocation(line: 3080, column: 24, scope: !8557)
!8560 = !DILocation(line: 3080, column: 16, scope: !8548)
!8561 = !DILocation(line: 3081, column: 2, scope: !8557)
!8562 = !DILocation(line: 3081, column: 5, scope: !8557)
!8563 = !DILocation(line: 3081, column: 10, scope: !8557)
!8564 = !DILocation(line: 3082, column: 16, scope: !8565)
!8565 = distinct !DILexicalBlock(scope: !8557, file: !3, line: 3082, column: 16)
!8566 = !DILocation(line: 3082, column: 19, scope: !8565)
!8567 = !DILocation(line: 3082, column: 24, scope: !8565)
!8568 = !DILocation(line: 3082, column: 16, scope: !8557)
!8569 = !DILocalVariable(name: "tmplhs", scope: !8570, file: !3, line: 3084, type: !1720)
!8570 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 3083, column: 2)
!8571 = !DILocation(line: 3084, column: 27, scope: !8570)
!8572 = !DILocation(line: 3085, column: 13, scope: !8570)
!8573 = !DILocation(line: 3086, column: 49, scope: !8570)
!8574 = !DILocation(line: 3086, column: 24, scope: !8570)
!8575 = !DILocation(line: 3086, column: 4, scope: !8570)
!8576 = !DILocation(line: 3087, column: 20, scope: !8570)
!8577 = !DILocation(line: 3087, column: 4, scope: !8570)
!8578 = !DILocation(line: 3087, column: 7, scope: !8570)
!8579 = !DILocation(line: 3087, column: 11, scope: !8570)
!8580 = !DILocation(line: 3088, column: 2, scope: !8570)
!8581 = !DILocation(line: 3090, column: 2, scope: !8565)
!8582 = !DILocation(line: 3091, column: 5, scope: !8549)
!8583 = !DILocation(line: 3076, column: 56, scope: !8545)
!8584 = !DILocation(line: 3076, column: 3, scope: !8545)
!8585 = distinct !{!8585, !8546, !8586}
!8586 = !DILocation(line: 3091, column: 5, scope: !8542)
!8587 = !DILocation(line: 3092, column: 1, scope: !8534)
!8588 = distinct !DISubprogram(name: "lookup_vi_for_tree", scope: !3, file: !3, line: 2612, type: !7082, scopeLine: 2613, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8589 = !DILocalVariable(name: "t", arg: 1, scope: !8588, file: !3, line: 2612, type: !1780)
!8590 = !DILocation(line: 2612, column: 26, scope: !8588)
!8591 = !DILocalVariable(name: "slot", scope: !8588, file: !3, line: 2614, type: !2587)
!8592 = !DILocation(line: 2614, column: 10, scope: !8588)
!8593 = !DILocation(line: 2614, column: 39, scope: !8588)
!8594 = !DILocation(line: 2614, column: 52, scope: !8588)
!8595 = !DILocation(line: 2614, column: 17, scope: !8588)
!8596 = !DILocation(line: 2615, column: 7, scope: !8597)
!8597 = distinct !DILexicalBlock(scope: !8588, file: !3, line: 2615, column: 7)
!8598 = !DILocation(line: 2615, column: 12, scope: !8597)
!8599 = !DILocation(line: 2615, column: 7, scope: !8588)
!8600 = !DILocation(line: 2616, column: 5, scope: !8597)
!8601 = !DILocation(line: 2618, column: 23, scope: !8588)
!8602 = !DILocation(line: 2618, column: 22, scope: !8588)
!8603 = !DILocation(line: 2618, column: 10, scope: !8588)
!8604 = !DILocation(line: 2618, column: 3, scope: !8588)
!8605 = !DILocation(line: 2619, column: 1, scope: !8588)
!8606 = distinct !DISubprogram(name: "handle_const_call", scope: !3, file: !3, line: 3531, type: !8607, scopeLine: 3532, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8607 = !DISubroutineType(types: !8608)
!8608 = !{null, !2102, !8119}
!8609 = !DILocalVariable(name: "stmt", arg: 1, scope: !8606, file: !3, line: 3531, type: !2102)
!8610 = !DILocation(line: 3531, column: 27, scope: !8606)
!8611 = !DILocalVariable(name: "results", arg: 2, scope: !8606, file: !3, line: 3531, type: !8119)
!8612 = !DILocation(line: 3531, column: 51, scope: !8606)
!8613 = !DILocalVariable(name: "rhsc", scope: !8606, file: !3, line: 3533, type: !1720)
!8614 = !DILocation(line: 3533, column: 26, scope: !8606)
!8615 = !DILocalVariable(name: "k", scope: !8606, file: !3, line: 3534, type: !6)
!8616 = !DILocation(line: 3534, column: 16, scope: !8606)
!8617 = !DILocation(line: 3538, column: 26, scope: !8618)
!8618 = distinct !DILexicalBlock(scope: !8606, file: !3, line: 3538, column: 7)
!8619 = !DILocation(line: 3538, column: 7, scope: !8618)
!8620 = !DILocation(line: 3538, column: 7, scope: !8606)
!8621 = !DILocation(line: 3540, column: 59, scope: !8622)
!8622 = distinct !DILexicalBlock(scope: !8618, file: !3, line: 3539, column: 5)
!8623 = !DILocation(line: 3540, column: 40, scope: !8622)
!8624 = !DILocation(line: 3540, column: 7, scope: !8622)
!8625 = !DILocation(line: 3541, column: 12, scope: !8622)
!8626 = !DILocation(line: 3541, column: 16, scope: !8622)
!8627 = !DILocation(line: 3542, column: 12, scope: !8622)
!8628 = !DILocation(line: 3542, column: 19, scope: !8622)
!8629 = !DILocation(line: 3543, column: 12, scope: !8622)
!8630 = !DILocation(line: 3543, column: 17, scope: !8622)
!8631 = !DILocation(line: 3544, column: 7, scope: !8622)
!8632 = !DILocation(line: 3545, column: 5, scope: !8622)
!8633 = !DILocation(line: 3548, column: 10, scope: !8634)
!8634 = distinct !DILexicalBlock(scope: !8606, file: !3, line: 3548, column: 3)
!8635 = !DILocation(line: 3548, column: 8, scope: !8634)
!8636 = !DILocation(line: 3548, column: 15, scope: !8637)
!8637 = distinct !DILexicalBlock(scope: !8634, file: !3, line: 3548, column: 3)
!8638 = !DILocation(line: 3548, column: 41, scope: !8637)
!8639 = !DILocation(line: 3548, column: 19, scope: !8637)
!8640 = !DILocation(line: 3548, column: 17, scope: !8637)
!8641 = !DILocation(line: 3548, column: 3, scope: !8634)
!8642 = !DILocalVariable(name: "arg", scope: !8643, file: !3, line: 3550, type: !1780)
!8643 = distinct !DILexicalBlock(scope: !8637, file: !3, line: 3549, column: 5)
!8644 = !DILocation(line: 3550, column: 12, scope: !8643)
!8645 = !DILocation(line: 3550, column: 35, scope: !8643)
!8646 = !DILocation(line: 3550, column: 41, scope: !8643)
!8647 = !DILocation(line: 3550, column: 18, scope: !8643)
!8648 = !DILocation(line: 3552, column: 32, scope: !8649)
!8649 = distinct !DILexicalBlock(scope: !8643, file: !3, line: 3552, column: 11)
!8650 = !DILocation(line: 3552, column: 11, scope: !8649)
!8651 = !DILocation(line: 3552, column: 11, scope: !8643)
!8652 = !DILocalVariable(name: "argc", scope: !8653, file: !3, line: 3554, type: !3154)
!8653 = distinct !DILexicalBlock(scope: !8649, file: !3, line: 3553, column: 2)
!8654 = !DILocation(line: 3554, column: 21, scope: !8653)
!8655 = !DILocalVariable(name: "i", scope: !8653, file: !3, line: 3555, type: !6)
!8656 = !DILocation(line: 3555, column: 13, scope: !8653)
!8657 = !DILocalVariable(name: "argp", scope: !8653, file: !3, line: 3556, type: !5295)
!8658 = !DILocation(line: 3556, column: 28, scope: !8653)
!8659 = !DILocation(line: 3557, column: 24, scope: !8653)
!8660 = !DILocation(line: 3557, column: 4, scope: !8653)
!8661 = !DILocation(line: 3558, column: 11, scope: !8662)
!8662 = distinct !DILexicalBlock(scope: !8653, file: !3, line: 3558, column: 4)
!8663 = !DILocation(line: 3558, column: 9, scope: !8662)
!8664 = !DILocation(line: 3558, column: 16, scope: !8665)
!8665 = distinct !DILexicalBlock(scope: !8662, file: !3, line: 3558, column: 4)
!8666 = !DILocation(line: 3558, column: 4, scope: !8662)
!8667 = !DILocation(line: 3559, column: 6, scope: !8665)
!8668 = !DILocation(line: 3558, column: 51, scope: !8665)
!8669 = !DILocation(line: 3558, column: 4, scope: !8665)
!8670 = distinct !{!8670, !8666, !8671}
!8671 = !DILocation(line: 3559, column: 6, scope: !8662)
!8672 = !DILocation(line: 3560, column: 4, scope: !8653)
!8673 = !DILocation(line: 3561, column: 2, scope: !8653)
!8674 = !DILocation(line: 3562, column: 5, scope: !8643)
!8675 = !DILocation(line: 3548, column: 48, scope: !8637)
!8676 = !DILocation(line: 3548, column: 3, scope: !8637)
!8677 = distinct !{!8677, !8641, !8678}
!8678 = !DILocation(line: 3562, column: 5, scope: !8634)
!8679 = !DILocation(line: 3565, column: 8, scope: !8606)
!8680 = !DILocation(line: 3565, column: 12, scope: !8606)
!8681 = !DILocation(line: 3566, column: 8, scope: !8606)
!8682 = !DILocation(line: 3566, column: 15, scope: !8606)
!8683 = !DILocation(line: 3567, column: 8, scope: !8606)
!8684 = !DILocation(line: 3567, column: 13, scope: !8606)
!8685 = !DILocation(line: 3568, column: 3, scope: !8606)
!8686 = !DILocation(line: 3569, column: 1, scope: !8606)
!8687 = distinct !DISubprogram(name: "handle_pure_call", scope: !3, file: !3, line: 3575, type: !8607, scopeLine: 3576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8688 = !DILocalVariable(name: "stmt", arg: 1, scope: !8687, file: !3, line: 3575, type: !2102)
!8689 = !DILocation(line: 3575, column: 26, scope: !8687)
!8690 = !DILocalVariable(name: "results", arg: 2, scope: !8687, file: !3, line: 3575, type: !8119)
!8691 = !DILocation(line: 3575, column: 50, scope: !8687)
!8692 = !DILocalVariable(name: "rhsc", scope: !8687, file: !3, line: 3577, type: !1720)
!8693 = !DILocation(line: 3577, column: 26, scope: !8687)
!8694 = !DILocalVariable(name: "i", scope: !8687, file: !3, line: 3578, type: !6)
!8695 = !DILocation(line: 3578, column: 12, scope: !8687)
!8696 = !DILocalVariable(name: "need_callused", scope: !8687, file: !3, line: 3579, type: !1894)
!8697 = !DILocation(line: 3579, column: 8, scope: !8687)
!8698 = !DILocation(line: 3582, column: 10, scope: !8699)
!8699 = distinct !DILexicalBlock(scope: !8687, file: !3, line: 3582, column: 3)
!8700 = !DILocation(line: 3582, column: 8, scope: !8699)
!8701 = !DILocation(line: 3582, column: 15, scope: !8702)
!8702 = distinct !DILexicalBlock(scope: !8699, file: !3, line: 3582, column: 3)
!8703 = !DILocation(line: 3582, column: 41, scope: !8702)
!8704 = !DILocation(line: 3582, column: 19, scope: !8702)
!8705 = !DILocation(line: 3582, column: 17, scope: !8702)
!8706 = !DILocation(line: 3582, column: 3, scope: !8699)
!8707 = !DILocalVariable(name: "arg", scope: !8708, file: !3, line: 3584, type: !1780)
!8708 = distinct !DILexicalBlock(scope: !8702, file: !3, line: 3583, column: 5)
!8709 = !DILocation(line: 3584, column: 12, scope: !8708)
!8710 = !DILocation(line: 3584, column: 35, scope: !8708)
!8711 = !DILocation(line: 3584, column: 41, scope: !8708)
!8712 = !DILocation(line: 3584, column: 18, scope: !8708)
!8713 = !DILocation(line: 3586, column: 32, scope: !8714)
!8714 = distinct !DILexicalBlock(scope: !8708, file: !3, line: 3586, column: 11)
!8715 = !DILocation(line: 3586, column: 11, scope: !8714)
!8716 = !DILocation(line: 3586, column: 11, scope: !8708)
!8717 = !DILocation(line: 3588, column: 37, scope: !8718)
!8718 = distinct !DILexicalBlock(scope: !8714, file: !3, line: 3587, column: 2)
!8719 = !DILocation(line: 3588, column: 4, scope: !8718)
!8720 = !DILocation(line: 3589, column: 18, scope: !8718)
!8721 = !DILocation(line: 3590, column: 2, scope: !8718)
!8722 = !DILocation(line: 3591, column: 5, scope: !8708)
!8723 = !DILocation(line: 3582, column: 48, scope: !8702)
!8724 = !DILocation(line: 3582, column: 3, scope: !8702)
!8725 = distinct !{!8725, !8706, !8726}
!8726 = !DILocation(line: 3591, column: 5, scope: !8699)
!8727 = !DILocation(line: 3594, column: 26, scope: !8728)
!8728 = distinct !DILexicalBlock(scope: !8687, file: !3, line: 3594, column: 7)
!8729 = !DILocation(line: 3594, column: 7, scope: !8728)
!8730 = !DILocation(line: 3594, column: 7, scope: !8687)
!8731 = !DILocation(line: 3596, column: 59, scope: !8732)
!8732 = distinct !DILexicalBlock(scope: !8728, file: !3, line: 3595, column: 5)
!8733 = !DILocation(line: 3596, column: 40, scope: !8732)
!8734 = !DILocation(line: 3596, column: 7, scope: !8732)
!8735 = !DILocation(line: 3597, column: 21, scope: !8732)
!8736 = !DILocation(line: 3598, column: 5, scope: !8732)
!8737 = !DILocation(line: 3601, column: 7, scope: !8738)
!8738 = distinct !DILexicalBlock(scope: !8687, file: !3, line: 3601, column: 7)
!8739 = !DILocation(line: 3601, column: 7, scope: !8687)
!8740 = !DILocation(line: 3603, column: 12, scope: !8741)
!8741 = distinct !DILexicalBlock(scope: !8738, file: !3, line: 3602, column: 5)
!8742 = !DILocation(line: 3603, column: 16, scope: !8741)
!8743 = !DILocation(line: 3604, column: 12, scope: !8741)
!8744 = !DILocation(line: 3604, column: 19, scope: !8741)
!8745 = !DILocation(line: 3605, column: 12, scope: !8741)
!8746 = !DILocation(line: 3605, column: 17, scope: !8741)
!8747 = !DILocation(line: 3606, column: 7, scope: !8741)
!8748 = !DILocation(line: 3607, column: 5, scope: !8741)
!8749 = !DILocation(line: 3608, column: 8, scope: !8687)
!8750 = !DILocation(line: 3608, column: 12, scope: !8687)
!8751 = !DILocation(line: 3609, column: 8, scope: !8687)
!8752 = !DILocation(line: 3609, column: 15, scope: !8687)
!8753 = !DILocation(line: 3610, column: 8, scope: !8687)
!8754 = !DILocation(line: 3610, column: 13, scope: !8687)
!8755 = !DILocation(line: 3611, column: 3, scope: !8687)
!8756 = !DILocation(line: 3612, column: 1, scope: !8687)
!8757 = distinct !DISubprogram(name: "handle_rhs_call", scope: !3, file: !3, line: 3439, type: !8607, scopeLine: 3440, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8758 = !DILocalVariable(name: "stmt", arg: 1, scope: !8757, file: !3, line: 3439, type: !2102)
!8759 = !DILocation(line: 3439, column: 25, scope: !8757)
!8760 = !DILocalVariable(name: "results", arg: 2, scope: !8757, file: !3, line: 3439, type: !8119)
!8761 = !DILocation(line: 3439, column: 49, scope: !8757)
!8762 = !DILocalVariable(name: "rhsc", scope: !8757, file: !3, line: 3441, type: !1720)
!8763 = !DILocation(line: 3441, column: 26, scope: !8757)
!8764 = !DILocalVariable(name: "i", scope: !8757, file: !3, line: 3442, type: !6)
!8765 = !DILocation(line: 3442, column: 12, scope: !8757)
!8766 = !DILocation(line: 3444, column: 10, scope: !8767)
!8767 = distinct !DILexicalBlock(scope: !8757, file: !3, line: 3444, column: 3)
!8768 = !DILocation(line: 3444, column: 8, scope: !8767)
!8769 = !DILocation(line: 3444, column: 15, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !8767, file: !3, line: 3444, column: 3)
!8771 = !DILocation(line: 3444, column: 41, scope: !8770)
!8772 = !DILocation(line: 3444, column: 19, scope: !8770)
!8773 = !DILocation(line: 3444, column: 17, scope: !8770)
!8774 = !DILocation(line: 3444, column: 3, scope: !8767)
!8775 = !DILocalVariable(name: "arg", scope: !8776, file: !3, line: 3446, type: !1780)
!8776 = distinct !DILexicalBlock(scope: !8770, file: !3, line: 3445, column: 5)
!8777 = !DILocation(line: 3446, column: 12, scope: !8776)
!8778 = !DILocation(line: 3446, column: 35, scope: !8776)
!8779 = !DILocation(line: 3446, column: 41, scope: !8776)
!8780 = !DILocation(line: 3446, column: 18, scope: !8776)
!8781 = !DILocation(line: 3450, column: 32, scope: !8782)
!8782 = distinct !DILexicalBlock(scope: !8776, file: !3, line: 3450, column: 11)
!8783 = !DILocation(line: 3450, column: 11, scope: !8782)
!8784 = !DILocation(line: 3450, column: 11, scope: !8776)
!8785 = !DILocation(line: 3451, column: 26, scope: !8782)
!8786 = !DILocation(line: 3451, column: 2, scope: !8782)
!8787 = !DILocation(line: 3452, column: 5, scope: !8776)
!8788 = !DILocation(line: 3444, column: 48, scope: !8770)
!8789 = !DILocation(line: 3444, column: 3, scope: !8770)
!8790 = distinct !{!8790, !8774, !8791}
!8791 = !DILocation(line: 3452, column: 5, scope: !8767)
!8792 = !DILocation(line: 3455, column: 26, scope: !8793)
!8793 = distinct !DILexicalBlock(scope: !8757, file: !3, line: 3455, column: 7)
!8794 = !DILocation(line: 3455, column: 7, scope: !8793)
!8795 = !DILocation(line: 3455, column: 7, scope: !8757)
!8796 = !DILocation(line: 3456, column: 48, scope: !8793)
!8797 = !DILocation(line: 3456, column: 29, scope: !8793)
!8798 = !DILocation(line: 3456, column: 5, scope: !8793)
!8799 = !DILocation(line: 3459, column: 38, scope: !8800)
!8800 = distinct !DILexicalBlock(scope: !8757, file: !3, line: 3459, column: 7)
!8801 = !DILocation(line: 3459, column: 7, scope: !8800)
!8802 = !DILocation(line: 3460, column: 7, scope: !8800)
!8803 = !DILocation(line: 3460, column: 27, scope: !8800)
!8804 = !DILocation(line: 3460, column: 10, scope: !8800)
!8805 = !DILocation(line: 3460, column: 33, scope: !8800)
!8806 = !DILocation(line: 3461, column: 7, scope: !8800)
!8807 = !DILocation(line: 3461, column: 10, scope: !8800)
!8808 = !DILocation(line: 3459, column: 7, scope: !8757)
!8809 = !DILocalVariable(name: "tmpc", scope: !8810, file: !3, line: 3463, type: !3154)
!8810 = distinct !DILexicalBlock(scope: !8800, file: !3, line: 3462, column: 5)
!8811 = !DILocation(line: 3463, column: 24, scope: !8810)
!8812 = !DILocalVariable(name: "lhsc", scope: !8810, file: !3, line: 3464, type: !1720)
!8813 = !DILocation(line: 3464, column: 30, scope: !8810)
!8814 = !DILocalVariable(name: "c", scope: !8810, file: !3, line: 3464, type: !5295)
!8815 = !DILocation(line: 3464, column: 37, scope: !8810)
!8816 = !DILocation(line: 3465, column: 55, scope: !8810)
!8817 = !DILocation(line: 3465, column: 38, scope: !8810)
!8818 = !DILocation(line: 3465, column: 7, scope: !8810)
!8819 = !DILocation(line: 3466, column: 12, scope: !8810)
!8820 = !DILocation(line: 3466, column: 16, scope: !8810)
!8821 = !DILocation(line: 3467, column: 12, scope: !8810)
!8822 = !DILocation(line: 3467, column: 19, scope: !8810)
!8823 = !DILocation(line: 3468, column: 12, scope: !8810)
!8824 = !DILocation(line: 3468, column: 17, scope: !8810)
!8825 = !DILocation(line: 3469, column: 14, scope: !8826)
!8826 = distinct !DILexicalBlock(scope: !8810, file: !3, line: 3469, column: 7)
!8827 = !DILocation(line: 3469, column: 12, scope: !8826)
!8828 = !DILocation(line: 3469, column: 19, scope: !8829)
!8829 = distinct !DILexicalBlock(scope: !8826, file: !3, line: 3469, column: 7)
!8830 = !DILocation(line: 3469, column: 7, scope: !8826)
!8831 = !DILocation(line: 3470, column: 45, scope: !8829)
!8832 = !DILocation(line: 3470, column: 22, scope: !8829)
!8833 = !DILocation(line: 3470, column: 2, scope: !8829)
!8834 = !DILocation(line: 3469, column: 51, scope: !8829)
!8835 = !DILocation(line: 3469, column: 7, scope: !8829)
!8836 = distinct !{!8836, !8830, !8837}
!8837 = !DILocation(line: 3470, column: 47, scope: !8826)
!8838 = !DILocation(line: 3471, column: 7, scope: !8810)
!8839 = !DILocation(line: 3472, column: 5, scope: !8810)
!8840 = !DILocation(line: 3475, column: 8, scope: !8757)
!8841 = !DILocation(line: 3475, column: 12, scope: !8757)
!8842 = !DILocation(line: 3476, column: 8, scope: !8757)
!8843 = !DILocation(line: 3476, column: 15, scope: !8757)
!8844 = !DILocation(line: 3477, column: 8, scope: !8757)
!8845 = !DILocation(line: 3477, column: 13, scope: !8757)
!8846 = !DILocation(line: 3478, column: 3, scope: !8757)
!8847 = !DILocation(line: 3479, column: 1, scope: !8757)
!8848 = distinct !DISubprogram(name: "handle_lhs_call", scope: !3, file: !3, line: 3486, type: !8849, scopeLine: 3487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8849 = !DISubroutineType(types: !8850)
!8850 = !{null, !1780, !1730, !3154, !1780}
!8851 = !DILocalVariable(name: "lhs", arg: 1, scope: !8848, file: !3, line: 3486, type: !1780)
!8852 = !DILocation(line: 3486, column: 23, scope: !8848)
!8853 = !DILocalVariable(name: "flags", arg: 2, scope: !8848, file: !3, line: 3486, type: !1730)
!8854 = !DILocation(line: 3486, column: 32, scope: !8848)
!8855 = !DILocalVariable(name: "rhsc", arg: 3, scope: !8848, file: !3, line: 3486, type: !3154)
!8856 = !DILocation(line: 3486, column: 56, scope: !8848)
!8857 = !DILocalVariable(name: "fndecl", arg: 4, scope: !8848, file: !3, line: 3486, type: !1780)
!8858 = !DILocation(line: 3486, column: 67, scope: !8848)
!8859 = !DILocalVariable(name: "lhsc", scope: !8848, file: !3, line: 3488, type: !3154)
!8860 = !DILocation(line: 3488, column: 20, scope: !8848)
!8861 = !DILocation(line: 3490, column: 23, scope: !8848)
!8862 = !DILocation(line: 3490, column: 3, scope: !8848)
!8863 = !DILocation(line: 3492, column: 7, scope: !8864)
!8864 = distinct !DILexicalBlock(scope: !8848, file: !3, line: 3492, column: 7)
!8865 = !DILocation(line: 3492, column: 13, scope: !8864)
!8866 = !DILocation(line: 3492, column: 7, scope: !8848)
!8867 = !DILocalVariable(name: "vi", scope: !8868, file: !3, line: 3494, type: !1758)
!8868 = distinct !DILexicalBlock(scope: !8864, file: !3, line: 3493, column: 5)
!8869 = !DILocation(line: 3494, column: 17, scope: !8868)
!8870 = !DILocation(line: 3495, column: 59, scope: !8868)
!8871 = !DILocation(line: 3495, column: 42, scope: !8868)
!8872 = !DILocation(line: 3495, column: 12, scope: !8868)
!8873 = !DILocation(line: 3495, column: 10, scope: !8868)
!8874 = !DILocation(line: 3498, column: 7, scope: !8868)
!8875 = !DILocation(line: 3498, column: 32, scope: !8868)
!8876 = !DILocation(line: 3499, column: 7, scope: !8868)
!8877 = !DILocation(line: 3499, column: 11, scope: !8868)
!8878 = !DILocation(line: 3499, column: 25, scope: !8868)
!8879 = !DILocation(line: 3503, column: 12, scope: !8880)
!8880 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 3503, column: 11)
!8881 = !DILocation(line: 3504, column: 4, scope: !8880)
!8882 = !DILocation(line: 3504, column: 7, scope: !8880)
!8883 = !DILocation(line: 3504, column: 36, scope: !8880)
!8884 = !DILocation(line: 3503, column: 11, scope: !8868)
!8885 = !DILocation(line: 3505, column: 24, scope: !8880)
!8886 = !DILocation(line: 3505, column: 2, scope: !8880)
!8887 = !DILocation(line: 3506, column: 5, scope: !8868)
!8888 = !DILocation(line: 3507, column: 12, scope: !8889)
!8889 = distinct !DILexicalBlock(scope: !8864, file: !3, line: 3507, column: 12)
!8890 = !DILocation(line: 3507, column: 36, scope: !8889)
!8891 = !DILocation(line: 3507, column: 12, scope: !8864)
!8892 = !DILocation(line: 3511, column: 31, scope: !8893)
!8893 = distinct !DILexicalBlock(scope: !8889, file: !3, line: 3508, column: 5)
!8894 = !DILocation(line: 3511, column: 13, scope: !8893)
!8895 = !DILocation(line: 3511, column: 11, scope: !8893)
!8896 = !DILocation(line: 3512, column: 11, scope: !8897)
!8897 = distinct !DILexicalBlock(scope: !8893, file: !3, line: 3512, column: 11)
!8898 = !DILocation(line: 3513, column: 4, scope: !8897)
!8899 = !DILocation(line: 3513, column: 7, scope: !8897)
!8900 = !DILocation(line: 3514, column: 4, scope: !8897)
!8901 = !DILocation(line: 3514, column: 22, scope: !8897)
!8902 = !DILocation(line: 3514, column: 7, scope: !8897)
!8903 = !DILocation(line: 3512, column: 11, scope: !8893)
!8904 = !DILocalVariable(name: "tmpc", scope: !8905, file: !3, line: 3516, type: !1720)
!8905 = distinct !DILexicalBlock(scope: !8897, file: !3, line: 3515, column: 2)
!8906 = !DILocation(line: 3516, column: 27, scope: !8905)
!8907 = !DILocation(line: 3517, column: 9, scope: !8905)
!8908 = !DILocation(line: 3517, column: 13, scope: !8905)
!8909 = !DILocation(line: 3518, column: 9, scope: !8905)
!8910 = !DILocation(line: 3518, column: 16, scope: !8905)
!8911 = !DILocation(line: 3519, column: 9, scope: !8905)
!8912 = !DILocation(line: 3519, column: 14, scope: !8905)
!8913 = !DILocation(line: 3520, column: 4, scope: !8905)
!8914 = !DILocation(line: 3521, column: 2, scope: !8905)
!8915 = !DILocation(line: 3522, column: 36, scope: !8893)
!8916 = !DILocation(line: 3522, column: 42, scope: !8893)
!8917 = !DILocation(line: 3522, column: 7, scope: !8893)
!8918 = !DILocation(line: 3523, column: 5, scope: !8893)
!8919 = !DILocation(line: 3524, column: 3, scope: !8848)
!8920 = !DILocation(line: 3525, column: 1, scope: !8848)
!8921 = distinct !DISubprogram(name: "gimple_call_fn", scope: !851, file: !851, line: 1911, type: !5273, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8922 = !DILocalVariable(name: "gs", arg: 1, scope: !8921, file: !851, line: 1911, type: !5275)
!8923 = !DILocation(line: 1911, column: 30, scope: !8921)
!8924 = !DILocation(line: 1914, column: 21, scope: !8921)
!8925 = !DILocation(line: 1914, column: 10, scope: !8921)
!8926 = !DILocation(line: 1914, column: 3, scope: !8921)
!8927 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !851, file: !851, line: 2013, type: !8130, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8928 = !DILocalVariable(name: "gs", arg: 1, scope: !8927, file: !851, line: 2013, type: !5275)
!8929 = !DILocation(line: 2013, column: 36, scope: !8927)
!8930 = !DILocalVariable(name: "num_ops", scope: !8927, file: !851, line: 2015, type: !6)
!8931 = !DILocation(line: 2015, column: 12, scope: !8927)
!8932 = !DILocation(line: 2017, column: 29, scope: !8927)
!8933 = !DILocation(line: 2017, column: 13, scope: !8927)
!8934 = !DILocation(line: 2017, column: 11, scope: !8927)
!8935 = !DILocation(line: 2018, column: 10, scope: !8927)
!8936 = !DILocation(line: 2018, column: 18, scope: !8927)
!8937 = !DILocation(line: 2018, column: 3, scope: !8927)
!8938 = distinct !DISubprogram(name: "first_vi_for_offset", scope: !3, file: !3, line: 4022, type: !8939, scopeLine: 4023, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8939 = !DISubroutineType(types: !8940)
!8940 = !{!1758, !1758, !1729}
!8941 = !DILocalVariable(name: "start", arg: 1, scope: !8938, file: !3, line: 4022, type: !1758)
!8942 = !DILocation(line: 4022, column: 32, scope: !8938)
!8943 = !DILocalVariable(name: "offset", arg: 2, scope: !8938, file: !3, line: 4022, type: !1729)
!8944 = !DILocation(line: 4022, column: 62, scope: !8938)
!8945 = !DILocation(line: 4025, column: 7, scope: !8946)
!8946 = distinct !DILexicalBlock(scope: !8938, file: !3, line: 4025, column: 7)
!8947 = !DILocation(line: 4025, column: 17, scope: !8946)
!8948 = !DILocation(line: 4025, column: 24, scope: !8946)
!8949 = !DILocation(line: 4025, column: 14, scope: !8946)
!8950 = !DILocation(line: 4025, column: 7, scope: !8938)
!8951 = !DILocation(line: 4026, column: 5, scope: !8946)
!8952 = !DILocation(line: 4030, column: 7, scope: !8953)
!8953 = distinct !DILexicalBlock(scope: !8938, file: !3, line: 4030, column: 7)
!8954 = !DILocation(line: 4030, column: 14, scope: !8953)
!8955 = !DILocation(line: 4030, column: 23, scope: !8953)
!8956 = !DILocation(line: 4030, column: 21, scope: !8953)
!8957 = !DILocation(line: 4030, column: 7, scope: !8938)
!8958 = !DILocation(line: 4031, column: 33, scope: !8953)
!8959 = !DILocation(line: 4031, column: 40, scope: !8953)
!8960 = !DILocation(line: 4031, column: 13, scope: !8953)
!8961 = !DILocation(line: 4031, column: 11, scope: !8953)
!8962 = !DILocation(line: 4031, column: 5, scope: !8953)
!8963 = !DILocation(line: 4033, column: 3, scope: !8938)
!8964 = !DILocation(line: 4033, column: 10, scope: !8938)
!8965 = !DILocation(line: 4039, column: 11, scope: !8966)
!8966 = distinct !DILexicalBlock(scope: !8967, file: !3, line: 4039, column: 11)
!8967 = distinct !DILexicalBlock(scope: !8938, file: !3, line: 4034, column: 5)
!8968 = !DILocation(line: 4039, column: 21, scope: !8966)
!8969 = !DILocation(line: 4039, column: 28, scope: !8966)
!8970 = !DILocation(line: 4039, column: 18, scope: !8966)
!8971 = !DILocation(line: 4040, column: 4, scope: !8966)
!8972 = !DILocation(line: 4040, column: 8, scope: !8966)
!8973 = !DILocation(line: 4040, column: 17, scope: !8966)
!8974 = !DILocation(line: 4040, column: 24, scope: !8966)
!8975 = !DILocation(line: 4040, column: 15, scope: !8966)
!8976 = !DILocation(line: 4040, column: 34, scope: !8966)
!8977 = !DILocation(line: 4040, column: 41, scope: !8966)
!8978 = !DILocation(line: 4040, column: 32, scope: !8966)
!8979 = !DILocation(line: 4039, column: 11, scope: !8967)
!8980 = !DILocation(line: 4041, column: 9, scope: !8966)
!8981 = !DILocation(line: 4041, column: 2, scope: !8966)
!8982 = !DILocation(line: 4043, column: 14, scope: !8967)
!8983 = !DILocation(line: 4043, column: 21, scope: !8967)
!8984 = !DILocation(line: 4043, column: 12, scope: !8967)
!8985 = distinct !{!8985, !8963, !8986}
!8986 = !DILocation(line: 4044, column: 5, scope: !8938)
!8987 = !DILocation(line: 4046, column: 3, scope: !8938)
!8988 = !DILocation(line: 4047, column: 1, scope: !8938)
!8989 = distinct !DISubprogram(name: "is_gimple_assign", scope: !851, file: !851, line: 1677, type: !8213, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8990 = !DILocalVariable(name: "gs", arg: 1, scope: !8989, file: !851, line: 1677, type: !5275)
!8991 = !DILocation(line: 1677, column: 32, scope: !8989)
!8992 = !DILocation(line: 1679, column: 23, scope: !8989)
!8993 = !DILocation(line: 1679, column: 10, scope: !8989)
!8994 = !DILocation(line: 1679, column: 27, scope: !8989)
!8995 = !DILocation(line: 1679, column: 3, scope: !8989)
!8996 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !851, file: !851, line: 1694, type: !5273, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!8997 = !DILocalVariable(name: "gs", arg: 1, scope: !8996, file: !851, line: 1694, type: !5275)
!8998 = !DILocation(line: 1694, column: 33, scope: !8996)
!8999 = !DILocation(line: 1697, column: 21, scope: !8996)
!9000 = !DILocation(line: 1697, column: 10, scope: !8996)
!9001 = !DILocation(line: 1697, column: 3, scope: !8996)
!9002 = distinct !DISubprogram(name: "gimple_num_ops", scope: !851, file: !851, line: 1596, type: !8130, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9003 = !DILocalVariable(name: "gs", arg: 1, scope: !9002, file: !851, line: 1596, type: !5275)
!9004 = !DILocation(line: 1596, column: 30, scope: !9002)
!9005 = !DILocation(line: 1598, column: 10, scope: !9002)
!9006 = !DILocation(line: 1598, column: 14, scope: !9002)
!9007 = !DILocation(line: 1598, column: 21, scope: !9002)
!9008 = !DILocation(line: 1598, column: 3, scope: !9002)
!9009 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !851, file: !851, line: 1727, type: !5273, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9010 = !DILocalVariable(name: "gs", arg: 1, scope: !9009, file: !851, line: 1727, type: !5275)
!9011 = !DILocation(line: 1727, column: 34, scope: !9009)
!9012 = !DILocation(line: 1730, column: 21, scope: !9009)
!9013 = !DILocation(line: 1730, column: 10, scope: !9009)
!9014 = !DILocation(line: 1730, column: 3, scope: !9009)
!9015 = distinct !DISubprogram(name: "do_structure_copy", scope: !3, file: !3, line: 3266, type: !9016, scopeLine: 3267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9016 = !DISubroutineType(types: !9017)
!9017 = !{null, !1780, !1780}
!9018 = !DILocalVariable(name: "lhsop", arg: 1, scope: !9015, file: !3, line: 3266, type: !1780)
!9019 = !DILocation(line: 3266, column: 25, scope: !9015)
!9020 = !DILocalVariable(name: "rhsop", arg: 2, scope: !9015, file: !3, line: 3266, type: !1780)
!9021 = !DILocation(line: 3266, column: 37, scope: !9015)
!9022 = !DILocalVariable(name: "lhsp", scope: !9015, file: !3, line: 3268, type: !5295)
!9023 = !DILocation(line: 3268, column: 27, scope: !9015)
!9024 = !DILocalVariable(name: "rhsp", scope: !9015, file: !3, line: 3268, type: !5295)
!9025 = !DILocation(line: 3268, column: 34, scope: !9015)
!9026 = !DILocalVariable(name: "lhsc", scope: !9015, file: !3, line: 3269, type: !3154)
!9027 = !DILocation(line: 3269, column: 21, scope: !9015)
!9028 = !DILocalVariable(name: "rhsc", scope: !9015, file: !3, line: 3269, type: !3154)
!9029 = !DILocation(line: 3269, column: 35, scope: !9015)
!9030 = !DILocalVariable(name: "j", scope: !9015, file: !3, line: 3270, type: !6)
!9031 = !DILocation(line: 3270, column: 12, scope: !9015)
!9032 = !DILocation(line: 3272, column: 23, scope: !9015)
!9033 = !DILocation(line: 3272, column: 3, scope: !9015)
!9034 = !DILocation(line: 3273, column: 23, scope: !9015)
!9035 = !DILocation(line: 3273, column: 3, scope: !9015)
!9036 = !DILocation(line: 3274, column: 10, scope: !9015)
!9037 = !DILocation(line: 3274, column: 8, scope: !9015)
!9038 = !DILocation(line: 3275, column: 10, scope: !9015)
!9039 = !DILocation(line: 3275, column: 8, scope: !9015)
!9040 = !DILocation(line: 3276, column: 7, scope: !9041)
!9041 = distinct !DILexicalBlock(scope: !9015, file: !3, line: 3276, column: 7)
!9042 = !DILocation(line: 3276, column: 13, scope: !9041)
!9043 = !DILocation(line: 3276, column: 18, scope: !9041)
!9044 = !DILocation(line: 3277, column: 7, scope: !9041)
!9045 = !DILocation(line: 3277, column: 11, scope: !9041)
!9046 = !DILocation(line: 3277, column: 17, scope: !9041)
!9047 = !DILocation(line: 3277, column: 22, scope: !9041)
!9048 = !DILocation(line: 3277, column: 35, scope: !9041)
!9049 = !DILocation(line: 3277, column: 38, scope: !9041)
!9050 = !DILocation(line: 3277, column: 44, scope: !9041)
!9051 = !DILocation(line: 3277, column: 48, scope: !9041)
!9052 = !DILocation(line: 3278, column: 7, scope: !9041)
!9053 = !DILocation(line: 3278, column: 10, scope: !9041)
!9054 = !DILocation(line: 3278, column: 16, scope: !9041)
!9055 = !DILocation(line: 3278, column: 21, scope: !9041)
!9056 = !DILocation(line: 3276, column: 7, scope: !9015)
!9057 = !DILocation(line: 3279, column: 34, scope: !9041)
!9058 = !DILocation(line: 3279, column: 40, scope: !9041)
!9059 = !DILocation(line: 3279, column: 5, scope: !9041)
!9060 = !DILocation(line: 3280, column: 12, scope: !9061)
!9061 = distinct !DILexicalBlock(scope: !9041, file: !3, line: 3280, column: 12)
!9062 = !DILocation(line: 3280, column: 18, scope: !9061)
!9063 = !DILocation(line: 3280, column: 23, scope: !9061)
!9064 = !DILocation(line: 3281, column: 5, scope: !9061)
!9065 = !DILocation(line: 3281, column: 9, scope: !9061)
!9066 = !DILocation(line: 3281, column: 15, scope: !9061)
!9067 = !DILocation(line: 3281, column: 20, scope: !9061)
!9068 = !DILocation(line: 3282, column: 9, scope: !9061)
!9069 = !DILocation(line: 3282, column: 12, scope: !9061)
!9070 = !DILocation(line: 3282, column: 18, scope: !9061)
!9071 = !DILocation(line: 3282, column: 23, scope: !9061)
!9072 = !DILocation(line: 3280, column: 12, scope: !9041)
!9073 = !DILocalVariable(name: "lhssize", scope: !9074, file: !3, line: 3284, type: !1714)
!9074 = distinct !DILexicalBlock(scope: !9061, file: !3, line: 3283, column: 5)
!9075 = !DILocation(line: 3284, column: 21, scope: !9074)
!9076 = !DILocalVariable(name: "lhsmaxsize", scope: !9074, file: !3, line: 3284, type: !1714)
!9077 = !DILocation(line: 3284, column: 30, scope: !9074)
!9078 = !DILocalVariable(name: "lhsoffset", scope: !9074, file: !3, line: 3284, type: !1714)
!9079 = !DILocation(line: 3284, column: 42, scope: !9074)
!9080 = !DILocalVariable(name: "rhssize", scope: !9074, file: !3, line: 3285, type: !1714)
!9081 = !DILocation(line: 3285, column: 21, scope: !9074)
!9082 = !DILocalVariable(name: "rhsmaxsize", scope: !9074, file: !3, line: 3285, type: !1714)
!9083 = !DILocation(line: 3285, column: 30, scope: !9074)
!9084 = !DILocalVariable(name: "rhsoffset", scope: !9074, file: !3, line: 3285, type: !1714)
!9085 = !DILocation(line: 3285, column: 42, scope: !9074)
!9086 = !DILocalVariable(name: "k", scope: !9074, file: !3, line: 3286, type: !6)
!9087 = !DILocation(line: 3286, column: 16, scope: !9074)
!9088 = !DILocation(line: 3287, column: 32, scope: !9074)
!9089 = !DILocation(line: 3287, column: 7, scope: !9074)
!9090 = !DILocation(line: 3288, column: 32, scope: !9074)
!9091 = !DILocation(line: 3288, column: 7, scope: !9074)
!9092 = !DILocation(line: 3289, column: 14, scope: !9093)
!9093 = distinct !DILexicalBlock(scope: !9074, file: !3, line: 3289, column: 7)
!9094 = !DILocation(line: 3289, column: 12, scope: !9093)
!9095 = !DILocation(line: 3289, column: 19, scope: !9096)
!9096 = distinct !DILexicalBlock(scope: !9093, file: !3, line: 3289, column: 7)
!9097 = !DILocation(line: 3289, column: 7, scope: !9093)
!9098 = !DILocalVariable(name: "lhsv", scope: !9099, file: !3, line: 3291, type: !1758)
!9099 = distinct !DILexicalBlock(scope: !9096, file: !3, line: 3290, column: 2)
!9100 = !DILocation(line: 3291, column: 14, scope: !9099)
!9101 = !DILocalVariable(name: "rhsv", scope: !9099, file: !3, line: 3291, type: !1758)
!9102 = !DILocation(line: 3291, column: 20, scope: !9099)
!9103 = !DILocation(line: 3292, column: 11, scope: !9099)
!9104 = !DILocation(line: 3292, column: 9, scope: !9099)
!9105 = !DILocation(line: 3293, column: 24, scope: !9099)
!9106 = !DILocation(line: 3293, column: 30, scope: !9099)
!9107 = !DILocation(line: 3293, column: 11, scope: !9099)
!9108 = !DILocation(line: 3293, column: 9, scope: !9099)
!9109 = !DILocation(line: 3294, column: 24, scope: !9099)
!9110 = !DILocation(line: 3294, column: 30, scope: !9099)
!9111 = !DILocation(line: 3294, column: 11, scope: !9099)
!9112 = !DILocation(line: 3294, column: 9, scope: !9099)
!9113 = !DILocation(line: 3295, column: 8, scope: !9114)
!9114 = distinct !DILexicalBlock(scope: !9099, file: !3, line: 3295, column: 8)
!9115 = !DILocation(line: 3295, column: 14, scope: !9114)
!9116 = !DILocation(line: 3296, column: 8, scope: !9114)
!9117 = !DILocation(line: 3296, column: 29, scope: !9114)
!9118 = !DILocation(line: 3296, column: 35, scope: !9114)
!9119 = !DILocation(line: 3296, column: 44, scope: !9114)
!9120 = !DILocation(line: 3296, column: 42, scope: !9114)
!9121 = !DILocation(line: 3296, column: 55, scope: !9114)
!9122 = !DILocation(line: 3296, column: 61, scope: !9114)
!9123 = !DILocation(line: 3297, column: 8, scope: !9114)
!9124 = !DILocation(line: 3297, column: 14, scope: !9114)
!9125 = !DILocation(line: 3297, column: 23, scope: !9114)
!9126 = !DILocation(line: 3297, column: 21, scope: !9114)
!9127 = !DILocation(line: 3297, column: 34, scope: !9114)
!9128 = !DILocation(line: 3297, column: 40, scope: !9114)
!9129 = !DILocation(line: 3296, column: 11, scope: !9114)
!9130 = !DILocation(line: 3295, column: 8, scope: !9099)
!9131 = !DILocation(line: 3298, column: 43, scope: !9114)
!9132 = !DILocation(line: 3298, column: 50, scope: !9114)
!9133 = !DILocation(line: 3298, column: 26, scope: !9114)
!9134 = !DILocation(line: 3298, column: 6, scope: !9114)
!9135 = !DILocation(line: 3299, column: 8, scope: !9136)
!9136 = distinct !DILexicalBlock(scope: !9099, file: !3, line: 3299, column: 8)
!9137 = !DILocation(line: 3299, column: 14, scope: !9136)
!9138 = !DILocation(line: 3299, column: 23, scope: !9136)
!9139 = !DILocation(line: 3299, column: 21, scope: !9136)
!9140 = !DILocation(line: 3299, column: 35, scope: !9136)
!9141 = !DILocation(line: 3299, column: 41, scope: !9136)
!9142 = !DILocation(line: 3299, column: 33, scope: !9136)
!9143 = !DILocation(line: 3300, column: 10, scope: !9136)
!9144 = !DILocation(line: 3300, column: 16, scope: !9136)
!9145 = !DILocation(line: 3300, column: 25, scope: !9136)
!9146 = !DILocation(line: 3300, column: 23, scope: !9136)
!9147 = !DILocation(line: 3300, column: 37, scope: !9136)
!9148 = !DILocation(line: 3300, column: 43, scope: !9136)
!9149 = !DILocation(line: 3300, column: 35, scope: !9136)
!9150 = !DILocation(line: 3300, column: 8, scope: !9136)
!9151 = !DILocation(line: 3299, column: 8, scope: !9099)
!9152 = !DILocation(line: 3302, column: 8, scope: !9153)
!9153 = distinct !DILexicalBlock(scope: !9136, file: !3, line: 3301, column: 6)
!9154 = !DILocation(line: 3303, column: 12, scope: !9155)
!9155 = distinct !DILexicalBlock(scope: !9153, file: !3, line: 3303, column: 12)
!9156 = !DILocation(line: 3303, column: 17, scope: !9155)
!9157 = !DILocation(line: 3303, column: 14, scope: !9155)
!9158 = !DILocation(line: 3303, column: 12, scope: !9153)
!9159 = !DILocation(line: 3304, column: 3, scope: !9155)
!9160 = !DILocation(line: 3305, column: 6, scope: !9153)
!9161 = !DILocation(line: 3307, column: 6, scope: !9136)
!9162 = !DILocation(line: 3289, column: 7, scope: !9096)
!9163 = distinct !{!9163, !9097, !9164}
!9164 = !DILocation(line: 3308, column: 2, scope: !9093)
!9165 = !DILocation(line: 3309, column: 5, scope: !9074)
!9166 = !DILocation(line: 3311, column: 5, scope: !9061)
!9167 = !DILocation(line: 3313, column: 3, scope: !9015)
!9168 = !DILocation(line: 3314, column: 3, scope: !9015)
!9169 = !DILocation(line: 3315, column: 1, scope: !9015)
!9170 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !851, file: !851, line: 1815, type: !9171, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9171 = !DISubroutineType(types: !9172)
!9172 = !{!139, !5275}
!9173 = !DILocalVariable(name: "gs", arg: 1, scope: !9170, file: !851, line: 1815, type: !5275)
!9174 = !DILocation(line: 1815, column: 38, scope: !9170)
!9175 = !DILocalVariable(name: "code", scope: !9170, file: !851, line: 1817, type: !139)
!9176 = !DILocation(line: 1817, column: 18, scope: !9170)
!9177 = !DILocation(line: 1820, column: 28, scope: !9170)
!9178 = !DILocation(line: 1820, column: 10, scope: !9170)
!9179 = !DILocation(line: 1820, column: 8, scope: !9170)
!9180 = !DILocation(line: 1821, column: 29, scope: !9181)
!9181 = distinct !DILexicalBlock(scope: !9170, file: !851, line: 1821, column: 7)
!9182 = !DILocation(line: 1821, column: 7, scope: !9181)
!9183 = !DILocation(line: 1821, column: 35, scope: !9181)
!9184 = !DILocation(line: 1821, column: 7, scope: !9170)
!9185 = !DILocation(line: 1822, column: 12, scope: !9181)
!9186 = !DILocation(line: 1822, column: 10, scope: !9181)
!9187 = !DILocation(line: 1822, column: 5, scope: !9181)
!9188 = !DILocation(line: 1824, column: 10, scope: !9170)
!9189 = !DILocation(line: 1824, column: 3, scope: !9170)
!9190 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !851, file: !851, line: 1759, type: !5273, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9191 = !DILocalVariable(name: "gs", arg: 1, scope: !9190, file: !851, line: 1759, type: !5275)
!9192 = !DILocation(line: 1759, column: 34, scope: !9190)
!9193 = !DILocation(line: 1763, column: 23, scope: !9194)
!9194 = distinct !DILexicalBlock(scope: !9190, file: !851, line: 1763, column: 7)
!9195 = !DILocation(line: 1763, column: 7, scope: !9194)
!9196 = !DILocation(line: 1763, column: 27, scope: !9194)
!9197 = !DILocation(line: 1763, column: 7, scope: !9190)
!9198 = !DILocation(line: 1764, column: 23, scope: !9194)
!9199 = !DILocation(line: 1764, column: 12, scope: !9194)
!9200 = !DILocation(line: 1764, column: 5, scope: !9194)
!9201 = !DILocation(line: 1766, column: 5, scope: !9194)
!9202 = !DILocation(line: 1767, column: 1, scope: !9190)
!9203 = distinct !DISubprogram(name: "gimple_expr_type", scope: !851, file: !851, line: 4366, type: !5273, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9204 = !DILocalVariable(name: "stmt", arg: 1, scope: !9203, file: !851, line: 4366, type: !5275)
!9205 = !DILocation(line: 4366, column: 32, scope: !9203)
!9206 = !DILocalVariable(name: "code", scope: !9203, file: !851, line: 4368, type: !850)
!9207 = !DILocation(line: 4368, column: 20, scope: !9203)
!9208 = !DILocation(line: 4368, column: 40, scope: !9203)
!9209 = !DILocation(line: 4368, column: 27, scope: !9203)
!9210 = !DILocation(line: 4370, column: 7, scope: !9211)
!9211 = distinct !DILexicalBlock(scope: !9203, file: !851, line: 4370, column: 7)
!9212 = !DILocation(line: 4370, column: 12, scope: !9211)
!9213 = !DILocation(line: 4370, column: 29, scope: !9211)
!9214 = !DILocation(line: 4370, column: 32, scope: !9211)
!9215 = !DILocation(line: 4370, column: 37, scope: !9211)
!9216 = !DILocation(line: 4370, column: 7, scope: !9203)
!9217 = !DILocalVariable(name: "type", scope: !9218, file: !851, line: 4372, type: !1780)
!9218 = distinct !DILexicalBlock(scope: !9211, file: !851, line: 4371, column: 5)
!9219 = !DILocation(line: 4372, column: 12, scope: !9218)
!9220 = !DILocation(line: 4377, column: 11, scope: !9221)
!9221 = distinct !DILexicalBlock(scope: !9218, file: !851, line: 4377, column: 11)
!9222 = !DILocation(line: 4377, column: 16, scope: !9221)
!9223 = !DILocation(line: 4377, column: 11, scope: !9218)
!9224 = !DILocation(line: 4378, column: 34, scope: !9221)
!9225 = !DILocation(line: 4378, column: 9, scope: !9221)
!9226 = !DILocation(line: 4378, column: 7, scope: !9221)
!9227 = !DILocation(line: 4378, column: 2, scope: !9221)
!9228 = !DILocation(line: 4380, column: 34, scope: !9221)
!9229 = !DILocation(line: 4380, column: 10, scope: !9221)
!9230 = !DILocation(line: 4380, column: 2, scope: !9221)
!9231 = !DILocation(line: 4383, column: 13, scope: !9232)
!9232 = distinct !DILexicalBlock(scope: !9221, file: !851, line: 4381, column: 4)
!9233 = !DILocation(line: 4383, column: 11, scope: !9232)
!9234 = !DILocation(line: 4384, column: 6, scope: !9232)
!9235 = !DILocation(line: 4388, column: 13, scope: !9232)
!9236 = !DILocation(line: 4388, column: 11, scope: !9232)
!9237 = !DILocation(line: 4389, column: 6, scope: !9232)
!9238 = !DILocation(line: 4391, column: 14, scope: !9218)
!9239 = !DILocation(line: 4391, column: 7, scope: !9218)
!9240 = !DILocation(line: 4393, column: 12, scope: !9241)
!9241 = distinct !DILexicalBlock(scope: !9211, file: !851, line: 4393, column: 12)
!9242 = !DILocation(line: 4393, column: 17, scope: !9241)
!9243 = !DILocation(line: 4393, column: 12, scope: !9211)
!9244 = !DILocation(line: 4394, column: 12, scope: !9241)
!9245 = !DILocation(line: 4394, column: 5, scope: !9241)
!9246 = !DILocation(line: 4396, column: 12, scope: !9241)
!9247 = !DILocation(line: 4396, column: 5, scope: !9241)
!9248 = !DILocation(line: 4397, column: 1, scope: !9203)
!9249 = distinct !DISubprogram(name: "VEC_ce_s_heap_safe_push", scope: !3, file: !3, line: 407, type: !9250, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9250 = !DISubroutineType(types: !9251)
!9251 = !{!5456, !8119, !9252}
!9252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9253, size: 64)
!9253 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3166)
!9254 = !DILocalVariable(name: "vec_", arg: 1, scope: !9249, file: !3, line: 407, type: !8119)
!9255 = !DILocation(line: 407, column: 1, scope: !9249)
!9256 = !DILocalVariable(name: "obj_", arg: 2, scope: !9249, file: !3, line: 407, type: !9252)
!9257 = distinct !DISubprogram(name: "make_escape_constraint", scope: !3, file: !3, line: 3374, type: !6283, scopeLine: 3375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9258 = !DILocalVariable(name: "op", arg: 1, scope: !9257, file: !3, line: 3374, type: !1780)
!9259 = !DILocation(line: 3374, column: 30, scope: !9257)
!9260 = !DILocation(line: 3376, column: 35, scope: !9257)
!9261 = !DILocation(line: 3376, column: 3, scope: !9257)
!9262 = !DILocation(line: 3377, column: 1, scope: !9257)
!9263 = distinct !DISubprogram(name: "gimple_assign_cast_p", scope: !851, file: !851, line: 1853, type: !9264, scopeLine: 1854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9264 = !DISubroutineType(types: !9265)
!9265 = !{!1894, !2102}
!9266 = !DILocalVariable(name: "s", arg: 1, scope: !9263, file: !851, line: 1853, type: !2102)
!9267 = !DILocation(line: 1853, column: 30, scope: !9263)
!9268 = !DILocation(line: 1855, column: 25, scope: !9269)
!9269 = distinct !DILexicalBlock(scope: !9263, file: !851, line: 1855, column: 7)
!9270 = !DILocation(line: 1855, column: 7, scope: !9269)
!9271 = !DILocation(line: 1855, column: 7, scope: !9263)
!9272 = !DILocalVariable(name: "sc", scope: !9273, file: !851, line: 1857, type: !139)
!9273 = distinct !DILexicalBlock(scope: !9269, file: !851, line: 1856, column: 5)
!9274 = !DILocation(line: 1857, column: 22, scope: !9273)
!9275 = !DILocation(line: 1857, column: 51, scope: !9273)
!9276 = !DILocation(line: 1857, column: 27, scope: !9273)
!9277 = !DILocation(line: 1858, column: 14, scope: !9273)
!9278 = !DILocation(line: 1859, column: 7, scope: !9273)
!9279 = !DILocation(line: 1859, column: 10, scope: !9273)
!9280 = !DILocation(line: 1859, column: 13, scope: !9273)
!9281 = !DILocation(line: 1860, column: 7, scope: !9273)
!9282 = !DILocation(line: 1860, column: 10, scope: !9273)
!9283 = !DILocation(line: 1860, column: 13, scope: !9273)
!9284 = !DILocation(line: 1858, column: 7, scope: !9273)
!9285 = !DILocation(line: 1863, column: 3, scope: !9263)
!9286 = !DILocation(line: 1864, column: 1, scope: !9263)
!9287 = distinct !DISubprogram(name: "gimple_return_retval", scope: !851, file: !851, line: 4253, type: !5273, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9288 = !DILocalVariable(name: "gs", arg: 1, scope: !9287, file: !851, line: 4253, type: !5275)
!9289 = !DILocation(line: 4253, column: 36, scope: !9287)
!9290 = !DILocation(line: 4256, column: 21, scope: !9287)
!9291 = !DILocation(line: 4256, column: 10, scope: !9287)
!9292 = !DILocation(line: 4256, column: 3, scope: !9287)
!9293 = distinct !DISubprogram(name: "gimple_asm_noutputs", scope: !851, file: !851, line: 2591, type: !8130, scopeLine: 2592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9294 = !DILocalVariable(name: "gs", arg: 1, scope: !9293, file: !851, line: 2591, type: !5275)
!9295 = !DILocation(line: 2591, column: 35, scope: !9293)
!9296 = !DILocation(line: 2594, column: 10, scope: !9293)
!9297 = !DILocation(line: 2594, column: 14, scope: !9293)
!9298 = !DILocation(line: 2594, column: 25, scope: !9293)
!9299 = !DILocation(line: 2594, column: 3, scope: !9293)
!9300 = distinct !DISubprogram(name: "gimple_asm_output_op", scope: !851, file: !851, line: 2652, type: !8243, scopeLine: 2653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9301 = !DILocalVariable(name: "gs", arg: 1, scope: !9300, file: !851, line: 2652, type: !5275)
!9302 = !DILocation(line: 2652, column: 36, scope: !9300)
!9303 = !DILocalVariable(name: "index", arg: 2, scope: !9300, file: !851, line: 2652, type: !6)
!9304 = !DILocation(line: 2652, column: 49, scope: !9300)
!9305 = !DILocation(line: 2655, column: 3, scope: !9300)
!9306 = !DILocation(line: 2656, column: 21, scope: !9300)
!9307 = !DILocation(line: 2656, column: 25, scope: !9300)
!9308 = !DILocation(line: 2656, column: 33, scope: !9300)
!9309 = !DILocation(line: 2656, column: 37, scope: !9300)
!9310 = !DILocation(line: 2656, column: 48, scope: !9300)
!9311 = !DILocation(line: 2656, column: 31, scope: !9300)
!9312 = !DILocation(line: 2656, column: 10, scope: !9300)
!9313 = !DILocation(line: 2656, column: 3, scope: !9300)
!9314 = distinct !DISubprogram(name: "gimple_asm_ninputs", scope: !851, file: !851, line: 2581, type: !8130, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9315 = !DILocalVariable(name: "gs", arg: 1, scope: !9314, file: !851, line: 2581, type: !5275)
!9316 = !DILocation(line: 2581, column: 34, scope: !9314)
!9317 = !DILocation(line: 2584, column: 10, scope: !9314)
!9318 = !DILocation(line: 2584, column: 14, scope: !9314)
!9319 = !DILocation(line: 2584, column: 25, scope: !9314)
!9320 = !DILocation(line: 2584, column: 3, scope: !9314)
!9321 = distinct !DISubprogram(name: "gimple_asm_input_op", scope: !851, file: !851, line: 2619, type: !8243, scopeLine: 2620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9322 = !DILocalVariable(name: "gs", arg: 1, scope: !9321, file: !851, line: 2619, type: !5275)
!9323 = !DILocation(line: 2619, column: 35, scope: !9321)
!9324 = !DILocalVariable(name: "index", arg: 2, scope: !9321, file: !851, line: 2619, type: !6)
!9325 = !DILocation(line: 2619, column: 48, scope: !9321)
!9326 = !DILocation(line: 2622, column: 3, scope: !9321)
!9327 = !DILocation(line: 2623, column: 21, scope: !9321)
!9328 = !DILocation(line: 2623, column: 25, scope: !9321)
!9329 = !DILocation(line: 2623, column: 10, scope: !9321)
!9330 = !DILocation(line: 2623, column: 3, scope: !9321)
!9331 = distinct !DISubprogram(name: "get_constraint_for_1", scope: !3, file: !3, line: 3119, type: !9332, scopeLine: 3120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9332 = !DISubroutineType(types: !9333)
!9333 = !{null, !1780, !8119, !1894}
!9334 = !DILocalVariable(name: "t", arg: 1, scope: !9331, file: !3, line: 3119, type: !1780)
!9335 = !DILocation(line: 3119, column: 28, scope: !9331)
!9336 = !DILocalVariable(name: "results", arg: 2, scope: !9331, file: !3, line: 3119, type: !8119)
!9337 = !DILocation(line: 3119, column: 50, scope: !9331)
!9338 = !DILocalVariable(name: "address_p", arg: 3, scope: !9331, file: !3, line: 3119, type: !1894)
!9339 = !DILocation(line: 3119, column: 64, scope: !9331)
!9340 = !DILocalVariable(name: "temp", scope: !9331, file: !3, line: 3121, type: !1720)
!9341 = !DILocation(line: 3121, column: 26, scope: !9331)
!9342 = !DILocation(line: 3136, column: 7, scope: !9343)
!9343 = distinct !DILexicalBlock(scope: !9331, file: !3, line: 3136, column: 7)
!9344 = !DILocation(line: 3137, column: 7, scope: !9343)
!9345 = !DILocation(line: 3137, column: 12, scope: !9343)
!9346 = !DILocation(line: 3137, column: 26, scope: !9343)
!9347 = !DILocation(line: 3138, column: 5, scope: !9343)
!9348 = !DILocation(line: 3138, column: 23, scope: !9343)
!9349 = !DILocation(line: 3138, column: 8, scope: !9343)
!9350 = !DILocation(line: 3141, column: 4, scope: !9343)
!9351 = !DILocation(line: 3141, column: 7, scope: !9343)
!9352 = !DILocation(line: 3141, column: 21, scope: !9343)
!9353 = !DILocation(line: 3136, column: 7, scope: !9331)
!9354 = !DILocation(line: 3143, column: 12, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9343, file: !3, line: 3142, column: 5)
!9356 = !DILocation(line: 3143, column: 16, scope: !9355)
!9357 = !DILocation(line: 3144, column: 12, scope: !9355)
!9358 = !DILocation(line: 3144, column: 17, scope: !9355)
!9359 = !DILocation(line: 3145, column: 12, scope: !9355)
!9360 = !DILocation(line: 3145, column: 19, scope: !9355)
!9361 = !DILocation(line: 3146, column: 7, scope: !9355)
!9362 = !DILocation(line: 3147, column: 7, scope: !9355)
!9363 = !DILocation(line: 3151, column: 7, scope: !9364)
!9364 = distinct !DILexicalBlock(scope: !9331, file: !3, line: 3151, column: 7)
!9365 = !DILocation(line: 3151, column: 21, scope: !9364)
!9366 = !DILocation(line: 3151, column: 7, scope: !9331)
!9367 = !DILocation(line: 3153, column: 12, scope: !9368)
!9368 = distinct !DILexicalBlock(scope: !9364, file: !3, line: 3152, column: 5)
!9369 = !DILocation(line: 3153, column: 16, scope: !9368)
!9370 = !DILocation(line: 3154, column: 12, scope: !9368)
!9371 = !DILocation(line: 3154, column: 17, scope: !9368)
!9372 = !DILocation(line: 3155, column: 12, scope: !9368)
!9373 = !DILocation(line: 3155, column: 19, scope: !9368)
!9374 = !DILocation(line: 3156, column: 7, scope: !9368)
!9375 = !DILocation(line: 3157, column: 7, scope: !9368)
!9376 = !DILocation(line: 3160, column: 11, scope: !9331)
!9377 = !DILocation(line: 3160, column: 3, scope: !9331)
!9378 = !DILocation(line: 3164, column: 10, scope: !9379)
!9379 = distinct !DILexicalBlock(scope: !9380, file: !3, line: 3163, column: 7)
!9380 = distinct !DILexicalBlock(scope: !9331, file: !3, line: 3161, column: 5)
!9381 = !DILocation(line: 3164, column: 2, scope: !9379)
!9382 = !DILocation(line: 3167, column: 37, scope: !9383)
!9383 = distinct !DILexicalBlock(scope: !9379, file: !3, line: 3165, column: 4)
!9384 = !DILocation(line: 3167, column: 58, scope: !9383)
!9385 = !DILocation(line: 3167, column: 6, scope: !9383)
!9386 = !DILocation(line: 3168, column: 6, scope: !9383)
!9387 = !DILocation(line: 3170, column: 4, scope: !9383)
!9388 = !DILocation(line: 3171, column: 2, scope: !9379)
!9389 = !DILocation(line: 3175, column: 10, scope: !9390)
!9390 = distinct !DILexicalBlock(scope: !9380, file: !3, line: 3174, column: 7)
!9391 = !DILocation(line: 3175, column: 2, scope: !9390)
!9392 = !DILocation(line: 3179, column: 30, scope: !9393)
!9393 = distinct !DILexicalBlock(scope: !9394, file: !3, line: 3178, column: 6)
!9394 = distinct !DILexicalBlock(scope: !9390, file: !3, line: 3176, column: 4)
!9395 = !DILocation(line: 3179, column: 51, scope: !9393)
!9396 = !DILocation(line: 3179, column: 60, scope: !9393)
!9397 = !DILocation(line: 3179, column: 8, scope: !9393)
!9398 = !DILocation(line: 3180, column: 18, scope: !9393)
!9399 = !DILocation(line: 3180, column: 8, scope: !9393)
!9400 = !DILocation(line: 3181, column: 8, scope: !9393)
!9401 = !DILocation(line: 3186, column: 40, scope: !9394)
!9402 = !DILocation(line: 3186, column: 43, scope: !9394)
!9403 = !DILocation(line: 3186, column: 52, scope: !9394)
!9404 = !DILocation(line: 3186, column: 6, scope: !9394)
!9405 = !DILocation(line: 3187, column: 6, scope: !9394)
!9406 = !DILocation(line: 3189, column: 28, scope: !9394)
!9407 = !DILocation(line: 3189, column: 49, scope: !9394)
!9408 = !DILocation(line: 3189, column: 58, scope: !9394)
!9409 = !DILocation(line: 3189, column: 6, scope: !9394)
!9410 = !DILocation(line: 3190, column: 6, scope: !9394)
!9411 = !DILocation(line: 3193, column: 4, scope: !9394)
!9412 = !DILocation(line: 3194, column: 2, scope: !9390)
!9413 = !DILocation(line: 3198, column: 10, scope: !9414)
!9414 = distinct !DILexicalBlock(scope: !9380, file: !3, line: 3197, column: 7)
!9415 = !DILocation(line: 3198, column: 2, scope: !9414)
!9416 = !DILocation(line: 3202, column: 36, scope: !9417)
!9417 = distinct !DILexicalBlock(scope: !9418, file: !3, line: 3201, column: 6)
!9418 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 3199, column: 4)
!9419 = !DILocation(line: 3202, column: 39, scope: !9417)
!9420 = !DILocation(line: 3202, column: 48, scope: !9417)
!9421 = !DILocation(line: 3202, column: 8, scope: !9417)
!9422 = !DILocation(line: 3203, column: 8, scope: !9417)
!9423 = !DILocation(line: 3206, column: 4, scope: !9418)
!9424 = !DILocation(line: 3207, column: 2, scope: !9414)
!9425 = !DILocation(line: 3211, column: 30, scope: !9426)
!9426 = distinct !DILexicalBlock(scope: !9380, file: !3, line: 3210, column: 7)
!9427 = !DILocation(line: 3211, column: 33, scope: !9426)
!9428 = !DILocation(line: 3211, column: 42, scope: !9426)
!9429 = !DILocation(line: 3211, column: 2, scope: !9426)
!9430 = !DILocation(line: 3212, column: 2, scope: !9426)
!9431 = !DILocation(line: 3215, column: 5, scope: !9380)
!9432 = !DILocation(line: 3218, column: 8, scope: !9331)
!9433 = !DILocation(line: 3218, column: 13, scope: !9331)
!9434 = !DILocation(line: 3219, column: 8, scope: !9331)
!9435 = !DILocation(line: 3219, column: 12, scope: !9331)
!9436 = !DILocation(line: 3220, column: 8, scope: !9331)
!9437 = !DILocation(line: 3220, column: 15, scope: !9331)
!9438 = !DILocation(line: 3221, column: 3, scope: !9331)
!9439 = !DILocation(line: 3222, column: 1, scope: !9331)
!9440 = distinct !DISubprogram(name: "get_constraint_for_address_of", scope: !3, file: !3, line: 3100, type: !8117, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9441 = !DILocalVariable(name: "t", arg: 1, scope: !9440, file: !3, line: 3100, type: !1780)
!9442 = !DILocation(line: 3100, column: 37, scope: !9440)
!9443 = !DILocalVariable(name: "results", arg: 2, scope: !9440, file: !3, line: 3100, type: !8119)
!9444 = !DILocation(line: 3100, column: 59, scope: !9440)
!9445 = !DILocalVariable(name: "c", scope: !9440, file: !3, line: 3102, type: !5295)
!9446 = !DILocation(line: 3102, column: 27, scope: !9440)
!9447 = !DILocalVariable(name: "i", scope: !9440, file: !3, line: 3103, type: !6)
!9448 = !DILocation(line: 3103, column: 16, scope: !9440)
!9449 = !DILocation(line: 3105, column: 25, scope: !9440)
!9450 = !DILocation(line: 3105, column: 28, scope: !9440)
!9451 = !DILocation(line: 3105, column: 3, scope: !9440)
!9452 = !DILocation(line: 3107, column: 10, scope: !9453)
!9453 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 3107, column: 3)
!9454 = !DILocation(line: 3107, column: 8, scope: !9453)
!9455 = !DILocation(line: 3107, column: 15, scope: !9456)
!9456 = distinct !DILexicalBlock(scope: !9453, file: !3, line: 3107, column: 3)
!9457 = !DILocation(line: 3107, column: 3, scope: !9453)
!9458 = !DILocation(line: 3109, column: 11, scope: !9459)
!9459 = distinct !DILexicalBlock(scope: !9460, file: !3, line: 3109, column: 11)
!9460 = distinct !DILexicalBlock(scope: !9456, file: !3, line: 3108, column: 5)
!9461 = !DILocation(line: 3109, column: 14, scope: !9459)
!9462 = !DILocation(line: 3109, column: 19, scope: !9459)
!9463 = !DILocation(line: 3109, column: 11, scope: !9460)
!9464 = !DILocation(line: 3110, column: 2, scope: !9459)
!9465 = !DILocation(line: 3110, column: 5, scope: !9459)
!9466 = !DILocation(line: 3110, column: 10, scope: !9459)
!9467 = !DILocation(line: 3112, column: 2, scope: !9459)
!9468 = !DILocation(line: 3112, column: 5, scope: !9459)
!9469 = !DILocation(line: 3112, column: 10, scope: !9459)
!9470 = !DILocation(line: 3113, column: 5, scope: !9460)
!9471 = !DILocation(line: 3107, column: 52, scope: !9456)
!9472 = !DILocation(line: 3107, column: 3, scope: !9456)
!9473 = distinct !{!9473, !9457, !9474}
!9474 = !DILocation(line: 3113, column: 5, scope: !9453)
!9475 = !DILocation(line: 3114, column: 1, scope: !9440)
!9476 = distinct !DISubprogram(name: "get_constraint_for_component_ref", scope: !3, file: !3, line: 2941, type: !9332, scopeLine: 2943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9477 = !DILocalVariable(name: "t", arg: 1, scope: !9476, file: !3, line: 2941, type: !1780)
!9478 = !DILocation(line: 2941, column: 40, scope: !9476)
!9479 = !DILocalVariable(name: "results", arg: 2, scope: !9476, file: !3, line: 2941, type: !8119)
!9480 = !DILocation(line: 2941, column: 61, scope: !9476)
!9481 = !DILocalVariable(name: "address_p", arg: 3, scope: !9476, file: !3, line: 2942, type: !1894)
!9482 = !DILocation(line: 2942, column: 12, scope: !9476)
!9483 = !DILocalVariable(name: "orig_t", scope: !9476, file: !3, line: 2944, type: !1780)
!9484 = !DILocation(line: 2944, column: 8, scope: !9476)
!9485 = !DILocation(line: 2944, column: 17, scope: !9476)
!9486 = !DILocalVariable(name: "bitsize", scope: !9476, file: !3, line: 2945, type: !1714)
!9487 = !DILocation(line: 2945, column: 17, scope: !9476)
!9488 = !DILocalVariable(name: "bitmaxsize", scope: !9476, file: !3, line: 2946, type: !1714)
!9489 = !DILocation(line: 2946, column: 17, scope: !9476)
!9490 = !DILocalVariable(name: "bitpos", scope: !9476, file: !3, line: 2947, type: !1714)
!9491 = !DILocation(line: 2947, column: 17, scope: !9476)
!9492 = !DILocalVariable(name: "forzero", scope: !9476, file: !3, line: 2948, type: !1780)
!9493 = !DILocation(line: 2948, column: 8, scope: !9476)
!9494 = !DILocalVariable(name: "result", scope: !9476, file: !3, line: 2949, type: !5295)
!9495 = !DILocation(line: 2949, column: 27, scope: !9476)
!9496 = !DILocation(line: 2953, column: 13, scope: !9476)
!9497 = !DILocation(line: 2953, column: 11, scope: !9476)
!9498 = !DILocation(line: 2954, column: 3, scope: !9476)
!9499 = !DILocation(line: 2954, column: 11, scope: !9476)
!9500 = !DILocation(line: 2954, column: 31, scope: !9476)
!9501 = !DILocation(line: 2954, column: 35, scope: !9476)
!9502 = !DILocation(line: 2954, column: 34, scope: !9476)
!9503 = !DILocation(line: 0, scope: !9476)
!9504 = !DILocation(line: 2955, column: 15, scope: !9476)
!9505 = !DILocation(line: 2955, column: 13, scope: !9476)
!9506 = distinct !{!9506, !9498, !9504}
!9507 = !DILocation(line: 2957, column: 7, scope: !9508)
!9508 = distinct !DILexicalBlock(scope: !9476, file: !3, line: 2957, column: 7)
!9509 = !DILocation(line: 2957, column: 34, scope: !9508)
!9510 = !DILocation(line: 2957, column: 52, scope: !9508)
!9511 = !DILocation(line: 2957, column: 37, scope: !9508)
!9512 = !DILocation(line: 2957, column: 7, scope: !9476)
!9513 = !DILocalVariable(name: "temp", scope: !9514, file: !3, line: 2959, type: !1720)
!9514 = distinct !DILexicalBlock(scope: !9508, file: !3, line: 2958, column: 5)
!9515 = !DILocation(line: 2959, column: 30, scope: !9514)
!9516 = !DILocation(line: 2961, column: 12, scope: !9514)
!9517 = !DILocation(line: 2961, column: 19, scope: !9514)
!9518 = !DILocation(line: 2962, column: 12, scope: !9514)
!9519 = !DILocation(line: 2962, column: 16, scope: !9514)
!9520 = !DILocation(line: 2963, column: 12, scope: !9514)
!9521 = !DILocation(line: 2963, column: 17, scope: !9514)
!9522 = !DILocation(line: 2964, column: 7, scope: !9514)
!9523 = !DILocation(line: 2965, column: 7, scope: !9514)
!9524 = !DILocation(line: 2968, column: 32, scope: !9476)
!9525 = !DILocation(line: 2968, column: 7, scope: !9476)
!9526 = !DILocation(line: 2968, column: 5, scope: !9476)
!9527 = !DILocation(line: 2972, column: 25, scope: !9476)
!9528 = !DILocation(line: 2972, column: 28, scope: !9476)
!9529 = !DILocation(line: 2972, column: 3, scope: !9476)
!9530 = !DILocation(line: 2973, column: 3, scope: !9476)
!9531 = !DILocation(line: 2974, column: 12, scope: !9476)
!9532 = !DILocation(line: 2974, column: 10, scope: !9476)
!9533 = !DILocation(line: 2976, column: 7, scope: !9534)
!9534 = distinct !DILexicalBlock(scope: !9476, file: !3, line: 2976, column: 7)
!9535 = !DILocation(line: 2976, column: 15, scope: !9534)
!9536 = !DILocation(line: 2976, column: 20, scope: !9534)
!9537 = !DILocation(line: 2977, column: 7, scope: !9534)
!9538 = !DILocation(line: 2977, column: 23, scope: !9534)
!9539 = !DILocation(line: 2977, column: 31, scope: !9534)
!9540 = !DILocation(line: 2977, column: 10, scope: !9534)
!9541 = !DILocation(line: 2977, column: 37, scope: !9534)
!9542 = !DILocation(line: 2976, column: 7, scope: !9476)
!9543 = !DILocation(line: 2979, column: 5, scope: !9534)
!9544 = !DILocation(line: 2979, column: 13, scope: !9534)
!9545 = !DILocation(line: 2979, column: 20, scope: !9534)
!9546 = !DILocation(line: 2980, column: 12, scope: !9547)
!9547 = distinct !DILexicalBlock(scope: !9534, file: !3, line: 2980, column: 12)
!9548 = !DILocation(line: 2980, column: 20, scope: !9547)
!9549 = !DILocation(line: 2980, column: 25, scope: !9547)
!9550 = !DILocation(line: 2980, column: 12, scope: !9534)
!9551 = !DILocation(line: 2987, column: 35, scope: !9552)
!9552 = distinct !DILexicalBlock(scope: !9553, file: !3, line: 2987, column: 11)
!9553 = distinct !DILexicalBlock(scope: !9547, file: !3, line: 2981, column: 5)
!9554 = !DILocation(line: 2987, column: 57, scope: !9552)
!9555 = !DILocation(line: 2987, column: 65, scope: !9552)
!9556 = !DILocation(line: 2987, column: 44, scope: !9552)
!9557 = !DILocation(line: 2987, column: 71, scope: !9552)
!9558 = !DILocation(line: 2987, column: 42, scope: !9552)
!9559 = !DILocation(line: 2988, column: 4, scope: !9552)
!9560 = !DILocation(line: 2988, column: 7, scope: !9552)
!9561 = !DILocation(line: 2988, column: 18, scope: !9552)
!9562 = !DILocation(line: 2987, column: 11, scope: !9553)
!9563 = !DILocalVariable(name: "cexpr", scope: !9564, file: !3, line: 2994, type: !1720)
!9564 = distinct !DILexicalBlock(scope: !9552, file: !3, line: 2989, column: 2)
!9565 = !DILocation(line: 2994, column: 27, scope: !9564)
!9566 = !DILocation(line: 2994, column: 36, scope: !9564)
!9567 = !DILocation(line: 2994, column: 35, scope: !9564)
!9568 = !DILocalVariable(name: "curr", scope: !9564, file: !3, line: 2995, type: !1758)
!9569 = !DILocation(line: 2995, column: 14, scope: !9564)
!9570 = !DILocation(line: 2996, column: 4, scope: !9564)
!9571 = !DILocation(line: 2997, column: 10, scope: !9564)
!9572 = !DILocation(line: 2997, column: 17, scope: !9564)
!9573 = !DILocation(line: 2998, column: 35, scope: !9574)
!9574 = distinct !DILexicalBlock(scope: !9564, file: !3, line: 2998, column: 4)
!9575 = !DILocation(line: 2998, column: 16, scope: !9574)
!9576 = !DILocation(line: 2998, column: 14, scope: !9574)
!9577 = !DILocation(line: 2998, column: 9, scope: !9574)
!9578 = !DILocation(line: 2998, column: 41, scope: !9579)
!9579 = distinct !DILexicalBlock(scope: !9574, file: !3, line: 2998, column: 4)
!9580 = !DILocation(line: 2998, column: 4, scope: !9574)
!9581 = !DILocation(line: 3000, column: 30, scope: !9582)
!9582 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 3000, column: 12)
!9583 = distinct !DILexicalBlock(scope: !9579, file: !3, line: 2999, column: 6)
!9584 = !DILocation(line: 3000, column: 36, scope: !9582)
!9585 = !DILocation(line: 3000, column: 44, scope: !9582)
!9586 = !DILocation(line: 3000, column: 50, scope: !9582)
!9587 = !DILocation(line: 3001, column: 9, scope: !9582)
!9588 = !DILocation(line: 3001, column: 17, scope: !9582)
!9589 = !DILocation(line: 3000, column: 12, scope: !9582)
!9590 = !DILocation(line: 3000, column: 12, scope: !9583)
!9591 = !DILocation(line: 3003, column: 17, scope: !9592)
!9592 = distinct !DILexicalBlock(scope: !9582, file: !3, line: 3002, column: 3)
!9593 = !DILocation(line: 3003, column: 23, scope: !9592)
!9594 = !DILocation(line: 3003, column: 11, scope: !9592)
!9595 = !DILocation(line: 3003, column: 15, scope: !9592)
!9596 = !DILocation(line: 3004, column: 5, scope: !9592)
!9597 = !DILocation(line: 3005, column: 9, scope: !9598)
!9598 = distinct !DILexicalBlock(scope: !9592, file: !3, line: 3005, column: 9)
!9599 = !DILocation(line: 3005, column: 9, scope: !9592)
!9600 = !DILocation(line: 3006, column: 7, scope: !9598)
!9601 = !DILocation(line: 3007, column: 3, scope: !9592)
!9602 = !DILocation(line: 3008, column: 6, scope: !9583)
!9603 = !DILocation(line: 2998, column: 54, scope: !9579)
!9604 = !DILocation(line: 2998, column: 60, scope: !9579)
!9605 = !DILocation(line: 2998, column: 52, scope: !9579)
!9606 = !DILocation(line: 2998, column: 4, scope: !9579)
!9607 = distinct !{!9607, !9580, !9608}
!9608 = !DILocation(line: 3008, column: 6, scope: !9574)
!9609 = !DILocation(line: 3012, column: 8, scope: !9610)
!9610 = distinct !DILexicalBlock(scope: !9564, file: !3, line: 3012, column: 8)
!9611 = !DILocation(line: 3013, column: 8, scope: !9610)
!9612 = !DILocation(line: 3013, column: 11, scope: !9610)
!9613 = !DILocation(line: 3013, column: 39, scope: !9610)
!9614 = !DILocation(line: 3012, column: 8, scope: !9564)
!9615 = !DILocation(line: 3015, column: 34, scope: !9616)
!9616 = distinct !DILexicalBlock(scope: !9610, file: !3, line: 3014, column: 6)
!9617 = !DILocation(line: 3015, column: 15, scope: !9616)
!9618 = !DILocation(line: 3015, column: 13, scope: !9616)
!9619 = !DILocation(line: 3016, column: 8, scope: !9616)
!9620 = !DILocation(line: 3016, column: 15, scope: !9616)
!9621 = !DILocation(line: 3016, column: 21, scope: !9616)
!9622 = !DILocation(line: 3016, column: 26, scope: !9616)
!9623 = !DILocation(line: 3017, column: 10, scope: !9616)
!9624 = !DILocation(line: 3017, column: 16, scope: !9616)
!9625 = !DILocation(line: 3017, column: 8, scope: !9616)
!9626 = distinct !{!9626, !9619, !9624}
!9627 = !DILocation(line: 3018, column: 20, scope: !9616)
!9628 = !DILocation(line: 3018, column: 26, scope: !9616)
!9629 = !DILocation(line: 3018, column: 14, scope: !9616)
!9630 = !DILocation(line: 3018, column: 18, scope: !9616)
!9631 = !DILocation(line: 3019, column: 8, scope: !9616)
!9632 = !DILocation(line: 3020, column: 6, scope: !9616)
!9633 = !DILocation(line: 3026, column: 6, scope: !9610)
!9634 = !DILocation(line: 3028, column: 2, scope: !9564)
!9635 = !DILocation(line: 3029, column: 16, scope: !9636)
!9636 = distinct !DILexicalBlock(scope: !9552, file: !3, line: 3029, column: 16)
!9637 = !DILocation(line: 3029, column: 27, scope: !9636)
!9638 = !DILocation(line: 3029, column: 16, scope: !9552)
!9639 = !DILocation(line: 3031, column: 8, scope: !9640)
!9640 = distinct !DILexicalBlock(scope: !9641, file: !3, line: 3031, column: 8)
!9641 = distinct !DILexicalBlock(scope: !9636, file: !3, line: 3030, column: 2)
!9642 = !DILocation(line: 3031, column: 18, scope: !9640)
!9643 = !DILocation(line: 3031, column: 22, scope: !9640)
!9644 = !DILocation(line: 3031, column: 33, scope: !9640)
!9645 = !DILocation(line: 3031, column: 8, scope: !9641)
!9646 = !DILocation(line: 3032, column: 15, scope: !9640)
!9647 = !DILocation(line: 3032, column: 6, scope: !9640)
!9648 = !DILocation(line: 3034, column: 2, scope: !9641)
!9649 = !DILocation(line: 3036, column: 6, scope: !9650)
!9650 = distinct !DILexicalBlock(scope: !9636, file: !3, line: 3036, column: 6)
!9651 = !DILocation(line: 3036, column: 16, scope: !9650)
!9652 = !DILocation(line: 3036, column: 20, scope: !9650)
!9653 = !DILocation(line: 3036, column: 31, scope: !9650)
!9654 = !DILocation(line: 3036, column: 6, scope: !9636)
!9655 = !DILocation(line: 3037, column: 13, scope: !9650)
!9656 = !DILocation(line: 3037, column: 4, scope: !9650)
!9657 = !DILocation(line: 3038, column: 5, scope: !9553)
!9658 = !DILocation(line: 3039, column: 12, scope: !9659)
!9659 = distinct !DILexicalBlock(scope: !9547, file: !3, line: 3039, column: 12)
!9660 = !DILocation(line: 3039, column: 20, scope: !9659)
!9661 = !DILocation(line: 3039, column: 25, scope: !9659)
!9662 = !DILocation(line: 3039, column: 12, scope: !9547)
!9663 = !DILocation(line: 3044, column: 11, scope: !9664)
!9664 = distinct !DILexicalBlock(scope: !9665, file: !3, line: 3044, column: 11)
!9665 = distinct !DILexicalBlock(scope: !9659, file: !3, line: 3040, column: 5)
!9666 = !DILocation(line: 3044, column: 18, scope: !9664)
!9667 = !DILocation(line: 3045, column: 4, scope: !9664)
!9668 = !DILocation(line: 3045, column: 7, scope: !9664)
!9669 = !DILocation(line: 3045, column: 18, scope: !9664)
!9670 = !DILocation(line: 3045, column: 15, scope: !9664)
!9671 = !DILocation(line: 3046, column: 4, scope: !9664)
!9672 = !DILocation(line: 3046, column: 7, scope: !9664)
!9673 = !DILocation(line: 3044, column: 11, scope: !9665)
!9674 = !DILocation(line: 3047, column: 2, scope: !9664)
!9675 = !DILocation(line: 3047, column: 10, scope: !9664)
!9676 = !DILocation(line: 3047, column: 17, scope: !9664)
!9677 = !DILocation(line: 3049, column: 19, scope: !9664)
!9678 = !DILocation(line: 3049, column: 2, scope: !9664)
!9679 = !DILocation(line: 3049, column: 10, scope: !9664)
!9680 = !DILocation(line: 3049, column: 17, scope: !9664)
!9681 = !DILocation(line: 3050, column: 5, scope: !9665)
!9682 = !DILocation(line: 3051, column: 12, scope: !9683)
!9683 = distinct !DILexicalBlock(scope: !9659, file: !3, line: 3051, column: 12)
!9684 = !DILocation(line: 3051, column: 20, scope: !9683)
!9685 = !DILocation(line: 3051, column: 25, scope: !9683)
!9686 = !DILocation(line: 3051, column: 12, scope: !9659)
!9687 = !DILocation(line: 3055, column: 7, scope: !9688)
!9688 = distinct !DILexicalBlock(scope: !9683, file: !3, line: 3052, column: 5)
!9689 = !DILocation(line: 3055, column: 15, scope: !9688)
!9690 = !DILocation(line: 3055, column: 20, scope: !9688)
!9691 = !DILocation(line: 3056, column: 7, scope: !9688)
!9692 = !DILocation(line: 3056, column: 15, scope: !9688)
!9693 = !DILocation(line: 3056, column: 19, scope: !9688)
!9694 = !DILocation(line: 3057, column: 7, scope: !9688)
!9695 = !DILocation(line: 3057, column: 15, scope: !9688)
!9696 = !DILocation(line: 3057, column: 22, scope: !9688)
!9697 = !DILocation(line: 3058, column: 5, scope: !9688)
!9698 = !DILocation(line: 3060, column: 5, scope: !9683)
!9699 = !DILocation(line: 3061, column: 1, scope: !9476)
!9700 = distinct !DISubprogram(name: "get_constraint_for_ssa_var", scope: !3, file: !3, line: 2693, type: !9332, scopeLine: 2694, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9701 = !DILocalVariable(name: "t", arg: 1, scope: !9700, file: !3, line: 2693, type: !1780)
!9702 = !DILocation(line: 2693, column: 34, scope: !9700)
!9703 = !DILocalVariable(name: "results", arg: 2, scope: !9700, file: !3, line: 2693, type: !8119)
!9704 = !DILocation(line: 2693, column: 55, scope: !9700)
!9705 = !DILocalVariable(name: "address_p", arg: 3, scope: !9700, file: !3, line: 2693, type: !1894)
!9706 = !DILocation(line: 2693, column: 69, scope: !9700)
!9707 = !DILocalVariable(name: "cexpr", scope: !9700, file: !3, line: 2695, type: !1720)
!9708 = !DILocation(line: 2695, column: 26, scope: !9700)
!9709 = !DILocalVariable(name: "vi", scope: !9700, file: !3, line: 2696, type: !1758)
!9710 = !DILocation(line: 2696, column: 13, scope: !9700)
!9711 = !DILocation(line: 2699, column: 3, scope: !9700)
!9712 = !DILocation(line: 2703, column: 7, scope: !9713)
!9713 = distinct !DILexicalBlock(scope: !9700, file: !3, line: 2703, column: 7)
!9714 = !DILocation(line: 2703, column: 21, scope: !9713)
!9715 = !DILocation(line: 2704, column: 7, scope: !9713)
!9716 = !DILocation(line: 2704, column: 10, scope: !9713)
!9717 = !DILocation(line: 2704, column: 39, scope: !9713)
!9718 = !DILocation(line: 2705, column: 7, scope: !9713)
!9719 = !DILocation(line: 2705, column: 10, scope: !9713)
!9720 = !DILocation(line: 2703, column: 7, scope: !9700)
!9721 = !DILocation(line: 2707, column: 35, scope: !9722)
!9722 = distinct !DILexicalBlock(scope: !9713, file: !3, line: 2706, column: 5)
!9723 = !DILocation(line: 2707, column: 53, scope: !9722)
!9724 = !DILocation(line: 2707, column: 62, scope: !9722)
!9725 = !DILocation(line: 2707, column: 7, scope: !9722)
!9726 = !DILocation(line: 2708, column: 7, scope: !9722)
!9727 = !DILocation(line: 2711, column: 25, scope: !9700)
!9728 = !DILocation(line: 2711, column: 8, scope: !9700)
!9729 = !DILocation(line: 2711, column: 6, scope: !9700)
!9730 = !DILocation(line: 2712, column: 15, scope: !9700)
!9731 = !DILocation(line: 2712, column: 19, scope: !9700)
!9732 = !DILocation(line: 2712, column: 9, scope: !9700)
!9733 = !DILocation(line: 2712, column: 13, scope: !9700)
!9734 = !DILocation(line: 2713, column: 9, scope: !9700)
!9735 = !DILocation(line: 2713, column: 14, scope: !9700)
!9736 = !DILocation(line: 2714, column: 9, scope: !9700)
!9737 = !DILocation(line: 2714, column: 16, scope: !9700)
!9738 = !DILocation(line: 2717, column: 13, scope: !9739)
!9739 = distinct !DILexicalBlock(scope: !9700, file: !3, line: 2717, column: 7)
!9740 = !DILocation(line: 2717, column: 17, scope: !9739)
!9741 = !DILocation(line: 2717, column: 32, scope: !9739)
!9742 = !DILocation(line: 2717, column: 35, scope: !9739)
!9743 = !DILocation(line: 2717, column: 7, scope: !9700)
!9744 = !DILocation(line: 2719, column: 7, scope: !9745)
!9745 = distinct !DILexicalBlock(scope: !9739, file: !3, line: 2718, column: 5)
!9746 = !DILocation(line: 2720, column: 13, scope: !9745)
!9747 = !DILocation(line: 2720, column: 18, scope: !9745)
!9748 = !DILocation(line: 2721, column: 13, scope: !9745)
!9749 = !DILocation(line: 2721, column: 17, scope: !9745)
!9750 = !DILocation(line: 2722, column: 5, scope: !9745)
!9751 = !DILocation(line: 2726, column: 8, scope: !9752)
!9752 = distinct !DILexicalBlock(scope: !9700, file: !3, line: 2726, column: 7)
!9753 = !DILocation(line: 2727, column: 7, scope: !9752)
!9754 = !DILocation(line: 2727, column: 11, scope: !9752)
!9755 = !DILocation(line: 2727, column: 15, scope: !9752)
!9756 = !DILocation(line: 2726, column: 7, scope: !9700)
!9757 = !DILocation(line: 2729, column: 7, scope: !9758)
!9758 = distinct !DILexicalBlock(scope: !9752, file: !3, line: 2728, column: 5)
!9759 = !DILocation(line: 2729, column: 14, scope: !9760)
!9760 = distinct !DILexicalBlock(scope: !9761, file: !3, line: 2729, column: 7)
!9761 = distinct !DILexicalBlock(scope: !9758, file: !3, line: 2729, column: 7)
!9762 = !DILocation(line: 2729, column: 7, scope: !9761)
!9763 = !DILocation(line: 2731, column: 16, scope: !9764)
!9764 = distinct !DILexicalBlock(scope: !9760, file: !3, line: 2730, column: 2)
!9765 = !DILocation(line: 2731, column: 20, scope: !9764)
!9766 = !DILocation(line: 2731, column: 10, scope: !9764)
!9767 = !DILocation(line: 2731, column: 14, scope: !9764)
!9768 = !DILocation(line: 2732, column: 4, scope: !9764)
!9769 = !DILocation(line: 2733, column: 2, scope: !9764)
!9770 = !DILocation(line: 2729, column: 23, scope: !9760)
!9771 = !DILocation(line: 2729, column: 27, scope: !9760)
!9772 = !DILocation(line: 2729, column: 21, scope: !9760)
!9773 = !DILocation(line: 2729, column: 7, scope: !9760)
!9774 = distinct !{!9774, !9762, !9775}
!9775 = !DILocation(line: 2733, column: 2, scope: !9761)
!9776 = !DILocation(line: 2734, column: 7, scope: !9758)
!9777 = !DILocation(line: 2737, column: 3, scope: !9700)
!9778 = !DILocation(line: 2738, column: 1, scope: !9700)
!9779 = distinct !DISubprogram(name: "ranges_overlap_p", scope: !3987, file: !3987, line: 1192, type: !9780, scopeLine: 1196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9780 = !DISubroutineType(types: !9781)
!9781 = !{!1894, !1729, !1729, !1729, !1729}
!9782 = !DILocalVariable(name: "pos1", arg: 1, scope: !9779, file: !3987, line: 1192, type: !1729)
!9783 = !DILocation(line: 1192, column: 42, scope: !9779)
!9784 = !DILocalVariable(name: "size1", arg: 2, scope: !9779, file: !3987, line: 1193, type: !1729)
!9785 = !DILocation(line: 1193, column: 28, scope: !9779)
!9786 = !DILocalVariable(name: "pos2", arg: 3, scope: !9779, file: !3987, line: 1194, type: !1729)
!9787 = !DILocation(line: 1194, column: 28, scope: !9779)
!9788 = !DILocalVariable(name: "size2", arg: 4, scope: !9779, file: !3987, line: 1195, type: !1729)
!9789 = !DILocation(line: 1195, column: 28, scope: !9779)
!9790 = !DILocation(line: 1197, column: 7, scope: !9791)
!9791 = distinct !DILexicalBlock(scope: !9779, file: !3987, line: 1197, column: 7)
!9792 = !DILocation(line: 1197, column: 15, scope: !9791)
!9793 = !DILocation(line: 1197, column: 12, scope: !9791)
!9794 = !DILocation(line: 1198, column: 7, scope: !9791)
!9795 = !DILocation(line: 1198, column: 11, scope: !9791)
!9796 = !DILocation(line: 1198, column: 17, scope: !9791)
!9797 = !DILocation(line: 1199, column: 4, scope: !9791)
!9798 = !DILocation(line: 1199, column: 7, scope: !9791)
!9799 = !DILocation(line: 1199, column: 15, scope: !9791)
!9800 = !DILocation(line: 1199, column: 22, scope: !9791)
!9801 = !DILocation(line: 1199, column: 20, scope: !9791)
!9802 = !DILocation(line: 1199, column: 12, scope: !9791)
!9803 = !DILocation(line: 1197, column: 7, scope: !9779)
!9804 = !DILocation(line: 1200, column: 5, scope: !9791)
!9805 = !DILocation(line: 1201, column: 7, scope: !9806)
!9806 = distinct !DILexicalBlock(scope: !9779, file: !3987, line: 1201, column: 7)
!9807 = !DILocation(line: 1201, column: 15, scope: !9806)
!9808 = !DILocation(line: 1201, column: 12, scope: !9806)
!9809 = !DILocation(line: 1202, column: 7, scope: !9806)
!9810 = !DILocation(line: 1202, column: 11, scope: !9806)
!9811 = !DILocation(line: 1202, column: 17, scope: !9806)
!9812 = !DILocation(line: 1203, column: 4, scope: !9806)
!9813 = !DILocation(line: 1203, column: 7, scope: !9806)
!9814 = !DILocation(line: 1203, column: 15, scope: !9806)
!9815 = !DILocation(line: 1203, column: 22, scope: !9806)
!9816 = !DILocation(line: 1203, column: 20, scope: !9806)
!9817 = !DILocation(line: 1203, column: 12, scope: !9806)
!9818 = !DILocation(line: 1201, column: 7, scope: !9779)
!9819 = !DILocation(line: 1204, column: 5, scope: !9806)
!9820 = !DILocation(line: 1206, column: 3, scope: !9779)
!9821 = !DILocation(line: 1207, column: 1, scope: !9779)
!9822 = distinct !DISubprogram(name: "ref_contains_array_ref", scope: !3987, file: !3987, line: 1159, type: !3988, scopeLine: 1160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9823 = !DILocalVariable(name: "ref", arg: 1, scope: !9822, file: !3987, line: 1159, type: !3990)
!9824 = !DILocation(line: 1159, column: 36, scope: !9822)
!9825 = !DILocation(line: 1161, column: 3, scope: !9822)
!9826 = !DILocation(line: 1163, column: 3, scope: !9822)
!9827 = !DILocation(line: 1164, column: 9, scope: !9828)
!9828 = distinct !DILexicalBlock(scope: !9829, file: !3987, line: 1164, column: 9)
!9829 = distinct !DILexicalBlock(scope: !9822, file: !3987, line: 1163, column: 6)
!9830 = !DILocation(line: 1164, column: 25, scope: !9828)
!9831 = !DILocation(line: 1164, column: 9, scope: !9829)
!9832 = !DILocation(line: 1165, column: 7, scope: !9828)
!9833 = !DILocation(line: 1166, column: 11, scope: !9829)
!9834 = !DILocation(line: 1166, column: 9, scope: !9829)
!9835 = !DILocation(line: 1167, column: 3, scope: !9829)
!9836 = !DILocation(line: 1167, column: 33, scope: !9822)
!9837 = !DILocation(line: 1167, column: 12, scope: !9822)
!9838 = distinct !{!9838, !9826, !9839}
!9839 = !DILocation(line: 1167, column: 37, scope: !9822)
!9840 = !DILocation(line: 1169, column: 3, scope: !9822)
!9841 = !DILocation(line: 1170, column: 1, scope: !9822)
!9842 = distinct !DISubprogram(name: "handled_component_p", scope: !140, file: !140, line: 4551, type: !3988, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9843 = !DILocalVariable(name: "t", arg: 1, scope: !9842, file: !140, line: 4551, type: !3990)
!9844 = !DILocation(line: 4551, column: 33, scope: !9842)
!9845 = !DILocation(line: 4553, column: 11, scope: !9842)
!9846 = !DILocation(line: 4553, column: 3, scope: !9842)
!9847 = !DILocation(line: 4562, column: 7, scope: !9848)
!9848 = distinct !DILexicalBlock(scope: !9842, file: !140, line: 4554, column: 5)
!9849 = !DILocation(line: 4565, column: 7, scope: !9848)
!9850 = !DILocation(line: 4567, column: 1, scope: !9842)
!9851 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !851, file: !851, line: 3100, type: !9852, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9852 = !DISubroutineType(types: !9853)
!9853 = !{!8170, !2102, !6}
!9854 = !DILocalVariable(name: "gs", arg: 1, scope: !9851, file: !851, line: 3100, type: !2102)
!9855 = !DILocation(line: 3100, column: 24, scope: !9851)
!9856 = !DILocalVariable(name: "index", arg: 2, scope: !9851, file: !851, line: 3100, type: !6)
!9857 = !DILocation(line: 3100, column: 37, scope: !9851)
!9858 = !DILocation(line: 3103, column: 3, scope: !9851)
!9859 = !DILocation(line: 3104, column: 12, scope: !9851)
!9860 = !DILocation(line: 3104, column: 16, scope: !9851)
!9861 = !DILocation(line: 3104, column: 27, scope: !9851)
!9862 = !DILocation(line: 3104, column: 32, scope: !9851)
!9863 = !DILocation(line: 3104, column: 3, scope: !9851)
!9864 = distinct !DISubprogram(name: "gimple_op", scope: !851, file: !851, line: 1631, type: !8243, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9865 = !DILocalVariable(name: "gs", arg: 1, scope: !9864, file: !851, line: 1631, type: !5275)
!9866 = !DILocation(line: 1631, column: 25, scope: !9864)
!9867 = !DILocalVariable(name: "i", arg: 2, scope: !9864, file: !851, line: 1631, type: !6)
!9868 = !DILocation(line: 1631, column: 38, scope: !9864)
!9869 = !DILocation(line: 1633, column: 23, scope: !9870)
!9870 = distinct !DILexicalBlock(scope: !9864, file: !851, line: 1633, column: 7)
!9871 = !DILocation(line: 1633, column: 7, scope: !9870)
!9872 = !DILocation(line: 1633, column: 7, scope: !9864)
!9873 = !DILocation(line: 1638, column: 26, scope: !9874)
!9874 = distinct !DILexicalBlock(scope: !9870, file: !851, line: 1634, column: 5)
!9875 = !DILocation(line: 1638, column: 14, scope: !9874)
!9876 = !DILocation(line: 1638, column: 50, scope: !9874)
!9877 = !DILocation(line: 1638, column: 7, scope: !9874)
!9878 = !DILocation(line: 1641, column: 5, scope: !9870)
!9879 = !DILocation(line: 1642, column: 1, scope: !9864)
!9880 = distinct !DISubprogram(name: "gimple_has_ops", scope: !851, file: !851, line: 1274, type: !8213, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9881 = !DILocalVariable(name: "g", arg: 1, scope: !9880, file: !851, line: 1274, type: !5275)
!9882 = !DILocation(line: 1274, column: 30, scope: !9880)
!9883 = !DILocation(line: 1276, column: 23, scope: !9880)
!9884 = !DILocation(line: 1276, column: 10, scope: !9880)
!9885 = !DILocation(line: 1276, column: 26, scope: !9880)
!9886 = !DILocation(line: 1276, column: 41, scope: !9880)
!9887 = !DILocation(line: 1276, column: 57, scope: !9880)
!9888 = !DILocation(line: 1276, column: 44, scope: !9880)
!9889 = !DILocation(line: 1276, column: 60, scope: !9880)
!9890 = !DILocation(line: 0, scope: !9880)
!9891 = !DILocation(line: 1276, column: 3, scope: !9880)
!9892 = distinct !DISubprogram(name: "gimple_ops", scope: !851, file: !851, line: 1614, type: !9893, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9893 = !DISubroutineType(types: !9894)
!9894 = !{!2137, !2102}
!9895 = !DILocalVariable(name: "gs", arg: 1, scope: !9892, file: !851, line: 1614, type: !2102)
!9896 = !DILocation(line: 1614, column: 20, scope: !9892)
!9897 = !DILocalVariable(name: "off", scope: !9892, file: !851, line: 1616, type: !1727)
!9898 = !DILocation(line: 1616, column: 10, scope: !9892)
!9899 = !DILocation(line: 1621, column: 56, scope: !9892)
!9900 = !DILocation(line: 1621, column: 28, scope: !9892)
!9901 = !DILocation(line: 1621, column: 9, scope: !9892)
!9902 = !DILocation(line: 1621, column: 7, scope: !9892)
!9903 = !DILocation(line: 1622, column: 3, scope: !9892)
!9904 = !DILocation(line: 1624, column: 29, scope: !9892)
!9905 = !DILocation(line: 1624, column: 20, scope: !9892)
!9906 = !DILocation(line: 1624, column: 34, scope: !9892)
!9907 = !DILocation(line: 1624, column: 32, scope: !9892)
!9908 = !DILocation(line: 1624, column: 10, scope: !9892)
!9909 = !DILocation(line: 1624, column: 3, scope: !9892)
!9910 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !851, file: !851, line: 1073, type: !9911, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9911 = !DISubroutineType(types: !9912)
!9912 = !{!1615, !2102}
!9913 = !DILocalVariable(name: "gs", arg: 1, scope: !9910, file: !851, line: 1073, type: !2102)
!9914 = !DILocation(line: 1073, column: 36, scope: !9910)
!9915 = !DILocation(line: 1075, column: 37, scope: !9910)
!9916 = !DILocation(line: 1075, column: 24, scope: !9910)
!9917 = !DILocation(line: 1075, column: 10, scope: !9910)
!9918 = !DILocation(line: 1075, column: 3, scope: !9910)
!9919 = distinct !DISubprogram(name: "gss_for_code", scope: !851, file: !851, line: 1061, type: !9920, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9920 = !DISubroutineType(types: !9921)
!9921 = !{!1615, !850}
!9922 = !DILocalVariable(name: "code", arg: 1, scope: !9919, file: !851, line: 1061, type: !850)
!9923 = !DILocation(line: 1061, column: 32, scope: !9919)
!9924 = !DILocation(line: 1066, column: 24, scope: !9919)
!9925 = !DILocation(line: 1066, column: 10, scope: !9919)
!9926 = !DILocation(line: 1066, column: 3, scope: !9919)
!9927 = distinct !DISubprogram(name: "VEC_ce_s_base_index", scope: !3, file: !3, line: 406, type: !9928, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9928 = !DISubroutineType(types: !9929)
!9929 = !{!5456, !8182, !6}
!9930 = !DILocalVariable(name: "vec_", arg: 1, scope: !9927, file: !3, line: 406, type: !8182)
!9931 = !DILocation(line: 406, column: 1, scope: !9927)
!9932 = !DILocalVariable(name: "ix_", arg: 2, scope: !9927, file: !3, line: 406, type: !6)
!9933 = !DILocation(line: 0, scope: !9927)
!9934 = distinct !DISubprogram(name: "first_or_preceding_vi_for_offset", scope: !3, file: !3, line: 4054, type: !8939, scopeLine: 4056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9935 = !DILocalVariable(name: "start", arg: 1, scope: !9934, file: !3, line: 4054, type: !1758)
!9936 = !DILocation(line: 4054, column: 45, scope: !9934)
!9937 = !DILocalVariable(name: "offset", arg: 2, scope: !9934, file: !3, line: 4055, type: !1729)
!9938 = !DILocation(line: 4055, column: 30, scope: !9934)
!9939 = !DILocation(line: 4059, column: 7, scope: !9940)
!9940 = distinct !DILexicalBlock(scope: !9934, file: !3, line: 4059, column: 7)
!9941 = !DILocation(line: 4059, column: 14, scope: !9940)
!9942 = !DILocation(line: 4059, column: 23, scope: !9940)
!9943 = !DILocation(line: 4059, column: 21, scope: !9940)
!9944 = !DILocation(line: 4059, column: 7, scope: !9934)
!9945 = !DILocation(line: 4060, column: 33, scope: !9940)
!9946 = !DILocation(line: 4060, column: 40, scope: !9940)
!9947 = !DILocation(line: 4060, column: 13, scope: !9940)
!9948 = !DILocation(line: 4060, column: 11, scope: !9940)
!9949 = !DILocation(line: 4060, column: 5, scope: !9940)
!9950 = !DILocation(line: 4068, column: 3, scope: !9934)
!9951 = !DILocation(line: 4068, column: 10, scope: !9934)
!9952 = !DILocation(line: 4068, column: 17, scope: !9934)
!9953 = !DILocation(line: 4069, column: 3, scope: !9934)
!9954 = !DILocation(line: 4069, column: 6, scope: !9934)
!9955 = !DILocation(line: 4069, column: 16, scope: !9934)
!9956 = !DILocation(line: 4069, column: 23, scope: !9934)
!9957 = !DILocation(line: 4069, column: 13, scope: !9934)
!9958 = !DILocation(line: 4070, column: 3, scope: !9934)
!9959 = !DILocation(line: 4070, column: 9, scope: !9934)
!9960 = !DILocation(line: 4070, column: 18, scope: !9934)
!9961 = !DILocation(line: 4070, column: 25, scope: !9934)
!9962 = !DILocation(line: 4070, column: 16, scope: !9934)
!9963 = !DILocation(line: 4070, column: 35, scope: !9934)
!9964 = !DILocation(line: 4070, column: 42, scope: !9934)
!9965 = !DILocation(line: 4070, column: 33, scope: !9934)
!9966 = !DILocation(line: 4070, column: 6, scope: !9934)
!9967 = !DILocation(line: 0, scope: !9934)
!9968 = !DILocation(line: 4071, column: 13, scope: !9934)
!9969 = !DILocation(line: 4071, column: 20, scope: !9934)
!9970 = !DILocation(line: 4071, column: 11, scope: !9934)
!9971 = distinct !{!9971, !9950, !9969}
!9972 = !DILocation(line: 4073, column: 10, scope: !9934)
!9973 = !DILocation(line: 4073, column: 3, scope: !9934)
!9974 = distinct !DISubprogram(name: "VEC_ce_s_base_replace", scope: !3, file: !3, line: 406, type: !9975, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9975 = !DISubroutineType(types: !9976)
!9976 = !{!5456, !8182, !6, !9252}
!9977 = !DILocalVariable(name: "vec_", arg: 1, scope: !9974, file: !3, line: 406, type: !8182)
!9978 = !DILocation(line: 406, column: 1, scope: !9974)
!9979 = !DILocalVariable(name: "ix_", arg: 2, scope: !9974, file: !3, line: 406, type: !6)
!9980 = !DILocalVariable(name: "obj_", arg: 3, scope: !9974, file: !3, line: 406, type: !9252)
!9981 = !DILocalVariable(name: "slot_", scope: !9974, file: !3, line: 406, type: !5456)
!9982 = !DILocation(line: 406, column: 1, scope: !9983)
!9983 = distinct !DILexicalBlock(scope: !9974, file: !3, line: 406, column: 1)
!9984 = distinct !DISubprogram(name: "gimple_call_chain", scope: !851, file: !851, line: 1983, type: !5273, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9985 = !DILocalVariable(name: "gs", arg: 1, scope: !9984, file: !851, line: 1983, type: !5275)
!9986 = !DILocation(line: 1983, column: 33, scope: !9984)
!9987 = !DILocation(line: 1986, column: 21, scope: !9984)
!9988 = !DILocation(line: 1986, column: 10, scope: !9984)
!9989 = !DILocation(line: 1986, column: 3, scope: !9984)
!9990 = distinct !DISubprogram(name: "make_constraint_to", scope: !3, file: !3, line: 3320, type: !9991, scopeLine: 3321, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!9991 = !DISubroutineType(types: !9992)
!9992 = !{null, !6, !1780}
!9993 = !DILocalVariable(name: "id", arg: 1, scope: !9990, file: !3, line: 3320, type: !6)
!9994 = !DILocation(line: 3320, column: 30, scope: !9990)
!9995 = !DILocalVariable(name: "op", arg: 2, scope: !9990, file: !3, line: 3320, type: !1780)
!9996 = !DILocation(line: 3320, column: 39, scope: !9990)
!9997 = !DILocalVariable(name: "rhsc", scope: !9990, file: !3, line: 3322, type: !3154)
!9998 = !DILocation(line: 3322, column: 20, scope: !9990)
!9999 = !DILocalVariable(name: "c", scope: !9990, file: !3, line: 3323, type: !5295)
!10000 = !DILocation(line: 3323, column: 27, scope: !9990)
!10001 = !DILocalVariable(name: "includes", scope: !9990, file: !3, line: 3324, type: !1720)
!10002 = !DILocation(line: 3324, column: 26, scope: !9990)
!10003 = !DILocalVariable(name: "j", scope: !9990, file: !3, line: 3325, type: !6)
!10004 = !DILocation(line: 3325, column: 16, scope: !9990)
!10005 = !DILocation(line: 3327, column: 18, scope: !9990)
!10006 = !DILocation(line: 3327, column: 12, scope: !9990)
!10007 = !DILocation(line: 3327, column: 16, scope: !9990)
!10008 = !DILocation(line: 3328, column: 12, scope: !9990)
!10009 = !DILocation(line: 3328, column: 19, scope: !9990)
!10010 = !DILocation(line: 3329, column: 12, scope: !9990)
!10011 = !DILocation(line: 3329, column: 17, scope: !9990)
!10012 = !DILocation(line: 3331, column: 23, scope: !9990)
!10013 = !DILocation(line: 3331, column: 3, scope: !9990)
!10014 = !DILocation(line: 3332, column: 10, scope: !10015)
!10015 = distinct !DILexicalBlock(scope: !9990, file: !3, line: 3332, column: 3)
!10016 = !DILocation(line: 3332, column: 8, scope: !10015)
!10017 = !DILocation(line: 3332, column: 15, scope: !10018)
!10018 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 3332, column: 3)
!10019 = !DILocation(line: 3332, column: 3, scope: !10015)
!10020 = !DILocation(line: 3333, column: 52, scope: !10018)
!10021 = !DILocation(line: 3333, column: 25, scope: !10018)
!10022 = !DILocation(line: 3333, column: 5, scope: !10018)
!10023 = !DILocation(line: 3332, column: 48, scope: !10018)
!10024 = !DILocation(line: 3332, column: 3, scope: !10018)
!10025 = distinct !{!10025, !10019, !10026}
!10026 = !DILocation(line: 3333, column: 54, scope: !10015)
!10027 = !DILocation(line: 3334, column: 3, scope: !9990)
!10028 = !DILocation(line: 3335, column: 1, scope: !9990)
!10029 = distinct !DISubprogram(name: "gimple_call_return_slot_opt_p", scope: !851, file: !851, line: 2119, type: !9264, scopeLine: 2120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10030 = !DILocalVariable(name: "s", arg: 1, scope: !10029, file: !851, line: 2119, type: !2102)
!10031 = !DILocation(line: 2119, column: 39, scope: !10029)
!10032 = !DILocation(line: 2122, column: 11, scope: !10029)
!10033 = !DILocation(line: 2122, column: 14, scope: !10029)
!10034 = !DILocation(line: 2122, column: 21, scope: !10029)
!10035 = !DILocation(line: 2122, column: 29, scope: !10029)
!10036 = !DILocation(line: 2122, column: 56, scope: !10029)
!10037 = !DILocation(line: 2122, column: 10, scope: !10029)
!10038 = !DILocation(line: 2122, column: 3, scope: !10029)
!10039 = distinct !DISubprogram(name: "gimple_expr_code", scope: !851, file: !851, line: 1438, type: !9171, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10040 = !DILocalVariable(name: "stmt", arg: 1, scope: !10039, file: !851, line: 1438, type: !5275)
!10041 = !DILocation(line: 1438, column: 32, scope: !10039)
!10042 = !DILocalVariable(name: "code", scope: !10039, file: !851, line: 1440, type: !850)
!10043 = !DILocation(line: 1440, column: 20, scope: !10039)
!10044 = !DILocation(line: 1440, column: 40, scope: !10039)
!10045 = !DILocation(line: 1440, column: 27, scope: !10039)
!10046 = !DILocation(line: 1441, column: 7, scope: !10047)
!10047 = distinct !DILexicalBlock(scope: !10039, file: !851, line: 1441, column: 7)
!10048 = !DILocation(line: 1441, column: 12, scope: !10047)
!10049 = !DILocation(line: 1441, column: 29, scope: !10047)
!10050 = !DILocation(line: 1441, column: 32, scope: !10047)
!10051 = !DILocation(line: 1441, column: 37, scope: !10047)
!10052 = !DILocation(line: 1441, column: 7, scope: !10039)
!10053 = !DILocation(line: 1442, column: 29, scope: !10047)
!10054 = !DILocation(line: 1442, column: 35, scope: !10047)
!10055 = !DILocation(line: 1442, column: 42, scope: !10047)
!10056 = !DILocation(line: 1442, column: 5, scope: !10047)
!10057 = !DILocation(line: 1443, column: 12, scope: !10058)
!10058 = distinct !DILexicalBlock(scope: !10047, file: !851, line: 1443, column: 12)
!10059 = !DILocation(line: 1443, column: 17, scope: !10058)
!10060 = !DILocation(line: 1443, column: 12, scope: !10047)
!10061 = !DILocation(line: 1444, column: 5, scope: !10058)
!10062 = !DILocation(line: 1446, column: 5, scope: !10058)
!10063 = !DILocation(line: 1448, column: 5, scope: !10039)
!10064 = !DILocation(line: 1450, column: 1, scope: !10039)
!10065 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !851, file: !851, line: 1686, type: !10066, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10066 = !DISubroutineType(types: !10067)
!10067 = !{!1654, !139}
!10068 = !DILocalVariable(name: "code", arg: 1, scope: !10065, file: !851, line: 1686, type: !139)
!10069 = !DILocation(line: 1686, column: 38, scope: !10065)
!10070 = !DILocation(line: 1688, column: 63, scope: !10065)
!10071 = !DILocation(line: 1688, column: 34, scope: !10065)
!10072 = !DILocation(line: 1688, column: 10, scope: !10065)
!10073 = !DILocation(line: 1688, column: 3, scope: !10065)
!10074 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !851, file: !851, line: 1966, type: !5273, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10075 = !DILocalVariable(name: "gs", arg: 1, scope: !10074, file: !851, line: 1966, type: !5275)
!10076 = !DILocation(line: 1966, column: 39, scope: !10074)
!10077 = !DILocalVariable(name: "fn", scope: !10074, file: !851, line: 1968, type: !1780)
!10078 = !DILocation(line: 1968, column: 8, scope: !10074)
!10079 = !DILocation(line: 1968, column: 29, scope: !10074)
!10080 = !DILocation(line: 1968, column: 13, scope: !10074)
!10081 = !DILocalVariable(name: "type", scope: !10074, file: !851, line: 1969, type: !1780)
!10082 = !DILocation(line: 1969, column: 8, scope: !10074)
!10083 = !DILocation(line: 1969, column: 15, scope: !10074)
!10084 = !DILocation(line: 1972, column: 10, scope: !10074)
!10085 = !DILocation(line: 1972, column: 8, scope: !10074)
!10086 = !DILocation(line: 1976, column: 10, scope: !10074)
!10087 = !DILocation(line: 1976, column: 3, scope: !10074)
!10088 = distinct !DISubprogram(name: "VEC_ce_s_heap_reserve", scope: !3, file: !3, line: 407, type: !10089, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10089 = !DISubroutineType(types: !10090)
!10090 = !{!1730, !8119, !1730}
!10091 = !DILocalVariable(name: "vec_", arg: 1, scope: !10088, file: !3, line: 407, type: !8119)
!10092 = !DILocation(line: 407, column: 1, scope: !10088)
!10093 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10088, file: !3, line: 407, type: !1730)
!10094 = !DILocalVariable(name: "extend", scope: !10088, file: !3, line: 407, type: !1730)
!10095 = !DILocation(line: 407, column: 1, scope: !10096)
!10096 = distinct !DILexicalBlock(scope: !10088, file: !3, line: 407, column: 1)
!10097 = distinct !DISubprogram(name: "VEC_ce_s_base_quick_push", scope: !3, file: !3, line: 406, type: !10098, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10098 = !DISubroutineType(types: !10099)
!10099 = !{!5456, !8182, !9252}
!10100 = !DILocalVariable(name: "vec_", arg: 1, scope: !10097, file: !3, line: 406, type: !8182)
!10101 = !DILocation(line: 406, column: 1, scope: !10097)
!10102 = !DILocalVariable(name: "obj_", arg: 2, scope: !10097, file: !3, line: 406, type: !9252)
!10103 = !DILocalVariable(name: "slot_", scope: !10097, file: !3, line: 406, type: !5456)
!10104 = !DILocation(line: 406, column: 1, scope: !10105)
!10105 = distinct !DILexicalBlock(scope: !10097, file: !3, line: 406, column: 1)
!10106 = distinct !DISubprogram(name: "VEC_ce_s_base_space", scope: !3, file: !3, line: 406, type: !10107, scopeLine: 406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10107 = !DISubroutineType(types: !10108)
!10108 = !{!1730, !8182, !1730}
!10109 = !DILocalVariable(name: "vec_", arg: 1, scope: !10106, file: !3, line: 406, type: !8182)
!10110 = !DILocation(line: 406, column: 1, scope: !10106)
!10111 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10106, file: !3, line: 406, type: !1730)
!10112 = distinct !DISubprogram(name: "bb_seq", scope: !851, file: !851, line: 237, type: !10113, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10113 = !DISubroutineType(types: !10114)
!10114 = !{!2092, !10115}
!10115 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1781, line: 112, baseType: !10116)
!10116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10117, size: 64)
!10117 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2067)
!10118 = !DILocalVariable(name: "bb", arg: 1, scope: !10112, file: !851, line: 237, type: !10115)
!10119 = !DILocation(line: 237, column: 27, scope: !10112)
!10120 = !DILocation(line: 239, column: 13, scope: !10112)
!10121 = !DILocation(line: 239, column: 17, scope: !10112)
!10122 = !DILocation(line: 239, column: 23, scope: !10112)
!10123 = !DILocation(line: 239, column: 33, scope: !10112)
!10124 = !DILocation(line: 239, column: 36, scope: !10112)
!10125 = !DILocation(line: 239, column: 40, scope: !10112)
!10126 = !DILocation(line: 239, column: 43, scope: !10112)
!10127 = !DILocation(line: 239, column: 10, scope: !10112)
!10128 = !DILocation(line: 239, column: 53, scope: !10112)
!10129 = !DILocation(line: 239, column: 57, scope: !10112)
!10130 = !DILocation(line: 239, column: 60, scope: !10112)
!10131 = !DILocation(line: 239, column: 68, scope: !10112)
!10132 = !DILocation(line: 239, column: 3, scope: !10112)
!10133 = distinct !DISubprogram(name: "gimple_seq_first", scope: !851, file: !851, line: 159, type: !10134, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10134 = !DISubroutineType(types: !10135)
!10135 = !{!2097, !10136}
!10136 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1781, line: 67, baseType: !10137)
!10137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10138, size: 64)
!10138 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2094)
!10139 = !DILocalVariable(name: "s", arg: 1, scope: !10133, file: !851, line: 159, type: !10136)
!10140 = !DILocation(line: 159, column: 36, scope: !10133)
!10141 = !DILocation(line: 161, column: 10, scope: !10133)
!10142 = !DILocation(line: 161, column: 14, scope: !10133)
!10143 = !DILocation(line: 161, column: 17, scope: !10133)
!10144 = !DILocation(line: 161, column: 3, scope: !10133)
!10145 = distinct !DISubprogram(name: "init_graph", scope: !3, file: !3, line: 1103, type: !3665, scopeLine: 1104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10146 = !DILocalVariable(name: "size", arg: 1, scope: !10145, file: !3, line: 1103, type: !6)
!10147 = !DILocation(line: 1103, column: 26, scope: !10145)
!10148 = !DILocalVariable(name: "j", scope: !10145, file: !3, line: 1105, type: !6)
!10149 = !DILocation(line: 1105, column: 16, scope: !10145)
!10150 = !DILocation(line: 1107, column: 11, scope: !10145)
!10151 = !DILocation(line: 1107, column: 9, scope: !10145)
!10152 = !DILocation(line: 1108, column: 17, scope: !10145)
!10153 = !DILocation(line: 1108, column: 3, scope: !10145)
!10154 = !DILocation(line: 1108, column: 10, scope: !10145)
!10155 = !DILocation(line: 1108, column: 15, scope: !10145)
!10156 = !DILocation(line: 1109, column: 18, scope: !10145)
!10157 = !DILocation(line: 1109, column: 3, scope: !10145)
!10158 = !DILocation(line: 1109, column: 10, scope: !10145)
!10159 = !DILocation(line: 1109, column: 16, scope: !10145)
!10160 = !DILocation(line: 1110, column: 28, scope: !10145)
!10161 = !DILocation(line: 1110, column: 3, scope: !10145)
!10162 = !DILocation(line: 1110, column: 10, scope: !10145)
!10163 = !DILocation(line: 1110, column: 26, scope: !10145)
!10164 = !DILocation(line: 1111, column: 16, scope: !10145)
!10165 = !DILocation(line: 1111, column: 3, scope: !10145)
!10166 = !DILocation(line: 1111, column: 10, scope: !10145)
!10167 = !DILocation(line: 1111, column: 14, scope: !10145)
!10168 = !DILocation(line: 1112, column: 20, scope: !10145)
!10169 = !DILocation(line: 1112, column: 3, scope: !10145)
!10170 = !DILocation(line: 1112, column: 10, scope: !10145)
!10171 = !DILocation(line: 1112, column: 18, scope: !10145)
!10172 = !DILocation(line: 1113, column: 15, scope: !10145)
!10173 = !DILocation(line: 1113, column: 3, scope: !10145)
!10174 = !DILocation(line: 1113, column: 10, scope: !10145)
!10175 = !DILocation(line: 1113, column: 13, scope: !10145)
!10176 = !DILocation(line: 1114, column: 19, scope: !10145)
!10177 = !DILocation(line: 1114, column: 3, scope: !10145)
!10178 = !DILocation(line: 1114, column: 10, scope: !10145)
!10179 = !DILocation(line: 1114, column: 17, scope: !10145)
!10180 = !DILocation(line: 1116, column: 10, scope: !10181)
!10181 = distinct !DILexicalBlock(scope: !10145, file: !3, line: 1116, column: 3)
!10182 = !DILocation(line: 1116, column: 8, scope: !10181)
!10183 = !DILocation(line: 1116, column: 15, scope: !10184)
!10184 = distinct !DILexicalBlock(scope: !10181, file: !3, line: 1116, column: 3)
!10185 = !DILocation(line: 1116, column: 19, scope: !10184)
!10186 = !DILocation(line: 1116, column: 26, scope: !10184)
!10187 = !DILocation(line: 1116, column: 17, scope: !10184)
!10188 = !DILocation(line: 1116, column: 3, scope: !10181)
!10189 = !DILocation(line: 1118, column: 23, scope: !10190)
!10190 = distinct !DILexicalBlock(scope: !10184, file: !3, line: 1117, column: 5)
!10191 = !DILocation(line: 1118, column: 7, scope: !10190)
!10192 = !DILocation(line: 1118, column: 14, scope: !10190)
!10193 = !DILocation(line: 1118, column: 18, scope: !10190)
!10194 = !DILocation(line: 1118, column: 21, scope: !10190)
!10195 = !DILocation(line: 1119, column: 7, scope: !10190)
!10196 = !DILocation(line: 1119, column: 14, scope: !10190)
!10197 = !DILocation(line: 1119, column: 21, scope: !10190)
!10198 = !DILocation(line: 1119, column: 24, scope: !10190)
!10199 = !DILocation(line: 1120, column: 7, scope: !10190)
!10200 = !DILocation(line: 1120, column: 14, scope: !10190)
!10201 = !DILocation(line: 1120, column: 30, scope: !10190)
!10202 = !DILocation(line: 1120, column: 33, scope: !10190)
!10203 = !DILocation(line: 1121, column: 5, scope: !10190)
!10204 = !DILocation(line: 1116, column: 33, scope: !10184)
!10205 = !DILocation(line: 1116, column: 3, scope: !10184)
!10206 = distinct !{!10206, !10188, !10207}
!10207 = !DILocation(line: 1121, column: 5, scope: !10181)
!10208 = !DILocation(line: 1122, column: 1, scope: !10145)
!10209 = distinct !DISubprogram(name: "build_pred_graph", scope: !3, file: !3, line: 1127, type: !3548, scopeLine: 1128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10210 = !DILocalVariable(name: "i", scope: !10209, file: !3, line: 1129, type: !1730)
!10211 = !DILocation(line: 1129, column: 7, scope: !10209)
!10212 = !DILocalVariable(name: "c", scope: !10209, file: !3, line: 1130, type: !1715)
!10213 = !DILocation(line: 1130, column: 16, scope: !10209)
!10214 = !DILocalVariable(name: "j", scope: !10209, file: !3, line: 1131, type: !6)
!10215 = !DILocation(line: 1131, column: 16, scope: !10209)
!10216 = !DILocation(line: 1133, column: 27, scope: !10209)
!10217 = !DILocation(line: 1133, column: 3, scope: !10209)
!10218 = !DILocation(line: 1133, column: 10, scope: !10209)
!10219 = !DILocation(line: 1133, column: 25, scope: !10209)
!10220 = !DILocation(line: 1134, column: 18, scope: !10209)
!10221 = !DILocation(line: 1134, column: 3, scope: !10209)
!10222 = !DILocation(line: 1134, column: 10, scope: !10209)
!10223 = !DILocation(line: 1134, column: 16, scope: !10209)
!10224 = !DILocation(line: 1135, column: 26, scope: !10209)
!10225 = !DILocation(line: 1135, column: 3, scope: !10209)
!10226 = !DILocation(line: 1135, column: 10, scope: !10209)
!10227 = !DILocation(line: 1135, column: 24, scope: !10209)
!10228 = !DILocation(line: 1136, column: 22, scope: !10209)
!10229 = !DILocation(line: 1136, column: 3, scope: !10209)
!10230 = !DILocation(line: 1136, column: 10, scope: !10209)
!10231 = !DILocation(line: 1136, column: 20, scope: !10209)
!10232 = !DILocation(line: 1137, column: 23, scope: !10209)
!10233 = !DILocation(line: 1137, column: 3, scope: !10209)
!10234 = !DILocation(line: 1137, column: 10, scope: !10209)
!10235 = !DILocation(line: 1137, column: 21, scope: !10209)
!10236 = !DILocation(line: 1138, column: 22, scope: !10209)
!10237 = !DILocation(line: 1138, column: 3, scope: !10209)
!10238 = !DILocation(line: 1138, column: 10, scope: !10209)
!10239 = !DILocation(line: 1138, column: 20, scope: !10209)
!10240 = !DILocation(line: 1139, column: 19, scope: !10209)
!10241 = !DILocation(line: 1139, column: 3, scope: !10209)
!10242 = !DILocation(line: 1139, column: 10, scope: !10209)
!10243 = !DILocation(line: 1139, column: 17, scope: !10209)
!10244 = !DILocation(line: 1140, column: 40, scope: !10209)
!10245 = !DILocation(line: 1140, column: 47, scope: !10209)
!10246 = !DILocation(line: 1140, column: 25, scope: !10209)
!10247 = !DILocation(line: 1140, column: 3, scope: !10209)
!10248 = !DILocation(line: 1140, column: 10, scope: !10209)
!10249 = !DILocation(line: 1140, column: 23, scope: !10209)
!10250 = !DILocation(line: 1141, column: 26, scope: !10209)
!10251 = !DILocation(line: 1141, column: 3, scope: !10209)
!10252 = !DILocation(line: 1141, column: 10, scope: !10209)
!10253 = !DILocation(line: 1141, column: 24, scope: !10209)
!10254 = !DILocation(line: 1142, column: 17, scope: !10209)
!10255 = !DILocation(line: 1142, column: 24, scope: !10209)
!10256 = !DILocation(line: 1142, column: 3, scope: !10209)
!10257 = !DILocation(line: 1144, column: 10, scope: !10258)
!10258 = distinct !DILexicalBlock(scope: !10209, file: !3, line: 1144, column: 3)
!10259 = !DILocation(line: 1144, column: 8, scope: !10258)
!10260 = !DILocation(line: 1144, column: 15, scope: !10261)
!10261 = distinct !DILexicalBlock(scope: !10258, file: !3, line: 1144, column: 3)
!10262 = !DILocation(line: 1144, column: 19, scope: !10261)
!10263 = !DILocation(line: 1144, column: 17, scope: !10261)
!10264 = !DILocation(line: 1144, column: 3, scope: !10258)
!10265 = !DILocation(line: 1146, column: 25, scope: !10266)
!10266 = distinct !DILexicalBlock(scope: !10267, file: !3, line: 1146, column: 11)
!10267 = distinct !DILexicalBlock(scope: !10261, file: !3, line: 1145, column: 5)
!10268 = !DILocation(line: 1146, column: 12, scope: !10266)
!10269 = !DILocation(line: 1146, column: 29, scope: !10266)
!10270 = !DILocation(line: 1146, column: 11, scope: !10267)
!10271 = !DILocation(line: 1147, column: 11, scope: !10266)
!10272 = !DILocation(line: 1147, column: 18, scope: !10266)
!10273 = !DILocation(line: 1147, column: 32, scope: !10266)
!10274 = !DILocation(line: 1147, column: 2, scope: !10266)
!10275 = !DILocation(line: 1148, column: 5, scope: !10267)
!10276 = !DILocation(line: 1144, column: 36, scope: !10261)
!10277 = !DILocation(line: 1144, column: 3, scope: !10261)
!10278 = distinct !{!10278, !10264, !10279}
!10279 = !DILocation(line: 1148, column: 5, scope: !10258)
!10280 = !DILocation(line: 1150, column: 10, scope: !10281)
!10281 = distinct !DILexicalBlock(scope: !10209, file: !3, line: 1150, column: 3)
!10282 = !DILocation(line: 1150, column: 8, scope: !10281)
!10283 = !DILocation(line: 1150, column: 15, scope: !10284)
!10284 = distinct !DILexicalBlock(scope: !10281, file: !3, line: 1150, column: 3)
!10285 = !DILocation(line: 1150, column: 19, scope: !10284)
!10286 = !DILocation(line: 1150, column: 26, scope: !10284)
!10287 = !DILocation(line: 1150, column: 17, scope: !10284)
!10288 = !DILocation(line: 1150, column: 3, scope: !10281)
!10289 = !DILocation(line: 1151, column: 5, scope: !10284)
!10290 = !DILocation(line: 1151, column: 12, scope: !10284)
!10291 = !DILocation(line: 1151, column: 19, scope: !10284)
!10292 = !DILocation(line: 1151, column: 22, scope: !10284)
!10293 = !DILocation(line: 1150, column: 33, scope: !10284)
!10294 = !DILocation(line: 1150, column: 3, scope: !10284)
!10295 = distinct !{!10295, !10288, !10296}
!10296 = !DILocation(line: 1151, column: 25, scope: !10281)
!10297 = !DILocation(line: 1153, column: 10, scope: !10298)
!10298 = distinct !DILexicalBlock(scope: !10209, file: !3, line: 1153, column: 3)
!10299 = !DILocation(line: 1153, column: 8, scope: !10298)
!10300 = !DILocation(line: 1153, column: 15, scope: !10301)
!10301 = distinct !DILexicalBlock(scope: !10298, file: !3, line: 1153, column: 3)
!10302 = !DILocation(line: 1153, column: 19, scope: !10301)
!10303 = !DILocation(line: 1153, column: 17, scope: !10301)
!10304 = !DILocation(line: 1153, column: 3, scope: !10298)
!10305 = !DILocation(line: 1154, column: 5, scope: !10301)
!10306 = !DILocation(line: 1154, column: 12, scope: !10301)
!10307 = !DILocation(line: 1154, column: 28, scope: !10301)
!10308 = !DILocation(line: 1154, column: 31, scope: !10301)
!10309 = !DILocation(line: 1153, column: 52, scope: !10301)
!10310 = !DILocation(line: 1153, column: 3, scope: !10301)
!10311 = distinct !{!10311, !10304, !10312}
!10312 = !DILocation(line: 1154, column: 34, scope: !10298)
!10313 = !DILocation(line: 1156, column: 10, scope: !10314)
!10314 = distinct !DILexicalBlock(scope: !10209, file: !3, line: 1156, column: 3)
!10315 = !DILocation(line: 1156, column: 8, scope: !10314)
!10316 = !DILocation(line: 1156, column: 15, scope: !10317)
!10317 = distinct !DILexicalBlock(scope: !10314, file: !3, line: 1156, column: 3)
!10318 = !DILocation(line: 1156, column: 3, scope: !10314)
!10319 = !DILocalVariable(name: "lhs", scope: !10320, file: !3, line: 1158, type: !1720)
!10320 = distinct !DILexicalBlock(scope: !10317, file: !3, line: 1157, column: 5)
!10321 = !DILocation(line: 1158, column: 30, scope: !10320)
!10322 = !DILocation(line: 1158, column: 36, scope: !10320)
!10323 = !DILocation(line: 1158, column: 39, scope: !10320)
!10324 = !DILocalVariable(name: "rhs", scope: !10320, file: !3, line: 1159, type: !1720)
!10325 = !DILocation(line: 1159, column: 30, scope: !10320)
!10326 = !DILocation(line: 1159, column: 36, scope: !10320)
!10327 = !DILocation(line: 1159, column: 39, scope: !10320)
!10328 = !DILocalVariable(name: "lhsvar", scope: !10320, file: !3, line: 1160, type: !6)
!10329 = !DILocation(line: 1160, column: 20, scope: !10320)
!10330 = !DILocation(line: 1160, column: 33, scope: !10320)
!10331 = !DILocalVariable(name: "rhsvar", scope: !10320, file: !3, line: 1161, type: !6)
!10332 = !DILocation(line: 1161, column: 20, scope: !10320)
!10333 = !DILocation(line: 1161, column: 33, scope: !10320)
!10334 = !DILocation(line: 1163, column: 15, scope: !10335)
!10335 = distinct !DILexicalBlock(scope: !10320, file: !3, line: 1163, column: 11)
!10336 = !DILocation(line: 1163, column: 20, scope: !10335)
!10337 = !DILocation(line: 1163, column: 11, scope: !10320)
!10338 = !DILocation(line: 1166, column: 12, scope: !10339)
!10339 = distinct !DILexicalBlock(scope: !10340, file: !3, line: 1166, column: 8)
!10340 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 1164, column: 2)
!10341 = !DILocation(line: 1166, column: 19, scope: !10339)
!10342 = !DILocation(line: 1166, column: 24, scope: !10339)
!10343 = !DILocation(line: 1166, column: 31, scope: !10339)
!10344 = !DILocation(line: 1166, column: 38, scope: !10339)
!10345 = !DILocation(line: 1166, column: 43, scope: !10339)
!10346 = !DILocation(line: 1166, column: 50, scope: !10339)
!10347 = !DILocation(line: 1166, column: 55, scope: !10339)
!10348 = !DILocation(line: 1166, column: 8, scope: !10340)
!10349 = !DILocation(line: 1167, column: 27, scope: !10339)
!10350 = !DILocation(line: 1167, column: 34, scope: !10339)
!10351 = !DILocation(line: 1167, column: 51, scope: !10339)
!10352 = !DILocation(line: 1167, column: 49, scope: !10339)
!10353 = !DILocation(line: 1167, column: 59, scope: !10339)
!10354 = !DILocation(line: 1167, column: 6, scope: !10339)
!10355 = !DILocation(line: 1168, column: 2, scope: !10340)
!10356 = !DILocation(line: 1169, column: 20, scope: !10357)
!10357 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 1169, column: 16)
!10358 = !DILocation(line: 1169, column: 25, scope: !10357)
!10359 = !DILocation(line: 1169, column: 16, scope: !10335)
!10360 = !DILocation(line: 1172, column: 12, scope: !10361)
!10361 = distinct !DILexicalBlock(scope: !10362, file: !3, line: 1172, column: 8)
!10362 = distinct !DILexicalBlock(scope: !10357, file: !3, line: 1170, column: 2)
!10363 = !DILocation(line: 1172, column: 19, scope: !10361)
!10364 = !DILocation(line: 1172, column: 24, scope: !10361)
!10365 = !DILocation(line: 1172, column: 31, scope: !10361)
!10366 = !DILocation(line: 1172, column: 38, scope: !10361)
!10367 = !DILocation(line: 1172, column: 43, scope: !10361)
!10368 = !DILocation(line: 1172, column: 50, scope: !10361)
!10369 = !DILocation(line: 1172, column: 55, scope: !10361)
!10370 = !DILocation(line: 1172, column: 8, scope: !10362)
!10371 = !DILocation(line: 1173, column: 27, scope: !10361)
!10372 = !DILocation(line: 1173, column: 34, scope: !10361)
!10373 = !DILocation(line: 1173, column: 42, scope: !10361)
!10374 = !DILocation(line: 1173, column: 59, scope: !10361)
!10375 = !DILocation(line: 1173, column: 57, scope: !10361)
!10376 = !DILocation(line: 1173, column: 6, scope: !10361)
!10377 = !DILocation(line: 1175, column: 17, scope: !10361)
!10378 = !DILocation(line: 1175, column: 24, scope: !10361)
!10379 = !DILocation(line: 1175, column: 38, scope: !10361)
!10380 = !DILocation(line: 1175, column: 6, scope: !10361)
!10381 = !DILocation(line: 1176, column: 2, scope: !10362)
!10382 = !DILocation(line: 1177, column: 20, scope: !10383)
!10383 = distinct !DILexicalBlock(scope: !10357, file: !3, line: 1177, column: 16)
!10384 = !DILocation(line: 1177, column: 25, scope: !10383)
!10385 = !DILocation(line: 1177, column: 16, scope: !10357)
!10386 = !DILocalVariable(name: "v", scope: !10387, file: !3, line: 1179, type: !1758)
!10387 = distinct !DILexicalBlock(scope: !10383, file: !3, line: 1178, column: 2)
!10388 = !DILocation(line: 1179, column: 14, scope: !10387)
!10389 = !DILocation(line: 1182, column: 8, scope: !10390)
!10390 = distinct !DILexicalBlock(scope: !10387, file: !3, line: 1182, column: 8)
!10391 = !DILocation(line: 1182, column: 15, scope: !10390)
!10392 = !DILocation(line: 1182, column: 25, scope: !10390)
!10393 = !DILocation(line: 1182, column: 33, scope: !10390)
!10394 = !DILocation(line: 1182, column: 8, scope: !10387)
!10395 = !DILocation(line: 1183, column: 33, scope: !10390)
!10396 = !DILocation(line: 1183, column: 6, scope: !10390)
!10397 = !DILocation(line: 1183, column: 13, scope: !10390)
!10398 = !DILocation(line: 1183, column: 23, scope: !10390)
!10399 = !DILocation(line: 1183, column: 31, scope: !10390)
!10400 = !DILocation(line: 1184, column: 20, scope: !10387)
!10401 = !DILocation(line: 1184, column: 27, scope: !10387)
!10402 = !DILocation(line: 1184, column: 37, scope: !10387)
!10403 = !DILocation(line: 1184, column: 46, scope: !10387)
!10404 = !DILocation(line: 1184, column: 4, scope: !10387)
!10405 = !DILocation(line: 1186, column: 8, scope: !10406)
!10406 = distinct !DILexicalBlock(scope: !10387, file: !3, line: 1186, column: 8)
!10407 = !DILocation(line: 1186, column: 15, scope: !10406)
!10408 = !DILocation(line: 1186, column: 26, scope: !10406)
!10409 = !DILocation(line: 1186, column: 34, scope: !10406)
!10410 = !DILocation(line: 1186, column: 8, scope: !10387)
!10411 = !DILocation(line: 1187, column: 34, scope: !10406)
!10412 = !DILocation(line: 1187, column: 6, scope: !10406)
!10413 = !DILocation(line: 1187, column: 13, scope: !10406)
!10414 = !DILocation(line: 1187, column: 24, scope: !10406)
!10415 = !DILocation(line: 1187, column: 32, scope: !10406)
!10416 = !DILocation(line: 1188, column: 20, scope: !10387)
!10417 = !DILocation(line: 1188, column: 27, scope: !10387)
!10418 = !DILocation(line: 1188, column: 38, scope: !10387)
!10419 = !DILocation(line: 1188, column: 47, scope: !10387)
!10420 = !DILocation(line: 1188, column: 4, scope: !10387)
!10421 = !DILocation(line: 1191, column: 29, scope: !10387)
!10422 = !DILocation(line: 1191, column: 36, scope: !10387)
!10423 = !DILocation(line: 1191, column: 53, scope: !10387)
!10424 = !DILocation(line: 1191, column: 51, scope: !10387)
!10425 = !DILocation(line: 1191, column: 61, scope: !10387)
!10426 = !DILocation(line: 1191, column: 4, scope: !10387)
!10427 = !DILocation(line: 1194, column: 15, scope: !10387)
!10428 = !DILocation(line: 1194, column: 22, scope: !10387)
!10429 = !DILocation(line: 1194, column: 36, scope: !10387)
!10430 = !DILocation(line: 1194, column: 4, scope: !10387)
!10431 = !DILocation(line: 1195, column: 28, scope: !10387)
!10432 = !DILocation(line: 1195, column: 15, scope: !10387)
!10433 = !DILocation(line: 1195, column: 13, scope: !10387)
!10434 = !DILocation(line: 1196, column: 16, scope: !10435)
!10435 = distinct !DILexicalBlock(scope: !10387, file: !3, line: 1196, column: 15)
!10436 = !DILocation(line: 1196, column: 19, scope: !10435)
!10437 = !DILocation(line: 1196, column: 15, scope: !10387)
!10438 = !DILocation(line: 1198, column: 39, scope: !10439)
!10439 = distinct !DILexicalBlock(scope: !10435, file: !3, line: 1197, column: 13)
!10440 = !DILocation(line: 1198, column: 42, scope: !10439)
!10441 = !DILocation(line: 1198, column: 19, scope: !10439)
!10442 = !DILocation(line: 1198, column: 17, scope: !10439)
!10443 = !DILocation(line: 1199, column: 15, scope: !10439)
!10444 = !DILocation(line: 1201, column: 30, scope: !10445)
!10445 = distinct !DILexicalBlock(scope: !10439, file: !3, line: 1200, column: 17)
!10446 = !DILocation(line: 1201, column: 37, scope: !10445)
!10447 = !DILocation(line: 1201, column: 51, scope: !10445)
!10448 = !DILocation(line: 1201, column: 54, scope: !10445)
!10449 = !DILocation(line: 1201, column: 19, scope: !10445)
!10450 = !DILocation(line: 1202, column: 23, scope: !10445)
!10451 = !DILocation(line: 1202, column: 26, scope: !10445)
!10452 = !DILocation(line: 1202, column: 21, scope: !10445)
!10453 = !DILocation(line: 1203, column: 17, scope: !10445)
!10454 = !DILocation(line: 1204, column: 22, scope: !10439)
!10455 = !DILocation(line: 1204, column: 24, scope: !10439)
!10456 = distinct !{!10456, !10443, !10457}
!10457 = !DILocation(line: 1204, column: 31, scope: !10439)
!10458 = !DILocation(line: 1205, column: 13, scope: !10439)
!10459 = !DILocation(line: 1206, column: 20, scope: !10387)
!10460 = !DILocation(line: 1206, column: 27, scope: !10387)
!10461 = !DILocation(line: 1206, column: 42, scope: !10387)
!10462 = !DILocation(line: 1206, column: 4, scope: !10387)
!10463 = !DILocation(line: 1207, column: 2, scope: !10387)
!10464 = !DILocation(line: 1208, column: 16, scope: !10465)
!10465 = distinct !DILexicalBlock(scope: !10383, file: !3, line: 1208, column: 16)
!10466 = !DILocation(line: 1208, column: 23, scope: !10465)
!10467 = !DILocation(line: 1209, column: 9, scope: !10465)
!10468 = !DILocation(line: 1209, column: 12, scope: !10465)
!10469 = !DILocation(line: 1209, column: 22, scope: !10465)
!10470 = !DILocation(line: 1209, column: 19, scope: !10465)
!10471 = !DILocation(line: 1209, column: 29, scope: !10465)
!10472 = !DILocation(line: 1209, column: 36, scope: !10465)
!10473 = !DILocation(line: 1209, column: 43, scope: !10465)
!10474 = !DILocation(line: 1209, column: 48, scope: !10465)
!10475 = !DILocation(line: 1209, column: 55, scope: !10465)
!10476 = !DILocation(line: 1209, column: 62, scope: !10465)
!10477 = !DILocation(line: 1208, column: 16, scope: !10383)
!10478 = !DILocation(line: 1212, column: 25, scope: !10479)
!10479 = distinct !DILexicalBlock(scope: !10465, file: !3, line: 1210, column: 2)
!10480 = !DILocation(line: 1212, column: 32, scope: !10479)
!10481 = !DILocation(line: 1212, column: 40, scope: !10479)
!10482 = !DILocation(line: 1212, column: 4, scope: !10479)
!10483 = !DILocation(line: 1214, column: 29, scope: !10479)
!10484 = !DILocation(line: 1214, column: 36, scope: !10479)
!10485 = !DILocation(line: 1214, column: 53, scope: !10479)
!10486 = !DILocation(line: 1214, column: 51, scope: !10479)
!10487 = !DILocation(line: 1215, column: 8, scope: !10479)
!10488 = !DILocation(line: 1215, column: 25, scope: !10479)
!10489 = !DILocation(line: 1215, column: 23, scope: !10479)
!10490 = !DILocation(line: 1214, column: 4, scope: !10479)
!10491 = !DILocation(line: 1216, column: 2, scope: !10479)
!10492 = !DILocation(line: 1217, column: 20, scope: !10493)
!10493 = distinct !DILexicalBlock(scope: !10465, file: !3, line: 1217, column: 16)
!10494 = !DILocation(line: 1217, column: 27, scope: !10493)
!10495 = !DILocation(line: 1217, column: 32, scope: !10493)
!10496 = !DILocation(line: 1217, column: 39, scope: !10493)
!10497 = !DILocation(line: 1217, column: 46, scope: !10493)
!10498 = !DILocation(line: 1217, column: 16, scope: !10465)
!10499 = !DILocation(line: 1219, column: 12, scope: !10500)
!10500 = distinct !DILexicalBlock(scope: !10501, file: !3, line: 1219, column: 8)
!10501 = distinct !DILexicalBlock(scope: !10493, file: !3, line: 1218, column: 2)
!10502 = !DILocation(line: 1219, column: 19, scope: !10500)
!10503 = !DILocation(line: 1219, column: 8, scope: !10501)
!10504 = !DILocation(line: 1220, column: 17, scope: !10500)
!10505 = !DILocation(line: 1220, column: 24, scope: !10500)
!10506 = !DILocation(line: 1220, column: 42, scope: !10500)
!10507 = !DILocation(line: 1220, column: 6, scope: !10500)
!10508 = !DILocation(line: 1221, column: 17, scope: !10509)
!10509 = distinct !DILexicalBlock(scope: !10500, file: !3, line: 1221, column: 13)
!10510 = !DILocation(line: 1221, column: 24, scope: !10509)
!10511 = !DILocation(line: 1221, column: 13, scope: !10500)
!10512 = !DILocation(line: 1222, column: 17, scope: !10509)
!10513 = !DILocation(line: 1222, column: 24, scope: !10509)
!10514 = !DILocation(line: 1222, column: 42, scope: !10509)
!10515 = !DILocation(line: 1222, column: 6, scope: !10509)
!10516 = !DILocation(line: 1223, column: 2, scope: !10501)
!10517 = !DILocation(line: 1224, column: 5, scope: !10320)
!10518 = !DILocation(line: 1156, column: 63, scope: !10317)
!10519 = !DILocation(line: 1156, column: 3, scope: !10317)
!10520 = distinct !{!10520, !10318, !10521}
!10521 = !DILocation(line: 1224, column: 5, scope: !10314)
!10522 = !DILocation(line: 1225, column: 1, scope: !10209)
!10523 = distinct !DISubprogram(name: "perform_var_substitution", scope: !3, file: !3, line: 2112, type: !10524, scopeLine: 2113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10524 = !DISubroutineType(types: !10525)
!10525 = !{!3201, !3314}
!10526 = !DILocalVariable(name: "graph", arg: 1, scope: !10523, file: !3, line: 2112, type: !3314)
!10527 = !DILocation(line: 2112, column: 46, scope: !10523)
!10528 = !DILocalVariable(name: "i", scope: !10523, file: !3, line: 2114, type: !6)
!10529 = !DILocation(line: 2114, column: 16, scope: !10523)
!10530 = !DILocalVariable(name: "size", scope: !10523, file: !3, line: 2115, type: !6)
!10531 = !DILocation(line: 2115, column: 16, scope: !10523)
!10532 = !DILocation(line: 2115, column: 23, scope: !10523)
!10533 = !DILocation(line: 2115, column: 30, scope: !10523)
!10534 = !DILocalVariable(name: "si", scope: !10523, file: !3, line: 2116, type: !3201)
!10535 = !DILocation(line: 2116, column: 20, scope: !10523)
!10536 = !DILocation(line: 2116, column: 40, scope: !10523)
!10537 = !DILocation(line: 2116, column: 25, scope: !10523)
!10538 = !DILocation(line: 2118, column: 3, scope: !10523)
!10539 = !DILocation(line: 2119, column: 31, scope: !10523)
!10540 = !DILocation(line: 2119, column: 29, scope: !10523)
!10541 = !DILocation(line: 2121, column: 32, scope: !10523)
!10542 = !DILocation(line: 2121, column: 30, scope: !10523)
!10543 = !DILocation(line: 2123, column: 23, scope: !10523)
!10544 = !DILocation(line: 2124, column: 24, scope: !10523)
!10545 = !DILocation(line: 2128, column: 10, scope: !10546)
!10546 = distinct !DILexicalBlock(scope: !10523, file: !3, line: 2128, column: 3)
!10547 = !DILocation(line: 2128, column: 8, scope: !10546)
!10548 = !DILocation(line: 2128, column: 15, scope: !10549)
!10549 = distinct !DILexicalBlock(scope: !10546, file: !3, line: 2128, column: 3)
!10550 = !DILocation(line: 2128, column: 19, scope: !10549)
!10551 = !DILocation(line: 2128, column: 17, scope: !10549)
!10552 = !DILocation(line: 2128, column: 3, scope: !10546)
!10553 = !DILocation(line: 2129, column: 10, scope: !10554)
!10554 = distinct !DILexicalBlock(scope: !10549, file: !3, line: 2129, column: 9)
!10555 = !DILocation(line: 2129, column: 9, scope: !10549)
!10556 = !DILocation(line: 2130, column: 23, scope: !10554)
!10557 = !DILocation(line: 2130, column: 30, scope: !10554)
!10558 = !DILocation(line: 2130, column: 34, scope: !10554)
!10559 = !DILocation(line: 2130, column: 38, scope: !10554)
!10560 = !DILocation(line: 2130, column: 51, scope: !10554)
!10561 = !DILocation(line: 2130, column: 7, scope: !10554)
!10562 = !DILocation(line: 2128, column: 36, scope: !10549)
!10563 = !DILocation(line: 2128, column: 3, scope: !10549)
!10564 = distinct !{!10564, !10552, !10565}
!10565 = !DILocation(line: 2130, column: 53, scope: !10546)
!10566 = !DILocation(line: 2132, column: 17, scope: !10523)
!10567 = !DILocation(line: 2132, column: 21, scope: !10523)
!10568 = !DILocation(line: 2132, column: 3, scope: !10523)
!10569 = !DILocation(line: 2134, column: 10, scope: !10570)
!10570 = distinct !DILexicalBlock(scope: !10523, file: !3, line: 2134, column: 3)
!10571 = !DILocation(line: 2134, column: 8, scope: !10570)
!10572 = !DILocation(line: 2134, column: 15, scope: !10573)
!10573 = distinct !DILexicalBlock(scope: !10570, file: !3, line: 2134, column: 3)
!10574 = !DILocation(line: 2134, column: 19, scope: !10573)
!10575 = !DILocation(line: 2134, column: 17, scope: !10573)
!10576 = !DILocation(line: 2134, column: 3, scope: !10570)
!10577 = !DILocation(line: 2135, column: 10, scope: !10578)
!10578 = distinct !DILexicalBlock(scope: !10573, file: !3, line: 2135, column: 9)
!10579 = !DILocation(line: 2135, column: 9, scope: !10573)
!10580 = !DILocation(line: 2136, column: 20, scope: !10578)
!10581 = !DILocation(line: 2136, column: 27, scope: !10578)
!10582 = !DILocation(line: 2136, column: 31, scope: !10578)
!10583 = !DILocation(line: 2136, column: 35, scope: !10578)
!10584 = !DILocation(line: 2136, column: 48, scope: !10578)
!10585 = !DILocation(line: 2136, column: 7, scope: !10578)
!10586 = !DILocation(line: 2134, column: 36, scope: !10573)
!10587 = !DILocation(line: 2134, column: 3, scope: !10573)
!10588 = distinct !{!10588, !10576, !10589}
!10589 = !DILocation(line: 2136, column: 50, scope: !10570)
!10590 = !DILocation(line: 2139, column: 10, scope: !10591)
!10591 = distinct !DILexicalBlock(scope: !10523, file: !3, line: 2139, column: 3)
!10592 = !DILocation(line: 2139, column: 8, scope: !10591)
!10593 = !DILocation(line: 2139, column: 15, scope: !10594)
!10594 = distinct !DILexicalBlock(scope: !10591, file: !3, line: 2139, column: 3)
!10595 = !DILocation(line: 2139, column: 19, scope: !10594)
!10596 = !DILocation(line: 2139, column: 17, scope: !10594)
!10597 = !DILocation(line: 2139, column: 3, scope: !10591)
!10598 = !DILocalVariable(name: "pointed_by", scope: !10599, file: !3, line: 2141, type: !2649)
!10599 = distinct !DILexicalBlock(scope: !10594, file: !3, line: 2140, column: 5)
!10600 = !DILocation(line: 2141, column: 14, scope: !10599)
!10601 = !DILocalVariable(name: "bi", scope: !10599, file: !3, line: 2142, type: !3687)
!10602 = !DILocation(line: 2142, column: 23, scope: !10599)
!10603 = !DILocalVariable(name: "j", scope: !10599, file: !3, line: 2143, type: !6)
!10604 = !DILocation(line: 2143, column: 20, scope: !10599)
!10605 = !DILocalVariable(name: "label", scope: !10599, file: !3, line: 2144, type: !6)
!10606 = !DILocation(line: 2144, column: 20, scope: !10599)
!10607 = !DILocation(line: 2146, column: 12, scope: !10608)
!10608 = distinct !DILexicalBlock(scope: !10599, file: !3, line: 2146, column: 11)
!10609 = !DILocation(line: 2146, column: 19, scope: !10608)
!10610 = !DILocation(line: 2146, column: 30, scope: !10608)
!10611 = !DILocation(line: 2146, column: 11, scope: !10599)
!10612 = !DILocation(line: 2147, column: 2, scope: !10608)
!10613 = !DILocation(line: 2148, column: 20, scope: !10599)
!10614 = !DILocation(line: 2148, column: 18, scope: !10599)
!10615 = !DILocation(line: 2152, column: 7, scope: !10616)
!10616 = distinct !DILexicalBlock(scope: !10599, file: !3, line: 2152, column: 7)
!10617 = !DILocation(line: 2152, column: 7, scope: !10618)
!10618 = distinct !DILexicalBlock(scope: !10616, file: !3, line: 2152, column: 7)
!10619 = !DILocation(line: 2154, column: 20, scope: !10620)
!10620 = distinct !DILexicalBlock(scope: !10618, file: !3, line: 2153, column: 2)
!10621 = !DILocation(line: 2155, column: 6, scope: !10620)
!10622 = !DILocation(line: 2155, column: 13, scope: !10620)
!10623 = !DILocation(line: 2155, column: 27, scope: !10620)
!10624 = !DILocation(line: 2155, column: 31, scope: !10620)
!10625 = !DILocation(line: 2155, column: 44, scope: !10620)
!10626 = !DILocation(line: 2154, column: 4, scope: !10620)
!10627 = !DILocation(line: 2156, column: 2, scope: !10620)
!10628 = distinct !{!10628, !10615, !10629}
!10629 = !DILocation(line: 2156, column: 2, scope: !10616)
!10630 = !DILocation(line: 2158, column: 7, scope: !10599)
!10631 = !DILocation(line: 2162, column: 35, scope: !10599)
!10632 = !DILocation(line: 2163, column: 7, scope: !10599)
!10633 = !DILocation(line: 2162, column: 15, scope: !10599)
!10634 = !DILocation(line: 2162, column: 13, scope: !10599)
!10635 = !DILocation(line: 2164, column: 11, scope: !10636)
!10636 = distinct !DILexicalBlock(scope: !10599, file: !3, line: 2164, column: 11)
!10637 = !DILocation(line: 2164, column: 17, scope: !10636)
!10638 = !DILocation(line: 2164, column: 11, scope: !10599)
!10639 = !DILocation(line: 2166, column: 32, scope: !10640)
!10640 = distinct !DILexicalBlock(scope: !10636, file: !3, line: 2165, column: 2)
!10641 = !DILocation(line: 2166, column: 10, scope: !10640)
!10642 = !DILocation(line: 2167, column: 21, scope: !10640)
!10643 = !DILocation(line: 2168, column: 7, scope: !10640)
!10644 = !DILocation(line: 2168, column: 14, scope: !10640)
!10645 = !DILocation(line: 2167, column: 4, scope: !10640)
!10646 = !DILocation(line: 2169, column: 2, scope: !10640)
!10647 = !DILocation(line: 2172, column: 8, scope: !10648)
!10648 = distinct !DILexicalBlock(scope: !10649, file: !3, line: 2172, column: 8)
!10649 = distinct !DILexicalBlock(scope: !10636, file: !3, line: 2171, column: 2)
!10650 = !DILocation(line: 2172, column: 18, scope: !10648)
!10651 = !DILocation(line: 2172, column: 22, scope: !10648)
!10652 = !DILocation(line: 2172, column: 33, scope: !10648)
!10653 = !DILocation(line: 2172, column: 8, scope: !10649)
!10654 = !DILocation(line: 2173, column: 15, scope: !10648)
!10655 = !DILocation(line: 2174, column: 21, scope: !10648)
!10656 = !DILocation(line: 2174, column: 8, scope: !10648)
!10657 = !DILocation(line: 2174, column: 25, scope: !10648)
!10658 = !DILocation(line: 2173, column: 6, scope: !10648)
!10659 = !DILocation(line: 2175, column: 4, scope: !10649)
!10660 = !DILocation(line: 2177, column: 29, scope: !10599)
!10661 = !DILocation(line: 2177, column: 7, scope: !10599)
!10662 = !DILocation(line: 2177, column: 14, scope: !10599)
!10663 = !DILocation(line: 2177, column: 24, scope: !10599)
!10664 = !DILocation(line: 2177, column: 27, scope: !10599)
!10665 = !DILocation(line: 2179, column: 5, scope: !10599)
!10666 = !DILocation(line: 2139, column: 36, scope: !10594)
!10667 = !DILocation(line: 2139, column: 3, scope: !10594)
!10668 = distinct !{!10668, !10597, !10669}
!10669 = !DILocation(line: 2179, column: 5, scope: !10591)
!10670 = !DILocation(line: 2181, column: 7, scope: !10671)
!10671 = distinct !DILexicalBlock(scope: !10523, file: !3, line: 2181, column: 7)
!10672 = !DILocation(line: 2181, column: 17, scope: !10671)
!10673 = !DILocation(line: 2181, column: 21, scope: !10671)
!10674 = !DILocation(line: 2181, column: 32, scope: !10671)
!10675 = !DILocation(line: 2181, column: 7, scope: !10523)
!10676 = !DILocation(line: 2182, column: 12, scope: !10677)
!10677 = distinct !DILexicalBlock(scope: !10671, file: !3, line: 2182, column: 5)
!10678 = !DILocation(line: 2182, column: 10, scope: !10677)
!10679 = !DILocation(line: 2182, column: 17, scope: !10680)
!10680 = distinct !DILexicalBlock(scope: !10677, file: !3, line: 2182, column: 5)
!10681 = !DILocation(line: 2182, column: 21, scope: !10680)
!10682 = !DILocation(line: 2182, column: 19, scope: !10680)
!10683 = !DILocation(line: 2182, column: 5, scope: !10677)
!10684 = !DILocalVariable(name: "direct_node", scope: !10685, file: !3, line: 2184, type: !1894)
!10685 = distinct !DILexicalBlock(scope: !10680, file: !3, line: 2183, column: 7)
!10686 = !DILocation(line: 2184, column: 7, scope: !10685)
!10687 = !DILocation(line: 2184, column: 21, scope: !10685)
!10688 = !DILocation(line: 2185, column: 11, scope: !10685)
!10689 = !DILocation(line: 2188, column: 4, scope: !10685)
!10690 = !DILocation(line: 2188, column: 51, scope: !10685)
!10691 = !DILocation(line: 2189, column: 17, scope: !10685)
!10692 = !DILocation(line: 2189, column: 4, scope: !10685)
!10693 = !DILocation(line: 2189, column: 21, scope: !10685)
!10694 = !DILocation(line: 2190, column: 4, scope: !10685)
!10695 = !DILocation(line: 2190, column: 11, scope: !10685)
!10696 = !DILocation(line: 2190, column: 25, scope: !10685)
!10697 = !DILocation(line: 2190, column: 29, scope: !10685)
!10698 = !DILocation(line: 2190, column: 42, scope: !10685)
!10699 = !DILocation(line: 2191, column: 4, scope: !10685)
!10700 = !DILocation(line: 2191, column: 11, scope: !10685)
!10701 = !DILocation(line: 2191, column: 21, scope: !10685)
!10702 = !DILocation(line: 2191, column: 25, scope: !10685)
!10703 = !DILocation(line: 2191, column: 38, scope: !10685)
!10704 = !DILocation(line: 2185, column: 2, scope: !10685)
!10705 = !DILocation(line: 2192, column: 7, scope: !10685)
!10706 = !DILocation(line: 2182, column: 38, scope: !10680)
!10707 = !DILocation(line: 2182, column: 5, scope: !10680)
!10708 = distinct !{!10708, !10683, !10709}
!10709 = !DILocation(line: 2192, column: 7, scope: !10677)
!10710 = !DILocation(line: 2196, column: 10, scope: !10711)
!10711 = distinct !DILexicalBlock(scope: !10523, file: !3, line: 2196, column: 3)
!10712 = !DILocation(line: 2196, column: 8, scope: !10711)
!10713 = !DILocation(line: 2196, column: 15, scope: !10714)
!10714 = distinct !DILexicalBlock(scope: !10711, file: !3, line: 2196, column: 3)
!10715 = !DILocation(line: 2196, column: 19, scope: !10714)
!10716 = !DILocation(line: 2196, column: 17, scope: !10714)
!10717 = !DILocation(line: 2196, column: 3, scope: !10711)
!10718 = !DILocalVariable(name: "node", scope: !10719, file: !3, line: 2198, type: !6)
!10719 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2197, column: 5)
!10720 = !DILocation(line: 2198, column: 20, scope: !10719)
!10721 = !DILocation(line: 2198, column: 27, scope: !10719)
!10722 = !DILocation(line: 2198, column: 31, scope: !10719)
!10723 = !DILocation(line: 2198, column: 44, scope: !10719)
!10724 = !DILocation(line: 2200, column: 11, scope: !10725)
!10725 = distinct !DILexicalBlock(scope: !10719, file: !3, line: 2200, column: 11)
!10726 = !DILocation(line: 2200, column: 18, scope: !10725)
!10727 = !DILocation(line: 2200, column: 32, scope: !10725)
!10728 = !DILocation(line: 2200, column: 38, scope: !10725)
!10729 = !DILocation(line: 2200, column: 11, scope: !10719)
!10730 = !DILocation(line: 2202, column: 8, scope: !10731)
!10731 = distinct !DILexicalBlock(scope: !10732, file: !3, line: 2202, column: 8)
!10732 = distinct !DILexicalBlock(scope: !10725, file: !3, line: 2201, column: 2)
!10733 = !DILocation(line: 2202, column: 18, scope: !10731)
!10734 = !DILocation(line: 2202, column: 22, scope: !10731)
!10735 = !DILocation(line: 2202, column: 33, scope: !10731)
!10736 = !DILocation(line: 2202, column: 8, scope: !10732)
!10737 = !DILocation(line: 2203, column: 15, scope: !10731)
!10738 = !DILocation(line: 2205, column: 21, scope: !10731)
!10739 = !DILocation(line: 2205, column: 8, scope: !10731)
!10740 = !DILocation(line: 2205, column: 28, scope: !10731)
!10741 = !DILocation(line: 2203, column: 6, scope: !10731)
!10742 = !DILocation(line: 2206, column: 25, scope: !10732)
!10743 = !DILocation(line: 2207, column: 26, scope: !10732)
!10744 = !DILocation(line: 2207, column: 33, scope: !10732)
!10745 = !DILocation(line: 2207, column: 4, scope: !10732)
!10746 = !DILocation(line: 2208, column: 2, scope: !10732)
!10747 = !DILocation(line: 2209, column: 5, scope: !10719)
!10748 = !DILocation(line: 2196, column: 36, scope: !10714)
!10749 = !DILocation(line: 2196, column: 3, scope: !10714)
!10750 = distinct !{!10750, !10717, !10751}
!10751 = !DILocation(line: 2209, column: 5, scope: !10711)
!10752 = !DILocation(line: 2211, column: 10, scope: !10523)
!10753 = !DILocation(line: 2211, column: 3, scope: !10523)
!10754 = distinct !DISubprogram(name: "rewrite_constraints", scope: !3, file: !3, line: 2339, type: !10755, scopeLine: 2341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10755 = !DISubroutineType(types: !10756)
!10756 = !{null, !3314, !3201}
!10757 = !DILocalVariable(name: "graph", arg: 1, scope: !10754, file: !3, line: 2339, type: !3314)
!10758 = !DILocation(line: 2339, column: 41, scope: !10754)
!10759 = !DILocalVariable(name: "si", arg: 2, scope: !10754, file: !3, line: 2340, type: !3201)
!10760 = !DILocation(line: 2340, column: 25, scope: !10754)
!10761 = !DILocalVariable(name: "i", scope: !10754, file: !3, line: 2342, type: !1730)
!10762 = !DILocation(line: 2342, column: 7, scope: !10754)
!10763 = !DILocalVariable(name: "j", scope: !10754, file: !3, line: 2343, type: !6)
!10764 = !DILocation(line: 2343, column: 16, scope: !10754)
!10765 = !DILocalVariable(name: "c", scope: !10754, file: !3, line: 2344, type: !1715)
!10766 = !DILocation(line: 2344, column: 16, scope: !10754)
!10767 = !DILocation(line: 2346, column: 10, scope: !10768)
!10768 = distinct !DILexicalBlock(scope: !10754, file: !3, line: 2346, column: 3)
!10769 = !DILocation(line: 2346, column: 8, scope: !10768)
!10770 = !DILocation(line: 2346, column: 15, scope: !10771)
!10771 = distinct !DILexicalBlock(scope: !10768, file: !3, line: 2346, column: 3)
!10772 = !DILocation(line: 2346, column: 19, scope: !10771)
!10773 = !DILocation(line: 2346, column: 26, scope: !10771)
!10774 = !DILocation(line: 2346, column: 17, scope: !10771)
!10775 = !DILocation(line: 2346, column: 3, scope: !10768)
!10776 = !DILocation(line: 2347, column: 5, scope: !10771)
!10777 = !DILocation(line: 2346, column: 33, scope: !10771)
!10778 = !DILocation(line: 2346, column: 3, scope: !10771)
!10779 = distinct !{!10779, !10775, !10780}
!10780 = !DILocation(line: 2347, column: 5, scope: !10768)
!10781 = !DILocation(line: 2349, column: 10, scope: !10782)
!10782 = distinct !DILexicalBlock(scope: !10754, file: !3, line: 2349, column: 3)
!10783 = !DILocation(line: 2349, column: 8, scope: !10782)
!10784 = !DILocation(line: 2349, column: 15, scope: !10785)
!10785 = distinct !DILexicalBlock(scope: !10782, file: !3, line: 2349, column: 3)
!10786 = !DILocation(line: 2349, column: 3, scope: !10782)
!10787 = !DILocalVariable(name: "lhs", scope: !10788, file: !3, line: 2351, type: !1720)
!10788 = distinct !DILexicalBlock(scope: !10785, file: !3, line: 2350, column: 5)
!10789 = !DILocation(line: 2351, column: 30, scope: !10788)
!10790 = !DILocation(line: 2351, column: 36, scope: !10788)
!10791 = !DILocation(line: 2351, column: 39, scope: !10788)
!10792 = !DILocalVariable(name: "rhs", scope: !10788, file: !3, line: 2352, type: !1720)
!10793 = !DILocation(line: 2352, column: 30, scope: !10788)
!10794 = !DILocation(line: 2352, column: 36, scope: !10788)
!10795 = !DILocation(line: 2352, column: 39, scope: !10788)
!10796 = !DILocalVariable(name: "lhsvar", scope: !10788, file: !3, line: 2353, type: !6)
!10797 = !DILocation(line: 2353, column: 20, scope: !10788)
!10798 = !DILocation(line: 2353, column: 39, scope: !10788)
!10799 = !DILocation(line: 2353, column: 29, scope: !10788)
!10800 = !DILocalVariable(name: "rhsvar", scope: !10788, file: !3, line: 2354, type: !6)
!10801 = !DILocation(line: 2354, column: 20, scope: !10788)
!10802 = !DILocation(line: 2354, column: 39, scope: !10788)
!10803 = !DILocation(line: 2354, column: 29, scope: !10788)
!10804 = !DILocalVariable(name: "lhsnode", scope: !10788, file: !3, line: 2355, type: !6)
!10805 = !DILocation(line: 2355, column: 20, scope: !10788)
!10806 = !DILocalVariable(name: "rhsnode", scope: !10788, file: !3, line: 2355, type: !6)
!10807 = !DILocation(line: 2355, column: 29, scope: !10788)
!10808 = !DILocalVariable(name: "lhslabel", scope: !10788, file: !3, line: 2356, type: !6)
!10809 = !DILocation(line: 2356, column: 20, scope: !10788)
!10810 = !DILocalVariable(name: "rhslabel", scope: !10788, file: !3, line: 2356, type: !6)
!10811 = !DILocation(line: 2356, column: 30, scope: !10788)
!10812 = !DILocation(line: 2358, column: 17, scope: !10788)
!10813 = !DILocation(line: 2358, column: 21, scope: !10788)
!10814 = !DILocation(line: 2358, column: 34, scope: !10788)
!10815 = !DILocation(line: 2358, column: 15, scope: !10788)
!10816 = !DILocation(line: 2359, column: 17, scope: !10788)
!10817 = !DILocation(line: 2359, column: 21, scope: !10788)
!10818 = !DILocation(line: 2359, column: 34, scope: !10788)
!10819 = !DILocation(line: 2359, column: 15, scope: !10788)
!10820 = !DILocation(line: 2360, column: 18, scope: !10788)
!10821 = !DILocation(line: 2360, column: 25, scope: !10788)
!10822 = !DILocation(line: 2360, column: 39, scope: !10788)
!10823 = !DILocation(line: 2360, column: 16, scope: !10788)
!10824 = !DILocation(line: 2361, column: 18, scope: !10788)
!10825 = !DILocation(line: 2361, column: 25, scope: !10788)
!10826 = !DILocation(line: 2361, column: 39, scope: !10788)
!10827 = !DILocation(line: 2361, column: 16, scope: !10788)
!10828 = !DILocation(line: 2365, column: 11, scope: !10829)
!10829 = distinct !DILexicalBlock(scope: !10788, file: !3, line: 2365, column: 11)
!10830 = !DILocation(line: 2365, column: 20, scope: !10829)
!10831 = !DILocation(line: 2365, column: 11, scope: !10788)
!10832 = !DILocation(line: 2367, column: 8, scope: !10833)
!10833 = distinct !DILexicalBlock(scope: !10834, file: !3, line: 2367, column: 8)
!10834 = distinct !DILexicalBlock(scope: !10829, file: !3, line: 2366, column: 2)
!10835 = !DILocation(line: 2367, column: 18, scope: !10833)
!10836 = !DILocation(line: 2367, column: 22, scope: !10833)
!10837 = !DILocation(line: 2367, column: 33, scope: !10833)
!10838 = !DILocation(line: 2367, column: 8, scope: !10834)
!10839 = !DILocation(line: 2370, column: 17, scope: !10840)
!10840 = distinct !DILexicalBlock(scope: !10833, file: !3, line: 2368, column: 6)
!10841 = !DILocation(line: 2372, column: 27, scope: !10840)
!10842 = !DILocation(line: 2372, column: 10, scope: !10840)
!10843 = !DILocation(line: 2372, column: 33, scope: !10840)
!10844 = !DILocation(line: 2370, column: 8, scope: !10840)
!10845 = !DILocation(line: 2373, column: 25, scope: !10840)
!10846 = !DILocation(line: 2373, column: 36, scope: !10840)
!10847 = !DILocation(line: 2373, column: 8, scope: !10840)
!10848 = !DILocation(line: 2374, column: 6, scope: !10840)
!10849 = !DILocation(line: 2375, column: 4, scope: !10834)
!10850 = !DILocation(line: 2376, column: 4, scope: !10834)
!10851 = !DILocation(line: 2379, column: 11, scope: !10852)
!10852 = distinct !DILexicalBlock(scope: !10788, file: !3, line: 2379, column: 11)
!10853 = !DILocation(line: 2379, column: 20, scope: !10852)
!10854 = !DILocation(line: 2379, column: 11, scope: !10788)
!10855 = !DILocation(line: 2381, column: 8, scope: !10856)
!10856 = distinct !DILexicalBlock(scope: !10857, file: !3, line: 2381, column: 8)
!10857 = distinct !DILexicalBlock(scope: !10852, file: !3, line: 2380, column: 2)
!10858 = !DILocation(line: 2381, column: 18, scope: !10856)
!10859 = !DILocation(line: 2381, column: 22, scope: !10856)
!10860 = !DILocation(line: 2381, column: 33, scope: !10856)
!10861 = !DILocation(line: 2381, column: 8, scope: !10857)
!10862 = !DILocation(line: 2384, column: 17, scope: !10863)
!10863 = distinct !DILexicalBlock(scope: !10856, file: !3, line: 2382, column: 6)
!10864 = !DILocation(line: 2386, column: 27, scope: !10863)
!10865 = !DILocation(line: 2386, column: 10, scope: !10863)
!10866 = !DILocation(line: 2386, column: 33, scope: !10863)
!10867 = !DILocation(line: 2384, column: 8, scope: !10863)
!10868 = !DILocation(line: 2387, column: 25, scope: !10863)
!10869 = !DILocation(line: 2387, column: 36, scope: !10863)
!10870 = !DILocation(line: 2387, column: 8, scope: !10863)
!10871 = !DILocation(line: 2388, column: 6, scope: !10863)
!10872 = !DILocation(line: 2389, column: 4, scope: !10857)
!10873 = !DILocation(line: 2390, column: 4, scope: !10857)
!10874 = !DILocation(line: 2393, column: 38, scope: !10788)
!10875 = !DILocation(line: 2393, column: 45, scope: !10788)
!10876 = !DILocation(line: 2393, column: 53, scope: !10788)
!10877 = !DILocation(line: 2393, column: 16, scope: !10788)
!10878 = !DILocation(line: 2393, column: 14, scope: !10788)
!10879 = !DILocation(line: 2394, column: 38, scope: !10788)
!10880 = !DILocation(line: 2394, column: 45, scope: !10788)
!10881 = !DILocation(line: 2394, column: 53, scope: !10788)
!10882 = !DILocation(line: 2394, column: 16, scope: !10788)
!10883 = !DILocation(line: 2394, column: 14, scope: !10788)
!10884 = !DILocation(line: 2395, column: 20, scope: !10788)
!10885 = !DILocation(line: 2395, column: 7, scope: !10788)
!10886 = !DILocation(line: 2395, column: 10, scope: !10788)
!10887 = !DILocation(line: 2395, column: 14, scope: !10788)
!10888 = !DILocation(line: 2395, column: 18, scope: !10788)
!10889 = !DILocation(line: 2396, column: 20, scope: !10788)
!10890 = !DILocation(line: 2396, column: 7, scope: !10788)
!10891 = !DILocation(line: 2396, column: 10, scope: !10788)
!10892 = !DILocation(line: 2396, column: 14, scope: !10788)
!10893 = !DILocation(line: 2396, column: 18, scope: !10788)
!10894 = !DILocation(line: 2398, column: 5, scope: !10788)
!10895 = !DILocation(line: 2349, column: 63, scope: !10785)
!10896 = !DILocation(line: 2349, column: 3, scope: !10785)
!10897 = distinct !{!10897, !10786, !10898}
!10898 = !DILocation(line: 2398, column: 5, scope: !10782)
!10899 = !DILocation(line: 2399, column: 1, scope: !10754)
!10900 = distinct !DISubprogram(name: "build_succ_graph", scope: !3, file: !3, line: 1230, type: !3548, scopeLine: 1231, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!10901 = !DILocalVariable(name: "i", scope: !10900, file: !3, line: 1232, type: !6)
!10902 = !DILocation(line: 1232, column: 12, scope: !10900)
!10903 = !DILocalVariable(name: "t", scope: !10900, file: !3, line: 1232, type: !6)
!10904 = !DILocation(line: 1232, column: 15, scope: !10900)
!10905 = !DILocalVariable(name: "c", scope: !10900, file: !3, line: 1233, type: !1715)
!10906 = !DILocation(line: 1233, column: 16, scope: !10900)
!10907 = !DILocation(line: 1235, column: 10, scope: !10908)
!10908 = distinct !DILexicalBlock(scope: !10900, file: !3, line: 1235, column: 3)
!10909 = !DILocation(line: 1235, column: 8, scope: !10908)
!10910 = !DILocation(line: 1235, column: 15, scope: !10911)
!10911 = distinct !DILexicalBlock(scope: !10908, file: !3, line: 1235, column: 3)
!10912 = !DILocation(line: 1235, column: 3, scope: !10908)
!10913 = !DILocalVariable(name: "lhs", scope: !10914, file: !3, line: 1237, type: !1720)
!10914 = distinct !DILexicalBlock(scope: !10911, file: !3, line: 1236, column: 5)
!10915 = !DILocation(line: 1237, column: 30, scope: !10914)
!10916 = !DILocalVariable(name: "rhs", scope: !10914, file: !3, line: 1238, type: !1720)
!10917 = !DILocation(line: 1238, column: 30, scope: !10914)
!10918 = !DILocalVariable(name: "lhsvar", scope: !10914, file: !3, line: 1239, type: !6)
!10919 = !DILocation(line: 1239, column: 20, scope: !10914)
!10920 = !DILocalVariable(name: "rhsvar", scope: !10914, file: !3, line: 1240, type: !6)
!10921 = !DILocation(line: 1240, column: 20, scope: !10914)
!10922 = !DILocation(line: 1242, column: 12, scope: !10923)
!10923 = distinct !DILexicalBlock(scope: !10914, file: !3, line: 1242, column: 11)
!10924 = !DILocation(line: 1242, column: 11, scope: !10914)
!10925 = !DILocation(line: 1243, column: 2, scope: !10923)
!10926 = !DILocation(line: 1245, column: 13, scope: !10914)
!10927 = !DILocation(line: 1245, column: 16, scope: !10914)
!10928 = !DILocation(line: 1246, column: 13, scope: !10914)
!10929 = !DILocation(line: 1246, column: 16, scope: !10914)
!10930 = !DILocation(line: 1247, column: 26, scope: !10914)
!10931 = !DILocation(line: 1247, column: 16, scope: !10914)
!10932 = !DILocation(line: 1247, column: 14, scope: !10914)
!10933 = !DILocation(line: 1248, column: 26, scope: !10914)
!10934 = !DILocation(line: 1248, column: 16, scope: !10914)
!10935 = !DILocation(line: 1248, column: 14, scope: !10914)
!10936 = !DILocation(line: 1250, column: 15, scope: !10937)
!10937 = distinct !DILexicalBlock(scope: !10914, file: !3, line: 1250, column: 11)
!10938 = !DILocation(line: 1250, column: 20, scope: !10937)
!10939 = !DILocation(line: 1250, column: 11, scope: !10914)
!10940 = !DILocation(line: 1252, column: 12, scope: !10941)
!10941 = distinct !DILexicalBlock(scope: !10942, file: !3, line: 1252, column: 8)
!10942 = distinct !DILexicalBlock(scope: !10937, file: !3, line: 1251, column: 2)
!10943 = !DILocation(line: 1252, column: 19, scope: !10941)
!10944 = !DILocation(line: 1252, column: 24, scope: !10941)
!10945 = !DILocation(line: 1252, column: 31, scope: !10941)
!10946 = !DILocation(line: 1252, column: 38, scope: !10941)
!10947 = !DILocation(line: 1252, column: 43, scope: !10941)
!10948 = !DILocation(line: 1252, column: 50, scope: !10941)
!10949 = !DILocation(line: 1252, column: 55, scope: !10941)
!10950 = !DILocation(line: 1252, column: 8, scope: !10942)
!10951 = !DILocation(line: 1253, column: 22, scope: !10941)
!10952 = !DILocation(line: 1253, column: 29, scope: !10941)
!10953 = !DILocation(line: 1253, column: 46, scope: !10941)
!10954 = !DILocation(line: 1253, column: 44, scope: !10941)
!10955 = !DILocation(line: 1253, column: 54, scope: !10941)
!10956 = !DILocation(line: 1253, column: 6, scope: !10941)
!10957 = !DILocation(line: 1254, column: 2, scope: !10942)
!10958 = !DILocation(line: 1255, column: 20, scope: !10959)
!10959 = distinct !DILexicalBlock(scope: !10937, file: !3, line: 1255, column: 16)
!10960 = !DILocation(line: 1255, column: 25, scope: !10959)
!10961 = !DILocation(line: 1255, column: 16, scope: !10937)
!10962 = !DILocation(line: 1257, column: 12, scope: !10963)
!10963 = distinct !DILexicalBlock(scope: !10964, file: !3, line: 1257, column: 8)
!10964 = distinct !DILexicalBlock(scope: !10959, file: !3, line: 1256, column: 2)
!10965 = !DILocation(line: 1257, column: 19, scope: !10963)
!10966 = !DILocation(line: 1257, column: 24, scope: !10963)
!10967 = !DILocation(line: 1257, column: 31, scope: !10963)
!10968 = !DILocation(line: 1257, column: 38, scope: !10963)
!10969 = !DILocation(line: 1257, column: 43, scope: !10963)
!10970 = !DILocation(line: 1257, column: 50, scope: !10963)
!10971 = !DILocation(line: 1257, column: 55, scope: !10963)
!10972 = !DILocation(line: 1257, column: 8, scope: !10964)
!10973 = !DILocation(line: 1258, column: 22, scope: !10963)
!10974 = !DILocation(line: 1258, column: 29, scope: !10963)
!10975 = !DILocation(line: 1258, column: 37, scope: !10963)
!10976 = !DILocation(line: 1258, column: 54, scope: !10963)
!10977 = !DILocation(line: 1258, column: 52, scope: !10963)
!10978 = !DILocation(line: 1258, column: 6, scope: !10963)
!10979 = !DILocation(line: 1259, column: 2, scope: !10964)
!10980 = !DILocation(line: 1260, column: 20, scope: !10981)
!10981 = distinct !DILexicalBlock(scope: !10959, file: !3, line: 1260, column: 16)
!10982 = !DILocation(line: 1260, column: 25, scope: !10981)
!10983 = !DILocation(line: 1260, column: 16, scope: !10959)
!10984 = !DILocation(line: 1263, column: 4, scope: !10985)
!10985 = distinct !DILexicalBlock(scope: !10981, file: !3, line: 1261, column: 2)
!10986 = !DILocation(line: 1264, column: 33, scope: !10985)
!10987 = !DILocation(line: 1264, column: 20, scope: !10985)
!10988 = !DILocation(line: 1264, column: 42, scope: !10985)
!10989 = !DILocation(line: 1264, column: 52, scope: !10985)
!10990 = !DILocation(line: 1264, column: 4, scope: !10985)
!10991 = !DILocation(line: 1265, column: 2, scope: !10985)
!10992 = !DILocation(line: 1266, column: 16, scope: !10993)
!10993 = distinct !DILexicalBlock(scope: !10981, file: !3, line: 1266, column: 16)
!10994 = !DILocation(line: 1266, column: 23, scope: !10993)
!10995 = !DILocation(line: 1267, column: 9, scope: !10993)
!10996 = !DILocation(line: 1267, column: 12, scope: !10993)
!10997 = !DILocation(line: 1267, column: 22, scope: !10993)
!10998 = !DILocation(line: 1267, column: 19, scope: !10993)
!10999 = !DILocation(line: 1267, column: 29, scope: !10993)
!11000 = !DILocation(line: 1267, column: 36, scope: !10993)
!11001 = !DILocation(line: 1267, column: 43, scope: !10993)
!11002 = !DILocation(line: 1267, column: 48, scope: !10993)
!11003 = !DILocation(line: 1267, column: 55, scope: !10993)
!11004 = !DILocation(line: 1267, column: 62, scope: !10993)
!11005 = !DILocation(line: 1266, column: 16, scope: !10981)
!11006 = !DILocation(line: 1269, column: 20, scope: !11007)
!11007 = distinct !DILexicalBlock(scope: !10993, file: !3, line: 1268, column: 2)
!11008 = !DILocation(line: 1269, column: 27, scope: !11007)
!11009 = !DILocation(line: 1269, column: 35, scope: !11007)
!11010 = !DILocation(line: 1269, column: 4, scope: !11007)
!11011 = !DILocation(line: 1270, column: 2, scope: !11007)
!11012 = !DILocation(line: 1271, column: 5, scope: !10914)
!11013 = !DILocation(line: 1235, column: 63, scope: !10911)
!11014 = !DILocation(line: 1235, column: 3, scope: !10911)
!11015 = distinct !{!11015, !10912, !11016}
!11016 = !DILocation(line: 1271, column: 5, scope: !10908)
!11017 = !DILocation(line: 1275, column: 7, scope: !10900)
!11018 = !DILocation(line: 1275, column: 5, scope: !10900)
!11019 = !DILocation(line: 1276, column: 10, scope: !11020)
!11020 = distinct !DILexicalBlock(scope: !10900, file: !3, line: 1276, column: 3)
!11021 = !DILocation(line: 1276, column: 8, scope: !11020)
!11022 = !DILocation(line: 1276, column: 28, scope: !11023)
!11023 = distinct !DILexicalBlock(scope: !11020, file: !3, line: 1276, column: 3)
!11024 = !DILocation(line: 1276, column: 32, scope: !11023)
!11025 = !DILocation(line: 1276, column: 30, scope: !11023)
!11026 = !DILocation(line: 1276, column: 3, scope: !11020)
!11027 = !DILocation(line: 1278, column: 12, scope: !11028)
!11028 = distinct !DILexicalBlock(scope: !11029, file: !3, line: 1278, column: 11)
!11029 = distinct !DILexicalBlock(scope: !11023, file: !3, line: 1277, column: 5)
!11030 = !DILocation(line: 1279, column: 4, scope: !11028)
!11031 = !DILocation(line: 1279, column: 20, scope: !11028)
!11032 = !DILocation(line: 1279, column: 7, scope: !11028)
!11033 = !DILocation(line: 1279, column: 24, scope: !11028)
!11034 = !DILocation(line: 1278, column: 11, scope: !11029)
!11035 = !DILocation(line: 1280, column: 18, scope: !11028)
!11036 = !DILocation(line: 1280, column: 31, scope: !11028)
!11037 = !DILocation(line: 1280, column: 25, scope: !11028)
!11038 = !DILocation(line: 1280, column: 35, scope: !11028)
!11039 = !DILocation(line: 1280, column: 2, scope: !11028)
!11040 = !DILocation(line: 1281, column: 5, scope: !11029)
!11041 = !DILocation(line: 1276, column: 48, scope: !11023)
!11042 = !DILocation(line: 1276, column: 3, scope: !11023)
!11043 = distinct !{!11043, !11026, !11044}
!11044 = !DILocation(line: 1281, column: 5, scope: !11020)
!11045 = !DILocation(line: 1284, column: 19, scope: !10900)
!11046 = !DILocation(line: 1284, column: 26, scope: !10900)
!11047 = !DILocation(line: 1284, column: 45, scope: !10900)
!11048 = !DILocation(line: 1284, column: 3, scope: !10900)
!11049 = !DILocation(line: 1285, column: 1, scope: !10900)
!11050 = distinct !DISubprogram(name: "free_var_substitution_info", scope: !3, file: !3, line: 2218, type: !11051, scopeLine: 2219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11051 = !DISubroutineType(types: !11052)
!11052 = !{null, !3201}
!11053 = !DILocalVariable(name: "si", arg: 1, scope: !11050, file: !3, line: 2218, type: !3201)
!11054 = !DILocation(line: 2218, column: 46, scope: !11050)
!11055 = !DILocation(line: 2220, column: 18, scope: !11050)
!11056 = !DILocation(line: 2220, column: 3, scope: !11050)
!11057 = !DILocation(line: 2221, column: 9, scope: !11050)
!11058 = !DILocation(line: 2221, column: 16, scope: !11050)
!11059 = !DILocation(line: 2221, column: 3, scope: !11050)
!11060 = !DILocation(line: 2222, column: 9, scope: !11050)
!11061 = !DILocation(line: 2222, column: 16, scope: !11050)
!11062 = !DILocation(line: 2222, column: 3, scope: !11050)
!11063 = !DILocation(line: 2223, column: 9, scope: !11050)
!11064 = !DILocation(line: 2223, column: 16, scope: !11050)
!11065 = !DILocation(line: 2223, column: 3, scope: !11050)
!11066 = !DILocation(line: 2224, column: 9, scope: !11050)
!11067 = !DILocation(line: 2224, column: 16, scope: !11050)
!11068 = !DILocation(line: 2224, column: 3, scope: !11050)
!11069 = !DILocation(line: 2225, column: 9, scope: !11050)
!11070 = !DILocation(line: 2225, column: 16, scope: !11050)
!11071 = !DILocation(line: 2225, column: 3, scope: !11050)
!11072 = !DILocation(line: 2226, column: 3, scope: !11050)
!11073 = !DILocation(line: 2227, column: 16, scope: !11050)
!11074 = !DILocation(line: 2227, column: 3, scope: !11050)
!11075 = !DILocation(line: 2228, column: 16, scope: !11050)
!11076 = !DILocation(line: 2228, column: 3, scope: !11050)
!11077 = !DILocation(line: 2229, column: 3, scope: !11050)
!11078 = !DILocation(line: 2230, column: 1, scope: !11050)
!11079 = distinct !DISubprogram(name: "move_complex_constraints", scope: !3, file: !3, line: 2303, type: !11080, scopeLine: 2304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11080 = !DISubroutineType(types: !11081)
!11081 = !{null, !3314}
!11082 = !DILocalVariable(name: "graph", arg: 1, scope: !11079, file: !3, line: 2303, type: !3314)
!11083 = !DILocation(line: 2303, column: 46, scope: !11079)
!11084 = !DILocalVariable(name: "i", scope: !11079, file: !3, line: 2305, type: !1730)
!11085 = !DILocation(line: 2305, column: 7, scope: !11079)
!11086 = !DILocalVariable(name: "c", scope: !11079, file: !3, line: 2306, type: !1715)
!11087 = !DILocation(line: 2306, column: 16, scope: !11079)
!11088 = !DILocation(line: 2308, column: 10, scope: !11089)
!11089 = distinct !DILexicalBlock(scope: !11079, file: !3, line: 2308, column: 3)
!11090 = !DILocation(line: 2308, column: 8, scope: !11089)
!11091 = !DILocation(line: 2308, column: 15, scope: !11092)
!11092 = distinct !DILexicalBlock(scope: !11089, file: !3, line: 2308, column: 3)
!11093 = !DILocation(line: 2308, column: 3, scope: !11089)
!11094 = !DILocation(line: 2310, column: 11, scope: !11095)
!11095 = distinct !DILexicalBlock(scope: !11096, file: !3, line: 2310, column: 11)
!11096 = distinct !DILexicalBlock(scope: !11092, file: !3, line: 2309, column: 5)
!11097 = !DILocation(line: 2310, column: 11, scope: !11096)
!11098 = !DILocalVariable(name: "lhs", scope: !11099, file: !3, line: 2312, type: !1720)
!11099 = distinct !DILexicalBlock(scope: !11095, file: !3, line: 2311, column: 2)
!11100 = !DILocation(line: 2312, column: 27, scope: !11099)
!11101 = !DILocation(line: 2312, column: 33, scope: !11099)
!11102 = !DILocation(line: 2312, column: 36, scope: !11099)
!11103 = !DILocalVariable(name: "rhs", scope: !11099, file: !3, line: 2313, type: !1720)
!11104 = !DILocation(line: 2313, column: 27, scope: !11099)
!11105 = !DILocation(line: 2313, column: 33, scope: !11099)
!11106 = !DILocation(line: 2313, column: 36, scope: !11099)
!11107 = !DILocation(line: 2315, column: 12, scope: !11108)
!11108 = distinct !DILexicalBlock(scope: !11099, file: !3, line: 2315, column: 8)
!11109 = !DILocation(line: 2315, column: 17, scope: !11108)
!11110 = !DILocation(line: 2315, column: 8, scope: !11099)
!11111 = !DILocation(line: 2317, column: 29, scope: !11112)
!11112 = distinct !DILexicalBlock(scope: !11108, file: !3, line: 2316, column: 6)
!11113 = !DILocation(line: 2317, column: 40, scope: !11112)
!11114 = !DILocation(line: 2317, column: 45, scope: !11112)
!11115 = !DILocation(line: 2317, column: 8, scope: !11112)
!11116 = !DILocation(line: 2318, column: 6, scope: !11112)
!11117 = !DILocation(line: 2319, column: 17, scope: !11118)
!11118 = distinct !DILexicalBlock(scope: !11108, file: !3, line: 2319, column: 13)
!11119 = !DILocation(line: 2319, column: 22, scope: !11118)
!11120 = !DILocation(line: 2319, column: 13, scope: !11108)
!11121 = !DILocation(line: 2321, column: 31, scope: !11122)
!11122 = distinct !DILexicalBlock(scope: !11123, file: !3, line: 2321, column: 12)
!11123 = distinct !DILexicalBlock(scope: !11118, file: !3, line: 2320, column: 6)
!11124 = !DILocation(line: 2321, column: 14, scope: !11122)
!11125 = !DILocation(line: 2321, column: 37, scope: !11122)
!11126 = !DILocation(line: 2321, column: 13, scope: !11122)
!11127 = !DILocation(line: 2321, column: 12, scope: !11123)
!11128 = !DILocation(line: 2322, column: 24, scope: !11122)
!11129 = !DILocation(line: 2322, column: 35, scope: !11122)
!11130 = !DILocation(line: 2322, column: 40, scope: !11122)
!11131 = !DILocation(line: 2322, column: 3, scope: !11122)
!11132 = !DILocation(line: 2323, column: 6, scope: !11123)
!11133 = !DILocation(line: 2324, column: 17, scope: !11134)
!11134 = distinct !DILexicalBlock(scope: !11118, file: !3, line: 2324, column: 13)
!11135 = !DILocation(line: 2324, column: 22, scope: !11134)
!11136 = !DILocation(line: 2324, column: 35, scope: !11134)
!11137 = !DILocation(line: 2324, column: 42, scope: !11134)
!11138 = !DILocation(line: 2324, column: 46, scope: !11134)
!11139 = !DILocation(line: 2325, column: 6, scope: !11134)
!11140 = !DILocation(line: 2325, column: 14, scope: !11134)
!11141 = !DILocation(line: 2325, column: 21, scope: !11134)
!11142 = !DILocation(line: 2325, column: 26, scope: !11134)
!11143 = !DILocation(line: 2325, column: 33, scope: !11134)
!11144 = !DILocation(line: 2325, column: 40, scope: !11134)
!11145 = !DILocation(line: 2324, column: 13, scope: !11118)
!11146 = !DILocation(line: 2327, column: 29, scope: !11147)
!11147 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 2326, column: 6)
!11148 = !DILocation(line: 2327, column: 40, scope: !11147)
!11149 = !DILocation(line: 2327, column: 45, scope: !11147)
!11150 = !DILocation(line: 2327, column: 8, scope: !11147)
!11151 = !DILocation(line: 2328, column: 6, scope: !11147)
!11152 = !DILocation(line: 2329, column: 2, scope: !11099)
!11153 = !DILocation(line: 2330, column: 5, scope: !11096)
!11154 = !DILocation(line: 2308, column: 63, scope: !11092)
!11155 = !DILocation(line: 2308, column: 3, scope: !11092)
!11156 = distinct !{!11156, !11093, !11157}
!11157 = !DILocation(line: 2330, column: 5, scope: !11089)
!11158 = !DILocation(line: 2331, column: 1, scope: !11079)
!11159 = distinct !DISubprogram(name: "unite_pointer_equivalences", scope: !3, file: !3, line: 2277, type: !11080, scopeLine: 2278, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11160 = !DILocalVariable(name: "graph", arg: 1, scope: !11159, file: !3, line: 2277, type: !3314)
!11161 = !DILocation(line: 2277, column: 48, scope: !11159)
!11162 = !DILocalVariable(name: "i", scope: !11159, file: !3, line: 2279, type: !6)
!11163 = !DILocation(line: 2279, column: 16, scope: !11159)
!11164 = !DILocation(line: 2283, column: 10, scope: !11165)
!11165 = distinct !DILexicalBlock(scope: !11159, file: !3, line: 2283, column: 3)
!11166 = !DILocation(line: 2283, column: 8, scope: !11165)
!11167 = !DILocation(line: 2283, column: 15, scope: !11168)
!11168 = distinct !DILexicalBlock(scope: !11165, file: !3, line: 2283, column: 3)
!11169 = !DILocation(line: 2283, column: 19, scope: !11168)
!11170 = !DILocation(line: 2283, column: 17, scope: !11168)
!11171 = !DILocation(line: 2283, column: 3, scope: !11165)
!11172 = !DILocalVariable(name: "label", scope: !11173, file: !3, line: 2285, type: !6)
!11173 = distinct !DILexicalBlock(scope: !11168, file: !3, line: 2284, column: 5)
!11174 = !DILocation(line: 2285, column: 20, scope: !11173)
!11175 = !DILocation(line: 2285, column: 28, scope: !11173)
!11176 = !DILocation(line: 2285, column: 35, scope: !11173)
!11177 = !DILocation(line: 2285, column: 38, scope: !11173)
!11178 = !DILocation(line: 2286, column: 11, scope: !11179)
!11179 = distinct !DILexicalBlock(scope: !11173, file: !3, line: 2286, column: 11)
!11180 = !DILocation(line: 2286, column: 11, scope: !11173)
!11181 = !DILocalVariable(name: "label_rep", scope: !11182, file: !3, line: 2288, type: !1730)
!11182 = distinct !DILexicalBlock(scope: !11179, file: !3, line: 2287, column: 2)
!11183 = !DILocation(line: 2288, column: 8, scope: !11182)
!11184 = !DILocation(line: 2288, column: 20, scope: !11182)
!11185 = !DILocation(line: 2288, column: 27, scope: !11182)
!11186 = !DILocation(line: 2288, column: 34, scope: !11182)
!11187 = !DILocation(line: 2290, column: 8, scope: !11188)
!11188 = distinct !DILexicalBlock(scope: !11182, file: !3, line: 2290, column: 8)
!11189 = !DILocation(line: 2290, column: 18, scope: !11188)
!11190 = !DILocation(line: 2290, column: 8, scope: !11182)
!11191 = !DILocation(line: 2291, column: 6, scope: !11188)
!11192 = !DILocation(line: 2293, column: 22, scope: !11182)
!11193 = !DILocation(line: 2293, column: 16, scope: !11182)
!11194 = !DILocation(line: 2293, column: 14, scope: !11182)
!11195 = !DILocation(line: 2294, column: 8, scope: !11196)
!11196 = distinct !DILexicalBlock(scope: !11182, file: !3, line: 2294, column: 8)
!11197 = !DILocation(line: 2294, column: 18, scope: !11196)
!11198 = !DILocation(line: 2294, column: 23, scope: !11196)
!11199 = !DILocation(line: 2294, column: 33, scope: !11196)
!11200 = !DILocation(line: 2294, column: 50, scope: !11196)
!11201 = !DILocation(line: 2294, column: 44, scope: !11196)
!11202 = !DILocation(line: 2294, column: 26, scope: !11196)
!11203 = !DILocation(line: 2294, column: 8, scope: !11182)
!11204 = !DILocation(line: 2295, column: 19, scope: !11196)
!11205 = !DILocation(line: 2295, column: 26, scope: !11196)
!11206 = !DILocation(line: 2295, column: 37, scope: !11196)
!11207 = !DILocation(line: 2295, column: 6, scope: !11196)
!11208 = !DILocation(line: 2296, column: 2, scope: !11182)
!11209 = !DILocation(line: 2297, column: 5, scope: !11173)
!11210 = !DILocation(line: 2283, column: 36, scope: !11168)
!11211 = !DILocation(line: 2283, column: 3, scope: !11168)
!11212 = distinct !{!11212, !11171, !11213}
!11213 = !DILocation(line: 2297, column: 5, scope: !11165)
!11214 = !DILocation(line: 2298, column: 1, scope: !11159)
!11215 = distinct !DISubprogram(name: "find_indirect_cycles", scope: !3, file: !3, line: 1812, type: !11080, scopeLine: 1813, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11216 = !DILocalVariable(name: "graph", arg: 1, scope: !11215, file: !3, line: 1812, type: !3314)
!11217 = !DILocation(line: 1812, column: 42, scope: !11215)
!11218 = !DILocalVariable(name: "i", scope: !11215, file: !3, line: 1814, type: !6)
!11219 = !DILocation(line: 1814, column: 16, scope: !11215)
!11220 = !DILocalVariable(name: "size", scope: !11215, file: !3, line: 1815, type: !6)
!11221 = !DILocation(line: 1815, column: 16, scope: !11215)
!11222 = !DILocation(line: 1815, column: 23, scope: !11215)
!11223 = !DILocation(line: 1815, column: 30, scope: !11215)
!11224 = !DILocalVariable(name: "si", scope: !11215, file: !3, line: 1816, type: !3201)
!11225 = !DILocation(line: 1816, column: 20, scope: !11215)
!11226 = !DILocation(line: 1816, column: 40, scope: !11215)
!11227 = !DILocation(line: 1816, column: 25, scope: !11215)
!11228 = !DILocation(line: 1818, column: 10, scope: !11229)
!11229 = distinct !DILexicalBlock(scope: !11215, file: !3, line: 1818, column: 3)
!11230 = !DILocation(line: 1818, column: 8, scope: !11229)
!11231 = !DILocation(line: 1818, column: 15, scope: !11232)
!11232 = distinct !DILexicalBlock(scope: !11229, file: !3, line: 1818, column: 3)
!11233 = !DILocation(line: 1818, column: 19, scope: !11232)
!11234 = !DILocation(line: 1818, column: 17, scope: !11232)
!11235 = !DILocation(line: 1818, column: 3, scope: !11229)
!11236 = !DILocation(line: 1819, column: 10, scope: !11237)
!11237 = distinct !DILexicalBlock(scope: !11232, file: !3, line: 1819, column: 9)
!11238 = !DILocation(line: 1819, column: 36, scope: !11237)
!11239 = !DILocation(line: 1819, column: 45, scope: !11237)
!11240 = !DILocation(line: 1819, column: 39, scope: !11237)
!11241 = !DILocation(line: 1819, column: 51, scope: !11237)
!11242 = !DILocation(line: 1819, column: 48, scope: !11237)
!11243 = !DILocation(line: 1819, column: 9, scope: !11232)
!11244 = !DILocation(line: 1820, column: 18, scope: !11237)
!11245 = !DILocation(line: 1820, column: 25, scope: !11237)
!11246 = !DILocation(line: 1820, column: 29, scope: !11237)
!11247 = !DILocation(line: 1820, column: 7, scope: !11237)
!11248 = !DILocation(line: 1818, column: 48, scope: !11232)
!11249 = !DILocation(line: 1818, column: 3, scope: !11232)
!11250 = distinct !{!11250, !11235, !11251}
!11251 = !DILocation(line: 1820, column: 30, scope: !11229)
!11252 = !DILocation(line: 1822, column: 18, scope: !11215)
!11253 = !DILocation(line: 1822, column: 3, scope: !11215)
!11254 = !DILocation(line: 1823, column: 1, scope: !11215)
!11255 = distinct !DISubprogram(name: "remove_preds_and_fake_succs", scope: !3, file: !3, line: 5363, type: !11080, scopeLine: 5364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11256 = !DILocalVariable(name: "graph", arg: 1, scope: !11255, file: !3, line: 5363, type: !3314)
!11257 = !DILocation(line: 5363, column: 49, scope: !11255)
!11258 = !DILocalVariable(name: "i", scope: !11255, file: !3, line: 5365, type: !6)
!11259 = !DILocation(line: 5365, column: 16, scope: !11255)
!11260 = !DILocation(line: 5369, column: 10, scope: !11261)
!11261 = distinct !DILexicalBlock(scope: !11255, file: !3, line: 5369, column: 3)
!11262 = !DILocation(line: 5369, column: 8, scope: !11261)
!11263 = !DILocation(line: 5369, column: 15, scope: !11264)
!11264 = distinct !DILexicalBlock(scope: !11261, file: !3, line: 5369, column: 3)
!11265 = !DILocation(line: 5369, column: 19, scope: !11264)
!11266 = !DILocation(line: 5369, column: 17, scope: !11264)
!11267 = !DILocation(line: 5369, column: 3, scope: !11261)
!11268 = !DILocation(line: 5371, column: 11, scope: !11269)
!11269 = distinct !DILexicalBlock(scope: !11270, file: !3, line: 5371, column: 11)
!11270 = distinct !DILexicalBlock(scope: !11264, file: !3, line: 5370, column: 5)
!11271 = !DILocation(line: 5371, column: 18, scope: !11269)
!11272 = !DILocation(line: 5371, column: 24, scope: !11269)
!11273 = !DILocation(line: 5371, column: 11, scope: !11270)
!11274 = !DILocation(line: 5372, column: 22, scope: !11269)
!11275 = !DILocation(line: 5372, column: 29, scope: !11269)
!11276 = !DILocation(line: 5372, column: 35, scope: !11269)
!11277 = !DILocation(line: 5372, column: 39, scope: !11269)
!11278 = !DILocation(line: 5373, column: 8, scope: !11269)
!11279 = !DILocation(line: 5373, column: 23, scope: !11269)
!11280 = !DILocation(line: 5372, column: 2, scope: !11269)
!11281 = !DILocation(line: 5374, column: 5, scope: !11270)
!11282 = !DILocation(line: 5369, column: 36, scope: !11264)
!11283 = !DILocation(line: 5369, column: 3, scope: !11264)
!11284 = distinct !{!11284, !11267, !11285}
!11285 = !DILocation(line: 5374, column: 5, scope: !11261)
!11286 = !DILocation(line: 5377, column: 12, scope: !11287)
!11287 = distinct !DILexicalBlock(scope: !11255, file: !3, line: 5377, column: 3)
!11288 = !DILocation(line: 5377, column: 10, scope: !11287)
!11289 = !DILocation(line: 5377, column: 8, scope: !11287)
!11290 = !DILocation(line: 5377, column: 28, scope: !11291)
!11291 = distinct !DILexicalBlock(scope: !11287, file: !3, line: 5377, column: 3)
!11292 = !DILocation(line: 5377, column: 32, scope: !11291)
!11293 = !DILocation(line: 5377, column: 39, scope: !11291)
!11294 = !DILocation(line: 5377, column: 30, scope: !11291)
!11295 = !DILocation(line: 5377, column: 3, scope: !11287)
!11296 = !DILocation(line: 5379, column: 11, scope: !11297)
!11297 = distinct !DILexicalBlock(scope: !11298, file: !3, line: 5379, column: 11)
!11298 = distinct !DILexicalBlock(scope: !11291, file: !3, line: 5378, column: 5)
!11299 = !DILocation(line: 5379, column: 18, scope: !11297)
!11300 = !DILocation(line: 5379, column: 24, scope: !11297)
!11301 = !DILocation(line: 5379, column: 11, scope: !11298)
!11302 = !DILocation(line: 5380, column: 2, scope: !11297)
!11303 = !DILocation(line: 5381, column: 5, scope: !11298)
!11304 = !DILocation(line: 5377, column: 46, scope: !11291)
!11305 = !DILocation(line: 5377, column: 3, scope: !11291)
!11306 = distinct !{!11306, !11295, !11307}
!11307 = !DILocation(line: 5381, column: 5, scope: !11287)
!11308 = !DILocation(line: 5385, column: 17, scope: !11255)
!11309 = !DILocation(line: 5385, column: 3, scope: !11255)
!11310 = !DILocation(line: 5385, column: 10, scope: !11255)
!11311 = !DILocation(line: 5385, column: 15, scope: !11255)
!11312 = !DILocation(line: 5386, column: 18, scope: !11255)
!11313 = !DILocation(line: 5386, column: 3, scope: !11255)
!11314 = !DILocation(line: 5386, column: 10, scope: !11255)
!11315 = !DILocation(line: 5386, column: 16, scope: !11255)
!11316 = !DILocation(line: 5388, column: 9, scope: !11255)
!11317 = !DILocation(line: 5388, column: 16, scope: !11255)
!11318 = !DILocation(line: 5388, column: 3, scope: !11255)
!11319 = !DILocation(line: 5389, column: 3, scope: !11255)
!11320 = !DILocation(line: 5389, column: 10, scope: !11255)
!11321 = !DILocation(line: 5389, column: 25, scope: !11255)
!11322 = !DILocation(line: 5390, column: 9, scope: !11255)
!11323 = !DILocation(line: 5390, column: 16, scope: !11255)
!11324 = !DILocation(line: 5390, column: 3, scope: !11255)
!11325 = !DILocation(line: 5391, column: 3, scope: !11255)
!11326 = !DILocation(line: 5391, column: 10, scope: !11255)
!11327 = !DILocation(line: 5391, column: 16, scope: !11255)
!11328 = !DILocation(line: 5392, column: 3, scope: !11255)
!11329 = !DILocation(line: 5393, column: 1, scope: !11255)
!11330 = distinct !DISubprogram(name: "solve_graph", scope: !3, file: !3, line: 2449, type: !11080, scopeLine: 2450, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11331 = !DILocalVariable(name: "graph", arg: 1, scope: !11330, file: !3, line: 2449, type: !3314)
!11332 = !DILocation(line: 2449, column: 33, scope: !11330)
!11333 = !DILocalVariable(name: "size", scope: !11330, file: !3, line: 2451, type: !6)
!11334 = !DILocation(line: 2451, column: 16, scope: !11330)
!11335 = !DILocation(line: 2451, column: 23, scope: !11330)
!11336 = !DILocation(line: 2451, column: 30, scope: !11330)
!11337 = !DILocalVariable(name: "i", scope: !11330, file: !3, line: 2452, type: !6)
!11338 = !DILocation(line: 2452, column: 16, scope: !11330)
!11339 = !DILocalVariable(name: "pts", scope: !11330, file: !3, line: 2453, type: !2649)
!11340 = !DILocation(line: 2453, column: 10, scope: !11330)
!11341 = !DILocation(line: 2455, column: 17, scope: !11330)
!11342 = !DILocation(line: 2456, column: 28, scope: !11330)
!11343 = !DILocation(line: 2456, column: 13, scope: !11330)
!11344 = !DILocation(line: 2456, column: 11, scope: !11330)
!11345 = !DILocation(line: 2457, column: 17, scope: !11330)
!11346 = !DILocation(line: 2457, column: 3, scope: !11330)
!11347 = !DILocation(line: 2460, column: 10, scope: !11348)
!11348 = distinct !DILexicalBlock(scope: !11330, file: !3, line: 2460, column: 3)
!11349 = !DILocation(line: 2460, column: 8, scope: !11348)
!11350 = !DILocation(line: 2460, column: 15, scope: !11351)
!11351 = distinct !DILexicalBlock(scope: !11348, file: !3, line: 2460, column: 3)
!11352 = !DILocation(line: 2460, column: 19, scope: !11351)
!11353 = !DILocation(line: 2460, column: 17, scope: !11351)
!11354 = !DILocation(line: 2460, column: 3, scope: !11348)
!11355 = !DILocalVariable(name: "ivi", scope: !11356, file: !3, line: 2462, type: !1758)
!11356 = distinct !DILexicalBlock(scope: !11351, file: !3, line: 2461, column: 5)
!11357 = !DILocation(line: 2462, column: 17, scope: !11356)
!11358 = !DILocation(line: 2462, column: 36, scope: !11356)
!11359 = !DILocation(line: 2462, column: 23, scope: !11356)
!11360 = !DILocation(line: 2463, column: 17, scope: !11361)
!11361 = distinct !DILexicalBlock(scope: !11356, file: !3, line: 2463, column: 11)
!11362 = !DILocation(line: 2463, column: 11, scope: !11361)
!11363 = !DILocation(line: 2463, column: 23, scope: !11361)
!11364 = !DILocation(line: 2463, column: 20, scope: !11361)
!11365 = !DILocation(line: 2463, column: 25, scope: !11361)
!11366 = !DILocation(line: 2463, column: 29, scope: !11361)
!11367 = !DILocation(line: 2464, column: 4, scope: !11361)
!11368 = !DILocation(line: 2464, column: 9, scope: !11361)
!11369 = !DILocation(line: 2464, column: 16, scope: !11361)
!11370 = !DILocation(line: 2464, column: 22, scope: !11361)
!11371 = !DILocation(line: 2464, column: 25, scope: !11361)
!11372 = !DILocation(line: 2464, column: 29, scope: !11361)
!11373 = !DILocation(line: 2465, column: 8, scope: !11361)
!11374 = !DILocation(line: 2465, column: 11, scope: !11361)
!11375 = !DILocation(line: 2465, column: 56, scope: !11361)
!11376 = !DILocation(line: 2463, column: 11, scope: !11356)
!11377 = !DILocation(line: 2467, column: 13, scope: !11378)
!11378 = distinct !DILexicalBlock(scope: !11361, file: !3, line: 2466, column: 2)
!11379 = !DILocation(line: 2467, column: 22, scope: !11378)
!11380 = !DILocation(line: 2467, column: 4, scope: !11378)
!11381 = !DILocation(line: 2468, column: 17, scope: !11378)
!11382 = !DILocation(line: 2469, column: 2, scope: !11378)
!11383 = !DILocation(line: 2470, column: 5, scope: !11356)
!11384 = !DILocation(line: 2460, column: 26, scope: !11351)
!11385 = !DILocation(line: 2460, column: 3, scope: !11351)
!11386 = distinct !{!11386, !11354, !11387}
!11387 = !DILocation(line: 2470, column: 5, scope: !11348)
!11388 = !DILocation(line: 2473, column: 9, scope: !11330)
!11389 = !DILocation(line: 2473, column: 7, scope: !11330)
!11390 = !DILocation(line: 2475, column: 3, scope: !11330)
!11391 = !DILocation(line: 2475, column: 10, scope: !11330)
!11392 = !DILocation(line: 2475, column: 24, scope: !11330)
!11393 = !DILocalVariable(name: "i", scope: !11394, file: !3, line: 2477, type: !6)
!11394 = distinct !DILexicalBlock(scope: !11330, file: !3, line: 2476, column: 5)
!11395 = !DILocation(line: 2477, column: 20, scope: !11394)
!11396 = !DILocalVariable(name: "ti", scope: !11394, file: !3, line: 2478, type: !3233)
!11397 = !DILocation(line: 2478, column: 25, scope: !11394)
!11398 = !DILocation(line: 2478, column: 30, scope: !11394)
!11399 = !DILocation(line: 2479, column: 23, scope: !11394)
!11400 = !DILocation(line: 2481, column: 7, scope: !11394)
!11401 = !DILocation(line: 2483, column: 27, scope: !11394)
!11402 = !DILocation(line: 2483, column: 34, scope: !11394)
!11403 = !DILocation(line: 2483, column: 7, scope: !11394)
!11404 = !DILocation(line: 2485, column: 7, scope: !11394)
!11405 = !DILocation(line: 2485, column: 14, scope: !11394)
!11406 = !DILocation(line: 2485, column: 52, scope: !11394)
!11407 = !DILocation(line: 2488, column: 8, scope: !11408)
!11408 = distinct !DILexicalBlock(scope: !11394, file: !3, line: 2486, column: 2)
!11409 = !DILocation(line: 2488, column: 6, scope: !11408)
!11410 = !DILocation(line: 2491, column: 14, scope: !11411)
!11411 = distinct !DILexicalBlock(scope: !11408, file: !3, line: 2491, column: 8)
!11412 = !DILocation(line: 2491, column: 8, scope: !11411)
!11413 = !DILocation(line: 2491, column: 20, scope: !11411)
!11414 = !DILocation(line: 2491, column: 17, scope: !11411)
!11415 = !DILocation(line: 2491, column: 8, scope: !11408)
!11416 = !DILocation(line: 2492, column: 6, scope: !11411)
!11417 = distinct !{!11417, !11404, !11418}
!11418 = !DILocation(line: 2583, column: 2, scope: !11394)
!11419 = !DILocation(line: 2496, column: 35, scope: !11420)
!11420 = distinct !DILexicalBlock(scope: !11408, file: !3, line: 2496, column: 8)
!11421 = !DILocation(line: 2496, column: 8, scope: !11420)
!11422 = !DILocation(line: 2496, column: 38, scope: !11420)
!11423 = !DILocation(line: 2496, column: 47, scope: !11420)
!11424 = !DILocation(line: 2496, column: 41, scope: !11420)
!11425 = !DILocation(line: 2496, column: 53, scope: !11420)
!11426 = !DILocation(line: 2496, column: 50, scope: !11420)
!11427 = !DILocation(line: 2496, column: 8, scope: !11408)
!11428 = !DILocation(line: 2497, column: 6, scope: !11420)
!11429 = !DILocation(line: 2501, column: 8, scope: !11430)
!11430 = distinct !DILexicalBlock(scope: !11408, file: !3, line: 2501, column: 8)
!11431 = !DILocation(line: 2501, column: 8, scope: !11408)
!11432 = !DILocalVariable(name: "j", scope: !11433, file: !3, line: 2503, type: !6)
!11433 = distinct !DILexicalBlock(scope: !11430, file: !3, line: 2502, column: 6)
!11434 = !DILocation(line: 2503, column: 21, scope: !11433)
!11435 = !DILocalVariable(name: "c", scope: !11433, file: !3, line: 2504, type: !1715)
!11436 = !DILocation(line: 2504, column: 21, scope: !11433)
!11437 = !DILocalVariable(name: "solution", scope: !11433, file: !3, line: 2505, type: !2649)
!11438 = !DILocation(line: 2505, column: 15, scope: !11433)
!11439 = !DILocalVariable(name: "complex", scope: !11433, file: !3, line: 2506, type: !1731)
!11440 = !DILocation(line: 2506, column: 32, scope: !11433)
!11441 = !DILocation(line: 2506, column: 42, scope: !11433)
!11442 = !DILocation(line: 2506, column: 49, scope: !11433)
!11443 = !DILocation(line: 2506, column: 57, scope: !11433)
!11444 = !DILocalVariable(name: "solution_empty", scope: !11433, file: !3, line: 2507, type: !1894)
!11445 = !DILocation(line: 2507, column: 13, scope: !11433)
!11446 = !DILocation(line: 2509, column: 19, scope: !11433)
!11447 = !DILocation(line: 2509, column: 28, scope: !11433)
!11448 = !DILocation(line: 2509, column: 8, scope: !11433)
!11449 = !DILocation(line: 2510, column: 21, scope: !11433)
!11450 = !DILocation(line: 2513, column: 26, scope: !11433)
!11451 = !DILocation(line: 2513, column: 44, scope: !11433)
!11452 = !DILocation(line: 2513, column: 31, scope: !11433)
!11453 = !DILocation(line: 2513, column: 48, scope: !11433)
!11454 = !DILocation(line: 2514, column: 18, scope: !11433)
!11455 = !DILocation(line: 2514, column: 5, scope: !11433)
!11456 = !DILocation(line: 2514, column: 22, scope: !11433)
!11457 = !DILocation(line: 2513, column: 8, scope: !11433)
!11458 = !DILocation(line: 2516, column: 12, scope: !11459)
!11459 = distinct !DILexicalBlock(scope: !11433, file: !3, line: 2516, column: 12)
!11460 = !DILocation(line: 2516, column: 12, scope: !11433)
!11461 = !DILocation(line: 2517, column: 3, scope: !11459)
!11462 = !DILocation(line: 2519, column: 38, scope: !11433)
!11463 = !DILocation(line: 2519, column: 25, scope: !11433)
!11464 = !DILocation(line: 2519, column: 42, scope: !11433)
!11465 = !DILocation(line: 2519, column: 55, scope: !11433)
!11466 = !DILocation(line: 2519, column: 8, scope: !11433)
!11467 = !DILocation(line: 2521, column: 32, scope: !11433)
!11468 = !DILocation(line: 2521, column: 19, scope: !11433)
!11469 = !DILocation(line: 2521, column: 36, scope: !11433)
!11470 = !DILocation(line: 2521, column: 17, scope: !11433)
!11471 = !DILocation(line: 2522, column: 25, scope: !11433)
!11472 = !DILocation(line: 2522, column: 23, scope: !11433)
!11473 = !DILocation(line: 2525, column: 15, scope: !11474)
!11474 = distinct !DILexicalBlock(scope: !11433, file: !3, line: 2525, column: 8)
!11475 = !DILocation(line: 2525, column: 13, scope: !11474)
!11476 = !DILocation(line: 2525, column: 20, scope: !11477)
!11477 = distinct !DILexicalBlock(scope: !11474, file: !3, line: 2525, column: 8)
!11478 = !DILocation(line: 2525, column: 8, scope: !11474)
!11479 = !DILocation(line: 2531, column: 24, scope: !11480)
!11480 = distinct !DILexicalBlock(scope: !11477, file: !3, line: 2526, column: 3)
!11481 = !DILocation(line: 2531, column: 27, scope: !11480)
!11482 = !DILocation(line: 2531, column: 31, scope: !11480)
!11483 = !DILocation(line: 2531, column: 18, scope: !11480)
!11484 = !DILocation(line: 2531, column: 5, scope: !11480)
!11485 = !DILocation(line: 2531, column: 8, scope: !11480)
!11486 = !DILocation(line: 2531, column: 12, scope: !11480)
!11487 = !DILocation(line: 2531, column: 16, scope: !11480)
!11488 = !DILocation(line: 2532, column: 24, scope: !11480)
!11489 = !DILocation(line: 2532, column: 27, scope: !11480)
!11490 = !DILocation(line: 2532, column: 31, scope: !11480)
!11491 = !DILocation(line: 2532, column: 18, scope: !11480)
!11492 = !DILocation(line: 2532, column: 5, scope: !11480)
!11493 = !DILocation(line: 2532, column: 8, scope: !11480)
!11494 = !DILocation(line: 2532, column: 12, scope: !11480)
!11495 = !DILocation(line: 2532, column: 16, scope: !11480)
!11496 = !DILocation(line: 2538, column: 10, scope: !11497)
!11497 = distinct !DILexicalBlock(scope: !11480, file: !3, line: 2538, column: 9)
!11498 = !DILocation(line: 2538, column: 25, scope: !11497)
!11499 = !DILocation(line: 2538, column: 28, scope: !11497)
!11500 = !DILocation(line: 2538, column: 31, scope: !11497)
!11501 = !DILocation(line: 2538, column: 35, scope: !11497)
!11502 = !DILocation(line: 2538, column: 40, scope: !11497)
!11503 = !DILocation(line: 2538, column: 9, scope: !11480)
!11504 = !DILocation(line: 2539, column: 30, scope: !11497)
!11505 = !DILocation(line: 2539, column: 37, scope: !11497)
!11506 = !DILocation(line: 2539, column: 40, scope: !11497)
!11507 = !DILocation(line: 2539, column: 7, scope: !11497)
!11508 = !DILocation(line: 2540, column: 3, scope: !11480)
!11509 = !DILocation(line: 2525, column: 64, scope: !11477)
!11510 = !DILocation(line: 2525, column: 8, scope: !11477)
!11511 = distinct !{!11511, !11478, !11512}
!11512 = !DILocation(line: 2540, column: 3, scope: !11474)
!11513 = !DILocation(line: 2542, column: 25, scope: !11433)
!11514 = !DILocation(line: 2542, column: 23, scope: !11433)
!11515 = !DILocation(line: 2544, column: 13, scope: !11516)
!11516 = distinct !DILexicalBlock(scope: !11433, file: !3, line: 2544, column: 12)
!11517 = !DILocation(line: 2544, column: 12, scope: !11433)
!11518 = !DILocalVariable(name: "bi", scope: !11519, file: !3, line: 2546, type: !3687)
!11519 = distinct !DILexicalBlock(scope: !11516, file: !3, line: 2545, column: 3)
!11520 = !DILocation(line: 2546, column: 21, scope: !11519)
!11521 = !DILocalVariable(name: "eff_escaped_id", scope: !11519, file: !3, line: 2547, type: !6)
!11522 = !DILocation(line: 2547, column: 14, scope: !11519)
!11523 = !DILocation(line: 2547, column: 31, scope: !11519)
!11524 = !DILocation(line: 2550, column: 5, scope: !11525)
!11525 = distinct !DILexicalBlock(scope: !11519, file: !3, line: 2550, column: 5)
!11526 = !DILocation(line: 2550, column: 5, scope: !11519)
!11527 = !DILocation(line: 2550, column: 5, scope: !11528)
!11528 = distinct !DILexicalBlock(scope: !11525, file: !3, line: 2550, column: 5)
!11529 = !DILocation(line: 2550, column: 5, scope: !11530)
!11530 = distinct !DILexicalBlock(scope: !11528, file: !3, line: 2550, column: 5)
!11531 = !DILocalVariable(name: "tmp", scope: !11532, file: !3, line: 2553, type: !2649)
!11532 = distinct !DILexicalBlock(scope: !11530, file: !3, line: 2552, column: 7)
!11533 = !DILocation(line: 2553, column: 16, scope: !11532)
!11534 = !DILocalVariable(name: "flag", scope: !11532, file: !3, line: 2554, type: !1894)
!11535 = !DILocation(line: 2554, column: 14, scope: !11532)
!11536 = !DILocalVariable(name: "to", scope: !11532, file: !3, line: 2556, type: !6)
!11537 = !DILocation(line: 2556, column: 22, scope: !11532)
!11538 = !DILocation(line: 2556, column: 33, scope: !11532)
!11539 = !DILocation(line: 2556, column: 27, scope: !11532)
!11540 = !DILocation(line: 2557, column: 28, scope: !11532)
!11541 = !DILocation(line: 2557, column: 15, scope: !11532)
!11542 = !DILocation(line: 2557, column: 33, scope: !11532)
!11543 = !DILocation(line: 2557, column: 13, scope: !11532)
!11544 = !DILocation(line: 2558, column: 14, scope: !11532)
!11545 = !DILocation(line: 2561, column: 13, scope: !11546)
!11546 = distinct !DILexicalBlock(scope: !11532, file: !3, line: 2561, column: 13)
!11547 = !DILocation(line: 2561, column: 19, scope: !11546)
!11548 = !DILocation(line: 2561, column: 16, scope: !11546)
!11549 = !DILocation(line: 2561, column: 13, scope: !11532)
!11550 = !DILocation(line: 2562, column: 4, scope: !11546)
!11551 = !DILocation(line: 2566, column: 13, scope: !11552)
!11552 = distinct !DILexicalBlock(scope: !11532, file: !3, line: 2566, column: 13)
!11553 = !DILocation(line: 2566, column: 18, scope: !11552)
!11554 = !DILocation(line: 2566, column: 15, scope: !11552)
!11555 = !DILocation(line: 2566, column: 13, scope: !11532)
!11556 = !DILocation(line: 2567, column: 27, scope: !11552)
!11557 = !DILocation(line: 2567, column: 11, scope: !11552)
!11558 = !DILocation(line: 2567, column: 9, scope: !11552)
!11559 = !DILocation(line: 2567, column: 4, scope: !11552)
!11560 = !DILocation(line: 2569, column: 37, scope: !11552)
!11561 = !DILocation(line: 2569, column: 42, scope: !11552)
!11562 = !DILocation(line: 2569, column: 11, scope: !11552)
!11563 = !DILocation(line: 2569, column: 9, scope: !11552)
!11564 = !DILocation(line: 2571, column: 13, scope: !11565)
!11565 = distinct !DILexicalBlock(scope: !11532, file: !3, line: 2571, column: 13)
!11566 = !DILocation(line: 2571, column: 13, scope: !11532)
!11567 = !DILocation(line: 2573, column: 35, scope: !11568)
!11568 = distinct !DILexicalBlock(scope: !11565, file: !3, line: 2572, column: 4)
!11569 = !DILocation(line: 2573, column: 19, scope: !11568)
!11570 = !DILocation(line: 2573, column: 6, scope: !11568)
!11571 = !DILocation(line: 2573, column: 24, scope: !11568)
!11572 = !DILocation(line: 2573, column: 33, scope: !11568)
!11573 = !DILocation(line: 2574, column: 11, scope: !11574)
!11574 = distinct !DILexicalBlock(scope: !11568, file: !3, line: 2574, column: 10)
!11575 = !DILocation(line: 2574, column: 10, scope: !11568)
!11576 = !DILocation(line: 2576, column: 19, scope: !11577)
!11577 = distinct !DILexicalBlock(scope: !11574, file: !3, line: 2575, column: 8)
!11578 = !DILocation(line: 2576, column: 28, scope: !11577)
!11579 = !DILocation(line: 2576, column: 10, scope: !11577)
!11580 = !DILocation(line: 2577, column: 23, scope: !11577)
!11581 = !DILocation(line: 2578, column: 8, scope: !11577)
!11582 = !DILocation(line: 2579, column: 4, scope: !11568)
!11583 = !DILocation(line: 2580, column: 7, scope: !11532)
!11584 = distinct !{!11584, !11527, !11585}
!11585 = !DILocation(line: 2580, column: 7, scope: !11528)
!11586 = !DILocation(line: 2581, column: 3, scope: !11519)
!11587 = !DILocation(line: 2582, column: 6, scope: !11433)
!11588 = !DILocation(line: 2584, column: 23, scope: !11394)
!11589 = !DILocation(line: 2584, column: 7, scope: !11394)
!11590 = !DILocation(line: 2585, column: 7, scope: !11394)
!11591 = distinct !{!11591, !11390, !11592}
!11592 = !DILocation(line: 2586, column: 5, scope: !11330)
!11593 = !DILocation(line: 2588, column: 3, scope: !11330)
!11594 = !DILocation(line: 2589, column: 3, scope: !11330)
!11595 = !DILocation(line: 2590, column: 3, scope: !11330)
!11596 = !DILocation(line: 2591, column: 1, scope: !11330)
!11597 = distinct !DISubprogram(name: "SET_BIT", scope: !3188, file: !3188, line: 63, type: !11598, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11598 = !DISubroutineType(types: !11599)
!11599 = !{null, !3187, !6}
!11600 = !DILocalVariable(name: "map", arg: 1, scope: !11597, file: !3188, line: 63, type: !3187)
!11601 = !DILocation(line: 63, column: 18, scope: !11597)
!11602 = !DILocalVariable(name: "bitno", arg: 2, scope: !11597, file: !3188, line: 63, type: !6)
!11603 = !DILocation(line: 63, column: 36, scope: !11597)
!11604 = !DILocation(line: 65, column: 7, scope: !11605)
!11605 = distinct !DILexicalBlock(scope: !11597, file: !3188, line: 65, column: 7)
!11606 = !DILocation(line: 65, column: 12, scope: !11605)
!11607 = !DILocation(line: 65, column: 7, scope: !11597)
!11608 = !DILocalVariable(name: "oldbit", scope: !11609, file: !3188, line: 67, type: !1894)
!11609 = distinct !DILexicalBlock(scope: !11605, file: !3188, line: 66, column: 5)
!11610 = !DILocation(line: 67, column: 12, scope: !11609)
!11611 = !DILocation(line: 68, column: 16, scope: !11609)
!11612 = !DILocation(line: 68, column: 14, scope: !11609)
!11613 = !DILocation(line: 69, column: 12, scope: !11614)
!11614 = distinct !DILexicalBlock(scope: !11609, file: !3188, line: 69, column: 11)
!11615 = !DILocation(line: 69, column: 11, scope: !11609)
!11616 = !DILocation(line: 70, column: 2, scope: !11614)
!11617 = !DILocation(line: 70, column: 7, scope: !11614)
!11618 = !DILocation(line: 70, column: 16, scope: !11614)
!11619 = !DILocation(line: 70, column: 22, scope: !11614)
!11620 = !DILocation(line: 70, column: 41, scope: !11614)
!11621 = !DILocation(line: 71, column: 5, scope: !11609)
!11622 = !DILocation(line: 73, column: 33, scope: !11597)
!11623 = !DILocation(line: 73, column: 40, scope: !11597)
!11624 = !DILocation(line: 73, column: 29, scope: !11597)
!11625 = !DILocation(line: 72, column: 3, scope: !11597)
!11626 = !DILocation(line: 72, column: 8, scope: !11597)
!11627 = !DILocation(line: 72, column: 13, scope: !11597)
!11628 = !DILocation(line: 72, column: 19, scope: !11597)
!11629 = !DILocation(line: 73, column: 5, scope: !11597)
!11630 = !DILocation(line: 74, column: 1, scope: !11597)
!11631 = distinct !DISubprogram(name: "add_pred_graph_edge", scope: !3, file: !3, line: 1053, type: !11632, scopeLine: 1055, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11632 = !DISubroutineType(types: !11633)
!11633 = !{null, !3314, !6, !6}
!11634 = !DILocalVariable(name: "graph", arg: 1, scope: !11631, file: !3, line: 1053, type: !3314)
!11635 = !DILocation(line: 1053, column: 41, scope: !11631)
!11636 = !DILocalVariable(name: "to", arg: 2, scope: !11631, file: !3, line: 1053, type: !6)
!11637 = !DILocation(line: 1053, column: 61, scope: !11631)
!11638 = !DILocalVariable(name: "from", arg: 3, scope: !11631, file: !3, line: 1054, type: !6)
!11639 = !DILocation(line: 1054, column: 21, scope: !11631)
!11640 = !DILocation(line: 1056, column: 8, scope: !11641)
!11641 = distinct !DILexicalBlock(scope: !11631, file: !3, line: 1056, column: 7)
!11642 = !DILocation(line: 1056, column: 15, scope: !11641)
!11643 = !DILocation(line: 1056, column: 21, scope: !11641)
!11644 = !DILocation(line: 1056, column: 7, scope: !11631)
!11645 = !DILocation(line: 1057, column: 24, scope: !11641)
!11646 = !DILocation(line: 1057, column: 5, scope: !11641)
!11647 = !DILocation(line: 1057, column: 12, scope: !11641)
!11648 = !DILocation(line: 1057, column: 18, scope: !11641)
!11649 = !DILocation(line: 1057, column: 22, scope: !11641)
!11650 = !DILocation(line: 1058, column: 19, scope: !11631)
!11651 = !DILocation(line: 1058, column: 26, scope: !11631)
!11652 = !DILocation(line: 1058, column: 32, scope: !11631)
!11653 = !DILocation(line: 1058, column: 37, scope: !11631)
!11654 = !DILocation(line: 1058, column: 3, scope: !11631)
!11655 = !DILocation(line: 1059, column: 1, scope: !11631)
!11656 = distinct !DISubprogram(name: "RESET_BIT", scope: !3188, file: !3188, line: 82, type: !11598, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11657 = !DILocalVariable(name: "map", arg: 1, scope: !11656, file: !3188, line: 82, type: !3187)
!11658 = !DILocation(line: 82, column: 20, scope: !11656)
!11659 = !DILocalVariable(name: "bitno", arg: 2, scope: !11656, file: !3188, line: 82, type: !6)
!11660 = !DILocation(line: 82, column: 39, scope: !11656)
!11661 = !DILocation(line: 84, column: 7, scope: !11662)
!11662 = distinct !DILexicalBlock(scope: !11656, file: !3188, line: 84, column: 7)
!11663 = !DILocation(line: 84, column: 12, scope: !11662)
!11664 = !DILocation(line: 84, column: 7, scope: !11656)
!11665 = !DILocalVariable(name: "oldbit", scope: !11666, file: !3188, line: 86, type: !1894)
!11666 = distinct !DILexicalBlock(scope: !11662, file: !3188, line: 85, column: 5)
!11667 = !DILocation(line: 86, column: 12, scope: !11666)
!11668 = !DILocation(line: 87, column: 16, scope: !11666)
!11669 = !DILocation(line: 87, column: 14, scope: !11666)
!11670 = !DILocation(line: 88, column: 11, scope: !11671)
!11671 = distinct !DILexicalBlock(scope: !11666, file: !3188, line: 88, column: 11)
!11672 = !DILocation(line: 88, column: 11, scope: !11666)
!11673 = !DILocation(line: 89, column: 2, scope: !11671)
!11674 = !DILocation(line: 89, column: 7, scope: !11671)
!11675 = !DILocation(line: 89, column: 16, scope: !11671)
!11676 = !DILocation(line: 89, column: 22, scope: !11671)
!11677 = !DILocation(line: 89, column: 41, scope: !11671)
!11678 = !DILocation(line: 90, column: 5, scope: !11666)
!11679 = !DILocation(line: 92, column: 35, scope: !11656)
!11680 = !DILocation(line: 92, column: 42, scope: !11656)
!11681 = !DILocation(line: 92, column: 31, scope: !11656)
!11682 = !DILocation(line: 92, column: 8, scope: !11656)
!11683 = !DILocation(line: 91, column: 3, scope: !11656)
!11684 = !DILocation(line: 91, column: 8, scope: !11656)
!11685 = !DILocation(line: 91, column: 13, scope: !11656)
!11686 = !DILocation(line: 91, column: 19, scope: !11656)
!11687 = !DILocation(line: 92, column: 5, scope: !11656)
!11688 = !DILocation(line: 93, column: 1, scope: !11656)
!11689 = distinct !DISubprogram(name: "add_implicit_graph_edge", scope: !3, file: !3, line: 1035, type: !11632, scopeLine: 1037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11690 = !DILocalVariable(name: "graph", arg: 1, scope: !11689, file: !3, line: 1035, type: !3314)
!11691 = !DILocation(line: 1035, column: 45, scope: !11689)
!11692 = !DILocalVariable(name: "to", arg: 2, scope: !11689, file: !3, line: 1035, type: !6)
!11693 = !DILocation(line: 1035, column: 65, scope: !11689)
!11694 = !DILocalVariable(name: "from", arg: 3, scope: !11689, file: !3, line: 1036, type: !6)
!11695 = !DILocation(line: 1036, column: 18, scope: !11689)
!11696 = !DILocation(line: 1038, column: 7, scope: !11697)
!11697 = distinct !DILexicalBlock(scope: !11689, file: !3, line: 1038, column: 7)
!11698 = !DILocation(line: 1038, column: 13, scope: !11697)
!11699 = !DILocation(line: 1038, column: 10, scope: !11697)
!11700 = !DILocation(line: 1038, column: 7, scope: !11689)
!11701 = !DILocation(line: 1039, column: 5, scope: !11697)
!11702 = !DILocation(line: 1041, column: 8, scope: !11703)
!11703 = distinct !DILexicalBlock(scope: !11689, file: !3, line: 1041, column: 7)
!11704 = !DILocation(line: 1041, column: 15, scope: !11703)
!11705 = !DILocation(line: 1041, column: 30, scope: !11703)
!11706 = !DILocation(line: 1041, column: 7, scope: !11689)
!11707 = !DILocation(line: 1042, column: 33, scope: !11703)
!11708 = !DILocation(line: 1042, column: 5, scope: !11703)
!11709 = !DILocation(line: 1042, column: 12, scope: !11703)
!11710 = !DILocation(line: 1042, column: 27, scope: !11703)
!11711 = !DILocation(line: 1042, column: 31, scope: !11703)
!11712 = !DILocation(line: 1044, column: 23, scope: !11713)
!11713 = distinct !DILexicalBlock(scope: !11689, file: !3, line: 1044, column: 7)
!11714 = !DILocation(line: 1044, column: 30, scope: !11713)
!11715 = !DILocation(line: 1044, column: 45, scope: !11713)
!11716 = !DILocation(line: 1044, column: 50, scope: !11713)
!11717 = !DILocation(line: 1044, column: 7, scope: !11713)
!11718 = !DILocation(line: 1044, column: 7, scope: !11689)
!11719 = !DILocation(line: 1045, column: 29, scope: !11713)
!11720 = !DILocation(line: 1045, column: 5, scope: !11713)
!11721 = !DILocation(line: 1046, column: 1, scope: !11689)
!11722 = distinct !DISubprogram(name: "init_scc_info", scope: !3, file: !3, line: 1770, type: !11723, scopeLine: 1771, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11723 = !DISubroutineType(types: !11724)
!11724 = !{!3201, !1727}
!11725 = !DILocalVariable(name: "size", arg: 1, scope: !11722, file: !3, line: 1770, type: !1727)
!11726 = !DILocation(line: 1770, column: 23, scope: !11722)
!11727 = !DILocalVariable(name: "si", scope: !11722, file: !3, line: 1772, type: !3201)
!11728 = !DILocation(line: 1772, column: 20, scope: !11722)
!11729 = !DILocation(line: 1772, column: 25, scope: !11722)
!11730 = !DILocalVariable(name: "i", scope: !11722, file: !3, line: 1773, type: !1727)
!11731 = !DILocation(line: 1773, column: 10, scope: !11722)
!11732 = !DILocation(line: 1775, column: 3, scope: !11722)
!11733 = !DILocation(line: 1775, column: 7, scope: !11722)
!11734 = !DILocation(line: 1775, column: 21, scope: !11722)
!11735 = !DILocation(line: 1776, column: 32, scope: !11722)
!11736 = !DILocation(line: 1776, column: 17, scope: !11722)
!11737 = !DILocation(line: 1776, column: 3, scope: !11722)
!11738 = !DILocation(line: 1776, column: 7, scope: !11722)
!11739 = !DILocation(line: 1776, column: 15, scope: !11722)
!11740 = !DILocation(line: 1777, column: 17, scope: !11722)
!11741 = !DILocation(line: 1777, column: 21, scope: !11722)
!11742 = !DILocation(line: 1777, column: 3, scope: !11722)
!11743 = !DILocation(line: 1778, column: 32, scope: !11722)
!11744 = !DILocation(line: 1778, column: 17, scope: !11722)
!11745 = !DILocation(line: 1778, column: 3, scope: !11722)
!11746 = !DILocation(line: 1778, column: 7, scope: !11722)
!11747 = !DILocation(line: 1778, column: 15, scope: !11722)
!11748 = !DILocation(line: 1779, column: 17, scope: !11722)
!11749 = !DILocation(line: 1779, column: 21, scope: !11722)
!11750 = !DILocation(line: 1779, column: 3, scope: !11722)
!11751 = !DILocation(line: 1780, column: 22, scope: !11722)
!11752 = !DILocation(line: 1780, column: 3, scope: !11722)
!11753 = !DILocation(line: 1780, column: 7, scope: !11722)
!11754 = !DILocation(line: 1780, column: 20, scope: !11722)
!11755 = !DILocation(line: 1781, column: 13, scope: !11722)
!11756 = !DILocation(line: 1781, column: 3, scope: !11722)
!11757 = !DILocation(line: 1781, column: 7, scope: !11722)
!11758 = !DILocation(line: 1781, column: 11, scope: !11722)
!11759 = !DILocation(line: 1783, column: 10, scope: !11760)
!11760 = distinct !DILexicalBlock(scope: !11722, file: !3, line: 1783, column: 3)
!11761 = !DILocation(line: 1783, column: 8, scope: !11760)
!11762 = !DILocation(line: 1783, column: 15, scope: !11763)
!11763 = distinct !DILexicalBlock(scope: !11760, file: !3, line: 1783, column: 3)
!11764 = !DILocation(line: 1783, column: 19, scope: !11763)
!11765 = !DILocation(line: 1783, column: 17, scope: !11763)
!11766 = !DILocation(line: 1783, column: 3, scope: !11760)
!11767 = !DILocation(line: 1784, column: 27, scope: !11763)
!11768 = !DILocation(line: 1784, column: 5, scope: !11763)
!11769 = !DILocation(line: 1784, column: 9, scope: !11763)
!11770 = !DILocation(line: 1784, column: 22, scope: !11763)
!11771 = !DILocation(line: 1784, column: 25, scope: !11763)
!11772 = !DILocation(line: 1783, column: 26, scope: !11763)
!11773 = !DILocation(line: 1783, column: 3, scope: !11763)
!11774 = distinct !{!11774, !11766, !11775}
!11775 = !DILocation(line: 1784, column: 27, scope: !11760)
!11776 = !DILocation(line: 1786, column: 19, scope: !11722)
!11777 = !DILocation(line: 1786, column: 3, scope: !11722)
!11778 = !DILocation(line: 1786, column: 7, scope: !11722)
!11779 = !DILocation(line: 1786, column: 17, scope: !11722)
!11780 = !DILocation(line: 1787, column: 10, scope: !11722)
!11781 = !DILocation(line: 1787, column: 3, scope: !11722)
!11782 = distinct !DISubprogram(name: "equiv_class_label_hash", scope: !3, file: !3, line: 1862, type: !2573, scopeLine: 1863, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11783 = !DILocalVariable(name: "p", arg: 1, scope: !11782, file: !3, line: 1862, type: !2407)
!11784 = !DILocation(line: 1862, column: 37, scope: !11782)
!11785 = !DILocalVariable(name: "ecl", scope: !11782, file: !3, line: 1864, type: !11786)
!11786 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3223)
!11787 = !DILocation(line: 1864, column: 35, scope: !11782)
!11788 = !DILocation(line: 1864, column: 69, scope: !11782)
!11789 = !DILocation(line: 1864, column: 41, scope: !11782)
!11790 = !DILocation(line: 1865, column: 10, scope: !11782)
!11791 = !DILocation(line: 1865, column: 15, scope: !11782)
!11792 = !DILocation(line: 1865, column: 3, scope: !11782)
!11793 = distinct !DISubprogram(name: "equiv_class_label_eq", scope: !3, file: !3, line: 1871, type: !2579, scopeLine: 1872, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11794 = !DILocalVariable(name: "p1", arg: 1, scope: !11793, file: !3, line: 1871, type: !2407)
!11795 = !DILocation(line: 1871, column: 35, scope: !11793)
!11796 = !DILocalVariable(name: "p2", arg: 2, scope: !11793, file: !3, line: 1871, type: !2407)
!11797 = !DILocation(line: 1871, column: 51, scope: !11793)
!11798 = !DILocalVariable(name: "eql1", scope: !11793, file: !3, line: 1873, type: !11786)
!11799 = !DILocation(line: 1873, column: 35, scope: !11793)
!11800 = !DILocation(line: 1873, column: 70, scope: !11793)
!11801 = !DILocation(line: 1873, column: 42, scope: !11793)
!11802 = !DILocalVariable(name: "eql2", scope: !11793, file: !3, line: 1874, type: !11786)
!11803 = !DILocation(line: 1874, column: 35, scope: !11793)
!11804 = !DILocation(line: 1874, column: 70, scope: !11793)
!11805 = !DILocation(line: 1874, column: 42, scope: !11793)
!11806 = !DILocation(line: 1875, column: 11, scope: !11793)
!11807 = !DILocation(line: 1875, column: 17, scope: !11793)
!11808 = !DILocation(line: 1875, column: 29, scope: !11793)
!11809 = !DILocation(line: 1875, column: 35, scope: !11793)
!11810 = !DILocation(line: 1875, column: 26, scope: !11793)
!11811 = !DILocation(line: 1876, column: 4, scope: !11793)
!11812 = !DILocation(line: 1876, column: 23, scope: !11793)
!11813 = !DILocation(line: 1876, column: 29, scope: !11793)
!11814 = !DILocation(line: 1876, column: 37, scope: !11793)
!11815 = !DILocation(line: 1876, column: 43, scope: !11793)
!11816 = !DILocation(line: 1876, column: 7, scope: !11793)
!11817 = !DILocation(line: 0, scope: !11793)
!11818 = !DILocation(line: 1875, column: 3, scope: !11793)
!11819 = distinct !DISubprogram(name: "condense_visit", scope: !3, file: !3, line: 1973, type: !11820, scopeLine: 1974, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!11820 = !DISubroutineType(types: !11821)
!11821 = !{null, !3314, !3201, !6}
!11822 = !DILocalVariable(name: "graph", arg: 1, scope: !11819, file: !3, line: 1973, type: !3314)
!11823 = !DILocation(line: 1973, column: 36, scope: !11819)
!11824 = !DILocalVariable(name: "si", arg: 2, scope: !11819, file: !3, line: 1973, type: !3201)
!11825 = !DILocation(line: 1973, column: 60, scope: !11819)
!11826 = !DILocalVariable(name: "n", arg: 3, scope: !11819, file: !3, line: 1973, type: !6)
!11827 = !DILocation(line: 1973, column: 77, scope: !11819)
!11828 = !DILocalVariable(name: "i", scope: !11819, file: !3, line: 1975, type: !6)
!11829 = !DILocation(line: 1975, column: 16, scope: !11819)
!11830 = !DILocalVariable(name: "bi", scope: !11819, file: !3, line: 1976, type: !3687)
!11831 = !DILocation(line: 1976, column: 19, scope: !11819)
!11832 = !DILocalVariable(name: "my_dfs", scope: !11819, file: !3, line: 1977, type: !6)
!11833 = !DILocation(line: 1977, column: 16, scope: !11819)
!11834 = !DILocation(line: 1979, column: 3, scope: !11819)
!11835 = !DILocation(line: 1980, column: 12, scope: !11819)
!11836 = !DILocation(line: 1980, column: 16, scope: !11819)
!11837 = !DILocation(line: 1980, column: 25, scope: !11819)
!11838 = !DILocation(line: 1980, column: 3, scope: !11819)
!11839 = !DILocation(line: 1981, column: 16, scope: !11819)
!11840 = !DILocation(line: 1981, column: 20, scope: !11819)
!11841 = !DILocation(line: 1981, column: 34, scope: !11819)
!11842 = !DILocation(line: 1981, column: 3, scope: !11819)
!11843 = !DILocation(line: 1981, column: 7, scope: !11819)
!11844 = !DILocation(line: 1981, column: 11, scope: !11819)
!11845 = !DILocation(line: 1981, column: 14, scope: !11819)
!11846 = !DILocation(line: 1982, column: 12, scope: !11819)
!11847 = !DILocation(line: 1982, column: 16, scope: !11819)
!11848 = !DILocation(line: 1982, column: 20, scope: !11819)
!11849 = !DILocation(line: 1982, column: 10, scope: !11819)
!11850 = !DILocation(line: 1985, column: 3, scope: !11851)
!11851 = distinct !DILexicalBlock(scope: !11819, file: !3, line: 1985, column: 3)
!11852 = !DILocation(line: 1985, column: 3, scope: !11819)
!11853 = !DILocation(line: 1985, column: 3, scope: !11854)
!11854 = distinct !DILexicalBlock(scope: !11851, file: !3, line: 1985, column: 3)
!11855 = !DILocation(line: 1985, column: 3, scope: !11856)
!11856 = distinct !DILexicalBlock(scope: !11854, file: !3, line: 1985, column: 3)
!11857 = !DILocalVariable(name: "w", scope: !11858, file: !3, line: 1987, type: !6)
!11858 = distinct !DILexicalBlock(scope: !11856, file: !3, line: 1986, column: 5)
!11859 = !DILocation(line: 1987, column: 20, scope: !11858)
!11860 = !DILocation(line: 1987, column: 24, scope: !11858)
!11861 = !DILocation(line: 1987, column: 28, scope: !11858)
!11862 = !DILocation(line: 1987, column: 41, scope: !11858)
!11863 = !DILocation(line: 1989, column: 11, scope: !11864)
!11864 = distinct !DILexicalBlock(scope: !11858, file: !3, line: 1989, column: 11)
!11865 = !DILocation(line: 1989, column: 11, scope: !11858)
!11866 = !DILocation(line: 1990, column: 2, scope: !11864)
!11867 = !DILocation(line: 1992, column: 12, scope: !11868)
!11868 = distinct !DILexicalBlock(scope: !11858, file: !3, line: 1992, column: 11)
!11869 = !DILocation(line: 1992, column: 11, scope: !11858)
!11870 = !DILocation(line: 1993, column: 18, scope: !11868)
!11871 = !DILocation(line: 1993, column: 25, scope: !11868)
!11872 = !DILocation(line: 1993, column: 29, scope: !11868)
!11873 = !DILocation(line: 1993, column: 2, scope: !11868)
!11874 = !DILocalVariable(name: "t", scope: !11875, file: !3, line: 1995, type: !6)
!11875 = distinct !DILexicalBlock(scope: !11858, file: !3, line: 1994, column: 7)
!11876 = !DILocation(line: 1995, column: 15, scope: !11875)
!11877 = !DILocation(line: 1995, column: 19, scope: !11875)
!11878 = !DILocation(line: 1995, column: 23, scope: !11875)
!11879 = !DILocation(line: 1995, column: 36, scope: !11875)
!11880 = !DILocalVariable(name: "nnode", scope: !11875, file: !3, line: 1996, type: !6)
!11881 = !DILocation(line: 1996, column: 15, scope: !11875)
!11882 = !DILocation(line: 1996, column: 23, scope: !11875)
!11883 = !DILocation(line: 1996, column: 27, scope: !11875)
!11884 = !DILocation(line: 1996, column: 40, scope: !11875)
!11885 = !DILocation(line: 1997, column: 2, scope: !11875)
!11886 = !DILocation(line: 1999, column: 6, scope: !11887)
!11887 = distinct !DILexicalBlock(scope: !11875, file: !3, line: 1999, column: 6)
!11888 = !DILocation(line: 1999, column: 10, scope: !11887)
!11889 = !DILocation(line: 1999, column: 14, scope: !11887)
!11890 = !DILocation(line: 1999, column: 19, scope: !11887)
!11891 = !DILocation(line: 1999, column: 23, scope: !11887)
!11892 = !DILocation(line: 1999, column: 27, scope: !11887)
!11893 = !DILocation(line: 1999, column: 17, scope: !11887)
!11894 = !DILocation(line: 1999, column: 6, scope: !11875)
!11895 = !DILocation(line: 2000, column: 17, scope: !11887)
!11896 = !DILocation(line: 2000, column: 21, scope: !11887)
!11897 = !DILocation(line: 2000, column: 25, scope: !11887)
!11898 = !DILocation(line: 2000, column: 4, scope: !11887)
!11899 = !DILocation(line: 2000, column: 8, scope: !11887)
!11900 = !DILocation(line: 2000, column: 12, scope: !11887)
!11901 = !DILocation(line: 2000, column: 15, scope: !11887)
!11902 = !DILocation(line: 2002, column: 5, scope: !11858)
!11903 = distinct !{!11903, !11853, !11904}
!11904 = !DILocation(line: 2002, column: 5, scope: !11854)
!11905 = !DILocation(line: 2005, column: 3, scope: !11906)
!11906 = distinct !DILexicalBlock(scope: !11819, file: !3, line: 2005, column: 3)
!11907 = !DILocation(line: 2005, column: 3, scope: !11819)
!11908 = !DILocation(line: 2005, column: 3, scope: !11909)
!11909 = distinct !DILexicalBlock(scope: !11906, file: !3, line: 2005, column: 3)
!11910 = !DILocation(line: 2005, column: 3, scope: !11911)
!11911 = distinct !DILexicalBlock(scope: !11909, file: !3, line: 2005, column: 3)
!11912 = !DILocalVariable(name: "w", scope: !11913, file: !3, line: 2007, type: !6)
!11913 = distinct !DILexicalBlock(scope: !11911, file: !3, line: 2006, column: 5)
!11914 = !DILocation(line: 2007, column: 20, scope: !11913)
!11915 = !DILocation(line: 2007, column: 24, scope: !11913)
!11916 = !DILocation(line: 2007, column: 28, scope: !11913)
!11917 = !DILocation(line: 2007, column: 41, scope: !11913)
!11918 = !DILocation(line: 2009, column: 11, scope: !11919)
!11919 = distinct !DILexicalBlock(scope: !11913, file: !3, line: 2009, column: 11)
!11920 = !DILocation(line: 2009, column: 11, scope: !11913)
!11921 = !DILocation(line: 2010, column: 2, scope: !11919)
!11922 = !DILocation(line: 2012, column: 12, scope: !11923)
!11923 = distinct !DILexicalBlock(scope: !11913, file: !3, line: 2012, column: 11)
!11924 = !DILocation(line: 2012, column: 11, scope: !11913)
!11925 = !DILocation(line: 2013, column: 18, scope: !11923)
!11926 = !DILocation(line: 2013, column: 25, scope: !11923)
!11927 = !DILocation(line: 2013, column: 29, scope: !11923)
!11928 = !DILocation(line: 2013, column: 2, scope: !11923)
!11929 = !DILocalVariable(name: "t", scope: !11930, file: !3, line: 2015, type: !6)
!11930 = distinct !DILexicalBlock(scope: !11913, file: !3, line: 2014, column: 7)
!11931 = !DILocation(line: 2015, column: 15, scope: !11930)
!11932 = !DILocation(line: 2015, column: 19, scope: !11930)
!11933 = !DILocation(line: 2015, column: 23, scope: !11930)
!11934 = !DILocation(line: 2015, column: 36, scope: !11930)
!11935 = !DILocalVariable(name: "nnode", scope: !11930, file: !3, line: 2016, type: !6)
!11936 = !DILocation(line: 2016, column: 15, scope: !11930)
!11937 = !DILocation(line: 2016, column: 23, scope: !11930)
!11938 = !DILocation(line: 2016, column: 27, scope: !11930)
!11939 = !DILocation(line: 2016, column: 40, scope: !11930)
!11940 = !DILocation(line: 2017, column: 2, scope: !11930)
!11941 = !DILocation(line: 2019, column: 6, scope: !11942)
!11942 = distinct !DILexicalBlock(scope: !11930, file: !3, line: 2019, column: 6)
!11943 = !DILocation(line: 2019, column: 10, scope: !11942)
!11944 = !DILocation(line: 2019, column: 14, scope: !11942)
!11945 = !DILocation(line: 2019, column: 19, scope: !11942)
!11946 = !DILocation(line: 2019, column: 23, scope: !11942)
!11947 = !DILocation(line: 2019, column: 27, scope: !11942)
!11948 = !DILocation(line: 2019, column: 17, scope: !11942)
!11949 = !DILocation(line: 2019, column: 6, scope: !11930)
!11950 = !DILocation(line: 2020, column: 17, scope: !11942)
!11951 = !DILocation(line: 2020, column: 21, scope: !11942)
!11952 = !DILocation(line: 2020, column: 25, scope: !11942)
!11953 = !DILocation(line: 2020, column: 4, scope: !11942)
!11954 = !DILocation(line: 2020, column: 8, scope: !11942)
!11955 = !DILocation(line: 2020, column: 12, scope: !11942)
!11956 = !DILocation(line: 2020, column: 15, scope: !11942)
!11957 = !DILocation(line: 2022, column: 5, scope: !11913)
!11958 = distinct !{!11958, !11908, !11959}
!11959 = !DILocation(line: 2022, column: 5, scope: !11909)
!11960 = !DILocation(line: 2025, column: 7, scope: !11961)
!11961 = distinct !DILexicalBlock(scope: !11819, file: !3, line: 2025, column: 7)
!11962 = !DILocation(line: 2025, column: 11, scope: !11961)
!11963 = !DILocation(line: 2025, column: 15, scope: !11961)
!11964 = !DILocation(line: 2025, column: 21, scope: !11961)
!11965 = !DILocation(line: 2025, column: 18, scope: !11961)
!11966 = !DILocation(line: 2025, column: 7, scope: !11819)
!11967 = !DILocation(line: 2027, column: 7, scope: !11968)
!11968 = distinct !DILexicalBlock(scope: !11961, file: !3, line: 2026, column: 5)
!11969 = !DILocation(line: 2027, column: 14, scope: !11968)
!11970 = !DILocation(line: 2027, column: 51, scope: !11968)
!11971 = !DILocation(line: 2028, column: 7, scope: !11968)
!11972 = !DILocation(line: 2028, column: 10, scope: !11968)
!11973 = !DILocation(line: 2028, column: 14, scope: !11968)
!11974 = !DILocation(line: 2028, column: 18, scope: !11968)
!11975 = !DILocation(line: 2028, column: 57, scope: !11968)
!11976 = !DILocation(line: 2028, column: 54, scope: !11968)
!11977 = !DILocation(line: 0, scope: !11968)
!11978 = !DILocalVariable(name: "w", scope: !11979, file: !3, line: 2030, type: !6)
!11979 = distinct !DILexicalBlock(scope: !11968, file: !3, line: 2029, column: 2)
!11980 = !DILocation(line: 2030, column: 17, scope: !11979)
!11981 = !DILocation(line: 2030, column: 21, scope: !11979)
!11982 = !DILocation(line: 2031, column: 26, scope: !11979)
!11983 = !DILocation(line: 2031, column: 4, scope: !11979)
!11984 = !DILocation(line: 2031, column: 8, scope: !11979)
!11985 = !DILocation(line: 2031, column: 21, scope: !11979)
!11986 = !DILocation(line: 2031, column: 24, scope: !11979)
!11987 = !DILocation(line: 2033, column: 9, scope: !11988)
!11988 = distinct !DILexicalBlock(scope: !11979, file: !3, line: 2033, column: 8)
!11989 = !DILocation(line: 2033, column: 8, scope: !11979)
!11990 = !DILocation(line: 2034, column: 17, scope: !11988)
!11991 = !DILocation(line: 2034, column: 24, scope: !11988)
!11992 = !DILocation(line: 2034, column: 38, scope: !11988)
!11993 = !DILocation(line: 2034, column: 6, scope: !11988)
!11994 = !DILocation(line: 2037, column: 8, scope: !11995)
!11995 = distinct !DILexicalBlock(scope: !11979, file: !3, line: 2037, column: 8)
!11996 = !DILocation(line: 2037, column: 15, scope: !11995)
!11997 = !DILocation(line: 2037, column: 21, scope: !11995)
!11998 = !DILocation(line: 2037, column: 8, scope: !11979)
!11999 = !DILocation(line: 2039, column: 13, scope: !12000)
!12000 = distinct !DILexicalBlock(scope: !12001, file: !3, line: 2039, column: 12)
!12001 = distinct !DILexicalBlock(scope: !11995, file: !3, line: 2038, column: 6)
!12002 = !DILocation(line: 2039, column: 20, scope: !12000)
!12003 = !DILocation(line: 2039, column: 26, scope: !12000)
!12004 = !DILocation(line: 2039, column: 12, scope: !12001)
!12005 = !DILocation(line: 2040, column: 21, scope: !12000)
!12006 = !DILocation(line: 2040, column: 3, scope: !12000)
!12007 = !DILocation(line: 2040, column: 10, scope: !12000)
!12008 = !DILocation(line: 2040, column: 16, scope: !12000)
!12009 = !DILocation(line: 2040, column: 19, scope: !12000)
!12010 = !DILocation(line: 2041, column: 25, scope: !12001)
!12011 = !DILocation(line: 2041, column: 32, scope: !12001)
!12012 = !DILocation(line: 2041, column: 38, scope: !12001)
!12013 = !DILocation(line: 2041, column: 42, scope: !12001)
!12014 = !DILocation(line: 2041, column: 49, scope: !12001)
!12015 = !DILocation(line: 2041, column: 55, scope: !12001)
!12016 = !DILocation(line: 2041, column: 8, scope: !12001)
!12017 = !DILocation(line: 2042, column: 6, scope: !12001)
!12018 = !DILocation(line: 2043, column: 8, scope: !12019)
!12019 = distinct !DILexicalBlock(scope: !11979, file: !3, line: 2043, column: 8)
!12020 = !DILocation(line: 2043, column: 15, scope: !12019)
!12021 = !DILocation(line: 2043, column: 30, scope: !12019)
!12022 = !DILocation(line: 2043, column: 8, scope: !11979)
!12023 = !DILocation(line: 2045, column: 13, scope: !12024)
!12024 = distinct !DILexicalBlock(scope: !12025, file: !3, line: 2045, column: 12)
!12025 = distinct !DILexicalBlock(scope: !12019, file: !3, line: 2044, column: 6)
!12026 = !DILocation(line: 2045, column: 20, scope: !12024)
!12027 = !DILocation(line: 2045, column: 35, scope: !12024)
!12028 = !DILocation(line: 2045, column: 12, scope: !12025)
!12029 = !DILocation(line: 2046, column: 30, scope: !12024)
!12030 = !DILocation(line: 2046, column: 3, scope: !12024)
!12031 = !DILocation(line: 2046, column: 10, scope: !12024)
!12032 = !DILocation(line: 2046, column: 25, scope: !12024)
!12033 = !DILocation(line: 2046, column: 28, scope: !12024)
!12034 = !DILocation(line: 2047, column: 25, scope: !12025)
!12035 = !DILocation(line: 2047, column: 32, scope: !12025)
!12036 = !DILocation(line: 2047, column: 47, scope: !12025)
!12037 = !DILocation(line: 2048, column: 11, scope: !12025)
!12038 = !DILocation(line: 2048, column: 18, scope: !12025)
!12039 = !DILocation(line: 2048, column: 33, scope: !12025)
!12040 = !DILocation(line: 2047, column: 8, scope: !12025)
!12041 = !DILocation(line: 2049, column: 6, scope: !12025)
!12042 = !DILocation(line: 2050, column: 8, scope: !12043)
!12043 = distinct !DILexicalBlock(scope: !11979, file: !3, line: 2050, column: 8)
!12044 = !DILocation(line: 2050, column: 15, scope: !12043)
!12045 = !DILocation(line: 2050, column: 25, scope: !12043)
!12046 = !DILocation(line: 2050, column: 8, scope: !11979)
!12047 = !DILocation(line: 2052, column: 13, scope: !12048)
!12048 = distinct !DILexicalBlock(scope: !12049, file: !3, line: 2052, column: 12)
!12049 = distinct !DILexicalBlock(scope: !12043, file: !3, line: 2051, column: 6)
!12050 = !DILocation(line: 2052, column: 20, scope: !12048)
!12051 = !DILocation(line: 2052, column: 30, scope: !12048)
!12052 = !DILocation(line: 2052, column: 12, scope: !12049)
!12053 = !DILocation(line: 2053, column: 25, scope: !12048)
!12054 = !DILocation(line: 2053, column: 3, scope: !12048)
!12055 = !DILocation(line: 2053, column: 10, scope: !12048)
!12056 = !DILocation(line: 2053, column: 20, scope: !12048)
!12057 = !DILocation(line: 2053, column: 23, scope: !12048)
!12058 = !DILocation(line: 2054, column: 25, scope: !12049)
!12059 = !DILocation(line: 2054, column: 32, scope: !12049)
!12060 = !DILocation(line: 2054, column: 42, scope: !12049)
!12061 = !DILocation(line: 2055, column: 11, scope: !12049)
!12062 = !DILocation(line: 2055, column: 18, scope: !12049)
!12063 = !DILocation(line: 2055, column: 28, scope: !12049)
!12064 = !DILocation(line: 2054, column: 8, scope: !12049)
!12065 = !DILocation(line: 2056, column: 6, scope: !12049)
!12066 = distinct !{!12066, !11967, !12067}
!12067 = !DILocation(line: 2057, column: 2, scope: !11968)
!12068 = !DILocation(line: 2058, column: 16, scope: !11968)
!12069 = !DILocation(line: 2058, column: 20, scope: !11968)
!12070 = !DILocation(line: 2058, column: 29, scope: !11968)
!12071 = !DILocation(line: 2058, column: 7, scope: !11968)
!12072 = !DILocation(line: 2059, column: 5, scope: !11968)
!12073 = !DILocation(line: 2061, column: 5, scope: !11961)
!12074 = !DILocation(line: 2062, column: 1, scope: !11819)
!12075 = distinct !DISubprogram(name: "label_visit", scope: !3, file: !3, line: 2067, type: !11820, scopeLine: 2068, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12076 = !DILocalVariable(name: "graph", arg: 1, scope: !12075, file: !3, line: 2067, type: !3314)
!12077 = !DILocation(line: 2067, column: 33, scope: !12075)
!12078 = !DILocalVariable(name: "si", arg: 2, scope: !12075, file: !3, line: 2067, type: !3201)
!12079 = !DILocation(line: 2067, column: 57, scope: !12075)
!12080 = !DILocalVariable(name: "n", arg: 3, scope: !12075, file: !3, line: 2067, type: !6)
!12081 = !DILocation(line: 2067, column: 74, scope: !12075)
!12082 = !DILocalVariable(name: "i", scope: !12075, file: !3, line: 2069, type: !6)
!12083 = !DILocation(line: 2069, column: 16, scope: !12075)
!12084 = !DILocalVariable(name: "bi", scope: !12075, file: !3, line: 2070, type: !3687)
!12085 = !DILocation(line: 2070, column: 19, scope: !12075)
!12086 = !DILocation(line: 2071, column: 12, scope: !12075)
!12087 = !DILocation(line: 2071, column: 16, scope: !12075)
!12088 = !DILocation(line: 2071, column: 25, scope: !12075)
!12089 = !DILocation(line: 2071, column: 3, scope: !12075)
!12090 = !DILocation(line: 2073, column: 8, scope: !12091)
!12091 = distinct !DILexicalBlock(scope: !12075, file: !3, line: 2073, column: 7)
!12092 = !DILocation(line: 2073, column: 15, scope: !12091)
!12093 = !DILocation(line: 2073, column: 25, scope: !12091)
!12094 = !DILocation(line: 2073, column: 7, scope: !12075)
!12095 = !DILocation(line: 2074, column: 27, scope: !12091)
!12096 = !DILocation(line: 2074, column: 5, scope: !12091)
!12097 = !DILocation(line: 2074, column: 12, scope: !12091)
!12098 = !DILocation(line: 2074, column: 22, scope: !12091)
!12099 = !DILocation(line: 2074, column: 25, scope: !12091)
!12100 = !DILocation(line: 2077, column: 3, scope: !12101)
!12101 = distinct !DILexicalBlock(scope: !12075, file: !3, line: 2077, column: 3)
!12102 = !DILocation(line: 2077, column: 3, scope: !12075)
!12103 = !DILocation(line: 2077, column: 3, scope: !12104)
!12104 = distinct !DILexicalBlock(scope: !12101, file: !3, line: 2077, column: 3)
!12105 = !DILocation(line: 2077, column: 3, scope: !12106)
!12106 = distinct !DILexicalBlock(scope: !12104, file: !3, line: 2077, column: 3)
!12107 = !DILocalVariable(name: "w", scope: !12108, file: !3, line: 2079, type: !6)
!12108 = distinct !DILexicalBlock(scope: !12106, file: !3, line: 2078, column: 5)
!12109 = !DILocation(line: 2079, column: 20, scope: !12108)
!12110 = !DILocation(line: 2079, column: 24, scope: !12108)
!12111 = !DILocation(line: 2079, column: 28, scope: !12108)
!12112 = !DILocation(line: 2079, column: 41, scope: !12108)
!12113 = !DILocation(line: 2080, column: 12, scope: !12114)
!12114 = distinct !DILexicalBlock(scope: !12108, file: !3, line: 2080, column: 11)
!12115 = !DILocation(line: 2080, column: 11, scope: !12108)
!12116 = !DILocation(line: 2081, column: 15, scope: !12114)
!12117 = !DILocation(line: 2081, column: 22, scope: !12114)
!12118 = !DILocation(line: 2081, column: 26, scope: !12114)
!12119 = !DILocation(line: 2081, column: 2, scope: !12114)
!12120 = !DILocation(line: 2084, column: 11, scope: !12121)
!12121 = distinct !DILexicalBlock(scope: !12108, file: !3, line: 2084, column: 11)
!12122 = !DILocation(line: 2084, column: 16, scope: !12121)
!12123 = !DILocation(line: 2084, column: 13, scope: !12121)
!12124 = !DILocation(line: 2084, column: 18, scope: !12121)
!12125 = !DILocation(line: 2084, column: 21, scope: !12121)
!12126 = !DILocation(line: 2084, column: 28, scope: !12121)
!12127 = !DILocation(line: 2084, column: 42, scope: !12121)
!12128 = !DILocation(line: 2084, column: 45, scope: !12121)
!12129 = !DILocation(line: 2084, column: 11, scope: !12108)
!12130 = !DILocation(line: 2085, column: 2, scope: !12121)
!12131 = !DILocation(line: 2087, column: 11, scope: !12132)
!12132 = distinct !DILexicalBlock(scope: !12108, file: !3, line: 2087, column: 11)
!12133 = !DILocation(line: 2087, column: 18, scope: !12132)
!12134 = !DILocation(line: 2087, column: 28, scope: !12132)
!12135 = !DILocation(line: 2087, column: 11, scope: !12108)
!12136 = !DILocation(line: 2088, column: 18, scope: !12132)
!12137 = !DILocation(line: 2088, column: 25, scope: !12132)
!12138 = !DILocation(line: 2088, column: 35, scope: !12132)
!12139 = !DILocation(line: 2088, column: 39, scope: !12132)
!12140 = !DILocation(line: 2088, column: 46, scope: !12132)
!12141 = !DILocation(line: 2088, column: 56, scope: !12132)
!12142 = !DILocation(line: 2088, column: 2, scope: !12132)
!12143 = !DILocation(line: 2089, column: 5, scope: !12108)
!12144 = distinct !{!12144, !12103, !12145}
!12145 = !DILocation(line: 2089, column: 5, scope: !12104)
!12146 = !DILocation(line: 2091, column: 8, scope: !12147)
!12147 = distinct !DILexicalBlock(scope: !12075, file: !3, line: 2091, column: 7)
!12148 = !DILocation(line: 2091, column: 7, scope: !12075)
!12149 = !DILocation(line: 2092, column: 21, scope: !12147)
!12150 = !DILocation(line: 2092, column: 28, scope: !12147)
!12151 = !DILocation(line: 2092, column: 38, scope: !12147)
!12152 = !DILocation(line: 2092, column: 42, scope: !12147)
!12153 = !DILocation(line: 2092, column: 59, scope: !12147)
!12154 = !DILocation(line: 2092, column: 57, scope: !12147)
!12155 = !DILocation(line: 2092, column: 5, scope: !12147)
!12156 = !DILocation(line: 2094, column: 8, scope: !12157)
!12157 = distinct !DILexicalBlock(scope: !12075, file: !3, line: 2094, column: 7)
!12158 = !DILocation(line: 2094, column: 7, scope: !12075)
!12159 = !DILocalVariable(name: "label", scope: !12160, file: !3, line: 2096, type: !6)
!12160 = distinct !DILexicalBlock(scope: !12157, file: !3, line: 2095, column: 5)
!12161 = !DILocation(line: 2096, column: 20, scope: !12160)
!12162 = !DILocation(line: 2096, column: 48, scope: !12160)
!12163 = !DILocation(line: 2097, column: 13, scope: !12160)
!12164 = !DILocation(line: 2097, column: 20, scope: !12160)
!12165 = !DILocation(line: 2097, column: 30, scope: !12160)
!12166 = !DILocation(line: 2096, column: 28, scope: !12160)
!12167 = !DILocation(line: 2098, column: 12, scope: !12168)
!12168 = distinct !DILexicalBlock(scope: !12160, file: !3, line: 2098, column: 11)
!12169 = !DILocation(line: 2098, column: 11, scope: !12160)
!12170 = !DILocation(line: 2100, column: 31, scope: !12171)
!12171 = distinct !DILexicalBlock(scope: !12168, file: !3, line: 2099, column: 2)
!12172 = !DILocation(line: 2100, column: 10, scope: !12171)
!12173 = !DILocation(line: 2101, column: 21, scope: !12171)
!12174 = !DILocation(line: 2102, column: 7, scope: !12171)
!12175 = !DILocation(line: 2102, column: 14, scope: !12171)
!12176 = !DILocation(line: 2102, column: 21, scope: !12171)
!12177 = !DILocation(line: 2102, column: 31, scope: !12171)
!12178 = !DILocation(line: 2101, column: 4, scope: !12171)
!12179 = !DILocation(line: 2103, column: 2, scope: !12171)
!12180 = !DILocation(line: 2104, column: 33, scope: !12160)
!12181 = !DILocation(line: 2104, column: 7, scope: !12160)
!12182 = !DILocation(line: 2104, column: 14, scope: !12160)
!12183 = !DILocation(line: 2104, column: 28, scope: !12160)
!12184 = !DILocation(line: 2104, column: 31, scope: !12160)
!12185 = !DILocation(line: 2105, column: 5, scope: !12160)
!12186 = !DILocation(line: 2106, column: 1, scope: !12075)
!12187 = distinct !DISubprogram(name: "equiv_class_lookup", scope: !3, file: !3, line: 1883, type: !12188, scopeLine: 1884, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12188 = !DISubroutineType(types: !12189)
!12189 = !{!6, !2566, !2649}
!12190 = !DILocalVariable(name: "table", arg: 1, scope: !12187, file: !3, line: 1883, type: !2566)
!12191 = !DILocation(line: 1883, column: 28, scope: !12187)
!12192 = !DILocalVariable(name: "labels", arg: 2, scope: !12187, file: !3, line: 1883, type: !2649)
!12193 = !DILocation(line: 1883, column: 42, scope: !12187)
!12194 = !DILocalVariable(name: "slot", scope: !12187, file: !3, line: 1885, type: !2587)
!12195 = !DILocation(line: 1885, column: 10, scope: !12187)
!12196 = !DILocalVariable(name: "ecl", scope: !12187, file: !3, line: 1886, type: !3226)
!12197 = !DILocation(line: 1886, column: 28, scope: !12187)
!12198 = !DILocation(line: 1888, column: 16, scope: !12187)
!12199 = !DILocation(line: 1888, column: 7, scope: !12187)
!12200 = !DILocation(line: 1888, column: 14, scope: !12187)
!12201 = !DILocation(line: 1889, column: 31, scope: !12187)
!12202 = !DILocation(line: 1889, column: 18, scope: !12187)
!12203 = !DILocation(line: 1889, column: 7, scope: !12187)
!12204 = !DILocation(line: 1889, column: 16, scope: !12187)
!12205 = !DILocation(line: 1891, column: 36, scope: !12187)
!12206 = !DILocation(line: 1891, column: 43, scope: !12187)
!12207 = !DILocation(line: 1892, column: 12, scope: !12187)
!12208 = !DILocation(line: 1891, column: 10, scope: !12187)
!12209 = !DILocation(line: 1891, column: 8, scope: !12187)
!12210 = !DILocation(line: 1893, column: 8, scope: !12211)
!12211 = distinct !DILexicalBlock(scope: !12187, file: !3, line: 1893, column: 7)
!12212 = !DILocation(line: 1893, column: 7, scope: !12187)
!12213 = !DILocation(line: 1894, column: 5, scope: !12211)
!12214 = !DILocation(line: 1896, column: 36, scope: !12211)
!12215 = !DILocation(line: 1896, column: 35, scope: !12211)
!12216 = !DILocation(line: 1896, column: 13, scope: !12211)
!12217 = !DILocation(line: 1896, column: 43, scope: !12211)
!12218 = !DILocation(line: 1896, column: 5, scope: !12211)
!12219 = !DILocation(line: 1897, column: 1, scope: !12187)
!12220 = distinct !DISubprogram(name: "equiv_class_add", scope: !3, file: !3, line: 1904, type: !12221, scopeLine: 1906, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12221 = !DISubroutineType(types: !12222)
!12222 = !{null, !2566, !6, !2649}
!12223 = !DILocalVariable(name: "table", arg: 1, scope: !12220, file: !3, line: 1904, type: !2566)
!12224 = !DILocation(line: 1904, column: 25, scope: !12220)
!12225 = !DILocalVariable(name: "equivalence_class", arg: 2, scope: !12220, file: !3, line: 1904, type: !6)
!12226 = !DILocation(line: 1904, column: 45, scope: !12220)
!12227 = !DILocalVariable(name: "labels", arg: 3, scope: !12220, file: !3, line: 1905, type: !2649)
!12228 = !DILocation(line: 1905, column: 11, scope: !12220)
!12229 = !DILocalVariable(name: "slot", scope: !12220, file: !3, line: 1907, type: !2587)
!12230 = !DILocation(line: 1907, column: 10, scope: !12220)
!12231 = !DILocalVariable(name: "ecl", scope: !12220, file: !3, line: 1908, type: !3231)
!12232 = !DILocation(line: 1908, column: 23, scope: !12220)
!12233 = !DILocation(line: 1908, column: 29, scope: !12220)
!12234 = !DILocation(line: 1910, column: 17, scope: !12220)
!12235 = !DILocation(line: 1910, column: 3, scope: !12220)
!12236 = !DILocation(line: 1910, column: 8, scope: !12220)
!12237 = !DILocation(line: 1910, column: 15, scope: !12220)
!12238 = !DILocation(line: 1911, column: 28, scope: !12220)
!12239 = !DILocation(line: 1911, column: 3, scope: !12220)
!12240 = !DILocation(line: 1911, column: 8, scope: !12220)
!12241 = !DILocation(line: 1911, column: 26, scope: !12220)
!12242 = !DILocation(line: 1912, column: 32, scope: !12220)
!12243 = !DILocation(line: 1912, column: 19, scope: !12220)
!12244 = !DILocation(line: 1912, column: 3, scope: !12220)
!12245 = !DILocation(line: 1912, column: 8, scope: !12220)
!12246 = !DILocation(line: 1912, column: 17, scope: !12220)
!12247 = !DILocation(line: 1914, column: 36, scope: !12220)
!12248 = !DILocation(line: 1914, column: 43, scope: !12220)
!12249 = !DILocation(line: 1915, column: 8, scope: !12220)
!12250 = !DILocation(line: 1915, column: 13, scope: !12220)
!12251 = !DILocation(line: 1914, column: 10, scope: !12220)
!12252 = !DILocation(line: 1914, column: 8, scope: !12220)
!12253 = !DILocation(line: 1916, column: 3, scope: !12220)
!12254 = !DILocation(line: 1917, column: 20, scope: !12220)
!12255 = !DILocation(line: 1917, column: 11, scope: !12220)
!12256 = !DILocation(line: 1917, column: 4, scope: !12220)
!12257 = !DILocation(line: 1917, column: 9, scope: !12220)
!12258 = !DILocation(line: 1918, column: 1, scope: !12220)
!12259 = distinct !DISubprogram(name: "clear_edges_for_node", scope: !3, file: !3, line: 994, type: !12260, scopeLine: 995, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12260 = !DISubroutineType(types: !12261)
!12261 = !{null, !3314, !6}
!12262 = !DILocalVariable(name: "graph", arg: 1, scope: !12259, file: !3, line: 994, type: !3314)
!12263 = !DILocation(line: 994, column: 42, scope: !12259)
!12264 = !DILocalVariable(name: "node", arg: 2, scope: !12259, file: !3, line: 994, type: !6)
!12265 = !DILocation(line: 994, column: 62, scope: !12259)
!12266 = !DILocation(line: 996, column: 7, scope: !12267)
!12267 = distinct !DILexicalBlock(scope: !12259, file: !3, line: 996, column: 7)
!12268 = !DILocation(line: 996, column: 14, scope: !12267)
!12269 = !DILocation(line: 996, column: 20, scope: !12267)
!12270 = !DILocation(line: 996, column: 7, scope: !12259)
!12271 = !DILocation(line: 997, column: 5, scope: !12267)
!12272 = !DILocation(line: 998, column: 1, scope: !12259)
!12273 = distinct !DISubprogram(name: "VEC_unsigned_heap_alloc", scope: !3212, file: !3212, line: 35, type: !12274, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12274 = !DISubroutineType(types: !12275)
!12275 = !{!3210, !1730}
!12276 = !DILocalVariable(name: "alloc_", arg: 1, scope: !12273, file: !3212, line: 35, type: !1730)
!12277 = !DILocation(line: 35, column: 1, scope: !12273)
!12278 = distinct !DISubprogram(name: "VEC_unsigned_base_length", scope: !3212, file: !3212, line: 34, type: !12279, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12279 = !DISubroutineType(types: !12280)
!12280 = !{!6, !12281}
!12281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12282, size: 64)
!12282 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3216)
!12283 = !DILocalVariable(name: "vec_", arg: 1, scope: !12278, file: !3212, line: 34, type: !12281)
!12284 = !DILocation(line: 34, column: 1, scope: !12278)
!12285 = distinct !DISubprogram(name: "VEC_unsigned_base_last", scope: !3212, file: !3212, line: 34, type: !12279, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12286 = !DILocalVariable(name: "vec_", arg: 1, scope: !12285, file: !3212, line: 34, type: !12281)
!12287 = !DILocation(line: 34, column: 1, scope: !12285)
!12288 = !DILocation(line: 0, scope: !12285)
!12289 = distinct !DISubprogram(name: "VEC_unsigned_base_pop", scope: !3212, file: !3212, line: 34, type: !12290, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12290 = !DISubroutineType(types: !12291)
!12291 = !{!6, !12292}
!12292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3216, size: 64)
!12293 = !DILocalVariable(name: "vec_", arg: 1, scope: !12289, file: !3212, line: 34, type: !12292)
!12294 = !DILocation(line: 34, column: 1, scope: !12289)
!12295 = !DILocalVariable(name: "obj_", scope: !12289, file: !3212, line: 34, type: !6)
!12296 = distinct !DISubprogram(name: "VEC_unsigned_heap_safe_push", scope: !3212, file: !3212, line: 35, type: !12297, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12297 = !DISubroutineType(types: !12298)
!12298 = !{!3178, !12299, !12300}
!12299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3210, size: 64)
!12300 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!12301 = !DILocalVariable(name: "vec_", arg: 1, scope: !12296, file: !3212, line: 35, type: !12299)
!12302 = !DILocation(line: 35, column: 1, scope: !12296)
!12303 = !DILocalVariable(name: "obj_", arg: 2, scope: !12296, file: !3212, line: 35, type: !12300)
!12304 = distinct !DISubprogram(name: "VEC_unsigned_heap_reserve", scope: !3212, file: !3212, line: 35, type: !12305, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12305 = !DISubroutineType(types: !12306)
!12306 = !{!1730, !12299, !1730}
!12307 = !DILocalVariable(name: "vec_", arg: 1, scope: !12304, file: !3212, line: 35, type: !12299)
!12308 = !DILocation(line: 35, column: 1, scope: !12304)
!12309 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12304, file: !3212, line: 35, type: !1730)
!12310 = !DILocalVariable(name: "extend", scope: !12304, file: !3212, line: 35, type: !1730)
!12311 = !DILocation(line: 35, column: 1, scope: !12312)
!12312 = distinct !DILexicalBlock(scope: !12304, file: !3212, line: 35, column: 1)
!12313 = distinct !DISubprogram(name: "VEC_unsigned_base_quick_push", scope: !3212, file: !3212, line: 34, type: !12314, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12314 = !DISubroutineType(types: !12315)
!12315 = !{!3178, !12292, !6}
!12316 = !DILocalVariable(name: "vec_", arg: 1, scope: !12313, file: !3212, line: 34, type: !12292)
!12317 = !DILocation(line: 34, column: 1, scope: !12313)
!12318 = !DILocalVariable(name: "obj_", arg: 2, scope: !12313, file: !3212, line: 34, type: !6)
!12319 = !DILocalVariable(name: "slot_", scope: !12313, file: !3212, line: 34, type: !3178)
!12320 = distinct !DISubprogram(name: "VEC_unsigned_base_space", scope: !3212, file: !3212, line: 34, type: !12321, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12321 = !DISubroutineType(types: !12322)
!12322 = !{!1730, !12292, !1730}
!12323 = !DILocalVariable(name: "vec_", arg: 1, scope: !12320, file: !3212, line: 34, type: !12292)
!12324 = !DILocation(line: 34, column: 1, scope: !12320)
!12325 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12320, file: !3212, line: 34, type: !1730)
!12326 = distinct !DISubprogram(name: "VEC_constraint_t_base_replace", scope: !3, file: !3, line: 189, type: !12327, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12327 = !DISubroutineType(types: !12328)
!12328 = !{!1715, !6882, !6, !1715}
!12329 = !DILocalVariable(name: "vec_", arg: 1, scope: !12326, file: !3, line: 189, type: !6882)
!12330 = !DILocation(line: 189, column: 1, scope: !12326)
!12331 = !DILocalVariable(name: "ix_", arg: 2, scope: !12326, file: !3, line: 189, type: !6)
!12332 = !DILocalVariable(name: "obj_", arg: 3, scope: !12326, file: !3, line: 189, type: !1715)
!12333 = !DILocalVariable(name: "old_obj_", scope: !12326, file: !3, line: 189, type: !1715)
!12334 = distinct !DISubprogram(name: "find_equivalent_node", scope: !3, file: !3, line: 2236, type: !12335, scopeLine: 2238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12335 = !DISubroutineType(types: !12336)
!12336 = !{!6, !3314, !6, !6}
!12337 = !DILocalVariable(name: "graph", arg: 1, scope: !12334, file: !3, line: 2236, type: !3314)
!12338 = !DILocation(line: 2236, column: 42, scope: !12334)
!12339 = !DILocalVariable(name: "node", arg: 2, scope: !12334, file: !3, line: 2237, type: !6)
!12340 = !DILocation(line: 2237, column: 22, scope: !12334)
!12341 = !DILocalVariable(name: "label", arg: 3, scope: !12334, file: !3, line: 2237, type: !6)
!12342 = !DILocation(line: 2237, column: 41, scope: !12334)
!12343 = !DILocation(line: 2244, column: 22, scope: !12344)
!12344 = distinct !DILexicalBlock(scope: !12334, file: !3, line: 2244, column: 7)
!12345 = !DILocation(line: 2244, column: 29, scope: !12344)
!12346 = !DILocation(line: 2244, column: 44, scope: !12344)
!12347 = !DILocation(line: 2244, column: 8, scope: !12344)
!12348 = !DILocation(line: 2244, column: 7, scope: !12334)
!12349 = !DILocation(line: 2246, column: 7, scope: !12350)
!12350 = distinct !DILexicalBlock(scope: !12344, file: !3, line: 2245, column: 5)
!12351 = !DILocation(line: 2248, column: 11, scope: !12352)
!12352 = distinct !DILexicalBlock(scope: !12350, file: !3, line: 2248, column: 11)
!12353 = !DILocation(line: 2248, column: 18, scope: !12352)
!12354 = !DILocation(line: 2248, column: 25, scope: !12352)
!12355 = !DILocation(line: 2248, column: 32, scope: !12352)
!12356 = !DILocation(line: 2248, column: 11, scope: !12350)
!12357 = !DILocation(line: 2251, column: 15, scope: !12358)
!12358 = distinct !DILexicalBlock(scope: !12359, file: !3, line: 2251, column: 8)
!12359 = distinct !DILexicalBlock(scope: !12352, file: !3, line: 2249, column: 2)
!12360 = !DILocation(line: 2251, column: 22, scope: !12358)
!12361 = !DILocation(line: 2251, column: 29, scope: !12358)
!12362 = !DILocation(line: 2251, column: 37, scope: !12358)
!12363 = !DILocation(line: 2251, column: 8, scope: !12358)
!12364 = !DILocation(line: 2251, column: 8, scope: !12359)
!12365 = !DILocation(line: 2252, column: 19, scope: !12358)
!12366 = !DILocation(line: 2252, column: 26, scope: !12358)
!12367 = !DILocation(line: 2252, column: 33, scope: !12358)
!12368 = !DILocation(line: 2252, column: 40, scope: !12358)
!12369 = !DILocation(line: 2252, column: 48, scope: !12358)
!12370 = !DILocation(line: 2252, column: 6, scope: !12358)
!12371 = !DILocation(line: 2253, column: 11, scope: !12359)
!12372 = !DILocation(line: 2253, column: 18, scope: !12359)
!12373 = !DILocation(line: 2253, column: 25, scope: !12359)
!12374 = !DILocation(line: 2253, column: 4, scope: !12359)
!12375 = !DILocation(line: 2257, column: 27, scope: !12376)
!12376 = distinct !DILexicalBlock(scope: !12352, file: !3, line: 2256, column: 2)
!12377 = !DILocation(line: 2257, column: 4, scope: !12376)
!12378 = !DILocation(line: 2257, column: 11, scope: !12376)
!12379 = !DILocation(line: 2257, column: 18, scope: !12376)
!12380 = !DILocation(line: 2257, column: 25, scope: !12376)
!12381 = !DILocation(line: 2258, column: 27, scope: !12376)
!12382 = !DILocation(line: 2258, column: 4, scope: !12376)
!12383 = !DILocation(line: 2258, column: 11, scope: !12376)
!12384 = !DILocation(line: 2258, column: 18, scope: !12376)
!12385 = !DILocation(line: 2258, column: 25, scope: !12376)
!12386 = !DILocation(line: 2260, column: 5, scope: !12350)
!12387 = !DILocation(line: 2263, column: 7, scope: !12388)
!12388 = distinct !DILexicalBlock(scope: !12344, file: !3, line: 2262, column: 5)
!12389 = !DILocation(line: 2264, column: 25, scope: !12388)
!12390 = !DILocation(line: 2264, column: 7, scope: !12388)
!12391 = !DILocation(line: 2264, column: 14, scope: !12388)
!12392 = !DILocation(line: 2264, column: 17, scope: !12388)
!12393 = !DILocation(line: 2264, column: 23, scope: !12388)
!12394 = !DILocation(line: 2265, column: 11, scope: !12395)
!12395 = distinct !DILexicalBlock(scope: !12388, file: !3, line: 2265, column: 11)
!12396 = !DILocation(line: 2265, column: 18, scope: !12395)
!12397 = !DILocation(line: 2265, column: 25, scope: !12395)
!12398 = !DILocation(line: 2265, column: 32, scope: !12395)
!12399 = !DILocation(line: 2265, column: 11, scope: !12388)
!12400 = !DILocation(line: 2266, column: 25, scope: !12395)
!12401 = !DILocation(line: 2266, column: 2, scope: !12395)
!12402 = !DILocation(line: 2266, column: 9, scope: !12395)
!12403 = !DILocation(line: 2266, column: 16, scope: !12395)
!12404 = !DILocation(line: 2266, column: 23, scope: !12395)
!12405 = !DILocation(line: 2269, column: 10, scope: !12334)
!12406 = !DILocation(line: 2269, column: 3, scope: !12334)
!12407 = !DILocation(line: 2270, column: 1, scope: !12334)
!12408 = distinct !DISubprogram(name: "unite", scope: !3, file: !3, line: 532, type: !12409, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12409 = !DISubroutineType(types: !12410)
!12410 = !{!1894, !6, !6}
!12411 = !DILocalVariable(name: "to", arg: 1, scope: !12408, file: !3, line: 532, type: !6)
!12412 = !DILocation(line: 532, column: 21, scope: !12408)
!12413 = !DILocalVariable(name: "from", arg: 2, scope: !12408, file: !3, line: 532, type: !6)
!12414 = !DILocation(line: 532, column: 38, scope: !12408)
!12415 = !DILocation(line: 534, column: 3, scope: !12408)
!12416 = !DILocation(line: 535, column: 7, scope: !12417)
!12417 = distinct !DILexicalBlock(scope: !12408, file: !3, line: 535, column: 7)
!12418 = !DILocation(line: 535, column: 13, scope: !12417)
!12419 = !DILocation(line: 535, column: 10, scope: !12417)
!12420 = !DILocation(line: 535, column: 18, scope: !12417)
!12421 = !DILocation(line: 535, column: 21, scope: !12417)
!12422 = !DILocation(line: 535, column: 28, scope: !12417)
!12423 = !DILocation(line: 535, column: 32, scope: !12417)
!12424 = !DILocation(line: 535, column: 41, scope: !12417)
!12425 = !DILocation(line: 535, column: 38, scope: !12417)
!12426 = !DILocation(line: 535, column: 7, scope: !12408)
!12427 = !DILocation(line: 537, column: 26, scope: !12428)
!12428 = distinct !DILexicalBlock(scope: !12417, file: !3, line: 536, column: 5)
!12429 = !DILocation(line: 537, column: 7, scope: !12428)
!12430 = !DILocation(line: 537, column: 14, scope: !12428)
!12431 = !DILocation(line: 537, column: 18, scope: !12428)
!12432 = !DILocation(line: 537, column: 24, scope: !12428)
!12433 = !DILocation(line: 538, column: 7, scope: !12428)
!12434 = !DILocation(line: 540, column: 3, scope: !12408)
!12435 = !DILocation(line: 541, column: 1, scope: !12408)
!12436 = distinct !DISubprogram(name: "unify_nodes", scope: !3, file: !3, line: 1400, type: !12437, scopeLine: 1402, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12437 = !DISubroutineType(types: !12438)
!12438 = !{null, !3314, !6, !6, !1894}
!12439 = !DILocalVariable(name: "graph", arg: 1, scope: !12436, file: !3, line: 1400, type: !3314)
!12440 = !DILocation(line: 1400, column: 33, scope: !12436)
!12441 = !DILocalVariable(name: "to", arg: 2, scope: !12436, file: !3, line: 1400, type: !6)
!12442 = !DILocation(line: 1400, column: 53, scope: !12436)
!12443 = !DILocalVariable(name: "from", arg: 3, scope: !12436, file: !3, line: 1400, type: !6)
!12444 = !DILocation(line: 1400, column: 70, scope: !12436)
!12445 = !DILocalVariable(name: "update_changed", arg: 4, scope: !12436, file: !3, line: 1401, type: !1894)
!12446 = !DILocation(line: 1401, column: 12, scope: !12436)
!12447 = !DILocation(line: 1404, column: 3, scope: !12436)
!12448 = !DILocation(line: 1405, column: 7, scope: !12449)
!12449 = distinct !DILexicalBlock(scope: !12436, file: !3, line: 1405, column: 7)
!12450 = !DILocation(line: 1405, column: 17, scope: !12449)
!12451 = !DILocation(line: 1405, column: 21, scope: !12449)
!12452 = !DILocation(line: 1405, column: 32, scope: !12449)
!12453 = !DILocation(line: 1405, column: 7, scope: !12436)
!12454 = !DILocation(line: 1406, column: 14, scope: !12449)
!12455 = !DILocation(line: 1407, column: 20, scope: !12449)
!12456 = !DILocation(line: 1407, column: 7, scope: !12449)
!12457 = !DILocation(line: 1407, column: 27, scope: !12449)
!12458 = !DILocation(line: 1408, column: 20, scope: !12449)
!12459 = !DILocation(line: 1408, column: 7, scope: !12449)
!12460 = !DILocation(line: 1408, column: 25, scope: !12449)
!12461 = !DILocation(line: 1406, column: 5, scope: !12449)
!12462 = !DILocation(line: 1410, column: 7, scope: !12463)
!12463 = distinct !DILexicalBlock(scope: !12436, file: !3, line: 1410, column: 7)
!12464 = !DILocation(line: 1410, column: 7, scope: !12436)
!12465 = !DILocation(line: 1411, column: 31, scope: !12463)
!12466 = !DILocation(line: 1411, column: 5, scope: !12463)
!12467 = !DILocation(line: 1413, column: 30, scope: !12463)
!12468 = !DILocation(line: 1415, column: 22, scope: !12436)
!12469 = !DILocation(line: 1415, column: 29, scope: !12436)
!12470 = !DILocation(line: 1415, column: 33, scope: !12436)
!12471 = !DILocation(line: 1415, column: 3, scope: !12436)
!12472 = !DILocation(line: 1416, column: 27, scope: !12436)
!12473 = !DILocation(line: 1416, column: 34, scope: !12436)
!12474 = !DILocation(line: 1416, column: 38, scope: !12436)
!12475 = !DILocation(line: 1416, column: 3, scope: !12436)
!12476 = !DILocation(line: 1421, column: 7, scope: !12477)
!12477 = distinct !DILexicalBlock(scope: !12436, file: !3, line: 1421, column: 7)
!12478 = !DILocation(line: 1421, column: 22, scope: !12477)
!12479 = !DILocation(line: 1421, column: 25, scope: !12477)
!12480 = !DILocation(line: 1421, column: 7, scope: !12436)
!12481 = !DILocation(line: 1423, column: 18, scope: !12482)
!12482 = distinct !DILexicalBlock(scope: !12477, file: !3, line: 1422, column: 5)
!12483 = !DILocation(line: 1423, column: 27, scope: !12482)
!12484 = !DILocation(line: 1423, column: 7, scope: !12482)
!12485 = !DILocation(line: 1424, column: 12, scope: !12486)
!12486 = distinct !DILexicalBlock(scope: !12482, file: !3, line: 1424, column: 11)
!12487 = !DILocation(line: 1424, column: 11, scope: !12482)
!12488 = !DILocation(line: 1425, column: 11, scope: !12486)
!12489 = !DILocation(line: 1425, column: 20, scope: !12486)
!12490 = !DILocation(line: 1425, column: 2, scope: !12486)
!12491 = !DILocation(line: 1428, column: 4, scope: !12492)
!12492 = distinct !DILexicalBlock(scope: !12486, file: !3, line: 1427, column: 2)
!12493 = !DILocation(line: 1429, column: 17, scope: !12492)
!12494 = !DILocation(line: 1431, column: 5, scope: !12482)
!12495 = !DILocation(line: 1432, column: 20, scope: !12496)
!12496 = distinct !DILexicalBlock(scope: !12436, file: !3, line: 1432, column: 7)
!12497 = !DILocation(line: 1432, column: 7, scope: !12496)
!12498 = !DILocation(line: 1432, column: 27, scope: !12496)
!12499 = !DILocation(line: 1432, column: 7, scope: !12436)
!12500 = !DILocation(line: 1436, column: 41, scope: !12501)
!12501 = distinct !DILexicalBlock(scope: !12502, file: !3, line: 1436, column: 11)
!12502 = distinct !DILexicalBlock(scope: !12496, file: !3, line: 1433, column: 5)
!12503 = !DILocation(line: 1436, column: 28, scope: !12501)
!12504 = !DILocation(line: 1436, column: 46, scope: !12501)
!12505 = !DILocation(line: 1437, column: 20, scope: !12501)
!12506 = !DILocation(line: 1437, column: 7, scope: !12501)
!12507 = !DILocation(line: 1437, column: 27, scope: !12501)
!12508 = !DILocation(line: 1436, column: 11, scope: !12501)
!12509 = !DILocation(line: 1436, column: 11, scope: !12502)
!12510 = !DILocation(line: 1439, column: 8, scope: !12511)
!12511 = distinct !DILexicalBlock(scope: !12512, file: !3, line: 1439, column: 8)
!12512 = distinct !DILexicalBlock(scope: !12501, file: !3, line: 1438, column: 2)
!12513 = !DILocation(line: 1439, column: 23, scope: !12511)
!12514 = !DILocation(line: 1439, column: 27, scope: !12511)
!12515 = !DILocation(line: 1439, column: 8, scope: !12512)
!12516 = !DILocation(line: 1441, column: 17, scope: !12517)
!12517 = distinct !DILexicalBlock(scope: !12511, file: !3, line: 1440, column: 6)
!12518 = !DILocation(line: 1441, column: 26, scope: !12517)
!12519 = !DILocation(line: 1441, column: 8, scope: !12517)
!12520 = !DILocation(line: 1442, column: 21, scope: !12517)
!12521 = !DILocation(line: 1443, column: 6, scope: !12517)
!12522 = !DILocation(line: 1444, column: 2, scope: !12512)
!12523 = !DILocation(line: 1446, column: 7, scope: !12502)
!12524 = !DILocation(line: 1447, column: 7, scope: !12502)
!12525 = !DILocation(line: 1449, column: 17, scope: !12526)
!12526 = distinct !DILexicalBlock(scope: !12502, file: !3, line: 1449, column: 11)
!12527 = !DILocation(line: 1449, column: 28, scope: !12526)
!12528 = !DILocation(line: 1449, column: 11, scope: !12502)
!12529 = !DILocation(line: 1451, column: 4, scope: !12530)
!12530 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 1450, column: 2)
!12531 = !DILocation(line: 1452, column: 36, scope: !12530)
!12532 = !DILocation(line: 1452, column: 17, scope: !12530)
!12533 = !DILocation(line: 1452, column: 4, scope: !12530)
!12534 = !DILocation(line: 1452, column: 22, scope: !12530)
!12535 = !DILocation(line: 1452, column: 34, scope: !12530)
!12536 = !DILocation(line: 1453, column: 2, scope: !12530)
!12537 = !DILocation(line: 1454, column: 5, scope: !12502)
!12538 = !DILocation(line: 1455, column: 25, scope: !12539)
!12539 = distinct !DILexicalBlock(scope: !12436, file: !3, line: 1455, column: 7)
!12540 = !DILocation(line: 1455, column: 32, scope: !12539)
!12541 = !DILocation(line: 1455, column: 36, scope: !12539)
!12542 = !DILocation(line: 1455, column: 7, scope: !12539)
!12543 = !DILocation(line: 1455, column: 7, scope: !12436)
!12544 = !DILocation(line: 1457, column: 11, scope: !12545)
!12545 = distinct !DILexicalBlock(scope: !12546, file: !3, line: 1457, column: 11)
!12546 = distinct !DILexicalBlock(scope: !12539, file: !3, line: 1456, column: 5)
!12547 = !DILocation(line: 1457, column: 18, scope: !12545)
!12548 = !DILocation(line: 1457, column: 24, scope: !12545)
!12549 = !DILocation(line: 1457, column: 11, scope: !12546)
!12550 = !DILocation(line: 1458, column: 20, scope: !12545)
!12551 = !DILocation(line: 1458, column: 27, scope: !12545)
!12552 = !DILocation(line: 1458, column: 33, scope: !12545)
!12553 = !DILocation(line: 1458, column: 38, scope: !12545)
!12554 = !DILocation(line: 1458, column: 2, scope: !12545)
!12555 = !DILocation(line: 1459, column: 5, scope: !12546)
!12556 = !DILocation(line: 1460, column: 1, scope: !12436)
!12557 = distinct !DISubprogram(name: "merge_graph_nodes", scope: !3, file: !3, line: 1003, type: !11632, scopeLine: 1005, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12558 = !DILocalVariable(name: "graph", arg: 1, scope: !12557, file: !3, line: 1003, type: !3314)
!12559 = !DILocation(line: 1003, column: 39, scope: !12557)
!12560 = !DILocalVariable(name: "to", arg: 2, scope: !12557, file: !3, line: 1003, type: !6)
!12561 = !DILocation(line: 1003, column: 59, scope: !12557)
!12562 = !DILocalVariable(name: "from", arg: 3, scope: !12557, file: !3, line: 1004, type: !6)
!12563 = !DILocation(line: 1004, column: 19, scope: !12557)
!12564 = !DILocation(line: 1006, column: 7, scope: !12565)
!12565 = distinct !DILexicalBlock(scope: !12557, file: !3, line: 1006, column: 7)
!12566 = !DILocation(line: 1006, column: 14, scope: !12565)
!12567 = !DILocation(line: 1006, column: 30, scope: !12565)
!12568 = !DILocation(line: 1006, column: 36, scope: !12565)
!12569 = !DILocation(line: 1006, column: 7, scope: !12557)
!12570 = !DILocation(line: 1014, column: 11, scope: !12571)
!12571 = distinct !DILexicalBlock(scope: !12572, file: !3, line: 1014, column: 11)
!12572 = distinct !DILexicalBlock(scope: !12565, file: !3, line: 1007, column: 5)
!12573 = !DILocation(line: 1014, column: 18, scope: !12571)
!12574 = !DILocation(line: 1014, column: 34, scope: !12571)
!12575 = !DILocation(line: 1014, column: 38, scope: !12571)
!12576 = !DILocation(line: 1014, column: 11, scope: !12572)
!12577 = !DILocation(line: 1015, column: 31, scope: !12571)
!12578 = !DILocation(line: 1015, column: 38, scope: !12571)
!12579 = !DILocation(line: 1015, column: 54, scope: !12571)
!12580 = !DILocation(line: 1015, column: 2, scope: !12571)
!12581 = !DILocation(line: 1015, column: 9, scope: !12571)
!12582 = !DILocation(line: 1015, column: 25, scope: !12571)
!12583 = !DILocation(line: 1015, column: 29, scope: !12571)
!12584 = !DILocation(line: 1016, column: 5, scope: !12572)
!12585 = !DILocation(line: 1019, column: 7, scope: !12586)
!12586 = distinct !DILexicalBlock(scope: !12557, file: !3, line: 1019, column: 7)
!12587 = !DILocation(line: 1019, column: 14, scope: !12586)
!12588 = !DILocation(line: 1019, column: 20, scope: !12586)
!12589 = !DILocation(line: 1019, column: 7, scope: !12557)
!12590 = !DILocation(line: 1021, column: 12, scope: !12591)
!12591 = distinct !DILexicalBlock(scope: !12592, file: !3, line: 1021, column: 11)
!12592 = distinct !DILexicalBlock(scope: !12586, file: !3, line: 1020, column: 5)
!12593 = !DILocation(line: 1021, column: 19, scope: !12591)
!12594 = !DILocation(line: 1021, column: 25, scope: !12591)
!12595 = !DILocation(line: 1021, column: 11, scope: !12592)
!12596 = !DILocation(line: 1022, column: 21, scope: !12591)
!12597 = !DILocation(line: 1022, column: 2, scope: !12591)
!12598 = !DILocation(line: 1022, column: 9, scope: !12591)
!12599 = !DILocation(line: 1022, column: 15, scope: !12591)
!12600 = !DILocation(line: 1022, column: 19, scope: !12591)
!12601 = !DILocation(line: 1023, column: 24, scope: !12592)
!12602 = !DILocation(line: 1023, column: 31, scope: !12592)
!12603 = !DILocation(line: 1023, column: 37, scope: !12592)
!12604 = !DILocation(line: 1024, column: 10, scope: !12592)
!12605 = !DILocation(line: 1024, column: 17, scope: !12592)
!12606 = !DILocation(line: 1024, column: 23, scope: !12592)
!12607 = !DILocation(line: 1023, column: 7, scope: !12592)
!12608 = !DILocation(line: 1025, column: 5, scope: !12592)
!12609 = !DILocation(line: 1027, column: 25, scope: !12557)
!12610 = !DILocation(line: 1027, column: 32, scope: !12557)
!12611 = !DILocation(line: 1027, column: 3, scope: !12557)
!12612 = !DILocation(line: 1028, column: 1, scope: !12557)
!12613 = distinct !DISubprogram(name: "merge_node_constraints", scope: !3, file: !3, line: 963, type: !11632, scopeLine: 965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12614 = !DILocalVariable(name: "graph", arg: 1, scope: !12613, file: !3, line: 963, type: !3314)
!12615 = !DILocation(line: 963, column: 44, scope: !12613)
!12616 = !DILocalVariable(name: "to", arg: 2, scope: !12613, file: !3, line: 963, type: !6)
!12617 = !DILocation(line: 963, column: 64, scope: !12613)
!12618 = !DILocalVariable(name: "from", arg: 3, scope: !12613, file: !3, line: 964, type: !6)
!12619 = !DILocation(line: 964, column: 17, scope: !12613)
!12620 = !DILocalVariable(name: "i", scope: !12613, file: !3, line: 966, type: !6)
!12621 = !DILocation(line: 966, column: 16, scope: !12613)
!12622 = !DILocalVariable(name: "c", scope: !12613, file: !3, line: 967, type: !1715)
!12623 = !DILocation(line: 967, column: 16, scope: !12613)
!12624 = !DILocation(line: 969, column: 3, scope: !12613)
!12625 = !DILocation(line: 972, column: 10, scope: !12626)
!12626 = distinct !DILexicalBlock(scope: !12613, file: !3, line: 972, column: 3)
!12627 = !DILocation(line: 972, column: 8, scope: !12626)
!12628 = !DILocation(line: 972, column: 15, scope: !12629)
!12629 = distinct !DILexicalBlock(scope: !12626, file: !3, line: 972, column: 3)
!12630 = !DILocation(line: 972, column: 3, scope: !12626)
!12631 = !DILocation(line: 978, column: 11, scope: !12632)
!12632 = distinct !DILexicalBlock(scope: !12633, file: !3, line: 978, column: 11)
!12633 = distinct !DILexicalBlock(scope: !12629, file: !3, line: 973, column: 5)
!12634 = !DILocation(line: 978, column: 14, scope: !12632)
!12635 = !DILocation(line: 978, column: 18, scope: !12632)
!12636 = !DILocation(line: 978, column: 23, scope: !12632)
!12637 = !DILocation(line: 978, column: 11, scope: !12633)
!12638 = !DILocation(line: 979, column: 15, scope: !12632)
!12639 = !DILocation(line: 979, column: 2, scope: !12632)
!12640 = !DILocation(line: 979, column: 5, scope: !12632)
!12641 = !DILocation(line: 979, column: 9, scope: !12632)
!12642 = !DILocation(line: 979, column: 13, scope: !12632)
!12643 = !DILocation(line: 980, column: 16, scope: !12644)
!12644 = distinct !DILexicalBlock(scope: !12632, file: !3, line: 980, column: 16)
!12645 = !DILocation(line: 980, column: 19, scope: !12644)
!12646 = !DILocation(line: 980, column: 23, scope: !12644)
!12647 = !DILocation(line: 980, column: 28, scope: !12644)
!12648 = !DILocation(line: 980, column: 16, scope: !12632)
!12649 = !DILocation(line: 981, column: 15, scope: !12644)
!12650 = !DILocation(line: 981, column: 2, scope: !12644)
!12651 = !DILocation(line: 981, column: 5, scope: !12644)
!12652 = !DILocation(line: 981, column: 9, scope: !12644)
!12653 = !DILocation(line: 981, column: 13, scope: !12644)
!12654 = !DILocation(line: 983, column: 15, scope: !12644)
!12655 = !DILocation(line: 983, column: 2, scope: !12644)
!12656 = !DILocation(line: 983, column: 5, scope: !12644)
!12657 = !DILocation(line: 983, column: 9, scope: !12644)
!12658 = !DILocation(line: 983, column: 13, scope: !12644)
!12659 = !DILocation(line: 984, column: 5, scope: !12633)
!12660 = !DILocation(line: 972, column: 72, scope: !12629)
!12661 = !DILocation(line: 972, column: 3, scope: !12629)
!12662 = distinct !{!12662, !12630, !12663}
!12663 = !DILocation(line: 984, column: 5, scope: !12626)
!12664 = !DILocation(line: 985, column: 26, scope: !12613)
!12665 = !DILocation(line: 985, column: 33, scope: !12613)
!12666 = !DILocation(line: 985, column: 41, scope: !12613)
!12667 = !DILocation(line: 985, column: 47, scope: !12613)
!12668 = !DILocation(line: 985, column: 54, scope: !12613)
!12669 = !DILocation(line: 985, column: 62, scope: !12613)
!12670 = !DILocation(line: 985, column: 3, scope: !12613)
!12671 = !DILocation(line: 986, column: 3, scope: !12613)
!12672 = !DILocation(line: 987, column: 3, scope: !12613)
!12673 = !DILocation(line: 987, column: 10, scope: !12613)
!12674 = !DILocation(line: 987, column: 18, scope: !12613)
!12675 = !DILocation(line: 987, column: 24, scope: !12613)
!12676 = !DILocation(line: 988, column: 1, scope: !12613)
!12677 = distinct !DISubprogram(name: "valid_graph_edge", scope: !3, file: !3, line: 1093, type: !12678, scopeLine: 1095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12678 = !DISubroutineType(types: !12679)
!12679 = !{!1894, !3314, !6, !6}
!12680 = !DILocalVariable(name: "graph", arg: 1, scope: !12677, file: !3, line: 1093, type: !3314)
!12681 = !DILocation(line: 1093, column: 38, scope: !12677)
!12682 = !DILocalVariable(name: "src", arg: 2, scope: !12677, file: !3, line: 1093, type: !6)
!12683 = !DILocation(line: 1093, column: 58, scope: !12677)
!12684 = !DILocalVariable(name: "dest", arg: 3, scope: !12677, file: !3, line: 1094, type: !6)
!12685 = !DILocation(line: 1094, column: 18, scope: !12677)
!12686 = !DILocation(line: 1096, column: 11, scope: !12677)
!12687 = !DILocation(line: 1096, column: 18, scope: !12677)
!12688 = !DILocation(line: 1096, column: 24, scope: !12677)
!12689 = !DILocation(line: 1097, column: 4, scope: !12677)
!12690 = !DILocation(line: 1097, column: 21, scope: !12677)
!12691 = !DILocation(line: 1097, column: 28, scope: !12677)
!12692 = !DILocation(line: 1097, column: 34, scope: !12677)
!12693 = !DILocation(line: 1097, column: 41, scope: !12677)
!12694 = !DILocation(line: 1097, column: 7, scope: !12677)
!12695 = !DILocation(line: 0, scope: !12677)
!12696 = !DILocation(line: 1096, column: 10, scope: !12677)
!12697 = !DILocation(line: 1096, column: 3, scope: !12677)
!12698 = distinct !DISubprogram(name: "constraint_set_union", scope: !3, file: !3, line: 809, type: !12699, scopeLine: 811, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12699 = !DISubroutineType(types: !12700)
!12700 = !{null, !3200, !3200}
!12701 = !DILocalVariable(name: "to", arg: 1, scope: !12698, file: !3, line: 809, type: !3200)
!12702 = !DILocation(line: 809, column: 48, scope: !12698)
!12703 = !DILocalVariable(name: "from", arg: 2, scope: !12698, file: !3, line: 810, type: !3200)
!12704 = !DILocation(line: 810, column: 34, scope: !12698)
!12705 = !DILocalVariable(name: "i", scope: !12698, file: !3, line: 812, type: !1730)
!12706 = !DILocation(line: 812, column: 7, scope: !12698)
!12707 = !DILocalVariable(name: "c", scope: !12698, file: !3, line: 813, type: !1715)
!12708 = !DILocation(line: 813, column: 16, scope: !12698)
!12709 = !DILocation(line: 815, column: 10, scope: !12710)
!12710 = distinct !DILexicalBlock(scope: !12698, file: !3, line: 815, column: 3)
!12711 = !DILocation(line: 815, column: 8, scope: !12710)
!12712 = !DILocation(line: 815, column: 15, scope: !12713)
!12713 = distinct !DILexicalBlock(scope: !12710, file: !3, line: 815, column: 3)
!12714 = !DILocation(line: 815, column: 3, scope: !12710)
!12715 = !DILocation(line: 817, column: 33, scope: !12716)
!12716 = distinct !DILexicalBlock(scope: !12717, file: !3, line: 817, column: 11)
!12717 = distinct !DILexicalBlock(scope: !12713, file: !3, line: 816, column: 5)
!12718 = !DILocation(line: 817, column: 32, scope: !12716)
!12719 = !DILocation(line: 817, column: 38, scope: !12716)
!12720 = !DILocation(line: 817, column: 11, scope: !12716)
!12721 = !DILocation(line: 817, column: 41, scope: !12716)
!12722 = !DILocation(line: 817, column: 11, scope: !12717)
!12723 = !DILocalVariable(name: "place", scope: !12724, file: !3, line: 819, type: !6)
!12724 = distinct !DILexicalBlock(scope: !12716, file: !3, line: 818, column: 2)
!12725 = !DILocation(line: 819, column: 17, scope: !12724)
!12726 = !DILocation(line: 819, column: 25, scope: !12724)
!12727 = !DILocation(line: 821, column: 4, scope: !12724)
!12728 = !DILocation(line: 822, column: 2, scope: !12724)
!12729 = !DILocation(line: 823, column: 5, scope: !12717)
!12730 = !DILocation(line: 815, column: 57, scope: !12713)
!12731 = !DILocation(line: 815, column: 3, scope: !12713)
!12732 = distinct !{!12732, !12714, !12733}
!12733 = !DILocation(line: 823, column: 5, scope: !12710)
!12734 = !DILocation(line: 824, column: 1, scope: !12698)
!12735 = distinct !DISubprogram(name: "VEC_constraint_t_heap_free", scope: !3, file: !3, line: 190, type: !12736, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12736 = !DISubroutineType(types: !12737)
!12737 = !{null, !3200}
!12738 = !DILocalVariable(name: "vec_", arg: 1, scope: !12735, file: !3, line: 190, type: !3200)
!12739 = !DILocation(line: 190, column: 1, scope: !12735)
!12740 = !DILocation(line: 190, column: 1, scope: !12741)
!12741 = distinct !DILexicalBlock(scope: !12735, file: !3, line: 190, column: 1)
!12742 = distinct !DISubprogram(name: "constraint_vec_find", scope: !3, file: !3, line: 788, type: !12743, scopeLine: 790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12743 = !DISubroutineType(types: !12744)
!12744 = !{!1715, !1731, !1717}
!12745 = !DILocalVariable(name: "vec", arg: 1, scope: !12742, file: !3, line: 788, type: !1731)
!12746 = !DILocation(line: 788, column: 46, scope: !12742)
!12747 = !DILocalVariable(name: "lookfor", arg: 2, scope: !12742, file: !3, line: 789, type: !1717)
!12748 = !DILocation(line: 789, column: 26, scope: !12742)
!12749 = !DILocalVariable(name: "place", scope: !12742, file: !3, line: 791, type: !6)
!12750 = !DILocation(line: 791, column: 16, scope: !12742)
!12751 = !DILocalVariable(name: "found", scope: !12742, file: !3, line: 792, type: !1715)
!12752 = !DILocation(line: 792, column: 16, scope: !12742)
!12753 = !DILocation(line: 794, column: 7, scope: !12754)
!12754 = distinct !DILexicalBlock(scope: !12742, file: !3, line: 794, column: 7)
!12755 = !DILocation(line: 794, column: 11, scope: !12754)
!12756 = !DILocation(line: 794, column: 7, scope: !12742)
!12757 = !DILocation(line: 795, column: 5, scope: !12754)
!12758 = !DILocation(line: 797, column: 11, scope: !12742)
!12759 = !DILocation(line: 797, column: 9, scope: !12742)
!12760 = !DILocation(line: 798, column: 7, scope: !12761)
!12761 = distinct !DILexicalBlock(scope: !12742, file: !3, line: 798, column: 7)
!12762 = !DILocation(line: 798, column: 16, scope: !12761)
!12763 = !DILocation(line: 798, column: 13, scope: !12761)
!12764 = !DILocation(line: 798, column: 7, scope: !12742)
!12765 = !DILocation(line: 799, column: 5, scope: !12761)
!12766 = !DILocation(line: 800, column: 11, scope: !12742)
!12767 = !DILocation(line: 800, column: 9, scope: !12742)
!12768 = !DILocation(line: 801, column: 27, scope: !12769)
!12769 = distinct !DILexicalBlock(scope: !12742, file: !3, line: 801, column: 7)
!12770 = !DILocation(line: 801, column: 8, scope: !12769)
!12771 = !DILocation(line: 801, column: 7, scope: !12742)
!12772 = !DILocation(line: 802, column: 5, scope: !12769)
!12773 = !DILocation(line: 803, column: 10, scope: !12742)
!12774 = !DILocation(line: 803, column: 3, scope: !12742)
!12775 = !DILocation(line: 804, column: 1, scope: !12742)
!12776 = distinct !DISubprogram(name: "VEC_constraint_t_base_lower_bound", scope: !3, file: !3, line: 189, type: !12777, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12777 = !DISubroutineType(types: !12778)
!12778 = !{!6, !6882, !12779, !12780}
!12779 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1715)
!12780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12781, size: 64)
!12781 = !DISubroutineType(types: !12782)
!12782 = !{!1894, !12779, !12779}
!12783 = !DILocalVariable(name: "vec_", arg: 1, scope: !12776, file: !3, line: 189, type: !6882)
!12784 = !DILocation(line: 189, column: 1, scope: !12776)
!12785 = !DILocalVariable(name: "obj_", arg: 2, scope: !12776, file: !3, line: 189, type: !12779)
!12786 = !DILocalVariable(name: "lessthan_", arg: 3, scope: !12776, file: !3, line: 189, type: !12780)
!12787 = !DILocalVariable(name: "len_", scope: !12776, file: !3, line: 189, type: !6)
!12788 = !DILocalVariable(name: "half_", scope: !12776, file: !3, line: 189, type: !6)
!12789 = !DILocalVariable(name: "middle_", scope: !12776, file: !3, line: 189, type: !6)
!12790 = !DILocalVariable(name: "first_", scope: !12776, file: !3, line: 189, type: !6)
!12791 = !DILocalVariable(name: "middle_elem_", scope: !12792, file: !3, line: 189, type: !1715)
!12792 = distinct !DILexicalBlock(scope: !12776, file: !3, line: 189, column: 1)
!12793 = !DILocation(line: 189, column: 1, scope: !12792)
!12794 = !DILocation(line: 189, column: 1, scope: !12795)
!12795 = distinct !DILexicalBlock(scope: !12792, file: !3, line: 189, column: 1)
!12796 = !DILocation(line: 189, column: 1, scope: !12797)
!12797 = distinct !DILexicalBlock(scope: !12795, file: !3, line: 189, column: 1)
!12798 = distinct !{!12798, !12784, !12784}
!12799 = distinct !DISubprogram(name: "constraint_less", scope: !3, file: !3, line: 765, type: !12781, scopeLine: 766, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12800 = !DILocalVariable(name: "a", arg: 1, scope: !12799, file: !3, line: 765, type: !12779)
!12801 = !DILocation(line: 765, column: 37, scope: !12799)
!12802 = !DILocalVariable(name: "b", arg: 2, scope: !12799, file: !3, line: 765, type: !12779)
!12803 = !DILocation(line: 765, column: 59, scope: !12799)
!12804 = !DILocation(line: 767, column: 29, scope: !12805)
!12805 = distinct !DILexicalBlock(scope: !12799, file: !3, line: 767, column: 7)
!12806 = !DILocation(line: 767, column: 32, scope: !12805)
!12807 = !DILocation(line: 767, column: 37, scope: !12805)
!12808 = !DILocation(line: 767, column: 40, scope: !12805)
!12809 = !DILocation(line: 767, column: 7, scope: !12805)
!12810 = !DILocation(line: 767, column: 7, scope: !12799)
!12811 = !DILocation(line: 768, column: 5, scope: !12805)
!12812 = !DILocation(line: 769, column: 34, scope: !12813)
!12813 = distinct !DILexicalBlock(scope: !12805, file: !3, line: 769, column: 12)
!12814 = !DILocation(line: 769, column: 37, scope: !12813)
!12815 = !DILocation(line: 769, column: 42, scope: !12813)
!12816 = !DILocation(line: 769, column: 45, scope: !12813)
!12817 = !DILocation(line: 769, column: 12, scope: !12813)
!12818 = !DILocation(line: 769, column: 12, scope: !12805)
!12819 = !DILocation(line: 770, column: 5, scope: !12813)
!12820 = !DILocation(line: 772, column: 34, scope: !12813)
!12821 = !DILocation(line: 772, column: 37, scope: !12813)
!12822 = !DILocation(line: 772, column: 42, scope: !12813)
!12823 = !DILocation(line: 772, column: 45, scope: !12813)
!12824 = !DILocation(line: 772, column: 12, scope: !12813)
!12825 = !DILocation(line: 772, column: 5, scope: !12813)
!12826 = !DILocation(line: 773, column: 1, scope: !12799)
!12827 = distinct !DISubprogram(name: "VEC_constraint_t_heap_safe_insert", scope: !3, file: !3, line: 190, type: !12828, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12828 = !DISubroutineType(types: !12829)
!12829 = !{!4909, !3200, !6, !1715}
!12830 = !DILocalVariable(name: "vec_", arg: 1, scope: !12827, file: !3, line: 190, type: !3200)
!12831 = !DILocation(line: 190, column: 1, scope: !12827)
!12832 = !DILocalVariable(name: "ix_", arg: 2, scope: !12827, file: !3, line: 190, type: !6)
!12833 = !DILocalVariable(name: "obj_", arg: 3, scope: !12827, file: !3, line: 190, type: !1715)
!12834 = distinct !DISubprogram(name: "VEC_constraint_t_base_length", scope: !3, file: !3, line: 189, type: !12835, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12835 = !DISubroutineType(types: !12836)
!12836 = !{!6, !4907}
!12837 = !DILocalVariable(name: "vec_", arg: 1, scope: !12834, file: !3, line: 189, type: !4907)
!12838 = !DILocation(line: 189, column: 1, scope: !12834)
!12839 = distinct !DISubprogram(name: "VEC_constraint_t_base_index", scope: !3, file: !3, line: 189, type: !12840, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12840 = !DISubroutineType(types: !12841)
!12841 = !{!1715, !4907, !6}
!12842 = !DILocalVariable(name: "vec_", arg: 1, scope: !12839, file: !3, line: 189, type: !4907)
!12843 = !DILocation(line: 189, column: 1, scope: !12839)
!12844 = !DILocalVariable(name: "ix_", arg: 2, scope: !12839, file: !3, line: 189, type: !6)
!12845 = !DILocation(line: 0, scope: !12839)
!12846 = distinct !DISubprogram(name: "constraint_equal", scope: !3, file: !3, line: 778, type: !12847, scopeLine: 779, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12847 = !DISubroutineType(types: !12848)
!12848 = !{!1894, !1717, !1717}
!12849 = !DILocalVariable(name: "a", arg: 1, scope: !12846, file: !3, line: 778, type: !1717)
!12850 = !DILocation(line: 778, column: 37, scope: !12846)
!12851 = !DILocalVariable(name: "b", arg: 2, scope: !12846, file: !3, line: 778, type: !1717)
!12852 = !DILocation(line: 778, column: 58, scope: !12846)
!12853 = !DILocation(line: 780, column: 35, scope: !12846)
!12854 = !DILocation(line: 780, column: 42, scope: !12846)
!12855 = !DILocation(line: 780, column: 10, scope: !12846)
!12856 = !DILocation(line: 781, column: 5, scope: !12846)
!12857 = !DILocation(line: 781, column: 33, scope: !12846)
!12858 = !DILocation(line: 781, column: 40, scope: !12846)
!12859 = !DILocation(line: 781, column: 8, scope: !12846)
!12860 = !DILocation(line: 0, scope: !12846)
!12861 = !DILocation(line: 780, column: 3, scope: !12846)
!12862 = distinct !DISubprogram(name: "constraint_expr_equal", scope: !3, file: !3, line: 738, type: !12863, scopeLine: 739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12863 = !DISubroutineType(types: !12864)
!12864 = !{!1894, !1720, !1720}
!12865 = !DILocalVariable(name: "a", arg: 1, scope: !12862, file: !3, line: 738, type: !1720)
!12866 = !DILocation(line: 738, column: 47, scope: !12862)
!12867 = !DILocalVariable(name: "b", arg: 2, scope: !12862, file: !3, line: 738, type: !1720)
!12868 = !DILocation(line: 738, column: 73, scope: !12862)
!12869 = !DILocation(line: 740, column: 12, scope: !12862)
!12870 = !DILocation(line: 740, column: 22, scope: !12862)
!12871 = !DILocation(line: 740, column: 17, scope: !12862)
!12872 = !DILocation(line: 740, column: 27, scope: !12862)
!12873 = !DILocation(line: 740, column: 32, scope: !12862)
!12874 = !DILocation(line: 740, column: 41, scope: !12862)
!12875 = !DILocation(line: 740, column: 36, scope: !12862)
!12876 = !DILocation(line: 740, column: 45, scope: !12862)
!12877 = !DILocation(line: 740, column: 50, scope: !12862)
!12878 = !DILocation(line: 740, column: 62, scope: !12862)
!12879 = !DILocation(line: 740, column: 57, scope: !12862)
!12880 = !DILocation(line: 0, scope: !12862)
!12881 = !DILocation(line: 740, column: 10, scope: !12862)
!12882 = !DILocation(line: 740, column: 3, scope: !12862)
!12883 = distinct !DISubprogram(name: "constraint_expr_less", scope: !3, file: !3, line: 748, type: !12863, scopeLine: 749, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12884 = !DILocalVariable(name: "a", arg: 1, scope: !12883, file: !3, line: 748, type: !1720)
!12885 = !DILocation(line: 748, column: 46, scope: !12883)
!12886 = !DILocalVariable(name: "b", arg: 2, scope: !12883, file: !3, line: 748, type: !1720)
!12887 = !DILocation(line: 748, column: 72, scope: !12883)
!12888 = !DILocation(line: 750, column: 9, scope: !12889)
!12889 = distinct !DILexicalBlock(scope: !12883, file: !3, line: 750, column: 7)
!12890 = !DILocation(line: 750, column: 19, scope: !12889)
!12891 = !DILocation(line: 750, column: 14, scope: !12889)
!12892 = !DILocation(line: 750, column: 7, scope: !12883)
!12893 = !DILocation(line: 752, column: 13, scope: !12894)
!12894 = distinct !DILexicalBlock(scope: !12895, file: !3, line: 752, column: 11)
!12895 = distinct !DILexicalBlock(scope: !12889, file: !3, line: 751, column: 5)
!12896 = !DILocation(line: 752, column: 22, scope: !12894)
!12897 = !DILocation(line: 752, column: 17, scope: !12894)
!12898 = !DILocation(line: 752, column: 11, scope: !12895)
!12899 = !DILocation(line: 753, column: 11, scope: !12894)
!12900 = !DILocation(line: 753, column: 22, scope: !12894)
!12901 = !DILocation(line: 753, column: 18, scope: !12894)
!12902 = !DILocation(line: 753, column: 9, scope: !12894)
!12903 = !DILocation(line: 753, column: 2, scope: !12894)
!12904 = !DILocation(line: 755, column: 11, scope: !12894)
!12905 = !DILocation(line: 755, column: 19, scope: !12894)
!12906 = !DILocation(line: 755, column: 15, scope: !12894)
!12907 = !DILocation(line: 755, column: 9, scope: !12894)
!12908 = !DILocation(line: 755, column: 2, scope: !12894)
!12909 = !DILocation(line: 758, column: 14, scope: !12889)
!12910 = !DILocation(line: 758, column: 23, scope: !12889)
!12911 = !DILocation(line: 758, column: 19, scope: !12889)
!12912 = !DILocation(line: 758, column: 12, scope: !12889)
!12913 = !DILocation(line: 758, column: 5, scope: !12889)
!12914 = !DILocation(line: 759, column: 1, scope: !12883)
!12915 = distinct !DISubprogram(name: "VEC_constraint_t_base_quick_insert", scope: !3, file: !3, line: 189, type: !12916, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12916 = !DISubroutineType(types: !12917)
!12917 = !{!4909, !6882, !6, !1715}
!12918 = !DILocalVariable(name: "vec_", arg: 1, scope: !12915, file: !3, line: 189, type: !6882)
!12919 = !DILocation(line: 189, column: 1, scope: !12915)
!12920 = !DILocalVariable(name: "ix_", arg: 2, scope: !12915, file: !3, line: 189, type: !6)
!12921 = !DILocalVariable(name: "obj_", arg: 3, scope: !12915, file: !3, line: 189, type: !1715)
!12922 = !DILocalVariable(name: "slot_", scope: !12915, file: !3, line: 189, type: !4909)
!12923 = distinct !DISubprogram(name: "add_graph_edge", scope: !3, file: !3, line: 1066, type: !12678, scopeLine: 1068, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12924 = !DILocalVariable(name: "graph", arg: 1, scope: !12923, file: !3, line: 1066, type: !3314)
!12925 = !DILocation(line: 1066, column: 36, scope: !12923)
!12926 = !DILocalVariable(name: "to", arg: 2, scope: !12923, file: !3, line: 1066, type: !6)
!12927 = !DILocation(line: 1066, column: 56, scope: !12923)
!12928 = !DILocalVariable(name: "from", arg: 3, scope: !12923, file: !3, line: 1067, type: !6)
!12929 = !DILocation(line: 1067, column: 16, scope: !12923)
!12930 = !DILocation(line: 1069, column: 7, scope: !12931)
!12931 = distinct !DILexicalBlock(scope: !12923, file: !3, line: 1069, column: 7)
!12932 = !DILocation(line: 1069, column: 13, scope: !12931)
!12933 = !DILocation(line: 1069, column: 10, scope: !12931)
!12934 = !DILocation(line: 1069, column: 7, scope: !12923)
!12935 = !DILocation(line: 1071, column: 7, scope: !12936)
!12936 = distinct !DILexicalBlock(scope: !12931, file: !3, line: 1070, column: 5)
!12937 = !DILocalVariable(name: "r", scope: !12938, file: !3, line: 1075, type: !1894)
!12938 = distinct !DILexicalBlock(scope: !12931, file: !3, line: 1074, column: 5)
!12939 = !DILocation(line: 1075, column: 12, scope: !12938)
!12940 = !DILocation(line: 1077, column: 12, scope: !12941)
!12941 = distinct !DILexicalBlock(scope: !12938, file: !3, line: 1077, column: 11)
!12942 = !DILocation(line: 1077, column: 19, scope: !12941)
!12943 = !DILocation(line: 1077, column: 25, scope: !12941)
!12944 = !DILocation(line: 1077, column: 11, scope: !12938)
!12945 = !DILocation(line: 1078, column: 23, scope: !12941)
!12946 = !DILocation(line: 1078, column: 2, scope: !12941)
!12947 = !DILocation(line: 1078, column: 9, scope: !12941)
!12948 = !DILocation(line: 1078, column: 15, scope: !12941)
!12949 = !DILocation(line: 1078, column: 21, scope: !12941)
!12950 = !DILocation(line: 1079, column: 27, scope: !12951)
!12951 = distinct !DILexicalBlock(scope: !12938, file: !3, line: 1079, column: 11)
!12952 = !DILocation(line: 1079, column: 34, scope: !12951)
!12953 = !DILocation(line: 1079, column: 40, scope: !12951)
!12954 = !DILocation(line: 1079, column: 47, scope: !12951)
!12955 = !DILocation(line: 1079, column: 11, scope: !12951)
!12956 = !DILocation(line: 1079, column: 11, scope: !12938)
!12957 = !DILocation(line: 1081, column: 6, scope: !12958)
!12958 = distinct !DILexicalBlock(scope: !12951, file: !3, line: 1080, column: 2)
!12959 = !DILocation(line: 1082, column: 8, scope: !12960)
!12960 = distinct !DILexicalBlock(scope: !12958, file: !3, line: 1082, column: 8)
!12961 = !DILocation(line: 1082, column: 13, scope: !12960)
!12962 = !DILocation(line: 1082, column: 11, scope: !12960)
!12963 = !DILocation(line: 1082, column: 28, scope: !12960)
!12964 = !DILocation(line: 1082, column: 31, scope: !12960)
!12965 = !DILocation(line: 1082, column: 38, scope: !12960)
!12966 = !DILocation(line: 1082, column: 36, scope: !12960)
!12967 = !DILocation(line: 1082, column: 8, scope: !12958)
!12968 = !DILocation(line: 1083, column: 21, scope: !12960)
!12969 = !DILocation(line: 1083, column: 6, scope: !12960)
!12970 = !DILocation(line: 1084, column: 2, scope: !12958)
!12971 = !DILocation(line: 1085, column: 14, scope: !12938)
!12972 = !DILocation(line: 1085, column: 7, scope: !12938)
!12973 = !DILocation(line: 1087, column: 1, scope: !12923)
!12974 = distinct !DISubprogram(name: "free_scc_info", scope: !3, file: !3, line: 1793, type: !11051, scopeLine: 1794, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12975 = !DILocalVariable(name: "si", arg: 1, scope: !12974, file: !3, line: 1793, type: !3201)
!12976 = !DILocation(line: 1793, column: 33, scope: !12974)
!12977 = !DILocation(line: 1795, column: 3, scope: !12974)
!12978 = !DILocation(line: 1796, column: 3, scope: !12974)
!12979 = !DILocation(line: 1797, column: 9, scope: !12974)
!12980 = !DILocation(line: 1797, column: 13, scope: !12974)
!12981 = !DILocation(line: 1797, column: 3, scope: !12974)
!12982 = !DILocation(line: 1798, column: 9, scope: !12974)
!12983 = !DILocation(line: 1798, column: 13, scope: !12974)
!12984 = !DILocation(line: 1798, column: 3, scope: !12974)
!12985 = !DILocation(line: 1799, column: 3, scope: !12974)
!12986 = !DILocation(line: 1800, column: 9, scope: !12974)
!12987 = !DILocation(line: 1800, column: 3, scope: !12974)
!12988 = !DILocation(line: 1801, column: 1, scope: !12974)
!12989 = distinct !DISubprogram(name: "VEC_unsigned_heap_free", scope: !3212, file: !3212, line: 35, type: !12990, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12990 = !DISubroutineType(types: !12991)
!12991 = !{null, !12299}
!12992 = !DILocalVariable(name: "vec_", arg: 1, scope: !12989, file: !3212, line: 35, type: !12299)
!12993 = !DILocation(line: 35, column: 1, scope: !12989)
!12994 = !DILocation(line: 35, column: 1, scope: !12995)
!12995 = distinct !DILexicalBlock(scope: !12989, file: !3212, line: 35, column: 1)
!12996 = distinct !DISubprogram(name: "insert_into_complex", scope: !3, file: !3, line: 945, type: !12997, scopeLine: 947, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!12997 = !DISubroutineType(types: !12998)
!12998 = !{null, !3314, !6, !1715}
!12999 = !DILocalVariable(name: "graph", arg: 1, scope: !12996, file: !3, line: 945, type: !3314)
!13000 = !DILocation(line: 945, column: 41, scope: !12996)
!13001 = !DILocalVariable(name: "var", arg: 2, scope: !12996, file: !3, line: 946, type: !6)
!13002 = !DILocation(line: 946, column: 21, scope: !12996)
!13003 = !DILocalVariable(name: "c", arg: 3, scope: !12996, file: !3, line: 946, type: !1715)
!13004 = !DILocation(line: 946, column: 39, scope: !12996)
!13005 = !DILocalVariable(name: "complex", scope: !12996, file: !3, line: 948, type: !1731)
!13006 = !DILocation(line: 948, column: 29, scope: !12996)
!13007 = !DILocation(line: 948, column: 39, scope: !12996)
!13008 = !DILocation(line: 948, column: 46, scope: !12996)
!13009 = !DILocation(line: 948, column: 54, scope: !12996)
!13010 = !DILocalVariable(name: "place", scope: !12996, file: !3, line: 949, type: !6)
!13011 = !DILocation(line: 949, column: 16, scope: !12996)
!13012 = !DILocation(line: 949, column: 24, scope: !12996)
!13013 = !DILocation(line: 953, column: 7, scope: !13014)
!13014 = distinct !DILexicalBlock(scope: !12996, file: !3, line: 953, column: 7)
!13015 = !DILocation(line: 953, column: 16, scope: !13014)
!13016 = !DILocation(line: 953, column: 13, scope: !13014)
!13017 = !DILocation(line: 954, column: 7, scope: !13014)
!13018 = !DILocation(line: 954, column: 30, scope: !13014)
!13019 = !DILocation(line: 954, column: 34, scope: !13014)
!13020 = !DILocation(line: 954, column: 11, scope: !13014)
!13021 = !DILocation(line: 953, column: 7, scope: !12996)
!13022 = !DILocation(line: 955, column: 5, scope: !13014)
!13023 = !DILocation(line: 956, column: 1, scope: !12996)
!13024 = distinct !DISubprogram(name: "scc_visit", scope: !3, file: !3, line: 1317, type: !11820, scopeLine: 1318, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13025 = !DILocalVariable(name: "graph", arg: 1, scope: !13024, file: !3, line: 1317, type: !3314)
!13026 = !DILocation(line: 1317, column: 31, scope: !13024)
!13027 = !DILocalVariable(name: "si", arg: 2, scope: !13024, file: !3, line: 1317, type: !3201)
!13028 = !DILocation(line: 1317, column: 55, scope: !13024)
!13029 = !DILocalVariable(name: "n", arg: 3, scope: !13024, file: !3, line: 1317, type: !6)
!13030 = !DILocation(line: 1317, column: 72, scope: !13024)
!13031 = !DILocalVariable(name: "i", scope: !13024, file: !3, line: 1319, type: !6)
!13032 = !DILocation(line: 1319, column: 16, scope: !13024)
!13033 = !DILocalVariable(name: "bi", scope: !13024, file: !3, line: 1320, type: !3687)
!13034 = !DILocation(line: 1320, column: 19, scope: !13024)
!13035 = !DILocalVariable(name: "my_dfs", scope: !13024, file: !3, line: 1321, type: !6)
!13036 = !DILocation(line: 1321, column: 16, scope: !13024)
!13037 = !DILocation(line: 1323, column: 12, scope: !13024)
!13038 = !DILocation(line: 1323, column: 16, scope: !13024)
!13039 = !DILocation(line: 1323, column: 25, scope: !13024)
!13040 = !DILocation(line: 1323, column: 3, scope: !13024)
!13041 = !DILocation(line: 1324, column: 16, scope: !13024)
!13042 = !DILocation(line: 1324, column: 20, scope: !13024)
!13043 = !DILocation(line: 1324, column: 34, scope: !13024)
!13044 = !DILocation(line: 1324, column: 3, scope: !13024)
!13045 = !DILocation(line: 1324, column: 7, scope: !13024)
!13046 = !DILocation(line: 1324, column: 11, scope: !13024)
!13047 = !DILocation(line: 1324, column: 14, scope: !13024)
!13048 = !DILocation(line: 1325, column: 12, scope: !13024)
!13049 = !DILocation(line: 1325, column: 16, scope: !13024)
!13050 = !DILocation(line: 1325, column: 20, scope: !13024)
!13051 = !DILocation(line: 1325, column: 10, scope: !13024)
!13052 = !DILocation(line: 1328, column: 3, scope: !13053)
!13053 = distinct !DILexicalBlock(scope: !13024, file: !3, line: 1328, column: 3)
!13054 = !DILocation(line: 1328, column: 3, scope: !13024)
!13055 = !DILocation(line: 1328, column: 3, scope: !13056)
!13056 = distinct !DILexicalBlock(scope: !13053, file: !3, line: 1328, column: 3)
!13057 = !DILocation(line: 1328, column: 3, scope: !13058)
!13058 = distinct !DILexicalBlock(scope: !13056, file: !3, line: 1328, column: 3)
!13059 = !DILocalVariable(name: "w", scope: !13060, file: !3, line: 1330, type: !6)
!13060 = distinct !DILexicalBlock(scope: !13058, file: !3, line: 1329, column: 5)
!13061 = !DILocation(line: 1330, column: 20, scope: !13060)
!13062 = !DILocation(line: 1332, column: 11, scope: !13063)
!13063 = distinct !DILexicalBlock(scope: !13060, file: !3, line: 1332, column: 11)
!13064 = !DILocation(line: 1332, column: 15, scope: !13063)
!13065 = !DILocation(line: 1332, column: 13, scope: !13063)
!13066 = !DILocation(line: 1332, column: 11, scope: !13060)
!13067 = !DILocation(line: 1333, column: 2, scope: !13063)
!13068 = !DILocation(line: 1335, column: 17, scope: !13060)
!13069 = !DILocation(line: 1335, column: 11, scope: !13060)
!13070 = !DILocation(line: 1335, column: 9, scope: !13060)
!13071 = !DILocation(line: 1336, column: 11, scope: !13072)
!13072 = distinct !DILexicalBlock(scope: !13060, file: !3, line: 1336, column: 11)
!13073 = !DILocation(line: 1336, column: 11, scope: !13060)
!13074 = !DILocation(line: 1337, column: 2, scope: !13072)
!13075 = !DILocation(line: 1339, column: 12, scope: !13076)
!13076 = distinct !DILexicalBlock(scope: !13060, file: !3, line: 1339, column: 11)
!13077 = !DILocation(line: 1339, column: 11, scope: !13060)
!13078 = !DILocation(line: 1340, column: 13, scope: !13076)
!13079 = !DILocation(line: 1340, column: 20, scope: !13076)
!13080 = !DILocation(line: 1340, column: 24, scope: !13076)
!13081 = !DILocation(line: 1340, column: 2, scope: !13076)
!13082 = !DILocalVariable(name: "t", scope: !13083, file: !3, line: 1342, type: !6)
!13083 = distinct !DILexicalBlock(scope: !13060, file: !3, line: 1341, column: 7)
!13084 = !DILocation(line: 1342, column: 15, scope: !13083)
!13085 = !DILocation(line: 1342, column: 25, scope: !13083)
!13086 = !DILocation(line: 1342, column: 19, scope: !13083)
!13087 = !DILocalVariable(name: "nnode", scope: !13083, file: !3, line: 1343, type: !6)
!13088 = !DILocation(line: 1343, column: 15, scope: !13083)
!13089 = !DILocation(line: 1343, column: 29, scope: !13083)
!13090 = !DILocation(line: 1343, column: 23, scope: !13083)
!13091 = !DILocation(line: 1344, column: 2, scope: !13083)
!13092 = !DILocation(line: 1346, column: 6, scope: !13093)
!13093 = distinct !DILexicalBlock(scope: !13083, file: !3, line: 1346, column: 6)
!13094 = !DILocation(line: 1346, column: 10, scope: !13093)
!13095 = !DILocation(line: 1346, column: 14, scope: !13093)
!13096 = !DILocation(line: 1346, column: 19, scope: !13093)
!13097 = !DILocation(line: 1346, column: 23, scope: !13093)
!13098 = !DILocation(line: 1346, column: 27, scope: !13093)
!13099 = !DILocation(line: 1346, column: 17, scope: !13093)
!13100 = !DILocation(line: 1346, column: 6, scope: !13083)
!13101 = !DILocation(line: 1347, column: 17, scope: !13093)
!13102 = !DILocation(line: 1347, column: 21, scope: !13093)
!13103 = !DILocation(line: 1347, column: 25, scope: !13093)
!13104 = !DILocation(line: 1347, column: 4, scope: !13093)
!13105 = !DILocation(line: 1347, column: 8, scope: !13093)
!13106 = !DILocation(line: 1347, column: 12, scope: !13093)
!13107 = !DILocation(line: 1347, column: 15, scope: !13093)
!13108 = !DILocation(line: 1349, column: 5, scope: !13060)
!13109 = distinct !{!13109, !13055, !13110}
!13110 = !DILocation(line: 1349, column: 5, scope: !13056)
!13111 = !DILocation(line: 1352, column: 7, scope: !13112)
!13112 = distinct !DILexicalBlock(scope: !13024, file: !3, line: 1352, column: 7)
!13113 = !DILocation(line: 1352, column: 11, scope: !13112)
!13114 = !DILocation(line: 1352, column: 15, scope: !13112)
!13115 = !DILocation(line: 1352, column: 21, scope: !13112)
!13116 = !DILocation(line: 1352, column: 18, scope: !13112)
!13117 = !DILocation(line: 1352, column: 7, scope: !13024)
!13118 = !DILocation(line: 1354, column: 11, scope: !13119)
!13119 = distinct !DILexicalBlock(scope: !13120, file: !3, line: 1354, column: 11)
!13120 = distinct !DILexicalBlock(scope: !13112, file: !3, line: 1353, column: 5)
!13121 = !DILocation(line: 1354, column: 48, scope: !13119)
!13122 = !DILocation(line: 1355, column: 4, scope: !13119)
!13123 = !DILocation(line: 1355, column: 7, scope: !13119)
!13124 = !DILocation(line: 1355, column: 11, scope: !13119)
!13125 = !DILocation(line: 1355, column: 15, scope: !13119)
!13126 = !DILocation(line: 1355, column: 54, scope: !13119)
!13127 = !DILocation(line: 1355, column: 51, scope: !13119)
!13128 = !DILocation(line: 1354, column: 11, scope: !13120)
!13129 = !DILocalVariable(name: "scc", scope: !13130, file: !3, line: 1357, type: !2649)
!13130 = distinct !DILexicalBlock(scope: !13119, file: !3, line: 1356, column: 2)
!13131 = !DILocation(line: 1357, column: 11, scope: !13130)
!13132 = !DILocation(line: 1357, column: 17, scope: !13130)
!13133 = !DILocalVariable(name: "lowest_node", scope: !13130, file: !3, line: 1358, type: !6)
!13134 = !DILocation(line: 1358, column: 17, scope: !13130)
!13135 = !DILocalVariable(name: "bi", scope: !13130, file: !3, line: 1359, type: !3687)
!13136 = !DILocation(line: 1359, column: 20, scope: !13130)
!13137 = !DILocation(line: 1361, column: 20, scope: !13130)
!13138 = !DILocation(line: 1361, column: 25, scope: !13130)
!13139 = !DILocation(line: 1361, column: 4, scope: !13130)
!13140 = !DILocation(line: 1363, column: 4, scope: !13130)
!13141 = !DILocation(line: 1363, column: 11, scope: !13130)
!13142 = !DILocation(line: 1363, column: 48, scope: !13130)
!13143 = !DILocation(line: 1364, column: 4, scope: !13130)
!13144 = !DILocation(line: 1364, column: 7, scope: !13130)
!13145 = !DILocation(line: 1364, column: 11, scope: !13130)
!13146 = !DILocation(line: 1364, column: 15, scope: !13130)
!13147 = !DILocation(line: 1364, column: 54, scope: !13130)
!13148 = !DILocation(line: 1364, column: 51, scope: !13130)
!13149 = !DILocation(line: 0, scope: !13130)
!13150 = !DILocalVariable(name: "w", scope: !13151, file: !3, line: 1366, type: !6)
!13151 = distinct !DILexicalBlock(scope: !13130, file: !3, line: 1365, column: 6)
!13152 = !DILocation(line: 1366, column: 21, scope: !13151)
!13153 = !DILocation(line: 1366, column: 25, scope: !13151)
!13154 = !DILocation(line: 1368, column: 24, scope: !13151)
!13155 = !DILocation(line: 1368, column: 29, scope: !13151)
!13156 = !DILocation(line: 1368, column: 8, scope: !13151)
!13157 = distinct !{!13157, !13140, !13158}
!13158 = !DILocation(line: 1369, column: 6, scope: !13130)
!13159 = !DILocation(line: 1371, column: 40, scope: !13130)
!13160 = !DILocation(line: 1371, column: 18, scope: !13130)
!13161 = !DILocation(line: 1371, column: 16, scope: !13130)
!13162 = !DILocation(line: 1372, column: 4, scope: !13130)
!13163 = !DILocation(line: 1376, column: 4, scope: !13164)
!13164 = distinct !DILexicalBlock(scope: !13130, file: !3, line: 1376, column: 4)
!13165 = !DILocation(line: 1376, column: 4, scope: !13166)
!13166 = distinct !DILexicalBlock(scope: !13164, file: !3, line: 1376, column: 4)
!13167 = !DILocation(line: 1378, column: 12, scope: !13168)
!13168 = distinct !DILexicalBlock(scope: !13169, file: !3, line: 1378, column: 12)
!13169 = distinct !DILexicalBlock(scope: !13166, file: !3, line: 1377, column: 6)
!13170 = !DILocation(line: 1378, column: 16, scope: !13168)
!13171 = !DILocation(line: 1378, column: 14, scope: !13168)
!13172 = !DILocation(line: 1378, column: 12, scope: !13169)
!13173 = !DILocation(line: 1380, column: 16, scope: !13174)
!13174 = distinct !DILexicalBlock(scope: !13175, file: !3, line: 1380, column: 9)
!13175 = distinct !DILexicalBlock(scope: !13168, file: !3, line: 1379, column: 3)
!13176 = !DILocation(line: 1380, column: 29, scope: !13174)
!13177 = !DILocation(line: 1380, column: 9, scope: !13174)
!13178 = !DILocation(line: 1380, column: 9, scope: !13175)
!13179 = !DILocation(line: 1381, column: 20, scope: !13174)
!13180 = !DILocation(line: 1381, column: 27, scope: !13174)
!13181 = !DILocation(line: 1381, column: 40, scope: !13174)
!13182 = !DILocation(line: 1381, column: 7, scope: !13174)
!13183 = !DILocation(line: 1382, column: 3, scope: !13175)
!13184 = !DILocation(line: 1385, column: 12, scope: !13185)
!13185 = distinct !DILexicalBlock(scope: !13168, file: !3, line: 1384, column: 3)
!13186 = !DILocation(line: 1385, column: 25, scope: !13185)
!13187 = !DILocation(line: 1385, column: 5, scope: !13185)
!13188 = !DILocation(line: 1386, column: 50, scope: !13185)
!13189 = !DILocation(line: 1386, column: 5, scope: !13185)
!13190 = !DILocation(line: 1386, column: 12, scope: !13185)
!13191 = !DILocation(line: 1386, column: 28, scope: !13185)
!13192 = !DILocation(line: 1386, column: 32, scope: !13185)
!13193 = !DILocation(line: 1386, column: 30, scope: !13185)
!13194 = !DILocation(line: 1386, column: 48, scope: !13185)
!13195 = !DILocation(line: 1388, column: 6, scope: !13169)
!13196 = distinct !{!13196, !13163, !13197}
!13197 = !DILocation(line: 1388, column: 6, scope: !13164)
!13198 = !DILocation(line: 1389, column: 2, scope: !13130)
!13199 = !DILocation(line: 1390, column: 16, scope: !13120)
!13200 = !DILocation(line: 1390, column: 20, scope: !13120)
!13201 = !DILocation(line: 1390, column: 29, scope: !13120)
!13202 = !DILocation(line: 1390, column: 7, scope: !13120)
!13203 = !DILocation(line: 1391, column: 5, scope: !13120)
!13204 = !DILocation(line: 1393, column: 5, scope: !13112)
!13205 = !DILocation(line: 1394, column: 1, scope: !13024)
!13206 = distinct !DISubprogram(name: "init_topo_info", scope: !3, file: !3, line: 1477, type: !13207, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13207 = !DISubroutineType(types: !13208)
!13208 = !{!3233}
!13209 = !DILocalVariable(name: "size", scope: !13206, file: !3, line: 1479, type: !1727)
!13210 = !DILocation(line: 1479, column: 10, scope: !13206)
!13211 = !DILocation(line: 1479, column: 17, scope: !13206)
!13212 = !DILocation(line: 1479, column: 24, scope: !13206)
!13213 = !DILocalVariable(name: "ti", scope: !13206, file: !3, line: 1480, type: !3233)
!13214 = !DILocation(line: 1480, column: 21, scope: !13206)
!13215 = !DILocation(line: 1480, column: 26, scope: !13206)
!13216 = !DILocation(line: 1481, column: 32, scope: !13206)
!13217 = !DILocation(line: 1481, column: 17, scope: !13206)
!13218 = !DILocation(line: 1481, column: 3, scope: !13206)
!13219 = !DILocation(line: 1481, column: 7, scope: !13206)
!13220 = !DILocation(line: 1481, column: 15, scope: !13206)
!13221 = !DILocation(line: 1482, column: 17, scope: !13206)
!13222 = !DILocation(line: 1482, column: 21, scope: !13206)
!13223 = !DILocation(line: 1482, column: 3, scope: !13206)
!13224 = !DILocation(line: 1483, column: 20, scope: !13206)
!13225 = !DILocation(line: 1483, column: 3, scope: !13206)
!13226 = !DILocation(line: 1483, column: 7, scope: !13206)
!13227 = !DILocation(line: 1483, column: 18, scope: !13206)
!13228 = !DILocation(line: 1484, column: 10, scope: !13206)
!13229 = !DILocation(line: 1484, column: 3, scope: !13206)
!13230 = distinct !DISubprogram(name: "compute_topo_order", scope: !3, file: !3, line: 1829, type: !13231, scopeLine: 1831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13231 = !DISubroutineType(types: !13232)
!13232 = !{null, !3314, !3233}
!13233 = !DILocalVariable(name: "graph", arg: 1, scope: !13230, file: !3, line: 1829, type: !3314)
!13234 = !DILocation(line: 1829, column: 40, scope: !13230)
!13235 = !DILocalVariable(name: "ti", arg: 2, scope: !13230, file: !3, line: 1830, type: !3233)
!13236 = !DILocation(line: 1830, column: 25, scope: !13230)
!13237 = !DILocalVariable(name: "i", scope: !13230, file: !3, line: 1832, type: !6)
!13238 = !DILocation(line: 1832, column: 16, scope: !13230)
!13239 = !DILocalVariable(name: "size", scope: !13230, file: !3, line: 1833, type: !6)
!13240 = !DILocation(line: 1833, column: 16, scope: !13230)
!13241 = !DILocation(line: 1833, column: 23, scope: !13230)
!13242 = !DILocation(line: 1833, column: 30, scope: !13230)
!13243 = !DILocation(line: 1835, column: 10, scope: !13244)
!13244 = distinct !DILexicalBlock(scope: !13230, file: !3, line: 1835, column: 3)
!13245 = !DILocation(line: 1835, column: 8, scope: !13244)
!13246 = !DILocation(line: 1835, column: 15, scope: !13247)
!13247 = distinct !DILexicalBlock(scope: !13244, file: !3, line: 1835, column: 3)
!13248 = !DILocation(line: 1835, column: 20, scope: !13247)
!13249 = !DILocation(line: 1835, column: 17, scope: !13247)
!13250 = !DILocation(line: 1835, column: 3, scope: !13244)
!13251 = !DILocation(line: 1836, column: 10, scope: !13252)
!13252 = distinct !DILexicalBlock(scope: !13247, file: !3, line: 1836, column: 9)
!13253 = !DILocation(line: 1836, column: 36, scope: !13252)
!13254 = !DILocation(line: 1836, column: 45, scope: !13252)
!13255 = !DILocation(line: 1836, column: 39, scope: !13252)
!13256 = !DILocation(line: 1836, column: 51, scope: !13252)
!13257 = !DILocation(line: 1836, column: 48, scope: !13252)
!13258 = !DILocation(line: 1836, column: 9, scope: !13247)
!13259 = !DILocation(line: 1837, column: 19, scope: !13252)
!13260 = !DILocation(line: 1837, column: 26, scope: !13252)
!13261 = !DILocation(line: 1837, column: 30, scope: !13252)
!13262 = !DILocation(line: 1837, column: 7, scope: !13252)
!13263 = !DILocation(line: 1835, column: 26, scope: !13247)
!13264 = !DILocation(line: 1835, column: 3, scope: !13247)
!13265 = distinct !{!13265, !13250, !13266}
!13266 = !DILocation(line: 1837, column: 31, scope: !13244)
!13267 = !DILocation(line: 1838, column: 1, scope: !13230)
!13268 = distinct !DISubprogram(name: "eliminate_indirect_cycles", scope: !3, file: !3, line: 2405, type: !13269, scopeLine: 2406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13269 = !DISubroutineType(types: !13270)
!13270 = !{!1894, !6}
!13271 = !DILocalVariable(name: "node", arg: 1, scope: !13268, file: !3, line: 2405, type: !6)
!13272 = !DILocation(line: 2405, column: 41, scope: !13268)
!13273 = !DILocation(line: 2407, column: 7, scope: !13274)
!13274 = distinct !DILexicalBlock(scope: !13268, file: !3, line: 2407, column: 7)
!13275 = !DILocation(line: 2407, column: 14, scope: !13274)
!13276 = !DILocation(line: 2407, column: 30, scope: !13274)
!13277 = !DILocation(line: 2407, column: 36, scope: !13274)
!13278 = !DILocation(line: 2408, column: 7, scope: !13274)
!13279 = !DILocation(line: 2408, column: 11, scope: !13274)
!13280 = !DILocation(line: 2407, column: 7, scope: !13268)
!13281 = !DILocalVariable(name: "i", scope: !13282, file: !3, line: 2410, type: !6)
!13282 = distinct !DILexicalBlock(scope: !13274, file: !3, line: 2409, column: 5)
!13283 = !DILocation(line: 2410, column: 20, scope: !13282)
!13284 = !DILocalVariable(name: "queue", scope: !13282, file: !3, line: 2411, type: !3210)
!13285 = !DILocation(line: 2411, column: 27, scope: !13282)
!13286 = !DILocalVariable(name: "queuepos", scope: !13282, file: !3, line: 2412, type: !1730)
!13287 = !DILocation(line: 2412, column: 11, scope: !13282)
!13288 = !DILocalVariable(name: "to", scope: !13282, file: !3, line: 2413, type: !6)
!13289 = !DILocation(line: 2413, column: 20, scope: !13282)
!13290 = !DILocation(line: 2413, column: 31, scope: !13282)
!13291 = !DILocation(line: 2413, column: 38, scope: !13282)
!13292 = !DILocation(line: 2413, column: 54, scope: !13282)
!13293 = !DILocation(line: 2413, column: 25, scope: !13282)
!13294 = !DILocalVariable(name: "bi", scope: !13282, file: !3, line: 2414, type: !3687)
!13295 = !DILocation(line: 2414, column: 23, scope: !13282)
!13296 = !DILocation(line: 2420, column: 7, scope: !13297)
!13297 = distinct !DILexicalBlock(scope: !13282, file: !3, line: 2420, column: 7)
!13298 = !DILocation(line: 2420, column: 7, scope: !13299)
!13299 = distinct !DILexicalBlock(scope: !13297, file: !3, line: 2420, column: 7)
!13300 = !DILocation(line: 2422, column: 14, scope: !13301)
!13301 = distinct !DILexicalBlock(scope: !13302, file: !3, line: 2422, column: 8)
!13302 = distinct !DILexicalBlock(scope: !13299, file: !3, line: 2421, column: 2)
!13303 = !DILocation(line: 2422, column: 8, scope: !13301)
!13304 = !DILocation(line: 2422, column: 20, scope: !13301)
!13305 = !DILocation(line: 2422, column: 17, scope: !13301)
!13306 = !DILocation(line: 2422, column: 22, scope: !13301)
!13307 = !DILocation(line: 2422, column: 25, scope: !13301)
!13308 = !DILocation(line: 2422, column: 30, scope: !13301)
!13309 = !DILocation(line: 2422, column: 27, scope: !13301)
!13310 = !DILocation(line: 2422, column: 8, scope: !13302)
!13311 = !DILocation(line: 2424, column: 19, scope: !13312)
!13312 = distinct !DILexicalBlock(scope: !13313, file: !3, line: 2424, column: 12)
!13313 = distinct !DILexicalBlock(scope: !13301, file: !3, line: 2423, column: 6)
!13314 = !DILocation(line: 2424, column: 23, scope: !13312)
!13315 = !DILocation(line: 2424, column: 12, scope: !13312)
!13316 = !DILocation(line: 2424, column: 12, scope: !13313)
!13317 = !DILocation(line: 2425, column: 3, scope: !13312)
!13318 = !DILocation(line: 2426, column: 6, scope: !13313)
!13319 = !DILocation(line: 2427, column: 2, scope: !13302)
!13320 = distinct !{!13320, !13296, !13321}
!13321 = !DILocation(line: 2427, column: 2, scope: !13297)
!13322 = !DILocation(line: 2429, column: 21, scope: !13323)
!13323 = distinct !DILexicalBlock(scope: !13282, file: !3, line: 2429, column: 7)
!13324 = !DILocation(line: 2429, column: 12, scope: !13323)
!13325 = !DILocation(line: 2430, column: 5, scope: !13326)
!13326 = distinct !DILexicalBlock(scope: !13323, file: !3, line: 2429, column: 7)
!13327 = !DILocation(line: 2429, column: 7, scope: !13323)
!13328 = !DILocation(line: 2433, column: 17, scope: !13329)
!13329 = distinct !DILexicalBlock(scope: !13326, file: !3, line: 2432, column: 2)
!13330 = !DILocation(line: 2433, column: 24, scope: !13329)
!13331 = !DILocation(line: 2433, column: 28, scope: !13329)
!13332 = !DILocation(line: 2433, column: 4, scope: !13329)
!13333 = !DILocation(line: 2434, column: 2, scope: !13329)
!13334 = !DILocation(line: 2431, column: 13, scope: !13326)
!13335 = !DILocation(line: 2429, column: 7, scope: !13326)
!13336 = distinct !{!13336, !13327, !13337}
!13337 = !DILocation(line: 2434, column: 2, scope: !13323)
!13338 = !DILocation(line: 2435, column: 7, scope: !13282)
!13339 = !DILocation(line: 2436, column: 7, scope: !13282)
!13340 = !DILocation(line: 2438, column: 3, scope: !13268)
!13341 = !DILocation(line: 2439, column: 1, scope: !13268)
!13342 = distinct !DISubprogram(name: "do_complex_constraint", scope: !3, file: !3, line: 1723, type: !13343, scopeLine: 1724, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13343 = !DISubroutineType(types: !13344)
!13344 = !{null, !3314, !1715, !2649}
!13345 = !DILocalVariable(name: "graph", arg: 1, scope: !13342, file: !3, line: 1723, type: !3314)
!13346 = !DILocation(line: 1723, column: 43, scope: !13342)
!13347 = !DILocalVariable(name: "c", arg: 2, scope: !13342, file: !3, line: 1723, type: !1715)
!13348 = !DILocation(line: 1723, column: 63, scope: !13342)
!13349 = !DILocalVariable(name: "delta", arg: 3, scope: !13342, file: !3, line: 1723, type: !2649)
!13350 = !DILocation(line: 1723, column: 73, scope: !13342)
!13351 = !DILocation(line: 1725, column: 7, scope: !13352)
!13352 = distinct !DILexicalBlock(scope: !13342, file: !3, line: 1725, column: 7)
!13353 = !DILocation(line: 1725, column: 10, scope: !13352)
!13354 = !DILocation(line: 1725, column: 14, scope: !13352)
!13355 = !DILocation(line: 1725, column: 19, scope: !13352)
!13356 = !DILocation(line: 1725, column: 7, scope: !13342)
!13357 = !DILocation(line: 1727, column: 11, scope: !13358)
!13358 = distinct !DILexicalBlock(scope: !13359, file: !3, line: 1727, column: 11)
!13359 = distinct !DILexicalBlock(scope: !13352, file: !3, line: 1726, column: 5)
!13360 = !DILocation(line: 1727, column: 14, scope: !13358)
!13361 = !DILocation(line: 1727, column: 18, scope: !13358)
!13362 = !DILocation(line: 1727, column: 23, scope: !13358)
!13363 = !DILocation(line: 1727, column: 11, scope: !13359)
!13364 = !DILocation(line: 1729, column: 4, scope: !13365)
!13365 = distinct !DILexicalBlock(scope: !13358, file: !3, line: 1728, column: 2)
!13366 = !DILocation(line: 1730, column: 2, scope: !13365)
!13367 = !DILocation(line: 1734, column: 22, scope: !13368)
!13368 = distinct !DILexicalBlock(scope: !13358, file: !3, line: 1732, column: 2)
!13369 = !DILocation(line: 1734, column: 25, scope: !13368)
!13370 = !DILocation(line: 1734, column: 4, scope: !13368)
!13371 = !DILocation(line: 1736, column: 5, scope: !13359)
!13372 = !DILocation(line: 1737, column: 12, scope: !13373)
!13373 = distinct !DILexicalBlock(scope: !13352, file: !3, line: 1737, column: 12)
!13374 = !DILocation(line: 1737, column: 15, scope: !13373)
!13375 = !DILocation(line: 1737, column: 19, scope: !13373)
!13376 = !DILocation(line: 1737, column: 24, scope: !13373)
!13377 = !DILocation(line: 1737, column: 12, scope: !13352)
!13378 = !DILocation(line: 1740, column: 26, scope: !13379)
!13379 = distinct !DILexicalBlock(scope: !13380, file: !3, line: 1740, column: 11)
!13380 = distinct !DILexicalBlock(scope: !13373, file: !3, line: 1738, column: 5)
!13381 = !DILocation(line: 1740, column: 29, scope: !13379)
!13382 = !DILocation(line: 1740, column: 33, scope: !13379)
!13383 = !DILocation(line: 1740, column: 13, scope: !13379)
!13384 = !DILocation(line: 1740, column: 39, scope: !13379)
!13385 = !DILocation(line: 1740, column: 12, scope: !13379)
!13386 = !DILocation(line: 1740, column: 11, scope: !13380)
!13387 = !DILocation(line: 1741, column: 20, scope: !13379)
!13388 = !DILocation(line: 1741, column: 27, scope: !13379)
!13389 = !DILocation(line: 1741, column: 30, scope: !13379)
!13390 = !DILocation(line: 1741, column: 2, scope: !13379)
!13391 = !DILocation(line: 1742, column: 5, scope: !13380)
!13392 = !DILocalVariable(name: "tmp", scope: !13393, file: !3, line: 1745, type: !2649)
!13393 = distinct !DILexicalBlock(scope: !13373, file: !3, line: 1744, column: 5)
!13394 = !DILocation(line: 1745, column: 14, scope: !13393)
!13395 = !DILocalVariable(name: "solution", scope: !13393, file: !3, line: 1746, type: !2649)
!13396 = !DILocation(line: 1746, column: 14, scope: !13393)
!13397 = !DILocalVariable(name: "flag", scope: !13393, file: !3, line: 1747, type: !1894)
!13398 = !DILocation(line: 1747, column: 12, scope: !13393)
!13399 = !DILocation(line: 1749, column: 7, scope: !13393)
!13400 = !DILocation(line: 1750, column: 31, scope: !13393)
!13401 = !DILocation(line: 1750, column: 34, scope: !13393)
!13402 = !DILocation(line: 1750, column: 38, scope: !13393)
!13403 = !DILocation(line: 1750, column: 18, scope: !13393)
!13404 = !DILocation(line: 1750, column: 44, scope: !13393)
!13405 = !DILocation(line: 1750, column: 16, scope: !13393)
!13406 = !DILocation(line: 1751, column: 26, scope: !13393)
!13407 = !DILocation(line: 1751, column: 29, scope: !13393)
!13408 = !DILocation(line: 1751, column: 33, scope: !13393)
!13409 = !DILocation(line: 1751, column: 13, scope: !13393)
!13410 = !DILocation(line: 1751, column: 39, scope: !13393)
!13411 = !DILocation(line: 1751, column: 11, scope: !13393)
!13412 = !DILocation(line: 1753, column: 40, scope: !13393)
!13413 = !DILocation(line: 1753, column: 45, scope: !13393)
!13414 = !DILocation(line: 1753, column: 55, scope: !13393)
!13415 = !DILocation(line: 1753, column: 58, scope: !13393)
!13416 = !DILocation(line: 1753, column: 62, scope: !13393)
!13417 = !DILocation(line: 1753, column: 14, scope: !13393)
!13418 = !DILocation(line: 1753, column: 12, scope: !13393)
!13419 = !DILocation(line: 1755, column: 11, scope: !13420)
!13420 = distinct !DILexicalBlock(scope: !13393, file: !3, line: 1755, column: 11)
!13421 = !DILocation(line: 1755, column: 11, scope: !13393)
!13422 = !DILocation(line: 1757, column: 41, scope: !13423)
!13423 = distinct !DILexicalBlock(scope: !13420, file: !3, line: 1756, column: 2)
!13424 = !DILocation(line: 1757, column: 17, scope: !13423)
!13425 = !DILocation(line: 1757, column: 20, scope: !13423)
!13426 = !DILocation(line: 1757, column: 24, scope: !13423)
!13427 = !DILocation(line: 1757, column: 4, scope: !13423)
!13428 = !DILocation(line: 1757, column: 30, scope: !13423)
!13429 = !DILocation(line: 1757, column: 39, scope: !13423)
!13430 = !DILocation(line: 1758, column: 9, scope: !13431)
!13431 = distinct !DILexicalBlock(scope: !13423, file: !3, line: 1758, column: 8)
!13432 = !DILocation(line: 1758, column: 8, scope: !13423)
!13433 = !DILocation(line: 1760, column: 17, scope: !13434)
!13434 = distinct !DILexicalBlock(scope: !13431, file: !3, line: 1759, column: 6)
!13435 = !DILocation(line: 1760, column: 26, scope: !13434)
!13436 = !DILocation(line: 1760, column: 29, scope: !13434)
!13437 = !DILocation(line: 1760, column: 33, scope: !13434)
!13438 = !DILocation(line: 1760, column: 8, scope: !13434)
!13439 = !DILocation(line: 1761, column: 21, scope: !13434)
!13440 = !DILocation(line: 1762, column: 6, scope: !13434)
!13441 = !DILocation(line: 1763, column: 2, scope: !13423)
!13442 = !DILocation(line: 1765, column: 1, scope: !13342)
!13443 = distinct !DISubprogram(name: "set_union_with_increment", scope: !3, file: !3, line: 923, type: !13444, scopeLine: 924, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13444 = !DISubroutineType(types: !13445)
!13445 = !{!1894, !2649, !2649, !1714}
!13446 = !DILocalVariable(name: "to", arg: 1, scope: !13443, file: !3, line: 923, type: !2649)
!13447 = !DILocation(line: 923, column: 35, scope: !13443)
!13448 = !DILocalVariable(name: "from", arg: 2, scope: !13443, file: !3, line: 923, type: !2649)
!13449 = !DILocation(line: 923, column: 46, scope: !13443)
!13450 = !DILocalVariable(name: "inc", arg: 3, scope: !13443, file: !3, line: 923, type: !1714)
!13451 = !DILocation(line: 923, column: 66, scope: !13443)
!13452 = !DILocation(line: 925, column: 7, scope: !13453)
!13453 = distinct !DILexicalBlock(scope: !13443, file: !3, line: 925, column: 7)
!13454 = !DILocation(line: 925, column: 11, scope: !13453)
!13455 = !DILocation(line: 925, column: 7, scope: !13443)
!13456 = !DILocation(line: 926, column: 29, scope: !13453)
!13457 = !DILocation(line: 926, column: 33, scope: !13453)
!13458 = !DILocation(line: 926, column: 12, scope: !13453)
!13459 = !DILocation(line: 926, column: 5, scope: !13453)
!13460 = !DILocalVariable(name: "tmp", scope: !13461, file: !3, line: 929, type: !2649)
!13461 = distinct !DILexicalBlock(scope: !13453, file: !3, line: 928, column: 5)
!13462 = !DILocation(line: 929, column: 14, scope: !13461)
!13463 = !DILocalVariable(name: "res", scope: !13461, file: !3, line: 930, type: !1894)
!13464 = !DILocation(line: 930, column: 12, scope: !13461)
!13465 = !DILocation(line: 932, column: 13, scope: !13461)
!13466 = !DILocation(line: 932, column: 11, scope: !13461)
!13467 = !DILocation(line: 933, column: 20, scope: !13461)
!13468 = !DILocation(line: 933, column: 25, scope: !13461)
!13469 = !DILocation(line: 933, column: 7, scope: !13461)
!13470 = !DILocation(line: 934, column: 25, scope: !13461)
!13471 = !DILocation(line: 934, column: 30, scope: !13461)
!13472 = !DILocation(line: 934, column: 7, scope: !13461)
!13473 = !DILocation(line: 935, column: 30, scope: !13461)
!13474 = !DILocation(line: 935, column: 34, scope: !13461)
!13475 = !DILocation(line: 935, column: 13, scope: !13461)
!13476 = !DILocation(line: 935, column: 11, scope: !13461)
!13477 = !DILocation(line: 936, column: 7, scope: !13461)
!13478 = !DILocation(line: 937, column: 14, scope: !13461)
!13479 = !DILocation(line: 937, column: 7, scope: !13461)
!13480 = !DILocation(line: 939, column: 1, scope: !13443)
!13481 = distinct !DISubprogram(name: "free_topo_info", scope: !3, file: !3, line: 1491, type: !13482, scopeLine: 1492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13482 = !DISubroutineType(types: !13483)
!13483 = !{null, !3233}
!13484 = !DILocalVariable(name: "ti", arg: 1, scope: !13481, file: !3, line: 1491, type: !3233)
!13485 = !DILocation(line: 1491, column: 35, scope: !13481)
!13486 = !DILocation(line: 1493, column: 3, scope: !13481)
!13487 = !DILocation(line: 1494, column: 3, scope: !13481)
!13488 = !DILocation(line: 1495, column: 9, scope: !13481)
!13489 = !DILocation(line: 1495, column: 3, scope: !13481)
!13490 = !DILocation(line: 1496, column: 1, scope: !13481)
!13491 = distinct !DISubprogram(name: "topo_visit", scope: !3, file: !3, line: 1502, type: !13492, scopeLine: 1504, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13492 = !DISubroutineType(types: !13493)
!13493 = !{null, !3314, !3233, !6}
!13494 = !DILocalVariable(name: "graph", arg: 1, scope: !13491, file: !3, line: 1502, type: !3314)
!13495 = !DILocation(line: 1502, column: 32, scope: !13491)
!13496 = !DILocalVariable(name: "ti", arg: 2, scope: !13491, file: !3, line: 1502, type: !3233)
!13497 = !DILocation(line: 1502, column: 57, scope: !13491)
!13498 = !DILocalVariable(name: "n", arg: 3, scope: !13491, file: !3, line: 1503, type: !6)
!13499 = !DILocation(line: 1503, column: 19, scope: !13491)
!13500 = !DILocalVariable(name: "bi", scope: !13491, file: !3, line: 1505, type: !3687)
!13501 = !DILocation(line: 1505, column: 19, scope: !13491)
!13502 = !DILocalVariable(name: "j", scope: !13491, file: !3, line: 1506, type: !6)
!13503 = !DILocation(line: 1506, column: 16, scope: !13491)
!13504 = !DILocation(line: 1508, column: 12, scope: !13491)
!13505 = !DILocation(line: 1508, column: 16, scope: !13491)
!13506 = !DILocation(line: 1508, column: 25, scope: !13491)
!13507 = !DILocation(line: 1508, column: 3, scope: !13491)
!13508 = !DILocation(line: 1510, column: 7, scope: !13509)
!13509 = distinct !DILexicalBlock(scope: !13491, file: !3, line: 1510, column: 7)
!13510 = !DILocation(line: 1510, column: 14, scope: !13509)
!13511 = !DILocation(line: 1510, column: 20, scope: !13509)
!13512 = !DILocation(line: 1510, column: 7, scope: !13491)
!13513 = !DILocation(line: 1511, column: 5, scope: !13514)
!13514 = distinct !DILexicalBlock(scope: !13509, file: !3, line: 1511, column: 5)
!13515 = !DILocation(line: 1511, column: 5, scope: !13516)
!13516 = distinct !DILexicalBlock(scope: !13514, file: !3, line: 1511, column: 5)
!13517 = !DILocation(line: 1513, column: 7, scope: !13518)
!13518 = distinct !DILexicalBlock(scope: !13519, file: !3, line: 1513, column: 6)
!13519 = distinct !DILexicalBlock(scope: !13516, file: !3, line: 1512, column: 7)
!13520 = !DILocation(line: 1513, column: 6, scope: !13519)
!13521 = !DILocation(line: 1514, column: 16, scope: !13518)
!13522 = !DILocation(line: 1514, column: 23, scope: !13518)
!13523 = !DILocation(line: 1514, column: 27, scope: !13518)
!13524 = !DILocation(line: 1514, column: 4, scope: !13518)
!13525 = !DILocation(line: 1515, column: 7, scope: !13519)
!13526 = distinct !{!13526, !13513, !13527}
!13527 = !DILocation(line: 1515, column: 7, scope: !13514)
!13528 = !DILocation(line: 1517, column: 3, scope: !13491)
!13529 = !DILocation(line: 1518, column: 1, scope: !13491)
!13530 = distinct !DISubprogram(name: "VEC_unsigned_base_iterate", scope: !3212, file: !3212, line: 34, type: !13531, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13531 = !DISubroutineType(types: !13532)
!13532 = !{!1730, !12281, !6, !3178}
!13533 = !DILocalVariable(name: "vec_", arg: 1, scope: !13530, file: !3212, line: 34, type: !12281)
!13534 = !DILocation(line: 34, column: 1, scope: !13530)
!13535 = !DILocalVariable(name: "ix_", arg: 2, scope: !13530, file: !3212, line: 34, type: !6)
!13536 = !DILocalVariable(name: "ptr", arg: 3, scope: !13530, file: !3212, line: 34, type: !3178)
!13537 = !DILocation(line: 34, column: 1, scope: !13538)
!13538 = distinct !DILexicalBlock(scope: !13530, file: !3212, line: 34, column: 1)
!13539 = !DILocation(line: 34, column: 1, scope: !13540)
!13540 = distinct !DILexicalBlock(scope: !13538, file: !3212, line: 34, column: 1)
!13541 = !DILocation(line: 34, column: 1, scope: !13542)
!13542 = distinct !DILexicalBlock(scope: !13538, file: !3212, line: 34, column: 1)
!13543 = distinct !DISubprogram(name: "do_ds_constraint", scope: !3, file: !3, line: 1615, type: !13544, scopeLine: 1616, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13544 = !DISubroutineType(types: !13545)
!13545 = !{null, !1715, !2649}
!13546 = !DILocalVariable(name: "c", arg: 1, scope: !13543, file: !3, line: 1615, type: !1715)
!13547 = !DILocation(line: 1615, column: 32, scope: !13543)
!13548 = !DILocalVariable(name: "delta", arg: 2, scope: !13543, file: !3, line: 1615, type: !2649)
!13549 = !DILocation(line: 1615, column: 42, scope: !13543)
!13550 = !DILocalVariable(name: "rhs", scope: !13543, file: !3, line: 1617, type: !6)
!13551 = !DILocation(line: 1617, column: 16, scope: !13543)
!13552 = !DILocation(line: 1617, column: 22, scope: !13543)
!13553 = !DILocation(line: 1617, column: 25, scope: !13543)
!13554 = !DILocation(line: 1617, column: 29, scope: !13543)
!13555 = !DILocalVariable(name: "sol", scope: !13543, file: !3, line: 1618, type: !2649)
!13556 = !DILocation(line: 1618, column: 10, scope: !13543)
!13557 = !DILocation(line: 1618, column: 29, scope: !13543)
!13558 = !DILocation(line: 1618, column: 16, scope: !13543)
!13559 = !DILocation(line: 1618, column: 35, scope: !13543)
!13560 = !DILocalVariable(name: "j", scope: !13543, file: !3, line: 1619, type: !6)
!13561 = !DILocation(line: 1619, column: 16, scope: !13543)
!13562 = !DILocalVariable(name: "bi", scope: !13543, file: !3, line: 1620, type: !3687)
!13563 = !DILocation(line: 1620, column: 19, scope: !13543)
!13564 = !DILocalVariable(name: "loff", scope: !13543, file: !3, line: 1621, type: !1714)
!13565 = !DILocation(line: 1621, column: 17, scope: !13543)
!13566 = !DILocation(line: 1621, column: 24, scope: !13543)
!13567 = !DILocation(line: 1621, column: 27, scope: !13543)
!13568 = !DILocation(line: 1621, column: 31, scope: !13543)
!13569 = !DILocation(line: 1624, column: 3, scope: !13543)
!13570 = !DILocation(line: 1628, column: 21, scope: !13571)
!13571 = distinct !DILexicalBlock(scope: !13543, file: !3, line: 1628, column: 7)
!13572 = !DILocation(line: 1628, column: 7, scope: !13571)
!13573 = !DILocation(line: 1628, column: 7, scope: !13543)
!13574 = !DILocation(line: 1629, column: 24, scope: !13571)
!13575 = !DILocation(line: 1629, column: 11, scope: !13571)
!13576 = !DILocation(line: 1629, column: 45, scope: !13571)
!13577 = !DILocation(line: 1629, column: 9, scope: !13571)
!13578 = !DILocation(line: 1629, column: 5, scope: !13571)
!13579 = !DILocation(line: 1634, column: 21, scope: !13580)
!13580 = distinct !DILexicalBlock(scope: !13543, file: !3, line: 1634, column: 7)
!13581 = !DILocation(line: 1634, column: 7, scope: !13580)
!13582 = !DILocation(line: 1634, column: 7, scope: !13543)
!13583 = !DILocalVariable(name: "t", scope: !13584, file: !3, line: 1636, type: !6)
!13584 = distinct !DILexicalBlock(scope: !13580, file: !3, line: 1635, column: 5)
!13585 = !DILocation(line: 1636, column: 16, scope: !13584)
!13586 = !DILocation(line: 1636, column: 20, scope: !13584)
!13587 = !DILocation(line: 1637, column: 27, scope: !13588)
!13588 = distinct !DILexicalBlock(scope: !13584, file: !3, line: 1637, column: 11)
!13589 = !DILocation(line: 1637, column: 34, scope: !13588)
!13590 = !DILocation(line: 1637, column: 37, scope: !13588)
!13591 = !DILocation(line: 1637, column: 11, scope: !13588)
!13592 = !DILocation(line: 1637, column: 11, scope: !13584)
!13593 = !DILocation(line: 1639, column: 38, scope: !13594)
!13594 = distinct !DILexicalBlock(scope: !13595, file: !3, line: 1639, column: 8)
!13595 = distinct !DILexicalBlock(scope: !13588, file: !3, line: 1638, column: 2)
!13596 = !DILocation(line: 1639, column: 25, scope: !13594)
!13597 = !DILocation(line: 1639, column: 42, scope: !13594)
!13598 = !DILocation(line: 1639, column: 52, scope: !13594)
!13599 = !DILocation(line: 1639, column: 8, scope: !13594)
!13600 = !DILocation(line: 1639, column: 8, scope: !13595)
!13601 = !DILocation(line: 1641, column: 13, scope: !13602)
!13602 = distinct !DILexicalBlock(scope: !13603, file: !3, line: 1641, column: 12)
!13603 = distinct !DILexicalBlock(scope: !13594, file: !3, line: 1640, column: 6)
!13604 = !DILocation(line: 1641, column: 12, scope: !13603)
!13605 = !DILocation(line: 1643, column: 14, scope: !13606)
!13606 = distinct !DILexicalBlock(scope: !13602, file: !3, line: 1642, column: 3)
!13607 = !DILocation(line: 1643, column: 23, scope: !13606)
!13608 = !DILocation(line: 1643, column: 5, scope: !13606)
!13609 = !DILocation(line: 1644, column: 18, scope: !13606)
!13610 = !DILocation(line: 1645, column: 3, scope: !13606)
!13611 = !DILocation(line: 1646, column: 6, scope: !13603)
!13612 = !DILocation(line: 1647, column: 2, scope: !13595)
!13613 = !DILocation(line: 1648, column: 7, scope: !13584)
!13614 = !DILocation(line: 1654, column: 7, scope: !13615)
!13615 = distinct !DILexicalBlock(scope: !13543, file: !3, line: 1654, column: 7)
!13616 = !DILocation(line: 1654, column: 12, scope: !13615)
!13617 = !DILocation(line: 1654, column: 7, scope: !13543)
!13618 = !DILocation(line: 1656, column: 28, scope: !13619)
!13619 = distinct !DILexicalBlock(scope: !13615, file: !3, line: 1655, column: 5)
!13620 = !DILocation(line: 1656, column: 35, scope: !13619)
!13621 = !DILocation(line: 1656, column: 7, scope: !13619)
!13622 = !DILocation(line: 1657, column: 12, scope: !13619)
!13623 = !DILocation(line: 1658, column: 5, scope: !13619)
!13624 = !DILocation(line: 1662, column: 3, scope: !13625)
!13625 = distinct !DILexicalBlock(scope: !13543, file: !3, line: 1662, column: 3)
!13626 = !DILocation(line: 1662, column: 3, scope: !13627)
!13627 = distinct !DILexicalBlock(scope: !13625, file: !3, line: 1662, column: 3)
!13628 = !DILocalVariable(name: "v", scope: !13629, file: !3, line: 1664, type: !1758)
!13629 = distinct !DILexicalBlock(scope: !13627, file: !3, line: 1663, column: 5)
!13630 = !DILocation(line: 1664, column: 17, scope: !13629)
!13631 = !DILocation(line: 1664, column: 34, scope: !13629)
!13632 = !DILocation(line: 1664, column: 21, scope: !13629)
!13633 = !DILocalVariable(name: "t", scope: !13629, file: !3, line: 1665, type: !6)
!13634 = !DILocation(line: 1665, column: 20, scope: !13629)
!13635 = !DILocalVariable(name: "fieldoffset", scope: !13629, file: !3, line: 1666, type: !1714)
!13636 = !DILocation(line: 1666, column: 21, scope: !13629)
!13637 = !DILocation(line: 1666, column: 35, scope: !13629)
!13638 = !DILocation(line: 1666, column: 38, scope: !13629)
!13639 = !DILocation(line: 1666, column: 47, scope: !13629)
!13640 = !DILocation(line: 1666, column: 45, scope: !13629)
!13641 = !DILocation(line: 1669, column: 11, scope: !13642)
!13642 = distinct !DILexicalBlock(scope: !13629, file: !3, line: 1669, column: 11)
!13643 = !DILocation(line: 1669, column: 14, scope: !13642)
!13644 = !DILocation(line: 1669, column: 11, scope: !13629)
!13645 = !DILocation(line: 1671, column: 8, scope: !13646)
!13646 = distinct !DILexicalBlock(scope: !13642, file: !3, line: 1670, column: 2)
!13647 = !DILocation(line: 1671, column: 6, scope: !13646)
!13648 = !DILocation(line: 1672, column: 24, scope: !13649)
!13649 = distinct !DILexicalBlock(scope: !13646, file: !3, line: 1672, column: 8)
!13650 = !DILocation(line: 1672, column: 31, scope: !13649)
!13651 = !DILocation(line: 1672, column: 34, scope: !13649)
!13652 = !DILocation(line: 1672, column: 8, scope: !13649)
!13653 = !DILocation(line: 1673, column: 8, scope: !13649)
!13654 = !DILocation(line: 1673, column: 41, scope: !13649)
!13655 = !DILocation(line: 1673, column: 28, scope: !13649)
!13656 = !DILocation(line: 1673, column: 45, scope: !13649)
!13657 = !DILocation(line: 1673, column: 55, scope: !13649)
!13658 = !DILocation(line: 1673, column: 11, scope: !13649)
!13659 = !DILocation(line: 1674, column: 8, scope: !13649)
!13660 = !DILocation(line: 1674, column: 12, scope: !13649)
!13661 = !DILocation(line: 1672, column: 8, scope: !13646)
!13662 = !DILocation(line: 1676, column: 17, scope: !13663)
!13663 = distinct !DILexicalBlock(scope: !13649, file: !3, line: 1675, column: 6)
!13664 = !DILocation(line: 1676, column: 26, scope: !13663)
!13665 = !DILocation(line: 1676, column: 8, scope: !13663)
!13666 = !DILocation(line: 1677, column: 21, scope: !13663)
!13667 = !DILocation(line: 1678, column: 6, scope: !13663)
!13668 = !DILocation(line: 1679, column: 2, scope: !13646)
!13669 = !DILocation(line: 1681, column: 11, scope: !13670)
!13670 = distinct !DILexicalBlock(scope: !13629, file: !3, line: 1681, column: 11)
!13671 = !DILocation(line: 1681, column: 14, scope: !13670)
!13672 = !DILocation(line: 1681, column: 11, scope: !13629)
!13673 = !DILocation(line: 1682, column: 2, scope: !13670)
!13674 = !DILocation(line: 1684, column: 11, scope: !13675)
!13675 = distinct !DILexicalBlock(scope: !13629, file: !3, line: 1684, column: 11)
!13676 = !DILocation(line: 1684, column: 14, scope: !13675)
!13677 = !DILocation(line: 1684, column: 11, scope: !13629)
!13678 = !DILocation(line: 1685, column: 16, scope: !13675)
!13679 = !DILocation(line: 1685, column: 19, scope: !13675)
!13680 = !DILocation(line: 1685, column: 14, scope: !13675)
!13681 = !DILocation(line: 1685, column: 2, scope: !13675)
!13682 = !DILocation(line: 1686, column: 16, scope: !13683)
!13683 = distinct !DILexicalBlock(scope: !13675, file: !3, line: 1686, column: 16)
!13684 = !DILocation(line: 1686, column: 21, scope: !13683)
!13685 = !DILocation(line: 1686, column: 16, scope: !13675)
!13686 = !DILocation(line: 1687, column: 27, scope: !13683)
!13687 = !DILocation(line: 1687, column: 30, scope: !13683)
!13688 = !DILocation(line: 1687, column: 6, scope: !13683)
!13689 = !DILocation(line: 1687, column: 4, scope: !13683)
!13690 = !DILocation(line: 1687, column: 2, scope: !13683)
!13691 = !DILocation(line: 1689, column: 12, scope: !13692)
!13692 = distinct !DILexicalBlock(scope: !13629, file: !3, line: 1689, column: 11)
!13693 = !DILocation(line: 1689, column: 11, scope: !13629)
!13694 = !DILocation(line: 1690, column: 2, scope: !13692)
!13695 = !DILocation(line: 1692, column: 7, scope: !13629)
!13696 = !DILocation(line: 1694, column: 8, scope: !13697)
!13697 = distinct !DILexicalBlock(scope: !13698, file: !3, line: 1694, column: 8)
!13698 = distinct !DILexicalBlock(scope: !13629, file: !3, line: 1693, column: 2)
!13699 = !DILocation(line: 1694, column: 11, scope: !13697)
!13700 = !DILocation(line: 1694, column: 8, scope: !13698)
!13701 = !DILocation(line: 1696, column: 18, scope: !13702)
!13702 = distinct !DILexicalBlock(scope: !13697, file: !3, line: 1695, column: 6)
!13703 = !DILocation(line: 1696, column: 21, scope: !13702)
!13704 = !DILocation(line: 1696, column: 12, scope: !13702)
!13705 = !DILocation(line: 1696, column: 10, scope: !13702)
!13706 = !DILocation(line: 1697, column: 28, scope: !13707)
!13707 = distinct !DILexicalBlock(scope: !13702, file: !3, line: 1697, column: 12)
!13708 = !DILocation(line: 1697, column: 35, scope: !13707)
!13709 = !DILocation(line: 1697, column: 38, scope: !13707)
!13710 = !DILocation(line: 1697, column: 12, scope: !13707)
!13711 = !DILocation(line: 1698, column: 5, scope: !13707)
!13712 = !DILocation(line: 1698, column: 38, scope: !13707)
!13713 = !DILocation(line: 1698, column: 25, scope: !13707)
!13714 = !DILocation(line: 1698, column: 42, scope: !13707)
!13715 = !DILocation(line: 1698, column: 52, scope: !13707)
!13716 = !DILocation(line: 1698, column: 8, scope: !13707)
!13717 = !DILocation(line: 1699, column: 5, scope: !13707)
!13718 = !DILocation(line: 1699, column: 9, scope: !13707)
!13719 = !DILocation(line: 1697, column: 12, scope: !13702)
!13720 = !DILocation(line: 1701, column: 14, scope: !13721)
!13721 = distinct !DILexicalBlock(scope: !13707, file: !3, line: 1700, column: 3)
!13722 = !DILocation(line: 1701, column: 23, scope: !13721)
!13723 = !DILocation(line: 1701, column: 5, scope: !13721)
!13724 = !DILocation(line: 1702, column: 18, scope: !13721)
!13725 = !DILocation(line: 1703, column: 3, scope: !13721)
!13726 = !DILocation(line: 1704, column: 6, scope: !13702)
!13727 = !DILocation(line: 1708, column: 8, scope: !13728)
!13728 = distinct !DILexicalBlock(scope: !13698, file: !3, line: 1708, column: 8)
!13729 = !DILocation(line: 1708, column: 11, scope: !13728)
!13730 = !DILocation(line: 1708, column: 45, scope: !13728)
!13731 = !DILocation(line: 1708, column: 18, scope: !13728)
!13732 = !DILocation(line: 1709, column: 8, scope: !13728)
!13733 = !DILocation(line: 1709, column: 11, scope: !13728)
!13734 = !DILocation(line: 1709, column: 14, scope: !13728)
!13735 = !DILocation(line: 1709, column: 19, scope: !13728)
!13736 = !DILocation(line: 1708, column: 8, scope: !13698)
!13737 = !DILocation(line: 1710, column: 6, scope: !13728)
!13738 = !DILocation(line: 1712, column: 8, scope: !13698)
!13739 = !DILocation(line: 1712, column: 11, scope: !13698)
!13740 = !DILocation(line: 1712, column: 6, scope: !13698)
!13741 = !DILocation(line: 1713, column: 18, scope: !13698)
!13742 = !DILocation(line: 1713, column: 21, scope: !13698)
!13743 = !DILocation(line: 1713, column: 16, scope: !13698)
!13744 = !DILocation(line: 1714, column: 2, scope: !13698)
!13745 = distinct !{!13745, !13695, !13746}
!13746 = !DILocation(line: 1715, column: 15, scope: !13629)
!13747 = !DILocation(line: 1716, column: 5, scope: !13629)
!13748 = distinct !{!13748, !13624, !13749}
!13749 = !DILocation(line: 1716, column: 5, scope: !13625)
!13750 = !DILocation(line: 1717, column: 1, scope: !13543)
!13751 = distinct !DISubprogram(name: "do_sd_constraint", scope: !3, file: !3, line: 1524, type: !13343, scopeLine: 1526, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13752 = !DILocalVariable(name: "graph", arg: 1, scope: !13751, file: !3, line: 1524, type: !3314)
!13753 = !DILocation(line: 1524, column: 38, scope: !13751)
!13754 = !DILocalVariable(name: "c", arg: 2, scope: !13751, file: !3, line: 1524, type: !1715)
!13755 = !DILocation(line: 1524, column: 58, scope: !13751)
!13756 = !DILocalVariable(name: "delta", arg: 3, scope: !13751, file: !3, line: 1525, type: !2649)
!13757 = !DILocation(line: 1525, column: 12, scope: !13751)
!13758 = !DILocalVariable(name: "lhs", scope: !13751, file: !3, line: 1527, type: !6)
!13759 = !DILocation(line: 1527, column: 16, scope: !13751)
!13760 = !DILocation(line: 1527, column: 22, scope: !13751)
!13761 = !DILocation(line: 1527, column: 25, scope: !13751)
!13762 = !DILocation(line: 1527, column: 29, scope: !13751)
!13763 = !DILocalVariable(name: "flag", scope: !13751, file: !3, line: 1528, type: !1894)
!13764 = !DILocation(line: 1528, column: 8, scope: !13751)
!13765 = !DILocalVariable(name: "sol", scope: !13751, file: !3, line: 1529, type: !2649)
!13766 = !DILocation(line: 1529, column: 10, scope: !13751)
!13767 = !DILocation(line: 1529, column: 29, scope: !13751)
!13768 = !DILocation(line: 1529, column: 16, scope: !13751)
!13769 = !DILocation(line: 1529, column: 35, scope: !13751)
!13770 = !DILocalVariable(name: "j", scope: !13751, file: !3, line: 1530, type: !6)
!13771 = !DILocation(line: 1530, column: 16, scope: !13751)
!13772 = !DILocalVariable(name: "bi", scope: !13751, file: !3, line: 1531, type: !3687)
!13773 = !DILocation(line: 1531, column: 19, scope: !13751)
!13774 = !DILocalVariable(name: "roffset", scope: !13751, file: !3, line: 1532, type: !1714)
!13775 = !DILocation(line: 1532, column: 17, scope: !13751)
!13776 = !DILocation(line: 1532, column: 27, scope: !13751)
!13777 = !DILocation(line: 1532, column: 30, scope: !13751)
!13778 = !DILocation(line: 1532, column: 34, scope: !13751)
!13779 = !DILocation(line: 1535, column: 3, scope: !13751)
!13780 = !DILocation(line: 1539, column: 21, scope: !13781)
!13781 = distinct !DILexicalBlock(scope: !13751, file: !3, line: 1539, column: 7)
!13782 = !DILocation(line: 1539, column: 7, scope: !13781)
!13783 = !DILocation(line: 1539, column: 7, scope: !13751)
!13784 = !DILocation(line: 1541, column: 31, scope: !13785)
!13785 = distinct !DILexicalBlock(scope: !13781, file: !3, line: 1540, column: 5)
!13786 = !DILocation(line: 1541, column: 15, scope: !13785)
!13787 = !DILocation(line: 1541, column: 12, scope: !13785)
!13788 = !DILocation(line: 1542, column: 7, scope: !13785)
!13789 = !DILocation(line: 1548, column: 7, scope: !13790)
!13790 = distinct !DILexicalBlock(scope: !13751, file: !3, line: 1548, column: 7)
!13791 = !DILocation(line: 1548, column: 15, scope: !13790)
!13792 = !DILocation(line: 1548, column: 7, scope: !13751)
!13793 = !DILocation(line: 1550, column: 28, scope: !13794)
!13794 = distinct !DILexicalBlock(scope: !13790, file: !3, line: 1549, column: 5)
!13795 = !DILocation(line: 1550, column: 35, scope: !13794)
!13796 = !DILocation(line: 1550, column: 7, scope: !13794)
!13797 = !DILocation(line: 1552, column: 15, scope: !13794)
!13798 = !DILocation(line: 1553, column: 5, scope: !13794)
!13799 = !DILocation(line: 1557, column: 3, scope: !13800)
!13800 = distinct !DILexicalBlock(scope: !13751, file: !3, line: 1557, column: 3)
!13801 = !DILocation(line: 1557, column: 3, scope: !13802)
!13802 = distinct !DILexicalBlock(scope: !13800, file: !3, line: 1557, column: 3)
!13803 = !DILocalVariable(name: "v", scope: !13804, file: !3, line: 1559, type: !1758)
!13804 = distinct !DILexicalBlock(scope: !13802, file: !3, line: 1558, column: 5)
!13805 = !DILocation(line: 1559, column: 17, scope: !13804)
!13806 = !DILocation(line: 1559, column: 34, scope: !13804)
!13807 = !DILocation(line: 1559, column: 21, scope: !13804)
!13808 = !DILocalVariable(name: "fieldoffset", scope: !13804, file: !3, line: 1560, type: !1714)
!13809 = !DILocation(line: 1560, column: 21, scope: !13804)
!13810 = !DILocation(line: 1560, column: 35, scope: !13804)
!13811 = !DILocation(line: 1560, column: 38, scope: !13804)
!13812 = !DILocation(line: 1560, column: 47, scope: !13804)
!13813 = !DILocation(line: 1560, column: 45, scope: !13804)
!13814 = !DILocalVariable(name: "t", scope: !13804, file: !3, line: 1561, type: !6)
!13815 = !DILocation(line: 1561, column: 20, scope: !13804)
!13816 = !DILocation(line: 1563, column: 11, scope: !13817)
!13817 = distinct !DILexicalBlock(scope: !13804, file: !3, line: 1563, column: 11)
!13818 = !DILocation(line: 1563, column: 14, scope: !13817)
!13819 = !DILocation(line: 1563, column: 11, scope: !13804)
!13820 = !DILocation(line: 1564, column: 16, scope: !13817)
!13821 = !DILocation(line: 1564, column: 19, scope: !13817)
!13822 = !DILocation(line: 1564, column: 14, scope: !13817)
!13823 = !DILocation(line: 1564, column: 2, scope: !13817)
!13824 = !DILocation(line: 1565, column: 16, scope: !13825)
!13825 = distinct !DILexicalBlock(scope: !13817, file: !3, line: 1565, column: 16)
!13826 = !DILocation(line: 1565, column: 24, scope: !13825)
!13827 = !DILocation(line: 1565, column: 16, scope: !13817)
!13828 = !DILocation(line: 1566, column: 27, scope: !13825)
!13829 = !DILocation(line: 1566, column: 30, scope: !13825)
!13830 = !DILocation(line: 1566, column: 6, scope: !13825)
!13831 = !DILocation(line: 1566, column: 4, scope: !13825)
!13832 = !DILocation(line: 1566, column: 2, scope: !13825)
!13833 = !DILocation(line: 1568, column: 12, scope: !13834)
!13834 = distinct !DILexicalBlock(scope: !13804, file: !3, line: 1568, column: 11)
!13835 = !DILocation(line: 1568, column: 11, scope: !13804)
!13836 = !DILocation(line: 1569, column: 2, scope: !13834)
!13837 = !DILocation(line: 1571, column: 7, scope: !13804)
!13838 = !DILocation(line: 1573, column: 14, scope: !13839)
!13839 = distinct !DILexicalBlock(scope: !13804, file: !3, line: 1572, column: 2)
!13840 = !DILocation(line: 1573, column: 17, scope: !13839)
!13841 = !DILocation(line: 1573, column: 8, scope: !13839)
!13842 = !DILocation(line: 1573, column: 6, scope: !13839)
!13843 = !DILocation(line: 1577, column: 21, scope: !13844)
!13844 = distinct !DILexicalBlock(scope: !13839, file: !3, line: 1577, column: 8)
!13845 = !DILocation(line: 1577, column: 8, scope: !13844)
!13846 = !DILocation(line: 1577, column: 25, scope: !13844)
!13847 = !DILocation(line: 1577, column: 8, scope: !13839)
!13848 = !DILocation(line: 1578, column: 31, scope: !13844)
!13849 = !DILocation(line: 1578, column: 49, scope: !13844)
!13850 = !DILocation(line: 1578, column: 36, scope: !13844)
!13851 = !DILocation(line: 1578, column: 53, scope: !13844)
!13852 = !DILocation(line: 1578, column: 14, scope: !13844)
!13853 = !DILocation(line: 1578, column: 11, scope: !13844)
!13854 = !DILocation(line: 1578, column: 6, scope: !13844)
!13855 = !DILocation(line: 1581, column: 13, scope: !13856)
!13856 = distinct !DILexicalBlock(scope: !13844, file: !3, line: 1581, column: 13)
!13857 = !DILocation(line: 1581, column: 16, scope: !13856)
!13858 = !DILocation(line: 1581, column: 19, scope: !13856)
!13859 = !DILocation(line: 1581, column: 13, scope: !13844)
!13860 = !DILocation(line: 1582, column: 30, scope: !13856)
!13861 = !DILocation(line: 1582, column: 14, scope: !13856)
!13862 = !DILocation(line: 1582, column: 11, scope: !13856)
!13863 = !DILocation(line: 1582, column: 6, scope: !13856)
!13864 = !DILocation(line: 1583, column: 29, scope: !13865)
!13865 = distinct !DILexicalBlock(scope: !13856, file: !3, line: 1583, column: 13)
!13866 = !DILocation(line: 1583, column: 36, scope: !13865)
!13867 = !DILocation(line: 1583, column: 41, scope: !13865)
!13868 = !DILocation(line: 1583, column: 13, scope: !13865)
!13869 = !DILocation(line: 1583, column: 13, scope: !13856)
!13870 = !DILocation(line: 1584, column: 31, scope: !13865)
!13871 = !DILocation(line: 1584, column: 49, scope: !13865)
!13872 = !DILocation(line: 1584, column: 36, scope: !13865)
!13873 = !DILocation(line: 1584, column: 53, scope: !13865)
!13874 = !DILocation(line: 1584, column: 14, scope: !13865)
!13875 = !DILocation(line: 1584, column: 11, scope: !13865)
!13876 = !DILocation(line: 1584, column: 6, scope: !13865)
!13877 = !DILocation(line: 1588, column: 8, scope: !13878)
!13878 = distinct !DILexicalBlock(scope: !13839, file: !3, line: 1588, column: 8)
!13879 = !DILocation(line: 1588, column: 11, scope: !13878)
!13880 = !DILocation(line: 1588, column: 45, scope: !13878)
!13881 = !DILocation(line: 1588, column: 18, scope: !13878)
!13882 = !DILocation(line: 1589, column: 8, scope: !13878)
!13883 = !DILocation(line: 1589, column: 11, scope: !13878)
!13884 = !DILocation(line: 1589, column: 14, scope: !13878)
!13885 = !DILocation(line: 1589, column: 19, scope: !13878)
!13886 = !DILocation(line: 1588, column: 8, scope: !13839)
!13887 = !DILocation(line: 1590, column: 6, scope: !13878)
!13888 = !DILocation(line: 1592, column: 8, scope: !13839)
!13889 = !DILocation(line: 1592, column: 11, scope: !13839)
!13890 = !DILocation(line: 1592, column: 6, scope: !13839)
!13891 = !DILocation(line: 1593, column: 18, scope: !13839)
!13892 = !DILocation(line: 1593, column: 21, scope: !13839)
!13893 = !DILocation(line: 1593, column: 16, scope: !13839)
!13894 = !DILocation(line: 1594, column: 2, scope: !13839)
!13895 = distinct !{!13895, !13837, !13896}
!13896 = !DILocation(line: 1595, column: 15, scope: !13804)
!13897 = !DILocation(line: 1596, column: 5, scope: !13804)
!13898 = distinct !{!13898, !13799, !13899}
!13899 = !DILocation(line: 1596, column: 5, scope: !13800)
!13900 = !DILabel(scope: !13751, name: "done", file: !3, line: 1598)
!13901 = !DILocation(line: 1598, column: 1, scope: !13751)
!13902 = !DILocation(line: 1600, column: 7, scope: !13903)
!13903 = distinct !DILexicalBlock(scope: !13751, file: !3, line: 1600, column: 7)
!13904 = !DILocation(line: 1600, column: 7, scope: !13751)
!13905 = !DILocation(line: 1602, column: 37, scope: !13906)
!13906 = distinct !DILexicalBlock(scope: !13903, file: !3, line: 1601, column: 5)
!13907 = !DILocation(line: 1602, column: 20, scope: !13906)
!13908 = !DILocation(line: 1602, column: 7, scope: !13906)
!13909 = !DILocation(line: 1602, column: 26, scope: !13906)
!13910 = !DILocation(line: 1602, column: 35, scope: !13906)
!13911 = !DILocation(line: 1603, column: 12, scope: !13912)
!13912 = distinct !DILexicalBlock(scope: !13906, file: !3, line: 1603, column: 11)
!13913 = !DILocation(line: 1603, column: 11, scope: !13906)
!13914 = !DILocation(line: 1605, column: 13, scope: !13915)
!13915 = distinct !DILexicalBlock(scope: !13912, file: !3, line: 1604, column: 2)
!13916 = !DILocation(line: 1605, column: 22, scope: !13915)
!13917 = !DILocation(line: 1605, column: 4, scope: !13915)
!13918 = !DILocation(line: 1606, column: 17, scope: !13915)
!13919 = !DILocation(line: 1607, column: 2, scope: !13915)
!13920 = !DILocation(line: 1608, column: 5, scope: !13906)
!13921 = !DILocation(line: 1609, column: 1, scope: !13751)
!13922 = distinct !DISubprogram(name: "solution_set_expand", scope: !3, file: !3, line: 830, type: !13923, scopeLine: 831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!13923 = !DISubroutineType(types: !13924)
!13924 = !{null, !2649, !2649}
!13925 = !DILocalVariable(name: "result", arg: 1, scope: !13922, file: !3, line: 830, type: !2649)
!13926 = !DILocation(line: 830, column: 29, scope: !13922)
!13927 = !DILocalVariable(name: "set", arg: 2, scope: !13922, file: !3, line: 830, type: !2649)
!13928 = !DILocation(line: 830, column: 44, scope: !13922)
!13929 = !DILocalVariable(name: "bi", scope: !13922, file: !3, line: 832, type: !3687)
!13930 = !DILocation(line: 832, column: 19, scope: !13922)
!13931 = !DILocalVariable(name: "vars", scope: !13922, file: !3, line: 833, type: !2649)
!13932 = !DILocation(line: 833, column: 10, scope: !13922)
!13933 = !DILocalVariable(name: "j", scope: !13922, file: !3, line: 834, type: !6)
!13934 = !DILocation(line: 834, column: 12, scope: !13922)
!13935 = !DILocation(line: 838, column: 3, scope: !13936)
!13936 = distinct !DILexicalBlock(scope: !13922, file: !3, line: 838, column: 3)
!13937 = !DILocation(line: 838, column: 3, scope: !13938)
!13938 = distinct !DILexicalBlock(scope: !13936, file: !3, line: 838, column: 3)
!13939 = !DILocalVariable(name: "v", scope: !13940, file: !3, line: 840, type: !1758)
!13940 = distinct !DILexicalBlock(scope: !13938, file: !3, line: 839, column: 5)
!13941 = !DILocation(line: 840, column: 17, scope: !13940)
!13942 = !DILocation(line: 840, column: 34, scope: !13940)
!13943 = !DILocation(line: 840, column: 21, scope: !13940)
!13944 = !DILocation(line: 841, column: 11, scope: !13945)
!13945 = distinct !DILexicalBlock(scope: !13940, file: !3, line: 841, column: 11)
!13946 = !DILocation(line: 841, column: 14, scope: !13945)
!13947 = !DILocation(line: 842, column: 4, scope: !13945)
!13948 = !DILocation(line: 842, column: 7, scope: !13945)
!13949 = !DILocation(line: 842, column: 10, scope: !13945)
!13950 = !DILocation(line: 841, column: 11, scope: !13940)
!13951 = !DILocation(line: 843, column: 2, scope: !13945)
!13952 = !DILocation(line: 844, column: 31, scope: !13940)
!13953 = !DILocation(line: 844, column: 34, scope: !13940)
!13954 = !DILocation(line: 844, column: 11, scope: !13940)
!13955 = !DILocation(line: 844, column: 9, scope: !13940)
!13956 = !DILocation(line: 845, column: 11, scope: !13957)
!13957 = distinct !DILexicalBlock(scope: !13940, file: !3, line: 845, column: 11)
!13958 = !DILocation(line: 845, column: 16, scope: !13957)
!13959 = !DILocation(line: 845, column: 11, scope: !13940)
!13960 = !DILocation(line: 846, column: 9, scope: !13957)
!13961 = !DILocation(line: 846, column: 7, scope: !13957)
!13962 = !DILocation(line: 846, column: 2, scope: !13957)
!13963 = !DILocation(line: 847, column: 23, scope: !13940)
!13964 = !DILocation(line: 847, column: 29, scope: !13940)
!13965 = !DILocation(line: 847, column: 32, scope: !13940)
!13966 = !DILocation(line: 847, column: 7, scope: !13940)
!13967 = !DILocation(line: 848, column: 5, scope: !13940)
!13968 = distinct !{!13968, !13935, !13969}
!13969 = !DILocation(line: 848, column: 5, scope: !13936)
!13970 = !DILocation(line: 852, column: 7, scope: !13971)
!13971 = distinct !DILexicalBlock(scope: !13922, file: !3, line: 852, column: 7)
!13972 = !DILocation(line: 852, column: 12, scope: !13971)
!13973 = !DILocation(line: 852, column: 7, scope: !13922)
!13974 = !DILocation(line: 854, column: 7, scope: !13975)
!13975 = distinct !DILexicalBlock(scope: !13976, file: !3, line: 854, column: 7)
!13976 = distinct !DILexicalBlock(scope: !13971, file: !3, line: 853, column: 5)
!13977 = !DILocation(line: 854, column: 7, scope: !13978)
!13978 = distinct !DILexicalBlock(scope: !13975, file: !3, line: 854, column: 7)
!13979 = !DILocalVariable(name: "v", scope: !13980, file: !3, line: 856, type: !1758)
!13980 = distinct !DILexicalBlock(scope: !13978, file: !3, line: 855, column: 2)
!13981 = !DILocation(line: 856, column: 14, scope: !13980)
!13982 = !DILocation(line: 856, column: 31, scope: !13980)
!13983 = !DILocation(line: 856, column: 18, scope: !13980)
!13984 = !DILocation(line: 857, column: 4, scope: !13980)
!13985 = !DILocation(line: 857, column: 11, scope: !13986)
!13986 = distinct !DILexicalBlock(scope: !13987, file: !3, line: 857, column: 4)
!13987 = distinct !DILexicalBlock(scope: !13980, file: !3, line: 857, column: 4)
!13988 = !DILocation(line: 857, column: 13, scope: !13986)
!13989 = !DILocation(line: 857, column: 4, scope: !13987)
!13990 = !DILocation(line: 858, column: 22, scope: !13986)
!13991 = !DILocation(line: 858, column: 30, scope: !13986)
!13992 = !DILocation(line: 858, column: 33, scope: !13986)
!13993 = !DILocation(line: 858, column: 6, scope: !13986)
!13994 = !DILocation(line: 857, column: 26, scope: !13986)
!13995 = !DILocation(line: 857, column: 29, scope: !13986)
!13996 = !DILocation(line: 857, column: 24, scope: !13986)
!13997 = !DILocation(line: 857, column: 4, scope: !13986)
!13998 = distinct !{!13998, !13989, !13999}
!13999 = !DILocation(line: 858, column: 35, scope: !13987)
!14000 = !DILocation(line: 859, column: 2, scope: !13980)
!14001 = distinct !{!14001, !13974, !14002}
!14002 = !DILocation(line: 859, column: 2, scope: !13975)
!14003 = !DILocation(line: 860, column: 7, scope: !13976)
!14004 = !DILocation(line: 861, column: 5, scope: !13976)
!14005 = !DILocation(line: 862, column: 1, scope: !13922)
!14006 = distinct !DISubprogram(name: "solution_set_add", scope: !3, file: !3, line: 868, type: !14007, scopeLine: 869, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!14007 = !DISubroutineType(types: !14008)
!14008 = !{null, !2649, !1714}
!14009 = !DILocalVariable(name: "set", arg: 1, scope: !14006, file: !3, line: 868, type: !2649)
!14010 = !DILocation(line: 868, column: 26, scope: !14006)
!14011 = !DILocalVariable(name: "offset", arg: 2, scope: !14006, file: !3, line: 868, type: !1714)
!14012 = !DILocation(line: 868, column: 45, scope: !14006)
!14013 = !DILocalVariable(name: "result", scope: !14006, file: !3, line: 870, type: !2649)
!14014 = !DILocation(line: 870, column: 10, scope: !14006)
!14015 = !DILocation(line: 870, column: 19, scope: !14006)
!14016 = !DILocalVariable(name: "i", scope: !14006, file: !3, line: 871, type: !6)
!14017 = !DILocation(line: 871, column: 16, scope: !14006)
!14018 = !DILocalVariable(name: "bi", scope: !14006, file: !3, line: 872, type: !3687)
!14019 = !DILocation(line: 872, column: 19, scope: !14006)
!14020 = !DILocation(line: 876, column: 7, scope: !14021)
!14021 = distinct !DILexicalBlock(scope: !14006, file: !3, line: 876, column: 7)
!14022 = !DILocation(line: 876, column: 14, scope: !14021)
!14023 = !DILocation(line: 876, column: 7, scope: !14006)
!14024 = !DILocation(line: 878, column: 28, scope: !14025)
!14025 = distinct !DILexicalBlock(scope: !14021, file: !3, line: 877, column: 5)
!14026 = !DILocation(line: 878, column: 33, scope: !14025)
!14027 = !DILocation(line: 878, column: 7, scope: !14025)
!14028 = !DILocation(line: 879, column: 7, scope: !14025)
!14029 = !DILocation(line: 882, column: 3, scope: !14030)
!14030 = distinct !DILexicalBlock(scope: !14006, file: !3, line: 882, column: 3)
!14031 = !DILocation(line: 882, column: 3, scope: !14032)
!14032 = distinct !DILexicalBlock(scope: !14030, file: !3, line: 882, column: 3)
!14033 = !DILocalVariable(name: "vi", scope: !14034, file: !3, line: 884, type: !1758)
!14034 = distinct !DILexicalBlock(scope: !14032, file: !3, line: 883, column: 5)
!14035 = !DILocation(line: 884, column: 17, scope: !14034)
!14036 = !DILocation(line: 884, column: 35, scope: !14034)
!14037 = !DILocation(line: 884, column: 22, scope: !14034)
!14038 = !DILocation(line: 888, column: 11, scope: !14039)
!14039 = distinct !DILexicalBlock(scope: !14034, file: !3, line: 888, column: 11)
!14040 = !DILocation(line: 888, column: 15, scope: !14039)
!14041 = !DILocation(line: 889, column: 4, scope: !14039)
!14042 = !DILocation(line: 889, column: 7, scope: !14039)
!14043 = !DILocation(line: 889, column: 11, scope: !14039)
!14044 = !DILocation(line: 890, column: 4, scope: !14039)
!14045 = !DILocation(line: 890, column: 7, scope: !14039)
!14046 = !DILocation(line: 890, column: 11, scope: !14039)
!14047 = !DILocation(line: 888, column: 11, scope: !14034)
!14048 = !DILocation(line: 891, column: 18, scope: !14039)
!14049 = !DILocation(line: 891, column: 26, scope: !14039)
!14050 = !DILocation(line: 891, column: 2, scope: !14039)
!14051 = !DILocalVariable(name: "fieldoffset", scope: !14052, file: !3, line: 894, type: !1729)
!14052 = distinct !DILexicalBlock(scope: !14039, file: !3, line: 893, column: 2)
!14053 = !DILocation(line: 894, column: 27, scope: !14052)
!14054 = !DILocation(line: 894, column: 41, scope: !14052)
!14055 = !DILocation(line: 894, column: 45, scope: !14052)
!14056 = !DILocation(line: 894, column: 54, scope: !14052)
!14057 = !DILocation(line: 894, column: 52, scope: !14052)
!14058 = !DILocation(line: 898, column: 8, scope: !14059)
!14059 = distinct !DILexicalBlock(scope: !14052, file: !3, line: 898, column: 8)
!14060 = !DILocation(line: 898, column: 15, scope: !14059)
!14061 = !DILocation(line: 899, column: 8, scope: !14059)
!14062 = !DILocation(line: 899, column: 11, scope: !14059)
!14063 = !DILocation(line: 899, column: 25, scope: !14059)
!14064 = !DILocation(line: 899, column: 29, scope: !14059)
!14065 = !DILocation(line: 899, column: 23, scope: !14059)
!14066 = !DILocation(line: 898, column: 8, scope: !14052)
!14067 = !DILocation(line: 900, column: 18, scope: !14059)
!14068 = !DILocation(line: 900, column: 6, scope: !14059)
!14069 = !DILocation(line: 902, column: 8, scope: !14070)
!14070 = distinct !DILexicalBlock(scope: !14052, file: !3, line: 902, column: 8)
!14071 = !DILocation(line: 902, column: 15, scope: !14070)
!14072 = !DILocation(line: 902, column: 8, scope: !14052)
!14073 = !DILocation(line: 903, column: 45, scope: !14070)
!14074 = !DILocation(line: 903, column: 49, scope: !14070)
!14075 = !DILocation(line: 903, column: 11, scope: !14070)
!14076 = !DILocation(line: 903, column: 9, scope: !14070)
!14077 = !DILocation(line: 903, column: 6, scope: !14070)
!14078 = !DILocation(line: 905, column: 20, scope: !14052)
!14079 = !DILocation(line: 905, column: 28, scope: !14052)
!14080 = !DILocation(line: 905, column: 32, scope: !14052)
!14081 = !DILocation(line: 905, column: 4, scope: !14052)
!14082 = !DILocation(line: 909, column: 8, scope: !14083)
!14083 = distinct !DILexicalBlock(scope: !14052, file: !3, line: 909, column: 8)
!14084 = !DILocation(line: 909, column: 12, scope: !14083)
!14085 = !DILocation(line: 909, column: 22, scope: !14083)
!14086 = !DILocation(line: 909, column: 19, scope: !14083)
!14087 = !DILocation(line: 910, column: 8, scope: !14083)
!14088 = !DILocation(line: 910, column: 11, scope: !14083)
!14089 = !DILocation(line: 910, column: 15, scope: !14083)
!14090 = !DILocation(line: 910, column: 20, scope: !14083)
!14091 = !DILocation(line: 909, column: 8, scope: !14052)
!14092 = !DILocation(line: 911, column: 22, scope: !14083)
!14093 = !DILocation(line: 911, column: 30, scope: !14083)
!14094 = !DILocation(line: 911, column: 34, scope: !14083)
!14095 = !DILocation(line: 911, column: 40, scope: !14083)
!14096 = !DILocation(line: 911, column: 6, scope: !14083)
!14097 = !DILocation(line: 913, column: 5, scope: !14034)
!14098 = distinct !{!14098, !14029, !14099}
!14099 = !DILocation(line: 913, column: 5, scope: !14030)
!14100 = !DILocation(line: 915, column: 16, scope: !14006)
!14101 = !DILocation(line: 915, column: 21, scope: !14006)
!14102 = !DILocation(line: 915, column: 3, scope: !14006)
!14103 = !DILocation(line: 916, column: 3, scope: !14006)
!14104 = !DILocation(line: 917, column: 1, scope: !14006)
!14105 = distinct !DISubprogram(name: "set_uids_in_ptset", scope: !3, file: !3, line: 4762, type: !14106, scopeLine: 4763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!14106 = !DISubroutineType(types: !14107)
!14107 = !{null, !2649, !2649, !3756}
!14108 = !DILocalVariable(name: "into", arg: 1, scope: !14105, file: !3, line: 4762, type: !2649)
!14109 = !DILocation(line: 4762, column: 27, scope: !14105)
!14110 = !DILocalVariable(name: "from", arg: 2, scope: !14105, file: !3, line: 4762, type: !2649)
!14111 = !DILocation(line: 4762, column: 40, scope: !14105)
!14112 = !DILocalVariable(name: "pt", arg: 3, scope: !14105, file: !3, line: 4762, type: !3756)
!14113 = !DILocation(line: 4762, column: 66, scope: !14105)
!14114 = !DILocalVariable(name: "i", scope: !14105, file: !3, line: 4764, type: !6)
!14115 = !DILocation(line: 4764, column: 16, scope: !14105)
!14116 = !DILocalVariable(name: "bi", scope: !14105, file: !3, line: 4765, type: !3687)
!14117 = !DILocation(line: 4765, column: 19, scope: !14105)
!14118 = !DILocation(line: 4767, column: 3, scope: !14119)
!14119 = distinct !DILexicalBlock(scope: !14105, file: !3, line: 4767, column: 3)
!14120 = !DILocation(line: 4767, column: 3, scope: !14121)
!14121 = distinct !DILexicalBlock(scope: !14119, file: !3, line: 4767, column: 3)
!14122 = !DILocalVariable(name: "vi", scope: !14123, file: !3, line: 4769, type: !1758)
!14123 = distinct !DILexicalBlock(scope: !14121, file: !3, line: 4768, column: 5)
!14124 = !DILocation(line: 4769, column: 17, scope: !14123)
!14125 = !DILocation(line: 4769, column: 35, scope: !14123)
!14126 = !DILocation(line: 4769, column: 22, scope: !14123)
!14127 = !DILocation(line: 4773, column: 11, scope: !14128)
!14128 = distinct !DILexicalBlock(scope: !14123, file: !3, line: 4773, column: 11)
!14129 = !DILocation(line: 4773, column: 15, scope: !14128)
!14130 = !DILocation(line: 4773, column: 33, scope: !14128)
!14131 = !DILocation(line: 4773, column: 37, scope: !14128)
!14132 = !DILocation(line: 4773, column: 41, scope: !14128)
!14133 = !DILocation(line: 4773, column: 11, scope: !14123)
!14134 = !DILocation(line: 4774, column: 2, scope: !14128)
!14135 = !DILocation(line: 4776, column: 11, scope: !14136)
!14136 = distinct !DILexicalBlock(scope: !14123, file: !3, line: 4776, column: 11)
!14137 = !DILocation(line: 4776, column: 32, scope: !14136)
!14138 = !DILocation(line: 4777, column: 4, scope: !14136)
!14139 = !DILocation(line: 4777, column: 7, scope: !14136)
!14140 = !DILocation(line: 4777, column: 28, scope: !14136)
!14141 = !DILocation(line: 4778, column: 4, scope: !14136)
!14142 = !DILocation(line: 4778, column: 7, scope: !14136)
!14143 = !DILocation(line: 4778, column: 28, scope: !14136)
!14144 = !DILocation(line: 4776, column: 11, scope: !14123)
!14145 = !DILocation(line: 4782, column: 20, scope: !14146)
!14146 = distinct !DILexicalBlock(scope: !14136, file: !3, line: 4779, column: 2)
!14147 = !DILocation(line: 4782, column: 26, scope: !14146)
!14148 = !DILocation(line: 4782, column: 4, scope: !14146)
!14149 = !DILocation(line: 4783, column: 8, scope: !14150)
!14150 = distinct !DILexicalBlock(scope: !14146, file: !3, line: 4783, column: 8)
!14151 = !DILocation(line: 4783, column: 12, scope: !14150)
!14152 = !DILocation(line: 4783, column: 8, scope: !14146)
!14153 = !DILocation(line: 4784, column: 6, scope: !14150)
!14154 = !DILocation(line: 4784, column: 10, scope: !14150)
!14155 = !DILocation(line: 4784, column: 31, scope: !14150)
!14156 = !DILocation(line: 4785, column: 2, scope: !14146)
!14157 = !DILocation(line: 4786, column: 5, scope: !14123)
!14158 = distinct !{!14158, !14118, !14159}
!14159 = !DILocation(line: 4786, column: 5, scope: !14119)
!14160 = !DILocation(line: 4787, column: 1, scope: !14105)
!14161 = distinct !DISubprogram(name: "shared_bitmap_lookup", scope: !3, file: !3, line: 4724, type: !14162, scopeLine: 4725, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!14162 = !DISubroutineType(types: !14163)
!14163 = !{!2649, !2649}
!14164 = !DILocalVariable(name: "pt_vars", arg: 1, scope: !14161, file: !3, line: 4724, type: !2649)
!14165 = !DILocation(line: 4724, column: 30, scope: !14161)
!14166 = !DILocalVariable(name: "slot", scope: !14161, file: !3, line: 4726, type: !2587)
!14167 = !DILocation(line: 4726, column: 10, scope: !14161)
!14168 = !DILocalVariable(name: "sbi", scope: !14161, file: !3, line: 4727, type: !3107)
!14169 = !DILocation(line: 4727, column: 29, scope: !14161)
!14170 = !DILocation(line: 4729, column: 17, scope: !14161)
!14171 = !DILocation(line: 4729, column: 7, scope: !14161)
!14172 = !DILocation(line: 4729, column: 15, scope: !14161)
!14173 = !DILocation(line: 4730, column: 31, scope: !14161)
!14174 = !DILocation(line: 4730, column: 18, scope: !14161)
!14175 = !DILocation(line: 4730, column: 7, scope: !14161)
!14176 = !DILocation(line: 4730, column: 16, scope: !14161)
!14177 = !DILocation(line: 4732, column: 36, scope: !14161)
!14178 = !DILocation(line: 4732, column: 57, scope: !14161)
!14179 = !DILocation(line: 4733, column: 12, scope: !14161)
!14180 = !DILocation(line: 4732, column: 10, scope: !14161)
!14181 = !DILocation(line: 4732, column: 8, scope: !14161)
!14182 = !DILocation(line: 4734, column: 8, scope: !14183)
!14183 = distinct !DILexicalBlock(scope: !14161, file: !3, line: 4734, column: 7)
!14184 = !DILocation(line: 4734, column: 7, scope: !14161)
!14185 = !DILocation(line: 4735, column: 5, scope: !14183)
!14186 = !DILocation(line: 4737, column: 37, scope: !14183)
!14187 = !DILocation(line: 4737, column: 36, scope: !14183)
!14188 = !DILocation(line: 4737, column: 13, scope: !14183)
!14189 = !DILocation(line: 4737, column: 44, scope: !14183)
!14190 = !DILocation(line: 4737, column: 5, scope: !14183)
!14191 = !DILocation(line: 4738, column: 1, scope: !14161)
!14192 = distinct !DISubprogram(name: "shared_bitmap_add", scope: !3, file: !3, line: 4744, type: !14193, scopeLine: 4745, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!14193 = !DISubroutineType(types: !14194)
!14194 = !{null, !2649}
!14195 = !DILocalVariable(name: "pt_vars", arg: 1, scope: !14192, file: !3, line: 4744, type: !2649)
!14196 = !DILocation(line: 4744, column: 27, scope: !14192)
!14197 = !DILocalVariable(name: "slot", scope: !14192, file: !3, line: 4746, type: !2587)
!14198 = !DILocation(line: 4746, column: 10, scope: !14192)
!14199 = !DILocalVariable(name: "sbi", scope: !14192, file: !3, line: 4747, type: !3238)
!14200 = !DILocation(line: 4747, column: 24, scope: !14192)
!14201 = !DILocation(line: 4747, column: 30, scope: !14192)
!14202 = !DILocation(line: 4749, column: 18, scope: !14192)
!14203 = !DILocation(line: 4749, column: 3, scope: !14192)
!14204 = !DILocation(line: 4749, column: 8, scope: !14192)
!14205 = !DILocation(line: 4749, column: 16, scope: !14192)
!14206 = !DILocation(line: 4750, column: 32, scope: !14192)
!14207 = !DILocation(line: 4750, column: 19, scope: !14192)
!14208 = !DILocation(line: 4750, column: 3, scope: !14192)
!14209 = !DILocation(line: 4750, column: 8, scope: !14192)
!14210 = !DILocation(line: 4750, column: 17, scope: !14192)
!14211 = !DILocation(line: 4752, column: 36, scope: !14192)
!14212 = !DILocation(line: 4752, column: 57, scope: !14192)
!14213 = !DILocation(line: 4753, column: 8, scope: !14192)
!14214 = !DILocation(line: 4753, column: 13, scope: !14192)
!14215 = !DILocation(line: 4752, column: 10, scope: !14192)
!14216 = !DILocation(line: 4752, column: 8, scope: !14192)
!14217 = !DILocation(line: 4754, column: 3, scope: !14192)
!14218 = !DILocation(line: 4755, column: 20, scope: !14192)
!14219 = !DILocation(line: 4755, column: 11, scope: !14192)
!14220 = !DILocation(line: 4755, column: 4, scope: !14192)
!14221 = !DILocation(line: 4755, column: 9, scope: !14192)
!14222 = !DILocation(line: 4756, column: 1, scope: !14192)
!14223 = distinct !DISubprogram(name: "VEC_varinfo_t_heap_free", scope: !3, file: !3, line: 275, type: !14224, scopeLine: 275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!14224 = !DISubroutineType(types: !14225)
!14225 = !{null, !6843}
!14226 = !DILocalVariable(name: "vec_", arg: 1, scope: !14223, file: !3, line: 275, type: !6843)
!14227 = !DILocation(line: 275, column: 1, scope: !14223)
!14228 = !DILocation(line: 275, column: 1, scope: !14229)
!14229 = distinct !DILexicalBlock(scope: !14223, file: !3, line: 275, column: 1)
!14230 = distinct !DISubprogram(name: "create_function_info_for", scope: !3, file: !3, line: 4323, type: !7193, scopeLine: 4324, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!14231 = !DILocalVariable(name: "decl", arg: 1, scope: !14230, file: !3, line: 4323, type: !1780)
!14232 = !DILocation(line: 4323, column: 32, scope: !14230)
!14233 = !DILocalVariable(name: "name", arg: 2, scope: !14230, file: !3, line: 4323, type: !1776)
!14234 = !DILocation(line: 4323, column: 50, scope: !14230)
!14235 = !DILocalVariable(name: "vi", scope: !14230, file: !3, line: 4325, type: !1758)
!14236 = !DILocation(line: 4325, column: 13, scope: !14230)
!14237 = !DILocalVariable(name: "arg", scope: !14230, file: !3, line: 4326, type: !1780)
!14238 = !DILocation(line: 4326, column: 8, scope: !14230)
!14239 = !DILocalVariable(name: "i", scope: !14230, file: !3, line: 4327, type: !6)
!14240 = !DILocation(line: 4327, column: 16, scope: !14230)
!14241 = !DILocalVariable(name: "is_varargs", scope: !14230, file: !3, line: 4328, type: !1894)
!14242 = !DILocation(line: 4328, column: 8, scope: !14230)
!14243 = !DILocation(line: 4332, column: 22, scope: !14230)
!14244 = !DILocation(line: 4332, column: 28, scope: !14230)
!14245 = !DILocation(line: 4332, column: 8, scope: !14230)
!14246 = !DILocation(line: 4332, column: 6, scope: !14230)
!14247 = !DILocation(line: 4333, column: 3, scope: !14230)
!14248 = !DILocation(line: 4333, column: 7, scope: !14230)
!14249 = !DILocation(line: 4333, column: 14, scope: !14230)
!14250 = !DILocation(line: 4334, column: 3, scope: !14230)
!14251 = !DILocation(line: 4334, column: 7, scope: !14230)
!14252 = !DILocation(line: 4334, column: 12, scope: !14230)
!14253 = !DILocation(line: 4335, column: 39, scope: !14230)
!14254 = !DILocation(line: 4335, column: 18, scope: !14230)
!14255 = !DILocation(line: 4335, column: 58, scope: !14230)
!14256 = !DILocation(line: 4335, column: 3, scope: !14230)
!14257 = !DILocation(line: 4335, column: 7, scope: !14230)
!14258 = !DILocation(line: 4335, column: 16, scope: !14230)
!14259 = !DILocation(line: 4336, column: 23, scope: !14230)
!14260 = !DILocation(line: 4336, column: 27, scope: !14230)
!14261 = !DILocation(line: 4336, column: 33, scope: !14230)
!14262 = !DILocation(line: 4336, column: 3, scope: !14230)
!14263 = !DILocation(line: 4338, column: 19, scope: !14230)
!14264 = !DILocation(line: 4342, column: 7, scope: !14265)
!14265 = distinct !DILexicalBlock(scope: !14230, file: !3, line: 4342, column: 7)
!14266 = !DILocation(line: 4342, column: 7, scope: !14230)
!14267 = !DILocation(line: 4344, column: 7, scope: !14268)
!14268 = distinct !DILexicalBlock(scope: !14265, file: !3, line: 4343, column: 5)
!14269 = !DILocation(line: 4344, column: 11, scope: !14268)
!14270 = !DILocation(line: 4344, column: 20, scope: !14268)
!14271 = !DILocation(line: 4345, column: 7, scope: !14268)
!14272 = !DILocation(line: 4345, column: 11, scope: !14268)
!14273 = !DILocation(line: 4345, column: 16, scope: !14268)
!14274 = !DILocation(line: 4346, column: 7, scope: !14268)
!14275 = !DILocation(line: 4346, column: 11, scope: !14268)
!14276 = !DILocation(line: 4346, column: 31, scope: !14268)
!14277 = !DILocation(line: 4347, column: 14, scope: !14268)
!14278 = !DILocation(line: 4347, column: 18, scope: !14268)
!14279 = !DILocation(line: 4347, column: 7, scope: !14268)
!14280 = !DILocation(line: 4350, column: 9, scope: !14230)
!14281 = !DILocation(line: 4350, column: 7, scope: !14230)
!14282 = !DILocation(line: 4353, column: 10, scope: !14283)
!14283 = distinct !DILexicalBlock(scope: !14230, file: !3, line: 4353, column: 3)
!14284 = !DILocation(line: 4353, column: 8, scope: !14283)
!14285 = !DILocation(line: 4353, column: 15, scope: !14286)
!14286 = distinct !DILexicalBlock(scope: !14283, file: !3, line: 4353, column: 3)
!14287 = !DILocation(line: 4353, column: 19, scope: !14286)
!14288 = !DILocation(line: 4353, column: 23, scope: !14286)
!14289 = !DILocation(line: 4353, column: 17, scope: !14286)
!14290 = !DILocation(line: 4353, column: 3, scope: !14283)
!14291 = !DILocalVariable(name: "argvi", scope: !14292, file: !3, line: 4355, type: !1758)
!14292 = distinct !DILexicalBlock(scope: !14286, file: !3, line: 4354, column: 5)
!14293 = !DILocation(line: 4355, column: 17, scope: !14292)
!14294 = !DILocalVariable(name: "newname", scope: !14292, file: !3, line: 4356, type: !1776)
!14295 = !DILocation(line: 4356, column: 19, scope: !14292)
!14296 = !DILocalVariable(name: "tempname", scope: !14292, file: !3, line: 4357, type: !2041)
!14297 = !DILocation(line: 4357, column: 13, scope: !14292)
!14298 = !DILocalVariable(name: "argdecl", scope: !14292, file: !3, line: 4358, type: !1780)
!14299 = !DILocation(line: 4358, column: 12, scope: !14292)
!14300 = !DILocation(line: 4358, column: 22, scope: !14292)
!14301 = !DILocation(line: 4360, column: 11, scope: !14302)
!14302 = distinct !DILexicalBlock(scope: !14292, file: !3, line: 4360, column: 11)
!14303 = !DILocation(line: 4360, column: 11, scope: !14292)
!14304 = !DILocation(line: 4361, column: 12, scope: !14302)
!14305 = !DILocation(line: 4361, column: 10, scope: !14302)
!14306 = !DILocation(line: 4361, column: 2, scope: !14302)
!14307 = !DILocation(line: 4363, column: 40, scope: !14292)
!14308 = !DILocation(line: 4363, column: 46, scope: !14292)
!14309 = !DILocation(line: 4363, column: 47, scope: !14292)
!14310 = !DILocation(line: 4363, column: 7, scope: !14292)
!14311 = !DILocation(line: 4364, column: 17, scope: !14292)
!14312 = !DILocation(line: 4364, column: 15, scope: !14292)
!14313 = !DILocation(line: 4365, column: 13, scope: !14292)
!14314 = !DILocation(line: 4365, column: 7, scope: !14292)
!14315 = !DILocation(line: 4367, column: 29, scope: !14292)
!14316 = !DILocation(line: 4367, column: 38, scope: !14292)
!14317 = !DILocation(line: 4367, column: 15, scope: !14292)
!14318 = !DILocation(line: 4367, column: 13, scope: !14292)
!14319 = !DILocation(line: 4368, column: 23, scope: !14292)
!14320 = !DILocation(line: 4368, column: 7, scope: !14292)
!14321 = !DILocation(line: 4368, column: 14, scope: !14292)
!14322 = !DILocation(line: 4368, column: 21, scope: !14292)
!14323 = !DILocation(line: 4369, column: 7, scope: !14292)
!14324 = !DILocation(line: 4369, column: 14, scope: !14292)
!14325 = !DILocation(line: 4369, column: 19, scope: !14292)
!14326 = !DILocation(line: 4370, column: 7, scope: !14292)
!14327 = !DILocation(line: 4370, column: 14, scope: !14292)
!14328 = !DILocation(line: 4370, column: 26, scope: !14292)
!14329 = !DILocation(line: 4371, column: 25, scope: !14292)
!14330 = !DILocation(line: 4371, column: 29, scope: !14292)
!14331 = !DILocation(line: 4371, column: 7, scope: !14292)
!14332 = !DILocation(line: 4371, column: 14, scope: !14292)
!14333 = !DILocation(line: 4371, column: 23, scope: !14292)
!14334 = !DILocation(line: 4372, column: 38, scope: !14292)
!14335 = !DILocation(line: 4372, column: 42, scope: !14292)
!14336 = !DILocation(line: 4372, column: 7, scope: !14292)
!14337 = !DILocation(line: 4373, column: 24, scope: !14292)
!14338 = !DILocation(line: 4374, column: 11, scope: !14339)
!14339 = distinct !DILexicalBlock(scope: !14292, file: !3, line: 4374, column: 11)
!14340 = !DILocation(line: 4374, column: 11, scope: !14292)
!14341 = !DILocation(line: 4376, column: 24, scope: !14342)
!14342 = distinct !DILexicalBlock(scope: !14339, file: !3, line: 4375, column: 2)
!14343 = !DILocation(line: 4376, column: 29, scope: !14342)
!14344 = !DILocation(line: 4376, column: 4, scope: !14342)
!14345 = !DILocation(line: 4377, column: 10, scope: !14342)
!14346 = !DILocation(line: 4377, column: 8, scope: !14342)
!14347 = !DILocation(line: 4378, column: 2, scope: !14342)
!14348 = !DILocation(line: 4379, column: 5, scope: !14292)
!14349 = !DILocation(line: 4353, column: 34, scope: !14286)
!14350 = !DILocation(line: 4353, column: 3, scope: !14286)
!14351 = distinct !{!14351, !14290, !14352}
!14352 = !DILocation(line: 4379, column: 5, scope: !14283)
!14353 = !DILocation(line: 4382, column: 7, scope: !14354)
!14354 = distinct !DILexicalBlock(scope: !14230, file: !3, line: 4382, column: 7)
!14355 = !DILocation(line: 4382, column: 26, scope: !14354)
!14356 = !DILocation(line: 4383, column: 7, scope: !14354)
!14357 = !DILocation(line: 4383, column: 11, scope: !14354)
!14358 = !DILocation(line: 4382, column: 7, scope: !14230)
!14359 = !DILocalVariable(name: "resultvi", scope: !14360, file: !3, line: 4385, type: !1758)
!14360 = distinct !DILexicalBlock(scope: !14354, file: !3, line: 4384, column: 5)
!14361 = !DILocation(line: 4385, column: 17, scope: !14360)
!14362 = !DILocalVariable(name: "newname", scope: !14360, file: !3, line: 4386, type: !1776)
!14363 = !DILocation(line: 4386, column: 19, scope: !14360)
!14364 = !DILocalVariable(name: "tempname", scope: !14360, file: !3, line: 4387, type: !2041)
!14365 = !DILocation(line: 4387, column: 13, scope: !14360)
!14366 = !DILocalVariable(name: "resultdecl", scope: !14360, file: !3, line: 4388, type: !1780)
!14367 = !DILocation(line: 4388, column: 12, scope: !14360)
!14368 = !DILocation(line: 4388, column: 25, scope: !14360)
!14369 = !DILocation(line: 4390, column: 7, scope: !14360)
!14370 = !DILocation(line: 4390, column: 11, scope: !14360)
!14371 = !DILocation(line: 4390, column: 20, scope: !14360)
!14372 = !DILocation(line: 4392, column: 11, scope: !14373)
!14373 = distinct !DILexicalBlock(scope: !14360, file: !3, line: 4392, column: 11)
!14374 = !DILocation(line: 4392, column: 11, scope: !14360)
!14375 = !DILocation(line: 4393, column: 15, scope: !14373)
!14376 = !DILocation(line: 4393, column: 13, scope: !14373)
!14377 = !DILocation(line: 4393, column: 2, scope: !14373)
!14378 = !DILocation(line: 4395, column: 41, scope: !14360)
!14379 = !DILocation(line: 4395, column: 7, scope: !14360)
!14380 = !DILocation(line: 4396, column: 17, scope: !14360)
!14381 = !DILocation(line: 4396, column: 15, scope: !14360)
!14382 = !DILocation(line: 4397, column: 13, scope: !14360)
!14383 = !DILocation(line: 4397, column: 7, scope: !14360)
!14384 = !DILocation(line: 4399, column: 32, scope: !14360)
!14385 = !DILocation(line: 4399, column: 44, scope: !14360)
!14386 = !DILocation(line: 4399, column: 18, scope: !14360)
!14387 = !DILocation(line: 4399, column: 16, scope: !14360)
!14388 = !DILocation(line: 4400, column: 26, scope: !14360)
!14389 = !DILocation(line: 4400, column: 7, scope: !14360)
!14390 = !DILocation(line: 4400, column: 17, scope: !14360)
!14391 = !DILocation(line: 4400, column: 24, scope: !14360)
!14392 = !DILocation(line: 4401, column: 7, scope: !14360)
!14393 = !DILocation(line: 4401, column: 17, scope: !14360)
!14394 = !DILocation(line: 4401, column: 22, scope: !14360)
!14395 = !DILocation(line: 4402, column: 28, scope: !14360)
!14396 = !DILocation(line: 4402, column: 32, scope: !14360)
!14397 = !DILocation(line: 4402, column: 7, scope: !14360)
!14398 = !DILocation(line: 4402, column: 17, scope: !14360)
!14399 = !DILocation(line: 4402, column: 26, scope: !14360)
!14400 = !DILocation(line: 4403, column: 7, scope: !14360)
!14401 = !DILocation(line: 4403, column: 17, scope: !14360)
!14402 = !DILocation(line: 4403, column: 29, scope: !14360)
!14403 = !DILocation(line: 4404, column: 38, scope: !14360)
!14404 = !DILocation(line: 4404, column: 42, scope: !14360)
!14405 = !DILocation(line: 4404, column: 7, scope: !14360)
!14406 = !DILocation(line: 4405, column: 24, scope: !14360)
!14407 = !DILocation(line: 4406, column: 11, scope: !14408)
!14408 = distinct !DILexicalBlock(scope: !14360, file: !3, line: 4406, column: 11)
!14409 = !DILocation(line: 4406, column: 11, scope: !14360)
!14410 = !DILocation(line: 4407, column: 22, scope: !14408)
!14411 = !DILocation(line: 4407, column: 42, scope: !14408)
!14412 = !DILocation(line: 4407, column: 2, scope: !14408)
!14413 = !DILocation(line: 4408, column: 5, scope: !14360)
!14414 = !DILocation(line: 4410, column: 10, scope: !14230)
!14415 = !DILocation(line: 4410, column: 14, scope: !14230)
!14416 = !DILocation(line: 4410, column: 3, scope: !14230)
!14417 = !DILocation(line: 4411, column: 1, scope: !14230)
!14418 = distinct !DISubprogram(name: "count_num_arguments", scope: !3, file: !3, line: 4299, type: !14419, scopeLine: 4300, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!14419 = !DISubroutineType(types: !14420)
!14420 = !{!6, !1780, !3193}
!14421 = !DILocalVariable(name: "decl", arg: 1, scope: !14418, file: !3, line: 4299, type: !1780)
!14422 = !DILocation(line: 4299, column: 27, scope: !14418)
!14423 = !DILocalVariable(name: "is_varargs", arg: 2, scope: !14418, file: !3, line: 4299, type: !3193)
!14424 = !DILocation(line: 4299, column: 39, scope: !14418)
!14425 = !DILocalVariable(name: "num", scope: !14418, file: !3, line: 4301, type: !6)
!14426 = !DILocation(line: 4301, column: 16, scope: !14418)
!14427 = !DILocalVariable(name: "t", scope: !14418, file: !3, line: 4302, type: !1780)
!14428 = !DILocation(line: 4302, column: 8, scope: !14418)
!14429 = !DILocation(line: 4306, column: 12, scope: !14430)
!14430 = distinct !DILexicalBlock(scope: !14418, file: !3, line: 4306, column: 3)
!14431 = !DILocation(line: 4306, column: 10, scope: !14430)
!14432 = !DILocation(line: 4306, column: 8, scope: !14430)
!14433 = !DILocation(line: 4306, column: 35, scope: !14434)
!14434 = distinct !DILexicalBlock(scope: !14430, file: !3, line: 4306, column: 3)
!14435 = !DILocation(line: 4306, column: 3, scope: !14430)
!14436 = !DILocation(line: 4307, column: 5, scope: !14434)
!14437 = !DILocation(line: 4306, column: 42, scope: !14434)
!14438 = !DILocation(line: 4306, column: 40, scope: !14434)
!14439 = !DILocation(line: 4306, column: 3, scope: !14434)
!14440 = distinct !{!14440, !14435, !14441}
!14441 = !DILocation(line: 4307, column: 7, scope: !14430)
!14442 = !DILocation(line: 4310, column: 12, scope: !14443)
!14443 = distinct !DILexicalBlock(scope: !14418, file: !3, line: 4310, column: 3)
!14444 = !DILocation(line: 4310, column: 10, scope: !14443)
!14445 = !DILocation(line: 4310, column: 8, scope: !14443)
!14446 = !DILocation(line: 4310, column: 47, scope: !14447)
!14447 = distinct !DILexicalBlock(scope: !14443, file: !3, line: 4310, column: 3)
!14448 = !DILocation(line: 4310, column: 3, scope: !14443)
!14449 = !DILocation(line: 4311, column: 9, scope: !14450)
!14450 = distinct !DILexicalBlock(scope: !14447, file: !3, line: 4311, column: 9)
!14451 = !DILocation(line: 4311, column: 27, scope: !14450)
!14452 = !DILocation(line: 4311, column: 24, scope: !14450)
!14453 = !DILocation(line: 4311, column: 9, scope: !14447)
!14454 = !DILocation(line: 4312, column: 7, scope: !14450)
!14455 = !DILocation(line: 4310, column: 54, scope: !14447)
!14456 = !DILocation(line: 4310, column: 52, scope: !14447)
!14457 = !DILocation(line: 4310, column: 3, scope: !14447)
!14458 = distinct !{!14458, !14448, !14459}
!14459 = !DILocation(line: 4312, column: 7, scope: !14443)
!14460 = !DILocation(line: 4313, column: 8, scope: !14461)
!14461 = distinct !DILexicalBlock(scope: !14418, file: !3, line: 4313, column: 7)
!14462 = !DILocation(line: 4313, column: 7, scope: !14418)
!14463 = !DILocation(line: 4314, column: 6, scope: !14461)
!14464 = !DILocation(line: 4314, column: 17, scope: !14461)
!14465 = !DILocation(line: 4314, column: 5, scope: !14461)
!14466 = !DILocation(line: 4316, column: 10, scope: !14418)
!14467 = !DILocation(line: 4316, column: 3, scope: !14418)
!14468 = distinct !DISubprogram(name: "insert_into_field_list_sorted", scope: !3, file: !3, line: 4094, type: !7891, scopeLine: 4095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3393)
!14469 = !DILocalVariable(name: "base", arg: 1, scope: !14468, file: !3, line: 4094, type: !1758)
!14470 = !DILocation(line: 4094, column: 42, scope: !14468)
!14471 = !DILocalVariable(name: "field", arg: 2, scope: !14468, file: !3, line: 4094, type: !1758)
!14472 = !DILocation(line: 4094, column: 58, scope: !14468)
!14473 = !DILocalVariable(name: "prev", scope: !14468, file: !3, line: 4096, type: !1758)
!14474 = !DILocation(line: 4096, column: 13, scope: !14468)
!14475 = !DILocation(line: 4096, column: 20, scope: !14468)
!14476 = !DILocalVariable(name: "curr", scope: !14468, file: !3, line: 4097, type: !1758)
!14477 = !DILocation(line: 4097, column: 13, scope: !14468)
!14478 = !DILocation(line: 4097, column: 20, scope: !14468)
!14479 = !DILocation(line: 4097, column: 26, scope: !14468)
!14480 = !DILocation(line: 4099, column: 7, scope: !14481)
!14481 = distinct !DILexicalBlock(scope: !14468, file: !3, line: 4099, column: 7)
!14482 = !DILocation(line: 4099, column: 12, scope: !14481)
!14483 = !DILocation(line: 4099, column: 7, scope: !14468)
!14484 = !DILocation(line: 4101, column: 20, scope: !14485)
!14485 = distinct !DILexicalBlock(scope: !14481, file: !3, line: 4100, column: 5)
!14486 = !DILocation(line: 4101, column: 7, scope: !14485)
!14487 = !DILocation(line: 4101, column: 13, scope: !14485)
!14488 = !DILocation(line: 4101, column: 18, scope: !14485)
!14489 = !DILocation(line: 4102, column: 7, scope: !14485)
!14490 = !DILocation(line: 4102, column: 14, scope: !14485)
!14491 = !DILocation(line: 4102, column: 19, scope: !14485)
!14492 = !DILocation(line: 4103, column: 5, scope: !14485)
!14493 = !DILocation(line: 4106, column: 7, scope: !14494)
!14494 = distinct !DILexicalBlock(scope: !14481, file: !3, line: 4105, column: 5)
!14495 = !DILocation(line: 4106, column: 14, scope: !14494)
!14496 = !DILocation(line: 4108, column: 8, scope: !14497)
!14497 = distinct !DILexicalBlock(scope: !14498, file: !3, line: 4108, column: 8)
!14498 = distinct !DILexicalBlock(scope: !14494, file: !3, line: 4107, column: 2)
!14499 = !DILocation(line: 4108, column: 15, scope: !14497)
!14500 = !DILocation(line: 4108, column: 25, scope: !14497)
!14501 = !DILocation(line: 4108, column: 31, scope: !14497)
!14502 = !DILocation(line: 4108, column: 22, scope: !14497)
!14503 = !DILocation(line: 4108, column: 8, scope: !14498)
!14504 = !DILocation(line: 4109, column: 6, scope: !14497)
!14505 = !DILocation(line: 4110, column: 11, scope: !14498)
!14506 = !DILocation(line: 4110, column: 9, scope: !14498)
!14507 = !DILocation(line: 4111, column: 11, scope: !14498)
!14508 = !DILocation(line: 4111, column: 17, scope: !14498)
!14509 = !DILocation(line: 4111, column: 9, scope: !14498)
!14510 = distinct !{!14510, !14493, !14511}
!14511 = !DILocation(line: 4112, column: 2, scope: !14494)
!14512 = !DILocation(line: 4113, column: 21, scope: !14494)
!14513 = !DILocation(line: 4113, column: 27, scope: !14494)
!14514 = !DILocation(line: 4113, column: 7, scope: !14494)
!14515 = !DILocation(line: 4113, column: 14, scope: !14494)
!14516 = !DILocation(line: 4113, column: 19, scope: !14494)
!14517 = !DILocation(line: 4114, column: 20, scope: !14494)
!14518 = !DILocation(line: 4114, column: 7, scope: !14494)
!14519 = !DILocation(line: 4114, column: 13, scope: !14494)
!14520 = !DILocation(line: 4114, column: 18, scope: !14494)
!14521 = !DILocation(line: 4116, column: 1, scope: !14468)
