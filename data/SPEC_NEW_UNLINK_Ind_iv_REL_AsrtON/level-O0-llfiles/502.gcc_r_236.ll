; ModuleID = 'sese.c'
source_filename = "sese.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.rename_map_elt_s = type { %union.tree_node*, %union.tree_node* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.ivtype_map_elt_s = type { %union.tree_node*, i8* }
%struct.sese_s = type { %struct.edge_def*, %struct.edge_def*, %struct.VEC_tree_heap*, %struct.bitmap_head_def*, %struct.VEC_loop_p_heap*, i8 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.alep = type { %struct.loop*, %struct.VEC_rename_map_elt_heap* }
%struct.VEC_rename_map_elt_heap = type { %struct.VEC_rename_map_elt_base }
%struct.VEC_rename_map_elt_base = type { i32, i32, [1 x %struct.rename_map_elt_s*] }
%struct.igp = type { %struct.basic_block_def*, %struct.edge_def*, %struct.edge_def*, %struct.htab* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.ifsese_s = type { %struct.sese_s*, %struct.sese_s*, %struct.sese_s* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }

@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@cfun = external dso_local global %struct.function*, align 8
@.str = private unnamed_addr constant [7 x i8] c"sese.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"var\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"(%s, \00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.7 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@tree_code_length = external dso_local constant [0 x i8], align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_rename_map(%struct.htab* %map) #0 !dbg !2099 {
entry:
  %map.addr = alloca %struct.htab*, align 8
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !2103, metadata !DIExpression()), !dbg !2104
  %0 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !2105
  call void @htab_traverse(%struct.htab* %0, i32 (i8**, i8*)* @debug_rename_map_1, i8* null), !dbg !2106
  ret void, !dbg !2107
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @debug_rename_map_1(i8** %slot, i8* %s) #0 !dbg !2108 {
entry:
  %slot.addr = alloca i8**, align 8
  %s.addr = alloca i8*, align 8
  %entry1 = alloca %struct.rename_map_elt_s*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !2111, metadata !DIExpression()), !dbg !2112
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !2113, metadata !DIExpression()), !dbg !2114
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %entry1, metadata !2115, metadata !DIExpression()), !dbg !2116
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !2117
  %1 = load i8*, i8** %0, align 8, !dbg !2118
  %2 = bitcast i8* %1 to %struct.rename_map_elt_s*, !dbg !2119
  store %struct.rename_map_elt_s* %2, %struct.rename_map_elt_s** %entry1, align 8, !dbg !2116
  %3 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %entry1, align 8, !dbg !2120
  call void @debug_rename_elt(%struct.rename_map_elt_s* %3), !dbg !2121
  ret i32 1, !dbg !2122
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rename_map_elt_info(i8* %elt) #0 !dbg !2123 {
entry:
  %elt.addr = alloca i8*, align 8
  store i8* %elt, i8** %elt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %elt.addr, metadata !2124, metadata !DIExpression()), !dbg !2125
  %0 = load i8*, i8** %elt.addr, align 8, !dbg !2126
  %1 = bitcast i8* %0 to %struct.rename_map_elt_s*, !dbg !2126
  %old_name = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %1, i32 0, i32 0, !dbg !2126
  %2 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !2126
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !2126
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !2126
  %3 = load i32, i32* %version, align 8, !dbg !2126
  ret i32 %3, !dbg !2127
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @eq_rename_map_elts(i8* %e1, i8* %e2) #0 !dbg !2128 {
entry:
  %e1.addr = alloca i8*, align 8
  %e2.addr = alloca i8*, align 8
  %elt1 = alloca %struct.rename_map_elt_s*, align 8
  %elt2 = alloca %struct.rename_map_elt_s*, align 8
  store i8* %e1, i8** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e1.addr, metadata !2129, metadata !DIExpression()), !dbg !2130
  store i8* %e2, i8** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e2.addr, metadata !2131, metadata !DIExpression()), !dbg !2132
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %elt1, metadata !2133, metadata !DIExpression()), !dbg !2134
  %0 = load i8*, i8** %e1.addr, align 8, !dbg !2135
  %1 = bitcast i8* %0 to %struct.rename_map_elt_s*, !dbg !2136
  store %struct.rename_map_elt_s* %1, %struct.rename_map_elt_s** %elt1, align 8, !dbg !2134
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %elt2, metadata !2137, metadata !DIExpression()), !dbg !2138
  %2 = load i8*, i8** %e2.addr, align 8, !dbg !2139
  %3 = bitcast i8* %2 to %struct.rename_map_elt_s*, !dbg !2140
  store %struct.rename_map_elt_s* %3, %struct.rename_map_elt_s** %elt2, align 8, !dbg !2138
  %4 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %elt1, align 8, !dbg !2141
  %old_name = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %4, i32 0, i32 0, !dbg !2142
  %5 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !2142
  %6 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %elt2, align 8, !dbg !2143
  %old_name1 = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %6, i32 0, i32 0, !dbg !2144
  %7 = load %union.tree_node*, %union.tree_node** %old_name1, align 8, !dbg !2144
  %cmp = icmp eq %union.tree_node* %5, %7, !dbg !2145
  %conv = zext i1 %cmp to i32, !dbg !2145
  ret i32 %conv, !dbg !2146
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_ivtype_map(%struct.htab* %map) #0 !dbg !2147 {
entry:
  %map.addr = alloca %struct.htab*, align 8
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !2148, metadata !DIExpression()), !dbg !2149
  %0 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !2150
  call void @htab_traverse(%struct.htab* %0, i32 (i8**, i8*)* @debug_ivtype_map_1, i8* null), !dbg !2151
  ret void, !dbg !2152
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @debug_ivtype_map_1(i8** %slot, i8* %s) #0 !dbg !2153 {
entry:
  %slot.addr = alloca i8**, align 8
  %s.addr = alloca i8*, align 8
  %entry1 = alloca %struct.ivtype_map_elt_s*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !2154, metadata !DIExpression()), !dbg !2155
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !2156, metadata !DIExpression()), !dbg !2157
  call void @llvm.dbg.declare(metadata %struct.ivtype_map_elt_s** %entry1, metadata !2158, metadata !DIExpression()), !dbg !2159
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !2160
  %1 = load i8*, i8** %0, align 8, !dbg !2161
  %2 = bitcast i8* %1 to %struct.ivtype_map_elt_s*, !dbg !2162
  store %struct.ivtype_map_elt_s* %2, %struct.ivtype_map_elt_s** %entry1, align 8, !dbg !2159
  %3 = load %struct.ivtype_map_elt_s*, %struct.ivtype_map_elt_s** %entry1, align 8, !dbg !2163
  call void @debug_ivtype_elt(%struct.ivtype_map_elt_s* %3), !dbg !2164
  ret i32 1, !dbg !2165
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ivtype_map_elt_info(i8* %elt) #0 !dbg !2166 {
entry:
  %elt.addr = alloca i8*, align 8
  store i8* %elt, i8** %elt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %elt.addr, metadata !2167, metadata !DIExpression()), !dbg !2168
  %0 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !2169
  %1 = load i8*, i8** %elt.addr, align 8, !dbg !2170
  %2 = bitcast i8* %1 to %struct.ivtype_map_elt_s*, !dbg !2171
  %cloog_iv = getelementptr inbounds %struct.ivtype_map_elt_s, %struct.ivtype_map_elt_s* %2, i32 0, i32 1, !dbg !2172
  %3 = load i8*, i8** %cloog_iv, align 8, !dbg !2172
  %call = call i32 %0(i8* %3), !dbg !2169
  ret i32 %call, !dbg !2173
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @eq_ivtype_map_elts(i8* %e1, i8* %e2) #0 !dbg !2174 {
entry:
  %e1.addr = alloca i8*, align 8
  %e2.addr = alloca i8*, align 8
  %elt1 = alloca %struct.ivtype_map_elt_s*, align 8
  %elt2 = alloca %struct.ivtype_map_elt_s*, align 8
  store i8* %e1, i8** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e1.addr, metadata !2175, metadata !DIExpression()), !dbg !2176
  store i8* %e2, i8** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e2.addr, metadata !2177, metadata !DIExpression()), !dbg !2178
  call void @llvm.dbg.declare(metadata %struct.ivtype_map_elt_s** %elt1, metadata !2179, metadata !DIExpression()), !dbg !2180
  %0 = load i8*, i8** %e1.addr, align 8, !dbg !2181
  %1 = bitcast i8* %0 to %struct.ivtype_map_elt_s*, !dbg !2182
  store %struct.ivtype_map_elt_s* %1, %struct.ivtype_map_elt_s** %elt1, align 8, !dbg !2180
  call void @llvm.dbg.declare(metadata %struct.ivtype_map_elt_s** %elt2, metadata !2183, metadata !DIExpression()), !dbg !2184
  %2 = load i8*, i8** %e2.addr, align 8, !dbg !2185
  %3 = bitcast i8* %2 to %struct.ivtype_map_elt_s*, !dbg !2186
  store %struct.ivtype_map_elt_s* %3, %struct.ivtype_map_elt_s** %elt2, align 8, !dbg !2184
  %4 = load %struct.ivtype_map_elt_s*, %struct.ivtype_map_elt_s** %elt1, align 8, !dbg !2187
  %cloog_iv = getelementptr inbounds %struct.ivtype_map_elt_s, %struct.ivtype_map_elt_s* %4, i32 0, i32 1, !dbg !2188
  %5 = load i8*, i8** %cloog_iv, align 8, !dbg !2188
  %6 = load %struct.ivtype_map_elt_s*, %struct.ivtype_map_elt_s** %elt2, align 8, !dbg !2189
  %cloog_iv1 = getelementptr inbounds %struct.ivtype_map_elt_s, %struct.ivtype_map_elt_s* %6, i32 0, i32 1, !dbg !2190
  %7 = load i8*, i8** %cloog_iv1, align 8, !dbg !2190
  %cmp = icmp eq i8* %5, %7, !dbg !2191
  %conv = zext i1 %cmp to i32, !dbg !2191
  ret i32 %conv, !dbg !2192
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @build_sese_loop_nests(%struct.sese_s* %region) #0 !dbg !2193 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %i = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %loop0 = alloca %struct.loop*, align 8
  %loop1 = alloca %struct.loop*, align 8
  %loop = alloca %struct.loop*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !2196, metadata !DIExpression()), !dbg !2197
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2198, metadata !DIExpression()), !dbg !2199
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2200, metadata !DIExpression()), !dbg !2201
  call void @llvm.dbg.declare(metadata %struct.loop** %loop0, metadata !2202, metadata !DIExpression()), !dbg !2203
  call void @llvm.dbg.declare(metadata %struct.loop** %loop1, metadata !2204, metadata !DIExpression()), !dbg !2205
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2206
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2206
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2206
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2206
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !2206
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2206
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !2206
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2206
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !2206
  br label %for.cond, !dbg !2206

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2208
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2208
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2208
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2208
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2208
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !2208
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2208
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !2208
  br i1 %cmp, label %for.body, label %for.end, !dbg !2206

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2210
  %9 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2212
  %call = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %8, %struct.sese_s* %9), !dbg !2213
  %tobool = icmp ne i8 %call, 0, !dbg !2213
  br i1 %tobool, label %if.then, label %if.end7, !dbg !2214

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2215, metadata !DIExpression()), !dbg !2217
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2218
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 3, !dbg !2219
  %11 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2219
  store %struct.loop* %11, %struct.loop** %loop, align 8, !dbg !2217
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2220
  %header = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 2, !dbg !2222
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2222
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2223
  %cmp3 = icmp eq %struct.basic_block_def* %13, %14, !dbg !2224
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !2225

land.lhs.true:                                    ; preds = %if.then
  %15 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2226
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 3, !dbg !2227
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !2227
  %17 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2228
  %call4 = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %16, %struct.sese_s* %17), !dbg !2229
  %conv = zext i8 %call4 to i32, !dbg !2229
  %tobool5 = icmp ne i32 %conv, 0, !dbg !2229
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !2230

if.then6:                                         ; preds = %land.lhs.true
  %18 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2231
  %19 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2232
  call void @sese_record_loop(%struct.sese_s* %18, %struct.loop* %19), !dbg !2233
  br label %if.end, !dbg !2233

if.end:                                           ; preds = %if.then6, %land.lhs.true, %if.then
  br label %if.end7, !dbg !2234

if.end7:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !2235

for.inc:                                          ; preds = %if.end7
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2208
  %next_bb8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 6, !dbg !2208
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb8, align 8, !dbg !2208
  store %struct.basic_block_def* %21, %struct.basic_block_def** %bb, align 8, !dbg !2208
  br label %for.cond, !dbg !2208, !llvm.loop !2236

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !2238
  br label %for.cond9, !dbg !2240

for.cond9:                                        ; preds = %for.inc62, %for.end
  %22 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2241
  %loop_nest = getelementptr inbounds %struct.sese_s, %struct.sese_s* %22, i32 0, i32 4, !dbg !2241
  %23 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !2241
  %tobool10 = icmp ne %struct.VEC_loop_p_heap* %23, null, !dbg !2241
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !2241

cond.true:                                        ; preds = %for.cond9
  %24 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2241
  %loop_nest11 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %24, i32 0, i32 4, !dbg !2241
  %25 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest11, align 8, !dbg !2241
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %25, i32 0, i32 0, !dbg !2241
  br label %cond.end, !dbg !2241

cond.false:                                       ; preds = %for.cond9
  br label %cond.end, !dbg !2241

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2241
  %26 = load i32, i32* %i, align 4, !dbg !2241
  %call12 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %26, %struct.loop** %loop0), !dbg !2241
  %tobool13 = icmp ne i32 %call12, 0, !dbg !2243
  br i1 %tobool13, label %for.body14, label %for.end63, !dbg !2243

for.body14:                                       ; preds = %cond.end
  %27 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2244
  %loop_nest15 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %27, i32 0, i32 4, !dbg !2244
  %28 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest15, align 8, !dbg !2244
  %tobool16 = icmp ne %struct.VEC_loop_p_heap* %28, null, !dbg !2244
  br i1 %tobool16, label %cond.true17, label %cond.false20, !dbg !2244

cond.true17:                                      ; preds = %for.body14
  %29 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2244
  %loop_nest18 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %29, i32 0, i32 4, !dbg !2244
  %30 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest18, align 8, !dbg !2244
  %base19 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %30, i32 0, i32 0, !dbg !2244
  br label %cond.end21, !dbg !2244

cond.false20:                                     ; preds = %for.body14
  br label %cond.end21, !dbg !2244

cond.end21:                                       ; preds = %cond.false20, %cond.true17
  %cond22 = phi %struct.VEC_loop_p_base* [ %base19, %cond.true17 ], [ null, %cond.false20 ], !dbg !2244
  %call23 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond22), !dbg !2244
  %31 = load i32, i32* %i, align 4, !dbg !2247
  %add = add i32 %31, 1, !dbg !2248
  %cmp24 = icmp eq i32 %call23, %add, !dbg !2249
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !2250

if.then26:                                        ; preds = %cond.end21
  br label %for.end63, !dbg !2251

if.end27:                                         ; preds = %cond.end21
  %32 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2252
  %loop_nest28 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %32, i32 0, i32 4, !dbg !2252
  %33 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest28, align 8, !dbg !2252
  %tobool29 = icmp ne %struct.VEC_loop_p_heap* %33, null, !dbg !2252
  br i1 %tobool29, label %cond.true30, label %cond.false33, !dbg !2252

cond.true30:                                      ; preds = %if.end27
  %34 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2252
  %loop_nest31 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %34, i32 0, i32 4, !dbg !2252
  %35 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest31, align 8, !dbg !2252
  %base32 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %35, i32 0, i32 0, !dbg !2252
  br label %cond.end34, !dbg !2252

cond.false33:                                     ; preds = %if.end27
  br label %cond.end34, !dbg !2252

cond.end34:                                       ; preds = %cond.false33, %cond.true30
  %cond35 = phi %struct.VEC_loop_p_base* [ %base32, %cond.true30 ], [ null, %cond.false33 ], !dbg !2252
  %36 = load i32, i32* %i, align 4, !dbg !2252
  %add36 = add i32 %36, 1, !dbg !2252
  %call37 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond35, i32 %add36), !dbg !2252
  store %struct.loop* %call37, %struct.loop** %loop1, align 8, !dbg !2253
  %37 = load %struct.loop*, %struct.loop** %loop0, align 8, !dbg !2254
  %num = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !2256
  %38 = load i32, i32* %num, align 8, !dbg !2256
  %39 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !2257
  %num38 = getelementptr inbounds %struct.loop, %struct.loop* %39, i32 0, i32 0, !dbg !2258
  %40 = load i32, i32* %num38, align 8, !dbg !2258
  %cmp39 = icmp sgt i32 %38, %40, !dbg !2259
  br i1 %cmp39, label %if.then41, label %if.end61, !dbg !2260

if.then41:                                        ; preds = %cond.end34
  %41 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2261
  %loop_nest42 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %41, i32 0, i32 4, !dbg !2261
  %42 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest42, align 8, !dbg !2261
  %tobool43 = icmp ne %struct.VEC_loop_p_heap* %42, null, !dbg !2261
  br i1 %tobool43, label %cond.true44, label %cond.false47, !dbg !2261

cond.true44:                                      ; preds = %if.then41
  %43 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2261
  %loop_nest45 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %43, i32 0, i32 4, !dbg !2261
  %44 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest45, align 8, !dbg !2261
  %base46 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %44, i32 0, i32 0, !dbg !2261
  br label %cond.end48, !dbg !2261

cond.false47:                                     ; preds = %if.then41
  br label %cond.end48, !dbg !2261

cond.end48:                                       ; preds = %cond.false47, %cond.true44
  %cond49 = phi %struct.VEC_loop_p_base* [ %base46, %cond.true44 ], [ null, %cond.false47 ], !dbg !2261
  %45 = load i32, i32* %i, align 4, !dbg !2261
  %46 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !2261
  %call50 = call %struct.loop* @VEC_loop_p_base_replace(%struct.VEC_loop_p_base* %cond49, i32 %45, %struct.loop* %46), !dbg !2261
  %47 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2263
  %loop_nest51 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %47, i32 0, i32 4, !dbg !2263
  %48 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest51, align 8, !dbg !2263
  %tobool52 = icmp ne %struct.VEC_loop_p_heap* %48, null, !dbg !2263
  br i1 %tobool52, label %cond.true53, label %cond.false56, !dbg !2263

cond.true53:                                      ; preds = %cond.end48
  %49 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2263
  %loop_nest54 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %49, i32 0, i32 4, !dbg !2263
  %50 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %loop_nest54, align 8, !dbg !2263
  %base55 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %50, i32 0, i32 0, !dbg !2263
  br label %cond.end57, !dbg !2263

cond.false56:                                     ; preds = %cond.end48
  br label %cond.end57, !dbg !2263

cond.end57:                                       ; preds = %cond.false56, %cond.true53
  %cond58 = phi %struct.VEC_loop_p_base* [ %base55, %cond.true53 ], [ null, %cond.false56 ], !dbg !2263
  %51 = load i32, i32* %i, align 4, !dbg !2263
  %add59 = add i32 %51, 1, !dbg !2263
  %52 = load %struct.loop*, %struct.loop** %loop0, align 8, !dbg !2263
  %call60 = call %struct.loop* @VEC_loop_p_base_replace(%struct.VEC_loop_p_base* %cond58, i32 %add59, %struct.loop* %52), !dbg !2263
  br label %if.end61, !dbg !2264

if.end61:                                         ; preds = %cond.end57, %cond.end34
  br label %for.inc62, !dbg !2265

for.inc62:                                        ; preds = %if.end61
  %53 = load i32, i32* %i, align 4, !dbg !2266
  %inc = add i32 %53, 1, !dbg !2266
  store i32 %inc, i32* %i, align 4, !dbg !2266
  br label %for.cond9, !dbg !2267, !llvm.loop !2268

for.end63:                                        ; preds = %if.then26, %cond.end
  ret void, !dbg !2270
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %bb, %struct.sese_s* %region) #0 !dbg !2271 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %entry1 = alloca %struct.basic_block_def*, align 8
  %exit = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2274, metadata !DIExpression()), !dbg !2275
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !2276, metadata !DIExpression()), !dbg !2277
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry1, metadata !2278, metadata !DIExpression()), !dbg !2279
  %0 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2280
  %entry2 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %0, i32 0, i32 0, !dbg !2280
  %1 = load %struct.edge_def*, %struct.edge_def** %entry2, align 8, !dbg !2280
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 1, !dbg !2280
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2280
  store %struct.basic_block_def* %2, %struct.basic_block_def** %entry1, align 8, !dbg !2279
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit, metadata !2281, metadata !DIExpression()), !dbg !2282
  %3 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2283
  %exit3 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %3, i32 0, i32 1, !dbg !2283
  %4 = load %struct.edge_def*, %struct.edge_def** %exit3, align 8, !dbg !2283
  %dest4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !2283
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest4, align 8, !dbg !2283
  store %struct.basic_block_def* %5, %struct.basic_block_def** %exit, align 8, !dbg !2282
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2284
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %entry1, align 8, !dbg !2285
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %exit, align 8, !dbg !2286
  %call = call zeroext i8 @bb_in_region(%struct.basic_block_def* %6, %struct.basic_block_def* %7, %struct.basic_block_def* %8), !dbg !2287
  ret i8 %call, !dbg !2288
}

; Function Attrs: noinline nounwind uwtable
define internal void @sese_record_loop(%struct.sese_s* %region, %struct.loop* %loop) #0 !dbg !2289 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !2292, metadata !DIExpression()), !dbg !2293
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2294, metadata !DIExpression()), !dbg !2295
  %0 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2296
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2298
  %call = call zeroext i8 @sese_contains_loop(%struct.sese_s* %0, %struct.loop* %1), !dbg !2299
  %tobool = icmp ne i8 %call, 0, !dbg !2299
  br i1 %tobool, label %if.then, label %if.end, !dbg !2300

if.then:                                          ; preds = %entry
  br label %return, !dbg !2301

if.end:                                           ; preds = %entry
  %2 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2302
  %loops = getelementptr inbounds %struct.sese_s, %struct.sese_s* %2, i32 0, i32 3, !dbg !2302
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops, align 8, !dbg !2302
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2303
  %num = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 0, !dbg !2304
  %5 = load i32, i32* %num, align 8, !dbg !2304
  %call1 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %3, i32 %5), !dbg !2305
  %6 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2306
  %loop_nest = getelementptr inbounds %struct.sese_s, %struct.sese_s* %6, i32 0, i32 4, !dbg !2306
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2306
  %call2 = call %struct.loop** @VEC_loop_p_heap_safe_push(%struct.VEC_loop_p_heap** %loop_nest, %struct.loop* %7), !dbg !2306
  br label %return, !dbg !2307

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !2307
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !2308 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !2314, metadata !DIExpression()), !dbg !2315
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2316, metadata !DIExpression()), !dbg !2315
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !2317, metadata !DIExpression()), !dbg !2315
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2318
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !2318
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2318

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2318
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2318
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !2318
  %3 = load i32, i32* %num, align 8, !dbg !2318
  %cmp = icmp ult i32 %1, %3, !dbg !2318
  br i1 %cmp, label %if.then, label %if.else, !dbg !2315

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2320
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !2320
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2320
  %idxprom = zext i32 %5 to i64, !dbg !2320
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !2320
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !2320
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !2320
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !2320
  store i32 1, i32* %retval, align 4, !dbg !2320
  br label %return, !dbg !2320

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !2322
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !2322
  store i32 0, i32* %retval, align 4, !dbg !2322
  br label %return, !dbg !2322

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2315
  ret i32 %9, !dbg !2315
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !2324 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !2327, metadata !DIExpression()), !dbg !2328
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2328
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !2328
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2328

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2328
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !2328
  %2 = load i32, i32* %num, align 8, !dbg !2328
  br label %cond.end, !dbg !2328

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2328

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2328
  ret i32 %cond, !dbg !2328
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !2329 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !2332, metadata !DIExpression()), !dbg !2333
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2334, metadata !DIExpression()), !dbg !2333
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2333
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !2333
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2333

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2333
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2333
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !2333
  %3 = load i32, i32* %num, align 8, !dbg !2333
  %cmp = icmp ult i32 %1, %3, !dbg !2333
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2335
  %land.ext = zext i1 %4 to i32, !dbg !2333
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2333
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !2333
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2333
  %idxprom = zext i32 %6 to i64, !dbg !2333
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !2333
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !2333
  ret %struct.loop* %7, !dbg !2333
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_replace(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop* %obj_) #0 !dbg !2336 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.loop*, align 8
  %old_obj_ = alloca %struct.loop*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !2340, metadata !DIExpression()), !dbg !2341
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2342, metadata !DIExpression()), !dbg !2341
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !2343, metadata !DIExpression()), !dbg !2341
  call void @llvm.dbg.declare(metadata %struct.loop** %old_obj_, metadata !2344, metadata !DIExpression()), !dbg !2341
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !2341
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2341
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !2341
  %2 = load i32, i32* %num, align 8, !dbg !2341
  %cmp = icmp ult i32 %0, %2, !dbg !2341
  %conv = zext i1 %cmp to i32, !dbg !2341
  %3 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2341
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %3, i32 0, i32 2, !dbg !2341
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !2341
  %idxprom = zext i32 %4 to i64, !dbg !2341
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !2341
  %5 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !2341
  store %struct.loop* %5, %struct.loop** %old_obj_, align 8, !dbg !2341
  %6 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !2341
  %7 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !2341
  %vec1 = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %7, i32 0, i32 2, !dbg !2341
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !2341
  %idxprom2 = zext i32 %8 to i64, !dbg !2341
  %arrayidx3 = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec1, i64 0, i64 %idxprom2, !dbg !2341
  store %struct.loop* %6, %struct.loop** %arrayidx3, align 8, !dbg !2341
  %9 = load %struct.loop*, %struct.loop** %old_obj_, align 8, !dbg !2341
  ret %struct.loop* %9, !dbg !2341
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.sese_s* @new_sese(%struct.edge_def* %entry1, %struct.edge_def* %exit) #0 !dbg !2345 {
entry:
  %entry.addr = alloca %struct.edge_def*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %region = alloca %struct.sese_s*, align 8
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !2348, metadata !DIExpression()), !dbg !2349
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !2350, metadata !DIExpression()), !dbg !2351
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region, metadata !2352, metadata !DIExpression()), !dbg !2353
  %call = call i8* @xmalloc(i64 48), !dbg !2354
  %0 = bitcast i8* %call to %struct.sese_s*, !dbg !2354
  store %struct.sese_s* %0, %struct.sese_s** %region, align 8, !dbg !2353
  %1 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !2355
  %2 = load %struct.sese_s*, %struct.sese_s** %region, align 8, !dbg !2356
  %entry2 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %2, i32 0, i32 0, !dbg !2356
  store %struct.edge_def* %1, %struct.edge_def** %entry2, align 8, !dbg !2357
  %3 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !2358
  %4 = load %struct.sese_s*, %struct.sese_s** %region, align 8, !dbg !2359
  %exit3 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %4, i32 0, i32 1, !dbg !2359
  store %struct.edge_def* %3, %struct.edge_def** %exit3, align 8, !dbg !2360
  %call4 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !2361
  %5 = load %struct.sese_s*, %struct.sese_s** %region, align 8, !dbg !2362
  %loops = getelementptr inbounds %struct.sese_s, %struct.sese_s* %5, i32 0, i32 3, !dbg !2362
  store %struct.bitmap_head_def* %call4, %struct.bitmap_head_def** %loops, align 8, !dbg !2363
  %call5 = call %struct.VEC_loop_p_heap* @VEC_loop_p_heap_alloc(i32 3), !dbg !2364
  %6 = load %struct.sese_s*, %struct.sese_s** %region, align 8, !dbg !2365
  %loop_nest = getelementptr inbounds %struct.sese_s, %struct.sese_s* %6, i32 0, i32 4, !dbg !2365
  store %struct.VEC_loop_p_heap* %call5, %struct.VEC_loop_p_heap** %loop_nest, align 8, !dbg !2366
  %7 = load %struct.sese_s*, %struct.sese_s** %region, align 8, !dbg !2367
  %add_params = getelementptr inbounds %struct.sese_s, %struct.sese_s* %7, i32 0, i32 5, !dbg !2367
  store i8 1, i8* %add_params, align 8, !dbg !2368
  %call6 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 3), !dbg !2369
  %8 = load %struct.sese_s*, %struct.sese_s** %region, align 8, !dbg !2370
  %params = getelementptr inbounds %struct.sese_s, %struct.sese_s* %8, i32 0, i32 2, !dbg !2370
  store %struct.VEC_tree_heap* %call6, %struct.VEC_tree_heap** %params, align 8, !dbg !2371
  %9 = load %struct.sese_s*, %struct.sese_s** %region, align 8, !dbg !2372
  ret %struct.sese_s* %9, !dbg !2373
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_loop_p_heap* @VEC_loop_p_heap_alloc(i32 %alloc_) #0 !dbg !2374 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !2377, metadata !DIExpression()), !dbg !2378
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !2378
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !2378
  %1 = bitcast i8* %call to %struct.VEC_loop_p_heap*, !dbg !2378
  ret %struct.VEC_loop_p_heap* %1, !dbg !2378
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !2379 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !2382, metadata !DIExpression()), !dbg !2383
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !2383
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !2383
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !2383
  ret %struct.VEC_tree_heap* %1, !dbg !2383
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_sese(%struct.sese_s* %region) #0 !dbg !2384 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !2385, metadata !DIExpression()), !dbg !2386
  %0 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2387
  %loops = getelementptr inbounds %struct.sese_s, %struct.sese_s* %0, i32 0, i32 3, !dbg !2387
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops, align 8, !dbg !2387
  %tobool = icmp ne %struct.bitmap_head_def* %1, null, !dbg !2387
  br i1 %tobool, label %if.then, label %if.end, !dbg !2389

if.then:                                          ; preds = %entry
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !2390
  %2 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2391
  %loops1 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %2, i32 0, i32 3, !dbg !2391
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %loops1, align 8, !dbg !2392
  br label %if.end, !dbg !2391

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2393
  %params = getelementptr inbounds %struct.sese_s, %struct.sese_s* %3, i32 0, i32 2, !dbg !2393
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %params), !dbg !2393
  %4 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2394
  %loop_nest = getelementptr inbounds %struct.sese_s, %struct.sese_s* %4, i32 0, i32 4, !dbg !2394
  call void @VEC_loop_p_heap_free(%struct.VEC_loop_p_heap** %loop_nest), !dbg !2394
  %5 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2395
  %6 = bitcast %struct.sese_s* %5 to i8*, !dbg !2395
  call void @free(i8* %6), !dbg !2395
  ret void, !dbg !2396
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !2397 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !2401, metadata !DIExpression()), !dbg !2402
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !2403
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !2403
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !2403
  br i1 %tobool, label %if.then, label %if.end, !dbg !2402

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !2403
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !2403
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !2403
  call void @free(i8* %4), !dbg !2403
  br label %if.end, !dbg !2403

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !2402
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !2402
  ret void, !dbg !2402
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_loop_p_heap_free(%struct.VEC_loop_p_heap** %vec_) #0 !dbg !2405 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_heap**, align 8
  store %struct.VEC_loop_p_heap** %vec_, %struct.VEC_loop_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %vec_.addr, metadata !2409, metadata !DIExpression()), !dbg !2410
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !2411
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %0, align 8, !dbg !2411
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !2411
  br i1 %tobool, label %if.then, label %if.end, !dbg !2410

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !2411
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %2, align 8, !dbg !2411
  %4 = bitcast %struct.VEC_loop_p_heap* %3 to i8*, !dbg !2411
  call void @free(i8* %4), !dbg !2411
  br label %if.end, !dbg !2411

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !2410
  store %struct.VEC_loop_p_heap* null, %struct.VEC_loop_p_heap** %5, align 8, !dbg !2410
  ret void, !dbg !2410
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sese_insert_phis_for_liveouts(%struct.sese_s* %region, %struct.basic_block_def* %bb, %struct.edge_def* %false_e, %struct.edge_def* %true_e) #0 !dbg !2413 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %false_e.addr = alloca %struct.edge_def*, align 8
  %true_e.addr = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %liveouts = alloca %struct.bitmap_head_def*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !2416, metadata !DIExpression()), !dbg !2417
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2418, metadata !DIExpression()), !dbg !2419
  store %struct.edge_def* %false_e, %struct.edge_def** %false_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_e.addr, metadata !2420, metadata !DIExpression()), !dbg !2421
  store %struct.edge_def* %true_e, %struct.edge_def** %true_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_e.addr, metadata !2422, metadata !DIExpression()), !dbg !2423
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2424, metadata !DIExpression()), !dbg !2425
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !2426, metadata !DIExpression()), !dbg !2434
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %liveouts, metadata !2435, metadata !DIExpression()), !dbg !2436
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !2437
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %liveouts, align 8, !dbg !2436
  call void @update_ssa(i32 2048), !dbg !2438
  %0 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2439
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts, align 8, !dbg !2440
  call void @sese_build_liveouts(%struct.sese_s* %0, %struct.bitmap_head_def* %1), !dbg !2441
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts, align 8, !dbg !2442
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %2, i32 0, i32* %i), !dbg !2442
  br label %for.cond, !dbg !2442

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !2444
  %tobool = icmp ne i8 %call1, 0, !dbg !2442
  br i1 %tobool, label %for.body, label %for.end, !dbg !2442

for.body:                                         ; preds = %for.cond
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2446
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2447
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !2447
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !2447
  %5 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !2447
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %5, i32 0, i32 2, !dbg !2447
  %6 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !2447
  %tobool2 = icmp ne %struct.VEC_tree_gc* %6, null, !dbg !2447
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !2447

cond.true:                                        ; preds = %for.body
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2447
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !2447
  %gimple_df4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 3, !dbg !2447
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df4, align 8, !dbg !2447
  %ssa_names5 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %8, i32 0, i32 2, !dbg !2447
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names5, align 8, !dbg !2447
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %9, i32 0, i32 0, !dbg !2447
  br label %cond.end, !dbg !2447

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !2447

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2447
  %10 = load i32, i32* %i, align 4, !dbg !2447
  %call6 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %10), !dbg !2447
  %11 = load %struct.edge_def*, %struct.edge_def** %false_e.addr, align 8, !dbg !2448
  %12 = load %struct.edge_def*, %struct.edge_def** %true_e.addr, align 8, !dbg !2449
  call void @sese_add_exit_phis_edge(%struct.basic_block_def* %3, %union.tree_node* %call6, %struct.edge_def* %11, %struct.edge_def* %12), !dbg !2450
  br label %for.inc, !dbg !2450

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !2444
  br label %for.cond, !dbg !2444, !llvm.loop !2451

for.end:                                          ; preds = %for.cond
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts, align 8, !dbg !2453
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %13), !dbg !2453
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %liveouts, align 8, !dbg !2453
  call void @update_ssa(i32 2048), !dbg !2454
  ret void, !dbg !2455
}

declare dso_local void @update_ssa(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sese_build_liveouts(%struct.sese_s* %region, %struct.bitmap_head_def* %liveouts) #0 !dbg !2456 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %liveouts.addr = alloca %struct.bitmap_head_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !2459, metadata !DIExpression()), !dbg !2460
  store %struct.bitmap_head_def* %liveouts, %struct.bitmap_head_def** %liveouts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %liveouts.addr, metadata !2461, metadata !DIExpression()), !dbg !2462
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2463, metadata !DIExpression()), !dbg !2464
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2465
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2465
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2465
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2465
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !2465
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2465
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !2465
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2465
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !2465
  br label %for.cond, !dbg !2465

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2467
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2467
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2467
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2467
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2467
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !2467
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2467
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !2467
  br i1 %cmp, label %for.body, label %for.end, !dbg !2465

for.body:                                         ; preds = %for.cond
  %8 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2469
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts.addr, align 8, !dbg !2470
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2471
  call void @sese_build_liveouts_bb(%struct.sese_s* %8, %struct.bitmap_head_def* %9, %struct.basic_block_def* %10), !dbg !2472
  br label %for.inc, !dbg !2472

for.inc:                                          ; preds = %for.body
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2467
  %next_bb3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 6, !dbg !2467
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb3, align 8, !dbg !2467
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !2467
  br label %for.cond, !dbg !2467, !llvm.loop !2473

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !2475
  %tobool = icmp ne i32 %13, 0, !dbg !2475
  br i1 %tobool, label %if.then, label %if.end, !dbg !2477

if.then:                                          ; preds = %for.end
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2478
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !2478
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !2478
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !2478
  %x_entry_block_ptr6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 0, !dbg !2478
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr6, align 8, !dbg !2478
  %next_bb7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 6, !dbg !2478
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb7, align 8, !dbg !2478
  store %struct.basic_block_def* %17, %struct.basic_block_def** %bb, align 8, !dbg !2478
  br label %for.cond8, !dbg !2478

for.cond8:                                        ; preds = %for.inc14, %if.then
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2480
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2480
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !2480
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !2480
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !2480
  %x_exit_block_ptr11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 1, !dbg !2480
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr11, align 8, !dbg !2480
  %cmp12 = icmp ne %struct.basic_block_def* %18, %21, !dbg !2480
  br i1 %cmp12, label %for.body13, label %for.end16, !dbg !2478

for.body13:                                       ; preds = %for.cond8
  %22 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !2482
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts.addr, align 8, !dbg !2483
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2484
  call void @sese_reset_debug_liveouts_bb(%struct.sese_s* %22, %struct.bitmap_head_def* %23, %struct.basic_block_def* %24), !dbg !2485
  br label %for.inc14, !dbg !2485

for.inc14:                                        ; preds = %for.body13
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2480
  %next_bb15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 6, !dbg !2480
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb15, align 8, !dbg !2480
  store %struct.basic_block_def* %26, %struct.basic_block_def** %bb, align 8, !dbg !2480
  br label %for.cond8, !dbg !2480, !llvm.loop !2486

for.end16:                                        ; preds = %for.cond8
  br label %if.end, !dbg !2487

if.end:                                           ; preds = %for.end16, %for.end
  ret void, !dbg !2488
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !2489 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !2497, metadata !DIExpression()), !dbg !2498
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !2499, metadata !DIExpression()), !dbg !2500
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !2501, metadata !DIExpression()), !dbg !2502
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !2503, metadata !DIExpression()), !dbg !2504
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !2505
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !2506
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !2506
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2507
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !2508
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !2509
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2510
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !2511
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !2512
  br label %while.body, !dbg !2513

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2514
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !2517
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !2517
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !2514
  br i1 %tobool, label %if.end, label %if.then, !dbg !2518

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2519
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !2521
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !2522
  br label %while.end, !dbg !2523

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2524
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !2526
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !2526
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !2527
  %9 = load i32, i32* %indx, align 8, !dbg !2527
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !2528
  %div = udiv i32 %10, 128, !dbg !2529
  %cmp = icmp uge i32 %9, %div, !dbg !2530
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !2531

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !2532

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2533
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !2534
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !2534
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !2535
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !2535
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2536
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !2537
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !2538
  br label %while.body, !dbg !2513, !llvm.loop !2539

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2541
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !2543
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !2543
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !2544
  %17 = load i32, i32* %indx9, align 8, !dbg !2544
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !2545
  %div10 = udiv i32 %18, 128, !dbg !2546
  %cmp11 = icmp ne i32 %17, %div10, !dbg !2547
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !2548

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2549
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !2550
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !2550
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !2551
  %21 = load i32, i32* %indx14, align 8, !dbg !2551
  %mul = mul i32 %21, 128, !dbg !2552
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !2553
  br label %if.end15, !dbg !2554

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !2555
  %div16 = udiv i32 %22, 64, !dbg !2556
  %rem = urem i32 %div16, 2, !dbg !2557
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2558
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !2559
  store i32 %rem, i32* %word_no, align 8, !dbg !2560
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2561
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !2562
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !2562
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !2563
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2564
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !2565
  %27 = load i32, i32* %word_no18, align 8, !dbg !2565
  %idxprom = zext i32 %27 to i64, !dbg !2561
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !2561
  %28 = load i64, i64* %arrayidx, align 8, !dbg !2561
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2566
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !2567
  store i64 %28, i64* %bits19, align 8, !dbg !2568
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !2569
  %rem20 = urem i32 %30, 64, !dbg !2570
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2571
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !2572
  %32 = load i64, i64* %bits21, align 8, !dbg !2573
  %sh_prom = zext i32 %rem20 to i64, !dbg !2573
  %shr = lshr i64 %32, %sh_prom, !dbg !2573
  store i64 %shr, i64* %bits21, align 8, !dbg !2573
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2574
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !2575
  %34 = load i64, i64* %bits22, align 8, !dbg !2575
  %tobool23 = icmp ne i64 %34, 0, !dbg !2576
  %lnot = xor i1 %tobool23, true, !dbg !2576
  %lnot.ext = zext i1 %lnot to i32, !dbg !2576
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !2577
  %add = add i32 %35, %lnot.ext, !dbg !2577
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !2577
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !2578
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !2579
  store i32 %36, i32* %37, align 4, !dbg !2580
  ret void, !dbg !2581
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !2582 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !2585, metadata !DIExpression()), !dbg !2586
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !2587, metadata !DIExpression()), !dbg !2588
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2589
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !2591
  %1 = load i64, i64* %bits, align 8, !dbg !2591
  %tobool = icmp ne i64 %1, 0, !dbg !2589
  br i1 %tobool, label %if.then, label %if.end, !dbg !2592

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !2593

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !2594), !dbg !2596
  br label %while.cond, !dbg !2597

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2598
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !2599
  %3 = load i64, i64* %bits1, align 8, !dbg !2599
  %and = and i64 %3, 1, !dbg !2600
  %tobool2 = icmp ne i64 %and, 0, !dbg !2601
  %lnot = xor i1 %tobool2, true, !dbg !2601
  br i1 %lnot, label %while.body, label %while.end, !dbg !2597

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2602
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !2604
  %5 = load i64, i64* %bits3, align 8, !dbg !2605
  %shr = lshr i64 %5, 1, !dbg !2605
  store i64 %shr, i64* %bits3, align 8, !dbg !2605
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !2606
  %7 = load i32, i32* %6, align 4, !dbg !2607
  %add = add i32 %7, 1, !dbg !2607
  store i32 %add, i32* %6, align 4, !dbg !2607
  br label %while.cond, !dbg !2597, !llvm.loop !2608

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !2610
  br label %return, !dbg !2610

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !2611
  %9 = load i32, i32* %8, align 4, !dbg !2612
  %add4 = add i32 %9, 64, !dbg !2613
  %sub = sub i32 %add4, 1, !dbg !2614
  %div = udiv i32 %sub, 64, !dbg !2615
  %mul = mul i32 %div, 64, !dbg !2616
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !2617
  store i32 %mul, i32* %10, align 4, !dbg !2618
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2619
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !2620
  %12 = load i32, i32* %word_no, align 8, !dbg !2621
  %inc = add i32 %12, 1, !dbg !2621
  store i32 %inc, i32* %word_no, align 8, !dbg !2621
  br label %while.body6, !dbg !2622

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !2623

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2625
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !2626
  %14 = load i32, i32* %word_no8, align 8, !dbg !2626
  %cmp = icmp ne i32 %14, 2, !dbg !2627
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !2623

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2628
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !2630
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !2630
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !2631
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2632
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !2633
  %18 = load i32, i32* %word_no11, align 8, !dbg !2633
  %idxprom = zext i32 %18 to i64, !dbg !2628
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !2628
  %19 = load i64, i64* %arrayidx, align 8, !dbg !2628
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2634
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !2635
  store i64 %19, i64* %bits12, align 8, !dbg !2636
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2637
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !2639
  %22 = load i64, i64* %bits13, align 8, !dbg !2639
  %tobool14 = icmp ne i64 %22, 0, !dbg !2637
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !2640

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !2641

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !2642
  %24 = load i32, i32* %23, align 4, !dbg !2643
  %add17 = add i32 %24, 64, !dbg !2643
  store i32 %add17, i32* %23, align 4, !dbg !2643
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2644
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !2645
  %26 = load i32, i32* %word_no18, align 8, !dbg !2646
  %inc19 = add i32 %26, 1, !dbg !2646
  store i32 %inc19, i32* %word_no18, align 8, !dbg !2646
  br label %while.cond7, !dbg !2623, !llvm.loop !2647

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2649
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !2650
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !2650
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !2651
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !2651
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2652
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !2653
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !2654
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2655
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !2657
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !2657
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !2655
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !2658

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !2659
  br label %return, !dbg !2659

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2660
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !2661
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !2661
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !2662
  %35 = load i32, i32* %indx, align 8, !dbg !2662
  %mul28 = mul i32 %35, 128, !dbg !2663
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !2664
  store i32 %mul28, i32* %36, align 4, !dbg !2665
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2666
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !2667
  store i32 0, i32* %word_no29, align 8, !dbg !2668
  br label %while.body6, !dbg !2622, !llvm.loop !2669

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !2671
  ret i8 %38, !dbg !2671
}

; Function Attrs: noinline nounwind uwtable
define internal void @sese_add_exit_phis_edge(%struct.basic_block_def* %exit, %union.tree_node* %use, %struct.edge_def* %false_e, %struct.edge_def* %true_e) #0 !dbg !2672 {
entry:
  %exit.addr = alloca %struct.basic_block_def*, align 8
  %use.addr = alloca %union.tree_node*, align 8
  %false_e.addr = alloca %struct.edge_def*, align 8
  %true_e.addr = alloca %struct.edge_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %exit, %struct.basic_block_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit.addr, metadata !2675, metadata !DIExpression()), !dbg !2676
  store %union.tree_node* %use, %union.tree_node** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %use.addr, metadata !2677, metadata !DIExpression()), !dbg !2678
  store %struct.edge_def* %false_e, %struct.edge_def** %false_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_e.addr, metadata !2679, metadata !DIExpression()), !dbg !2680
  store %struct.edge_def* %true_e, %struct.edge_def** %true_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_e.addr, metadata !2681, metadata !DIExpression()), !dbg !2682
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !2683, metadata !DIExpression()), !dbg !2684
  %0 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !2685
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %exit.addr, align 8, !dbg !2686
  %call = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %0, %struct.basic_block_def* %1), !dbg !2687
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %phi, align 8, !dbg !2684
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !2688
  %call1 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %2), !dbg !2689
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !2690
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !2691
  %call2 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %4), !dbg !2692
  %call3 = call %union.tree_node* @create_new_def_for(%union.tree_node* %call1, %union.gimple_statement_d* %3, %union.tree_node** %call2), !dbg !2693
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !2694
  %6 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !2695
  %7 = load %struct.edge_def*, %struct.edge_def** %false_e.addr, align 8, !dbg !2696
  call void @add_phi_arg(%union.gimple_statement_d* %5, %union.tree_node* %6, %struct.edge_def* %7, i32 0), !dbg !2697
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !2698
  %9 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !2699
  %10 = load %struct.edge_def*, %struct.edge_def** %true_e.addr, align 8, !dbg !2700
  call void @add_phi_arg(%union.gimple_statement_d* %8, %union.tree_node* %9, %struct.edge_def* %10, i32 0), !dbg !2701
  ret void, !dbg !2702
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !2703 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !2708, metadata !DIExpression()), !dbg !2709
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2710, metadata !DIExpression()), !dbg !2709
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2709
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !2709
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2709

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2709
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2709
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !2709
  %3 = load i32, i32* %num, align 8, !dbg !2709
  %cmp = icmp ult i32 %1, %3, !dbg !2709
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2711
  %land.ext = zext i1 %4 to i32, !dbg !2709
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2709
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !2709
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2709
  %idxprom = zext i32 %6 to i64, !dbg !2709
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !2709
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2709
  ret %union.tree_node* %7, !dbg !2709
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !2712 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !2715, metadata !DIExpression()), !dbg !2716
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !2717, metadata !DIExpression()), !dbg !2718
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2719
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !2720
  %1 = load i64, i64* %bits, align 8, !dbg !2721
  %shr = lshr i64 %1, 1, !dbg !2721
  store i64 %shr, i64* %bits, align 8, !dbg !2721
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !2722
  %3 = load i32, i32* %2, align 4, !dbg !2723
  %add = add i32 %3, 1, !dbg !2723
  store i32 %add, i32* %2, align 4, !dbg !2723
  ret void, !dbg !2724
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_rename(%struct.htab* %map, %union.tree_node* %old_name, %union.tree_node* %expr) #0 !dbg !2725 {
entry:
  %map.addr = alloca %struct.htab*, align 8
  %old_name.addr = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.rename_map_elt_s, align 8
  %slot = alloca i8**, align 8
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !2728, metadata !DIExpression()), !dbg !2729
  store %union.tree_node* %old_name, %union.tree_node** %old_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name.addr, metadata !2730, metadata !DIExpression()), !dbg !2731
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !2732, metadata !DIExpression()), !dbg !2733
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s* %tmp, metadata !2734, metadata !DIExpression()), !dbg !2735
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !2736, metadata !DIExpression()), !dbg !2737
  %0 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !2738
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2740
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !2741
  br i1 %cmp, label %if.then, label %if.end, !dbg !2742

if.then:                                          ; preds = %entry
  br label %return, !dbg !2743

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !2744
  %old_name1 = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %tmp, i32 0, i32 0, !dbg !2745
  store %union.tree_node* %2, %union.tree_node** %old_name1, align 8, !dbg !2746
  %3 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !2747
  %4 = bitcast %struct.rename_map_elt_s* %tmp to i8*, !dbg !2748
  %call = call i8** @htab_find_slot(%struct.htab* %3, i8* %4, i32 1), !dbg !2749
  store i8** %call, i8*** %slot, align 8, !dbg !2750
  %5 = load i8**, i8*** %slot, align 8, !dbg !2751
  %tobool = icmp ne i8** %5, null, !dbg !2751
  br i1 %tobool, label %if.end3, label %if.then2, !dbg !2753

if.then2:                                         ; preds = %if.end
  br label %return, !dbg !2754

if.end3:                                          ; preds = %if.end
  %6 = load i8**, i8*** %slot, align 8, !dbg !2755
  %7 = load i8*, i8** %6, align 8, !dbg !2757
  %tobool4 = icmp ne i8* %7, null, !dbg !2757
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !2758

if.then5:                                         ; preds = %if.end3
  %8 = load i8**, i8*** %slot, align 8, !dbg !2759
  %9 = load i8*, i8** %8, align 8, !dbg !2760
  call void @free(i8* %9), !dbg !2761
  br label %if.end6, !dbg !2761

if.end6:                                          ; preds = %if.then5, %if.end3
  %10 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !2762
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2763
  %call7 = call %struct.rename_map_elt_s* @new_rename_map_elt(%union.tree_node* %10, %union.tree_node* %11), !dbg !2764
  %12 = bitcast %struct.rename_map_elt_s* %call7 to i8*, !dbg !2764
  %13 = load i8**, i8*** %slot, align 8, !dbg !2765
  store i8* %12, i8** %13, align 8, !dbg !2766
  br label %return, !dbg !2767

return:                                           ; preds = %if.end6, %if.then2, %if.then
  ret void, !dbg !2767
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rename_map_elt_s* @new_rename_map_elt(%union.tree_node* %old_name, %union.tree_node* %expr) #0 !dbg !2768 {
entry:
  %old_name.addr = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %res = alloca %struct.rename_map_elt_s*, align 8
  store %union.tree_node* %old_name, %union.tree_node** %old_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name.addr, metadata !2771, metadata !DIExpression()), !dbg !2772
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !2773, metadata !DIExpression()), !dbg !2774
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %res, metadata !2775, metadata !DIExpression()), !dbg !2776
  %call = call i8* @xmalloc(i64 16), !dbg !2777
  %0 = bitcast i8* %call to %struct.rename_map_elt_s*, !dbg !2777
  store %struct.rename_map_elt_s* %0, %struct.rename_map_elt_s** %res, align 8, !dbg !2778
  %1 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !2779
  %2 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %res, align 8, !dbg !2780
  %old_name1 = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %2, i32 0, i32 0, !dbg !2781
  store %union.tree_node* %1, %union.tree_node** %old_name1, align 8, !dbg !2782
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2783
  %4 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %res, align 8, !dbg !2784
  %expr2 = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %4, i32 0, i32 1, !dbg !2785
  store %union.tree_node* %3, %union.tree_node** %expr2, align 8, !dbg !2786
  %5 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %res, align 8, !dbg !2787
  ret %struct.rename_map_elt_s* %5, !dbg !2788
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rename_nb_iterations(%struct.htab* %rename_map) #0 !dbg !2789 {
entry:
  %rename_map.addr = alloca %struct.htab*, align 8
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  store %struct.htab* %rename_map, %struct.htab** %rename_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %rename_map.addr, metadata !2790, metadata !DIExpression()), !dbg !2791
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !2792, metadata !DIExpression()), !dbg !2798
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2799, metadata !DIExpression()), !dbg !2800
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !2801
  br label %for.cond, !dbg !2801

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2803
  %tobool = icmp ne %struct.loop* %0, null, !dbg !2801
  br i1 %tobool, label %for.body, label %for.end, !dbg !2801

for.body:                                         ; preds = %for.cond
  %1 = load %struct.htab*, %struct.htab** %rename_map.addr, align 8, !dbg !2805
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2806
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 11, !dbg !2807
  %3 = load %union.tree_node*, %union.tree_node** %nb_iterations, align 8, !dbg !2807
  %call = call %union.tree_node* @rename_variables_in_expr(%struct.htab* %1, %union.tree_node* %3), !dbg !2808
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2809
  %nb_iterations1 = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 11, !dbg !2810
  store %union.tree_node* %call, %union.tree_node** %nb_iterations1, align 8, !dbg !2811
  br label %for.inc, !dbg !2809

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2803
  br label %for.cond, !dbg !2803, !llvm.loop !2812

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2814
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !2815 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !2819, metadata !DIExpression()), !dbg !2820
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !2821, metadata !DIExpression()), !dbg !2822
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2823, metadata !DIExpression()), !dbg !2824
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !2825, metadata !DIExpression()), !dbg !2826
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2827, metadata !DIExpression()), !dbg !2828
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !2829, metadata !DIExpression()), !dbg !2830
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2831
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !2832
  store i32 0, i32* %idx, align 8, !dbg !2833
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2834
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2834
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2834
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2834
  %tobool = icmp ne %struct.loops* %2, null, !dbg !2834
  br i1 %tobool, label %if.end, label %if.then, !dbg !2836

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2837
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !2839
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !2840
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2841
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !2842
  br label %return, !dbg !2843

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !2844
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !2844
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2845
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !2846
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !2847
  %6 = load i32, i32* %flags.addr, align 4, !dbg !2848
  %and = and i32 %6, 1, !dbg !2849
  %tobool3 = icmp ne i32 %and, 0, !dbg !2850
  %7 = zext i1 %tobool3 to i64, !dbg !2850
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !2850
  store i32 %cond, i32* %mn, align 4, !dbg !2851
  %8 = load i32, i32* %flags.addr, align 4, !dbg !2852
  %and4 = and i32 %8, 4, !dbg !2854
  %tobool5 = icmp ne i32 %and4, 0, !dbg !2854
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !2855

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !2856
  br label %for.cond, !dbg !2859

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2860
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2860
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !2860
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !2860
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !2860
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !2860
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !2860
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !2860

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2860
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2860
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !2860
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !2860
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !2860
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !2860
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !2860
  br label %cond.end, !dbg !2860

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2860

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2860
  %15 = load i32, i32* %i, align 4, !dbg !2860
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !2860
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2862
  br i1 %tobool15, label %for.body, label %for.end, !dbg !2862

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2863
  %cmp = icmp ne %struct.loop* %16, null, !dbg !2865
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !2866

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2867
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !2868
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2868
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !2869
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !2870

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2871
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !2872
  %20 = load i32, i32* %num, align 8, !dbg !2872
  %21 = load i32, i32* %mn, align 4, !dbg !2873
  %cmp18 = icmp sge i32 %20, %21, !dbg !2874
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !2875

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2876
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !2876
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !2876
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !2876
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !2876

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2876
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !2876
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !2876
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !2876
  br label %cond.end26, !dbg !2876

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !2876

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !2876
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2876
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !2876
  %27 = load i32, i32* %num28, align 8, !dbg !2876
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !2876
  br label %if.end30, !dbg !2876

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !2873

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !2877
  %inc = add i32 %28, 1, !dbg !2877
  store i32 %inc, i32* %i, align 4, !dbg !2877
  br label %for.cond, !dbg !2878, !llvm.loop !2879

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !2881

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !2882
  %and31 = and i32 %29, 2, !dbg !2884
  %tobool32 = icmp ne i32 %and31, 0, !dbg !2884
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !2885

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2886
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !2886
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !2886
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !2886
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !2889
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !2889
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !2890
  br label %for.cond36, !dbg !2891

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2892
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !2894
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !2894
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !2895
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !2896

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !2897

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2898
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !2899
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !2899
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !2900
  br label %for.cond36, !dbg !2901, !llvm.loop !2902

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !2904

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2905
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !2908
  %38 = load i32, i32* %num43, align 8, !dbg !2908
  %39 = load i32, i32* %mn, align 4, !dbg !2909
  %cmp44 = icmp sge i32 %38, %39, !dbg !2910
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !2911

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2912
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !2912
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !2912
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !2912
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !2912

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2912
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !2912
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !2912
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !2912
  br label %cond.end52, !dbg !2912

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !2912

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !2912
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2912
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !2912
  %45 = load i32, i32* %num54, align 8, !dbg !2912
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !2912
  br label %if.end56, !dbg !2912

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2913
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !2915
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !2915
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !2913
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !2916

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2917
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !2920
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !2920
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !2921
  br label %for.cond60, !dbg !2922

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2923
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !2925
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !2925
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !2926
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !2927

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !2928

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2929
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !2930
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !2930
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !2931
  br label %for.cond60, !dbg !2932, !llvm.loop !2933

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !2935

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2936
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !2938
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !2938
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !2939

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !2940

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2941
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !2942
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !2943
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !2904, !llvm.loop !2944

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !2946

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2947
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !2947
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !2947
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !2947
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !2949
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !2949
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !2950
  br label %while.body79, !dbg !2951

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2952
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !2955
  %60 = load i32, i32* %num80, align 8, !dbg !2955
  %61 = load i32, i32* %mn, align 4, !dbg !2956
  %cmp81 = icmp sge i32 %60, %61, !dbg !2957
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !2958

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2959
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !2959
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !2959
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !2959
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !2959

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2959
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !2959
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !2959
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !2959
  br label %cond.end89, !dbg !2959

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !2959

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !2959
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2959
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !2959
  %67 = load i32, i32* %num91, align 8, !dbg !2959
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !2959
  br label %if.end93, !dbg !2959

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2960
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !2962
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !2962
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !2963
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !2964

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2965
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !2966
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !2966
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !2967
  br label %if.end110, !dbg !2968

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !2969

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2971
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !2972
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !2973

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2974
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !2975
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !2975
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !2976
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !2977
  br i1 %75, label %while.body103, label %while.end105, !dbg !2969

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2978
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !2979
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !2980
  br label %while.cond99, !dbg !2969, !llvm.loop !2981

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2983
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !2985
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !2986

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !2987

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2988
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !2989
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !2989
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !2990
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !2951, !llvm.loop !2991

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2993
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2994
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !2995
  br label %return, !dbg !2996

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !2996
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @rename_variables_in_expr(%struct.htab* %m, %union.tree_node* %t) #0 !dbg !2997 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %m.addr = alloca %struct.htab*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  store %struct.htab* %m, %struct.htab** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %m.addr, metadata !3000, metadata !DIExpression()), !dbg !3001
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3002, metadata !DIExpression()), !dbg !3003
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3004
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !3004
  br i1 %tobool, label %if.end, label %if.then, !dbg !3006

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3007
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !3008
  br label %return, !dbg !3008

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3009
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3009
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3009
  %bf.load = load i64, i64* %3, align 8, !dbg !3009
  %bf.clear = and i64 %bf.load, 65535, !dbg !3009
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3009
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3011
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !3012

if.then1:                                         ; preds = %if.end
  %4 = load %struct.htab*, %struct.htab** %m.addr, align 8, !dbg !3013
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3014
  %call = call %union.tree_node* @get_rename(%struct.htab* %4, %union.tree_node* %5), !dbg !3015
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !3016
  br label %return, !dbg !3016

if.end2:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3017
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3017
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3017
  %bf.load4 = load i64, i64* %7, align 8, !dbg !3017
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !3017
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3017
  %idxprom = sext i32 %bf.cast6 to i64, !dbg !3017
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom, !dbg !3017
  %8 = load i8, i8* %arrayidx, align 1, !dbg !3017
  %conv = zext i8 %8 to i32, !dbg !3017
  switch i32 %conv, label %sw.default [
    i32 3, label %sw.bb
    i32 2, label %sw.bb12
    i32 1, label %sw.bb20
  ], !dbg !3018

sw.bb:                                            ; preds = %if.end2
  %9 = load %struct.htab*, %struct.htab** %m.addr, align 8, !dbg !3019
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3021
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !3021
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3021
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !3021
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !3021
  %call8 = call %union.tree_node* @rename_variables_in_expr(%struct.htab* %9, %union.tree_node* %11), !dbg !3022
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3023
  %exp9 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !3023
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !3023
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 2, !dbg !3023
  store %union.tree_node* %call8, %union.tree_node** %arrayidx11, align 8, !dbg !3024
  br label %sw.bb12, !dbg !3023

sw.bb12:                                          ; preds = %if.end2, %sw.bb
  %13 = load %struct.htab*, %struct.htab** %m.addr, align 8, !dbg !3025
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3026
  %exp13 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !3026
  %operands14 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp13, i32 0, i32 3, !dbg !3026
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands14, i64 0, i64 1, !dbg !3026
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !3026
  %call16 = call %union.tree_node* @rename_variables_in_expr(%struct.htab* %13, %union.tree_node* %15), !dbg !3027
  %16 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3028
  %exp17 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !3028
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !3028
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 1, !dbg !3028
  store %union.tree_node* %call16, %union.tree_node** %arrayidx19, align 8, !dbg !3029
  br label %sw.bb20, !dbg !3028

sw.bb20:                                          ; preds = %if.end2, %sw.bb12
  %17 = load %struct.htab*, %struct.htab** %m.addr, align 8, !dbg !3030
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3031
  %exp21 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !3031
  %operands22 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp21, i32 0, i32 3, !dbg !3031
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands22, i64 0, i64 0, !dbg !3031
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !3031
  %call24 = call %union.tree_node* @rename_variables_in_expr(%struct.htab* %17, %union.tree_node* %19), !dbg !3032
  %20 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3033
  %exp25 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !3033
  %operands26 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp25, i32 0, i32 3, !dbg !3033
  %arrayidx27 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands26, i64 0, i64 0, !dbg !3033
  store %union.tree_node* %call24, %union.tree_node** %arrayidx27, align 8, !dbg !3034
  br label %sw.default, !dbg !3033

sw.default:                                       ; preds = %if.end2, %sw.bb20
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3035
  store %union.tree_node* %21, %union.tree_node** %retval, align 8, !dbg !3036
  br label %return, !dbg !3036

return:                                           ; preds = %sw.default, %if.then1, %if.then
  %22 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3037
  ret %union.tree_node* %22, !dbg !3037
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !3038 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3041, metadata !DIExpression()), !dbg !3042
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3043, metadata !DIExpression()), !dbg !3044
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !3045, metadata !DIExpression()), !dbg !3046
  br label %while.cond, !dbg !3047

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3048
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !3048
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3048
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3048
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3048

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3048
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !3048
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !3048
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !3048
  br label %cond.end, !dbg !3048

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !3048

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3048
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3048
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !3048
  %5 = load i32, i32* %idx, align 8, !dbg !3048
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !3048
  %tobool2 = icmp ne i32 %call, 0, !dbg !3047
  br i1 %tobool2, label %while.body, label %while.end, !dbg !3047

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3049
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !3051
  %7 = load i32, i32* %idx3, align 8, !dbg !3052
  %inc = add i32 %7, 1, !dbg !3052
  store i32 %inc, i32* %idx3, align 8, !dbg !3052
  %8 = load i32, i32* %anum, align 4, !dbg !3053
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !3054
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3055
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !3056
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3057
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !3059
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !3059
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3060

if.then:                                          ; preds = %while.body
  br label %return, !dbg !3061

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !3047, !llvm.loop !3062

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3064
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !3064
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !3064
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3065
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !3066
  br label %return, !dbg !3067

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !3067
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rename_sese_parameters(%struct.htab* %rename_map, %struct.sese_s* %region) #0 !dbg !3068 {
entry:
  %rename_map.addr = alloca %struct.htab*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %i = alloca i32, align 4
  %p = alloca %union.tree_node*, align 8
  store %struct.htab* %rename_map, %struct.htab** %rename_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %rename_map.addr, metadata !3071, metadata !DIExpression()), !dbg !3072
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !3073, metadata !DIExpression()), !dbg !3074
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3075, metadata !DIExpression()), !dbg !3076
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !3077, metadata !DIExpression()), !dbg !3078
  store i32 0, i32* %i, align 4, !dbg !3079
  br label %for.cond, !dbg !3081

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !3082
  %params = getelementptr inbounds %struct.sese_s, %struct.sese_s* %0, i32 0, i32 2, !dbg !3082
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !3082
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !3082
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3082

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !3082
  %params1 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %2, i32 0, i32 2, !dbg !3082
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params1, align 8, !dbg !3082
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !3082
  br label %cond.end, !dbg !3082

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3082

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3082
  %4 = load i32, i32* %i, align 4, !dbg !3082
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %4, %union.tree_node** %p), !dbg !3082
  %tobool2 = icmp ne i32 %call, 0, !dbg !3084
  br i1 %tobool2, label %for.body, label %for.end, !dbg !3084

for.body:                                         ; preds = %cond.end
  %5 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !3085
  %params3 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %5, i32 0, i32 2, !dbg !3085
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params3, align 8, !dbg !3085
  %tobool4 = icmp ne %struct.VEC_tree_heap* %6, null, !dbg !3085
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !3085

cond.true5:                                       ; preds = %for.body
  %7 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !3085
  %params6 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %7, i32 0, i32 2, !dbg !3085
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params6, align 8, !dbg !3085
  %base7 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %8, i32 0, i32 0, !dbg !3085
  br label %cond.end9, !dbg !3085

cond.false8:                                      ; preds = %for.body
  br label %cond.end9, !dbg !3085

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_tree_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !3085
  %9 = load i32, i32* %i, align 4, !dbg !3085
  %10 = load %struct.htab*, %struct.htab** %rename_map.addr, align 8, !dbg !3085
  %11 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !3085
  %call11 = call %union.tree_node* @rename_variables_in_expr(%struct.htab* %10, %union.tree_node* %11), !dbg !3085
  %call12 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond10, i32 %9, %union.tree_node* %call11), !dbg !3085
  br label %for.inc, !dbg !3085

for.inc:                                          ; preds = %cond.end9
  %12 = load i32, i32* %i, align 4, !dbg !3086
  %inc = add nsw i32 %12, 1, !dbg !3086
  store i32 %inc, i32* %i, align 4, !dbg !3086
  br label %for.cond, !dbg !3087, !llvm.loop !3088

for.end:                                          ; preds = %cond.end
  ret void, !dbg !3090
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !3091 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3094, metadata !DIExpression()), !dbg !3095
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3096, metadata !DIExpression()), !dbg !3095
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !3097, metadata !DIExpression()), !dbg !3095
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3098
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !3098
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3098

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3098
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3098
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !3098
  %3 = load i32, i32* %num, align 8, !dbg !3098
  %cmp = icmp ult i32 %1, %3, !dbg !3098
  br i1 %cmp, label %if.then, label %if.else, !dbg !3095

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3100
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !3100
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3100
  %idxprom = zext i32 %5 to i64, !dbg !3100
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !3100
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3100
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !3100
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !3100
  store i32 1, i32* %retval, align 4, !dbg !3100
  br label %return, !dbg !3100

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !3102
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !3102
  store i32 0, i32* %retval, align 4, !dbg !3102
  br label %return, !dbg !3102

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3095
  ret i32 %9, !dbg !3095
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node* %obj_) #0 !dbg !3104 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %union.tree_node*, align 8
  %old_obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3108, metadata !DIExpression()), !dbg !3109
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3110, metadata !DIExpression()), !dbg !3109
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !3111, metadata !DIExpression()), !dbg !3109
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_obj_, metadata !3112, metadata !DIExpression()), !dbg !3109
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !3109
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3109
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !3109
  %2 = load i32, i32* %num, align 8, !dbg !3109
  %cmp = icmp ult i32 %0, %2, !dbg !3109
  %conv = zext i1 %cmp to i32, !dbg !3109
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3109
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 2, !dbg !3109
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !3109
  %idxprom = zext i32 %4 to i64, !dbg !3109
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !3109
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3109
  store %union.tree_node* %5, %union.tree_node** %old_obj_, align 8, !dbg !3109
  %6 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !3109
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3109
  %vec1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 2, !dbg !3109
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !3109
  %idxprom2 = zext i32 %8 to i64, !dbg !3109
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec1, i64 0, i64 %idxprom2, !dbg !3109
  store %union.tree_node* %6, %union.tree_node** %arrayidx3, align 8, !dbg !3109
  %9 = load %union.tree_node*, %union.tree_node** %old_obj_, align 8, !dbg !3109
  ret %union.tree_node* %9, !dbg !3109
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sese_adjust_liveout_phis(%struct.sese_s* %region, %struct.htab* %rename_map, %struct.basic_block_def* %bb, %struct.edge_def* %false_e, %struct.edge_def* %true_e) #0 !dbg !3113 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %rename_map.addr = alloca %struct.htab*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %false_e.addr = alloca %struct.edge_def*, align 8
  %true_e.addr = alloca %struct.edge_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %i = alloca i32, align 4
  %false_i = alloca i32, align 4
  %phi = alloca %union.gimple_statement_d*, align 8
  %res = alloca %union.tree_node*, align 8
  %old_name = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %type = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !3116, metadata !DIExpression()), !dbg !3117
  store %struct.htab* %rename_map, %struct.htab** %rename_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %rename_map.addr, metadata !3118, metadata !DIExpression()), !dbg !3119
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3120, metadata !DIExpression()), !dbg !3121
  store %struct.edge_def* %false_e, %struct.edge_def** %false_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_e.addr, metadata !3122, metadata !DIExpression()), !dbg !3123
  store %struct.edge_def* %true_e, %struct.edge_def** %true_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_e.addr, metadata !3124, metadata !DIExpression()), !dbg !3125
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !3126, metadata !DIExpression()), !dbg !3133
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3134
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !3136
  %1 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !3136
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3136
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !3136
  br label %for.cond, !dbg !3137

for.cond:                                         ; preds = %for.inc45, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !3138
  %tobool = icmp ne i8 %call, 0, !dbg !3140
  %lnot = xor i1 %tobool, true, !dbg !3140
  br i1 %lnot, label %for.body, label %for.end46, !dbg !3141

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3142, metadata !DIExpression()), !dbg !3144
  call void @llvm.dbg.declare(metadata i32* %false_i, metadata !3145, metadata !DIExpression()), !dbg !3146
  store i32 0, i32* %false_i, align 4, !dbg !3146
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3147, metadata !DIExpression()), !dbg !3148
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !3149
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !3148
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !3150, metadata !DIExpression()), !dbg !3151
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3152
  %call2 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %3), !dbg !3153
  store %union.tree_node* %call2, %union.tree_node** %res, align 8, !dbg !3151
  %4 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3154
  %call3 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !3156
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3156
  br i1 %tobool4, label %if.end, label %if.then, !dbg !3157

if.then:                                          ; preds = %for.body
  %5 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !3158
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3160
  %7 = load %struct.edge_def*, %struct.edge_def** %true_e.addr, align 8, !dbg !3161
  call void @sese_adjust_vphi(%struct.sese_s* %5, %union.gimple_statement_d* %6, %struct.edge_def* %7), !dbg !3162
  br label %for.inc45, !dbg !3163

if.end:                                           ; preds = %for.body
  store i32 0, i32* %i, align 4, !dbg !3164
  br label %for.cond5, !dbg !3166

for.cond5:                                        ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4, !dbg !3167
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3169
  %call6 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %9), !dbg !3170
  %cmp = icmp ult i32 %8, %call6, !dbg !3171
  br i1 %cmp, label %for.body7, label %for.end, !dbg !3172

for.body7:                                        ; preds = %for.cond5
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3173
  %11 = load i32, i32* %i, align 4, !dbg !3175
  %conv = zext i32 %11 to i64, !dbg !3175
  %call8 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %10, i64 %conv), !dbg !3176
  %12 = load %struct.edge_def*, %struct.edge_def** %false_e.addr, align 8, !dbg !3177
  %cmp9 = icmp eq %struct.edge_def* %call8, %12, !dbg !3178
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !3179

if.then11:                                        ; preds = %for.body7
  %13 = load i32, i32* %i, align 4, !dbg !3180
  store i32 %13, i32* %false_i, align 4, !dbg !3182
  br label %for.end, !dbg !3183

if.end12:                                         ; preds = %for.body7
  br label %for.inc, !dbg !3177

for.inc:                                          ; preds = %if.end12
  %14 = load i32, i32* %i, align 4, !dbg !3184
  %inc = add i32 %14, 1, !dbg !3184
  store i32 %inc, i32* %i, align 4, !dbg !3184
  br label %for.cond5, !dbg !3185, !llvm.loop !3186

for.end:                                          ; preds = %if.then11, %for.cond5
  store i32 0, i32* %i, align 4, !dbg !3188
  br label %for.cond13, !dbg !3190

for.cond13:                                       ; preds = %for.inc42, %for.end
  %15 = load i32, i32* %i, align 4, !dbg !3191
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3193
  %call14 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %16), !dbg !3194
  %cmp15 = icmp ult i32 %15, %call14, !dbg !3195
  br i1 %cmp15, label %for.body17, label %for.end44, !dbg !3196

for.body17:                                       ; preds = %for.cond13
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3197
  %18 = load i32, i32* %i, align 4, !dbg !3199
  %conv18 = zext i32 %18 to i64, !dbg !3199
  %call19 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %17, i64 %conv18), !dbg !3200
  %19 = load %struct.edge_def*, %struct.edge_def** %true_e.addr, align 8, !dbg !3201
  %cmp20 = icmp eq %struct.edge_def* %call19, %19, !dbg !3202
  br i1 %cmp20, label %if.then22, label %if.end41, !dbg !3203

if.then22:                                        ; preds = %for.body17
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name, metadata !3204, metadata !DIExpression()), !dbg !3206
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3207
  %21 = load i32, i32* %false_i, align 4, !dbg !3208
  %conv23 = zext i32 %21 to i64, !dbg !3208
  %call24 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %20, i64 %conv23), !dbg !3209
  store %union.tree_node* %call24, %union.tree_node** %old_name, align 8, !dbg !3206
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !3210, metadata !DIExpression()), !dbg !3211
  %22 = load %struct.htab*, %struct.htab** %rename_map.addr, align 8, !dbg !3212
  %23 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !3213
  %call25 = call %union.tree_node* @get_rename(%struct.htab* %22, %union.tree_node* %23), !dbg !3214
  store %union.tree_node* %call25, %union.tree_node** %expr, align 8, !dbg !3211
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !3215, metadata !DIExpression()), !dbg !3216
  %24 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !3217
  %25 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3217
  %cmp26 = icmp ne %union.tree_node* %24, %25, !dbg !3217
  br i1 %cmp26, label %cond.false, label %cond.true, !dbg !3217

cond.true:                                        ; preds = %if.then22
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 633, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3217
  br label %cond.end, !dbg !3217

cond.false:                                       ; preds = %if.then22
  br label %cond.end, !dbg !3217

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3217
  %26 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3218
  %base = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !3218
  %27 = bitcast %struct.tree_base* %base to i64*, !dbg !3218
  %bf.load = load i64, i64* %27, align 8, !dbg !3218
  %bf.clear = and i64 %bf.load, 65535, !dbg !3218
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3218
  %cmp28 = icmp ne i32 %bf.cast, 141, !dbg !3220
  br i1 %cmp28, label %land.lhs.true, label %if.end39, !dbg !3221

land.lhs.true:                                    ; preds = %cond.end
  %28 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !3222
  %call30 = call zeroext i8 @is_gimple_reg(%union.tree_node* %28), !dbg !3223
  %conv31 = zext i8 %call30 to i32, !dbg !3223
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !3223
  br i1 %tobool32, label %if.then33, label %if.end39, !dbg !3224

if.then33:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3225, metadata !DIExpression()), !dbg !3227
  %29 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !3228
  %common = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !3228
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3228
  %30 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !3228
  store %union.tree_node* %30, %union.tree_node** %type, align 8, !dbg !3227
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !3229, metadata !DIExpression()), !dbg !3230
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3231
  %call35 = call %union.tree_node* @create_tmp_var(%union.tree_node* %31, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)), !dbg !3232
  store %union.tree_node* %call35, %union.tree_node** %var, align 8, !dbg !3230
  %32 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3233
  %33 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3233
  %34 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3233
  %call36 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %34), !dbg !3233
  store %union.tree_node* %call36, %union.tree_node** %expr, align 8, !dbg !3234
  %35 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3235
  %call37 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %35, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !3236
  store %union.tree_node* %call37, %union.tree_node** %expr, align 8, !dbg !3237
  %36 = load %struct.edge_def*, %struct.edge_def** %true_e.addr, align 8, !dbg !3238
  %37 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3239
  %call38 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %36, %struct.gimple_seq_d* %37), !dbg !3240
  br label %if.end39, !dbg !3241

if.end39:                                         ; preds = %if.then33, %land.lhs.true, %cond.end
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3242
  %39 = load i32, i32* %i, align 4, !dbg !3242
  %call40 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %38, i32 %39), !dbg !3242
  %40 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3242
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %call40, %union.tree_node* %40), !dbg !3242
  %41 = load %struct.htab*, %struct.htab** %rename_map.addr, align 8, !dbg !3243
  %42 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !3244
  %43 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3245
  call void @set_rename(%struct.htab* %41, %union.tree_node* %42, %union.tree_node* %43), !dbg !3246
  br label %if.end41, !dbg !3247

if.end41:                                         ; preds = %if.end39, %for.body17
  br label %for.inc42, !dbg !3201

for.inc42:                                        ; preds = %if.end41
  %44 = load i32, i32* %i, align 4, !dbg !3248
  %inc43 = add i32 %44, 1, !dbg !3248
  store i32 %inc43, i32* %i, align 4, !dbg !3248
  br label %for.cond13, !dbg !3249, !llvm.loop !3250

for.end44:                                        ; preds = %for.cond13
  br label %for.inc45, !dbg !3252

for.inc45:                                        ; preds = %for.end44, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !3253
  br label %for.cond, !dbg !3254, !llvm.loop !3255

for.end46:                                        ; preds = %for.cond
  ret void, !dbg !3257
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3258 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3261, metadata !DIExpression()), !dbg !3262
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3263
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3263
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3264
  %conv = zext i1 %cmp to i32, !dbg !3264
  %conv1 = trunc i32 %conv to i8, !dbg !3265
  ret i8 %conv1, !dbg !3266
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3267 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3270, metadata !DIExpression()), !dbg !3271
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3272
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3272
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3273
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3273
  ret %union.gimple_statement_d* %1, !dbg !3274
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !3275 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3279, metadata !DIExpression()), !dbg !3280
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3281
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3282
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !3283
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3283
  ret %union.tree_node* %1, !dbg !3284
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sese_adjust_vphi(%struct.sese_s* %region, %union.gimple_statement_d* %phi, %struct.edge_def* %true_e) #0 !dbg !3285 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %true_e.addr = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  %true_arg = alloca %union.tree_node*, align 8
  %false_arg = alloca %union.tree_node*, align 8
  %before_scop_arg = alloca %union.tree_node*, align 8
  %visited = alloca %struct.simple_bitmap_def*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !3288, metadata !DIExpression()), !dbg !3289
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !3290, metadata !DIExpression()), !dbg !3291
  store %struct.edge_def* %true_e, %struct.edge_def** %true_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_e.addr, metadata !3292, metadata !DIExpression()), !dbg !3293
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3294, metadata !DIExpression()), !dbg !3295
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3296
  %call = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %0), !dbg !3296
  %cmp = icmp eq i32 %call, 2, !dbg !3296
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3296

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 465, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3296
  br label %cond.end, !dbg !3296

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3296

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3296
  store i32 0, i32* %i, align 4, !dbg !3297
  br label %for.cond, !dbg !3299

for.cond:                                         ; preds = %for.inc, %cond.end
  %1 = load i32, i32* %i, align 4, !dbg !3300
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3302
  %call1 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %2), !dbg !3303
  %cmp2 = icmp ult i32 %1, %call1, !dbg !3304
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3305

for.body:                                         ; preds = %for.cond
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3306
  %4 = load i32, i32* %i, align 4, !dbg !3308
  %conv = zext i32 %4 to i64, !dbg !3308
  %call3 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %3, i64 %conv), !dbg !3309
  %5 = load %struct.edge_def*, %struct.edge_def** %true_e.addr, align 8, !dbg !3310
  %cmp4 = icmp eq %struct.edge_def* %call3, %5, !dbg !3311
  br i1 %cmp4, label %if.then, label %if.end31, !dbg !3312

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %true_arg, metadata !3313, metadata !DIExpression()), !dbg !3315
  call void @llvm.dbg.declare(metadata %union.tree_node** %false_arg, metadata !3316, metadata !DIExpression()), !dbg !3317
  call void @llvm.dbg.declare(metadata %union.tree_node** %before_scop_arg, metadata !3318, metadata !DIExpression()), !dbg !3319
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited, metadata !3320, metadata !DIExpression()), !dbg !3332
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3333
  %7 = load i32, i32* %i, align 4, !dbg !3334
  %conv6 = zext i32 %7 to i64, !dbg !3334
  %call7 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %6, i64 %conv6), !dbg !3335
  store %union.tree_node* %call7, %union.tree_node** %true_arg, align 8, !dbg !3336
  %8 = load %union.tree_node*, %union.tree_node** %true_arg, align 8, !dbg !3337
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !3337
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !3337
  %bf.load = load i64, i64* %9, align 8, !dbg !3337
  %bf.lshr = lshr i64 %bf.load, 32, !dbg !3337
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3337
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3337
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3337
  br i1 %tobool, label %if.end, label %if.then8, !dbg !3339

if.then8:                                         ; preds = %if.then
  br label %for.end, !dbg !3340

if.end:                                           ; preds = %if.then
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3341
  %11 = load i32, i32* %i, align 4, !dbg !3342
  %cmp9 = icmp eq i32 %11, 0, !dbg !3343
  %12 = zext i1 %cmp9 to i64, !dbg !3342
  %cond11 = select i1 %cmp9, i32 1, i32 0, !dbg !3342
  %conv12 = sext i32 %cond11 to i64, !dbg !3342
  %call13 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %10, i64 %conv12), !dbg !3344
  store %union.tree_node* %call13, %union.tree_node** %false_arg, align 8, !dbg !3345
  %13 = load %union.tree_node*, %union.tree_node** %false_arg, align 8, !dbg !3346
  %base14 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !3346
  %14 = bitcast %struct.tree_base* %base14 to i64*, !dbg !3346
  %bf.load15 = load i64, i64* %14, align 8, !dbg !3346
  %bf.lshr16 = lshr i64 %bf.load15, 32, !dbg !3346
  %bf.clear17 = and i64 %bf.lshr16, 1, !dbg !3346
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !3346
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !3346
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !3348

if.then20:                                        ; preds = %if.end
  br label %for.end, !dbg !3349

if.end21:                                         ; preds = %if.end
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3350
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !3350
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3350
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3350
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 5, !dbg !3350
  %17 = load i32, i32* %x_last_basic_block, align 8, !dbg !3350
  %call22 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %17), !dbg !3351
  store %struct.simple_bitmap_def* %call22, %struct.simple_bitmap_def** %visited, align 8, !dbg !3352
  %18 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !3353
  call void @sbitmap_zero(%struct.simple_bitmap_def* %18), !dbg !3354
  %19 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !3355
  %20 = load %union.tree_node*, %union.tree_node** %false_arg, align 8, !dbg !3356
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !3357
  %call23 = call %union.tree_node* @get_vdef_before_sese(%struct.sese_s* %19, %union.tree_node* %20, %struct.simple_bitmap_def* %21), !dbg !3358
  store %union.tree_node* %call23, %union.tree_node** %before_scop_arg, align 8, !dbg !3359
  %22 = load %union.tree_node*, %union.tree_node** %before_scop_arg, align 8, !dbg !3360
  %cmp24 = icmp ne %union.tree_node* %22, null, !dbg !3360
  br i1 %cmp24, label %cond.false27, label %cond.true26, !dbg !3360

cond.true26:                                      ; preds = %if.end21
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 484, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3360
  br label %cond.end28, !dbg !3360

cond.false27:                                     ; preds = %if.end21
  br label %cond.end28, !dbg !3360

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !3360
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3361
  %24 = load i32, i32* %i, align 4, !dbg !3361
  %call30 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %23, i32 %24), !dbg !3361
  %25 = load %union.tree_node*, %union.tree_node** %before_scop_arg, align 8, !dbg !3361
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %call30, %union.tree_node* %25), !dbg !3361
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !3362
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %26, i32 0, i32 0, !dbg !3362
  %27 = load i8*, i8** %popcount, align 8, !dbg !3362
  call void @free(i8* %27), !dbg !3362
  %28 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !3362
  %29 = bitcast %struct.simple_bitmap_def* %28 to i8*, !dbg !3362
  call void @free(i8* %29), !dbg !3362
  br label %if.end31, !dbg !3363

if.end31:                                         ; preds = %cond.end28, %for.body
  br label %for.inc, !dbg !3310

for.inc:                                          ; preds = %if.end31
  %30 = load i32, i32* %i, align 4, !dbg !3364
  %inc = add i32 %30, 1, !dbg !3364
  store i32 %inc, i32* %i, align 4, !dbg !3364
  br label %for.cond, !dbg !3365, !llvm.loop !3366

for.end:                                          ; preds = %if.then8, %if.then20, %for.cond
  ret void, !dbg !3368
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !3369 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3372, metadata !DIExpression()), !dbg !3373
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3374
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3375
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !3376
  %1 = load i32, i32* %nargs, align 4, !dbg !3376
  ret i32 %1, !dbg !3377
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !3378 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3382, metadata !DIExpression()), !dbg !3383
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !3384, metadata !DIExpression()), !dbg !3385
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3386
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !3386
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !3386
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !3386
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !3386
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3386

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3386
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !3386
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !3386
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !3386
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !3386
  br label %cond.end, !dbg !3386

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3386

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3386
  %4 = load i64, i64* %i.addr, align 8, !dbg !3386
  %conv = trunc i64 %4 to i32, !dbg !3386
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !3386
  ret %struct.edge_def* %call3, !dbg !3387
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !3388 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3391, metadata !DIExpression()), !dbg !3392
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !3393, metadata !DIExpression()), !dbg !3394
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !3395, metadata !DIExpression()), !dbg !3397
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3398
  %1 = load i64, i64* %index.addr, align 8, !dbg !3399
  %conv = trunc i64 %1 to i32, !dbg !3399
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !3400
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !3397
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !3401
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !3402
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !3403
  ret %union.tree_node* %call1, !dbg !3404
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_rename(%struct.htab* %map, %union.tree_node* %old_name) #0 !dbg !3405 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %old_name.addr = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.rename_map_elt_s, align 8
  %slot = alloca i8**, align 8
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !3406, metadata !DIExpression()), !dbg !3407
  store %union.tree_node* %old_name, %union.tree_node** %old_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name.addr, metadata !3408, metadata !DIExpression()), !dbg !3409
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s* %tmp, metadata !3410, metadata !DIExpression()), !dbg !3411
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3412, metadata !DIExpression()), !dbg !3413
  %0 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !3414
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3414
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3414
  %bf.load = load i64, i64* %1, align 8, !dbg !3414
  %bf.clear = and i64 %bf.load, 65535, !dbg !3414
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3414
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3414
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3414

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 498, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3414
  br label %cond.end, !dbg !3414

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3414

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3414
  %2 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !3415
  %old_name1 = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %tmp, i32 0, i32 0, !dbg !3416
  store %union.tree_node* %2, %union.tree_node** %old_name1, align 8, !dbg !3417
  %3 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !3418
  %4 = bitcast %struct.rename_map_elt_s* %tmp to i8*, !dbg !3419
  %call = call i8** @htab_find_slot(%struct.htab* %3, i8* %4, i32 0), !dbg !3420
  store i8** %call, i8*** %slot, align 8, !dbg !3421
  %5 = load i8**, i8*** %slot, align 8, !dbg !3422
  %tobool = icmp ne i8** %5, null, !dbg !3422
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3424

land.lhs.true:                                    ; preds = %cond.end
  %6 = load i8**, i8*** %slot, align 8, !dbg !3425
  %7 = load i8*, i8** %6, align 8, !dbg !3426
  %tobool2 = icmp ne i8* %7, null, !dbg !3426
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3427

if.then:                                          ; preds = %land.lhs.true
  %8 = load i8**, i8*** %slot, align 8, !dbg !3428
  %9 = load i8*, i8** %8, align 8, !dbg !3429
  %10 = bitcast i8* %9 to %struct.rename_map_elt_s*, !dbg !3430
  %expr = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %10, i32 0, i32 1, !dbg !3431
  %11 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3431
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !3432
  br label %return, !dbg !3432

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !3433
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !3434
  br label %return, !dbg !3434

return:                                           ; preds = %if.end, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3435
  ret %union.tree_node* %13, !dbg !3435
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

declare dso_local %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def*, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !3436 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !3439, metadata !DIExpression()), !dbg !3440
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3441, metadata !DIExpression()), !dbg !3442
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3443
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !3444
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3445
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3446
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !3447
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !3447
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !3448
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3449
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3450
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !3451
  ret void, !dbg !3452
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !3453 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3456, metadata !DIExpression()), !dbg !3457
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3458, metadata !DIExpression()), !dbg !3459
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3460
  %1 = load i32, i32* %i.addr, align 4, !dbg !3461
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !3462
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !3463
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !3464
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !3465 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !3469, metadata !DIExpression()), !dbg !3470
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3471
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !3472
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3472
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !3473
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !3473
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3474
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !3475
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !3476
  ret void, !dbg !3477
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @get_true_edge_from_guard_bb(%struct.basic_block_def* %bb) #0 !dbg !3478 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3481, metadata !DIExpression()), !dbg !3482
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3483, metadata !DIExpression()), !dbg !3484
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3485, metadata !DIExpression()), !dbg !3492
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3493
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !3493
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3493
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3493
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !3493
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !3493
  store i32 %3, i32* %2, align 8, !dbg !3493
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !3493
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !3493
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !3493
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3493
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3493
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !3493
  br label %for.cond, !dbg !3493

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3495
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !3495
  %10 = load i32, i32* %9, align 8, !dbg !3495
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !3495
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !3495
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !3495
  %tobool = icmp ne i8 %call1, 0, !dbg !3493
  br i1 %tobool, label %for.body, label %for.end, !dbg !3493

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3497
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !3499
  %14 = load i32, i32* %flags, align 8, !dbg !3499
  %and = and i32 %14, 1024, !dbg !3500
  %tobool2 = icmp ne i32 %and, 0, !dbg !3500
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3501

if.then:                                          ; preds = %for.body
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3502
  store %struct.edge_def* %15, %struct.edge_def** %retval, align 8, !dbg !3503
  br label %return, !dbg !3503

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3504

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3495
  br label %for.cond, !dbg !3495, !llvm.loop !3505

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1085, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3507
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3508
  br label %return, !dbg !3508

return:                                           ; preds = %for.end, %if.then
  %16 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !3509
  ret %struct.edge_def* %16, !dbg !3509
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !3510 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !3513, metadata !DIExpression()), !dbg !3514
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !3515, metadata !DIExpression()), !dbg !3516
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !3517
  store i32 0, i32* %index, align 8, !dbg !3518
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !3519
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !3520
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !3521
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !3522
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !3522
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !3522
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !3523 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3527, metadata !DIExpression()), !dbg !3528
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !3529, metadata !DIExpression()), !dbg !3530
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3531
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !3531
  %5 = load i32, i32* %4, align 8, !dbg !3531
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !3531
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !3531
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !3531
  %tobool = icmp ne i8 %call, 0, !dbg !3531
  br i1 %tobool, label %if.else, label %if.then, !dbg !3533

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3534
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !3534
  %10 = load i32, i32* %9, align 8, !dbg !3534
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !3534
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !3534
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !3534
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !3536
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !3537
  store i8 1, i8* %retval, align 1, !dbg !3538
  br label %return, !dbg !3538

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !3539
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !3541
  store i8 0, i8* %retval, align 1, !dbg !3542
  br label %return, !dbg !3542

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !3543
  ret i8 %15, !dbg !3543
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !3544 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !3548, metadata !DIExpression()), !dbg !3549
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !3550
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !3550
  %1 = load i32, i32* %index, align 8, !dbg !3550
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !3550
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !3550
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !3550
  %5 = load i32, i32* %4, align 8, !dbg !3550
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !3550
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !3550
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !3550
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !3550
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3550

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !3550
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !3550
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !3550
  %11 = load i32, i32* %10, align 8, !dbg !3550
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !3550
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !3550
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !3550
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !3550
  br label %cond.end, !dbg !3550

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3550

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3550
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3550
  %cmp = icmp ult i32 %1, %call2, !dbg !3550
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !3550

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3550
  br label %cond.end5, !dbg !3550

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3550

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !3550
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !3551
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !3552
  %15 = load i32, i32* %index7, align 8, !dbg !3553
  %inc = add i32 %15, 1, !dbg !3553
  store i32 %inc, i32* %index7, align 8, !dbg !3553
  ret void, !dbg !3554
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @get_false_edge_from_guard_bb(%struct.basic_block_def* %bb) #0 !dbg !3555 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3556, metadata !DIExpression()), !dbg !3557
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3558, metadata !DIExpression()), !dbg !3559
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3560, metadata !DIExpression()), !dbg !3561
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3562
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !3562
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3562
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3562
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !3562
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !3562
  store i32 %3, i32* %2, align 8, !dbg !3562
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !3562
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !3562
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !3562
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3562
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3562
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !3562
  br label %for.cond, !dbg !3562

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3564
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !3564
  %10 = load i32, i32* %9, align 8, !dbg !3564
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !3564
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !3564
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !3564
  %tobool = icmp ne i8 %call1, 0, !dbg !3562
  br i1 %tobool, label %for.body, label %for.end, !dbg !3562

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3566
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !3568
  %14 = load i32, i32* %flags, align 8, !dbg !3568
  %and = and i32 %14, 1024, !dbg !3569
  %tobool2 = icmp ne i32 %and, 0, !dbg !3569
  br i1 %tobool2, label %if.end, label %if.then, !dbg !3570

if.then:                                          ; preds = %for.body
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3571
  store %struct.edge_def* %15, %struct.edge_def** %retval, align 8, !dbg !3572
  br label %return, !dbg !3572

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3573

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3564
  br label %for.cond, !dbg !3564, !llvm.loop !3574

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3576
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !3577
  br label %return, !dbg !3577

return:                                           ; preds = %for.end, %if.then
  %16 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !3578
  ret %struct.edge_def* %16, !dbg !3578
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @insert_loop_close_phis(%struct.htab* %map, %struct.loop* %loop) #0 !dbg !3579 {
entry:
  %map.addr = alloca %struct.htab*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %a = alloca %struct.alep, align 8
  %elt = alloca %struct.rename_map_elt_s*, align 8
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !3582, metadata !DIExpression()), !dbg !3583
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3584, metadata !DIExpression()), !dbg !3585
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3586, metadata !DIExpression()), !dbg !3587
  call void @llvm.dbg.declare(metadata %struct.alep* %a, metadata !3588, metadata !DIExpression()), !dbg !3589
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %elt, metadata !3590, metadata !DIExpression()), !dbg !3591
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3592
  %loop1 = getelementptr inbounds %struct.alep, %struct.alep* %a, i32 0, i32 0, !dbg !3593
  store %struct.loop* %0, %struct.loop** %loop1, align 8, !dbg !3594
  %call = call %struct.VEC_rename_map_elt_heap* @VEC_rename_map_elt_heap_alloc(i32 3), !dbg !3595
  %new_renames = getelementptr inbounds %struct.alep, %struct.alep* %a, i32 0, i32 1, !dbg !3596
  store %struct.VEC_rename_map_elt_heap* %call, %struct.VEC_rename_map_elt_heap** %new_renames, align 8, !dbg !3597
  call void @update_ssa(i32 2048), !dbg !3598
  %1 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !3599
  %2 = bitcast %struct.alep* %a to i8*, !dbg !3600
  call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @add_loop_exit_phis, i8* %2), !dbg !3601
  call void @update_ssa(i32 2048), !dbg !3602
  store i32 0, i32* %i, align 4, !dbg !3603
  br label %for.cond, !dbg !3605

for.cond:                                         ; preds = %for.inc, %entry
  %new_renames2 = getelementptr inbounds %struct.alep, %struct.alep* %a, i32 0, i32 1, !dbg !3606
  %3 = load %struct.VEC_rename_map_elt_heap*, %struct.VEC_rename_map_elt_heap** %new_renames2, align 8, !dbg !3606
  %tobool = icmp ne %struct.VEC_rename_map_elt_heap* %3, null, !dbg !3606
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3606

cond.true:                                        ; preds = %for.cond
  %new_renames3 = getelementptr inbounds %struct.alep, %struct.alep* %a, i32 0, i32 1, !dbg !3606
  %4 = load %struct.VEC_rename_map_elt_heap*, %struct.VEC_rename_map_elt_heap** %new_renames3, align 8, !dbg !3606
  %base = getelementptr inbounds %struct.VEC_rename_map_elt_heap, %struct.VEC_rename_map_elt_heap* %4, i32 0, i32 0, !dbg !3606
  br label %cond.end, !dbg !3606

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3606

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rename_map_elt_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3606
  %5 = load i32, i32* %i, align 4, !dbg !3606
  %call4 = call i32 @VEC_rename_map_elt_base_iterate(%struct.VEC_rename_map_elt_base* %cond, i32 %5, %struct.rename_map_elt_s** %elt), !dbg !3606
  %tobool5 = icmp ne i32 %call4, 0, !dbg !3608
  br i1 %tobool5, label %for.body, label %for.end, !dbg !3608

for.body:                                         ; preds = %cond.end
  %6 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !3609
  %7 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %elt, align 8, !dbg !3611
  %old_name = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %7, i32 0, i32 0, !dbg !3612
  %8 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !3612
  %9 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %elt, align 8, !dbg !3613
  %expr = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %9, i32 0, i32 1, !dbg !3614
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3614
  call void @set_rename(%struct.htab* %6, %union.tree_node* %8, %union.tree_node* %10), !dbg !3615
  %11 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %elt, align 8, !dbg !3616
  %12 = bitcast %struct.rename_map_elt_s* %11 to i8*, !dbg !3616
  call void @free(i8* %12), !dbg !3617
  br label %for.inc, !dbg !3618

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !3619
  %inc = add nsw i32 %13, 1, !dbg !3619
  store i32 %inc, i32* %i, align 4, !dbg !3619
  br label %for.cond, !dbg !3620, !llvm.loop !3621

for.end:                                          ; preds = %cond.end
  %new_renames6 = getelementptr inbounds %struct.alep, %struct.alep* %a, i32 0, i32 1, !dbg !3623
  call void @VEC_rename_map_elt_heap_free(%struct.VEC_rename_map_elt_heap** %new_renames6), !dbg !3623
  ret void, !dbg !3624
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_rename_map_elt_heap* @VEC_rename_map_elt_heap_alloc(i32 %alloc_) #0 !dbg !3625 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3628, metadata !DIExpression()), !dbg !3629
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3629
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3629
  %1 = bitcast i8* %call to %struct.VEC_rename_map_elt_heap*, !dbg !3629
  ret %struct.VEC_rename_map_elt_heap* %1, !dbg !3629
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_loop_exit_phis(i8** %slot, i8* %data) #0 !dbg !3630 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %entry1 = alloca %struct.rename_map_elt_s*, align 8
  %a = alloca %struct.alep*, align 8
  %loop = alloca %struct.loop*, align 8
  %expr = alloca %union.tree_node*, align 8
  %new_name = alloca %union.tree_node*, align 8
  %old_name = alloca %union.tree_node*, align 8
  %def_in_loop_p = alloca i8, align 1
  %used_outside_p = alloca i8, align 1
  %need_close_phi_p = alloca i8, align 1
  %old_close_phi = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %new_res = alloca %union.tree_node*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !3631, metadata !DIExpression()), !dbg !3632
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3633, metadata !DIExpression()), !dbg !3634
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %entry1, metadata !3635, metadata !DIExpression()), !dbg !3636
  call void @llvm.dbg.declare(metadata %struct.alep** %a, metadata !3637, metadata !DIExpression()), !dbg !3638
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3639, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !3641, metadata !DIExpression()), !dbg !3642
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name, metadata !3643, metadata !DIExpression()), !dbg !3644
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name, metadata !3645, metadata !DIExpression()), !dbg !3646
  call void @llvm.dbg.declare(metadata i8* %def_in_loop_p, metadata !3647, metadata !DIExpression()), !dbg !3648
  call void @llvm.dbg.declare(metadata i8* %used_outside_p, metadata !3649, metadata !DIExpression()), !dbg !3650
  call void @llvm.dbg.declare(metadata i8* %need_close_phi_p, metadata !3651, metadata !DIExpression()), !dbg !3652
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_close_phi, metadata !3653, metadata !DIExpression()), !dbg !3654
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !3655
  %tobool = icmp ne i8** %0, null, !dbg !3655
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3657

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %slot.addr, align 8, !dbg !3658
  %2 = load i8*, i8** %1, align 8, !dbg !3659
  %tobool2 = icmp ne i8* %2, null, !dbg !3659
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !3660

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %3 = load i8*, i8** %data.addr, align 8, !dbg !3661
  %tobool4 = icmp ne i8* %3, null, !dbg !3661
  br i1 %tobool4, label %if.end, label %if.then, !dbg !3662

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4, !dbg !3663
  br label %return, !dbg !3663

if.end:                                           ; preds = %lor.lhs.false3
  %4 = load i8**, i8*** %slot.addr, align 8, !dbg !3664
  %5 = load i8*, i8** %4, align 8, !dbg !3665
  %6 = bitcast i8* %5 to %struct.rename_map_elt_s*, !dbg !3666
  store %struct.rename_map_elt_s* %6, %struct.rename_map_elt_s** %entry1, align 8, !dbg !3667
  %7 = load i8*, i8** %data.addr, align 8, !dbg !3668
  %8 = bitcast i8* %7 to %struct.alep*, !dbg !3669
  store %struct.alep* %8, %struct.alep** %a, align 8, !dbg !3670
  %9 = load %struct.alep*, %struct.alep** %a, align 8, !dbg !3671
  %loop5 = getelementptr inbounds %struct.alep, %struct.alep* %9, i32 0, i32 0, !dbg !3672
  %10 = load %struct.loop*, %struct.loop** %loop5, align 8, !dbg !3672
  store %struct.loop* %10, %struct.loop** %loop, align 8, !dbg !3673
  %11 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %entry1, align 8, !dbg !3674
  %expr6 = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %11, i32 0, i32 1, !dbg !3675
  %12 = load %union.tree_node*, %union.tree_node** %expr6, align 8, !dbg !3675
  store %union.tree_node* %12, %union.tree_node** %expr, align 8, !dbg !3676
  store %union.tree_node* %12, %union.tree_node** %new_name, align 8, !dbg !3677
  %13 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %entry1, align 8, !dbg !3678
  %old_name7 = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %13, i32 0, i32 0, !dbg !3679
  %14 = load %union.tree_node*, %union.tree_node** %old_name7, align 8, !dbg !3679
  store %union.tree_node* %14, %union.tree_node** %old_name, align 8, !dbg !3680
  %15 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3681
  %16 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3682
  %call = call zeroext i8 @expr_defined_in_loop_p(%union.tree_node* %15, %struct.loop* %16), !dbg !3683
  store i8 %call, i8* %def_in_loop_p, align 1, !dbg !3684
  %17 = load i8, i8* %def_in_loop_p, align 1, !dbg !3685
  %tobool8 = icmp ne i8 %17, 0, !dbg !3685
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !3687

if.then9:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !3688
  br label %return, !dbg !3688

if.end10:                                         ; preds = %if.end
  %18 = load i8**, i8*** %slot.addr, align 8, !dbg !3689
  %19 = load i8*, i8** %18, align 8, !dbg !3690
  call void @free(i8* %19), !dbg !3691
  %20 = load i8**, i8*** %slot.addr, align 8, !dbg !3692
  store i8* null, i8** %20, align 8, !dbg !3693
  %21 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3694
  %base = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !3694
  %22 = bitcast %struct.tree_base* %base to i64*, !dbg !3694
  %bf.load = load i64, i64* %22, align 8, !dbg !3694
  %bf.clear = and i64 %bf.load, 65535, !dbg !3694
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3694
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !3696
  br i1 %cmp, label %if.then11, label %if.end12, !dbg !3697

if.then11:                                        ; preds = %if.end10
  store i32 1, i32* %retval, align 4, !dbg !3698
  br label %return, !dbg !3698

if.end12:                                         ; preds = %if.end10
  %23 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !3699
  %call13 = call %union.gimple_statement_d* @alive_after_loop(%union.tree_node* %23), !dbg !3700
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %old_close_phi, align 8, !dbg !3701
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_close_phi, align 8, !dbg !3702
  %cmp14 = icmp ne %union.gimple_statement_d* %24, null, !dbg !3703
  %conv = zext i1 %cmp14 to i32, !dbg !3703
  %conv15 = trunc i32 %conv to i8, !dbg !3704
  store i8 %conv15, i8* %used_outside_p, align 1, !dbg !3705
  %25 = load i8, i8* %used_outside_p, align 1, !dbg !3706
  %conv16 = zext i8 %25 to i32, !dbg !3706
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !3706
  br i1 %tobool17, label %land.rhs, label %land.end, !dbg !3707

land.rhs:                                         ; preds = %if.end12
  %26 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3708
  %27 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !3709
  %call18 = call zeroext i8 @close_phi_not_yet_inserted_p(%struct.loop* %26, %union.tree_node* %27), !dbg !3710
  %conv19 = zext i8 %call18 to i32, !dbg !3710
  %tobool20 = icmp ne i32 %conv19, 0, !dbg !3707
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end12
  %28 = phi i1 [ false, %if.end12 ], [ %tobool20, %land.rhs ], !dbg !3711
  %land.ext = zext i1 %28 to i32, !dbg !3707
  %conv21 = trunc i32 %land.ext to i8, !dbg !3712
  store i8 %conv21, i8* %need_close_phi_p, align 1, !dbg !3713
  %29 = load i8, i8* %need_close_phi_p, align 1, !dbg !3714
  %tobool22 = icmp ne i8 %29, 0, !dbg !3714
  br i1 %tobool22, label %if.then23, label %if.end33, !dbg !3716

if.then23:                                        ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3717, metadata !DIExpression()), !dbg !3719
  %30 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3720
  %call24 = call %struct.edge_def* @single_exit(%struct.loop* %30), !dbg !3721
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call24, i32 0, i32 1, !dbg !3722
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3722
  store %struct.basic_block_def* %31, %struct.basic_block_def** %bb, align 8, !dbg !3719
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3723, metadata !DIExpression()), !dbg !3724
  %32 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !3725
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3726
  %call25 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %32, %struct.basic_block_def* %33), !dbg !3727
  store %union.gimple_statement_d* %call25, %union.gimple_statement_d** %phi, align 8, !dbg !3724
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_res, metadata !3728, metadata !DIExpression()), !dbg !3729
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3730
  %call26 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %34), !dbg !3731
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3732
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3733
  %call27 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %36), !dbg !3734
  %call28 = call %union.tree_node* @create_new_def_for(%union.tree_node* %call26, %union.gimple_statement_d* %35, %union.tree_node** %call27), !dbg !3735
  store %union.tree_node* %call28, %union.tree_node** %new_res, align 8, !dbg !3729
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3736
  %38 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !3737
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3738
  %call29 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %39), !dbg !3739
  call void @add_phi_arg(%union.gimple_statement_d* %37, %union.tree_node* %38, %struct.edge_def* %call29, i32 0), !dbg !3740
  %40 = load %struct.alep*, %struct.alep** %a, align 8, !dbg !3741
  %new_renames = getelementptr inbounds %struct.alep, %struct.alep* %40, i32 0, i32 1, !dbg !3741
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_close_phi, align 8, !dbg !3741
  %call30 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %41), !dbg !3741
  %42 = load %union.tree_node*, %union.tree_node** %new_res, align 8, !dbg !3741
  %call31 = call %struct.rename_map_elt_s* @new_rename_map_elt(%union.tree_node* %call30, %union.tree_node* %42), !dbg !3741
  %call32 = call %struct.rename_map_elt_s** @VEC_rename_map_elt_heap_safe_push(%struct.VEC_rename_map_elt_heap** %new_renames, %struct.rename_map_elt_s* %call31), !dbg !3741
  br label %if.end33, !dbg !3742

if.end33:                                         ; preds = %if.then23, %land.end
  store i32 1, i32* %retval, align 4, !dbg !3743
  br label %return, !dbg !3743

return:                                           ; preds = %if.end33, %if.then11, %if.then9, %if.then
  %43 = load i32, i32* %retval, align 4, !dbg !3744
  ret i32 %43, !dbg !3744
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rename_map_elt_base_iterate(%struct.VEC_rename_map_elt_base* %vec_, i32 %ix_, %struct.rename_map_elt_s** %ptr) #0 !dbg !3745 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_rename_map_elt_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.rename_map_elt_s**, align 8
  store %struct.VEC_rename_map_elt_base* %vec_, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rename_map_elt_base** %vec_.addr, metadata !3751, metadata !DIExpression()), !dbg !3752
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3753, metadata !DIExpression()), !dbg !3752
  store %struct.rename_map_elt_s** %ptr, %struct.rename_map_elt_s*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s*** %ptr.addr, metadata !3754, metadata !DIExpression()), !dbg !3752
  %0 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !3755
  %tobool = icmp ne %struct.VEC_rename_map_elt_base* %0, null, !dbg !3755
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3755

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3755
  %2 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !3755
  %num = getelementptr inbounds %struct.VEC_rename_map_elt_base, %struct.VEC_rename_map_elt_base* %2, i32 0, i32 0, !dbg !3755
  %3 = load i32, i32* %num, align 8, !dbg !3755
  %cmp = icmp ult i32 %1, %3, !dbg !3755
  br i1 %cmp, label %if.then, label %if.else, !dbg !3752

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !3757
  %vec = getelementptr inbounds %struct.VEC_rename_map_elt_base, %struct.VEC_rename_map_elt_base* %4, i32 0, i32 2, !dbg !3757
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3757
  %idxprom = zext i32 %5 to i64, !dbg !3757
  %arrayidx = getelementptr inbounds [1 x %struct.rename_map_elt_s*], [1 x %struct.rename_map_elt_s*]* %vec, i64 0, i64 %idxprom, !dbg !3757
  %6 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %arrayidx, align 8, !dbg !3757
  %7 = load %struct.rename_map_elt_s**, %struct.rename_map_elt_s*** %ptr.addr, align 8, !dbg !3757
  store %struct.rename_map_elt_s* %6, %struct.rename_map_elt_s** %7, align 8, !dbg !3757
  store i32 1, i32* %retval, align 4, !dbg !3757
  br label %return, !dbg !3757

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.rename_map_elt_s**, %struct.rename_map_elt_s*** %ptr.addr, align 8, !dbg !3759
  store %struct.rename_map_elt_s* null, %struct.rename_map_elt_s** %8, align 8, !dbg !3759
  store i32 0, i32* %retval, align 4, !dbg !3759
  br label %return, !dbg !3759

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3752
  ret i32 %9, !dbg !3752
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rename_map_elt_heap_free(%struct.VEC_rename_map_elt_heap** %vec_) #0 !dbg !3761 {
entry:
  %vec_.addr = alloca %struct.VEC_rename_map_elt_heap**, align 8
  store %struct.VEC_rename_map_elt_heap** %vec_, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rename_map_elt_heap*** %vec_.addr, metadata !3765, metadata !DIExpression()), !dbg !3766
  %0 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !3767
  %1 = load %struct.VEC_rename_map_elt_heap*, %struct.VEC_rename_map_elt_heap** %0, align 8, !dbg !3767
  %tobool = icmp ne %struct.VEC_rename_map_elt_heap* %1, null, !dbg !3767
  br i1 %tobool, label %if.then, label %if.end, !dbg !3766

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !3767
  %3 = load %struct.VEC_rename_map_elt_heap*, %struct.VEC_rename_map_elt_heap** %2, align 8, !dbg !3767
  %4 = bitcast %struct.VEC_rename_map_elt_heap* %3 to i8*, !dbg !3767
  call void @free(i8* %4), !dbg !3767
  br label %if.end, !dbg !3767

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !3766
  store %struct.VEC_rename_map_elt_heap* null, %struct.VEC_rename_map_elt_heap** %5, align 8, !dbg !3766
  ret void, !dbg !3766
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @insert_guard_phis(%struct.basic_block_def* %bb, %struct.edge_def* %true_edge, %struct.edge_def* %false_edge, %struct.htab* %before_guard, %struct.htab* %rename_map) #0 !dbg !3769 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %true_edge.addr = alloca %struct.edge_def*, align 8
  %false_edge.addr = alloca %struct.edge_def*, align 8
  %before_guard.addr = alloca %struct.htab*, align 8
  %rename_map.addr = alloca %struct.htab*, align 8
  %i = alloca %struct.igp, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3772, metadata !DIExpression()), !dbg !3773
  store %struct.edge_def* %true_edge, %struct.edge_def** %true_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_edge.addr, metadata !3774, metadata !DIExpression()), !dbg !3775
  store %struct.edge_def* %false_edge, %struct.edge_def** %false_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge.addr, metadata !3776, metadata !DIExpression()), !dbg !3777
  store %struct.htab* %before_guard, %struct.htab** %before_guard.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %before_guard.addr, metadata !3778, metadata !DIExpression()), !dbg !3779
  store %struct.htab* %rename_map, %struct.htab** %rename_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %rename_map.addr, metadata !3780, metadata !DIExpression()), !dbg !3781
  call void @llvm.dbg.declare(metadata %struct.igp* %i, metadata !3782, metadata !DIExpression()), !dbg !3783
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3784
  %bb1 = getelementptr inbounds %struct.igp, %struct.igp* %i, i32 0, i32 0, !dbg !3785
  store %struct.basic_block_def* %0, %struct.basic_block_def** %bb1, align 8, !dbg !3786
  %1 = load %struct.edge_def*, %struct.edge_def** %true_edge.addr, align 8, !dbg !3787
  %true_edge2 = getelementptr inbounds %struct.igp, %struct.igp* %i, i32 0, i32 1, !dbg !3788
  store %struct.edge_def* %1, %struct.edge_def** %true_edge2, align 8, !dbg !3789
  %2 = load %struct.edge_def*, %struct.edge_def** %false_edge.addr, align 8, !dbg !3790
  %false_edge3 = getelementptr inbounds %struct.igp, %struct.igp* %i, i32 0, i32 2, !dbg !3791
  store %struct.edge_def* %2, %struct.edge_def** %false_edge3, align 8, !dbg !3792
  %3 = load %struct.htab*, %struct.htab** %before_guard.addr, align 8, !dbg !3793
  %before_guard4 = getelementptr inbounds %struct.igp, %struct.igp* %i, i32 0, i32 3, !dbg !3794
  store %struct.htab* %3, %struct.htab** %before_guard4, align 8, !dbg !3795
  call void @update_ssa(i32 2048), !dbg !3796
  %4 = load %struct.htab*, %struct.htab** %rename_map.addr, align 8, !dbg !3797
  %5 = bitcast %struct.igp* %i to i8*, !dbg !3798
  call void @htab_traverse(%struct.htab* %4, i32 (i8**, i8*)* @add_guard_exit_phis, i8* %5), !dbg !3799
  call void @update_ssa(i32 2048), !dbg !3800
  ret void, !dbg !3801
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_guard_exit_phis(i8** %slot, i8* %s) #0 !dbg !3802 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %s.addr = alloca i8*, align 8
  %entry1 = alloca %struct.rename_map_elt_s*, align 8
  %i = alloca %struct.igp*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %true_edge = alloca %struct.edge_def*, align 8
  %false_edge = alloca %struct.edge_def*, align 8
  %res = alloca %union.tree_node*, align 8
  %name1 = alloca %union.tree_node*, align 8
  %name2 = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !3803, metadata !DIExpression()), !dbg !3804
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3805, metadata !DIExpression()), !dbg !3806
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %entry1, metadata !3807, metadata !DIExpression()), !dbg !3808
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !3809
  %1 = load i8*, i8** %0, align 8, !dbg !3810
  %2 = bitcast i8* %1 to %struct.rename_map_elt_s*, !dbg !3811
  store %struct.rename_map_elt_s* %2, %struct.rename_map_elt_s** %entry1, align 8, !dbg !3808
  call void @llvm.dbg.declare(metadata %struct.igp** %i, metadata !3812, metadata !DIExpression()), !dbg !3813
  %3 = load i8*, i8** %s.addr, align 8, !dbg !3814
  %4 = bitcast i8* %3 to %struct.igp*, !dbg !3815
  store %struct.igp* %4, %struct.igp** %i, align 8, !dbg !3813
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3816, metadata !DIExpression()), !dbg !3817
  %5 = load %struct.igp*, %struct.igp** %i, align 8, !dbg !3818
  %bb2 = getelementptr inbounds %struct.igp, %struct.igp* %5, i32 0, i32 0, !dbg !3819
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !3819
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !3817
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_edge, metadata !3820, metadata !DIExpression()), !dbg !3821
  %7 = load %struct.igp*, %struct.igp** %i, align 8, !dbg !3822
  %true_edge3 = getelementptr inbounds %struct.igp, %struct.igp* %7, i32 0, i32 1, !dbg !3823
  %8 = load %struct.edge_def*, %struct.edge_def** %true_edge3, align 8, !dbg !3823
  store %struct.edge_def* %8, %struct.edge_def** %true_edge, align 8, !dbg !3821
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge, metadata !3824, metadata !DIExpression()), !dbg !3825
  %9 = load %struct.igp*, %struct.igp** %i, align 8, !dbg !3826
  %false_edge4 = getelementptr inbounds %struct.igp, %struct.igp* %9, i32 0, i32 2, !dbg !3827
  %10 = load %struct.edge_def*, %struct.edge_def** %false_edge4, align 8, !dbg !3827
  store %struct.edge_def* %10, %struct.edge_def** %false_edge, align 8, !dbg !3825
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !3828, metadata !DIExpression()), !dbg !3829
  %11 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %entry1, align 8, !dbg !3830
  %old_name = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %11, i32 0, i32 0, !dbg !3831
  %12 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !3831
  store %union.tree_node* %12, %union.tree_node** %res, align 8, !dbg !3829
  call void @llvm.dbg.declare(metadata %union.tree_node** %name1, metadata !3832, metadata !DIExpression()), !dbg !3833
  %13 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %entry1, align 8, !dbg !3834
  %expr = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %13, i32 0, i32 1, !dbg !3835
  %14 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !3835
  store %union.tree_node* %14, %union.tree_node** %name1, align 8, !dbg !3833
  call void @llvm.dbg.declare(metadata %union.tree_node** %name2, metadata !3836, metadata !DIExpression()), !dbg !3837
  %15 = load %struct.igp*, %struct.igp** %i, align 8, !dbg !3838
  %before_guard = getelementptr inbounds %struct.igp, %struct.igp* %15, i32 0, i32 3, !dbg !3839
  %16 = load %struct.htab*, %struct.htab** %before_guard, align 8, !dbg !3839
  %17 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3840
  %call = call %union.tree_node* @default_before_guard(%struct.htab* %16, %union.tree_node* %17), !dbg !3841
  store %union.tree_node* %call, %union.tree_node** %name2, align 8, !dbg !3837
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3842, metadata !DIExpression()), !dbg !3843
  %18 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !3844
  %19 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !3846
  %cmp = icmp eq %union.tree_node* %18, %19, !dbg !3847
  br i1 %cmp, label %if.then, label %if.end, !dbg !3848

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !3849
  br label %return, !dbg !3849

if.end:                                           ; preds = %entry
  %20 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !3850
  %21 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3851
  %22 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !3852
  %call5 = call %union.tree_node* @convert_for_phi_arg(%union.tree_node* %20, %union.tree_node* %21, %struct.edge_def* %22), !dbg !3853
  store %union.tree_node* %call5, %union.tree_node** %name1, align 8, !dbg !3854
  %23 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !3855
  %24 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3856
  %25 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !3857
  %call6 = call %union.tree_node* @convert_for_phi_arg(%union.tree_node* %23, %union.tree_node* %24, %struct.edge_def* %25), !dbg !3858
  store %union.tree_node* %call6, %union.tree_node** %name2, align 8, !dbg !3859
  %26 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3860
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3861
  %call7 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %26, %struct.basic_block_def* %27), !dbg !3862
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %phi, align 8, !dbg !3863
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3864
  %call8 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %28), !dbg !3865
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3866
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3867
  %call9 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %30), !dbg !3868
  %call10 = call %union.tree_node* @create_new_def_for(%union.tree_node* %call8, %union.gimple_statement_d* %29, %union.tree_node** %call9), !dbg !3869
  store %union.tree_node* %call10, %union.tree_node** %res, align 8, !dbg !3870
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3871
  %32 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !3872
  %33 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !3873
  call void @add_phi_arg(%union.gimple_statement_d* %31, %union.tree_node* %32, %struct.edge_def* %33, i32 0), !dbg !3874
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3875
  %35 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !3876
  %36 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !3877
  call void @add_phi_arg(%union.gimple_statement_d* %34, %union.tree_node* %35, %struct.edge_def* %36, i32 0), !dbg !3878
  %37 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3879
  %38 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %entry1, align 8, !dbg !3880
  %expr11 = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %38, i32 0, i32 1, !dbg !3881
  store %union.tree_node* %37, %union.tree_node** %expr11, align 8, !dbg !3882
  %39 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %entry1, align 8, !dbg !3883
  %40 = bitcast %struct.rename_map_elt_s* %39 to i8*, !dbg !3883
  %41 = load i8**, i8*** %slot.addr, align 8, !dbg !3884
  store i8* %40, i8** %41, align 8, !dbg !3885
  store i32 1, i32* %retval, align 4, !dbg !3886
  br label %return, !dbg !3886

return:                                           ; preds = %if.end, %if.then
  %42 = load i32, i32* %retval, align 4, !dbg !3887
  ret i32 %42, !dbg !3887
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @copy_bb_and_scalar_dependences(%struct.basic_block_def* %bb, %struct.sese_s* %region, %struct.edge_def* %next_e, %struct.htab* %map) #0 !dbg !3888 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %next_e.addr = alloca %struct.edge_def*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3891, metadata !DIExpression()), !dbg !3892
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !3893, metadata !DIExpression()), !dbg !3894
  store %struct.edge_def* %next_e, %struct.edge_def** %next_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %next_e.addr, metadata !3895, metadata !DIExpression()), !dbg !3896
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !3897, metadata !DIExpression()), !dbg !3898
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !3899, metadata !DIExpression()), !dbg !3900
  %0 = load %struct.edge_def*, %struct.edge_def** %next_e.addr, align 8, !dbg !3901
  %call = call %struct.basic_block_def* @split_edge(%struct.edge_def* %0), !dbg !3902
  store %struct.basic_block_def* %call, %struct.basic_block_def** %new_bb, align 8, !dbg !3900
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3903
  %call1 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %1), !dbg !3904
  store %struct.edge_def* %call1, %struct.edge_def** %next_e.addr, align 8, !dbg !3905
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3906
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3907
  %4 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !3908
  call void @graphite_copy_stmts_from_block(%struct.basic_block_def* %2, %struct.basic_block_def* %3, %struct.htab* %4), !dbg !3909
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3910
  call void @remove_condition(%struct.basic_block_def* %5), !dbg !3911
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3912
  call void @remove_phi_nodes(%struct.basic_block_def* %6), !dbg !3913
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3914
  %8 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !3915
  %9 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !3916
  call void @expand_scalar_variables(%struct.basic_block_def* %7, %struct.sese_s* %8, %struct.htab* %9), !dbg !3917
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3918
  %11 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !3919
  call void @rename_variables(%struct.basic_block_def* %10, %struct.htab* %11), !dbg !3920
  %12 = load %struct.edge_def*, %struct.edge_def** %next_e.addr, align 8, !dbg !3921
  ret %struct.edge_def* %12, !dbg !3922
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !3923 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3929, metadata !DIExpression()), !dbg !3930
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3931
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !3931
  %tobool = icmp ne i8 %call, 0, !dbg !3931
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3931

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3931
  br label %cond.end, !dbg !3931

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3931

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3931
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3932
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !3932
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3932
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !3932
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3932

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3932
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !3932
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !3932
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !3932
  br label %cond.end5, !dbg !3932

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3932

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !3932
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !3932
  ret %struct.edge_def* %call7, !dbg !3933
}

; Function Attrs: noinline nounwind uwtable
define internal void @graphite_copy_stmts_from_block(%struct.basic_block_def* %bb, %struct.basic_block_def* %new_bb, %struct.htab* %map) #0 !dbg !3934 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %new_bb.addr = alloca %struct.basic_block_def*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %gsi_tgt = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp1 = alloca %struct.gimple_stmt_iterator, align 8
  %def_p = alloca %union.tree_node**, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %copy = alloca %union.gimple_statement_d*, align 8
  %old_name = alloca %union.tree_node*, align 8
  %new_name = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3937, metadata !DIExpression()), !dbg !3938
  store %struct.basic_block_def* %new_bb, %struct.basic_block_def** %new_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb.addr, metadata !3939, metadata !DIExpression()), !dbg !3940
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !3941, metadata !DIExpression()), !dbg !3942
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3943, metadata !DIExpression()), !dbg !3944
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi_tgt, metadata !3945, metadata !DIExpression()), !dbg !3946
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !3947
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !3948
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi_tgt to i8*, !dbg !3948
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3948
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !3948
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3949
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp1, %struct.basic_block_def* %3), !dbg !3951
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3951
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp1 to i8*, !dbg !3951
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !3951
  br label %for.cond, !dbg !3952

for.cond:                                         ; preds = %for.inc18, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3953
  %tobool = icmp ne i8 %call, 0, !dbg !3955
  %lnot = xor i1 %tobool, true, !dbg !3955
  br i1 %lnot, label %for.body, label %for.end19, !dbg !3956

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !3957, metadata !DIExpression()), !dbg !3959
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !3960, metadata !DIExpression()), !dbg !3973
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3974, metadata !DIExpression()), !dbg !3975
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3976
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt, align 8, !dbg !3975
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %copy, metadata !3977, metadata !DIExpression()), !dbg !3978
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3979
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !3981
  %cmp = icmp eq i32 %call3, 4, !dbg !3982
  br i1 %cmp, label %if.then, label %if.end, !dbg !3983

if.then:                                          ; preds = %for.body
  br label %for.inc18, !dbg !3984

if.end:                                           ; preds = %for.body
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3985
  %call4 = call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %7), !dbg !3986
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %copy, align 8, !dbg !3987
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !3988
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi_tgt, %union.gimple_statement_d* %8, i32 0), !dbg !3989
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3990
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3990
  %call5 = call %union.tree_node* @gimple_vop(%struct.function* %add.ptr), !dbg !3991
  call void @mark_sym_for_renaming(%union.tree_node* %call5), !dbg !3992
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !3993
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3994
  %call6 = call zeroext i8 @maybe_duplicate_eh_stmt(%union.gimple_statement_d* %10, %union.gimple_statement_d* %11), !dbg !3995
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3996
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3996
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !3997
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3998
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !3998
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3999
  call void @gimple_duplicate_stmt_histograms(%struct.function* %add.ptr7, %union.gimple_statement_d* %13, %struct.function* %add.ptr8, %union.gimple_statement_d* %15), !dbg !4000
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4001
  %call9 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %16, i32 10), !dbg !4001
  store %union.tree_node** %call9, %union.tree_node*** %def_p, align 8, !dbg !4001
  br label %for.cond10, !dbg !4001

for.cond10:                                       ; preds = %for.inc, %if.end
  %call11 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !4003
  %tobool12 = icmp ne i8 %call11, 0, !dbg !4003
  %lnot13 = xor i1 %tobool12, true, !dbg !4003
  br i1 %lnot13, label %for.body14, label %for.end, !dbg !4001

for.body14:                                       ; preds = %for.cond10
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name, metadata !4005, metadata !DIExpression()), !dbg !4007
  %17 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !4008
  %call15 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %17), !dbg !4008
  store %union.tree_node* %call15, %union.tree_node** %old_name, align 8, !dbg !4007
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name, metadata !4009, metadata !DIExpression()), !dbg !4010
  %18 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !4011
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !4012
  %20 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !4013
  %call16 = call %union.tree_node* @create_new_def_for(%union.tree_node* %18, %union.gimple_statement_d* %19, %union.tree_node** %20), !dbg !4014
  store %union.tree_node* %call16, %union.tree_node** %new_name, align 8, !dbg !4010
  %21 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !4015
  %22 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !4016
  %23 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !4017
  call void @set_rename(%struct.htab* %21, %union.tree_node* %22, %union.tree_node* %23), !dbg !4018
  br label %for.inc, !dbg !4019

for.inc:                                          ; preds = %for.body14
  %call17 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %op_iter), !dbg !4003
  store %union.tree_node** %call17, %union.tree_node*** %def_p, align 8, !dbg !4003
  br label %for.cond10, !dbg !4003, !llvm.loop !4020

for.end:                                          ; preds = %for.cond10
  br label %for.inc18, !dbg !4022

for.inc18:                                        ; preds = %for.end, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4023
  br label %for.cond, !dbg !4024, !llvm.loop !4025

for.end19:                                        ; preds = %for.cond
  ret void, !dbg !4027
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_condition(%struct.basic_block_def* %bb) #0 !dbg !4028 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4031, metadata !DIExpression()), !dbg !4032
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !4033, metadata !DIExpression()), !dbg !4034
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4035
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !4036
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %last, align 8, !dbg !4034
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4037
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !4037
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4039

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4040
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !4041
  %cmp = icmp eq i32 %call1, 1, !dbg !4042
  br i1 %cmp, label %if.then, label %if.end, !dbg !4043

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4044, metadata !DIExpression()), !dbg !4046
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4047
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %gsi, %struct.basic_block_def* %3), !dbg !4048
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !4049
  br label %if.end, !dbg !4050

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !4051
}

declare dso_local void @remove_phi_nodes(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @expand_scalar_variables(%struct.basic_block_def* %bb, %struct.sese_s* %region, %struct.htab* %map) #0 !dbg !4052 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4055, metadata !DIExpression()), !dbg !4056
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4057, metadata !DIExpression()), !dbg !4058
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !4059, metadata !DIExpression()), !dbg !4060
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4061, metadata !DIExpression()), !dbg !4062
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4063
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !4065
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4065
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4065
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !4065
  br label %for.cond, !dbg !4066

for.cond:                                         ; preds = %for.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4067
  %tobool = icmp ne i8 %call, 0, !dbg !4069
  %lnot = xor i1 %tobool, true, !dbg !4069
  br i1 %lnot, label %for.body, label %for.end, !dbg !4070

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4071, metadata !DIExpression()), !dbg !4073
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4074
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !4073
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4075
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4076
  %5 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4077
  %6 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !4078
  call void @expand_scalar_variables_stmt(%union.gimple_statement_d* %3, %struct.basic_block_def* %4, %struct.sese_s* %5, %struct.htab* %6, %struct.gimple_stmt_iterator* %gsi), !dbg !4079
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4080
  br label %for.cond, !dbg !4081, !llvm.loop !4082

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4084
}

; Function Attrs: noinline nounwind uwtable
define internal void @rename_variables(%struct.basic_block_def* %bb, %struct.htab* %map) #0 !dbg !4085 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %insert_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4088, metadata !DIExpression()), !dbg !4089
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !4090, metadata !DIExpression()), !dbg !4091
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4092, metadata !DIExpression()), !dbg !4093
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %insert_gsi, metadata !4094, metadata !DIExpression()), !dbg !4095
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4096
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %insert_gsi, %struct.basic_block_def* %0), !dbg !4097
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4098
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %1), !dbg !4100
  %2 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4100
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4100
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !4100
  br label %for.cond, !dbg !4101

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4102
  %tobool = icmp ne i8 %call, 0, !dbg !4104
  %lnot = xor i1 %tobool, true, !dbg !4104
  br i1 %lnot, label %for.body, label %for.end, !dbg !4105

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4106
  %4 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !4107
  call void @rename_variables_in_stmt(%union.gimple_statement_d* %call1, %struct.htab* %4, %struct.gimple_stmt_iterator* %insert_gsi), !dbg !4108
  br label %for.inc, !dbg !4108

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4109
  br label %for.cond, !dbg !4110, !llvm.loop !4111

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4113
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @outermost_loop_in_sese(%struct.sese_s* %region, %struct.basic_block_def* %bb) #0 !dbg !4114 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %nest = alloca %struct.loop*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4117, metadata !DIExpression()), !dbg !4118
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4119, metadata !DIExpression()), !dbg !4120
  call void @llvm.dbg.declare(metadata %struct.loop** %nest, metadata !4121, metadata !DIExpression()), !dbg !4122
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4123
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 3, !dbg !4124
  %1 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4124
  store %struct.loop* %1, %struct.loop** %nest, align 8, !dbg !4125
  br label %while.cond, !dbg !4126

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.loop*, %struct.loop** %nest, align 8, !dbg !4127
  %call = call %struct.loop* @loop_outer(%struct.loop* %2), !dbg !4128
  %tobool = icmp ne %struct.loop* %call, null, !dbg !4128
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4129

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct.loop*, %struct.loop** %nest, align 8, !dbg !4130
  %call1 = call %struct.loop* @loop_outer(%struct.loop* %3), !dbg !4131
  %4 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4132
  %call2 = call zeroext i8 @loop_in_sese_p(%struct.loop* %call1, %struct.sese_s* %4), !dbg !4133
  %conv = zext i8 %call2 to i32, !dbg !4133
  %tobool3 = icmp ne i32 %conv, 0, !dbg !4129
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ], !dbg !4134
  br i1 %5, label %while.body, label %while.end, !dbg !4126

while.body:                                       ; preds = %land.end
  %6 = load %struct.loop*, %struct.loop** %nest, align 8, !dbg !4135
  %call4 = call %struct.loop* @loop_outer(%struct.loop* %6), !dbg !4136
  store %struct.loop* %call4, %struct.loop** %nest, align 8, !dbg !4137
  br label %while.cond, !dbg !4126, !llvm.loop !4138

while.end:                                        ; preds = %land.end
  %7 = load %struct.loop*, %struct.loop** %nest, align 8, !dbg !4140
  ret %struct.loop* %7, !dbg !4141
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !4142 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4147, metadata !DIExpression()), !dbg !4148
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4149, metadata !DIExpression()), !dbg !4150
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4151
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !4151
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !4151
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !4151
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4151

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4151
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !4151
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !4151
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !4151
  br label %cond.end, !dbg !4151

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4151

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4151
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !4151
  store i32 %call, i32* %n, align 4, !dbg !4150
  %4 = load i32, i32* %n, align 4, !dbg !4152
  %cmp = icmp eq i32 %4, 0, !dbg !4154
  br i1 %cmp, label %if.then, label %if.end, !dbg !4155

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !4156
  br label %return, !dbg !4156

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4157
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !4157
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !4157
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !4157
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !4157

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4157
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !4157
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !4157
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !4157
  br label %cond.end8, !dbg !4157

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !4157

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !4157
  %9 = load i32, i32* %n, align 4, !dbg !4157
  %sub = sub i32 %9, 1, !dbg !4157
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !4157
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !4158
  br label %return, !dbg !4158

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !4159
  ret %struct.loop* %10, !dbg !4159
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_in_sese_p(%struct.loop* %loop, %struct.sese_s* %region) #0 !dbg !4160 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4163, metadata !DIExpression()), !dbg !4164
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4165, metadata !DIExpression()), !dbg !4166
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4167
  %header = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !4168
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4168
  %2 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4169
  %call = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %1, %struct.sese_s* %2), !dbg !4170
  %conv = zext i8 %call to i32, !dbg !4170
  %tobool = icmp ne i32 %conv, 0, !dbg !4170
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4171

land.rhs:                                         ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4172
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 3, !dbg !4173
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4173
  %5 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4174
  %call1 = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %4, %struct.sese_s* %5), !dbg !4175
  %conv2 = zext i8 %call1 to i32, !dbg !4175
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !4171
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !4176
  %land.ext = zext i1 %6 to i32, !dbg !4171
  %conv4 = trunc i32 %land.ext to i8, !dbg !4177
  ret i8 %conv4, !dbg !4178
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @if_region_set_false_region(%struct.ifsese_s* %if_region, %struct.sese_s* %region) #0 !dbg !4179 {
entry:
  %if_region.addr = alloca %struct.ifsese_s*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %condition = alloca %struct.basic_block_def*, align 8
  %false_edge = alloca %struct.edge_def*, align 8
  %dummy = alloca %struct.basic_block_def*, align 8
  %entry_region = alloca %struct.edge_def*, align 8
  %exit_region = alloca %struct.edge_def*, align 8
  %before_region = alloca %struct.basic_block_def*, align 8
  %last_in_region = alloca %struct.basic_block_def*, align 8
  %slot = alloca i8**, align 8
  %loop_exit = alloca %struct.loop_exit*, align 8
  store %struct.ifsese_s* %if_region, %struct.ifsese_s** %if_region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ifsese_s** %if_region.addr, metadata !4183, metadata !DIExpression()), !dbg !4184
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4185, metadata !DIExpression()), !dbg !4186
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %condition, metadata !4187, metadata !DIExpression()), !dbg !4188
  %0 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region.addr, align 8, !dbg !4189
  %call = call %struct.basic_block_def* @if_region_get_condition_block(%struct.ifsese_s* %0), !dbg !4190
  store %struct.basic_block_def* %call, %struct.basic_block_def** %condition, align 8, !dbg !4188
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge, metadata !4191, metadata !DIExpression()), !dbg !4192
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %condition, align 8, !dbg !4193
  %call1 = call %struct.edge_def* @get_false_edge_from_guard_bb(%struct.basic_block_def* %1), !dbg !4194
  store %struct.edge_def* %call1, %struct.edge_def** %false_edge, align 8, !dbg !4192
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dummy, metadata !4195, metadata !DIExpression()), !dbg !4196
  %2 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4197
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !4198
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4198
  store %struct.basic_block_def* %3, %struct.basic_block_def** %dummy, align 8, !dbg !4196
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry_region, metadata !4199, metadata !DIExpression()), !dbg !4200
  %4 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4201
  %entry2 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %4, i32 0, i32 0, !dbg !4201
  %5 = load %struct.edge_def*, %struct.edge_def** %entry2, align 8, !dbg !4201
  store %struct.edge_def* %5, %struct.edge_def** %entry_region, align 8, !dbg !4200
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit_region, metadata !4202, metadata !DIExpression()), !dbg !4203
  %6 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4204
  %exit = getelementptr inbounds %struct.sese_s, %struct.sese_s* %6, i32 0, i32 1, !dbg !4204
  %7 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4204
  store %struct.edge_def* %7, %struct.edge_def** %exit_region, align 8, !dbg !4203
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %before_region, metadata !4205, metadata !DIExpression()), !dbg !4206
  %8 = load %struct.edge_def*, %struct.edge_def** %entry_region, align 8, !dbg !4207
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 0, !dbg !4208
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4208
  store %struct.basic_block_def* %9, %struct.basic_block_def** %before_region, align 8, !dbg !4206
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last_in_region, metadata !4209, metadata !DIExpression()), !dbg !4210
  %10 = load %struct.edge_def*, %struct.edge_def** %exit_region, align 8, !dbg !4211
  %src3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %10, i32 0, i32 0, !dbg !4212
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %src3, align 8, !dbg !4212
  store %struct.basic_block_def* %11, %struct.basic_block_def** %last_in_region, align 8, !dbg !4210
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4213, metadata !DIExpression()), !dbg !4214
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4215
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !4215
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4215
  %13 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4215
  %exits = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 2, !dbg !4216
  %14 = load %struct.htab*, %struct.htab** %exits, align 8, !dbg !4216
  %15 = load %struct.edge_def*, %struct.edge_def** %exit_region, align 8, !dbg !4217
  %16 = bitcast %struct.edge_def* %15 to i8*, !dbg !4217
  %17 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4218
  %18 = load %struct.edge_def*, %struct.edge_def** %exit_region, align 8, !dbg !4219
  %19 = bitcast %struct.edge_def* %18 to i8*, !dbg !4219
  %call4 = call i32 %17(i8* %19), !dbg !4218
  %call5 = call i8** @htab_find_slot_with_hash(%struct.htab* %14, i8* %16, i32 %call4, i32 0), !dbg !4220
  store i8** %call5, i8*** %slot, align 8, !dbg !4214
  %20 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4221
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 7, !dbg !4222
  %21 = load i32, i32* %flags, align 8, !dbg !4222
  %22 = load %struct.edge_def*, %struct.edge_def** %entry_region, align 8, !dbg !4223
  %flags6 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 7, !dbg !4224
  store i32 %21, i32* %flags6, align 8, !dbg !4225
  %23 = load %struct.edge_def*, %struct.edge_def** %exit_region, align 8, !dbg !4226
  %flags7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 7, !dbg !4227
  %24 = load i32, i32* %flags7, align 8, !dbg !4227
  %25 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4228
  %flags8 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 7, !dbg !4229
  store i32 %24, i32* %flags8, align 8, !dbg !4230
  %26 = load %struct.edge_def*, %struct.edge_def** %entry_region, align 8, !dbg !4231
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %condition, align 8, !dbg !4232
  call void @redirect_edge_pred(%struct.edge_def* %26, %struct.basic_block_def* %27), !dbg !4233
  %28 = load %struct.edge_def*, %struct.edge_def** %exit_region, align 8, !dbg !4234
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %before_region, align 8, !dbg !4235
  call void @redirect_edge_pred(%struct.edge_def* %28, %struct.basic_block_def* %29), !dbg !4236
  %30 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4237
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %last_in_region, align 8, !dbg !4238
  call void @redirect_edge_pred(%struct.edge_def* %30, %struct.basic_block_def* %31), !dbg !4239
  %32 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4240
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4241
  %call9 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %33), !dbg !4242
  call void @redirect_edge_succ(%struct.edge_def* %32, %struct.basic_block_def* %call9), !dbg !4243
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4244
  call void @delete_basic_block(%struct.basic_block_def* %34), !dbg !4245
  %35 = load %struct.edge_def*, %struct.edge_def** %exit_region, align 8, !dbg !4246
  %flags10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 7, !dbg !4247
  store i32 1, i32* %flags10, align 8, !dbg !4248
  call void @recompute_all_dominators(), !dbg !4249
  %36 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4250
  %37 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4251
  %exit11 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %37, i32 0, i32 1, !dbg !4251
  store %struct.edge_def* %36, %struct.edge_def** %exit11, align 8, !dbg !4252
  %38 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region.addr, align 8, !dbg !4253
  %false_region = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %38, i32 0, i32 2, !dbg !4255
  %39 = load %struct.sese_s*, %struct.sese_s** %false_region, align 8, !dbg !4255
  %tobool = icmp ne %struct.sese_s* %39, null, !dbg !4253
  br i1 %tobool, label %if.then, label %if.end, !dbg !4256

if.then:                                          ; preds = %entry
  %40 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region.addr, align 8, !dbg !4257
  %false_region12 = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %40, i32 0, i32 2, !dbg !4258
  %41 = load %struct.sese_s*, %struct.sese_s** %false_region12, align 8, !dbg !4258
  %42 = bitcast %struct.sese_s* %41 to i8*, !dbg !4257
  call void @free(i8* %42), !dbg !4259
  br label %if.end, !dbg !4259

if.end:                                           ; preds = %if.then, %entry
  %43 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4260
  %44 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region.addr, align 8, !dbg !4261
  %false_region13 = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %44, i32 0, i32 2, !dbg !4262
  store %struct.sese_s* %43, %struct.sese_s** %false_region13, align 8, !dbg !4263
  %45 = load i8**, i8*** %slot, align 8, !dbg !4264
  %tobool14 = icmp ne i8** %45, null, !dbg !4264
  br i1 %tobool14, label %if.then15, label %if.end27, !dbg !4266

if.then15:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %loop_exit, metadata !4267, metadata !DIExpression()), !dbg !4269
  %call16 = call i8* @ggc_alloc_cleared_stat(i64 32), !dbg !4270
  %46 = bitcast i8* %call16 to %struct.loop_exit*, !dbg !4270
  store %struct.loop_exit* %46, %struct.loop_exit** %loop_exit, align 8, !dbg !4269
  %47 = load %struct.loop_exit*, %struct.loop_exit** %loop_exit, align 8, !dbg !4271
  %48 = bitcast %struct.loop_exit* %47 to i8*, !dbg !4272
  %49 = load i8**, i8*** %slot, align 8, !dbg !4273
  %50 = bitcast i8** %49 to %struct.loop_exit**, !dbg !4274
  %51 = load %struct.loop_exit*, %struct.loop_exit** %50, align 8, !dbg !4274
  %52 = bitcast %struct.loop_exit* %51 to i8*, !dbg !4272
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %52, i64 32, i1 false), !dbg !4272
  %53 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4275
  %add.ptr17 = getelementptr inbounds %struct.function, %struct.function* %53, i64 0, !dbg !4275
  %x_current_loops18 = getelementptr inbounds %struct.function, %struct.function* %add.ptr17, i32 0, i32 4, !dbg !4275
  %54 = load %struct.loops*, %struct.loops** %x_current_loops18, align 8, !dbg !4275
  %exits19 = getelementptr inbounds %struct.loops, %struct.loops* %54, i32 0, i32 2, !dbg !4276
  %55 = load %struct.htab*, %struct.htab** %exits19, align 8, !dbg !4276
  %56 = load i8**, i8*** %slot, align 8, !dbg !4277
  call void @htab_clear_slot(%struct.htab* %55, i8** %56), !dbg !4278
  %57 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4279
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %57, i64 0, !dbg !4279
  %x_current_loops21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 4, !dbg !4279
  %58 = load %struct.loops*, %struct.loops** %x_current_loops21, align 8, !dbg !4279
  %exits22 = getelementptr inbounds %struct.loops, %struct.loops* %58, i32 0, i32 2, !dbg !4280
  %59 = load %struct.htab*, %struct.htab** %exits22, align 8, !dbg !4280
  %60 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4281
  %61 = bitcast %struct.edge_def* %60 to i8*, !dbg !4281
  %62 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4282
  %63 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4283
  %64 = bitcast %struct.edge_def* %63 to i8*, !dbg !4283
  %call23 = call i32 %62(i8* %64), !dbg !4282
  %call24 = call i8** @htab_find_slot_with_hash(%struct.htab* %59, i8* %61, i32 %call23, i32 1), !dbg !4284
  store i8** %call24, i8*** %slot, align 8, !dbg !4285
  %65 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4286
  %66 = load %struct.loop_exit*, %struct.loop_exit** %loop_exit, align 8, !dbg !4287
  %e = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %66, i32 0, i32 0, !dbg !4288
  store %struct.edge_def* %65, %struct.edge_def** %e, align 8, !dbg !4289
  %67 = load %struct.loop_exit*, %struct.loop_exit** %loop_exit, align 8, !dbg !4290
  %68 = bitcast %struct.loop_exit* %67 to i8*, !dbg !4290
  %69 = load i8**, i8*** %slot, align 8, !dbg !4291
  store i8* %68, i8** %69, align 8, !dbg !4292
  %70 = load %struct.loop_exit*, %struct.loop_exit** %loop_exit, align 8, !dbg !4293
  %71 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !4294
  %src25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 0, !dbg !4295
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %src25, align 8, !dbg !4295
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 3, !dbg !4296
  %73 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4296
  %exits26 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 18, !dbg !4297
  %74 = load %struct.loop_exit*, %struct.loop_exit** %exits26, align 8, !dbg !4297
  %next = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %74, i32 0, i32 2, !dbg !4298
  store %struct.loop_exit* %70, %struct.loop_exit** %next, align 8, !dbg !4299
  br label %if.end27, !dbg !4300

if.end27:                                         ; preds = %if.then15, %if.end
  ret void, !dbg !4301
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @if_region_get_condition_block(%struct.ifsese_s* %if_region) #0 !dbg !4302 {
entry:
  %if_region.addr = alloca %struct.ifsese_s*, align 8
  store %struct.ifsese_s* %if_region, %struct.ifsese_s** %if_region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ifsese_s** %if_region.addr, metadata !4305, metadata !DIExpression()), !dbg !4306
  %0 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region.addr, align 8, !dbg !4307
  %call = call %struct.edge_def* @if_region_entry(%struct.ifsese_s* %0), !dbg !4308
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !4309
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4309
  ret %struct.basic_block_def* %1, !dbg !4310
}

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare dso_local void @redirect_edge_pred(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !4311 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4314, metadata !DIExpression()), !dbg !4315
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4316
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !4317
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !4318
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4318
  ret %struct.basic_block_def* %1, !dbg !4319
}

declare dso_local void @delete_basic_block(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @recompute_all_dominators() #0 !dbg !4320 {
entry:
  %call = call zeroext i8 @mark_irreducible_loops(), !dbg !4323
  call void @free_dominance_info(i32 1), !dbg !4324
  call void @free_dominance_info(i32 2), !dbg !4325
  call void @calculate_dominance_info(i32 1), !dbg !4326
  call void @calculate_dominance_info(i32 2), !dbg !4327
  ret void, !dbg !4328
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

declare dso_local void @htab_clear_slot(%struct.htab*, i8**) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ifsese_s* @create_if_region_on_edge(%struct.edge_def* %entry1, %union.tree_node* %condition) #0 !dbg !4329 {
entry:
  %entry.addr = alloca %struct.edge_def*, align 8
  %condition.addr = alloca %union.tree_node*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %sese_region = alloca %struct.sese_s*, align 8
  %true_region = alloca %struct.sese_s*, align 8
  %false_region = alloca %struct.sese_s*, align 8
  %if_region = alloca %struct.ifsese_s*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !4332, metadata !DIExpression()), !dbg !4333
  store %union.tree_node* %condition, %union.tree_node** %condition.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %condition.addr, metadata !4334, metadata !DIExpression()), !dbg !4335
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4336, metadata !DIExpression()), !dbg !4337
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4338, metadata !DIExpression()), !dbg !4339
  call void @llvm.dbg.declare(metadata %struct.sese_s** %sese_region, metadata !4340, metadata !DIExpression()), !dbg !4341
  %call = call i8* @xmalloc(i64 48), !dbg !4342
  %0 = bitcast i8* %call to %struct.sese_s*, !dbg !4342
  store %struct.sese_s* %0, %struct.sese_s** %sese_region, align 8, !dbg !4341
  call void @llvm.dbg.declare(metadata %struct.sese_s** %true_region, metadata !4343, metadata !DIExpression()), !dbg !4344
  %call2 = call i8* @xmalloc(i64 48), !dbg !4345
  %1 = bitcast i8* %call2 to %struct.sese_s*, !dbg !4345
  store %struct.sese_s* %1, %struct.sese_s** %true_region, align 8, !dbg !4344
  call void @llvm.dbg.declare(metadata %struct.sese_s** %false_region, metadata !4346, metadata !DIExpression()), !dbg !4347
  %call3 = call i8* @xmalloc(i64 48), !dbg !4348
  %2 = bitcast i8* %call3 to %struct.sese_s*, !dbg !4348
  store %struct.sese_s* %2, %struct.sese_s** %false_region, align 8, !dbg !4347
  call void @llvm.dbg.declare(metadata %struct.ifsese_s** %if_region, metadata !4349, metadata !DIExpression()), !dbg !4350
  %call4 = call i8* @xmalloc(i64 24), !dbg !4351
  %3 = bitcast i8* %call4 to %struct.ifsese_s*, !dbg !4351
  store %struct.ifsese_s* %3, %struct.ifsese_s** %if_region, align 8, !dbg !4350
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !4352, metadata !DIExpression()), !dbg !4353
  %4 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !4354
  %5 = load %union.tree_node*, %union.tree_node** %condition.addr, align 8, !dbg !4355
  %call5 = call %struct.edge_def* @create_empty_if_region_on_edge(%struct.edge_def* %4, %union.tree_node* %5), !dbg !4356
  store %struct.edge_def* %call5, %struct.edge_def** %exit, align 8, !dbg !4353
  %6 = load %struct.sese_s*, %struct.sese_s** %sese_region, align 8, !dbg !4357
  %7 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region, align 8, !dbg !4358
  %region = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %7, i32 0, i32 0, !dbg !4359
  store %struct.sese_s* %6, %struct.sese_s** %region, align 8, !dbg !4360
  %8 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !4361
  %9 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region, align 8, !dbg !4362
  %region6 = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %9, i32 0, i32 0, !dbg !4363
  %10 = load %struct.sese_s*, %struct.sese_s** %region6, align 8, !dbg !4363
  %entry7 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %10, i32 0, i32 0, !dbg !4364
  store %struct.edge_def* %8, %struct.edge_def** %entry7, align 8, !dbg !4365
  %11 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4366
  %12 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region, align 8, !dbg !4367
  %region8 = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %12, i32 0, i32 0, !dbg !4368
  %13 = load %struct.sese_s*, %struct.sese_s** %region8, align 8, !dbg !4368
  %exit9 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %13, i32 0, i32 1, !dbg !4369
  store %struct.edge_def* %11, %struct.edge_def** %exit9, align 8, !dbg !4370
  %14 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !4371
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 1, !dbg !4371
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4371
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !4371
  %call10 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4371
  %16 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4371
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !4371
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 0, !dbg !4371
  store i32 %18, i32* %17, align 8, !dbg !4371
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !4371
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 1, !dbg !4371
  store %struct.VEC_edge_gc** %20, %struct.VEC_edge_gc*** %19, align 8, !dbg !4371
  %21 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4371
  %22 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4371
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false), !dbg !4371
  br label %for.cond, !dbg !4371

for.cond:                                         ; preds = %for.inc, %entry
  %23 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4373
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 0, !dbg !4373
  %25 = load i32, i32* %24, align 8, !dbg !4373
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 1, !dbg !4373
  %27 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %26, align 8, !dbg !4373
  %call11 = call zeroext i8 @ei_cond(i32 %25, %struct.VEC_edge_gc** %27, %struct.edge_def** %e), !dbg !4373
  %tobool = icmp ne i8 %call11, 0, !dbg !4371
  br i1 %tobool, label %for.body, label %for.end, !dbg !4371

for.body:                                         ; preds = %for.cond
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4375
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 7, !dbg !4378
  %29 = load i32, i32* %flags, align 8, !dbg !4378
  %and = and i32 %29, 1024, !dbg !4379
  %tobool12 = icmp ne i32 %and, 0, !dbg !4379
  br i1 %tobool12, label %if.then, label %if.else, !dbg !4380

if.then:                                          ; preds = %for.body
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4381
  %31 = load %struct.sese_s*, %struct.sese_s** %true_region, align 8, !dbg !4383
  %entry13 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %31, i32 0, i32 0, !dbg !4384
  store %struct.edge_def* %30, %struct.edge_def** %entry13, align 8, !dbg !4385
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4386
  %dest14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 1, !dbg !4387
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %dest14, align 8, !dbg !4387
  %call15 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %33), !dbg !4388
  %34 = load %struct.sese_s*, %struct.sese_s** %true_region, align 8, !dbg !4389
  %exit16 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %34, i32 0, i32 1, !dbg !4390
  store %struct.edge_def* %call15, %struct.edge_def** %exit16, align 8, !dbg !4391
  %35 = load %struct.sese_s*, %struct.sese_s** %true_region, align 8, !dbg !4392
  %36 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region, align 8, !dbg !4393
  %true_region17 = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %36, i32 0, i32 1, !dbg !4394
  store %struct.sese_s* %35, %struct.sese_s** %true_region17, align 8, !dbg !4395
  br label %if.end27, !dbg !4396

if.else:                                          ; preds = %for.body
  %37 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4397
  %flags18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 7, !dbg !4399
  %38 = load i32, i32* %flags18, align 8, !dbg !4399
  %and19 = and i32 %38, 2048, !dbg !4400
  %tobool20 = icmp ne i32 %and19, 0, !dbg !4400
  br i1 %tobool20, label %if.then21, label %if.end, !dbg !4401

if.then21:                                        ; preds = %if.else
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4402
  %40 = load %struct.sese_s*, %struct.sese_s** %false_region, align 8, !dbg !4404
  %entry22 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %40, i32 0, i32 0, !dbg !4405
  store %struct.edge_def* %39, %struct.edge_def** %entry22, align 8, !dbg !4406
  %41 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4407
  %dest23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %41, i32 0, i32 1, !dbg !4408
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %dest23, align 8, !dbg !4408
  %call24 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %42), !dbg !4409
  %43 = load %struct.sese_s*, %struct.sese_s** %false_region, align 8, !dbg !4410
  %exit25 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %43, i32 0, i32 1, !dbg !4411
  store %struct.edge_def* %call24, %struct.edge_def** %exit25, align 8, !dbg !4412
  %44 = load %struct.sese_s*, %struct.sese_s** %false_region, align 8, !dbg !4413
  %45 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region, align 8, !dbg !4414
  %false_region26 = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %45, i32 0, i32 2, !dbg !4415
  store %struct.sese_s* %44, %struct.sese_s** %false_region26, align 8, !dbg !4416
  br label %if.end, !dbg !4417

if.end:                                           ; preds = %if.then21, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !4418

for.inc:                                          ; preds = %if.end27
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4373
  br label %for.cond, !dbg !4373, !llvm.loop !4419

for.end:                                          ; preds = %for.cond
  %46 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region, align 8, !dbg !4421
  ret %struct.ifsese_s* %46, !dbg !4422
}

declare dso_local %struct.edge_def* @create_empty_if_region_on_edge(%struct.edge_def*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ifsese_s* @move_sese_in_condition(%struct.sese_s* %region) #0 !dbg !4423 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %pred_block = alloca %struct.basic_block_def*, align 8
  %if_region = alloca %struct.ifsese_s*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4426, metadata !DIExpression()), !dbg !4427
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred_block, metadata !4428, metadata !DIExpression()), !dbg !4429
  %0 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4430
  %entry1 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %0, i32 0, i32 0, !dbg !4430
  %1 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !4430
  %call = call %struct.basic_block_def* @split_edge(%struct.edge_def* %1), !dbg !4431
  store %struct.basic_block_def* %call, %struct.basic_block_def** %pred_block, align 8, !dbg !4429
  call void @llvm.dbg.declare(metadata %struct.ifsese_s** %if_region, metadata !4432, metadata !DIExpression()), !dbg !4433
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_block, align 8, !dbg !4434
  %call2 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %2), !dbg !4435
  %3 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4436
  %entry3 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %3, i32 0, i32 0, !dbg !4436
  store %struct.edge_def* %call2, %struct.edge_def** %entry3, align 8, !dbg !4437
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_block, align 8, !dbg !4438
  %call4 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %4), !dbg !4439
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !4440
  %call5 = call %struct.ifsese_s* @create_if_region_on_edge(%struct.edge_def* %call4, %union.tree_node* %5), !dbg !4441
  store %struct.ifsese_s* %call5, %struct.ifsese_s** %if_region, align 8, !dbg !4442
  %6 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region, align 8, !dbg !4443
  %7 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4444
  call void @if_region_set_false_region(%struct.ifsese_s* %6, %struct.sese_s* %7), !dbg !4445
  %8 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region, align 8, !dbg !4446
  ret %struct.ifsese_s* %8, !dbg !4447
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !4448 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4449, metadata !DIExpression()), !dbg !4450
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4451
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !4451
  %tobool = icmp ne i8 %call, 0, !dbg !4451
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4451

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4451
  br label %cond.end, !dbg !4451

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4451

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4451
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4452
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !4452
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4452
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !4452
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4452

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4452
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !4452
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !4452
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !4452
  br label %cond.end5, !dbg !4452

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4452

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !4452
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !4452
  ret %struct.edge_def* %call7, !dbg !4453
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_ifsese_condition(%struct.ifsese_s* %if_region, %union.tree_node* %condition) #0 !dbg !4454 {
entry:
  %if_region.addr = alloca %struct.ifsese_s*, align 8
  %condition.addr = alloca %union.tree_node*, align 8
  %region = alloca %struct.sese_s*, align 8
  %entry2 = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp7 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.ifsese_s* %if_region, %struct.ifsese_s** %if_region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ifsese_s** %if_region.addr, metadata !4457, metadata !DIExpression()), !dbg !4458
  store %union.tree_node* %condition, %union.tree_node** %condition.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %condition.addr, metadata !4459, metadata !DIExpression()), !dbg !4460
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region, metadata !4461, metadata !DIExpression()), !dbg !4462
  %0 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region.addr, align 8, !dbg !4463
  %region1 = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %0, i32 0, i32 0, !dbg !4464
  %1 = load %struct.sese_s*, %struct.sese_s** %region1, align 8, !dbg !4464
  store %struct.sese_s* %1, %struct.sese_s** %region, align 8, !dbg !4462
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry2, metadata !4465, metadata !DIExpression()), !dbg !4466
  %2 = load %struct.sese_s*, %struct.sese_s** %region, align 8, !dbg !4467
  %entry3 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %2, i32 0, i32 0, !dbg !4468
  %3 = load %struct.edge_def*, %struct.edge_def** %entry3, align 8, !dbg !4468
  store %struct.edge_def* %3, %struct.edge_def** %entry2, align 8, !dbg !4466
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4469, metadata !DIExpression()), !dbg !4470
  %4 = load %struct.edge_def*, %struct.edge_def** %entry2, align 8, !dbg !4471
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !4472
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4472
  store %struct.basic_block_def* %5, %struct.basic_block_def** %bb, align 8, !dbg !4470
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !4473, metadata !DIExpression()), !dbg !4474
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4475
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %6), !dbg !4476
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %last, align 8, !dbg !4474
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4477, metadata !DIExpression()), !dbg !4478
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4479
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %gsi, %struct.basic_block_def* %7), !dbg !4480
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !4481, metadata !DIExpression()), !dbg !4482
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4483
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %8), !dbg !4483
  %cmp = icmp eq i32 %call4, 1, !dbg !4483
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4483

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1582, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4483
  br label %cond.end, !dbg !4483

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4483

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4483
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !4484
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4485
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %9), !dbg !4486
  %10 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4486
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4486
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !4486
  %12 = load %union.tree_node*, %union.tree_node** %condition.addr, align 8, !dbg !4487
  %call5 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %12, i8 zeroext 1, %union.tree_node* null, i8 zeroext 0, i32 0), !dbg !4488
  store %union.tree_node* %call5, %union.tree_node** %condition.addr, align 8, !dbg !4489
  %13 = load %union.tree_node*, %union.tree_node** %condition.addr, align 8, !dbg !4490
  %call6 = call %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node* %13, %union.tree_node* null, %union.tree_node* null), !dbg !4491
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4492
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4493
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp7, %struct.basic_block_def* %14), !dbg !4494
  %15 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4494
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp7 to i8*, !dbg !4494
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !4494
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4495
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %17, i32 0), !dbg !4496
  ret void, !dbg !4497
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !4498 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4501, metadata !DIExpression()), !dbg !4502
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4503, metadata !DIExpression()), !dbg !4504
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !4505, metadata !DIExpression()), !dbg !4506
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4507
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !4508
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !4509
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4510
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !4511
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4512
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4513
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4514
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !4515
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !4516
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4517
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !4518
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !4519
  ret void, !dbg !4520
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4521 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4524, metadata !DIExpression()), !dbg !4525
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4526
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4527
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4528
  %bf.load = load i32, i32* %1, align 8, !dbg !4528
  %bf.clear = and i32 %bf.load, 255, !dbg !4528
  ret i32 %bf.clear, !dbg !4529
}

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @scalar_evolution_in_region(%struct.sese_s* %region, %struct.loop* %loop, %union.tree_node* %t) #0 !dbg !4530 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  %def_loop = alloca %struct.loop*, align 8
  %before = alloca %struct.basic_block_def*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4533, metadata !DIExpression()), !dbg !4534
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4535, metadata !DIExpression()), !dbg !4536
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4537, metadata !DIExpression()), !dbg !4538
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !4539, metadata !DIExpression()), !dbg !4540
  call void @llvm.dbg.declare(metadata %struct.loop** %def_loop, metadata !4541, metadata !DIExpression()), !dbg !4542
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %before, metadata !4543, metadata !DIExpression()), !dbg !4544
  %0 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4545
  %call = call %struct.basic_block_def* @block_before_sese(%struct.sese_s* %0), !dbg !4546
  store %struct.basic_block_def* %call, %struct.basic_block_def** %before, align 8, !dbg !4544
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4547
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4547
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4547
  %bf.load = load i64, i64* %2, align 8, !dbg !4547
  %bf.clear = and i64 %bf.load, 65535, !dbg !4547
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4547
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !4549
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4550

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4551
  %4 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4552
  %call1 = call zeroext i8 @loop_in_sese_p(%struct.loop* %3, %struct.sese_s* %4), !dbg !4553
  %conv = zext i8 %call1 to i32, !dbg !4553
  %tobool = icmp ne i32 %conv, 0, !dbg !4553
  br i1 %tobool, label %if.then, label %if.end, !dbg !4554

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %before, align 8, !dbg !4555
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4556
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4557
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4558
  %call2 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %7, %union.tree_node* %8), !dbg !4559
  %call3 = call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %5, %struct.loop* %6, %union.tree_node* %call2), !dbg !4560
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !4561
  br label %return, !dbg !4561

if.end:                                           ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4562
  %10 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4564
  %call4 = call zeroext i8 @defined_in_sese_p(%union.tree_node* %9, %struct.sese_s* %10), !dbg !4565
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4565
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !4566

if.then6:                                         ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4567
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !4568
  br label %return, !dbg !4568

if.end7:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4569
  %ssa_name = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !4569
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4569
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4569
  store %union.gimple_statement_d* %13, %union.gimple_statement_d** %def, align 8, !dbg !4570
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !4571
  %call8 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %14), !dbg !4572
  store %struct.loop* %call8, %struct.loop** %def_loop, align 8, !dbg !4573
  %15 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !4574
  %16 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4576
  %call9 = call zeroext i8 @loop_in_sese_p(%struct.loop* %15, %struct.sese_s* %16), !dbg !4577
  %tobool10 = icmp ne i8 %call9, 0, !dbg !4577
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !4578

if.then11:                                        ; preds = %if.end7
  %17 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !4579
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4581
  %call12 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %17, %union.tree_node* %18), !dbg !4582
  store %union.tree_node* %call12, %union.tree_node** %t.addr, align 8, !dbg !4583
  %19 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !4584
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4585
  %call13 = call i32 @loop_depth(%struct.loop* %20), !dbg !4586
  %add = add i32 %call13, 1, !dbg !4587
  %call14 = call %struct.loop* @superloop_at_depth(%struct.loop* %19, i32 %add), !dbg !4588
  store %struct.loop* %call14, %struct.loop** %def_loop, align 8, !dbg !4589
  %21 = load %struct.loop*, %struct.loop** %def_loop, align 8, !dbg !4590
  %22 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4591
  %call15 = call %union.tree_node* @compute_overall_effect_of_inner_loop(%struct.loop* %21, %union.tree_node* %22), !dbg !4592
  store %union.tree_node* %call15, %union.tree_node** %t.addr, align 8, !dbg !4593
  %23 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4594
  store %union.tree_node* %23, %union.tree_node** %retval, align 8, !dbg !4595
  br label %return, !dbg !4595

if.else:                                          ; preds = %if.end7
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %before, align 8, !dbg !4596
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4597
  %26 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4598
  %call16 = call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %24, %struct.loop* %25, %union.tree_node* %26), !dbg !4599
  store %union.tree_node* %call16, %union.tree_node** %retval, align 8, !dbg !4600
  br label %return, !dbg !4600

return:                                           ; preds = %if.else, %if.then11, %if.then6, %if.then
  %27 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4601
  ret %union.tree_node* %27, !dbg !4601
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @block_before_sese(%struct.sese_s* %sese) #0 !dbg !4602 {
entry:
  %sese.addr = alloca %struct.sese_s*, align 8
  store %struct.sese_s* %sese, %struct.sese_s** %sese.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %sese.addr, metadata !4605, metadata !DIExpression()), !dbg !4606
  %0 = load %struct.sese_s*, %struct.sese_s** %sese.addr, align 8, !dbg !4607
  %entry1 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %0, i32 0, i32 0, !dbg !4607
  %1 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !4607
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 0, !dbg !4608
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4608
  ret %struct.basic_block_def* %2, !dbg !4609
}

declare dso_local %union.tree_node* @instantiate_scev(%struct.basic_block_def*, %struct.loop*, %union.tree_node*) #2

declare dso_local %union.tree_node* @analyze_scalar_evolution(%struct.loop*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @defined_in_sese_p(%union.tree_node* %name, %struct.sese_s* %region) #0 !dbg !4610 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !4613, metadata !DIExpression()), !dbg !4614
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4615, metadata !DIExpression()), !dbg !4616
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4617, metadata !DIExpression()), !dbg !4618
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !4619
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !4619
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4619
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4619
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !4618
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4620, metadata !DIExpression()), !dbg !4621
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4622
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !4623
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !4621
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4624
  %tobool = icmp ne %struct.basic_block_def* %3, null, !dbg !4624
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4625

land.rhs:                                         ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4626
  %5 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4627
  %call1 = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %4, %struct.sese_s* %5), !dbg !4628
  %conv = zext i8 %call1 to i32, !dbg !4628
  %tobool2 = icmp ne i32 %conv, 0, !dbg !4625
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !dbg !4629
  %land.ext = zext i1 %6 to i32, !dbg !4625
  %conv3 = trunc i32 %land.ext to i8, !dbg !4624
  ret i8 %conv3, !dbg !4630
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !4631 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4634, metadata !DIExpression()), !dbg !4635
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4636, metadata !DIExpression()), !dbg !4637
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4638
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !4639
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !4637
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4640
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !4640
  br i1 %tobool, label %if.end, label %if.then, !dbg !4642

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !4643
  br label %return, !dbg !4643

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4644
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !4645
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4645
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !4646
  br label %return, !dbg !4646

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !4647
  ret %struct.loop* %4, !dbg !4647
}

declare dso_local %struct.loop* @superloop_at_depth(%struct.loop*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !4648 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4651, metadata !DIExpression()), !dbg !4652
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4653
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !4653
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !4653
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !4653
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4653

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4653
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !4653
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !4653
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !4653
  br label %cond.end, !dbg !4653

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4653

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4653
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !4653
  ret i32 %call, !dbg !4654
}

declare dso_local %union.tree_node* @compute_overall_effect_of_inner_loop(%struct.loop*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @debug_rename_elt(%struct.rename_map_elt_s* %elt) #0 !dbg !4655 {
entry:
  %elt.addr = alloca %struct.rename_map_elt_s*, align 8
  store %struct.rename_map_elt_s* %elt, %struct.rename_map_elt_s** %elt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %elt.addr, metadata !4658, metadata !DIExpression()), !dbg !4659
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4660
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4661
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4662
  %2 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %elt.addr, align 8, !dbg !4663
  %old_name = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %2, i32 0, i32 0, !dbg !4664
  %3 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !4664
  call void @print_generic_expr(%struct._IO_FILE* %1, %union.tree_node* %3, i32 0), !dbg !4665
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4666
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)), !dbg !4667
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4668
  %6 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %elt.addr, align 8, !dbg !4669
  %expr = getelementptr inbounds %struct.rename_map_elt_s, %struct.rename_map_elt_s* %6, i32 0, i32 1, !dbg !4670
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !4670
  call void @print_generic_expr(%struct._IO_FILE* %5, %union.tree_node* %7, i32 0), !dbg !4671
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4672
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0)), !dbg !4673
  ret void, !dbg !4674
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @debug_ivtype_elt(%struct.ivtype_map_elt_s* %elt) #0 !dbg !4675 {
entry:
  %elt.addr = alloca %struct.ivtype_map_elt_s*, align 8
  store %struct.ivtype_map_elt_s* %elt, %struct.ivtype_map_elt_s** %elt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivtype_map_elt_s** %elt.addr, metadata !4679, metadata !DIExpression()), !dbg !4680
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4681
  %1 = load %struct.ivtype_map_elt_s*, %struct.ivtype_map_elt_s** %elt.addr, align 8, !dbg !4682
  %cloog_iv = getelementptr inbounds %struct.ivtype_map_elt_s, %struct.ivtype_map_elt_s* %1, i32 0, i32 1, !dbg !4683
  %2 = load i8*, i8** %cloog_iv, align 8, !dbg !4683
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8* %2), !dbg !4684
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4685
  %4 = load %struct.ivtype_map_elt_s*, %struct.ivtype_map_elt_s** %elt.addr, align 8, !dbg !4686
  %type = getelementptr inbounds %struct.ivtype_map_elt_s, %struct.ivtype_map_elt_s* %4, i32 0, i32 0, !dbg !4687
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4687
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %5, i32 0), !dbg !4688
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4689
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0)), !dbg !4690
  ret void, !dbg !4691
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bb_in_region(%struct.basic_block_def* %bb, %struct.basic_block_def* %entry1, %struct.basic_block_def* %exit) #0 !dbg !4692 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %entry.addr = alloca %struct.basic_block_def*, align 8
  %exit.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4695, metadata !DIExpression()), !dbg !4696
  store %struct.basic_block_def* %entry1, %struct.basic_block_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry.addr, metadata !4697, metadata !DIExpression()), !dbg !4698
  store %struct.basic_block_def* %exit, %struct.basic_block_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit.addr, metadata !4699, metadata !DIExpression()), !dbg !4700
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4701
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %entry.addr, align 8, !dbg !4702
  %call = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %0, %struct.basic_block_def* %1), !dbg !4703
  %conv = zext i8 %call to i32, !dbg !4703
  %tobool = icmp ne i32 %conv, 0, !dbg !4703
  br i1 %tobool, label %land.rhs, label %land.end9, !dbg !4704

land.rhs:                                         ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4705
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %exit.addr, align 8, !dbg !4706
  %call2 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %2, %struct.basic_block_def* %3), !dbg !4707
  %conv3 = zext i8 %call2 to i32, !dbg !4707
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !4707
  br i1 %tobool4, label %land.rhs5, label %land.end, !dbg !4708

land.rhs5:                                        ; preds = %land.rhs
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %entry.addr, align 8, !dbg !4709
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %exit.addr, align 8, !dbg !4710
  %call6 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %4, %struct.basic_block_def* %5), !dbg !4711
  %tobool7 = icmp ne i8 %call6, 0, !dbg !4712
  %lnot = xor i1 %tobool7, true, !dbg !4712
  br label %land.end

land.end:                                         ; preds = %land.rhs5, %land.rhs
  %6 = phi i1 [ false, %land.rhs ], [ %lnot, %land.rhs5 ], !dbg !4713
  %lnot8 = xor i1 %6, true, !dbg !4714
  br label %land.end9

land.end9:                                        ; preds = %land.end, %entry
  %7 = phi i1 [ false, %entry ], [ %lnot8, %land.end ], !dbg !4713
  %land.ext = zext i1 %7 to i32, !dbg !4704
  %conv10 = trunc i32 %land.ext to i8, !dbg !4703
  ret i8 %conv10, !dbg !4715
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sese_contains_loop(%struct.sese_s* %sese, %struct.loop* %loop) #0 !dbg !4716 {
entry:
  %sese.addr = alloca %struct.sese_s*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.sese_s* %sese, %struct.sese_s** %sese.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %sese.addr, metadata !4719, metadata !DIExpression()), !dbg !4720
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4721, metadata !DIExpression()), !dbg !4722
  %0 = load %struct.sese_s*, %struct.sese_s** %sese.addr, align 8, !dbg !4723
  %loops = getelementptr inbounds %struct.sese_s, %struct.sese_s* %0, i32 0, i32 3, !dbg !4723
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %loops, align 8, !dbg !4723
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4724
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !4725
  %3 = load i32, i32* %num, align 8, !dbg !4725
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !4726
  %conv = trunc i32 %call to i8, !dbg !4726
  ret i8 %conv, !dbg !4727
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop** @VEC_loop_p_heap_safe_push(%struct.VEC_loop_p_heap** %vec_, %struct.loop* %obj_) #0 !dbg !4728 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_heap**, align 8
  %obj_.addr = alloca %struct.loop*, align 8
  store %struct.VEC_loop_p_heap** %vec_, %struct.VEC_loop_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %vec_.addr, metadata !4731, metadata !DIExpression()), !dbg !4732
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !4733, metadata !DIExpression()), !dbg !4732
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !4732
  %call = call i32 @VEC_loop_p_heap_reserve(%struct.VEC_loop_p_heap** %0, i32 1), !dbg !4732
  %1 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !4732
  %2 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %1, align 8, !dbg !4732
  %tobool = icmp ne %struct.VEC_loop_p_heap* %2, null, !dbg !4732
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4732

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !4732
  %4 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %3, align 8, !dbg !4732
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %4, i32 0, i32 0, !dbg !4732
  br label %cond.end, !dbg !4732

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4732

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4732
  %5 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !4732
  %call1 = call %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %cond, %struct.loop* %5), !dbg !4732
  ret %struct.loop** %call1, !dbg !4732
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_heap_reserve(%struct.VEC_loop_p_heap** %vec_, i32 %alloc_) #0 !dbg !4734 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_loop_p_heap** %vec_, %struct.VEC_loop_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %vec_.addr, metadata !4737, metadata !DIExpression()), !dbg !4738
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4739, metadata !DIExpression()), !dbg !4738
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4740, metadata !DIExpression()), !dbg !4738
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !4738
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %0, align 8, !dbg !4738
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !4738
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4738

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !4738
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %2, align 8, !dbg !4738
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %3, i32 0, i32 0, !dbg !4738
  br label %cond.end, !dbg !4738

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4738

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4738
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4738
  %call = call i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %cond, i32 %4), !dbg !4738
  %tobool1 = icmp ne i32 %call, 0, !dbg !4738
  %lnot = xor i1 %tobool1, true, !dbg !4738
  %lnot.ext = zext i1 %lnot to i32, !dbg !4738
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4738
  %5 = load i32, i32* %extend, align 4, !dbg !4741
  %tobool2 = icmp ne i32 %5, 0, !dbg !4741
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4738

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !4741
  %7 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %6, align 8, !dbg !4741
  %8 = bitcast %struct.VEC_loop_p_heap* %7 to i8*, !dbg !4741
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4741
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !4741
  %10 = bitcast i8* %call3 to %struct.VEC_loop_p_heap*, !dbg !4741
  %11 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !4741
  store %struct.VEC_loop_p_heap* %10, %struct.VEC_loop_p_heap** %11, align 8, !dbg !4741
  br label %if.end, !dbg !4741

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4738
  ret i32 %12, !dbg !4738
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %vec_, %struct.loop* %obj_) #0 !dbg !4743 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %obj_.addr = alloca %struct.loop*, align 8
  %slot_ = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !4746, metadata !DIExpression()), !dbg !4747
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !4748, metadata !DIExpression()), !dbg !4747
  call void @llvm.dbg.declare(metadata %struct.loop*** %slot_, metadata !4749, metadata !DIExpression()), !dbg !4747
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4747
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %0, i32 0, i32 0, !dbg !4747
  %1 = load i32, i32* %num, align 8, !dbg !4747
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4747
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !4747
  %3 = load i32, i32* %alloc, align 4, !dbg !4747
  %cmp = icmp ult i32 %1, %3, !dbg !4747
  %conv = zext i1 %cmp to i32, !dbg !4747
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4747
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !4747
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4747
  %num1 = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 0, !dbg !4747
  %6 = load i32, i32* %num1, align 8, !dbg !4747
  %inc = add i32 %6, 1, !dbg !4747
  store i32 %inc, i32* %num1, align 8, !dbg !4747
  %idxprom = zext i32 %6 to i64, !dbg !4747
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !4747
  store %struct.loop** %arrayidx, %struct.loop*** %slot_, align 8, !dbg !4747
  %7 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !4747
  %8 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !4747
  store %struct.loop* %7, %struct.loop** %8, align 8, !dbg !4747
  %9 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !4747
  ret %struct.loop** %9, !dbg !4747
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %vec_, i32 %alloc_) #0 !dbg !4750 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !4753, metadata !DIExpression()), !dbg !4754
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4755, metadata !DIExpression()), !dbg !4754
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4754
  %cmp = icmp sge i32 %0, 0, !dbg !4754
  %conv = zext i1 %cmp to i32, !dbg !4754
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4754
  %tobool = icmp ne %struct.VEC_loop_p_base* %1, null, !dbg !4754
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4754

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4754
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !4754
  %3 = load i32, i32* %alloc, align 4, !dbg !4754
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4754
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 0, !dbg !4754
  %5 = load i32, i32* %num, align 8, !dbg !4754
  %sub = sub i32 %3, %5, !dbg !4754
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4754
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4754
  %conv2 = zext i1 %cmp1 to i32, !dbg !4754
  br label %cond.end, !dbg !4754

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4754
  %tobool3 = icmp ne i32 %7, 0, !dbg !4754
  %lnot = xor i1 %tobool3, true, !dbg !4754
  %lnot.ext = zext i1 %lnot to i32, !dbg !4754
  br label %cond.end, !dbg !4754

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4754
  ret i32 %cond, !dbg !4754
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sese_build_liveouts_bb(%struct.sese_s* %region, %struct.bitmap_head_def* %liveouts, %struct.basic_block_def* %bb) #0 !dbg !4756 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %liveouts.addr = alloca %struct.bitmap_head_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp2 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp12 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4759, metadata !DIExpression()), !dbg !4760
  store %struct.bitmap_head_def* %liveouts, %struct.bitmap_head_def** %liveouts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %liveouts.addr, metadata !4761, metadata !DIExpression()), !dbg !4762
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4763, metadata !DIExpression()), !dbg !4764
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4765, metadata !DIExpression()), !dbg !4766
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4767, metadata !DIExpression()), !dbg !4768
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4769, metadata !DIExpression()), !dbg !4770
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4771, metadata !DIExpression()), !dbg !4772
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !4773, metadata !DIExpression()), !dbg !4774
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4775
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !4775
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4775
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4775
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !4775
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !4775
  store i32 %3, i32* %2, align 8, !dbg !4775
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !4775
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !4775
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !4775
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4775
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4775
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !4775
  br label %for.cond, !dbg !4775

for.cond:                                         ; preds = %for.inc10, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4777
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4777
  %10 = load i32, i32* %9, align 8, !dbg !4777
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4777
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4777
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !4777
  %tobool = icmp ne i8 %call1, 0, !dbg !4775
  br i1 %tobool, label %for.body, label %for.end11, !dbg !4775

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4779
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 1, !dbg !4781
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4781
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp2, %struct.basic_block_def* %14), !dbg !4782
  %15 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4782
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp2 to i8*, !dbg !4782
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !4782
  br label %for.cond3, !dbg !4783

for.cond3:                                        ; preds = %for.inc, %for.body
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4784
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4786
  %lnot = xor i1 %tobool5, true, !dbg !4786
  br i1 %lnot, label %for.body6, label %for.end, !dbg !4787

for.body6:                                        ; preds = %for.cond3
  %17 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4788
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts.addr, align 8, !dbg !4789
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4790
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4791
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4791
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 6, !dbg !4791
  %21 = load i32, i32* %dest_idx, align 4, !dbg !4791
  %call8 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %call7, i32 %21), !dbg !4791
  %call9 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call8), !dbg !4791
  call void @sese_build_liveouts_use(%struct.sese_s* %17, %struct.bitmap_head_def* %18, %struct.basic_block_def* %19, %union.tree_node* %call9), !dbg !4792
  br label %for.inc, !dbg !4792

for.inc:                                          ; preds = %for.body6
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !4793
  br label %for.cond3, !dbg !4794, !llvm.loop !4795

for.end:                                          ; preds = %for.cond3
  br label %for.inc10, !dbg !4796

for.inc10:                                        ; preds = %for.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4777
  br label %for.cond, !dbg !4777, !llvm.loop !4797

for.end11:                                        ; preds = %for.cond
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4799
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp12, %struct.basic_block_def* %22), !dbg !4801
  %23 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4801
  %24 = bitcast %struct.gimple_stmt_iterator* %tmp12 to i8*, !dbg !4801
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 24, i1 false), !dbg !4801
  br label %for.cond13, !dbg !4802

for.cond13:                                       ; preds = %for.inc31, %for.end11
  %call14 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4803
  %tobool15 = icmp ne i8 %call14, 0, !dbg !4805
  %lnot16 = xor i1 %tobool15, true, !dbg !4805
  br i1 %lnot16, label %for.body17, label %for.end32, !dbg !4806

for.body17:                                       ; preds = %for.cond13
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4807, metadata !DIExpression()), !dbg !4809
  %call18 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4810
  store %union.gimple_statement_d* %call18, %union.gimple_statement_d** %stmt, align 8, !dbg !4809
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4811
  %call19 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %25), !dbg !4813
  %tobool20 = icmp ne i8 %call19, 0, !dbg !4813
  br i1 %tobool20, label %if.then, label %if.end, !dbg !4814

if.then:                                          ; preds = %for.body17
  br label %for.inc31, !dbg !4815

if.end:                                           ; preds = %for.body17
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4816
  %call21 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %26, i32 5), !dbg !4816
  store %struct.ssa_use_operand_d* %call21, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4816
  br label %for.cond22, !dbg !4816

for.cond22:                                       ; preds = %for.inc28, %if.end
  %call23 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4818
  %tobool24 = icmp ne i8 %call23, 0, !dbg !4818
  %lnot25 = xor i1 %tobool24, true, !dbg !4818
  br i1 %lnot25, label %for.body26, label %for.end30, !dbg !4816

for.body26:                                       ; preds = %for.cond22
  %27 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4820
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts.addr, align 8, !dbg !4821
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4822
  %30 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4823
  %call27 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %30), !dbg !4823
  call void @sese_build_liveouts_use(%struct.sese_s* %27, %struct.bitmap_head_def* %28, %struct.basic_block_def* %29, %union.tree_node* %call27), !dbg !4824
  br label %for.inc28, !dbg !4824

for.inc28:                                        ; preds = %for.body26
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !4818
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4818
  br label %for.cond22, !dbg !4818, !llvm.loop !4825

for.end30:                                        ; preds = %for.cond22
  br label %for.inc31, !dbg !4827

for.inc31:                                        ; preds = %for.end30, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !4828
  br label %for.cond13, !dbg !4829, !llvm.loop !4830

for.end32:                                        ; preds = %for.cond13
  ret void, !dbg !4832
}

; Function Attrs: noinline nounwind uwtable
define internal void @sese_reset_debug_liveouts_bb(%struct.sese_s* %region, %struct.bitmap_head_def* %liveouts, %struct.basic_block_def* %bb) #0 !dbg !4833 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %liveouts.addr = alloca %struct.bitmap_head_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4834, metadata !DIExpression()), !dbg !4835
  store %struct.bitmap_head_def* %liveouts, %struct.bitmap_head_def** %liveouts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %liveouts.addr, metadata !4836, metadata !DIExpression()), !dbg !4837
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4838, metadata !DIExpression()), !dbg !4839
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4840, metadata !DIExpression()), !dbg !4841
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4842, metadata !DIExpression()), !dbg !4843
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !4844, metadata !DIExpression()), !dbg !4845
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4846
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !4848
  %1 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4848
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4848
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !4848
  br label %for.cond, !dbg !4849

for.cond:                                         ; preds = %for.inc16, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4850
  %tobool = icmp ne i8 %call, 0, !dbg !4852
  %lnot = xor i1 %tobool, true, !dbg !4852
  br i1 %lnot, label %for.body, label %for.end17, !dbg !4853

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4854, metadata !DIExpression()), !dbg !4856
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4857
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !4856
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4858
  %call2 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %3), !dbg !4860
  %tobool3 = icmp ne i8 %call2, 0, !dbg !4860
  br i1 %tobool3, label %if.end, label %if.then, !dbg !4861

if.then:                                          ; preds = %for.body
  br label %for.inc16, !dbg !4862

if.end:                                           ; preds = %for.body
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4863
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %4, i32 5), !dbg !4863
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4863
  br label %for.cond5, !dbg !4863

for.cond5:                                        ; preds = %for.inc, %if.end
  %call6 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4865
  %tobool7 = icmp ne i8 %call6, 0, !dbg !4865
  %lnot8 = xor i1 %tobool7, true, !dbg !4865
  br i1 %lnot8, label %for.body9, label %for.end, !dbg !4863

for.body9:                                        ; preds = %for.cond5
  %5 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4867
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts.addr, align 8, !dbg !4869
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4870
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4871
  %call10 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %8), !dbg !4871
  %call11 = call zeroext i8 @sese_bad_liveouts_use(%struct.sese_s* %5, %struct.bitmap_head_def* %6, %struct.basic_block_def* %7, %union.tree_node* %call10), !dbg !4872
  %tobool12 = icmp ne i8 %call11, 0, !dbg !4872
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !4873

if.then13:                                        ; preds = %for.body9
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4874
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %9), !dbg !4876
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4877
  call void @update_stmt(%union.gimple_statement_d* %10), !dbg !4878
  br label %for.end, !dbg !4879

if.end14:                                         ; preds = %for.body9
  br label %for.inc, !dbg !4880

for.inc:                                          ; preds = %if.end14
  %call15 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !4865
  store %struct.ssa_use_operand_d* %call15, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4865
  br label %for.cond5, !dbg !4865, !llvm.loop !4881

for.end:                                          ; preds = %if.then13, %for.cond5
  br label %for.inc16, !dbg !4883

for.inc16:                                        ; preds = %for.end, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !4884
  br label %for.cond, !dbg !4885, !llvm.loop !4886

for.end17:                                        ; preds = %for.cond
  ret void, !dbg !4888
}

; Function Attrs: noinline nounwind uwtable
define internal void @sese_build_liveouts_use(%struct.sese_s* %region, %struct.bitmap_head_def* %liveouts, %struct.basic_block_def* %bb, %union.tree_node* %use) #0 !dbg !4889 {
entry:
  %region.addr = alloca %struct.sese_s*, align 8
  %liveouts.addr = alloca %struct.bitmap_head_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %use.addr = alloca %union.tree_node*, align 8
  %ver = alloca i32, align 4
  %def_bb = alloca %struct.basic_block_def*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !4892, metadata !DIExpression()), !dbg !4893
  store %struct.bitmap_head_def* %liveouts, %struct.bitmap_head_def** %liveouts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %liveouts.addr, metadata !4894, metadata !DIExpression()), !dbg !4895
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4896, metadata !DIExpression()), !dbg !4897
  store %union.tree_node* %use, %union.tree_node** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %use.addr, metadata !4898, metadata !DIExpression()), !dbg !4899
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !4900, metadata !DIExpression()), !dbg !4901
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !4902, metadata !DIExpression()), !dbg !4903
  %0 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !4904
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4904
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4904
  %bf.load = load i64, i64* %1, align 8, !dbg !4904
  %bf.clear = and i64 %bf.load, 65535, !dbg !4904
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4904
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !4906
  br i1 %cmp, label %if.then, label %if.end, !dbg !4907

if.then:                                          ; preds = %entry
  br label %return, !dbg !4908

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !4909
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !4909
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4909
  %3 = load i32, i32* %version, align 8, !dbg !4909
  store i32 %3, i32* %ver, align 4, !dbg !4910
  %4 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !4911
  %ssa_name1 = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !4911
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name1, i32 0, i32 2, !dbg !4911
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4911
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %5), !dbg !4912
  store %struct.basic_block_def* %call, %struct.basic_block_def** %def_bb, align 8, !dbg !4913
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !4914
  %tobool = icmp ne %struct.basic_block_def* %6, null, !dbg !4914
  br i1 %tobool, label %lor.lhs.false, label %if.then7, !dbg !4916

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !4917
  %8 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4918
  %call2 = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %7, %struct.sese_s* %8), !dbg !4919
  %tobool3 = icmp ne i8 %call2, 0, !dbg !4919
  br i1 %tobool3, label %lor.lhs.false4, label %if.then7, !dbg !4920

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4921
  %10 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !4922
  %call5 = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %9, %struct.sese_s* %10), !dbg !4923
  %conv = zext i8 %call5 to i32, !dbg !4923
  %tobool6 = icmp ne i32 %conv, 0, !dbg !4923
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !4924

if.then7:                                         ; preds = %lor.lhs.false4, %lor.lhs.false, %if.end
  br label %return, !dbg !4925

if.end8:                                          ; preds = %lor.lhs.false4
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts.addr, align 8, !dbg !4926
  %12 = load i32, i32* %ver, align 4, !dbg !4927
  %call9 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %12), !dbg !4928
  br label %return, !dbg !4929

return:                                           ; preds = %if.end8, %if.then7, %if.then
  ret void, !dbg !4929
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !4930 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !4933, metadata !DIExpression()), !dbg !4934
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !4935
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !4936
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !4936
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !4937
  ret %union.tree_node* %2, !dbg !4938
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !4939 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4940, metadata !DIExpression()), !dbg !4941
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4942, metadata !DIExpression()), !dbg !4943
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !4944, metadata !DIExpression()), !dbg !4945
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4946
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !4947
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !4948
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4949
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !4950
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4951
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4952
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4953
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !4954
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !4955
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4956
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !4957
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !4958
  ret void, !dbg !4959
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !4960 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4963, metadata !DIExpression()), !dbg !4964
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4965
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4966
  %cmp = icmp eq i32 %call, 2, !dbg !4967
  %conv = zext i1 %cmp to i32, !dbg !4967
  %conv1 = trunc i32 %conv to i8, !dbg !4966
  ret i8 %conv1, !dbg !4968
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !4969 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !4973, metadata !DIExpression()), !dbg !4974
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4975, metadata !DIExpression()), !dbg !4976
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4977, metadata !DIExpression()), !dbg !4978
  %0 = load i32, i32* %flags.addr, align 4, !dbg !4979
  %and = and i32 %0, 10, !dbg !4979
  %cmp = icmp eq i32 %and, 0, !dbg !4979
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !4979

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !4979
  %and1 = and i32 %1, 1, !dbg !4979
  %tobool = icmp ne i32 %and1, 0, !dbg !4979
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4979

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4979
  br label %cond.end, !dbg !4979

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4979

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4979
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4980
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4981
  %4 = load i32, i32* %flags.addr, align 4, !dbg !4982
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !4983
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4984
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !4985
  store i32 2, i32* %iter_type, align 4, !dbg !4986
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4987
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !4988
  ret %struct.ssa_use_operand_d* %call, !dbg !4989
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !4990 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !4995, metadata !DIExpression()), !dbg !4996
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !4997
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !4998
  %1 = load i8, i8* %done, align 8, !dbg !4998
  ret i8 %1, !dbg !4999
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5000 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5003, metadata !DIExpression()), !dbg !5004
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5005, metadata !DIExpression()), !dbg !5006
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5007
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !5009
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !5009
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !5007
  br i1 %tobool, label %if.then, label %if.end, !dbg !5010

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5011
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !5011
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !5011
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !5011
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5013
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5014
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !5015
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !5015
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !5016
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !5016
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5017
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !5018
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !5019
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5020
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5021
  br label %return, !dbg !5021

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5022
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !5024
  %10 = load i32, i32* %phi_i, align 8, !dbg !5024
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5025
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !5026
  %12 = load i32, i32* %num_phi, align 4, !dbg !5026
  %cmp = icmp slt i32 %10, %12, !dbg !5027
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !5028

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5029
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !5029
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5029
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5029
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !5029
  %16 = load i32, i32* %phi_i5, align 8, !dbg !5029
  %inc = add nsw i32 %16, 1, !dbg !5029
  store i32 %inc, i32* %phi_i5, align 8, !dbg !5029
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !5029
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5031
  br label %return, !dbg !5031

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5032
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !5033
  store i8 1, i8* %done, align 8, !dbg !5034
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5035
  br label %return, !dbg !5035

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5036
  ret %struct.ssa_use_operand_d* %18, !dbg !5036
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !5037 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5040, metadata !DIExpression()), !dbg !5041
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5042
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5043
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !5044
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5044
  ret %struct.basic_block_def* %1, !dbg !5045
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5046 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5049, metadata !DIExpression()), !dbg !5050
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5051
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5052
  %1 = load i32, i32* %flags, align 8, !dbg !5052
  %and = and i32 %1, 512, !dbg !5053
  %tobool = icmp ne i32 %and, 0, !dbg !5053
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5054

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5055
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5056
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5057
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5057
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5055
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5058

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5059
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5060
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5061
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5061
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5062
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5062
  br label %cond.end, !dbg !5058

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5058

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5058
  ret %struct.gimple_seq_d* %cond, !dbg !5063
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5064 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5070, metadata !DIExpression()), !dbg !5071
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5072
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5072
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5072

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5073
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5074
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5074
  br label %cond.end, !dbg !5072

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5072
  ret %struct.gimple_seq_node_d* %cond, !dbg !5075
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5076 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5079, metadata !DIExpression()), !dbg !5080
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5081, metadata !DIExpression()), !dbg !5082
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5083, metadata !DIExpression()), !dbg !5084
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5085
  %and = and i32 %0, 8, !dbg !5085
  %tobool = icmp ne i32 %and, 0, !dbg !5085
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !5085

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !5085
  %and1 = and i32 %1, 2, !dbg !5085
  %tobool2 = icmp ne i32 %and1, 0, !dbg !5085
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !5085

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5085
  %and3 = and i32 %2, 4, !dbg !5085
  %tobool4 = icmp ne i32 %and3, 0, !dbg !5085
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !5085

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !5085
  %and6 = and i32 %3, 1, !dbg !5085
  %tobool7 = icmp ne i32 %and6, 0, !dbg !5085
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !5085

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5085
  br label %cond.end, !dbg !5085

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !5085

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5085
  %4 = load i32, i32* %flags.addr, align 4, !dbg !5086
  %and8 = and i32 %4, 10, !dbg !5087
  %tobool9 = icmp ne i32 %and8, 0, !dbg !5087
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !5088

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5089
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !5090
  br label %cond.end12, !dbg !5088

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !5088

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !5088
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5091
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !5092
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !5093
  %7 = load i32, i32* %flags.addr, align 4, !dbg !5094
  %and14 = and i32 %7, 8, !dbg !5096
  %tobool15 = icmp ne i32 %and14, 0, !dbg !5096
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !5097

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5098
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !5099
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !5099
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !5098
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !5100

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5101
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !5102
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !5103
  br i1 %cmp, label %if.then, label %if.end, !dbg !5104

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5105
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !5106
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !5106
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !5107
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !5107
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5108
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !5109
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !5110
  br label %if.end, !dbg !5108

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !5111
  %and23 = and i32 %15, 5, !dbg !5112
  %tobool24 = icmp ne i32 %and23, 0, !dbg !5112
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !5113

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5114
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !5115
  br label %cond.end28, !dbg !5113

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !5113

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !5113
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5116
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !5117
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !5118
  %18 = load i32, i32* %flags.addr, align 4, !dbg !5119
  %and30 = and i32 %18, 4, !dbg !5121
  %tobool31 = icmp ne i32 %and30, 0, !dbg !5121
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !5122

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5123
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !5124
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !5124
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !5123
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !5125

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5126
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !5127
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !5128
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !5129

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5130
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !5131
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !5131
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !5132
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !5132
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5133
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !5134
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !5135
  br label %if.end42, !dbg !5133

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5136
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !5137
  store i8 0, i8* %done, align 8, !dbg !5138
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5139
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !5140
  store i32 0, i32* %phi_i, align 8, !dbg !5141
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5142
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !5143
  store i32 0, i32* %num_phi, align 4, !dbg !5144
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5145
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !5146
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5147
  ret void, !dbg !5148
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !5149 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5152, metadata !DIExpression()), !dbg !5153
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5154
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5156
  %tobool = icmp ne i8 %call, 0, !dbg !5156
  br i1 %tobool, label %if.end, label %if.then, !dbg !5157

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !5158
  br label %return, !dbg !5158

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5159
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5160
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5161
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !5162
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !5162
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !5163
  br label %return, !dbg !5163

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !5164
  ret %struct.def_optype_d* %3, !dbg !5164
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !5165 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5166, metadata !DIExpression()), !dbg !5167
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5168
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5170
  %tobool = icmp ne i8 %call, 0, !dbg !5170
  br i1 %tobool, label %if.end, label %if.then, !dbg !5171

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5172
  br label %return, !dbg !5172

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5173
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5174
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !5175
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !5175
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5176
  br label %return, !dbg !5176

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5177
  ret %union.tree_node* %3, !dbg !5177
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !5178 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5181, metadata !DIExpression()), !dbg !5182
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5183
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5185
  %tobool = icmp ne i8 %call, 0, !dbg !5185
  br i1 %tobool, label %if.end, label %if.then, !dbg !5186

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !5187
  br label %return, !dbg !5187

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5188
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5189
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5190
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !5191
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !5191
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !5192
  br label %return, !dbg !5192

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !5193
  ret %struct.use_optype_d* %3, !dbg !5193
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !5194 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5195, metadata !DIExpression()), !dbg !5196
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5197
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5199
  %tobool = icmp ne i8 %call, 0, !dbg !5199
  br i1 %tobool, label %if.end, label %if.then, !dbg !5200

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5201
  br label %return, !dbg !5201

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5202
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5203
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !5204
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !5204
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5205
  br label %return, !dbg !5205

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5206
  ret %union.tree_node* %3, !dbg !5206
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5207 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5208, metadata !DIExpression()), !dbg !5209
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5210
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5211
  %cmp = icmp uge i32 %call, 1, !dbg !5212
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5213

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5214
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5215
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5216
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5217
  %land.ext = zext i1 %2 to i32, !dbg !5213
  %conv = trunc i32 %land.ext to i8, !dbg !5211
  ret i8 %conv, !dbg !5218
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !5219 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5220, metadata !DIExpression()), !dbg !5221
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5222
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5223
  %cmp = icmp uge i32 %call, 6, !dbg !5224
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5225

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5226
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5227
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5228
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5229
  %land.ext = zext i1 %2 to i32, !dbg !5225
  %conv = trunc i32 %land.ext to i8, !dbg !5223
  ret i8 %conv, !dbg !5230
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sese_bad_liveouts_use(%struct.sese_s* %region, %struct.bitmap_head_def* %liveouts, %struct.basic_block_def* %bb, %union.tree_node* %use) #0 !dbg !5231 {
entry:
  %retval = alloca i8, align 1
  %region.addr = alloca %struct.sese_s*, align 8
  %liveouts.addr = alloca %struct.bitmap_head_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %use.addr = alloca %union.tree_node*, align 8
  %ver = alloca i32, align 4
  %def_bb = alloca %struct.basic_block_def*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !5234, metadata !DIExpression()), !dbg !5235
  store %struct.bitmap_head_def* %liveouts, %struct.bitmap_head_def** %liveouts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %liveouts.addr, metadata !5236, metadata !DIExpression()), !dbg !5237
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5238, metadata !DIExpression()), !dbg !5239
  store %union.tree_node* %use, %union.tree_node** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %use.addr, metadata !5240, metadata !DIExpression()), !dbg !5241
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !5242, metadata !DIExpression()), !dbg !5243
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !5244, metadata !DIExpression()), !dbg !5245
  %0 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !5246
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5246
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5246
  %bf.load = load i64, i64* %1, align 8, !dbg !5246
  %bf.clear = and i64 %bf.load, 65535, !dbg !5246
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5246
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5248
  br i1 %cmp, label %if.then, label %if.end, !dbg !5249

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5250
  br label %return, !dbg !5250

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !5251
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !5251
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5251
  %3 = load i32, i32* %version, align 8, !dbg !5251
  store i32 %3, i32* %ver, align 4, !dbg !5252
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %liveouts.addr, align 8, !dbg !5253
  %5 = load i32, i32* %ver, align 4, !dbg !5255
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %4, i32 %5), !dbg !5256
  %tobool = icmp ne i32 %call, 0, !dbg !5256
  br i1 %tobool, label %if.then1, label %if.end2, !dbg !5257

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5258
  br label %return, !dbg !5258

if.end2:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %use.addr, align 8, !dbg !5259
  %ssa_name3 = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !5259
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name3, i32 0, i32 2, !dbg !5259
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5259
  %call4 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %7), !dbg !5260
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %def_bb, align 8, !dbg !5261
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5262
  %tobool5 = icmp ne %struct.basic_block_def* %8, null, !dbg !5262
  br i1 %tobool5, label %lor.lhs.false, label %if.then11, !dbg !5264

lor.lhs.false:                                    ; preds = %if.end2
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5265
  %10 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !5266
  %call6 = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %9, %struct.sese_s* %10), !dbg !5267
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5267
  br i1 %tobool7, label %lor.lhs.false8, label %if.then11, !dbg !5268

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5269
  %12 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !5270
  %call9 = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %11, %struct.sese_s* %12), !dbg !5271
  %conv = zext i8 %call9 to i32, !dbg !5271
  %tobool10 = icmp ne i32 %conv, 0, !dbg !5271
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !5272

if.then11:                                        ; preds = %lor.lhs.false8, %lor.lhs.false, %if.end2
  store i8 0, i8* %retval, align 1, !dbg !5273
  br label %return, !dbg !5273

if.end12:                                         ; preds = %lor.lhs.false8
  store i8 1, i8* %retval, align 1, !dbg !5274
  br label %return, !dbg !5274

return:                                           ; preds = %if.end12, %if.then11, %if.then1, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !5275
  ret i8 %13, !dbg !5275
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %dbg) #0 !dbg !5276 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !5279, metadata !DIExpression()), !dbg !5280
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !5281
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* null), !dbg !5282
  ret void, !dbg !5283
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !5284 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5285, metadata !DIExpression()), !dbg !5286
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5287
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5289
  %tobool = icmp ne i8 %call, 0, !dbg !5289
  br i1 %tobool, label %if.then, label %if.end, !dbg !5290

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5291
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !5293
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5294
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !5295
  br label %if.end, !dbg !5296

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5297
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !5298 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5301, metadata !DIExpression()), !dbg !5302
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5303, metadata !DIExpression()), !dbg !5304
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !5305, metadata !DIExpression()), !dbg !5306
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5307
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5307
  %conv = zext i8 %call to i32, !dbg !5307
  %tobool = icmp ne i32 %conv, 0, !dbg !5307
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !5307

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !5307
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5307
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !5307
  %cmp = icmp ult i32 %1, %call1, !dbg !5307
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5307

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5307
  br label %cond.end, !dbg !5307

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5307

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5307
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5308
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5309
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !5310
  %5 = load i32, i32* %i.addr, align 4, !dbg !5311
  %idxprom = zext i32 %5 to i64, !dbg !5310
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !5310
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !5312
  ret void, !dbg !5313
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !5314 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5315, metadata !DIExpression()), !dbg !5316
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5317
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5318
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !5319
  %1 = load i32, i32* %num_ops, align 4, !dbg !5319
  ret i32 %1, !dbg !5320
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5321 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5324, metadata !DIExpression()), !dbg !5325
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5326, metadata !DIExpression()), !dbg !5327
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5328
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5329
  %idxprom = zext i32 %call to i64, !dbg !5330
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5330
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5330
  store i64 %1, i64* %off, align 8, !dbg !5331
  %2 = load i64, i64* %off, align 8, !dbg !5332
  %cmp = icmp ne i64 %2, 0, !dbg !5332
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5332

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5332
  br label %cond.end, !dbg !5332

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5332

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5332
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5333
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5334
  %5 = load i64, i64* %off, align 8, !dbg !5335
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5336
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5337
  ret %union.tree_node** %6, !dbg !5338
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5339 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5342, metadata !DIExpression()), !dbg !5343
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5344
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5345
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5346
  ret i32 %call1, !dbg !5347
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5348 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5351, metadata !DIExpression()), !dbg !5352
  %0 = load i32, i32* %code.addr, align 4, !dbg !5353
  %idxprom = zext i32 %0 to i64, !dbg !5354
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5354
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5354
  ret i32 %1, !dbg !5355
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

declare dso_local %union.tree_node* @create_new_def_for(%union.tree_node*, %union.gimple_statement_d*, %union.tree_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5356 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5357, metadata !DIExpression()), !dbg !5358
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5359
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !5360
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !5361
  ret %union.tree_node** %result, !dbg !5362
}

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !5363 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5366, metadata !DIExpression()), !dbg !5367
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5367
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !5367
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !5367
  ret %struct.VEC_int_heap* %1, !dbg !5367
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !5368 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5371
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5371
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5371
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5371
  %tobool = icmp ne %struct.loops* %1, null, !dbg !5371
  br i1 %tobool, label %if.end, label %if.then, !dbg !5373

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5374
  br label %return, !dbg !5374

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5375
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !5375
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !5375
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !5375
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !5375
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5375
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !5375
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !5375

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5375
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5375
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !5375
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !5375
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !5375
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !5375
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !5375
  br label %cond.end, !dbg !5375

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5375

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5375
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5375
  store i32 %call, i32* %retval, align 4, !dbg !5376
  br label %return, !dbg !5376

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5377
  ret i32 %8, !dbg !5377
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !5378 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !5383, metadata !DIExpression()), !dbg !5384
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !5385, metadata !DIExpression()), !dbg !5384
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !5386, metadata !DIExpression()), !dbg !5384
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5384
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !5384
  %1 = load i32, i32* %num, align 4, !dbg !5384
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5384
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !5384
  %3 = load i32, i32* %alloc, align 4, !dbg !5384
  %cmp = icmp ult i32 %1, %3, !dbg !5384
  %conv = zext i1 %cmp to i32, !dbg !5384
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5384
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !5384
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5384
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !5384
  %6 = load i32, i32* %num1, align 4, !dbg !5384
  %inc = add i32 %6, 1, !dbg !5384
  store i32 %inc, i32* %num1, align 4, !dbg !5384
  %idxprom = zext i32 %6 to i64, !dbg !5384
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !5384
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !5384
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !5384
  %8 = load i32*, i32** %slot_, align 8, !dbg !5384
  store i32 %7, i32* %8, align 4, !dbg !5384
  %9 = load i32*, i32** %slot_, align 8, !dbg !5384
  ret i32* %9, !dbg !5384
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !5387 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !5392, metadata !DIExpression()), !dbg !5393
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5394, metadata !DIExpression()), !dbg !5393
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !5395, metadata !DIExpression()), !dbg !5393
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5396
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !5396
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5396

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5396
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5396
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !5396
  %3 = load i32, i32* %num, align 4, !dbg !5396
  %cmp = icmp ult i32 %1, %3, !dbg !5396
  br i1 %cmp, label %if.then, label %if.else, !dbg !5393

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5398
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !5398
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5398
  %idxprom = zext i32 %5 to i64, !dbg !5398
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !5398
  %6 = load i32, i32* %arrayidx, align 4, !dbg !5398
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !5398
  store i32 %6, i32* %7, align 4, !dbg !5398
  store i32 1, i32* %retval, align 4, !dbg !5398
  br label %return, !dbg !5398

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !5400
  store i32 0, i32* %8, align 4, !dbg !5400
  store i32 0, i32* %retval, align 4, !dbg !5400
  br label %return, !dbg !5400

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5393
  ret i32 %9, !dbg !5393
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !5402 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !5405, metadata !DIExpression()), !dbg !5406
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5407
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5407
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5407
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5407
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !5407
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5407
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !5407
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5407

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5407
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5407
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !5407
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !5407
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !5407
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !5407
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !5407
  br label %cond.end, !dbg !5407

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5407

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5407
  %6 = load i32, i32* %num.addr, align 4, !dbg !5407
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !5407
  ret %struct.loop* %call, !dbg !5408
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !5409 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !5413, metadata !DIExpression()), !dbg !5414
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5415
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !5415
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !5415
  br i1 %tobool, label %if.then, label %if.end, !dbg !5414

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5415
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !5415
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !5415
  call void @free(i8* %4), !dbg !5415
  br label %if.end, !dbg !5415

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5414
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !5414
  ret void, !dbg !5414
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_vdef_before_sese(%struct.sese_s* %region, %union.tree_node* %name, %struct.simple_bitmap_def* %visited) #0 !dbg !5417 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %visited.addr = alloca %struct.simple_bitmap_def*, align 8
  %i = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %def_bb = alloca %struct.basic_block_def*, align 8
  %arg = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %use = alloca %union.tree_node*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !5420, metadata !DIExpression()), !dbg !5421
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !5422, metadata !DIExpression()), !dbg !5423
  store %struct.simple_bitmap_def* %visited, %struct.simple_bitmap_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited.addr, metadata !5424, metadata !DIExpression()), !dbg !5425
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5426, metadata !DIExpression()), !dbg !5427
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5428, metadata !DIExpression()), !dbg !5429
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5430
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5430
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5430
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5430
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !5429
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !5431, metadata !DIExpression()), !dbg !5432
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5433
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !5434
  store %struct.basic_block_def* %call, %struct.basic_block_def** %def_bb, align 8, !dbg !5432
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5435
  %tobool = icmp ne %struct.basic_block_def* %3, null, !dbg !5435
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5437

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5438
  %5 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !5439
  %call1 = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %4, %struct.sese_s* %5), !dbg !5440
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5440
  br i1 %tobool2, label %if.end, label %if.then, !dbg !5441

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5442
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !5443
  br label %return, !dbg !5443

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !5444
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 3, !dbg !5444
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5444
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !5444
  %9 = load i32, i32* %index, align 8, !dbg !5444
  %div = udiv i32 %9, 64, !dbg !5444
  %idxprom = zext i32 %div to i64, !dbg !5444
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !5444
  %10 = load i64, i64* %arrayidx, align 8, !dbg !5444
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5444
  %index3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !5444
  %12 = load i32, i32* %index3, align 8, !dbg !5444
  %rem = urem i32 %12, 64, !dbg !5444
  %sh_prom = zext i32 %rem to i64, !dbg !5444
  %shr = lshr i64 %10, %sh_prom, !dbg !5444
  %and = and i64 %shr, 1, !dbg !5444
  %tobool4 = icmp ne i64 %and, 0, !dbg !5444
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !5446

if.then5:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5447
  br label %return, !dbg !5447

if.end6:                                          ; preds = %if.end
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !5448
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5449
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !5450
  %15 = load i32, i32* %index7, align 8, !dbg !5450
  call void @SET_BIT(%struct.simple_bitmap_def* %13, i32 %15), !dbg !5451
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5452
  %call8 = call i32 @gimple_code(%union.gimple_statement_d* %16), !dbg !5453
  switch i32 %call8, label %sw.default [
    i32 16, label %sw.bb
    i32 6, label %sw.bb28
    i32 8, label %sw.bb28
  ], !dbg !5454

sw.bb:                                            ; preds = %if.end6
  store i32 0, i32* %i, align 4, !dbg !5455
  br label %for.cond, !dbg !5458

for.cond:                                         ; preds = %for.inc, %sw.bb
  %17 = load i32, i32* %i, align 4, !dbg !5459
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5461
  %call9 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %18), !dbg !5462
  %cmp = icmp ult i32 %17, %call9, !dbg !5463
  br i1 %cmp, label %for.body, label %for.end, !dbg !5464

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !5465, metadata !DIExpression()), !dbg !5467
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5468
  %20 = load i32, i32* %i, align 4, !dbg !5469
  %conv = zext i32 %20 to i64, !dbg !5469
  %call10 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %19, i64 %conv), !dbg !5470
  store %union.tree_node* %call10, %union.tree_node** %arg, align 8, !dbg !5467
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !5471, metadata !DIExpression()), !dbg !5472
  %21 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5473
  %ssa_name11 = bitcast %union.tree_node* %21 to %struct.tree_ssa_name*, !dbg !5473
  %def_stmt12 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name11, i32 0, i32 2, !dbg !5473
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt12, align 8, !dbg !5473
  %call13 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %22), !dbg !5475
  %tobool14 = icmp ne %struct.basic_block_def* %call13, null, !dbg !5475
  br i1 %tobool14, label %land.lhs.true, label %if.end23, !dbg !5476

land.lhs.true:                                    ; preds = %for.body
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5477
  %index15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !5478
  %24 = load i32, i32* %index15, align 8, !dbg !5478
  %25 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5479
  %ssa_name16 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !5479
  %def_stmt17 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name16, i32 0, i32 2, !dbg !5479
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt17, align 8, !dbg !5479
  %call18 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %26), !dbg !5480
  %index19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call18, i32 0, i32 9, !dbg !5481
  %27 = load i32, i32* %index19, align 8, !dbg !5481
  %cmp20 = icmp eq i32 %24, %27, !dbg !5482
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !5483

if.then22:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !5484

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %28 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !5485
  %29 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5486
  %30 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !5487
  %call24 = call %union.tree_node* @get_vdef_before_sese(%struct.sese_s* %28, %union.tree_node* %29, %struct.simple_bitmap_def* %30), !dbg !5488
  store %union.tree_node* %call24, %union.tree_node** %res, align 8, !dbg !5489
  %31 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5490
  %tobool25 = icmp ne %union.tree_node* %31, null, !dbg !5490
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !5492

if.then26:                                        ; preds = %if.end23
  %32 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5493
  store %union.tree_node* %32, %union.tree_node** %retval, align 8, !dbg !5494
  br label %return, !dbg !5494

if.end27:                                         ; preds = %if.end23
  br label %for.inc, !dbg !5495

for.inc:                                          ; preds = %if.end27, %if.then22
  %33 = load i32, i32* %i, align 4, !dbg !5496
  %inc = add i32 %33, 1, !dbg !5496
  store i32 %inc, i32* %i, align 4, !dbg !5496
  br label %for.cond, !dbg !5497, !llvm.loop !5498

for.end:                                          ; preds = %for.cond
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5500
  br label %return, !dbg !5500

sw.bb28:                                          ; preds = %if.end6, %if.end6
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5501, metadata !DIExpression()), !dbg !5503
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5504
  %call29 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %34), !dbg !5505
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5503
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !5506, metadata !DIExpression()), !dbg !5507
  %35 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5508
  %call30 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %35), !dbg !5508
  store %union.tree_node* %call30, %union.tree_node** %use, align 8, !dbg !5507
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5509
  %index31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !5511
  %37 = load i32, i32* %index31, align 8, !dbg !5511
  %38 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !5512
  %ssa_name32 = bitcast %union.tree_node* %38 to %struct.tree_ssa_name*, !dbg !5512
  %def_stmt33 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name32, i32 0, i32 2, !dbg !5512
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt33, align 8, !dbg !5512
  %call34 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %39), !dbg !5513
  %index35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call34, i32 0, i32 9, !dbg !5514
  %40 = load i32, i32* %index35, align 8, !dbg !5514
  %cmp36 = icmp eq i32 %37, %40, !dbg !5515
  br i1 %cmp36, label %if.then38, label %if.end40, !dbg !5516

if.then38:                                        ; preds = %sw.bb28
  %41 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !5517
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !5518
  %index39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 9, !dbg !5519
  %43 = load i32, i32* %index39, align 8, !dbg !5519
  call void @RESET_BIT(%struct.simple_bitmap_def* %41, i32 %43), !dbg !5520
  br label %if.end40, !dbg !5520

if.end40:                                         ; preds = %if.then38, %sw.bb28
  %44 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !5521
  %45 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !5522
  %46 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !5523
  %call41 = call %union.tree_node* @get_vdef_before_sese(%struct.sese_s* %44, %union.tree_node* %45, %struct.simple_bitmap_def* %46), !dbg !5524
  store %union.tree_node* %call41, %union.tree_node** %retval, align 8, !dbg !5525
  br label %return, !dbg !5525

sw.default:                                       ; preds = %if.end6
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5526
  br label %return, !dbg !5526

return:                                           ; preds = %sw.default, %if.end40, %for.end, %if.then26, %if.then5, %if.then
  %47 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5527
  ret %union.tree_node* %47, !dbg !5527
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !5528 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !5531, metadata !DIExpression()), !dbg !5532
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !5533, metadata !DIExpression()), !dbg !5534
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5535
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !5537
  %1 = load i8*, i8** %popcount, align 8, !dbg !5537
  %tobool = icmp ne i8* %1, null, !dbg !5535
  br i1 %tobool, label %if.then, label %if.end7, !dbg !5538

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !5539, metadata !DIExpression()), !dbg !5541
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5542
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !5542
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !5542
  %div = udiv i32 %3, 64, !dbg !5542
  %idxprom = zext i32 %div to i64, !dbg !5542
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !5542
  %4 = load i64, i64* %arrayidx, align 8, !dbg !5542
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !5542
  %rem = urem i32 %5, 64, !dbg !5542
  %sh_prom = zext i32 %rem to i64, !dbg !5542
  %shr = lshr i64 %4, %sh_prom, !dbg !5542
  %and = and i64 %shr, 1, !dbg !5542
  %conv = trunc i64 %and to i8, !dbg !5542
  store i8 %conv, i8* %oldbit, align 1, !dbg !5543
  %6 = load i8, i8* %oldbit, align 1, !dbg !5544
  %tobool1 = icmp ne i8 %6, 0, !dbg !5544
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !5546

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5547
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !5548
  %8 = load i8*, i8** %popcount3, align 8, !dbg !5548
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !5549
  %div4 = udiv i32 %9, 64, !dbg !5550
  %idxprom5 = zext i32 %div4 to i64, !dbg !5547
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !5547
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !5551
  %inc = add i8 %10, 1, !dbg !5551
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !5551
  br label %if.end, !dbg !5547

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !5552

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !5553
  %rem8 = urem i32 %11, 64, !dbg !5554
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !5555
  %shl = shl i64 1, %sh_prom9, !dbg !5555
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5556
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !5557
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !5558
  %div11 = udiv i32 %13, 64, !dbg !5559
  %idxprom12 = zext i32 %div11 to i64, !dbg !5556
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !5556
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !5560
  %or = or i64 %14, %shl, !dbg !5560
  store i64 %or, i64* %arrayidx13, align 8, !dbg !5560
  ret void, !dbg !5561
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !5562 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5565, metadata !DIExpression()), !dbg !5566
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !5567, metadata !DIExpression()), !dbg !5568
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5569
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5571
  %tobool = icmp ne i8 %call, 0, !dbg !5571
  br i1 %tobool, label %if.end, label %if.then, !dbg !5572

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5573
  br label %return, !dbg !5573

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5574
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5575
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5576
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !5577
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !5577
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !5578
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !5579
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !5579
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !5581

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !5582
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !5582
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !5583
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !5583
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5584
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5585
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !5586
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !5587
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !5588

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !5589
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !5589
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5590
  br label %return, !dbg !5590

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5591
  br label %return, !dbg !5591

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5592
  ret %struct.ssa_use_operand_d* %8, !dbg !5592
}

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !5593 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !5594, metadata !DIExpression()), !dbg !5595
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !5596, metadata !DIExpression()), !dbg !5597
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5598
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !5600
  %1 = load i8*, i8** %popcount, align 8, !dbg !5600
  %tobool = icmp ne i8* %1, null, !dbg !5598
  br i1 %tobool, label %if.then, label %if.end7, !dbg !5601

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !5602, metadata !DIExpression()), !dbg !5604
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5605
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !5605
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !5605
  %div = udiv i32 %3, 64, !dbg !5605
  %idxprom = zext i32 %div to i64, !dbg !5605
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !5605
  %4 = load i64, i64* %arrayidx, align 8, !dbg !5605
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !5605
  %rem = urem i32 %5, 64, !dbg !5605
  %sh_prom = zext i32 %rem to i64, !dbg !5605
  %shr = lshr i64 %4, %sh_prom, !dbg !5605
  %and = and i64 %shr, 1, !dbg !5605
  %conv = trunc i64 %and to i8, !dbg !5605
  store i8 %conv, i8* %oldbit, align 1, !dbg !5606
  %6 = load i8, i8* %oldbit, align 1, !dbg !5607
  %tobool1 = icmp ne i8 %6, 0, !dbg !5607
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !5609

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5610
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !5611
  %8 = load i8*, i8** %popcount3, align 8, !dbg !5611
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !5612
  %div4 = udiv i32 %9, 64, !dbg !5613
  %idxprom5 = zext i32 %div4 to i64, !dbg !5610
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !5610
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !5614
  %dec = add i8 %10, -1, !dbg !5614
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !5614
  br label %if.end, !dbg !5610

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !5615

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !5616
  %rem8 = urem i32 %11, 64, !dbg !5617
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !5618
  %shl = shl i64 1, %sh_prom9, !dbg !5618
  %neg = xor i64 %shl, -1, !dbg !5619
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5620
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !5621
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !5622
  %div11 = udiv i32 %13, 64, !dbg !5623
  %idxprom12 = zext i32 %div11 to i64, !dbg !5620
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !5620
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !5624
  %and14 = and i64 %14, %neg, !dbg !5624
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !5624
  ret void, !dbg !5625
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !5626 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5631, metadata !DIExpression()), !dbg !5632
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5633, metadata !DIExpression()), !dbg !5632
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5632
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5632
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5632

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5632
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5632
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !5632
  %3 = load i32, i32* %num, align 8, !dbg !5632
  %cmp = icmp ult i32 %1, %3, !dbg !5632
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5634
  %land.ext = zext i1 %4 to i32, !dbg !5632
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5632
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !5632
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5632
  %idxprom = zext i32 %6 to i64, !dbg !5632
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5632
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !5632
  ret %struct.edge_def* %7, !dbg !5632
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5635 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5638, metadata !DIExpression()), !dbg !5639
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5640, metadata !DIExpression()), !dbg !5641
  %0 = load i32, i32* %index.addr, align 4, !dbg !5642
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5642
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !5642
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !5642
  %2 = load i32, i32* %capacity, align 8, !dbg !5642
  %cmp = icmp ule i32 %0, %2, !dbg !5642
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5642

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5642
  br label %cond.end, !dbg !5642

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5642

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5642
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5643
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !5644
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !5645
  %4 = load i32, i32* %index.addr, align 4, !dbg !5646
  %idxprom = zext i32 %4 to i64, !dbg !5643
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !5643
  ret %struct.phi_arg_d* %arrayidx, !dbg !5647
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !5648 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !5651, metadata !DIExpression()), !dbg !5652
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5653
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !5655
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5655
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !5656
  br i1 %cmp, label %if.then, label %if.end, !dbg !5657

if.then:                                          ; preds = %entry
  br label %return, !dbg !5658

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5659
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5660
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5660
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5661
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !5662
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !5662
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !5663
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !5664
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5665
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !5666
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !5666
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5667
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !5668
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !5668
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !5669
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !5670
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5671
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !5672
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !5673
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5674
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !5675
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !5676
  br label %return, !dbg !5677

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !5677
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !5678 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !5681, metadata !DIExpression()), !dbg !5682
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !5683, metadata !DIExpression()), !dbg !5684
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !5685, metadata !DIExpression()), !dbg !5686
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5687
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5687
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5689

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5690
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5690
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5690
  %bf.load = load i64, i64* %2, align 8, !dbg !5690
  %bf.clear = and i64 %bf.load, 65535, !dbg !5690
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5690
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5691
  br i1 %cmp, label %if.then, label %if.else, !dbg !5692

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5693
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !5694
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5695
  br label %if.end, !dbg !5693

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5696
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !5696
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5696
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !5698
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5699
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !5700
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !5701
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5702
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !5703 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !5706, metadata !DIExpression()), !dbg !5707
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !5708, metadata !DIExpression()), !dbg !5709
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5710
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5711
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !5712
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5713
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5714
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5715
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5715
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5716
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !5717
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !5718
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5719
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5720
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !5721
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !5721
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !5722
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !5723
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5724
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5725
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !5726
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !5727
  ret void, !dbg !5728
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5729 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5732, metadata !DIExpression()), !dbg !5733
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5734
  %3 = load i32, i32* %index, align 8, !dbg !5734
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5735
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5735
  %6 = load i32, i32* %5, align 8, !dbg !5735
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5735
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !5735
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !5735
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5735
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5735

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5735
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5735
  %11 = load i32, i32* %10, align 8, !dbg !5735
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5735
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5735
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5735
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5735
  br label %cond.end, !dbg !5735

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5735

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5735
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5735
  %cmp = icmp eq i32 %3, %call2, !dbg !5736
  %conv = zext i1 %cmp to i32, !dbg !5736
  %conv3 = trunc i32 %conv to i8, !dbg !5737
  ret i8 %conv3, !dbg !5738
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5739 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5742, metadata !DIExpression()), !dbg !5743
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5744
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5744
  %5 = load i32, i32* %4, align 8, !dbg !5744
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5744
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5744
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5744
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5744
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5744

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5744
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5744
  %10 = load i32, i32* %9, align 8, !dbg !5744
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5744
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5744
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5744
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5744
  br label %cond.end, !dbg !5744

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5744

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5744
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5744
  %13 = load i32, i32* %index, align 8, !dbg !5744
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5744
  ret %struct.edge_def* %call2, !dbg !5745
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5746 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5749, metadata !DIExpression()), !dbg !5750
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5750
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5750
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5750

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5750
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5750
  %2 = load i32, i32* %num, align 8, !dbg !5750
  br label %cond.end, !dbg !5750

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5750

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5750
  ret i32 %cond, !dbg !5750
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5751 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5754, metadata !DIExpression()), !dbg !5755
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5756
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !5756
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !5756
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5756

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5756
  br label %cond.end, !dbg !5756

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5756

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5756
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5757
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !5757
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !5758
  ret %struct.VEC_edge_gc* %5, !dbg !5759
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expr_defined_in_loop_p(%union.tree_node* %expr, %struct.loop* %loop) #0 !dbg !5760 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5763, metadata !DIExpression()), !dbg !5764
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5765, metadata !DIExpression()), !dbg !5766
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5767
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5767
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5767
  %bf.load = load i64, i64* %1, align 8, !dbg !5767
  %bf.clear = and i64 %bf.load, 65535, !dbg !5767
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5767
  %idxprom = sext i32 %bf.cast to i64, !dbg !5767
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom, !dbg !5767
  %2 = load i8, i8* %arrayidx, align 1, !dbg !5767
  %conv = zext i8 %2 to i32, !dbg !5767
  switch i32 %conv, label %sw.default [
    i32 3, label %sw.bb
    i32 2, label %sw.bb16
    i32 1, label %sw.bb33
    i32 0, label %sw.bb38
  ], !dbg !5768

sw.bb:                                            ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5769
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5769
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5769
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5769
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !5769
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5771
  %call = call zeroext i8 @expr_defined_in_loop_p(%union.tree_node* %4, %struct.loop* %5), !dbg !5772
  %conv2 = zext i8 %call to i32, !dbg !5772
  %tobool = icmp ne i32 %conv2, 0, !dbg !5772
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !5773

lor.lhs.false:                                    ; preds = %sw.bb
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5774
  %exp3 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !5774
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 3, !dbg !5774
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i64 0, i64 1, !dbg !5774
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !5774
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5775
  %call6 = call zeroext i8 @expr_defined_in_loop_p(%union.tree_node* %7, %struct.loop* %8), !dbg !5776
  %conv7 = zext i8 %call6 to i32, !dbg !5776
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !5776
  br i1 %tobool8, label %lor.end, label %lor.rhs, !dbg !5777

lor.rhs:                                          ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5778
  %exp9 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !5778
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !5778
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 2, !dbg !5778
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !5778
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5779
  %call12 = call zeroext i8 @expr_defined_in_loop_p(%union.tree_node* %10, %struct.loop* %11), !dbg !5780
  %conv13 = zext i8 %call12 to i32, !dbg !5780
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !5777
  br label %lor.end, !dbg !5777

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %sw.bb
  %12 = phi i1 [ true, %lor.lhs.false ], [ true, %sw.bb ], [ %tobool14, %lor.rhs ]
  %lor.ext = zext i1 %12 to i32, !dbg !5777
  %conv15 = trunc i32 %lor.ext to i8, !dbg !5772
  store i8 %conv15, i8* %retval, align 1, !dbg !5781
  br label %return, !dbg !5781

sw.bb16:                                          ; preds = %entry
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5782
  %exp17 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !5782
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !5782
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 0, !dbg !5782
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !5782
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5783
  %call20 = call zeroext i8 @expr_defined_in_loop_p(%union.tree_node* %14, %struct.loop* %15), !dbg !5784
  %conv21 = zext i8 %call20 to i32, !dbg !5784
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !5784
  br i1 %tobool22, label %lor.end30, label %lor.rhs23, !dbg !5785

lor.rhs23:                                        ; preds = %sw.bb16
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5786
  %exp24 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !5786
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !5786
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 1, !dbg !5786
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !5786
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5787
  %call27 = call zeroext i8 @expr_defined_in_loop_p(%union.tree_node* %17, %struct.loop* %18), !dbg !5788
  %conv28 = zext i8 %call27 to i32, !dbg !5788
  %tobool29 = icmp ne i32 %conv28, 0, !dbg !5785
  br label %lor.end30, !dbg !5785

lor.end30:                                        ; preds = %lor.rhs23, %sw.bb16
  %19 = phi i1 [ true, %sw.bb16 ], [ %tobool29, %lor.rhs23 ]
  %lor.ext31 = zext i1 %19 to i32, !dbg !5785
  %conv32 = trunc i32 %lor.ext31 to i8, !dbg !5784
  store i8 %conv32, i8* %retval, align 1, !dbg !5789
  br label %return, !dbg !5789

sw.bb33:                                          ; preds = %entry
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5790
  %exp34 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !5790
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 3, !dbg !5790
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i64 0, i64 0, !dbg !5790
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !5790
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5791
  %call37 = call zeroext i8 @expr_defined_in_loop_p(%union.tree_node* %21, %struct.loop* %22), !dbg !5792
  store i8 %call37, i8* %retval, align 1, !dbg !5793
  br label %return, !dbg !5793

sw.bb38:                                          ; preds = %entry
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5794
  %base39 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5794
  %24 = bitcast %struct.tree_base* %base39 to i64*, !dbg !5794
  %bf.load40 = load i64, i64* %24, align 8, !dbg !5794
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !5794
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !5794
  %cmp = icmp eq i32 %bf.cast42, 141, !dbg !5795
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5796

land.rhs:                                         ; preds = %sw.bb38
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5797
  %26 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5798
  %call44 = call zeroext i8 @name_defined_in_loop_p(%union.tree_node* %25, %struct.loop* %26), !dbg !5799
  %conv45 = zext i8 %call44 to i32, !dbg !5799
  %tobool46 = icmp ne i32 %conv45, 0, !dbg !5796
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb38
  %27 = phi i1 [ false, %sw.bb38 ], [ %tobool46, %land.rhs ], !dbg !5800
  %land.ext = zext i1 %27 to i32, !dbg !5796
  %conv47 = trunc i32 %land.ext to i8, !dbg !5794
  store i8 %conv47, i8* %retval, align 1, !dbg !5801
  br label %return, !dbg !5801

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5802
  br label %return, !dbg !5802

return:                                           ; preds = %sw.default, %land.end, %sw.bb33, %lor.end30, %lor.end
  %28 = load i8, i8* %retval, align 1, !dbg !5803
  ret i8 %28, !dbg !5803
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @alive_after_loop(%union.tree_node* %name) #0 !dbg !5804 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %loop = alloca %struct.loop*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !5807, metadata !DIExpression()), !dbg !5808
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5809, metadata !DIExpression()), !dbg !5810
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !5811, metadata !DIExpression()), !dbg !5819
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5820, metadata !DIExpression()), !dbg !5821
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5822
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5822
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5822
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5822
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !5823
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 3, !dbg !5824
  %2 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5824
  store %struct.loop* %2, %struct.loop** %loop, align 8, !dbg !5821
  %3 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5825
  %call1 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %3), !dbg !5825
  store %struct.ssa_use_operand_d* %call1, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5825
  br label %for.cond, !dbg !5825

for.cond:                                         ; preds = %for.inc, %entry
  %call2 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5827
  %tobool = icmp ne i8 %call2, 0, !dbg !5827
  %lnot = xor i1 %tobool, true, !dbg !5827
  br i1 %lnot, label %for.body, label %for.end, !dbg !5825

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5829, metadata !DIExpression()), !dbg !5831
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5832
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 2, !dbg !5832
  %stmt3 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5832
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt3, align 8, !dbg !5832
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %stmt, align 8, !dbg !5831
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5833
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !5835
  %cmp = icmp eq i32 %call4, 16, !dbg !5836
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5837

land.lhs.true:                                    ; preds = %for.body
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5838
  %call5 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %7), !dbg !5839
  %loop_father6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call5, i32 0, i32 3, !dbg !5840
  %8 = load %struct.loop*, %struct.loop** %loop_father6, align 8, !dbg !5840
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5841
  %cmp7 = icmp ne %struct.loop* %8, %9, !dbg !5842
  br i1 %cmp7, label %if.then, label %if.end, !dbg !5843

if.then:                                          ; preds = %land.lhs.true
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5844
  store %union.gimple_statement_d* %10, %union.gimple_statement_d** %retval, align 8, !dbg !5845
  br label %return, !dbg !5845

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !5846

for.inc:                                          ; preds = %if.end
  %call8 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5827
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5827
  br label %for.cond, !dbg !5827, !llvm.loop !5847

for.end:                                          ; preds = %for.cond
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5849
  br label %return, !dbg !5849

return:                                           ; preds = %for.end, %if.then
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5850
  ret %union.gimple_statement_d* %11, !dbg !5850
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @close_phi_not_yet_inserted_p(%struct.loop* %loop, %union.tree_node* %name) #0 !dbg !5851 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5854, metadata !DIExpression()), !dbg !5855
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !5856, metadata !DIExpression()), !dbg !5857
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !5858, metadata !DIExpression()), !dbg !5859
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5860, metadata !DIExpression()), !dbg !5861
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5862
  %call = call %struct.edge_def* @single_exit(%struct.loop* %0), !dbg !5863
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !5864
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5864
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb, align 8, !dbg !5861
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5865
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %2), !dbg !5867
  %3 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !5867
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5867
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !5867
  br label %for.cond, !dbg !5868

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5869
  %tobool = icmp ne i8 %call1, 0, !dbg !5871
  %lnot = xor i1 %tobool, true, !dbg !5871
  br i1 %lnot, label %for.body, label %for.end, !dbg !5872

for.body:                                         ; preds = %for.cond
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5873
  %call3 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %call2, i64 0), !dbg !5875
  %5 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5876
  %cmp = icmp eq %union.tree_node* %call3, %5, !dbg !5877
  br i1 %cmp, label %if.then, label %if.end, !dbg !5878

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !5879
  br label %return, !dbg !5879

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5876

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !5880
  br label %for.cond, !dbg !5881, !llvm.loop !5882

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !5884
  br label %return, !dbg !5884

return:                                           ; preds = %for.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !5885
  ret i8 %6, !dbg !5885
}

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rename_map_elt_s** @VEC_rename_map_elt_heap_safe_push(%struct.VEC_rename_map_elt_heap** %vec_, %struct.rename_map_elt_s* %obj_) #0 !dbg !5886 {
entry:
  %vec_.addr = alloca %struct.VEC_rename_map_elt_heap**, align 8
  %obj_.addr = alloca %struct.rename_map_elt_s*, align 8
  store %struct.VEC_rename_map_elt_heap** %vec_, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rename_map_elt_heap*** %vec_.addr, metadata !5889, metadata !DIExpression()), !dbg !5890
  store %struct.rename_map_elt_s* %obj_, %struct.rename_map_elt_s** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %obj_.addr, metadata !5891, metadata !DIExpression()), !dbg !5890
  %0 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !5890
  %call = call i32 @VEC_rename_map_elt_heap_reserve(%struct.VEC_rename_map_elt_heap** %0, i32 1), !dbg !5890
  %1 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !5890
  %2 = load %struct.VEC_rename_map_elt_heap*, %struct.VEC_rename_map_elt_heap** %1, align 8, !dbg !5890
  %tobool = icmp ne %struct.VEC_rename_map_elt_heap* %2, null, !dbg !5890
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5890

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !5890
  %4 = load %struct.VEC_rename_map_elt_heap*, %struct.VEC_rename_map_elt_heap** %3, align 8, !dbg !5890
  %base = getelementptr inbounds %struct.VEC_rename_map_elt_heap, %struct.VEC_rename_map_elt_heap* %4, i32 0, i32 0, !dbg !5890
  br label %cond.end, !dbg !5890

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rename_map_elt_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5890
  %5 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %obj_.addr, align 8, !dbg !5890
  %call1 = call %struct.rename_map_elt_s** @VEC_rename_map_elt_base_quick_push(%struct.VEC_rename_map_elt_base* %cond, %struct.rename_map_elt_s* %5), !dbg !5890
  ret %struct.rename_map_elt_s** %call1, !dbg !5890
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @name_defined_in_loop_p(%union.tree_node* %name, %struct.loop* %loop) #0 !dbg !5892 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !5893, metadata !DIExpression()), !dbg !5894
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5895, metadata !DIExpression()), !dbg !5896
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5897
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5897
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5897
  %bf.load = load i64, i64* %1, align 8, !dbg !5897
  %bf.lshr = lshr i64 %bf.load, 32, !dbg !5897
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5897
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5897
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5897
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !5898

land.rhs:                                         ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5899
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !5899
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5899
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5899
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %3), !dbg !5900
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 3, !dbg !5901
  %4 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5901
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5902
  %cmp = icmp eq %struct.loop* %4, %5, !dbg !5903
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5904
  %land.ext = zext i1 %6 to i32, !dbg !5898
  %conv = trunc i32 %land.ext to i8, !dbg !5905
  ret i8 %conv, !dbg !5906
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !5907 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5911, metadata !DIExpression()), !dbg !5912
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5913, metadata !DIExpression()), !dbg !5914
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5915
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5915
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5915
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5916
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !5917
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5918
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5919
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5920
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !5920
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !5921
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5921
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5922
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !5923
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5924
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5925
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !5927
  %tobool = icmp ne i8 %call, 0, !dbg !5927
  br i1 %tobool, label %if.then, label %if.end, !dbg !5928

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5929
  br label %return, !dbg !5929

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5930
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !5931
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !5931
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5932
  br label %return, !dbg !5932

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5933
  ret %struct.ssa_use_operand_d* %9, !dbg !5933
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5934 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5939, metadata !DIExpression()), !dbg !5940
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5941
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5942
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5942
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5943
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5944
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5944
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !5945
  %conv = zext i1 %cmp to i32, !dbg !5945
  %conv1 = trunc i32 %conv to i8, !dbg !5946
  ret i8 %conv1, !dbg !5947
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5948 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5951, metadata !DIExpression()), !dbg !5952
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !5953, metadata !DIExpression()), !dbg !5954
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5955
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5956
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5956
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !5954
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !5957
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5958
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5958
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5959
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !5960
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !5961
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5962
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !5964
  %tobool = icmp ne i8 %call, 0, !dbg !5964
  br i1 %tobool, label %if.then, label %if.end, !dbg !5965

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5966
  br label %return, !dbg !5966

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5967
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !5968
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !5968
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5969
  br label %return, !dbg !5969

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5970
  ret %struct.ssa_use_operand_d* %8, !dbg !5970
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rename_map_elt_heap_reserve(%struct.VEC_rename_map_elt_heap** %vec_, i32 %alloc_) #0 !dbg !5971 {
entry:
  %vec_.addr = alloca %struct.VEC_rename_map_elt_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_rename_map_elt_heap** %vec_, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rename_map_elt_heap*** %vec_.addr, metadata !5974, metadata !DIExpression()), !dbg !5975
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5976, metadata !DIExpression()), !dbg !5975
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5977, metadata !DIExpression()), !dbg !5975
  %0 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !5975
  %1 = load %struct.VEC_rename_map_elt_heap*, %struct.VEC_rename_map_elt_heap** %0, align 8, !dbg !5975
  %tobool = icmp ne %struct.VEC_rename_map_elt_heap* %1, null, !dbg !5975
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5975

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !5975
  %3 = load %struct.VEC_rename_map_elt_heap*, %struct.VEC_rename_map_elt_heap** %2, align 8, !dbg !5975
  %base = getelementptr inbounds %struct.VEC_rename_map_elt_heap, %struct.VEC_rename_map_elt_heap* %3, i32 0, i32 0, !dbg !5975
  br label %cond.end, !dbg !5975

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5975

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rename_map_elt_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5975
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5975
  %call = call i32 @VEC_rename_map_elt_base_space(%struct.VEC_rename_map_elt_base* %cond, i32 %4), !dbg !5975
  %tobool1 = icmp ne i32 %call, 0, !dbg !5975
  %lnot = xor i1 %tobool1, true, !dbg !5975
  %lnot.ext = zext i1 %lnot to i32, !dbg !5975
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5975
  %5 = load i32, i32* %extend, align 4, !dbg !5978
  %tobool2 = icmp ne i32 %5, 0, !dbg !5978
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5975

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !5978
  %7 = load %struct.VEC_rename_map_elt_heap*, %struct.VEC_rename_map_elt_heap** %6, align 8, !dbg !5978
  %8 = bitcast %struct.VEC_rename_map_elt_heap* %7 to i8*, !dbg !5978
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5978
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5978
  %10 = bitcast i8* %call3 to %struct.VEC_rename_map_elt_heap*, !dbg !5978
  %11 = load %struct.VEC_rename_map_elt_heap**, %struct.VEC_rename_map_elt_heap*** %vec_.addr, align 8, !dbg !5978
  store %struct.VEC_rename_map_elt_heap* %10, %struct.VEC_rename_map_elt_heap** %11, align 8, !dbg !5978
  br label %if.end, !dbg !5978

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5975
  ret i32 %12, !dbg !5975
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rename_map_elt_s** @VEC_rename_map_elt_base_quick_push(%struct.VEC_rename_map_elt_base* %vec_, %struct.rename_map_elt_s* %obj_) #0 !dbg !5980 {
entry:
  %vec_.addr = alloca %struct.VEC_rename_map_elt_base*, align 8
  %obj_.addr = alloca %struct.rename_map_elt_s*, align 8
  %slot_ = alloca %struct.rename_map_elt_s**, align 8
  store %struct.VEC_rename_map_elt_base* %vec_, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rename_map_elt_base** %vec_.addr, metadata !5984, metadata !DIExpression()), !dbg !5985
  store %struct.rename_map_elt_s* %obj_, %struct.rename_map_elt_s** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s** %obj_.addr, metadata !5986, metadata !DIExpression()), !dbg !5985
  call void @llvm.dbg.declare(metadata %struct.rename_map_elt_s*** %slot_, metadata !5987, metadata !DIExpression()), !dbg !5985
  %0 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !5985
  %num = getelementptr inbounds %struct.VEC_rename_map_elt_base, %struct.VEC_rename_map_elt_base* %0, i32 0, i32 0, !dbg !5985
  %1 = load i32, i32* %num, align 8, !dbg !5985
  %2 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !5985
  %alloc = getelementptr inbounds %struct.VEC_rename_map_elt_base, %struct.VEC_rename_map_elt_base* %2, i32 0, i32 1, !dbg !5985
  %3 = load i32, i32* %alloc, align 4, !dbg !5985
  %cmp = icmp ult i32 %1, %3, !dbg !5985
  %conv = zext i1 %cmp to i32, !dbg !5985
  %4 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !5985
  %vec = getelementptr inbounds %struct.VEC_rename_map_elt_base, %struct.VEC_rename_map_elt_base* %4, i32 0, i32 2, !dbg !5985
  %5 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !5985
  %num1 = getelementptr inbounds %struct.VEC_rename_map_elt_base, %struct.VEC_rename_map_elt_base* %5, i32 0, i32 0, !dbg !5985
  %6 = load i32, i32* %num1, align 8, !dbg !5985
  %inc = add i32 %6, 1, !dbg !5985
  store i32 %inc, i32* %num1, align 8, !dbg !5985
  %idxprom = zext i32 %6 to i64, !dbg !5985
  %arrayidx = getelementptr inbounds [1 x %struct.rename_map_elt_s*], [1 x %struct.rename_map_elt_s*]* %vec, i64 0, i64 %idxprom, !dbg !5985
  store %struct.rename_map_elt_s** %arrayidx, %struct.rename_map_elt_s*** %slot_, align 8, !dbg !5985
  %7 = load %struct.rename_map_elt_s*, %struct.rename_map_elt_s** %obj_.addr, align 8, !dbg !5985
  %8 = load %struct.rename_map_elt_s**, %struct.rename_map_elt_s*** %slot_, align 8, !dbg !5985
  store %struct.rename_map_elt_s* %7, %struct.rename_map_elt_s** %8, align 8, !dbg !5985
  %9 = load %struct.rename_map_elt_s**, %struct.rename_map_elt_s*** %slot_, align 8, !dbg !5985
  ret %struct.rename_map_elt_s** %9, !dbg !5985
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rename_map_elt_base_space(%struct.VEC_rename_map_elt_base* %vec_, i32 %alloc_) #0 !dbg !5988 {
entry:
  %vec_.addr = alloca %struct.VEC_rename_map_elt_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_rename_map_elt_base* %vec_, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rename_map_elt_base** %vec_.addr, metadata !5991, metadata !DIExpression()), !dbg !5992
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5993, metadata !DIExpression()), !dbg !5992
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5992
  %cmp = icmp sge i32 %0, 0, !dbg !5992
  %conv = zext i1 %cmp to i32, !dbg !5992
  %1 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !5992
  %tobool = icmp ne %struct.VEC_rename_map_elt_base* %1, null, !dbg !5992
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5992

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !5992
  %alloc = getelementptr inbounds %struct.VEC_rename_map_elt_base, %struct.VEC_rename_map_elt_base* %2, i32 0, i32 1, !dbg !5992
  %3 = load i32, i32* %alloc, align 4, !dbg !5992
  %4 = load %struct.VEC_rename_map_elt_base*, %struct.VEC_rename_map_elt_base** %vec_.addr, align 8, !dbg !5992
  %num = getelementptr inbounds %struct.VEC_rename_map_elt_base, %struct.VEC_rename_map_elt_base* %4, i32 0, i32 0, !dbg !5992
  %5 = load i32, i32* %num, align 8, !dbg !5992
  %sub = sub i32 %3, %5, !dbg !5992
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5992
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5992
  %conv2 = zext i1 %cmp1 to i32, !dbg !5992
  br label %cond.end, !dbg !5992

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5992
  %tobool3 = icmp ne i32 %7, 0, !dbg !5992
  %lnot = xor i1 %tobool3, true, !dbg !5992
  %lnot.ext = zext i1 %lnot to i32, !dbg !5992
  br label %cond.end, !dbg !5992

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5992
  ret i32 %cond, !dbg !5992
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @default_before_guard(%struct.htab* %before_guard, %union.tree_node* %old_name) #0 !dbg !5994 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %before_guard.addr = alloca %struct.htab*, align 8
  %old_name.addr = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  store %struct.htab* %before_guard, %struct.htab** %before_guard.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %before_guard.addr, metadata !5995, metadata !DIExpression()), !dbg !5996
  store %union.tree_node* %old_name, %union.tree_node** %old_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name.addr, metadata !5997, metadata !DIExpression()), !dbg !5998
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !5999, metadata !DIExpression()), !dbg !6000
  %0 = load %struct.htab*, %struct.htab** %before_guard.addr, align 8, !dbg !6001
  %1 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !6002
  %call = call %union.tree_node* @get_rename(%struct.htab* %0, %union.tree_node* %1), !dbg !6003
  store %union.tree_node* %call, %union.tree_node** %res, align 8, !dbg !6000
  %2 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !6004
  %3 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !6006
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !6007
  br i1 %cmp, label %if.then, label %if.end5, !dbg !6008

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !6009
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6012
  %tobool = icmp ne i8 %call1, 0, !dbg !6012
  br i1 %tobool, label %if.then2, label %if.end, !dbg !6013

if.then2:                                         ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !6014
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6014
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6014
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6014
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !6014
  %call3 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %6, %union.tree_node* %7), !dbg !6014
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !6015
  br label %return, !dbg !6015

if.end:                                           ; preds = %if.then
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6016
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !6016
  %9 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !6017
  %ssa_name = bitcast %union.tree_node* %9 to %struct.tree_ssa_name*, !dbg !6017
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6017
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6017
  %call4 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr, %union.tree_node* %10), !dbg !6018
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !6019
  br label %return, !dbg !6019

if.end5:                                          ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !6020
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !6021
  br label %return, !dbg !6021

return:                                           ; preds = %if.end5, %if.end, %if.then2
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6022
  ret %union.tree_node* %12, !dbg !6022
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_for_phi_arg(%union.tree_node* %expr, %union.tree_node* %res, %struct.edge_def* %e) #0 !dbg !6023 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %res.addr = alloca %union.tree_node*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %type = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !6026, metadata !DIExpression()), !dbg !6027
  store %union.tree_node* %res, %union.tree_node** %res.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %res.addr, metadata !6028, metadata !DIExpression()), !dbg !6029
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !6030, metadata !DIExpression()), !dbg !6031
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6032, metadata !DIExpression()), !dbg !6033
  %0 = load %union.tree_node*, %union.tree_node** %res.addr, align 8, !dbg !6034
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6034
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6034
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6034
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !6033
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6035
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !6035
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !6035
  %3 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !6035
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6037
  %cmp = icmp ne %union.tree_node* %3, %4, !dbg !6038
  br i1 %cmp, label %if.then, label %if.end, !dbg !6039

if.then:                                          ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6040
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6040
  %call = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %5, %union.tree_node* %6), !dbg !6040
  store %union.tree_node* %call, %union.tree_node** %expr.addr, align 8, !dbg !6041
  br label %if.end, !dbg !6042

if.end:                                           ; preds = %if.then, %entry
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6043
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6043
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !6043
  %bf.load = load i64, i64* %8, align 8, !dbg !6043
  %bf.clear = and i64 %bf.load, 65535, !dbg !6043
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6043
  %cmp4 = icmp ne i32 %bf.cast, 141, !dbg !6045
  br i1 %cmp4, label %land.lhs.true, label %if.end11, !dbg !6046

land.lhs.true:                                    ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6047
  %call5 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %9), !dbg !6048
  %tobool = icmp ne i8 %call5, 0, !dbg !6048
  br i1 %tobool, label %if.end11, label %if.then6, !dbg !6049

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6050, metadata !DIExpression()), !dbg !6052
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6053
  %call7 = call %union.tree_node* @create_tmp_var(%union.tree_node* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)), !dbg !6054
  store %union.tree_node* %call7, %union.tree_node** %var, align 8, !dbg !6052
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !6055, metadata !DIExpression()), !dbg !6056
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6057
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6057
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6057
  %call8 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !6057
  store %union.tree_node* %call8, %union.tree_node** %expr.addr, align 8, !dbg !6058
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6059
  %call9 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %14, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !6060
  store %union.tree_node* %call9, %union.tree_node** %expr.addr, align 8, !dbg !6061
  %15 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6062
  %16 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !6063
  %call10 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %15, %struct.gimple_seq_d* %16), !dbg !6064
  br label %if.end11, !dbg !6065

if.end11:                                         ; preds = %if.then6, %land.lhs.true, %if.end
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6066
  ret %union.tree_node* %17, !dbg !6067
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !6068 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6071, metadata !DIExpression()), !dbg !6072
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6073
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !6073
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6073
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6073
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6073

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6073
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !6073
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !6073
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6073
  br label %cond.end, !dbg !6073

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6073

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6073
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6073
  %cmp = icmp eq i32 %call, 1, !dbg !6074
  %conv = zext i1 %cmp to i32, !dbg !6074
  %conv2 = trunc i32 %conv to i8, !dbg !6073
  ret i8 %conv2, !dbg !6075
}

declare dso_local %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d*) #2

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vop(%struct.function* %fun) #0 !dbg !6076 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !6081, metadata !DIExpression()), !dbg !6082
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6083
  %tobool = icmp ne %struct.function* %0, null, !dbg !6083
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6083

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6083
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !6083
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6083
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !6083
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !6083

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6083
  br label %cond.end, !dbg !6083

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6083

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6083
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6084
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !6085
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !6085
  %vop = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 3, !dbg !6086
  %5 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !6086
  ret %union.tree_node* %5, !dbg !6087
}

declare dso_local zeroext i8 @maybe_duplicate_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

declare dso_local void @gimple_duplicate_stmt_histograms(%struct.function*, %union.gimple_statement_d*, %struct.function*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6088 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6091, metadata !DIExpression()), !dbg !6092
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6093, metadata !DIExpression()), !dbg !6094
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6095, metadata !DIExpression()), !dbg !6096
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6097
  %and = and i32 %0, 5, !dbg !6097
  %cmp = icmp eq i32 %and, 0, !dbg !6097
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !6097

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6097
  %and1 = and i32 %1, 2, !dbg !6097
  %tobool = icmp ne i32 %and1, 0, !dbg !6097
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6097

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6097
  br label %cond.end, !dbg !6097

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6097
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6098
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6099
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6100
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !6101
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6102
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !6103
  store i32 3, i32* %iter_type, align 4, !dbg !6104
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6105
  %call = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %6), !dbg !6106
  ret %union.tree_node** %call, !dbg !6107
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !6108 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !6111, metadata !DIExpression()), !dbg !6112
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6113
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6114
  ret %union.tree_node* %1, !dbg !6115
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6116 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6119, metadata !DIExpression()), !dbg !6120
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !6121, metadata !DIExpression()), !dbg !6122
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6123
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !6125
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !6125
  %tobool = icmp ne %struct.def_optype_d* %1, null, !dbg !6123
  br i1 %tobool, label %if.then, label %if.end, !dbg !6126

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6127
  %defs1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 2, !dbg !6127
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %defs1, align 8, !dbg !6127
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %3, i32 0, i32 1, !dbg !6127
  %4 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !6127
  store %union.tree_node** %4, %union.tree_node*** %def_p, align 8, !dbg !6129
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6130
  %defs2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 2, !dbg !6131
  %6 = load %struct.def_optype_d*, %struct.def_optype_d** %defs2, align 8, !dbg !6131
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %6, i32 0, i32 0, !dbg !6132
  %7 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !6132
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6133
  %defs3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !6134
  store %struct.def_optype_d* %7, %struct.def_optype_d** %defs3, align 8, !dbg !6135
  %9 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !6136
  store %union.tree_node** %9, %union.tree_node*** %retval, align 8, !dbg !6137
  br label %return, !dbg !6137

if.end:                                           ; preds = %entry
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6138
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 0, !dbg !6139
  store i8 1, i8* %done, align 8, !dbg !6140
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !6141
  br label %return, !dbg !6141

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !6142
  ret %union.tree_node** %11, !dbg !6142
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6143 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6144, metadata !DIExpression()), !dbg !6145
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6146, metadata !DIExpression()), !dbg !6147
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6148
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !6149
  br label %while.cond, !dbg !6150

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !6151
  %tobool = icmp ne i8 %call, 0, !dbg !6151
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6152

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !6153
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !6154
  %cmp = icmp eq i32 %call2, 4, !dbg !6155
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !6156
  br i1 %1, label %while.body, label %while.end, !dbg !6150

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !6157
  br label %while.cond, !dbg !6150, !llvm.loop !6158

while.end:                                        ; preds = %land.end
  ret void, !dbg !6160
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_scalar_variables_stmt(%union.gimple_statement_d* %stmt, %struct.basic_block_def* %bb, %struct.sese_s* %region, %struct.htab* %map, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !6161 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %use_expr = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6164, metadata !DIExpression()), !dbg !6165
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6166, metadata !DIExpression()), !dbg !6167
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !6168, metadata !DIExpression()), !dbg !6169
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !6170, metadata !DIExpression()), !dbg !6171
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6172, metadata !DIExpression()), !dbg !6173
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6174, metadata !DIExpression()), !dbg !6175
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6176, metadata !DIExpression()), !dbg !6177
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6178
  %call = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 5), !dbg !6178
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6178
  br label %for.cond, !dbg !6178

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6180
  %tobool = icmp ne i8 %call1, 0, !dbg !6180
  %lnot = xor i1 %tobool, true, !dbg !6180
  br i1 %lnot, label %for.body, label %for.end, !dbg !6178

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !6182, metadata !DIExpression()), !dbg !6184
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6185
  %call2 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %1), !dbg !6185
  store %union.tree_node* %call2, %union.tree_node** %use, align 8, !dbg !6184
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6186, metadata !DIExpression()), !dbg !6187
  %2 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6188
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !6188
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6188
  %3 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !6188
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !6187
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6189, metadata !DIExpression()), !dbg !6190
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6191
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6191
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !6191
  %bf.load = load i64, i64* %5, align 8, !dbg !6191
  %bf.clear = and i64 %bf.load, 65535, !dbg !6191
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6191
  store i32 %bf.cast, i32* %code, align 4, !dbg !6190
  call void @llvm.dbg.declare(metadata %union.tree_node** %use_expr, metadata !6192, metadata !DIExpression()), !dbg !6193
  %6 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6194
  %call4 = call zeroext i8 @is_gimple_reg(%union.tree_node* %6), !dbg !6196
  %tobool5 = icmp ne i8 %call4, 0, !dbg !6196
  br i1 %tobool5, label %if.end, label %if.then, !dbg !6197

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !6198

if.end:                                           ; preds = %for.body
  %7 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6199
  %8 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6200
  %call6 = call %union.tree_node* @get_rename(%struct.htab* %7, %union.tree_node* %8), !dbg !6201
  store %union.tree_node* %call6, %union.tree_node** %use_expr, align 8, !dbg !6202
  %9 = load %union.tree_node*, %union.tree_node** %use_expr, align 8, !dbg !6203
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6205
  %cmp = icmp ne %union.tree_node* %9, %10, !dbg !6206
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !6207

if.then7:                                         ; preds = %if.end
  br label %for.inc, !dbg !6208

if.end8:                                          ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6209
  %12 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6210
  %13 = load i32, i32* %code, align 4, !dbg !6211
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6212
  %15 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6213
  %16 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6214
  %17 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6215
  %call9 = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %11, %union.tree_node* %12, i32 %13, %union.tree_node* null, %struct.basic_block_def* %14, %struct.sese_s* %15, %struct.htab* %16, %struct.gimple_stmt_iterator* %17), !dbg !6216
  store %union.tree_node* %call9, %union.tree_node** %use_expr, align 8, !dbg !6217
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6218
  %19 = load %union.tree_node*, %union.tree_node** %use_expr, align 8, !dbg !6218
  %call10 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %18, %union.tree_node* %19), !dbg !6218
  store %union.tree_node* %call10, %union.tree_node** %use_expr, align 8, !dbg !6219
  %20 = load %union.tree_node*, %union.tree_node** %use_expr, align 8, !dbg !6220
  %21 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6222
  %cmp11 = icmp eq %union.tree_node* %20, %21, !dbg !6223
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !6224

if.then12:                                        ; preds = %if.end8
  br label %for.inc, !dbg !6225

if.end13:                                         ; preds = %if.end8
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6226
  %call14 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %22), !dbg !6228
  %tobool15 = icmp ne i8 %call14, 0, !dbg !6228
  br i1 %tobool15, label %if.then16, label %if.end21, !dbg !6229

if.then16:                                        ; preds = %if.end13
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6230
  %call17 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %23), !dbg !6233
  %tobool18 = icmp ne i8 %call17, 0, !dbg !6233
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !6234

if.then19:                                        ; preds = %if.then16
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6235
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %24), !dbg !6236
  br label %if.end20, !dbg !6236

if.else:                                          ; preds = %if.then16
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 1006, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6237
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then19
  br label %for.end, !dbg !6238

if.end21:                                         ; preds = %if.end13
  %25 = load %union.tree_node*, %union.tree_node** %use_expr, align 8, !dbg !6239
  %base22 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !6239
  %26 = bitcast %struct.tree_base* %base22 to i64*, !dbg !6239
  %bf.load23 = load i64, i64* %26, align 8, !dbg !6239
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !6239
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !6239
  %cmp26 = icmp ne i32 %bf.cast25, 141, !dbg !6241
  br i1 %cmp26, label %if.then27, label %if.end31, !dbg !6242

if.then27:                                        ; preds = %if.end21
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6243, metadata !DIExpression()), !dbg !6245
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6246
  %call28 = call %union.tree_node* @create_tmp_var(%union.tree_node* %27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)), !dbg !6247
  store %union.tree_node* %call28, %union.tree_node** %var, align 8, !dbg !6245
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6248
  %29 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6248
  %30 = load %union.tree_node*, %union.tree_node** %use_expr, align 8, !dbg !6248
  %call29 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %28, %union.tree_node* %29, %union.tree_node* %30), !dbg !6248
  store %union.tree_node* %call29, %union.tree_node** %use_expr, align 8, !dbg !6249
  %31 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6250
  %32 = load %union.tree_node*, %union.tree_node** %use_expr, align 8, !dbg !6251
  %call30 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %31, %union.tree_node* %32, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !6252
  store %union.tree_node* %call30, %union.tree_node** %use_expr, align 8, !dbg !6253
  br label %if.end31, !dbg !6254

if.end31:                                         ; preds = %if.then27, %if.end21
  %33 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6255
  %34 = load %union.tree_node*, %union.tree_node** %use_expr, align 8, !dbg !6256
  call void @replace_exp(%struct.ssa_use_operand_d* %33, %union.tree_node* %34), !dbg !6257
  br label %for.inc, !dbg !6258

for.inc:                                          ; preds = %if.end31, %if.then12, %if.then7, %if.then
  %call32 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !6180
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6180
  br label %for.cond, !dbg !6180, !llvm.loop !6259

for.end:                                          ; preds = %if.end20, %for.cond
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6261
  call void @update_stmt(%union.gimple_statement_d* %35), !dbg !6262
  ret void, !dbg !6263
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %type, %union.tree_node* %op0, i32 %code, %union.tree_node* %op1, %struct.basic_block_def* %bb, %struct.sese_s* %region, %struct.htab* %map, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !6264 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %op1.addr = alloca %union.tree_node*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %op = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %old_name = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %type22 = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %op00 = alloca %union.tree_node*, align 8
  %op01 = alloca %union.tree_node*, align 8
  %op02 = alloca %union.tree_node*, align 8
  %op03 = alloca %union.tree_node*, align 8
  %base42 = alloca %union.tree_node*, align 8
  %subscript = alloca %union.tree_node*, align 8
  %op0_type = alloca %union.tree_node*, align 8
  %op0_code = alloca i32, align 4
  %op0_expr = alloca %union.tree_node*, align 8
  %op0_type84 = alloca %union.tree_node*, align 8
  %op0_code87 = alloca i32, align 4
  %op0_expr92 = alloca %union.tree_node*, align 8
  %op1_type = alloca %union.tree_node*, align 8
  %op1_code = alloca i32, align 4
  %op1_expr = alloca %union.tree_node*, align 8
  %op00111 = alloca %union.tree_node*, align 8
  %e = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6267, metadata !DIExpression()), !dbg !6268
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !6269, metadata !DIExpression()), !dbg !6270
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6271, metadata !DIExpression()), !dbg !6272
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !6273, metadata !DIExpression()), !dbg !6274
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6275, metadata !DIExpression()), !dbg !6276
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !6277, metadata !DIExpression()), !dbg !6278
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !6279, metadata !DIExpression()), !dbg !6280
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6281, metadata !DIExpression()), !dbg !6282
  %0 = load i32, i32* %code.addr, align 4, !dbg !6283
  %idxprom = sext i32 %0 to i64, !dbg !6283
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6283
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6283
  %cmp = icmp eq i32 %1, 1, !dbg !6285
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6286

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code.addr, align 4, !dbg !6287
  %idxprom1 = sext i32 %2 to i64, !dbg !6287
  %arrayidx2 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom1, !dbg !6287
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !6287
  %cmp3 = icmp eq i32 %3, 3, !dbg !6288
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6289

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6290
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !6291
  br label %return, !dbg !6291

if.end:                                           ; preds = %lor.lhs.false
  %5 = load i32, i32* %code.addr, align 4, !dbg !6292
  %idxprom4 = sext i32 %5 to i64, !dbg !6292
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom4, !dbg !6292
  %6 = load i32, i32* %arrayidx5, align 4, !dbg !6292
  %cmp6 = icmp eq i32 %6, 4, !dbg !6294
  br i1 %cmp6, label %if.then7, label %if.end59, !dbg !6295

if.then7:                                         ; preds = %if.end
  %7 = load i32, i32* %code.addr, align 4, !dbg !6296
  switch i32 %7, label %sw.default [
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 47, label %sw.bb10
    i32 45, label %sw.bb29
    i32 41, label %sw.bb58
  ], !dbg !6298

sw.bb:                                            ; preds = %if.then7, %if.then7
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6299, metadata !DIExpression()), !dbg !6302
  %8 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6303
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !6303
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6303
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6303
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !6303
  store %union.tree_node* %9, %union.tree_node** %op, align 8, !dbg !6302
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !6304, metadata !DIExpression()), !dbg !6305
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6306
  %11 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6307
  %12 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6308
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6308
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !6308
  %bf.load = load i64, i64* %13, align 8, !dbg !6308
  %bf.clear = and i64 %bf.load, 65535, !dbg !6308
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6308
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6309
  %15 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6310
  %16 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6311
  %17 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6312
  %call = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %10, %union.tree_node* %11, i32 %bf.cast, %union.tree_node* null, %struct.basic_block_def* %14, %struct.sese_s* %15, %struct.htab* %16, %struct.gimple_stmt_iterator* %17), !dbg !6313
  store %union.tree_node* %call, %union.tree_node** %res, align 8, !dbg !6305
  %18 = load i32, i32* %code.addr, align 4, !dbg !6314
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6314
  %20 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !6314
  %call9 = call %union.tree_node* @build1_stat(i32 %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !6314
  store %union.tree_node* %call9, %union.tree_node** %retval, align 8, !dbg !6315
  br label %return, !dbg !6315

sw.bb10:                                          ; preds = %if.then7
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name, metadata !6316, metadata !DIExpression()), !dbg !6318
  %21 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6319
  %exp11 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !6319
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !6319
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 0, !dbg !6319
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !6319
  store %union.tree_node* %22, %union.tree_node** %old_name, align 8, !dbg !6318
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !6320, metadata !DIExpression()), !dbg !6321
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6322
  %24 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !6323
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6324
  %26 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6325
  %27 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6326
  %28 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6327
  %call14 = call %union.tree_node* @expand_scalar_variables_ssa_name(%union.tree_node* %23, %union.tree_node* %24, %struct.basic_block_def* %25, %struct.sese_s* %26, %struct.htab* %27, %struct.gimple_stmt_iterator* %28), !dbg !6328
  store %union.tree_node* %call14, %union.tree_node** %expr, align 8, !dbg !6321
  %29 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6329
  %base15 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !6329
  %30 = bitcast %struct.tree_base* %base15 to i64*, !dbg !6329
  %bf.load16 = load i64, i64* %30, align 8, !dbg !6329
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !6329
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !6329
  %cmp19 = icmp ne i32 %bf.cast18, 141, !dbg !6331
  br i1 %cmp19, label %land.lhs.true, label %if.end27, !dbg !6332

land.lhs.true:                                    ; preds = %sw.bb10
  %31 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !6333
  %call20 = call zeroext i8 @is_gimple_reg(%union.tree_node* %31), !dbg !6334
  %conv = zext i8 %call20 to i32, !dbg !6334
  %tobool = icmp ne i32 %conv, 0, !dbg !6334
  br i1 %tobool, label %if.then21, label %if.end27, !dbg !6335

if.then21:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %type22, metadata !6336, metadata !DIExpression()), !dbg !6338
  %32 = load %union.tree_node*, %union.tree_node** %old_name, align 8, !dbg !6339
  %common = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !6339
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6339
  %33 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !6339
  store %union.tree_node* %33, %union.tree_node** %type22, align 8, !dbg !6338
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6340, metadata !DIExpression()), !dbg !6341
  %34 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !6342
  %call24 = call %union.tree_node* @create_tmp_var(%union.tree_node* %34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)), !dbg !6343
  store %union.tree_node* %call24, %union.tree_node** %var, align 8, !dbg !6341
  %35 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !6344
  %36 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6344
  %37 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6344
  %call25 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %35, %union.tree_node* %36, %union.tree_node* %37), !dbg !6344
  store %union.tree_node* %call25, %union.tree_node** %expr, align 8, !dbg !6345
  %38 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6346
  %39 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6347
  %call26 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %38, %union.tree_node* %39, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !6348
  store %union.tree_node* %call26, %union.tree_node** %expr, align 8, !dbg !6349
  br label %if.end27, !dbg !6350

if.end27:                                         ; preds = %if.then21, %land.lhs.true, %sw.bb10
  %40 = load i32, i32* %code.addr, align 4, !dbg !6351
  %41 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6351
  %42 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6351
  %call28 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %40, %union.tree_node* %41, %union.tree_node* %42), !dbg !6351
  store %union.tree_node* %call28, %union.tree_node** %retval, align 8, !dbg !6352
  br label %return, !dbg !6352

sw.bb29:                                          ; preds = %if.then7
  call void @llvm.dbg.declare(metadata %union.tree_node** %op00, metadata !6353, metadata !DIExpression()), !dbg !6355
  %43 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6356
  %exp30 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !6356
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !6356
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 0, !dbg !6356
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !6356
  store %union.tree_node* %44, %union.tree_node** %op00, align 8, !dbg !6355
  call void @llvm.dbg.declare(metadata %union.tree_node** %op01, metadata !6357, metadata !DIExpression()), !dbg !6358
  %45 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6359
  %exp33 = bitcast %union.tree_node* %45 to %struct.tree_exp*, !dbg !6359
  %operands34 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp33, i32 0, i32 3, !dbg !6359
  %arrayidx35 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands34, i64 0, i64 1, !dbg !6359
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx35, align 8, !dbg !6359
  store %union.tree_node* %46, %union.tree_node** %op01, align 8, !dbg !6358
  call void @llvm.dbg.declare(metadata %union.tree_node** %op02, metadata !6360, metadata !DIExpression()), !dbg !6361
  %47 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6362
  %exp36 = bitcast %union.tree_node* %47 to %struct.tree_exp*, !dbg !6362
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !6362
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 2, !dbg !6362
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !6362
  store %union.tree_node* %48, %union.tree_node** %op02, align 8, !dbg !6361
  call void @llvm.dbg.declare(metadata %union.tree_node** %op03, metadata !6363, metadata !DIExpression()), !dbg !6364
  %49 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6365
  %exp39 = bitcast %union.tree_node* %49 to %struct.tree_exp*, !dbg !6365
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !6365
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 3, !dbg !6365
  %50 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !6365
  store %union.tree_node* %50, %union.tree_node** %op03, align 8, !dbg !6364
  call void @llvm.dbg.declare(metadata %union.tree_node** %base42, metadata !6366, metadata !DIExpression()), !dbg !6367
  %51 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !6368
  %common43 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !6368
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !6368
  %52 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !6368
  %53 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !6369
  %54 = load %union.tree_node*, %union.tree_node** %op00, align 8, !dbg !6370
  %base45 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !6370
  %55 = bitcast %struct.tree_base* %base45 to i64*, !dbg !6370
  %bf.load46 = load i64, i64* %55, align 8, !dbg !6370
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !6370
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !6370
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6371
  %57 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6372
  %58 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6373
  %59 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6374
  %call49 = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %52, %union.tree_node* %53, i32 %bf.cast48, %union.tree_node* null, %struct.basic_block_def* %56, %struct.sese_s* %57, %struct.htab* %58, %struct.gimple_stmt_iterator* %59), !dbg !6375
  store %union.tree_node* %call49, %union.tree_node** %base42, align 8, !dbg !6367
  call void @llvm.dbg.declare(metadata %union.tree_node** %subscript, metadata !6376, metadata !DIExpression()), !dbg !6377
  %60 = load %union.tree_node*, %union.tree_node** %op01, align 8, !dbg !6378
  %common50 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !6378
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !6378
  %61 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !6378
  %62 = load %union.tree_node*, %union.tree_node** %op01, align 8, !dbg !6379
  %63 = load %union.tree_node*, %union.tree_node** %op01, align 8, !dbg !6380
  %base52 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !6380
  %64 = bitcast %struct.tree_base* %base52 to i64*, !dbg !6380
  %bf.load53 = load i64, i64* %64, align 8, !dbg !6380
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !6380
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !6380
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6381
  %66 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6382
  %67 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6383
  %68 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6384
  %call56 = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %61, %union.tree_node* %62, i32 %bf.cast55, %union.tree_node* null, %struct.basic_block_def* %65, %struct.sese_s* %66, %struct.htab* %67, %struct.gimple_stmt_iterator* %68), !dbg !6385
  store %union.tree_node* %call56, %union.tree_node** %subscript, align 8, !dbg !6377
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6386
  %70 = load %union.tree_node*, %union.tree_node** %base42, align 8, !dbg !6386
  %71 = load %union.tree_node*, %union.tree_node** %subscript, align 8, !dbg !6386
  %72 = load %union.tree_node*, %union.tree_node** %op02, align 8, !dbg !6386
  %73 = load %union.tree_node*, %union.tree_node** %op03, align 8, !dbg !6386
  %call57 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %69, %union.tree_node* %70, %union.tree_node* %71, %union.tree_node* %72, %union.tree_node* %73), !dbg !6386
  store %union.tree_node* %call57, %union.tree_node** %retval, align 8, !dbg !6387
  br label %return, !dbg !6387

sw.bb58:                                          ; preds = %if.then7
  %74 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6388
  store %union.tree_node* %74, %union.tree_node** %retval, align 8, !dbg !6389
  br label %return, !dbg !6389

sw.default:                                       ; preds = %if.then7
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 912, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6390
  br label %sw.epilog, !dbg !6391

sw.epilog:                                        ; preds = %sw.default
  br label %if.end59, !dbg !6392

if.end59:                                         ; preds = %sw.epilog, %if.end
  %75 = load i32, i32* %code.addr, align 4, !dbg !6393
  %idxprom60 = sext i32 %75 to i64, !dbg !6393
  %arrayidx61 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom60, !dbg !6393
  %76 = load i32, i32* %arrayidx61, align 4, !dbg !6393
  %cmp62 = icmp eq i32 %76, 6, !dbg !6395
  br i1 %cmp62, label %if.then64, label %if.end73, !dbg !6396

if.then64:                                        ; preds = %if.end59
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0_type, metadata !6397, metadata !DIExpression()), !dbg !6399
  %77 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6400
  %common65 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !6400
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !6400
  %78 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !6400
  store %union.tree_node* %78, %union.tree_node** %op0_type, align 8, !dbg !6399
  call void @llvm.dbg.declare(metadata i32* %op0_code, metadata !6401, metadata !DIExpression()), !dbg !6402
  %79 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6403
  %base67 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !6403
  %80 = bitcast %struct.tree_base* %base67 to i64*, !dbg !6403
  %bf.load68 = load i64, i64* %80, align 8, !dbg !6403
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !6403
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !6403
  store i32 %bf.cast70, i32* %op0_code, align 4, !dbg !6402
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0_expr, metadata !6404, metadata !DIExpression()), !dbg !6405
  %81 = load %union.tree_node*, %union.tree_node** %op0_type, align 8, !dbg !6406
  %82 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6407
  %83 = load i32, i32* %op0_code, align 4, !dbg !6408
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6409
  %85 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6410
  %86 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6411
  %87 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6412
  %call71 = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %81, %union.tree_node* %82, i32 %83, %union.tree_node* null, %struct.basic_block_def* %84, %struct.sese_s* %85, %struct.htab* %86, %struct.gimple_stmt_iterator* %87), !dbg !6413
  store %union.tree_node* %call71, %union.tree_node** %op0_expr, align 8, !dbg !6405
  %88 = load i32, i32* %code.addr, align 4, !dbg !6414
  %89 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6414
  %90 = load %union.tree_node*, %union.tree_node** %op0_expr, align 8, !dbg !6414
  %call72 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %88, %union.tree_node* %89, %union.tree_node* %90), !dbg !6414
  store %union.tree_node* %call72, %union.tree_node** %retval, align 8, !dbg !6415
  br label %return, !dbg !6415

if.end73:                                         ; preds = %if.end59
  %91 = load i32, i32* %code.addr, align 4, !dbg !6416
  %idxprom74 = sext i32 %91 to i64, !dbg !6416
  %arrayidx75 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom74, !dbg !6416
  %92 = load i32, i32* %arrayidx75, align 4, !dbg !6416
  %cmp76 = icmp eq i32 %92, 7, !dbg !6418
  br i1 %cmp76, label %if.then83, label %lor.lhs.false78, !dbg !6419

lor.lhs.false78:                                  ; preds = %if.end73
  %93 = load i32, i32* %code.addr, align 4, !dbg !6420
  %idxprom79 = sext i32 %93 to i64, !dbg !6420
  %arrayidx80 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom79, !dbg !6420
  %94 = load i32, i32* %arrayidx80, align 4, !dbg !6420
  %cmp81 = icmp eq i32 %94, 5, !dbg !6421
  br i1 %cmp81, label %if.then83, label %if.end102, !dbg !6422

if.then83:                                        ; preds = %lor.lhs.false78, %if.end73
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0_type84, metadata !6423, metadata !DIExpression()), !dbg !6425
  %95 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6426
  %common85 = bitcast %union.tree_node* %95 to %struct.tree_common*, !dbg !6426
  %type86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2, !dbg !6426
  %96 = load %union.tree_node*, %union.tree_node** %type86, align 8, !dbg !6426
  store %union.tree_node* %96, %union.tree_node** %op0_type84, align 8, !dbg !6425
  call void @llvm.dbg.declare(metadata i32* %op0_code87, metadata !6427, metadata !DIExpression()), !dbg !6428
  %97 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6429
  %base88 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !6429
  %98 = bitcast %struct.tree_base* %base88 to i64*, !dbg !6429
  %bf.load89 = load i64, i64* %98, align 8, !dbg !6429
  %bf.clear90 = and i64 %bf.load89, 65535, !dbg !6429
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !6429
  store i32 %bf.cast91, i32* %op0_code87, align 4, !dbg !6428
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0_expr92, metadata !6430, metadata !DIExpression()), !dbg !6431
  %99 = load %union.tree_node*, %union.tree_node** %op0_type84, align 8, !dbg !6432
  %100 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6433
  %101 = load i32, i32* %op0_code87, align 4, !dbg !6434
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6435
  %103 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6436
  %104 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6437
  %105 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6438
  %call93 = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %99, %union.tree_node* %100, i32 %101, %union.tree_node* null, %struct.basic_block_def* %102, %struct.sese_s* %103, %struct.htab* %104, %struct.gimple_stmt_iterator* %105), !dbg !6439
  store %union.tree_node* %call93, %union.tree_node** %op0_expr92, align 8, !dbg !6431
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1_type, metadata !6440, metadata !DIExpression()), !dbg !6441
  %106 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !6442
  %common94 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !6442
  %type95 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common94, i32 0, i32 2, !dbg !6442
  %107 = load %union.tree_node*, %union.tree_node** %type95, align 8, !dbg !6442
  store %union.tree_node* %107, %union.tree_node** %op1_type, align 8, !dbg !6441
  call void @llvm.dbg.declare(metadata i32* %op1_code, metadata !6443, metadata !DIExpression()), !dbg !6444
  %108 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !6445
  %base96 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !6445
  %109 = bitcast %struct.tree_base* %base96 to i64*, !dbg !6445
  %bf.load97 = load i64, i64* %109, align 8, !dbg !6445
  %bf.clear98 = and i64 %bf.load97, 65535, !dbg !6445
  %bf.cast99 = trunc i64 %bf.clear98 to i32, !dbg !6445
  store i32 %bf.cast99, i32* %op1_code, align 4, !dbg !6444
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1_expr, metadata !6446, metadata !DIExpression()), !dbg !6447
  %110 = load %union.tree_node*, %union.tree_node** %op1_type, align 8, !dbg !6448
  %111 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !6449
  %112 = load i32, i32* %op1_code, align 4, !dbg !6450
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6451
  %114 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6452
  %115 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6453
  %116 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6454
  %call100 = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %110, %union.tree_node* %111, i32 %112, %union.tree_node* null, %struct.basic_block_def* %113, %struct.sese_s* %114, %struct.htab* %115, %struct.gimple_stmt_iterator* %116), !dbg !6455
  store %union.tree_node* %call100, %union.tree_node** %op1_expr, align 8, !dbg !6447
  %117 = load i32, i32* %code.addr, align 4, !dbg !6456
  %118 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6456
  %119 = load %union.tree_node*, %union.tree_node** %op0_expr92, align 8, !dbg !6456
  %120 = load %union.tree_node*, %union.tree_node** %op1_expr, align 8, !dbg !6456
  %call101 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %117, %union.tree_node* %118, %union.tree_node* %119, %union.tree_node* %120), !dbg !6456
  store %union.tree_node* %call101, %union.tree_node** %retval, align 8, !dbg !6457
  br label %return, !dbg !6457

if.end102:                                        ; preds = %lor.lhs.false78
  %121 = load i32, i32* %code.addr, align 4, !dbg !6458
  %cmp103 = icmp eq i32 %121, 141, !dbg !6460
  br i1 %cmp103, label %if.then105, label %if.end107, !dbg !6461

if.then105:                                       ; preds = %if.end102
  %122 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6462
  %123 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6463
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6464
  %125 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6465
  %126 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6466
  %127 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6467
  %call106 = call %union.tree_node* @expand_scalar_variables_ssa_name(%union.tree_node* %122, %union.tree_node* %123, %struct.basic_block_def* %124, %struct.sese_s* %125, %struct.htab* %126, %struct.gimple_stmt_iterator* %127), !dbg !6468
  store %union.tree_node* %call106, %union.tree_node** %retval, align 8, !dbg !6469
  br label %return, !dbg !6469

if.end107:                                        ; preds = %if.end102
  %128 = load i32, i32* %code.addr, align 4, !dbg !6470
  %cmp108 = icmp eq i32 %128, 121, !dbg !6472
  br i1 %cmp108, label %if.then110, label %if.end137, !dbg !6473

if.then110:                                       ; preds = %if.end107
  call void @llvm.dbg.declare(metadata %union.tree_node** %op00111, metadata !6474, metadata !DIExpression()), !dbg !6476
  %129 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6477
  %exp112 = bitcast %union.tree_node* %129 to %struct.tree_exp*, !dbg !6477
  %operands113 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp112, i32 0, i32 3, !dbg !6477
  %arrayidx114 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands113, i64 0, i64 0, !dbg !6477
  %130 = load %union.tree_node*, %union.tree_node** %arrayidx114, align 8, !dbg !6477
  store %union.tree_node* %130, %union.tree_node** %op00111, align 8, !dbg !6476
  %131 = load %union.tree_node*, %union.tree_node** %op00111, align 8, !dbg !6478
  %call115 = call zeroext i8 @handled_component_p(%union.tree_node* %131), !dbg !6480
  %conv116 = zext i8 %call115 to i32, !dbg !6480
  %tobool117 = icmp ne i32 %conv116, 0, !dbg !6480
  br i1 %tobool117, label %land.lhs.true118, label %if.end136, !dbg !6481

land.lhs.true118:                                 ; preds = %if.then110
  %132 = load %union.tree_node*, %union.tree_node** %op00111, align 8, !dbg !6482
  %base119 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !6482
  %133 = bitcast %struct.tree_base* %base119 to i64*, !dbg !6482
  %bf.load120 = load i64, i64* %133, align 8, !dbg !6482
  %bf.clear121 = and i64 %bf.load120, 65535, !dbg !6482
  %bf.cast122 = trunc i64 %bf.clear121 to i32, !dbg !6482
  %cmp123 = icmp eq i32 %bf.cast122, 45, !dbg !6483
  br i1 %cmp123, label %if.then125, label %if.end136, !dbg !6484

if.then125:                                       ; preds = %land.lhs.true118
  call void @llvm.dbg.declare(metadata %union.tree_node** %e, metadata !6485, metadata !DIExpression()), !dbg !6487
  %134 = load %union.tree_node*, %union.tree_node** %op00111, align 8, !dbg !6488
  %common126 = bitcast %union.tree_node* %134 to %struct.tree_common*, !dbg !6488
  %type127 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common126, i32 0, i32 2, !dbg !6488
  %135 = load %union.tree_node*, %union.tree_node** %type127, align 8, !dbg !6488
  %136 = load %union.tree_node*, %union.tree_node** %op00111, align 8, !dbg !6489
  %137 = load %union.tree_node*, %union.tree_node** %op00111, align 8, !dbg !6490
  %base128 = bitcast %union.tree_node* %137 to %struct.tree_base*, !dbg !6490
  %138 = bitcast %struct.tree_base* %base128 to i64*, !dbg !6490
  %bf.load129 = load i64, i64* %138, align 8, !dbg !6490
  %bf.clear130 = and i64 %bf.load129, 65535, !dbg !6490
  %bf.cast131 = trunc i64 %bf.clear130 to i32, !dbg !6490
  %139 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6491
  %140 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6492
  %141 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6493
  %142 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6494
  %call132 = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %135, %union.tree_node* %136, i32 %bf.cast131, %union.tree_node* null, %struct.basic_block_def* %139, %struct.sese_s* %140, %struct.htab* %141, %struct.gimple_stmt_iterator* %142), !dbg !6495
  store %union.tree_node* %call132, %union.tree_node** %e, align 8, !dbg !6487
  %143 = load i32, i32* %code.addr, align 4, !dbg !6496
  %144 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6496
  %common133 = bitcast %union.tree_node* %144 to %struct.tree_common*, !dbg !6496
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common133, i32 0, i32 2, !dbg !6496
  %145 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !6496
  %146 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !6496
  %call135 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %143, %union.tree_node* %145, %union.tree_node* %146), !dbg !6496
  store %union.tree_node* %call135, %union.tree_node** %retval, align 8, !dbg !6497
  br label %return, !dbg !6497

if.end136:                                        ; preds = %land.lhs.true118, %if.then110
  %147 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6498
  store %union.tree_node* %147, %union.tree_node** %retval, align 8, !dbg !6499
  br label %return, !dbg !6499

if.end137:                                        ; preds = %if.end107
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 960, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6500
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6501
  br label %return, !dbg !6501

return:                                           ; preds = %if.end137, %if.end136, %if.then125, %if.then105, %if.then83, %if.then64, %sw.bb58, %sw.bb29, %if.end27, %sw.bb, %if.then
  %148 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6502
  ret %union.tree_node* %148, !dbg !6502
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %s) #0 !dbg !6503 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !6504, metadata !DIExpression()), !dbg !6505
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6506
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %0), !dbg !6508
  %tobool = icmp ne i8 %call, 0, !dbg !6508
  br i1 %tobool, label %if.then, label %if.end, !dbg !6509

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6510
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6511
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6512
  %bf.load = load i32, i32* %2, align 8, !dbg !6512
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6512
  %cmp = icmp eq i32 %bf.lshr, 0, !dbg !6513
  %conv = zext i1 %cmp to i32, !dbg !6513
  %conv1 = trunc i32 %conv to i8, !dbg !6510
  store i8 %conv1, i8* %retval, align 1, !dbg !6514
  br label %return, !dbg !6514

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6515
  br label %return, !dbg !6515

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !6516
  ret i8 %3, !dbg !6516
}

declare dso_local void @replace_exp(%struct.ssa_use_operand_d*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @expand_scalar_variables_ssa_name(%union.tree_node* %type, %union.tree_node* %op0, %struct.basic_block_def* %bb, %struct.sese_s* %region, %struct.htab* %map, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !6517 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %new_op = alloca %union.tree_node*, align 8
  %var0 = alloca %union.tree_node*, align 8
  %subcode = alloca i32, align 4
  %var1 = alloca %union.tree_node*, align 8
  %type35 = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6520, metadata !DIExpression()), !dbg !6521
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !6522, metadata !DIExpression()), !dbg !6523
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6524, metadata !DIExpression()), !dbg !6525
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !6526, metadata !DIExpression()), !dbg !6527
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !6528, metadata !DIExpression()), !dbg !6529
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6530, metadata !DIExpression()), !dbg !6531
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6532, metadata !DIExpression()), !dbg !6533
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_op, metadata !6534, metadata !DIExpression()), !dbg !6535
  %0 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6536
  %1 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6538
  %call = call zeroext i8 @is_parameter(%struct.sese_s* %0, %union.tree_node* %1), !dbg !6539
  %conv = zext i8 %call to i32, !dbg !6539
  %tobool = icmp ne i32 %conv, 0, !dbg !6539
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !6540

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6541
  %call1 = call zeroext i8 @is_iv(%union.tree_node* %2), !dbg !6542
  %conv2 = zext i8 %call1 to i32, !dbg !6542
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !6542
  br i1 %tobool3, label %if.then, label %if.end, !dbg !6543

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6544
  %4 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6544
  %5 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6544
  %call4 = call %union.tree_node* @get_rename(%struct.htab* %4, %union.tree_node* %5), !dbg !6544
  %call5 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %3, %union.tree_node* %call4), !dbg !6544
  store %union.tree_node* %call5, %union.tree_node** %retval, align 8, !dbg !6545
  br label %return, !dbg !6545

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6546
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6546
  %def_stmt6 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6546
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt6, align 8, !dbg !6546
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6547
  %8 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6548
  %9 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6549
  %call7 = call %union.tree_node* @get_rename(%struct.htab* %8, %union.tree_node* %9), !dbg !6550
  store %union.tree_node* %call7, %union.tree_node** %new_op, align 8, !dbg !6551
  %10 = load %union.tree_node*, %union.tree_node** %new_op, align 8, !dbg !6552
  %11 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !6554
  %cmp = icmp ne %union.tree_node* %10, %11, !dbg !6555
  br i1 %cmp, label %land.lhs.true, label %if.end16, !dbg !6556

land.lhs.true:                                    ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %new_op, align 8, !dbg !6557
  %ssa_name9 = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !6557
  %def_stmt10 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name9, i32 0, i32 2, !dbg !6557
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt10, align 8, !dbg !6557
  %call11 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %13), !dbg !6558
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6559
  %cmp12 = icmp eq %struct.basic_block_def* %call11, %14, !dbg !6560
  br i1 %cmp12, label %if.then14, label %if.end16, !dbg !6561

if.then14:                                        ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6562
  %16 = load %union.tree_node*, %union.tree_node** %new_op, align 8, !dbg !6562
  %call15 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %15, %union.tree_node* %16), !dbg !6562
  store %union.tree_node* %call15, %union.tree_node** %retval, align 8, !dbg !6563
  br label %return, !dbg !6563

if.end16:                                         ; preds = %land.lhs.true, %if.end
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6564
  %call17 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %17), !dbg !6566
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6567
  %cmp18 = icmp eq %struct.basic_block_def* %call17, %18, !dbg !6568
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !6569

if.then20:                                        ; preds = %if.end16
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6570
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6572
  %21 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6573
  %22 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6574
  %23 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6575
  call void @expand_scalar_variables_stmt(%union.gimple_statement_d* %19, %struct.basic_block_def* %20, %struct.sese_s* %21, %struct.htab* %22, %struct.gimple_stmt_iterator* %23), !dbg !6576
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6577
  %25 = load %union.tree_node*, %union.tree_node** %new_op, align 8, !dbg !6577
  %call21 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %24, %union.tree_node* %25), !dbg !6577
  store %union.tree_node* %call21, %union.tree_node** %retval, align 8, !dbg !6578
  br label %return, !dbg !6578

if.else:                                          ; preds = %if.end16
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6579
  %call22 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %26), !dbg !6582
  %tobool23 = icmp ne %struct.basic_block_def* %call22, null, !dbg !6582
  br i1 %tobool23, label %lor.lhs.false24, label %if.then28, !dbg !6583

lor.lhs.false24:                                  ; preds = %if.else
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6584
  %call25 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %27), !dbg !6585
  %28 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6586
  %call26 = call zeroext i8 @bb_in_sese_p(%struct.basic_block_def* %call25, %struct.sese_s* %28), !dbg !6587
  %tobool27 = icmp ne i8 %call26, 0, !dbg !6587
  br i1 %tobool27, label %if.end30, label %if.then28, !dbg !6588

if.then28:                                        ; preds = %lor.lhs.false24, %if.else
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6589
  %30 = load %union.tree_node*, %union.tree_node** %new_op, align 8, !dbg !6589
  %call29 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %29, %union.tree_node* %30), !dbg !6589
  store %union.tree_node* %call29, %union.tree_node** %retval, align 8, !dbg !6590
  br label %return, !dbg !6590

if.end30:                                         ; preds = %lor.lhs.false24
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6591
  %call31 = call i32 @gimple_code(%union.gimple_statement_d* %31), !dbg !6592
  switch i32 %call31, label %sw.default [
    i32 6, label %sw.bb
    i32 8, label %sw.bb38
  ], !dbg !6593

sw.bb:                                            ; preds = %if.end30
  call void @llvm.dbg.declare(metadata %union.tree_node** %var0, metadata !6594, metadata !DIExpression()), !dbg !6597
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6598
  %call32 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %32), !dbg !6599
  store %union.tree_node* %call32, %union.tree_node** %var0, align 8, !dbg !6597
  call void @llvm.dbg.declare(metadata i32* %subcode, metadata !6600, metadata !DIExpression()), !dbg !6601
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6602
  %call33 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %33), !dbg !6603
  store i32 %call33, i32* %subcode, align 4, !dbg !6601
  call void @llvm.dbg.declare(metadata %union.tree_node** %var1, metadata !6604, metadata !DIExpression()), !dbg !6605
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6606
  %call34 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %34), !dbg !6607
  store %union.tree_node* %call34, %union.tree_node** %var1, align 8, !dbg !6605
  call void @llvm.dbg.declare(metadata %union.tree_node** %type35, metadata !6608, metadata !DIExpression()), !dbg !6609
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6610
  %call36 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %35), !dbg !6611
  store %union.tree_node* %call36, %union.tree_node** %type35, align 8, !dbg !6609
  %36 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !6612
  %37 = load %union.tree_node*, %union.tree_node** %var0, align 8, !dbg !6613
  %38 = load i32, i32* %subcode, align 4, !dbg !6614
  %39 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !6615
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6616
  %41 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6617
  %42 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6618
  %43 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6619
  %call37 = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %36, %union.tree_node* %37, i32 %38, %union.tree_node* %39, %struct.basic_block_def* %40, %struct.sese_s* %41, %struct.htab* %42, %struct.gimple_stmt_iterator* %43), !dbg !6620
  store %union.tree_node* %call37, %union.tree_node** %retval, align 8, !dbg !6621
  br label %return, !dbg !6621

sw.bb38:                                          ; preds = %if.end30
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6622
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6623
  %46 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6624
  %47 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6625
  %48 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6626
  %call39 = call %union.tree_node* @expand_scalar_variables_call(%union.gimple_statement_d* %44, %struct.basic_block_def* %45, %struct.sese_s* %46, %struct.htab* %47, %struct.gimple_stmt_iterator* %48), !dbg !6627
  store %union.tree_node* %call39, %union.tree_node** %retval, align 8, !dbg !6628
  br label %return, !dbg !6628

sw.default:                                       ; preds = %if.end30
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 833, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6629
  %49 = load %union.tree_node*, %union.tree_node** %new_op, align 8, !dbg !6630
  store %union.tree_node* %49, %union.tree_node** %retval, align 8, !dbg !6631
  br label %return, !dbg !6631

return:                                           ; preds = %sw.default, %sw.bb38, %sw.bb, %if.then28, %if.then20, %if.then14, %if.then
  %50 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6632
  ret %union.tree_node* %50, !dbg !6632
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build4_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !6633 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6639, metadata !DIExpression()), !dbg !6640
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6641
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6641
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6641
  %bf.load = load i64, i64* %1, align 8, !dbg !6641
  %bf.clear = and i64 %bf.load, 65535, !dbg !6641
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6641
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !6642

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !6643
  br label %return, !dbg !6643

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6645
  br label %return, !dbg !6645

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !6646
  ret i8 %2, !dbg !6646
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_parameter(%struct.sese_s* %region, %union.tree_node* %name) #0 !dbg !6647 {
entry:
  %retval = alloca i8, align 1
  %region.addr = alloca %struct.sese_s*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %p = alloca %union.tree_node*, align 8
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !6650, metadata !DIExpression()), !dbg !6651
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6652, metadata !DIExpression()), !dbg !6653
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6654, metadata !DIExpression()), !dbg !6655
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !6656, metadata !DIExpression()), !dbg !6657
  store i32 0, i32* %i, align 4, !dbg !6658
  br label %for.cond, !dbg !6660

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6661
  %params = getelementptr inbounds %struct.sese_s, %struct.sese_s* %0, i32 0, i32 2, !dbg !6661
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !6661
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !6661
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6661

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6661
  %params1 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %2, i32 0, i32 2, !dbg !6661
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params1, align 8, !dbg !6661
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !6661
  br label %cond.end, !dbg !6661

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6661

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6661
  %4 = load i32, i32* %i, align 4, !dbg !6661
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %4, %union.tree_node** %p), !dbg !6661
  %tobool2 = icmp ne i32 %call, 0, !dbg !6663
  br i1 %tobool2, label %for.body, label %for.end, !dbg !6663

for.body:                                         ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !6664
  %6 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6666
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !6667
  br i1 %cmp, label %if.then, label %if.end, !dbg !6668

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !6669
  br label %return, !dbg !6669

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6666

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !6670
  %inc = add nsw i32 %7, 1, !dbg !6670
  store i32 %inc, i32* %i, align 4, !dbg !6670
  br label %for.cond, !dbg !6671, !llvm.loop !6672

for.end:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !6674
  br label %return, !dbg !6674

return:                                           ; preds = %for.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !6675
  ret i8 %8, !dbg !6675
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_iv(%union.tree_node* %name) #0 !dbg !6676 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6679, metadata !DIExpression()), !dbg !6680
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6681
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6681
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6681
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6681
  %call = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6682
  %cmp = icmp eq i32 %call, 16, !dbg !6683
  %conv = zext i1 %cmp to i32, !dbg !6683
  %conv1 = trunc i32 %conv to i8, !dbg !6682
  ret i8 %conv1, !dbg !6684
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !6685 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6686, metadata !DIExpression()), !dbg !6687
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6688
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6689
  ret %union.tree_node* %call, !dbg !6690
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6691 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6694, metadata !DIExpression()), !dbg !6695
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6696, metadata !DIExpression()), !dbg !6697
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6698
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6699
  store i32 %call, i32* %code, align 4, !dbg !6700
  %1 = load i32, i32* %code, align 4, !dbg !6701
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6703
  %cmp = icmp eq i32 %call1, 3, !dbg !6704
  br i1 %cmp, label %if.then, label %if.end, !dbg !6705

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6706
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6706
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6706
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6706
  %bf.load = load i64, i64* %3, align 8, !dbg !6706
  %bf.clear = and i64 %bf.load, 65535, !dbg !6706
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6706
  store i32 %bf.cast, i32* %code, align 4, !dbg !6707
  br label %if.end, !dbg !6708

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6709
  ret i32 %4, !dbg !6710
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !6711 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6712, metadata !DIExpression()), !dbg !6713
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6714
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6716
  %cmp = icmp uge i32 %call, 3, !dbg !6717
  br i1 %cmp, label %if.then, label %if.else, !dbg !6718

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6719
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !6720
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !6721
  br label %return, !dbg !6721

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6722
  br label %return, !dbg !6722

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6723
  ret %union.tree_node* %2, !dbg !6723
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !6724 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6725, metadata !DIExpression()), !dbg !6726
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6727, metadata !DIExpression()), !dbg !6728
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6729
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6730
  store i32 %call, i32* %code, align 4, !dbg !6728
  %1 = load i32, i32* %code, align 4, !dbg !6731
  %cmp = icmp eq i32 %1, 6, !dbg !6733
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6734

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6735
  %cmp1 = icmp eq i32 %2, 8, !dbg !6736
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !6737

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6738, metadata !DIExpression()), !dbg !6740
  %3 = load i32, i32* %code, align 4, !dbg !6741
  %cmp2 = icmp eq i32 %3, 8, !dbg !6743
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !6744

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6745
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !6746
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !6747
  br label %if.end, !dbg !6748

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6749
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !6750
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !6751

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6752
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !6752
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !6752
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6752
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !6752
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !6754
  br label %sw.epilog, !dbg !6755

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6756
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !6756
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !6756
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !6756
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !6756
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !6757
  br label %sw.epilog, !dbg !6758

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6759
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !6760
  br label %return, !dbg !6760

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !6761
  %cmp12 = icmp eq i32 %11, 1, !dbg !6763
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !6764

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6765
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !6766
  br label %return, !dbg !6766

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6767
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !6768
  br label %return, !dbg !6768

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6769
  ret %union.tree_node* %14, !dbg !6769
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @expand_scalar_variables_call(%union.gimple_statement_d* %stmt, %struct.basic_block_def* %bb, %struct.sese_s* %region, %struct.htab* %map, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !6770 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %region.addr = alloca %struct.sese_s*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %i = alloca i32, align 4
  %nargs = alloca i32, align 4
  %args = alloca %struct.VEC_tree_gc*, align 8
  %fn_type = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %call_expr = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %call4 = alloca %union.gimple_statement_d*, align 8
  %arg = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6773, metadata !DIExpression()), !dbg !6774
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6775, metadata !DIExpression()), !dbg !6776
  store %struct.sese_s* %region, %struct.sese_s** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sese_s** %region.addr, metadata !6777, metadata !DIExpression()), !dbg !6778
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !6779, metadata !DIExpression()), !dbg !6780
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6781, metadata !DIExpression()), !dbg !6782
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6783, metadata !DIExpression()), !dbg !6784
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !6785, metadata !DIExpression()), !dbg !6786
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6787
  %call = call i32 @gimple_call_num_args(%union.gimple_statement_d* %0), !dbg !6788
  store i32 %call, i32* %nargs, align 4, !dbg !6786
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %args, metadata !6789, metadata !DIExpression()), !dbg !6790
  %1 = load i32, i32* %nargs, align 4, !dbg !6791
  %call1 = call %struct.VEC_tree_gc* @VEC_tree_gc_alloc(i32 %1), !dbg !6791
  store %struct.VEC_tree_gc* %call1, %struct.VEC_tree_gc** %args, align 8, !dbg !6790
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_type, metadata !6792, metadata !DIExpression()), !dbg !6793
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6794
  %call2 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %2), !dbg !6794
  %common = bitcast %union.tree_node* %call2 to %struct.tree_common*, !dbg !6794
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6794
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6794
  store %union.tree_node* %3, %union.tree_node** %fn_type, align 8, !dbg !6793
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6795, metadata !DIExpression()), !dbg !6796
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6797
  %call3 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %4), !dbg !6798
  store %union.tree_node* %call3, %union.tree_node** %fn, align 8, !dbg !6796
  call void @llvm.dbg.declare(metadata %union.tree_node** %call_expr, metadata !6799, metadata !DIExpression()), !dbg !6800
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6801, metadata !DIExpression()), !dbg !6802
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6803, metadata !DIExpression()), !dbg !6804
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call4, metadata !6805, metadata !DIExpression()), !dbg !6806
  store i32 0, i32* %i, align 4, !dbg !6807
  br label %for.cond, !dbg !6809

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !dbg !6810
  %6 = load i32, i32* %nargs, align 4, !dbg !6812
  %cmp = icmp slt i32 %5, %6, !dbg !6813
  br i1 %cmp, label %for.body, label %for.end, !dbg !6814

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6815, metadata !DIExpression()), !dbg !6817
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6818
  %8 = load i32, i32* %i, align 4, !dbg !6819
  %call5 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %7, i32 %8), !dbg !6820
  store %union.tree_node* %call5, %union.tree_node** %arg, align 8, !dbg !6817
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6821, metadata !DIExpression()), !dbg !6822
  %9 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6823
  %common6 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !6823
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !6823
  %10 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !6823
  store %union.tree_node* %10, %union.tree_node** %t, align 8, !dbg !6822
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6824
  %call8 = call %union.tree_node* @create_tmp_var(%union.tree_node* %11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)), !dbg !6825
  store %union.tree_node* %call8, %union.tree_node** %var, align 8, !dbg !6826
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6827
  %13 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6828
  %14 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6829
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !6829
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !6829
  %bf.load = load i64, i64* %15, align 8, !dbg !6829
  %bf.clear = and i64 %bf.load, 65535, !dbg !6829
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6829
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6830
  %17 = load %struct.sese_s*, %struct.sese_s** %region.addr, align 8, !dbg !6831
  %18 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !6832
  %19 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6833
  %call9 = call %union.tree_node* @expand_scalar_variables_expr(%union.tree_node* %12, %union.tree_node* %13, i32 %bf.cast, %union.tree_node* null, %struct.basic_block_def* %16, %struct.sese_s* %17, %struct.htab* %18, %struct.gimple_stmt_iterator* %19), !dbg !6834
  store %union.tree_node* %call9, %union.tree_node** %arg, align 8, !dbg !6835
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6836
  %21 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6836
  %22 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6836
  %call10 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %20, %union.tree_node* %21, %union.tree_node* %22), !dbg !6836
  store %union.tree_node* %call10, %union.tree_node** %arg, align 8, !dbg !6837
  %23 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6838
  %24 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6839
  %call11 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %23, %union.tree_node* %24, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !6840
  store %union.tree_node* %call11, %union.tree_node** %arg, align 8, !dbg !6841
  %25 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %args, align 8, !dbg !6842
  %tobool = icmp ne %struct.VEC_tree_gc* %25, null, !dbg !6842
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6842

cond.true:                                        ; preds = %for.body
  %26 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %args, align 8, !dbg !6842
  %base12 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %26, i32 0, i32 0, !dbg !6842
  br label %cond.end, !dbg !6842

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !6842

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base12, %cond.true ], [ null, %cond.false ], !dbg !6842
  %27 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6842
  %call13 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %27), !dbg !6842
  br label %for.inc, !dbg !6843

for.inc:                                          ; preds = %cond.end
  %28 = load i32, i32* %i, align 4, !dbg !6844
  %inc = add nsw i32 %28, 1, !dbg !6844
  store i32 %inc, i32* %i, align 4, !dbg !6844
  br label %for.cond, !dbg !6845, !llvm.loop !6846

for.end:                                          ; preds = %for.cond
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6848
  %call14 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %29), !dbg !6849
  store %union.tree_node* %call14, %union.tree_node** %lhs, align 8, !dbg !6850
  %30 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6851
  %common15 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !6851
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !6851
  %31 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !6851
  %call17 = call %union.tree_node* @create_tmp_var(%union.tree_node* %31, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)), !dbg !6852
  store %union.tree_node* %call17, %union.tree_node** %var, align 8, !dbg !6853
  %32 = load %union.tree_node*, %union.tree_node** %fn_type, align 8, !dbg !6854
  %33 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6855
  %34 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %args, align 8, !dbg !6856
  %call18 = call %union.tree_node* @build_call_vec(%union.tree_node* %32, %union.tree_node* %33, %struct.VEC_tree_gc* %34), !dbg !6857
  store %union.tree_node* %call18, %union.tree_node** %call_expr, align 8, !dbg !6858
  %35 = load %union.tree_node*, %union.tree_node** %call_expr, align 8, !dbg !6859
  %call19 = call %union.gimple_statement_d* @gimple_build_call_from_tree(%union.tree_node* %35), !dbg !6860
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %call4, align 8, !dbg !6861
  %36 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6862
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call4, align 8, !dbg !6863
  %call20 = call %union.tree_node* @make_ssa_name(%union.tree_node* %36, %union.gimple_statement_d* %37), !dbg !6864
  store %union.tree_node* %call20, %union.tree_node** %var, align 8, !dbg !6865
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call4, align 8, !dbg !6866
  %39 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6867
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %38, %union.tree_node* %39), !dbg !6868
  %40 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6869
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call4, align 8, !dbg !6870
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %40, %union.gimple_statement_d* %41, i32 1), !dbg !6871
  %42 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6872
  ret %union.tree_node* %42, !dbg !6873
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6874 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6877, metadata !DIExpression()), !dbg !6878
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6879, metadata !DIExpression()), !dbg !6880
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6881
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6883
  %tobool = icmp ne i8 %call, 0, !dbg !6883
  br i1 %tobool, label %if.then, label %if.else, !dbg !6884

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6885
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6887
  %2 = load i32, i32* %i.addr, align 4, !dbg !6888
  %idxprom = zext i32 %2 to i64, !dbg !6887
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6887
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6887
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6889
  br label %return, !dbg !6889

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6890
  br label %return, !dbg !6890

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6891
  ret %union.tree_node* %4, !dbg !6891
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6892 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6893, metadata !DIExpression()), !dbg !6894
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6895, metadata !DIExpression()), !dbg !6896
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6897
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6898
  store i32 %call, i32* %code, align 4, !dbg !6896
  %1 = load i32, i32* %code, align 4, !dbg !6899
  %cmp = icmp eq i32 %1, 6, !dbg !6901
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6902

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6903
  %cmp1 = icmp eq i32 %2, 1, !dbg !6904
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6905

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6906
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6907
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6908
  %bf.load = load i32, i32* %4, align 8, !dbg !6908
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6908
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6909
  br label %return, !dbg !6909

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6910
  %cmp2 = icmp eq i32 %5, 8, !dbg !6912
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6913

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6914
  br label %return, !dbg !6914

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6915
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6916
  br label %return, !dbg !6916

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6917
  ret i32 %6, !dbg !6917
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6918 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6921, metadata !DIExpression()), !dbg !6922
  %0 = load i32, i32* %code.addr, align 4, !dbg !6923
  %idxprom = sext i32 %0 to i64, !dbg !6924
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6924
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6924
  %conv = zext i8 %1 to i32, !dbg !6925
  ret i32 %conv, !dbg !6926
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !6927 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6928, metadata !DIExpression()), !dbg !6929
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6930, metadata !DIExpression()), !dbg !6931
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6932
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6933
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !6931
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6934, metadata !DIExpression()), !dbg !6935
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6936
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !6936
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6936
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6936
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !6935
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6937
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !6937
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !6937
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !6937
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !6938
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6939
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6939
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !6939
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !6939
  ret %union.tree_node* %6, !dbg !6940
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6941 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6942, metadata !DIExpression()), !dbg !6943
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6944
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6945
  ret %union.tree_node* %call, !dbg !6946
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6947 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6948, metadata !DIExpression()), !dbg !6949
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !6950, metadata !DIExpression()), !dbg !6951
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6952
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6953
  store i32 %call, i32* %num_ops, align 4, !dbg !6954
  %1 = load i32, i32* %num_ops, align 4, !dbg !6955
  %sub = sub i32 %1, 3, !dbg !6956
  ret i32 %sub, !dbg !6957
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_gc* @VEC_tree_gc_alloc(i32 %alloc_) #0 !dbg !6958 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6961, metadata !DIExpression()), !dbg !6962
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6962
  %call = call i8* @vec_gc_p_reserve_exact(i8* null, i32 %0), !dbg !6962
  %1 = bitcast i8* %call to %struct.VEC_tree_gc*, !dbg !6962
  ret %struct.VEC_tree_gc* %1, !dbg !6962
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !6963 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6964, metadata !DIExpression()), !dbg !6965
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !6966, metadata !DIExpression()), !dbg !6967
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6968
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6969
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !6967
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6970
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6970
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6970
  %bf.load = load i64, i64* %2, align 8, !dbg !6970
  %bf.clear = and i64 %bf.load, 65535, !dbg !6970
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6970
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !6972
  br i1 %cmp, label %if.then, label %if.end, !dbg !6973

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6974
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !6974
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6974
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6974
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6974
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !6975
  br label %return, !dbg !6975

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6976
  br label %return, !dbg !6976

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6977
  ret %union.tree_node* %5, !dbg !6977
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6978 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6979, metadata !DIExpression()), !dbg !6980
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6981, metadata !DIExpression()), !dbg !6982
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6983
  %1 = load i32, i32* %index.addr, align 4, !dbg !6984
  %add = add i32 %1, 3, !dbg !6985
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !6986
  ret %union.tree_node* %call, !dbg !6987
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !6988 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6991, metadata !DIExpression()), !dbg !6992
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6993, metadata !DIExpression()), !dbg !6992
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !6994, metadata !DIExpression()), !dbg !6992
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6992
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !6992
  %1 = load i32, i32* %num, align 8, !dbg !6992
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6992
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6992
  %3 = load i32, i32* %alloc, align 4, !dbg !6992
  %cmp = icmp ult i32 %1, %3, !dbg !6992
  %conv = zext i1 %cmp to i32, !dbg !6992
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6992
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !6992
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6992
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !6992
  %6 = load i32, i32* %num1, align 8, !dbg !6992
  %inc = add i32 %6, 1, !dbg !6992
  store i32 %inc, i32* %num1, align 8, !dbg !6992
  %idxprom = zext i32 %6 to i64, !dbg !6992
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6992
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !6992
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6992
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6992
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !6992
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6992
  ret %union.tree_node** %9, !dbg !6992
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6995 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6996, metadata !DIExpression()), !dbg !6997
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6998
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6999
  ret %union.tree_node* %call, !dbg !7000
}

declare dso_local %union.tree_node* @build_call_vec(%union.tree_node*, %union.tree_node*, %struct.VEC_tree_gc*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_call_from_tree(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !7001 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7004, metadata !DIExpression()), !dbg !7005
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7006, metadata !DIExpression()), !dbg !7007
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7008
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7008
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7009
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7010
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !7011
  ret %union.tree_node* %call, !dbg !7012
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !7013 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7016, metadata !DIExpression()), !dbg !7017
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !7018, metadata !DIExpression()), !dbg !7019
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7020
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7021
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !7022
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7023
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7023
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7025

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7026
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7026
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7026
  %bf.load = load i64, i64* %4, align 8, !dbg !7026
  %bf.clear = and i64 %bf.load, 65535, !dbg !7026
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7026
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !7027
  br i1 %cmp, label %if.then, label %if.end, !dbg !7028

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7029
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7030
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !7030
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7030
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7031
  br label %if.end, !dbg !7030

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !7032
}

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @rename_variables_in_stmt(%union.gimple_statement_d* %stmt, %struct.htab* %map, %struct.gimple_stmt_iterator* %insert_gsi) #0 !dbg !7033 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %map.addr = alloca %struct.htab*, align 8
  %insert_gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %type_use = alloca %union.tree_node*, align 8
  %type_expr = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %var = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7036, metadata !DIExpression()), !dbg !7037
  store %struct.htab* %map, %struct.htab** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %map.addr, metadata !7038, metadata !DIExpression()), !dbg !7039
  store %struct.gimple_stmt_iterator* %insert_gsi, %struct.gimple_stmt_iterator** %insert_gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %insert_gsi.addr, metadata !7040, metadata !DIExpression()), !dbg !7041
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !7042, metadata !DIExpression()), !dbg !7043
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7044, metadata !DIExpression()), !dbg !7045
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7046
  %call = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 5), !dbg !7046
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7046
  br label %for.cond, !dbg !7046

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !7048
  %tobool = icmp ne i8 %call1, 0, !dbg !7048
  %lnot = xor i1 %tobool, true, !dbg !7048
  br i1 %lnot, label %for.body, label %for.end, !dbg !7046

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !7050, metadata !DIExpression()), !dbg !7052
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7053
  %call2 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %1), !dbg !7053
  store %union.tree_node* %call2, %union.tree_node** %use, align 8, !dbg !7052
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !7054, metadata !DIExpression()), !dbg !7055
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_use, metadata !7056, metadata !DIExpression()), !dbg !7057
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_expr, metadata !7058, metadata !DIExpression()), !dbg !7059
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !7060, metadata !DIExpression()), !dbg !7061
  %2 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7062
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7062
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7062
  %bf.load = load i64, i64* %3, align 8, !dbg !7062
  %bf.clear = and i64 %bf.load, 65535, !dbg !7062
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7062
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !7064
  br i1 %cmp, label %if.then, label %if.end, !dbg !7065

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !7066

if.end:                                           ; preds = %for.body
  %4 = load %struct.htab*, %struct.htab** %map.addr, align 8, !dbg !7067
  %5 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7068
  %call3 = call %union.tree_node* @get_rename(%struct.htab* %4, %union.tree_node* %5), !dbg !7069
  store %union.tree_node* %call3, %union.tree_node** %expr, align 8, !dbg !7070
  %6 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7071
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7073
  %cmp4 = icmp eq %union.tree_node* %6, %7, !dbg !7074
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !7075

if.then5:                                         ; preds = %if.end
  br label %for.inc, !dbg !7076

if.end6:                                          ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7077
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !7077
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7077
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7077
  store %union.tree_node* %9, %union.tree_node** %type_use, align 8, !dbg !7078
  %10 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7079
  %common7 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !7079
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !7079
  %11 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !7079
  store %union.tree_node* %11, %union.tree_node** %type_expr, align 8, !dbg !7080
  %12 = load %union.tree_node*, %union.tree_node** %type_use, align 8, !dbg !7081
  %13 = load %union.tree_node*, %union.tree_node** %type_expr, align 8, !dbg !7083
  %cmp9 = icmp ne %union.tree_node* %12, %13, !dbg !7084
  br i1 %cmp9, label %if.then17, label %lor.lhs.false, !dbg !7085

lor.lhs.false:                                    ; preds = %if.end6
  %14 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7086
  %base10 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7086
  %15 = bitcast %struct.tree_base* %base10 to i64*, !dbg !7086
  %bf.load11 = load i64, i64* %15, align 8, !dbg !7086
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !7086
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !7086
  %cmp14 = icmp ne i32 %bf.cast13, 141, !dbg !7087
  br i1 %cmp14, label %land.lhs.true, label %if.end34, !dbg !7088

land.lhs.true:                                    ; preds = %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7089
  %call15 = call zeroext i8 @is_gimple_reg(%union.tree_node* %16), !dbg !7090
  %conv = zext i8 %call15 to i32, !dbg !7090
  %tobool16 = icmp ne i32 %conv, 0, !dbg !7090
  br i1 %tobool16, label %if.then17, label %if.end34, !dbg !7091

if.then17:                                        ; preds = %land.lhs.true, %if.end6
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7092, metadata !DIExpression()), !dbg !7094
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7095
  %call18 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %17), !dbg !7097
  %tobool19 = icmp ne i8 %call18, 0, !dbg !7097
  br i1 %tobool19, label %if.then20, label %if.end25, !dbg !7098

if.then20:                                        ; preds = %if.then17
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7099
  %call21 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %18), !dbg !7102
  %tobool22 = icmp ne i8 %call21, 0, !dbg !7102
  br i1 %tobool22, label %if.then23, label %if.else, !dbg !7103

if.then23:                                        ; preds = %if.then20
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7104
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %19), !dbg !7105
  br label %if.end24, !dbg !7105

if.else:                                          ; preds = %if.then20
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7106
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.then23
  br label %for.end, !dbg !7107

if.end25:                                         ; preds = %if.then17
  %20 = load %union.tree_node*, %union.tree_node** %type_use, align 8, !dbg !7108
  %call26 = call %union.tree_node* @create_tmp_var(%union.tree_node* %20, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)), !dbg !7109
  store %union.tree_node* %call26, %union.tree_node** %var, align 8, !dbg !7110
  %21 = load %union.tree_node*, %union.tree_node** %type_use, align 8, !dbg !7111
  %22 = load %union.tree_node*, %union.tree_node** %type_expr, align 8, !dbg !7113
  %cmp27 = icmp ne %union.tree_node* %21, %22, !dbg !7114
  br i1 %cmp27, label %if.then29, label %if.end31, !dbg !7115

if.then29:                                        ; preds = %if.end25
  %23 = load %union.tree_node*, %union.tree_node** %type_use, align 8, !dbg !7116
  %24 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7116
  %call30 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %23, %union.tree_node* %24), !dbg !7116
  store %union.tree_node* %call30, %union.tree_node** %expr, align 8, !dbg !7117
  br label %if.end31, !dbg !7118

if.end31:                                         ; preds = %if.then29, %if.end25
  %25 = load %union.tree_node*, %union.tree_node** %type_use, align 8, !dbg !7119
  %26 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7119
  %27 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7119
  %call32 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !7119
  store %union.tree_node* %call32, %union.tree_node** %expr, align 8, !dbg !7120
  %28 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7121
  %call33 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %28, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !7122
  store %union.tree_node* %call33, %union.tree_node** %expr, align 8, !dbg !7123
  %29 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %insert_gsi.addr, align 8, !dbg !7124
  %30 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !7125
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %29, %struct.gimple_seq_d* %30, i32 1), !dbg !7126
  br label %if.end34, !dbg !7127

if.end34:                                         ; preds = %if.end31, %land.lhs.true, %lor.lhs.false
  %31 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7128
  %32 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7129
  call void @replace_exp(%struct.ssa_use_operand_d* %31, %union.tree_node* %32), !dbg !7130
  br label %for.inc, !dbg !7131

for.inc:                                          ; preds = %if.end34, %if.then5, %if.then
  %call35 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !7048
  store %struct.ssa_use_operand_d* %call35, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7048
  br label %for.cond, !dbg !7048, !llvm.loop !7132

for.end:                                          ; preds = %if.end24, %for.cond
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7134
  call void @update_stmt(%union.gimple_statement_d* %33), !dbg !7135
  ret void, !dbg !7136
}

declare dso_local void @gsi_insert_seq_before(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @if_region_entry(%struct.ifsese_s* %if_region) #0 !dbg !7137 {
entry:
  %if_region.addr = alloca %struct.ifsese_s*, align 8
  store %struct.ifsese_s* %if_region, %struct.ifsese_s** %if_region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ifsese_s** %if_region.addr, metadata !7140, metadata !DIExpression()), !dbg !7141
  %0 = load %struct.ifsese_s*, %struct.ifsese_s** %if_region.addr, align 8, !dbg !7142
  %region = getelementptr inbounds %struct.ifsese_s, %struct.ifsese_s* %0, i32 0, i32 0, !dbg !7142
  %1 = load %struct.sese_s*, %struct.sese_s** %region, align 8, !dbg !7142
  %entry1 = getelementptr inbounds %struct.sese_s, %struct.sese_s* %1, i32 0, i32 0, !dbg !7142
  %2 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !7142
  ret %struct.edge_def* %2, !dbg !7143
}

declare dso_local zeroext i8 @mark_irreducible_loops() #2

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @calculate_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !7144 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7145, metadata !DIExpression()), !dbg !7146
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7147
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !7147
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !7147
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7147
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7147

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7147
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !7147
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !7147
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7147
  br label %cond.end, !dbg !7147

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7147

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7147
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7147
  %cmp = icmp eq i32 %call, 1, !dbg !7148
  %conv = zext i1 %cmp to i32, !dbg !7148
  %conv2 = trunc i32 %conv to i8, !dbg !7147
  ret i8 %conv2, !dbg !7149
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !7150 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !7151, metadata !DIExpression()), !dbg !7152
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7153
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !7153
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7153

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7154
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !7155
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !7155
  br label %cond.end, !dbg !7153

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7153

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !7153
  ret %struct.gimple_seq_node_d* %cond, !dbg !7156
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2095, !2096, !2097}
!llvm.ident = !{!2098}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !649, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "sese.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2 = !{!3, !132, !327, !336, !340, !346, !351, !356, !374, !381, !388, !393, !527, !566, !571, !575, !582, !596, !622, !627, !640, !646}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !4, line: 7, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131}
!7 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!8 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!9 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!10 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!11 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!12 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!13 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!14 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!15 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!16 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!17 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!18 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!19 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!20 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!21 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!22 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!23 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!24 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!25 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!26 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!27 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!28 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!29 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!30 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!31 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!32 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!33 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!34 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!35 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!36 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!37 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!38 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!39 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!40 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!41 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!42 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!43 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!44 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!45 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!46 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!47 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!48 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!49 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!50 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!51 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!52 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!53 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!54 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!55 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!56 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!57 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!58 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!59 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!60 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!61 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!62 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!63 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!64 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!65 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!66 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!67 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!68 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!69 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!70 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!71 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!72 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!73 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!74 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!75 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!76 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!77 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!78 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!79 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!80 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!81 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!82 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!83 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!84 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!85 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!86 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!87 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!88 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!89 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!90 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!91 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!92 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!93 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!94 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!95 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!131 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!132 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !133, line: 39, baseType: !5, size: 32, elements: !134)
!133 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!134 = !{!135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326}
!135 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!137 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!138 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!139 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!140 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!141 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!142 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!143 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!144 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!145 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!146 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!147 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!148 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!149 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!150 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!151 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!152 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!153 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!154 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!155 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!156 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!157 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!158 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!159 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!160 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!161 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!162 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!163 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!164 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!165 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!166 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!167 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!168 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!169 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!170 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!171 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!172 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!173 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!174 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!175 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!176 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!177 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!178 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!179 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!180 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!181 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!182 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!183 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!184 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!185 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!186 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!187 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!188 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!189 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!190 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!191 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!192 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!193 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!194 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!195 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!196 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!197 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!198 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!199 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!200 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!201 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!202 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!203 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!204 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!205 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!206 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!207 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!208 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!209 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!210 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!211 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!212 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!213 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!214 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!215 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!216 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!217 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!218 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!219 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!220 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!221 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!222 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!223 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!226 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!227 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!232 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!233 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!234 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!235 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!236 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!237 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!238 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!239 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!240 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!241 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!242 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!243 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!244 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!245 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!246 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!247 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!248 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!249 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!250 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!251 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!252 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!253 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!254 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!255 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!256 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!257 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!258 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!259 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!260 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!261 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!262 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!263 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!264 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!265 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!266 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!267 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!268 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!269 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!270 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!271 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!272 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!273 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!274 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!275 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!276 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!277 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!278 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!279 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!280 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!281 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!282 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!283 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!284 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!285 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!286 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!287 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!288 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!289 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!299 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!300 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!302 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!303 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!304 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!305 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!306 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!320 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!321 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!322 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!323 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!324 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!325 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!326 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!327 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !328, line: 31, baseType: !5, size: 32, elements: !329)
!328 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!329 = !{!330, !331, !332, !333, !334, !335}
!330 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!331 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!332 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !328, line: 91, baseType: !5, size: 32, elements: !337)
!337 = !{!338, !339}
!338 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!339 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !341, line: 363, baseType: !5, size: 32, elements: !342)
!341 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344, !345}
!343 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!345 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!346 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !341, line: 355, baseType: !5, size: 32, elements: !347)
!347 = !{!348, !349, !350}
!348 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!349 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!350 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!351 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !352, line: 474, baseType: !5, size: 32, elements: !353)
!352 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!353 = !{!354, !355}
!354 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!356 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !133, line: 280, baseType: !5, size: 32, elements: !357)
!357 = !{!358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373}
!358 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!374 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !133, line: 1817, baseType: !5, size: 32, elements: !375)
!375 = !{!376, !377, !378, !379, !380}
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!381 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !133, line: 1805, baseType: !5, size: 32, elements: !382)
!382 = !{!383, !384, !385, !386, !387}
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!384 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!388 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !389, line: 147, baseType: !5, size: 32, elements: !390)
!389 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!390 = !{!391, !392}
!391 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!392 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!393 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !133, line: 3410, baseType: !5, size: 32, elements: !394)
!394 = !{!395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526}
!395 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!396 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!397 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!398 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!399 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!400 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!401 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!402 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!403 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!404 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!405 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!406 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!407 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!408 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!409 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!410 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!411 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!412 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!413 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!414 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!415 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!416 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!417 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!418 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!419 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!420 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!421 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!422 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!423 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!424 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!425 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!426 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!427 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!428 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!429 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!430 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!431 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!432 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!433 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!434 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!435 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!436 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!437 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!438 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!439 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!440 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!441 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!442 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!443 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!444 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!527 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !528, line: 51, baseType: !5, size: 32, elements: !529)
!528 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!529 = !{!530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565}
!530 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!531 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!532 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!533 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!534 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!535 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!536 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!537 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!538 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!539 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!540 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!541 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!542 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!543 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!544 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!545 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!546 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!547 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!548 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!549 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!550 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!551 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!552 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!553 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!554 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!555 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!556 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!557 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!558 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!559 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!560 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!561 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!562 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!563 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!564 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!565 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!566 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !528, line: 4603, baseType: !5, size: 32, elements: !567)
!567 = !{!568, !569, !570}
!568 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!569 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!570 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!571 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !341, line: 912, baseType: !5, size: 32, elements: !572)
!572 = !{!573, !574}
!573 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!574 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!575 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !576, line: 119, baseType: !5, size: 32, elements: !577)
!576 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!577 = !{!578, !579, !580, !581}
!578 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!579 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!580 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!581 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!582 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !341, line: 295, baseType: !5, size: 32, elements: !583)
!583 = !{!584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595}
!584 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!585 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!586 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!587 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!588 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!589 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!590 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!591 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!592 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!593 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!594 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!595 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!596 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !528, line: 727, baseType: !5, size: 32, elements: !597)
!597 = !{!598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621}
!598 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!599 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!600 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!601 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!602 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!603 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!604 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!605 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!606 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!607 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!608 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!609 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!610 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!611 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!612 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!613 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!614 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!615 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!616 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!617 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!618 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!619 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!620 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!621 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!622 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !328, line: 498, baseType: !5, size: 32, elements: !623)
!623 = !{!624, !625, !626}
!624 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!625 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!626 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!627 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !133, line: 58, baseType: !5, size: 32, elements: !628)
!628 = !{!629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639}
!629 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!630 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!631 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!632 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!633 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!634 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!635 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!636 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!637 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!638 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!639 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!640 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !528, line: 80, baseType: !5, size: 32, elements: !641)
!641 = !{!642, !643, !644, !645}
!642 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!643 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!644 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!645 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!646 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_debug_subcode", file: !528, line: 124, baseType: !5, size: 32, elements: !647)
!647 = !{!648}
!648 = !DIEnumerator(name: "GIMPLE_DEBUG_BIND", value: 0, isUnsigned: true)
!649 = !{!650, !651, !2015, !2021, !1556, !132, !1248, !2040, !2041, !657, !2048, !2049, !2034, !5, !1229, !2027, !2050, !1021, !926, !787, !2053, !754, !711, !2066, !2067, !2079, !2085, !2092, !988, !2093, !640, !1533}
!650 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !652, size: 64)
!652 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !653)
!653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rename_map_elt_s", file: !654, line: 255, size: 128, elements: !655)
!654 = !DIFile(filename: "./sese.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!655 = !{!656, !2014}
!656 = !DIDerivedType(tag: DW_TAG_member, name: "old_name", scope: !653, file: !654, line: 257, baseType: !657, size: 64)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !658, line: 56, baseType: !659)
!658 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !660, size: 64)
!660 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !133, line: 3371, size: 1792, elements: !661)
!661 = !{!662, !695, !701, !714, !733, !744, !749, !760, !766, !780, !792, !830, !1343, !1371, !1388, !1389, !1394, !1403, !1409, !1414, !1418, !1422, !1665, !1712, !1718, !1724, !1731, !1744, !1758, !1775, !1787, !1809, !1824, !1996}
!662 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !660, file: !133, line: 3372, baseType: !663, size: 64)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !133, line: 360, size: 64, elements: !664)
!664 = !{!665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694}
!665 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !663, file: !133, line: 361, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!666 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !663, file: !133, line: 363, baseType: !5, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !663, file: !133, line: 364, baseType: !5, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !663, file: !133, line: 365, baseType: !5, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !663, file: !133, line: 366, baseType: !5, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !663, file: !133, line: 367, baseType: !5, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !663, file: !133, line: 368, baseType: !5, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!672 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !663, file: !133, line: 369, baseType: !5, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!673 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !663, file: !133, line: 370, baseType: !5, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !663, file: !133, line: 372, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !663, file: !133, line: 373, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!676 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !663, file: !133, line: 374, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!677 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !663, file: !133, line: 375, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!678 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !663, file: !133, line: 376, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!679 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !663, file: !133, line: 377, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!680 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !663, file: !133, line: 378, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!681 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !663, file: !133, line: 379, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!682 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !663, file: !133, line: 381, baseType: !5, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!683 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !663, file: !133, line: 382, baseType: !5, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !663, file: !133, line: 383, baseType: !5, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !663, file: !133, line: 384, baseType: !5, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !663, file: !133, line: 385, baseType: !5, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !663, file: !133, line: 386, baseType: !5, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !663, file: !133, line: 387, baseType: !5, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !663, file: !133, line: 388, baseType: !5, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !663, file: !133, line: 390, baseType: !5, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !663, file: !133, line: 391, baseType: !5, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !663, file: !133, line: 392, baseType: !5, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !663, file: !133, line: 394, baseType: !5, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !663, file: !133, line: 399, baseType: !5, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !660, file: !133, line: 3373, baseType: !696, size: 192)
!696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !133, line: 402, size: 192, elements: !697)
!697 = !{!698, !699, !700}
!698 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !696, file: !133, line: 403, baseType: !663, size: 64)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !696, file: !133, line: 404, baseType: !657, size: 64, offset: 64)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !696, file: !133, line: 405, baseType: !657, size: 64, offset: 128)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !660, file: !133, line: 3374, baseType: !702, size: 320)
!702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !133, line: 1384, size: 320, elements: !703)
!703 = !{!704, !705}
!704 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !702, file: !133, line: 1385, baseType: !696, size: 192)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !702, file: !133, line: 1386, baseType: !706, size: 128, offset: 192)
!706 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !707, line: 58, baseType: !708)
!707 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!708 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !707, line: 54, size: 128, elements: !709)
!709 = !{!710, !712}
!710 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !708, file: !707, line: 56, baseType: !711, size: 64)
!711 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!712 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !708, file: !707, line: 57, baseType: !713, size: 64, offset: 64)
!713 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !660, file: !133, line: 3375, baseType: !715, size: 256)
!715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !133, line: 1397, size: 256, elements: !716)
!716 = !{!717, !718}
!717 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !715, file: !133, line: 1398, baseType: !696, size: 192)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !715, file: !133, line: 1399, baseType: !719, size: 64, offset: 192)
!719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !720, size: 64)
!720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !721, line: 52, size: 256, elements: !722)
!721 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!722 = !{!723, !724, !725, !726, !727, !728, !729}
!723 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !720, file: !721, line: 56, baseType: !5, size: 2, flags: DIFlagBitField, extraData: i64 0)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !720, file: !721, line: 57, baseType: !5, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !720, file: !721, line: 58, baseType: !5, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !720, file: !721, line: 59, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !720, file: !721, line: 60, baseType: !5, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !720, file: !721, line: 61, baseType: !5, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !720, file: !721, line: 62, baseType: !730, size: 192, offset: 64)
!730 = !DICompositeType(tag: DW_TAG_array_type, baseType: !711, size: 192, elements: !731)
!731 = !{!732}
!732 = !DISubrange(count: 3)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !660, file: !133, line: 3376, baseType: !734, size: 256)
!734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !133, line: 1408, size: 256, elements: !735)
!735 = !{!736, !737}
!736 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !734, file: !133, line: 1409, baseType: !696, size: 192)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !734, file: !133, line: 1410, baseType: !738, size: 64, offset: 192)
!738 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !739, size: 64)
!739 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !740, line: 27, size: 192, elements: !741)
!740 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!741 = !{!742, !743}
!742 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !739, file: !740, line: 29, baseType: !706, size: 128)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !739, file: !740, line: 30, baseType: !3, size: 32, offset: 128)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !660, file: !133, line: 3377, baseType: !745, size: 256)
!745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !133, line: 1437, size: 256, elements: !746)
!746 = !{!747, !748}
!747 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !745, file: !133, line: 1438, baseType: !696, size: 192)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !745, file: !133, line: 1439, baseType: !657, size: 64, offset: 192)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !660, file: !133, line: 3378, baseType: !750, size: 256)
!750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !133, line: 1418, size: 256, elements: !751)
!751 = !{!752, !753, !755}
!752 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !750, file: !133, line: 1419, baseType: !696, size: 192)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !750, file: !133, line: 1420, baseType: !754, size: 32, offset: 192)
!754 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !750, file: !133, line: 1421, baseType: !756, size: 8, offset: 224)
!756 = !DICompositeType(tag: DW_TAG_array_type, baseType: !757, size: 8, elements: !758)
!757 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!758 = !{!759}
!759 = !DISubrange(count: 1)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !660, file: !133, line: 3379, baseType: !761, size: 320)
!761 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !133, line: 1428, size: 320, elements: !762)
!762 = !{!763, !764, !765}
!763 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !761, file: !133, line: 1429, baseType: !696, size: 192)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !761, file: !133, line: 1430, baseType: !657, size: 64, offset: 192)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !761, file: !133, line: 1431, baseType: !657, size: 64, offset: 256)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !660, file: !133, line: 3380, baseType: !767, size: 320)
!767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !133, line: 1460, size: 320, elements: !768)
!768 = !{!769, !770}
!769 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !767, file: !133, line: 1461, baseType: !696, size: 192)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !767, file: !133, line: 1462, baseType: !771, size: 128, offset: 192)
!771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !772, line: 31, size: 128, elements: !773)
!772 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!773 = !{!774, !778, !779}
!774 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !771, file: !772, line: 32, baseType: !775, size: 64)
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !777)
!777 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !771, file: !772, line: 33, baseType: !5, size: 32, offset: 64)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !771, file: !772, line: 34, baseType: !5, size: 32, offset: 96)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !660, file: !133, line: 3381, baseType: !781, size: 384)
!781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !133, line: 2507, size: 384, elements: !782)
!782 = !{!783, !784, !789, !790, !791}
!783 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !781, file: !133, line: 2508, baseType: !696, size: 192)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !781, file: !133, line: 2509, baseType: !785, size: 32, offset: 192)
!785 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !786, line: 58, baseType: !787)
!786 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!787 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !788, line: 44, baseType: !5)
!788 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!789 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !781, file: !133, line: 2510, baseType: !5, size: 32, offset: 224)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !781, file: !133, line: 2511, baseType: !657, size: 64, offset: 256)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !781, file: !133, line: 2512, baseType: !657, size: 64, offset: 320)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !660, file: !133, line: 3382, baseType: !793, size: 896)
!793 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !133, line: 2652, size: 896, elements: !794)
!794 = !{!795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827}
!795 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !793, file: !133, line: 2653, baseType: !781, size: 384)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !793, file: !133, line: 2654, baseType: !657, size: 64, offset: 384)
!797 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !793, file: !133, line: 2656, baseType: !5, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !793, file: !133, line: 2658, baseType: !5, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !793, file: !133, line: 2659, baseType: !5, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !793, file: !133, line: 2660, baseType: !5, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !793, file: !133, line: 2661, baseType: !5, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!802 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !793, file: !133, line: 2662, baseType: !5, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !793, file: !133, line: 2663, baseType: !5, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!804 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !793, file: !133, line: 2664, baseType: !5, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !793, file: !133, line: 2666, baseType: !5, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !793, file: !133, line: 2667, baseType: !5, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !793, file: !133, line: 2668, baseType: !5, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !793, file: !133, line: 2669, baseType: !5, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !793, file: !133, line: 2670, baseType: !5, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !793, file: !133, line: 2671, baseType: !5, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !793, file: !133, line: 2672, baseType: !5, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !793, file: !133, line: 2673, baseType: !5, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !793, file: !133, line: 2674, baseType: !5, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !793, file: !133, line: 2678, baseType: !5, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !793, file: !133, line: 2682, baseType: !5, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !793, file: !133, line: 2685, baseType: !5, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !793, file: !133, line: 2688, baseType: !5, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !793, file: !133, line: 2690, baseType: !5, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !793, file: !133, line: 2692, baseType: !5, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !793, file: !133, line: 2695, baseType: !5, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !793, file: !133, line: 2698, baseType: !5, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !793, file: !133, line: 2703, baseType: !5, size: 32, offset: 512)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !793, file: !133, line: 2705, baseType: !657, size: 64, offset: 576)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !793, file: !133, line: 2706, baseType: !657, size: 64, offset: 640)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !793, file: !133, line: 2707, baseType: !657, size: 64, offset: 704)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !793, file: !133, line: 2708, baseType: !657, size: 64, offset: 768)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !793, file: !133, line: 2711, baseType: !828, size: 64, offset: 832)
!828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !829, size: 64)
!829 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !133, line: 2711, flags: DIFlagFwdDecl)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !660, file: !133, line: 3383, baseType: !831, size: 960)
!831 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !133, line: 2756, size: 960, elements: !832)
!832 = !{!833, !834}
!833 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !831, file: !133, line: 2757, baseType: !793, size: 896)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !831, file: !133, line: 2758, baseType: !835, size: 64, offset: 896)
!835 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !658, line: 50, baseType: !836)
!836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !837, size: 64)
!837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !838, line: 240, size: 384, elements: !839)
!838 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!839 = !{!840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850}
!840 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !837, file: !838, line: 242, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !837, file: !838, line: 245, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !837, file: !838, line: 252, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !837, file: !838, line: 257, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !837, file: !838, line: 265, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !837, file: !838, line: 277, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !837, file: !838, line: 291, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !837, file: !838, line: 298, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !837, file: !838, line: 305, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !837, file: !838, line: 310, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !837, file: !838, line: 321, baseType: !851, size: 320, offset: 64)
!851 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !838, line: 315, size: 320, elements: !852)
!852 = !{!853, !1310, !1312, !1341, !1342}
!853 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !851, file: !838, line: 316, baseType: !854, size: 64)
!854 = !DICompositeType(tag: DW_TAG_array_type, baseType: !855, size: 64, elements: !758)
!855 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !838, line: 183, baseType: !856)
!856 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !838, line: 166, size: 64, elements: !857)
!857 = !{!858, !859, !860, !863, !864, !872, !873, !885, !888, !949, !950, !1287, !1300, !1307}
!858 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !856, file: !838, line: 168, baseType: !754, size: 32)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !856, file: !838, line: 169, baseType: !5, size: 32)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !856, file: !838, line: 170, baseType: !861, size: 64)
!861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !862, size: 64)
!862 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !757)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !856, file: !838, line: 171, baseType: !835, size: 64)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !856, file: !838, line: 172, baseType: !865, size: 64)
!865 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !658, line: 53, baseType: !866)
!866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !867, size: 64)
!867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !838, line: 359, size: 128, elements: !868)
!868 = !{!869, !870}
!869 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !867, file: !838, line: 360, baseType: !754, size: 32)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !867, file: !838, line: 361, baseType: !871, size: 64, offset: 64)
!871 = !DICompositeType(tag: DW_TAG_array_type, baseType: !835, size: 64, elements: !758)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !856, file: !838, line: 173, baseType: !3, size: 32)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !856, file: !838, line: 174, baseType: !874, size: 32)
!874 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !838, line: 133, baseType: !875)
!875 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !838, line: 115, size: 32, elements: !876)
!876 = !{!877, !878, !879, !880, !881, !882, !883, !884}
!877 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !875, file: !838, line: 118, baseType: !5, size: 8, flags: DIFlagBitField, extraData: i64 0)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !875, file: !838, line: 120, baseType: !5, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !875, file: !838, line: 121, baseType: !5, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !875, file: !838, line: 123, baseType: !5, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !875, file: !838, line: 125, baseType: !5, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !875, file: !838, line: 127, baseType: !5, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !875, file: !838, line: 130, baseType: !5, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !875, file: !838, line: 132, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !856, file: !838, line: 175, baseType: !886, size: 64)
!886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !887, size: 64)
!887 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !838, line: 175, flags: DIFlagFwdDecl)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !856, file: !838, line: 176, baseType: !889, size: 64)
!889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !890, size: 64)
!890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !891, line: 75, size: 256, elements: !892)
!891 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!892 = !{!893, !907, !908, !909}
!893 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !890, file: !891, line: 76, baseType: !894, size: 64)
!894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !895, size: 64)
!895 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !891, line: 68, baseType: !896)
!896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !891, line: 63, size: 320, elements: !897)
!897 = !{!898, !900, !901, !902}
!898 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !896, file: !891, line: 64, baseType: !899, size: 64)
!899 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !896, size: 64)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !896, file: !891, line: 65, baseType: !899, size: 64, offset: 64)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !896, file: !891, line: 66, baseType: !5, size: 32, offset: 128)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !896, file: !891, line: 67, baseType: !903, size: 128, offset: 192)
!903 = !DICompositeType(tag: DW_TAG_array_type, baseType: !904, size: 128, elements: !905)
!904 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !891, line: 29, baseType: !711)
!905 = !{!906}
!906 = !DISubrange(count: 2)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !890, file: !891, line: 77, baseType: !894, size: 64, offset: 64)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !890, file: !891, line: 78, baseType: !5, size: 32, offset: 128)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !890, file: !891, line: 79, baseType: !910, size: 64, offset: 192)
!910 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !911, size: 64)
!911 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !891, line: 49, baseType: !912)
!912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !891, line: 45, size: 832, elements: !913)
!913 = !{!914, !915, !916}
!914 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !912, file: !891, line: 46, baseType: !899, size: 64)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !912, file: !891, line: 47, baseType: !889, size: 64, offset: 64)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !912, file: !891, line: 48, baseType: !917, size: 704, offset: 128)
!917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !918, line: 164, size: 704, elements: !919)
!918 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!919 = !{!920, !921, !932, !933, !934, !935, !936, !937, !941, !945, !946, !947, !948}
!920 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !917, file: !918, line: 166, baseType: !713, size: 64)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !917, file: !918, line: 167, baseType: !922, size: 64, offset: 64)
!922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !923, size: 64)
!923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !918, line: 157, size: 192, elements: !924)
!924 = !{!925, !927, !928}
!925 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !923, file: !918, line: 159, baseType: !926, size: 64)
!926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !757, size: 64)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !923, file: !918, line: 160, baseType: !922, size: 64, offset: 64)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !923, file: !918, line: 161, baseType: !929, size: 32, offset: 128)
!929 = !DICompositeType(tag: DW_TAG_array_type, baseType: !757, size: 32, elements: !930)
!930 = !{!931}
!931 = !DISubrange(count: 4)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !917, file: !918, line: 168, baseType: !926, size: 64, offset: 128)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !917, file: !918, line: 169, baseType: !926, size: 64, offset: 192)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !917, file: !918, line: 170, baseType: !926, size: 64, offset: 256)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !917, file: !918, line: 171, baseType: !713, size: 64, offset: 320)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !917, file: !918, line: 172, baseType: !754, size: 32, offset: 384)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !917, file: !918, line: 176, baseType: !938, size: 64, offset: 448)
!938 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !939, size: 64)
!939 = !DISubroutineType(types: !940)
!940 = !{!922, !650, !713}
!941 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !917, file: !918, line: 177, baseType: !942, size: 64, offset: 512)
!942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !943, size: 64)
!943 = !DISubroutineType(types: !944)
!944 = !{null, !650, !922}
!945 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !917, file: !918, line: 178, baseType: !650, size: 64, offset: 576)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !917, file: !918, line: 179, baseType: !5, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !917, file: !918, line: 180, baseType: !5, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !917, file: !918, line: 184, baseType: !5, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !856, file: !838, line: 177, baseType: !657, size: 64)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !856, file: !838, line: 178, baseType: !951, size: 64)
!951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !952, size: 64)
!952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !341, line: 217, size: 832, elements: !953)
!953 = !{!954, !1199, !1200, !1201, !1257, !1261, !1262, !1263, !1281, !1282, !1283, !1284, !1285, !1286}
!954 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !952, file: !341, line: 219, baseType: !955, size: 64)
!955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !956, size: 64)
!956 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !341, line: 151, baseType: !957)
!957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !341, line: 151, size: 128, elements: !958)
!958 = !{!959}
!959 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !957, file: !341, line: 151, baseType: !960, size: 128)
!960 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !341, line: 150, baseType: !961)
!961 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !341, line: 150, size: 128, elements: !962)
!962 = !{!963, !964, !965}
!963 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !961, file: !341, line: 150, baseType: !5, size: 32)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !961, file: !341, line: 150, baseType: !5, size: 32, offset: 32)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !961, file: !341, line: 150, baseType: !966, size: 64, offset: 64)
!966 = !DICompositeType(tag: DW_TAG_array_type, baseType: !967, size: 64, elements: !758)
!967 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !658, line: 108, baseType: !968)
!968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !969, size: 64)
!969 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !341, line: 122, size: 512, elements: !970)
!970 = !{!971, !972, !973, !1191, !1192, !1193, !1194, !1195, !1196, !1197}
!971 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !969, file: !341, line: 124, baseType: !951, size: 64)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !969, file: !341, line: 125, baseType: !951, size: 64, offset: 64)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !969, file: !341, line: 131, baseType: !974, size: 64, offset: 128)
!974 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !341, line: 128, size: 64, elements: !975)
!975 = !{!976, !1190}
!976 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !974, file: !341, line: 129, baseType: !977, size: 64)
!977 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !658, line: 66, baseType: !978)
!978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !979, size: 64)
!979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !528, line: 143, size: 192, elements: !980)
!980 = !{!981, !1188, !1189}
!981 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !979, file: !528, line: 145, baseType: !982, size: 64)
!982 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !658, line: 69, baseType: !983)
!983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !984, size: 64)
!984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !528, line: 136, size: 192, elements: !985)
!985 = !{!986, !1186, !1187}
!986 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !984, file: !528, line: 137, baseType: !987, size: 64)
!987 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !658, line: 58, baseType: !988)
!988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !989, size: 64)
!989 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !528, line: 737, size: 768, elements: !990)
!990 = !{!991, !1008, !1041, !1047, !1052, !1057, !1064, !1070, !1076, !1081, !1095, !1100, !1106, !1111, !1121, !1126, !1144, !1151, !1158, !1164, !1169, !1175, !1181}
!991 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !989, file: !528, line: 738, baseType: !992, size: 256)
!992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !528, line: 271, size: 256, elements: !993)
!993 = !{!994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007}
!994 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !992, file: !528, line: 274, baseType: !5, size: 8, flags: DIFlagBitField, extraData: i64 0)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !992, file: !528, line: 277, baseType: !5, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !992, file: !528, line: 281, baseType: !5, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !992, file: !528, line: 284, baseType: !5, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !992, file: !528, line: 291, baseType: !5, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !992, file: !528, line: 295, baseType: !5, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !992, file: !528, line: 298, baseType: !5, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !992, file: !528, line: 301, baseType: !5, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !992, file: !528, line: 307, baseType: !5, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !992, file: !528, line: 312, baseType: !5, size: 32, offset: 32)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !992, file: !528, line: 316, baseType: !785, size: 32, offset: 64)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !992, file: !528, line: 319, baseType: !5, size: 32, offset: 96)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !992, file: !528, line: 323, baseType: !951, size: 64, offset: 128)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !992, file: !528, line: 327, baseType: !657, size: 64, offset: 192)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !989, file: !528, line: 739, baseType: !1009, size: 448)
!1009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !528, line: 350, size: 448, elements: !1010)
!1010 = !{!1011, !1039}
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1009, file: !528, line: 353, baseType: !1012, size: 384)
!1012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !528, line: 333, size: 384, elements: !1013)
!1013 = !{!1014, !1015, !1022}
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1012, file: !528, line: 336, baseType: !992, size: 256)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1012, file: !528, line: 343, baseType: !1016, size: 64, offset: 256)
!1016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1017, size: 64)
!1017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !576, line: 37, size: 128, elements: !1018)
!1018 = !{!1019, !1020}
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1017, file: !576, line: 39, baseType: !1016, size: 64)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1017, file: !576, line: 40, baseType: !1021, size: 64, offset: 64)
!1021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !657, size: 64)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1012, file: !528, line: 344, baseType: !1023, size: 64, offset: 320)
!1023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1024, size: 64)
!1024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !576, line: 45, size: 320, elements: !1025)
!1025 = !{!1026, !1027}
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1024, file: !576, line: 47, baseType: !1023, size: 64)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1024, file: !576, line: 48, baseType: !1028, size: 256, offset: 64)
!1028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !133, line: 1883, size: 256, elements: !1029)
!1029 = !{!1030, !1032, !1033, !1038}
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1028, file: !133, line: 1884, baseType: !1031, size: 64)
!1031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1028, size: 64)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1028, file: !133, line: 1885, baseType: !1031, size: 64, offset: 64)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1028, file: !133, line: 1891, baseType: !1034, size: 64, offset: 128)
!1034 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1028, file: !133, line: 1891, size: 64, elements: !1035)
!1035 = !{!1036, !1037}
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1034, file: !133, line: 1891, baseType: !987, size: 64)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1034, file: !133, line: 1891, baseType: !657, size: 64)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1028, file: !133, line: 1892, baseType: !1021, size: 64, offset: 192)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1009, file: !528, line: 359, baseType: !1040, size: 64, offset: 384)
!1040 = !DICompositeType(tag: DW_TAG_array_type, baseType: !657, size: 64, elements: !758)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !989, file: !528, line: 740, baseType: !1042, size: 512)
!1042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !528, line: 365, size: 512, elements: !1043)
!1043 = !{!1044, !1045, !1046}
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1042, file: !528, line: 368, baseType: !1012, size: 384)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1042, file: !528, line: 373, baseType: !657, size: 64, offset: 384)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1042, file: !528, line: 374, baseType: !657, size: 64, offset: 448)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !989, file: !528, line: 741, baseType: !1048, size: 576)
!1048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !528, line: 380, size: 576, elements: !1049)
!1049 = !{!1050, !1051}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1048, file: !528, line: 383, baseType: !1042, size: 512)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1048, file: !528, line: 389, baseType: !1040, size: 64, offset: 512)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !989, file: !528, line: 742, baseType: !1053, size: 320)
!1053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !528, line: 395, size: 320, elements: !1054)
!1054 = !{!1055, !1056}
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1053, file: !528, line: 397, baseType: !992, size: 256)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1053, file: !528, line: 400, baseType: !977, size: 64, offset: 256)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !989, file: !528, line: 743, baseType: !1058, size: 448)
!1058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !528, line: 406, size: 448, elements: !1059)
!1059 = !{!1060, !1061, !1062, !1063}
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1058, file: !528, line: 408, baseType: !992, size: 256)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1058, file: !528, line: 412, baseType: !657, size: 64, offset: 256)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1058, file: !528, line: 420, baseType: !657, size: 64, offset: 320)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1058, file: !528, line: 423, baseType: !977, size: 64, offset: 384)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !989, file: !528, line: 744, baseType: !1065, size: 384)
!1065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !528, line: 429, size: 384, elements: !1066)
!1066 = !{!1067, !1068, !1069}
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1065, file: !528, line: 431, baseType: !992, size: 256)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1065, file: !528, line: 434, baseType: !657, size: 64, offset: 256)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1065, file: !528, line: 437, baseType: !977, size: 64, offset: 320)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !989, file: !528, line: 745, baseType: !1071, size: 384)
!1071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !528, line: 443, size: 384, elements: !1072)
!1072 = !{!1073, !1074, !1075}
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1071, file: !528, line: 445, baseType: !992, size: 256)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1071, file: !528, line: 449, baseType: !657, size: 64, offset: 256)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1071, file: !528, line: 453, baseType: !977, size: 64, offset: 320)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !989, file: !528, line: 746, baseType: !1077, size: 320)
!1077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !528, line: 459, size: 320, elements: !1078)
!1078 = !{!1079, !1080}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1077, file: !528, line: 461, baseType: !992, size: 256)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1077, file: !528, line: 464, baseType: !657, size: 64, offset: 256)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !989, file: !528, line: 747, baseType: !1082, size: 768)
!1082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !528, line: 469, size: 768, elements: !1083)
!1083 = !{!1084, !1085, !1086, !1087, !1088}
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1082, file: !528, line: 471, baseType: !992, size: 256)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1082, file: !528, line: 474, baseType: !5, size: 32, offset: 256)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1082, file: !528, line: 475, baseType: !5, size: 32, offset: 288)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1082, file: !528, line: 478, baseType: !657, size: 64, offset: 320)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1082, file: !528, line: 481, baseType: !1089, size: 384, offset: 384)
!1089 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1090, size: 384, elements: !758)
!1090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !133, line: 1917, size: 384, elements: !1091)
!1091 = !{!1092, !1093, !1094}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1090, file: !133, line: 1920, baseType: !1028, size: 256)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1090, file: !133, line: 1921, baseType: !657, size: 64, offset: 256)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1090, file: !133, line: 1922, baseType: !785, size: 32, offset: 320)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !989, file: !528, line: 748, baseType: !1096, size: 320)
!1096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !528, line: 487, size: 320, elements: !1097)
!1097 = !{!1098, !1099}
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1096, file: !528, line: 490, baseType: !992, size: 256)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1096, file: !528, line: 494, baseType: !754, size: 32, offset: 256)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !989, file: !528, line: 749, baseType: !1101, size: 384)
!1101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !528, line: 500, size: 384, elements: !1102)
!1102 = !{!1103, !1104, !1105}
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1101, file: !528, line: 502, baseType: !992, size: 256)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1101, file: !528, line: 506, baseType: !977, size: 64, offset: 256)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1101, file: !528, line: 510, baseType: !977, size: 64, offset: 320)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !989, file: !528, line: 750, baseType: !1107, size: 320)
!1107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !528, line: 529, size: 320, elements: !1108)
!1108 = !{!1109, !1110}
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1107, file: !528, line: 531, baseType: !992, size: 256)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1107, file: !528, line: 540, baseType: !977, size: 64, offset: 256)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !989, file: !528, line: 751, baseType: !1112, size: 704)
!1112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !528, line: 546, size: 704, elements: !1113)
!1113 = !{!1114, !1115, !1116, !1117, !1118, !1119, !1120}
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1112, file: !528, line: 549, baseType: !1042, size: 512)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1112, file: !528, line: 553, baseType: !861, size: 64, offset: 512)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1112, file: !528, line: 557, baseType: !777, size: 8, offset: 576)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1112, file: !528, line: 558, baseType: !777, size: 8, offset: 584)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1112, file: !528, line: 559, baseType: !777, size: 8, offset: 592)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1112, file: !528, line: 560, baseType: !777, size: 8, offset: 600)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1112, file: !528, line: 566, baseType: !1040, size: 64, offset: 640)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !989, file: !528, line: 752, baseType: !1122, size: 384)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !528, line: 571, size: 384, elements: !1123)
!1123 = !{!1124, !1125}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1122, file: !528, line: 573, baseType: !1053, size: 320)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1122, file: !528, line: 577, baseType: !657, size: 64, offset: 320)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !989, file: !528, line: 753, baseType: !1127, size: 576)
!1127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !528, line: 600, size: 576, elements: !1128)
!1128 = !{!1129, !1130, !1131, !1134, !1143}
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1127, file: !528, line: 602, baseType: !1053, size: 320)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1127, file: !528, line: 605, baseType: !657, size: 64, offset: 320)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1127, file: !528, line: 609, baseType: !1132, size: 64, offset: 384)
!1132 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1133, line: 46, baseType: !711)
!1133 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1127, file: !528, line: 612, baseType: !1135, size: 64, offset: 448)
!1135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1136, size: 64)
!1136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !528, line: 581, size: 320, elements: !1137)
!1137 = !{!1138, !1139, !1140, !1141, !1142}
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1136, file: !528, line: 583, baseType: !132, size: 32)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1136, file: !528, line: 586, baseType: !657, size: 64, offset: 64)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1136, file: !528, line: 589, baseType: !657, size: 64, offset: 128)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1136, file: !528, line: 592, baseType: !657, size: 64, offset: 192)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1136, file: !528, line: 595, baseType: !657, size: 64, offset: 256)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1127, file: !528, line: 616, baseType: !977, size: 64, offset: 512)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !989, file: !528, line: 754, baseType: !1145, size: 512)
!1145 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !528, line: 622, size: 512, elements: !1146)
!1146 = !{!1147, !1148, !1149, !1150}
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1145, file: !528, line: 624, baseType: !1053, size: 320)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1145, file: !528, line: 628, baseType: !657, size: 64, offset: 320)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1145, file: !528, line: 632, baseType: !657, size: 64, offset: 384)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1145, file: !528, line: 636, baseType: !657, size: 64, offset: 448)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !989, file: !528, line: 755, baseType: !1152, size: 704)
!1152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !528, line: 642, size: 704, elements: !1153)
!1153 = !{!1154, !1155, !1156, !1157}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1152, file: !528, line: 644, baseType: !1145, size: 512)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1152, file: !528, line: 648, baseType: !657, size: 64, offset: 512)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1152, file: !528, line: 652, baseType: !657, size: 64, offset: 576)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1152, file: !528, line: 653, baseType: !657, size: 64, offset: 640)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !989, file: !528, line: 756, baseType: !1159, size: 448)
!1159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !528, line: 663, size: 448, elements: !1160)
!1160 = !{!1161, !1162, !1163}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1159, file: !528, line: 665, baseType: !1053, size: 320)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1159, file: !528, line: 668, baseType: !657, size: 64, offset: 320)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1159, file: !528, line: 673, baseType: !657, size: 64, offset: 384)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !989, file: !528, line: 757, baseType: !1165, size: 384)
!1165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !528, line: 694, size: 384, elements: !1166)
!1166 = !{!1167, !1168}
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1165, file: !528, line: 696, baseType: !1053, size: 320)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1165, file: !528, line: 699, baseType: !657, size: 64, offset: 320)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !989, file: !528, line: 758, baseType: !1170, size: 384)
!1170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !528, line: 681, size: 384, elements: !1171)
!1171 = !{!1172, !1173, !1174}
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1170, file: !528, line: 683, baseType: !992, size: 256)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1170, file: !528, line: 686, baseType: !657, size: 64, offset: 256)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1170, file: !528, line: 689, baseType: !657, size: 64, offset: 320)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !989, file: !528, line: 759, baseType: !1176, size: 384)
!1176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !528, line: 707, size: 384, elements: !1177)
!1177 = !{!1178, !1179, !1180}
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1176, file: !528, line: 709, baseType: !992, size: 256)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1176, file: !528, line: 712, baseType: !657, size: 64, offset: 256)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1176, file: !528, line: 712, baseType: !657, size: 64, offset: 320)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !989, file: !528, line: 760, baseType: !1182, size: 320)
!1182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !528, line: 718, size: 320, elements: !1183)
!1183 = !{!1184, !1185}
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1182, file: !528, line: 720, baseType: !992, size: 256)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1182, file: !528, line: 723, baseType: !657, size: 64, offset: 256)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !984, file: !528, line: 138, baseType: !983, size: 64, offset: 64)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !984, file: !528, line: 139, baseType: !983, size: 64, offset: 128)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !979, file: !528, line: 146, baseType: !982, size: 64, offset: 64)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !979, file: !528, line: 152, baseType: !977, size: 64, offset: 128)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !974, file: !341, line: 130, baseType: !835, size: 64)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !969, file: !341, line: 134, baseType: !650, size: 64, offset: 192)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !969, file: !341, line: 137, baseType: !657, size: 64, offset: 256)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !969, file: !341, line: 138, baseType: !785, size: 32, offset: 320)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !969, file: !341, line: 142, baseType: !5, size: 32, offset: 352)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !969, file: !341, line: 144, baseType: !754, size: 32, offset: 384)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !969, file: !341, line: 145, baseType: !754, size: 32, offset: 416)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !969, file: !341, line: 146, baseType: !1198, size: 64, offset: 448)
!1198 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !341, line: 119, baseType: !713)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !952, file: !341, line: 220, baseType: !955, size: 64, offset: 64)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !952, file: !341, line: 223, baseType: !650, size: 64, offset: 128)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !952, file: !341, line: 226, baseType: !1202, size: 64, offset: 192)
!1202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1203, size: 64)
!1203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !328, line: 100, size: 1216, elements: !1204)
!1204 = !{!1205, !1206, !1207, !1208, !1209, !1214, !1215, !1216, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1247, !1255, !1256}
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1203, file: !328, line: 102, baseType: !754, size: 32)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1203, file: !328, line: 105, baseType: !5, size: 32, offset: 32)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1203, file: !328, line: 108, baseType: !951, size: 64, offset: 64)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1203, file: !328, line: 111, baseType: !951, size: 64, offset: 128)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1203, file: !328, line: 114, baseType: !1210, size: 64, offset: 192)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !328, line: 41, size: 64, elements: !1211)
!1211 = !{!1212, !1213}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1210, file: !328, line: 42, baseType: !327, size: 32)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1210, file: !328, line: 43, baseType: !5, size: 32, offset: 32)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1203, file: !328, line: 117, baseType: !5, size: 32, offset: 256)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1203, file: !328, line: 120, baseType: !5, size: 32, offset: 288)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1203, file: !328, line: 123, baseType: !1217, size: 64, offset: 320)
!1217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1218, size: 64)
!1218 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !328, line: 87, baseType: !1219)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !328, line: 87, size: 128, elements: !1220)
!1220 = !{!1221}
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1219, file: !328, line: 87, baseType: !1222, size: 128)
!1222 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !328, line: 85, baseType: !1223)
!1223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !328, line: 85, size: 128, elements: !1224)
!1224 = !{!1225, !1226, !1227}
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1223, file: !328, line: 85, baseType: !5, size: 32)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1223, file: !328, line: 85, baseType: !5, size: 32, offset: 32)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1223, file: !328, line: 85, baseType: !1228, size: 64, offset: 64)
!1228 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1229, size: 64, elements: !758)
!1229 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !328, line: 84, baseType: !1202)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1203, file: !328, line: 126, baseType: !1202, size: 64, offset: 384)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1203, file: !328, line: 129, baseType: !1202, size: 64, offset: 448)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1203, file: !328, line: 132, baseType: !650, size: 64, offset: 512)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1203, file: !328, line: 139, baseType: !657, size: 64, offset: 576)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1203, file: !328, line: 143, baseType: !706, size: 128, offset: 640)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1203, file: !328, line: 146, baseType: !706, size: 128, offset: 768)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1203, file: !328, line: 148, baseType: !777, size: 8, offset: 896)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1203, file: !328, line: 149, baseType: !777, size: 8, offset: 904)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1203, file: !328, line: 153, baseType: !336, size: 32, offset: 928)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1203, file: !328, line: 156, baseType: !1240, size: 64, offset: 960)
!1240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1241, size: 64)
!1241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !328, line: 48, size: 320, elements: !1242)
!1242 = !{!1243, !1244, !1245, !1246}
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1241, file: !328, line: 50, baseType: !987, size: 64)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1241, file: !328, line: 59, baseType: !706, size: 128, offset: 64)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1241, file: !328, line: 64, baseType: !777, size: 8, offset: 192)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1241, file: !328, line: 67, baseType: !1240, size: 64, offset: 256)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1203, file: !328, line: 159, baseType: !1248, size: 64, offset: 1024)
!1248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1249, size: 64)
!1249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !328, line: 72, size: 256, elements: !1250)
!1250 = !{!1251, !1252, !1253, !1254}
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1249, file: !328, line: 74, baseType: !968, size: 64)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1249, file: !328, line: 77, baseType: !1248, size: 64, offset: 64)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1249, file: !328, line: 78, baseType: !1248, size: 64, offset: 128)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1249, file: !328, line: 81, baseType: !1248, size: 64, offset: 192)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1203, file: !328, line: 162, baseType: !777, size: 8, offset: 1088)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1203, file: !328, line: 166, baseType: !657, size: 64, offset: 1152)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !952, file: !341, line: 229, baseType: !1258, size: 128, offset: 256)
!1258 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1259, size: 128, elements: !905)
!1259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1260, size: 64)
!1260 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !341, line: 229, flags: DIFlagFwdDecl)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !952, file: !341, line: 232, baseType: !951, size: 64, offset: 384)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !952, file: !341, line: 233, baseType: !951, size: 64, offset: 448)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !952, file: !341, line: 238, baseType: !1264, size: 64, offset: 512)
!1264 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !341, line: 235, size: 64, elements: !1265)
!1265 = !{!1266, !1272}
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1264, file: !341, line: 236, baseType: !1267, size: 64)
!1267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !341, line: 273, size: 128, elements: !1269)
!1269 = !{!1270, !1271}
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1268, file: !341, line: 275, baseType: !977, size: 64)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1268, file: !341, line: 278, baseType: !977, size: 64, offset: 64)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1264, file: !341, line: 237, baseType: !1273, size: 64)
!1273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1274, size: 64)
!1274 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !341, line: 259, size: 320, elements: !1275)
!1275 = !{!1276, !1277, !1278, !1279, !1280}
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1274, file: !341, line: 261, baseType: !835, size: 64)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1274, file: !341, line: 262, baseType: !835, size: 64, offset: 64)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1274, file: !341, line: 266, baseType: !835, size: 64, offset: 128)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1274, file: !341, line: 267, baseType: !835, size: 64, offset: 192)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1274, file: !341, line: 270, baseType: !754, size: 32, offset: 256)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !952, file: !341, line: 241, baseType: !1198, size: 64, offset: 576)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !952, file: !341, line: 244, baseType: !754, size: 32, offset: 640)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !952, file: !341, line: 247, baseType: !754, size: 32, offset: 672)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !952, file: !341, line: 250, baseType: !754, size: 32, offset: 704)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !952, file: !341, line: 253, baseType: !754, size: 32, offset: 736)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !952, file: !341, line: 256, baseType: !754, size: 32, offset: 768)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !856, file: !838, line: 179, baseType: !1288, size: 64)
!1288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1289, size: 64)
!1289 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !838, line: 150, baseType: !1290)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !838, line: 142, size: 320, elements: !1291)
!1291 = !{!1292, !1293, !1294, !1295, !1298, !1299}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1290, file: !838, line: 144, baseType: !657, size: 64)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1290, file: !838, line: 145, baseType: !835, size: 64, offset: 64)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1290, file: !838, line: 146, baseType: !835, size: 64, offset: 128)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1290, file: !838, line: 147, baseType: !1296, size: 32, offset: 192)
!1296 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1297, line: 31, baseType: !754)
!1297 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1290, file: !838, line: 148, baseType: !5, size: 32, offset: 224)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1290, file: !838, line: 149, baseType: !777, size: 8, offset: 256)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !856, file: !838, line: 180, baseType: !1301, size: 64)
!1301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1302, size: 64)
!1302 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !838, line: 162, baseType: !1303)
!1303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !838, line: 159, size: 128, elements: !1304)
!1304 = !{!1305, !1306}
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1303, file: !838, line: 160, baseType: !657, size: 64)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1303, file: !838, line: 161, baseType: !713, size: 64, offset: 64)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !856, file: !838, line: 181, baseType: !1308, size: 64)
!1308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1309, size: 64)
!1309 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !838, line: 181, flags: DIFlagFwdDecl)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !851, file: !838, line: 317, baseType: !1311, size: 64)
!1311 = !DICompositeType(tag: DW_TAG_array_type, baseType: !713, size: 64, elements: !758)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !851, file: !838, line: 318, baseType: !1313, size: 320)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !838, line: 188, size: 320, elements: !1314)
!1314 = !{!1315, !1317, !1340}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1313, file: !838, line: 190, baseType: !1316, size: 192)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !855, size: 192, elements: !731)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1313, file: !838, line: 193, baseType: !1318, size: 64, offset: 192)
!1318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1319, size: 64)
!1319 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !838, line: 206, size: 320, elements: !1320)
!1320 = !{!1321, !1325, !1326, !1327, !1339}
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1319, file: !838, line: 208, baseType: !1322, size: 64)
!1322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1323, size: 64)
!1323 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !658, line: 62, baseType: !1324)
!1324 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !658, line: 61, flags: DIFlagFwdDecl)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1319, file: !838, line: 211, baseType: !5, size: 32, offset: 64)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1319, file: !838, line: 214, baseType: !713, size: 64, offset: 128)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1319, file: !838, line: 224, baseType: !1328, size: 64, offset: 192)
!1328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1329, size: 64)
!1329 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !838, line: 202, baseType: !1330)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !838, line: 202, size: 128, elements: !1331)
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1330, file: !838, line: 202, baseType: !1333, size: 128)
!1333 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !838, line: 200, baseType: !1334)
!1334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !838, line: 200, size: 128, elements: !1335)
!1335 = !{!1336, !1337, !1338}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1334, file: !838, line: 200, baseType: !5, size: 32)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1334, file: !838, line: 200, baseType: !5, size: 32, offset: 32)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1334, file: !838, line: 200, baseType: !871, size: 64, offset: 64)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1319, file: !838, line: 234, baseType: !1328, size: 64, offset: 256)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1313, file: !838, line: 197, baseType: !713, size: 64, offset: 256)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !851, file: !838, line: 319, baseType: !720, size: 256)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !851, file: !838, line: 320, baseType: !739, size: 192)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !660, file: !133, line: 3384, baseType: !1344, size: 1472)
!1344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !133, line: 3114, size: 1472, elements: !1345)
!1345 = !{!1346, !1367, !1368, !1369, !1370}
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1344, file: !133, line: 3115, baseType: !1347, size: 1216)
!1347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !133, line: 2984, size: 1216, elements: !1348)
!1348 = !{!1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366}
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1347, file: !133, line: 2985, baseType: !831, size: 960)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1347, file: !133, line: 2986, baseType: !657, size: 64, offset: 960)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1347, file: !133, line: 2987, baseType: !657, size: 64, offset: 1024)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1347, file: !133, line: 2988, baseType: !657, size: 64, offset: 1088)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1347, file: !133, line: 2991, baseType: !5, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1347, file: !133, line: 2992, baseType: !5, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1347, file: !133, line: 2993, baseType: !5, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1347, file: !133, line: 2994, baseType: !5, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1347, file: !133, line: 2995, baseType: !5, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1347, file: !133, line: 2996, baseType: !5, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1347, file: !133, line: 2998, baseType: !5, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1347, file: !133, line: 3000, baseType: !5, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1347, file: !133, line: 3002, baseType: !5, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1347, file: !133, line: 3003, baseType: !5, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1347, file: !133, line: 3004, baseType: !5, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1347, file: !133, line: 3005, baseType: !5, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1347, file: !133, line: 3007, baseType: !5, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1347, file: !133, line: 3010, baseType: !5, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1344, file: !133, line: 3117, baseType: !657, size: 64, offset: 1216)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1344, file: !133, line: 3119, baseType: !657, size: 64, offset: 1280)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1344, file: !133, line: 3121, baseType: !657, size: 64, offset: 1344)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1344, file: !133, line: 3123, baseType: !657, size: 64, offset: 1408)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !660, file: !133, line: 3385, baseType: !1372, size: 1088)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !133, line: 2874, size: 1088, elements: !1373)
!1373 = !{!1374, !1375, !1376}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1372, file: !133, line: 2875, baseType: !831, size: 960)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1372, file: !133, line: 2876, baseType: !835, size: 64, offset: 960)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1372, file: !133, line: 2877, baseType: !1377, size: 64, offset: 1024)
!1377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1378, size: 64)
!1378 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1379, line: 172, size: 128, elements: !1380)
!1379 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1380 = !{!1381, !1382, !1383, !1384, !1385, !1386, !1387}
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1378, file: !1379, line: 174, baseType: !5, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1378, file: !1379, line: 178, baseType: !5, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1378, file: !1379, line: 183, baseType: !5, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1378, file: !1379, line: 187, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1378, file: !1379, line: 192, baseType: !5, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1378, file: !1379, line: 195, baseType: !5, size: 32, offset: 32)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1378, file: !1379, line: 199, baseType: !657, size: 64, offset: 64)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !660, file: !133, line: 3386, baseType: !1347, size: 1216)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !660, file: !133, line: 3387, baseType: !1390, size: 1280)
!1390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !133, line: 3093, size: 1280, elements: !1391)
!1391 = !{!1392, !1393}
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1390, file: !133, line: 3094, baseType: !1347, size: 1216)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1390, file: !133, line: 3095, baseType: !1377, size: 64, offset: 1216)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !660, file: !133, line: 3388, baseType: !1395, size: 1216)
!1395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !133, line: 2824, size: 1216, elements: !1396)
!1396 = !{!1397, !1398, !1399, !1400, !1401, !1402}
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1395, file: !133, line: 2825, baseType: !793, size: 896)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1395, file: !133, line: 2827, baseType: !657, size: 64, offset: 896)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1395, file: !133, line: 2828, baseType: !657, size: 64, offset: 960)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1395, file: !133, line: 2829, baseType: !657, size: 64, offset: 1024)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1395, file: !133, line: 2830, baseType: !657, size: 64, offset: 1088)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1395, file: !133, line: 2831, baseType: !657, size: 64, offset: 1152)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !660, file: !133, line: 3389, baseType: !1404, size: 1024)
!1404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !133, line: 2850, size: 1024, elements: !1405)
!1405 = !{!1406, !1407, !1408}
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1404, file: !133, line: 2851, baseType: !831, size: 960)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1404, file: !133, line: 2852, baseType: !754, size: 32, offset: 960)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1404, file: !133, line: 2853, baseType: !754, size: 32, offset: 992)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !660, file: !133, line: 3390, baseType: !1410, size: 1024)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !133, line: 2857, size: 1024, elements: !1411)
!1411 = !{!1412, !1413}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1410, file: !133, line: 2858, baseType: !831, size: 960)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1410, file: !133, line: 2859, baseType: !1377, size: 64, offset: 960)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !660, file: !133, line: 3391, baseType: !1415, size: 960)
!1415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !133, line: 2862, size: 960, elements: !1416)
!1416 = !{!1417}
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1415, file: !133, line: 2863, baseType: !831, size: 960)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !660, file: !133, line: 3392, baseType: !1419, size: 1472)
!1419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !133, line: 3304, size: 1472, elements: !1420)
!1420 = !{!1421}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1419, file: !133, line: 3305, baseType: !1344, size: 1472)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !660, file: !133, line: 3393, baseType: !1423, size: 1792)
!1423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !133, line: 3248, size: 1792, elements: !1424)
!1424 = !{!1425, !1426, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664}
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1423, file: !133, line: 3249, baseType: !1344, size: 1472)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1423, file: !133, line: 3251, baseType: !1427, size: 64, offset: 1472)
!1427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1428, size: 64)
!1428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1429, line: 463, size: 1152, elements: !1430)
!1429 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1430 = !{!1431, !1434, !1465, !1466, !1580, !1588, !1589, !1590, !1591, !1592, !1593, !1617, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643}
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1428, file: !1429, line: 464, baseType: !1432, size: 64)
!1432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1433, size: 64)
!1433 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1429, line: 464, flags: DIFlagFwdDecl)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1428, file: !1429, line: 467, baseType: !1435, size: 64, offset: 64)
!1435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1436, size: 64)
!1436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !341, line: 374, size: 640, elements: !1437)
!1437 = !{!1438, !1440, !1441, !1454, !1455, !1456, !1457, !1458, !1459, !1461, !1463, !1464}
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1436, file: !341, line: 377, baseType: !1439, size: 64)
!1439 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !658, line: 111, baseType: !951)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1436, file: !341, line: 378, baseType: !1439, size: 64, offset: 64)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1436, file: !341, line: 381, baseType: !1442, size: 64, offset: 128)
!1442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1443, size: 64)
!1443 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !341, line: 282, baseType: !1444)
!1444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !341, line: 282, size: 128, elements: !1445)
!1445 = !{!1446}
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1444, file: !341, line: 282, baseType: !1447, size: 128)
!1447 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !341, line: 281, baseType: !1448)
!1448 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !341, line: 281, size: 128, elements: !1449)
!1449 = !{!1450, !1451, !1452}
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1448, file: !341, line: 281, baseType: !5, size: 32)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1448, file: !341, line: 281, baseType: !5, size: 32, offset: 32)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1448, file: !341, line: 281, baseType: !1453, size: 64, offset: 64)
!1453 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1439, size: 64, elements: !758)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1436, file: !341, line: 384, baseType: !754, size: 32, offset: 192)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1436, file: !341, line: 387, baseType: !754, size: 32, offset: 224)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1436, file: !341, line: 390, baseType: !754, size: 32, offset: 256)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1436, file: !341, line: 394, baseType: !1442, size: 64, offset: 320)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1436, file: !341, line: 396, baseType: !340, size: 32, offset: 384)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1436, file: !341, line: 399, baseType: !1460, size: 64, offset: 416)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 64, elements: !905)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1436, file: !341, line: 402, baseType: !1462, size: 64, offset: 480)
!1462 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 64, elements: !905)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1436, file: !341, line: 406, baseType: !754, size: 32, offset: 544)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1436, file: !341, line: 409, baseType: !754, size: 32, offset: 576)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1428, file: !1429, line: 470, baseType: !978, size: 64, offset: 128)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1428, file: !1429, line: 473, baseType: !1467, size: 64, offset: 192)
!1467 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1468, size: 64)
!1468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1379, line: 39, size: 1152, elements: !1469)
!1469 = !{!1470, !1519, !1532, !1544, !1545, !1557, !1558, !1562, !1563, !1564, !1565, !1566}
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1468, file: !1379, line: 41, baseType: !1471, size: 64)
!1471 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !389, line: 144, baseType: !1472)
!1472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1473, size: 64)
!1473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !389, line: 100, size: 896, elements: !1474)
!1474 = !{!1475, !1483, !1488, !1493, !1495, !1496, !1497, !1498, !1499, !1500, !1505, !1507, !1508, !1513, !1518}
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1473, file: !389, line: 102, baseType: !1476, size: 64)
!1476 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !389, line: 52, baseType: !1477)
!1477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1478, size: 64)
!1478 = !DISubroutineType(types: !1479)
!1479 = !{!1480, !1481}
!1480 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !389, line: 47, baseType: !5)
!1481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1482, size: 64)
!1482 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1473, file: !389, line: 105, baseType: !1484, size: 64, offset: 64)
!1484 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !389, line: 59, baseType: !1485)
!1485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1486, size: 64)
!1486 = !DISubroutineType(types: !1487)
!1487 = !{!754, !1481, !1481}
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1473, file: !389, line: 108, baseType: !1489, size: 64, offset: 128)
!1489 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !389, line: 63, baseType: !1490)
!1490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1491, size: 64)
!1491 = !DISubroutineType(types: !1492)
!1492 = !{null, !650}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1473, file: !389, line: 111, baseType: !1494, size: 64, offset: 192)
!1494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !650, size: 64)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1473, file: !389, line: 114, baseType: !1132, size: 64, offset: 256)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1473, file: !389, line: 117, baseType: !1132, size: 64, offset: 320)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1473, file: !389, line: 120, baseType: !1132, size: 64, offset: 384)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1473, file: !389, line: 124, baseType: !5, size: 32, offset: 448)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1473, file: !389, line: 128, baseType: !5, size: 32, offset: 480)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1473, file: !389, line: 131, baseType: !1501, size: 64, offset: 512)
!1501 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !389, line: 75, baseType: !1502)
!1502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1503, size: 64)
!1503 = !DISubroutineType(types: !1504)
!1504 = !{!650, !1132, !1132}
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1473, file: !389, line: 132, baseType: !1506, size: 64, offset: 576)
!1506 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !389, line: 78, baseType: !1490)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1473, file: !389, line: 135, baseType: !650, size: 64, offset: 640)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1473, file: !389, line: 136, baseType: !1509, size: 64, offset: 704)
!1509 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !389, line: 82, baseType: !1510)
!1510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1511, size: 64)
!1511 = !DISubroutineType(types: !1512)
!1512 = !{!650, !650, !1132, !1132}
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1473, file: !389, line: 137, baseType: !1514, size: 64, offset: 768)
!1514 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !389, line: 83, baseType: !1515)
!1515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1516, size: 64)
!1516 = !DISubroutineType(types: !1517)
!1517 = !{null, !650, !650}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1473, file: !389, line: 141, baseType: !5, size: 32, offset: 832)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1468, file: !1379, line: 48, baseType: !1520, size: 64, offset: 64)
!1520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1521, size: 64)
!1521 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !528, line: 35, baseType: !1522)
!1522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !528, line: 35, size: 128, elements: !1523)
!1523 = !{!1524}
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1522, file: !528, line: 35, baseType: !1525, size: 128)
!1525 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !528, line: 33, baseType: !1526)
!1526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !528, line: 33, size: 128, elements: !1527)
!1527 = !{!1528, !1529, !1530}
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1526, file: !528, line: 33, baseType: !5, size: 32)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1526, file: !528, line: 33, baseType: !5, size: 32, offset: 32)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1526, file: !528, line: 33, baseType: !1531, size: 64, offset: 64)
!1531 = !DICompositeType(tag: DW_TAG_array_type, baseType: !987, size: 64, elements: !758)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1468, file: !1379, line: 51, baseType: !1533, size: 64, offset: 128)
!1533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1534, size: 64)
!1534 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !133, line: 183, baseType: !1535)
!1535 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !133, line: 183, size: 128, elements: !1536)
!1536 = !{!1537}
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1535, file: !133, line: 183, baseType: !1538, size: 128)
!1538 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !133, line: 182, baseType: !1539)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !133, line: 182, size: 128, elements: !1540)
!1540 = !{!1541, !1542, !1543}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1539, file: !133, line: 182, baseType: !5, size: 32)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1539, file: !133, line: 182, baseType: !5, size: 32, offset: 32)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1539, file: !133, line: 182, baseType: !1040, size: 64, offset: 64)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1468, file: !1379, line: 54, baseType: !657, size: 64, offset: 192)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1468, file: !1379, line: 57, baseType: !1546, size: 128, offset: 256)
!1546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1547, line: 31, size: 128, elements: !1548)
!1547 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1548 = !{!1549, !1550, !1551, !1552, !1553, !1554, !1555}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1546, file: !1547, line: 35, baseType: !5, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1546, file: !1547, line: 39, baseType: !5, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1546, file: !1547, line: 42, baseType: !5, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1546, file: !1547, line: 46, baseType: !5, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1546, file: !1547, line: 50, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1546, file: !1547, line: 53, baseType: !5, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1546, file: !1547, line: 56, baseType: !1556, size: 64, offset: 64)
!1556 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !658, line: 47, baseType: !889)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1468, file: !1379, line: 60, baseType: !1546, size: 128, offset: 384)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1468, file: !1379, line: 64, baseType: !1559, size: 64, offset: 512)
!1559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1560, size: 64)
!1560 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1561, line: 33, flags: DIFlagFwdDecl)
!1561 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1468, file: !1379, line: 67, baseType: !657, size: 64, offset: 576)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1468, file: !1379, line: 73, baseType: !1471, size: 64, offset: 640)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1468, file: !1379, line: 77, baseType: !1556, size: 64, offset: 704)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1468, file: !1379, line: 80, baseType: !5, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1468, file: !1379, line: 82, baseType: !1567, size: 320, offset: 832)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !576, line: 62, size: 320, elements: !1568)
!1568 = !{!1569, !1575, !1576, !1577, !1578, !1579}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1567, file: !576, line: 63, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1571, size: 64)
!1571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !576, line: 56, size: 128, elements: !1572)
!1572 = !{!1573, !1574}
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1571, file: !576, line: 57, baseType: !1570, size: 64)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1571, file: !576, line: 58, baseType: !756, size: 8, offset: 64)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1567, file: !576, line: 64, baseType: !5, size: 32, offset: 64)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1567, file: !576, line: 66, baseType: !5, size: 32, offset: 96)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1567, file: !576, line: 68, baseType: !777, size: 8, offset: 128)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1567, file: !576, line: 70, baseType: !1016, size: 64, offset: 192)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1567, file: !576, line: 71, baseType: !1023, size: 64, offset: 256)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1428, file: !1429, line: 476, baseType: !1581, size: 64, offset: 256)
!1581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1582, size: 64)
!1582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !328, line: 187, size: 256, elements: !1583)
!1583 = !{!1584, !1585, !1586, !1587}
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1582, file: !328, line: 189, baseType: !754, size: 32)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1582, file: !328, line: 192, baseType: !1217, size: 64, offset: 64)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1582, file: !328, line: 197, baseType: !1471, size: 64, offset: 128)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1582, file: !328, line: 200, baseType: !1202, size: 64, offset: 192)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1428, file: !1429, line: 479, baseType: !1471, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1428, file: !1429, line: 484, baseType: !657, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1428, file: !1429, line: 488, baseType: !657, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1428, file: !1429, line: 493, baseType: !657, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1428, file: !1429, line: 496, baseType: !657, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1428, file: !1429, line: 501, baseType: !1594, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1595, size: 64)
!1595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !352, line: 2355, size: 576, elements: !1596)
!1596 = !{!1597, !1600, !1601, !1602, !1603, !1605, !1606, !1611, !1612, !1613, !1614, !1615, !1616}
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1595, file: !352, line: 2356, baseType: !1598, size: 64)
!1598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1599, size: 64)
!1599 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !352, line: 2356, flags: DIFlagFwdDecl)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1595, file: !352, line: 2357, baseType: !861, size: 64, offset: 64)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1595, file: !352, line: 2358, baseType: !754, size: 32, offset: 128)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1595, file: !352, line: 2359, baseType: !754, size: 32, offset: 160)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1595, file: !352, line: 2360, baseType: !1604, size: 128, offset: 192)
!1604 = !DICompositeType(tag: DW_TAG_array_type, baseType: !754, size: 128, elements: !930)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1595, file: !352, line: 2364, baseType: !754, size: 32, offset: 320)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1595, file: !352, line: 2367, baseType: !1607, size: 128, offset: 384)
!1607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !352, line: 2349, size: 128, elements: !1608)
!1608 = !{!1609, !1610}
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1607, file: !352, line: 2351, baseType: !835, size: 64)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1607, file: !352, line: 2352, baseType: !713, size: 64, offset: 64)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1595, file: !352, line: 2371, baseType: !351, size: 32, offset: 512)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1595, file: !352, line: 2374, baseType: !5, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1595, file: !352, line: 2377, baseType: !5, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1595, file: !352, line: 2381, baseType: !5, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1595, file: !352, line: 2392, baseType: !5, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1595, file: !352, line: 2396, baseType: !5, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1428, file: !1429, line: 504, baseType: !1618, size: 64, offset: 704)
!1618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1619, size: 64)
!1619 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1429, line: 504, flags: DIFlagFwdDecl)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1428, file: !1429, line: 507, baseType: !1471, size: 64, offset: 768)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1428, file: !1429, line: 510, baseType: !754, size: 32, offset: 832)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1428, file: !1429, line: 513, baseType: !754, size: 32, offset: 864)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1428, file: !1429, line: 516, baseType: !785, size: 32, offset: 896)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1428, file: !1429, line: 519, baseType: !785, size: 32, offset: 928)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1428, file: !1429, line: 522, baseType: !5, size: 32, offset: 960)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1428, file: !1429, line: 523, baseType: !5, size: 32, offset: 992)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1428, file: !1429, line: 528, baseType: !861, size: 64, offset: 1024)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1428, file: !1429, line: 535, baseType: !5, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1428, file: !1429, line: 539, baseType: !5, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1428, file: !1429, line: 543, baseType: !5, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1428, file: !1429, line: 546, baseType: !5, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1428, file: !1429, line: 550, baseType: !5, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1428, file: !1429, line: 554, baseType: !5, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1428, file: !1429, line: 559, baseType: !5, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1428, file: !1429, line: 562, baseType: !5, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1428, file: !1429, line: 571, baseType: !5, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1428, file: !1429, line: 573, baseType: !5, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1428, file: !1429, line: 574, baseType: !5, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1428, file: !1429, line: 581, baseType: !5, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1428, file: !1429, line: 585, baseType: !5, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1428, file: !1429, line: 588, baseType: !5, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1428, file: !1429, line: 592, baseType: !5, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1428, file: !1429, line: 598, baseType: !5, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1423, file: !133, line: 3254, baseType: !657, size: 64, offset: 1536)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1423, file: !133, line: 3257, baseType: !657, size: 64, offset: 1600)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1423, file: !133, line: 3258, baseType: !657, size: 64, offset: 1664)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1423, file: !133, line: 3264, baseType: !5, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1423, file: !133, line: 3265, baseType: !5, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1423, file: !133, line: 3267, baseType: !5, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1423, file: !133, line: 3268, baseType: !5, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1423, file: !133, line: 3269, baseType: !5, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1423, file: !133, line: 3271, baseType: !5, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1423, file: !133, line: 3272, baseType: !5, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1423, file: !133, line: 3273, baseType: !5, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1423, file: !133, line: 3274, baseType: !5, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1423, file: !133, line: 3275, baseType: !5, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1423, file: !133, line: 3276, baseType: !5, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1423, file: !133, line: 3277, baseType: !5, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1423, file: !133, line: 3279, baseType: !5, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1423, file: !133, line: 3280, baseType: !5, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1423, file: !133, line: 3281, baseType: !5, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1423, file: !133, line: 3282, baseType: !5, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1423, file: !133, line: 3283, baseType: !5, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1423, file: !133, line: 3284, baseType: !5, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !660, file: !133, line: 3394, baseType: !1666, size: 1344)
!1666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !133, line: 2279, size: 1344, elements: !1667)
!1667 = !{!1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1666, file: !133, line: 2280, baseType: !696, size: 192)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1666, file: !133, line: 2281, baseType: !657, size: 64, offset: 192)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1666, file: !133, line: 2282, baseType: !657, size: 64, offset: 256)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1666, file: !133, line: 2283, baseType: !657, size: 64, offset: 320)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1666, file: !133, line: 2284, baseType: !657, size: 64, offset: 384)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1666, file: !133, line: 2285, baseType: !5, size: 32, offset: 448)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1666, file: !133, line: 2287, baseType: !5, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1666, file: !133, line: 2288, baseType: !5, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1666, file: !133, line: 2289, baseType: !5, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1666, file: !133, line: 2290, baseType: !5, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1666, file: !133, line: 2291, baseType: !5, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1666, file: !133, line: 2292, baseType: !5, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1666, file: !133, line: 2294, baseType: !5, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1666, file: !133, line: 2296, baseType: !5, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1666, file: !133, line: 2297, baseType: !5, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1666, file: !133, line: 2298, baseType: !5, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1666, file: !133, line: 2299, baseType: !5, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1666, file: !133, line: 2300, baseType: !5, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1666, file: !133, line: 2301, baseType: !5, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1666, file: !133, line: 2302, baseType: !5, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1666, file: !133, line: 2303, baseType: !5, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1666, file: !133, line: 2305, baseType: !5, size: 32, offset: 512)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1666, file: !133, line: 2306, baseType: !1296, size: 32, offset: 544)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1666, file: !133, line: 2307, baseType: !657, size: 64, offset: 576)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1666, file: !133, line: 2308, baseType: !657, size: 64, offset: 640)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1666, file: !133, line: 2314, baseType: !1694, size: 64, offset: 704)
!1694 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !133, line: 2309, size: 64, elements: !1695)
!1695 = !{!1696, !1697, !1698}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1694, file: !133, line: 2310, baseType: !754, size: 32)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1694, file: !133, line: 2311, baseType: !861, size: 64)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1694, file: !133, line: 2312, baseType: !1699, size: 64)
!1699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1700, size: 64)
!1700 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !133, line: 2277, flags: DIFlagFwdDecl)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1666, file: !133, line: 2315, baseType: !657, size: 64, offset: 768)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1666, file: !133, line: 2316, baseType: !657, size: 64, offset: 832)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1666, file: !133, line: 2317, baseType: !657, size: 64, offset: 896)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1666, file: !133, line: 2318, baseType: !657, size: 64, offset: 960)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1666, file: !133, line: 2319, baseType: !657, size: 64, offset: 1024)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1666, file: !133, line: 2320, baseType: !657, size: 64, offset: 1088)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1666, file: !133, line: 2321, baseType: !657, size: 64, offset: 1152)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1666, file: !133, line: 2322, baseType: !657, size: 64, offset: 1216)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1666, file: !133, line: 2324, baseType: !1710, size: 64, offset: 1280)
!1710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1711, size: 64)
!1711 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !133, line: 2324, flags: DIFlagFwdDecl)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !660, file: !133, line: 3395, baseType: !1713, size: 320)
!1713 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !133, line: 1469, size: 320, elements: !1714)
!1714 = !{!1715, !1716, !1717}
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1713, file: !133, line: 1470, baseType: !696, size: 192)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1713, file: !133, line: 1471, baseType: !657, size: 64, offset: 192)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1713, file: !133, line: 1472, baseType: !657, size: 64, offset: 256)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !660, file: !133, line: 3396, baseType: !1719, size: 320)
!1719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !133, line: 1482, size: 320, elements: !1720)
!1720 = !{!1721, !1722, !1723}
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1719, file: !133, line: 1483, baseType: !696, size: 192)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1719, file: !133, line: 1484, baseType: !754, size: 32, offset: 192)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1719, file: !133, line: 1485, baseType: !1040, size: 64, offset: 256)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !660, file: !133, line: 3397, baseType: !1725, size: 384)
!1725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !133, line: 1829, size: 384, elements: !1726)
!1726 = !{!1727, !1728, !1729, !1730}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1725, file: !133, line: 1830, baseType: !696, size: 192)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1725, file: !133, line: 1831, baseType: !785, size: 32, offset: 192)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1725, file: !133, line: 1832, baseType: !657, size: 64, offset: 256)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1725, file: !133, line: 1835, baseType: !1040, size: 64, offset: 320)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !660, file: !133, line: 3398, baseType: !1732, size: 704)
!1732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !133, line: 1898, size: 704, elements: !1733)
!1733 = !{!1734, !1735, !1736, !1737, !1738, !1743}
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1732, file: !133, line: 1899, baseType: !696, size: 192)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1732, file: !133, line: 1902, baseType: !657, size: 64, offset: 192)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1732, file: !133, line: 1905, baseType: !987, size: 64, offset: 256)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1732, file: !133, line: 1908, baseType: !5, size: 32, offset: 320)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1732, file: !133, line: 1911, baseType: !1739, size: 64, offset: 384)
!1739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1740, size: 64)
!1740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1379, line: 117, size: 128, elements: !1741)
!1741 = !{!1742}
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1740, file: !1379, line: 120, baseType: !1546, size: 128)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1732, file: !133, line: 1914, baseType: !1028, size: 256, offset: 448)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !660, file: !133, line: 3399, baseType: !1745, size: 704)
!1745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !133, line: 2008, size: 704, elements: !1746)
!1746 = !{!1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757}
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1745, file: !133, line: 2009, baseType: !696, size: 192)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1745, file: !133, line: 2011, baseType: !5, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1745, file: !133, line: 2012, baseType: !5, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1745, file: !133, line: 2014, baseType: !785, size: 32, offset: 224)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1745, file: !133, line: 2016, baseType: !657, size: 64, offset: 256)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1745, file: !133, line: 2017, baseType: !1533, size: 64, offset: 320)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1745, file: !133, line: 2019, baseType: !657, size: 64, offset: 384)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1745, file: !133, line: 2020, baseType: !657, size: 64, offset: 448)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1745, file: !133, line: 2021, baseType: !657, size: 64, offset: 512)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1745, file: !133, line: 2022, baseType: !657, size: 64, offset: 576)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1745, file: !133, line: 2023, baseType: !657, size: 64, offset: 640)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !660, file: !133, line: 3400, baseType: !1759, size: 832)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !133, line: 2430, size: 832, elements: !1760)
!1760 = !{!1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1759, file: !133, line: 2431, baseType: !696, size: 192)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1759, file: !133, line: 2433, baseType: !657, size: 64, offset: 192)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1759, file: !133, line: 2434, baseType: !657, size: 64, offset: 256)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1759, file: !133, line: 2435, baseType: !657, size: 64, offset: 320)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1759, file: !133, line: 2436, baseType: !657, size: 64, offset: 384)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1759, file: !133, line: 2437, baseType: !1533, size: 64, offset: 448)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1759, file: !133, line: 2438, baseType: !657, size: 64, offset: 512)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1759, file: !133, line: 2440, baseType: !657, size: 64, offset: 576)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1759, file: !133, line: 2441, baseType: !657, size: 64, offset: 640)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1759, file: !133, line: 2443, baseType: !1771, size: 128, offset: 704)
!1771 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !133, line: 182, baseType: !1772)
!1772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !133, line: 182, size: 128, elements: !1773)
!1773 = !{!1774}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1772, file: !133, line: 182, baseType: !1538, size: 128)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !660, file: !133, line: 3401, baseType: !1776, size: 320)
!1776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !133, line: 3327, size: 320, elements: !1777)
!1777 = !{!1778, !1779, !1786}
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1776, file: !133, line: 3329, baseType: !696, size: 192)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1776, file: !133, line: 3330, baseType: !1780, size: 64, offset: 192)
!1780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1781, size: 64)
!1781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !133, line: 3320, size: 192, elements: !1782)
!1782 = !{!1783, !1784, !1785}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1781, file: !133, line: 3322, baseType: !1780, size: 64)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1781, file: !133, line: 3323, baseType: !1780, size: 64, offset: 64)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1781, file: !133, line: 3324, baseType: !657, size: 64, offset: 128)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1776, file: !133, line: 3331, baseType: !1780, size: 64, offset: 256)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !660, file: !133, line: 3402, baseType: !1788, size: 256)
!1788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !133, line: 1540, size: 256, elements: !1789)
!1789 = !{!1790, !1791}
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1788, file: !133, line: 1541, baseType: !696, size: 192)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1788, file: !133, line: 1542, baseType: !1792, size: 64, offset: 192)
!1792 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1793, size: 64)
!1793 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !133, line: 1538, baseType: !1794)
!1794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !133, line: 1538, size: 192, elements: !1795)
!1795 = !{!1796}
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1794, file: !133, line: 1538, baseType: !1797, size: 192)
!1797 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !133, line: 1537, baseType: !1798)
!1798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !133, line: 1537, size: 192, elements: !1799)
!1799 = !{!1800, !1801, !1802}
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1798, file: !133, line: 1537, baseType: !5, size: 32)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1798, file: !133, line: 1537, baseType: !5, size: 32, offset: 32)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1798, file: !133, line: 1537, baseType: !1803, size: 128, offset: 64)
!1803 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1804, size: 128, elements: !758)
!1804 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !133, line: 1535, baseType: !1805)
!1805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !133, line: 1532, size: 128, elements: !1806)
!1806 = !{!1807, !1808}
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1805, file: !133, line: 1533, baseType: !657, size: 64)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1805, file: !133, line: 1534, baseType: !657, size: 64, offset: 64)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !660, file: !133, line: 3403, baseType: !1810, size: 512)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !133, line: 1938, size: 512, elements: !1811)
!1811 = !{!1812, !1813, !1814, !1815, !1821, !1822, !1823}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1810, file: !133, line: 1939, baseType: !696, size: 192)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1810, file: !133, line: 1940, baseType: !785, size: 32, offset: 192)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1810, file: !133, line: 1941, baseType: !356, size: 32, offset: 224)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1810, file: !133, line: 1946, baseType: !1816, size: 32, offset: 256)
!1816 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !133, line: 1942, size: 32, elements: !1817)
!1817 = !{!1818, !1819, !1820}
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1816, file: !133, line: 1943, baseType: !374, size: 32)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1816, file: !133, line: 1944, baseType: !381, size: 32)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1816, file: !133, line: 1945, baseType: !132, size: 32)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1810, file: !133, line: 1950, baseType: !977, size: 64, offset: 320)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1810, file: !133, line: 1951, baseType: !977, size: 64, offset: 384)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1810, file: !133, line: 1953, baseType: !1040, size: 64, offset: 448)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !660, file: !133, line: 3404, baseType: !1825, size: 1664)
!1825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !133, line: 3337, size: 1664, elements: !1826)
!1826 = !{!1827, !1828}
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1825, file: !133, line: 3338, baseType: !696, size: 192)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1825, file: !133, line: 3341, baseType: !1829, size: 1472, offset: 192)
!1829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1830, line: 410, size: 1472, elements: !1831)
!1830 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1831 = !{!1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995}
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1829, file: !1830, line: 412, baseType: !754, size: 32)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1829, file: !1830, line: 413, baseType: !754, size: 32, offset: 32)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1829, file: !1830, line: 414, baseType: !754, size: 32, offset: 64)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1829, file: !1830, line: 415, baseType: !754, size: 32, offset: 96)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1829, file: !1830, line: 416, baseType: !754, size: 32, offset: 128)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1829, file: !1830, line: 417, baseType: !754, size: 32, offset: 160)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1829, file: !1830, line: 418, baseType: !777, size: 8, offset: 192)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1829, file: !1830, line: 419, baseType: !777, size: 8, offset: 200)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1829, file: !1830, line: 420, baseType: !1841, size: 8, offset: 208)
!1841 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1829, file: !1830, line: 421, baseType: !1841, size: 8, offset: 216)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1829, file: !1830, line: 422, baseType: !1841, size: 8, offset: 224)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1829, file: !1830, line: 423, baseType: !1841, size: 8, offset: 232)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1829, file: !1830, line: 424, baseType: !1841, size: 8, offset: 240)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1829, file: !1830, line: 425, baseType: !1841, size: 8, offset: 248)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1829, file: !1830, line: 426, baseType: !1841, size: 8, offset: 256)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1829, file: !1830, line: 427, baseType: !1841, size: 8, offset: 264)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1829, file: !1830, line: 428, baseType: !1841, size: 8, offset: 272)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1829, file: !1830, line: 429, baseType: !1841, size: 8, offset: 280)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1829, file: !1830, line: 430, baseType: !1841, size: 8, offset: 288)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1829, file: !1830, line: 431, baseType: !1841, size: 8, offset: 296)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1829, file: !1830, line: 432, baseType: !1841, size: 8, offset: 304)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1829, file: !1830, line: 433, baseType: !1841, size: 8, offset: 312)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1829, file: !1830, line: 434, baseType: !1841, size: 8, offset: 320)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1829, file: !1830, line: 435, baseType: !1841, size: 8, offset: 328)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1829, file: !1830, line: 436, baseType: !1841, size: 8, offset: 336)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1829, file: !1830, line: 437, baseType: !1841, size: 8, offset: 344)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1829, file: !1830, line: 438, baseType: !1841, size: 8, offset: 352)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1829, file: !1830, line: 439, baseType: !1841, size: 8, offset: 360)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1829, file: !1830, line: 440, baseType: !1841, size: 8, offset: 368)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1829, file: !1830, line: 441, baseType: !1841, size: 8, offset: 376)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1829, file: !1830, line: 442, baseType: !1841, size: 8, offset: 384)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1829, file: !1830, line: 443, baseType: !1841, size: 8, offset: 392)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1829, file: !1830, line: 444, baseType: !1841, size: 8, offset: 400)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1829, file: !1830, line: 445, baseType: !1841, size: 8, offset: 408)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1829, file: !1830, line: 446, baseType: !1841, size: 8, offset: 416)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1829, file: !1830, line: 447, baseType: !1841, size: 8, offset: 424)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1829, file: !1830, line: 448, baseType: !1841, size: 8, offset: 432)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1829, file: !1830, line: 449, baseType: !1841, size: 8, offset: 440)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1829, file: !1830, line: 450, baseType: !1841, size: 8, offset: 448)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1829, file: !1830, line: 451, baseType: !1841, size: 8, offset: 456)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1829, file: !1830, line: 452, baseType: !1841, size: 8, offset: 464)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1829, file: !1830, line: 453, baseType: !1841, size: 8, offset: 472)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1829, file: !1830, line: 454, baseType: !1841, size: 8, offset: 480)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1829, file: !1830, line: 455, baseType: !1841, size: 8, offset: 488)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1829, file: !1830, line: 456, baseType: !1841, size: 8, offset: 496)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1829, file: !1830, line: 457, baseType: !1841, size: 8, offset: 504)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1829, file: !1830, line: 458, baseType: !1841, size: 8, offset: 512)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1829, file: !1830, line: 459, baseType: !1841, size: 8, offset: 520)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1829, file: !1830, line: 460, baseType: !1841, size: 8, offset: 528)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1829, file: !1830, line: 461, baseType: !1841, size: 8, offset: 536)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1829, file: !1830, line: 462, baseType: !1841, size: 8, offset: 544)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1829, file: !1830, line: 463, baseType: !1841, size: 8, offset: 552)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1829, file: !1830, line: 464, baseType: !1841, size: 8, offset: 560)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1829, file: !1830, line: 465, baseType: !1841, size: 8, offset: 568)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1829, file: !1830, line: 466, baseType: !1841, size: 8, offset: 576)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1829, file: !1830, line: 467, baseType: !1841, size: 8, offset: 584)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1829, file: !1830, line: 468, baseType: !1841, size: 8, offset: 592)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1829, file: !1830, line: 469, baseType: !1841, size: 8, offset: 600)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1829, file: !1830, line: 470, baseType: !1841, size: 8, offset: 608)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1829, file: !1830, line: 471, baseType: !1841, size: 8, offset: 616)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1829, file: !1830, line: 472, baseType: !1841, size: 8, offset: 624)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1829, file: !1830, line: 473, baseType: !1841, size: 8, offset: 632)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1829, file: !1830, line: 474, baseType: !1841, size: 8, offset: 640)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1829, file: !1830, line: 475, baseType: !1841, size: 8, offset: 648)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1829, file: !1830, line: 476, baseType: !1841, size: 8, offset: 656)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1829, file: !1830, line: 477, baseType: !1841, size: 8, offset: 664)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1829, file: !1830, line: 478, baseType: !1841, size: 8, offset: 672)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1829, file: !1830, line: 479, baseType: !1841, size: 8, offset: 680)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1829, file: !1830, line: 480, baseType: !1841, size: 8, offset: 688)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1829, file: !1830, line: 481, baseType: !1841, size: 8, offset: 696)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1829, file: !1830, line: 482, baseType: !1841, size: 8, offset: 704)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1829, file: !1830, line: 483, baseType: !1841, size: 8, offset: 712)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1829, file: !1830, line: 484, baseType: !1841, size: 8, offset: 720)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1829, file: !1830, line: 485, baseType: !1841, size: 8, offset: 728)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1829, file: !1830, line: 486, baseType: !1841, size: 8, offset: 736)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1829, file: !1830, line: 487, baseType: !1841, size: 8, offset: 744)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1829, file: !1830, line: 488, baseType: !1841, size: 8, offset: 752)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1829, file: !1830, line: 489, baseType: !1841, size: 8, offset: 760)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1829, file: !1830, line: 490, baseType: !1841, size: 8, offset: 768)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1829, file: !1830, line: 491, baseType: !1841, size: 8, offset: 776)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1829, file: !1830, line: 492, baseType: !1841, size: 8, offset: 784)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1829, file: !1830, line: 493, baseType: !1841, size: 8, offset: 792)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1829, file: !1830, line: 494, baseType: !1841, size: 8, offset: 800)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1829, file: !1830, line: 495, baseType: !1841, size: 8, offset: 808)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1829, file: !1830, line: 496, baseType: !1841, size: 8, offset: 816)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1829, file: !1830, line: 497, baseType: !1841, size: 8, offset: 824)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1829, file: !1830, line: 498, baseType: !1841, size: 8, offset: 832)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1829, file: !1830, line: 499, baseType: !1841, size: 8, offset: 840)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1829, file: !1830, line: 500, baseType: !1841, size: 8, offset: 848)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1829, file: !1830, line: 501, baseType: !1841, size: 8, offset: 856)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1829, file: !1830, line: 502, baseType: !1841, size: 8, offset: 864)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1829, file: !1830, line: 503, baseType: !1841, size: 8, offset: 872)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1829, file: !1830, line: 504, baseType: !1841, size: 8, offset: 880)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1829, file: !1830, line: 505, baseType: !1841, size: 8, offset: 888)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1829, file: !1830, line: 506, baseType: !1841, size: 8, offset: 896)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1829, file: !1830, line: 507, baseType: !1841, size: 8, offset: 904)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1829, file: !1830, line: 508, baseType: !1841, size: 8, offset: 912)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1829, file: !1830, line: 509, baseType: !1841, size: 8, offset: 920)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1829, file: !1830, line: 510, baseType: !1841, size: 8, offset: 928)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1829, file: !1830, line: 511, baseType: !1841, size: 8, offset: 936)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1829, file: !1830, line: 512, baseType: !1841, size: 8, offset: 944)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1829, file: !1830, line: 513, baseType: !1841, size: 8, offset: 952)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1829, file: !1830, line: 514, baseType: !1841, size: 8, offset: 960)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1829, file: !1830, line: 515, baseType: !1841, size: 8, offset: 968)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1829, file: !1830, line: 516, baseType: !1841, size: 8, offset: 976)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1829, file: !1830, line: 517, baseType: !1841, size: 8, offset: 984)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1829, file: !1830, line: 518, baseType: !1841, size: 8, offset: 992)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1829, file: !1830, line: 519, baseType: !1841, size: 8, offset: 1000)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1829, file: !1830, line: 520, baseType: !1841, size: 8, offset: 1008)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1829, file: !1830, line: 521, baseType: !1841, size: 8, offset: 1016)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1829, file: !1830, line: 522, baseType: !1841, size: 8, offset: 1024)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1829, file: !1830, line: 523, baseType: !1841, size: 8, offset: 1032)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1829, file: !1830, line: 524, baseType: !1841, size: 8, offset: 1040)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1829, file: !1830, line: 525, baseType: !1841, size: 8, offset: 1048)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1829, file: !1830, line: 526, baseType: !1841, size: 8, offset: 1056)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1829, file: !1830, line: 527, baseType: !1841, size: 8, offset: 1064)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1829, file: !1830, line: 528, baseType: !1841, size: 8, offset: 1072)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1829, file: !1830, line: 529, baseType: !1841, size: 8, offset: 1080)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1829, file: !1830, line: 530, baseType: !1841, size: 8, offset: 1088)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1829, file: !1830, line: 531, baseType: !1841, size: 8, offset: 1096)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1829, file: !1830, line: 532, baseType: !1841, size: 8, offset: 1104)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1829, file: !1830, line: 533, baseType: !1841, size: 8, offset: 1112)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1829, file: !1830, line: 534, baseType: !1841, size: 8, offset: 1120)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1829, file: !1830, line: 535, baseType: !1841, size: 8, offset: 1128)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1829, file: !1830, line: 536, baseType: !1841, size: 8, offset: 1136)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1829, file: !1830, line: 537, baseType: !1841, size: 8, offset: 1144)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1829, file: !1830, line: 538, baseType: !1841, size: 8, offset: 1152)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1829, file: !1830, line: 539, baseType: !1841, size: 8, offset: 1160)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1829, file: !1830, line: 540, baseType: !1841, size: 8, offset: 1168)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1829, file: !1830, line: 541, baseType: !1841, size: 8, offset: 1176)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1829, file: !1830, line: 542, baseType: !1841, size: 8, offset: 1184)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1829, file: !1830, line: 543, baseType: !1841, size: 8, offset: 1192)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1829, file: !1830, line: 544, baseType: !1841, size: 8, offset: 1200)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1829, file: !1830, line: 545, baseType: !1841, size: 8, offset: 1208)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1829, file: !1830, line: 546, baseType: !1841, size: 8, offset: 1216)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1829, file: !1830, line: 547, baseType: !1841, size: 8, offset: 1224)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1829, file: !1830, line: 548, baseType: !1841, size: 8, offset: 1232)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1829, file: !1830, line: 549, baseType: !1841, size: 8, offset: 1240)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1829, file: !1830, line: 550, baseType: !1841, size: 8, offset: 1248)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1829, file: !1830, line: 551, baseType: !1841, size: 8, offset: 1256)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1829, file: !1830, line: 552, baseType: !1841, size: 8, offset: 1264)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1829, file: !1830, line: 553, baseType: !1841, size: 8, offset: 1272)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1829, file: !1830, line: 554, baseType: !1841, size: 8, offset: 1280)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1829, file: !1830, line: 555, baseType: !1841, size: 8, offset: 1288)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1829, file: !1830, line: 556, baseType: !1841, size: 8, offset: 1296)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1829, file: !1830, line: 557, baseType: !1841, size: 8, offset: 1304)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1829, file: !1830, line: 558, baseType: !1841, size: 8, offset: 1312)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1829, file: !1830, line: 559, baseType: !1841, size: 8, offset: 1320)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1829, file: !1830, line: 560, baseType: !1841, size: 8, offset: 1328)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1829, file: !1830, line: 561, baseType: !1841, size: 8, offset: 1336)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1829, file: !1830, line: 562, baseType: !1841, size: 8, offset: 1344)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1829, file: !1830, line: 563, baseType: !1841, size: 8, offset: 1352)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1829, file: !1830, line: 564, baseType: !1841, size: 8, offset: 1360)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1829, file: !1830, line: 565, baseType: !1841, size: 8, offset: 1368)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1829, file: !1830, line: 566, baseType: !1841, size: 8, offset: 1376)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1829, file: !1830, line: 567, baseType: !1841, size: 8, offset: 1384)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1829, file: !1830, line: 568, baseType: !1841, size: 8, offset: 1392)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1829, file: !1830, line: 569, baseType: !1841, size: 8, offset: 1400)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1829, file: !1830, line: 570, baseType: !1841, size: 8, offset: 1408)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1829, file: !1830, line: 571, baseType: !1841, size: 8, offset: 1416)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1829, file: !1830, line: 572, baseType: !1841, size: 8, offset: 1424)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1829, file: !1830, line: 573, baseType: !1841, size: 8, offset: 1432)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1829, file: !1830, line: 574, baseType: !1841, size: 8, offset: 1440)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !660, file: !133, line: 3405, baseType: !1997, size: 384)
!1997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !133, line: 3352, size: 384, elements: !1998)
!1998 = !{!1999, !2000}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1997, file: !133, line: 3353, baseType: !696, size: 192)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1997, file: !133, line: 3356, baseType: !2001, size: 192, offset: 192)
!2001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1830, line: 578, size: 192, elements: !2002)
!2002 = !{!2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013}
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2001, file: !1830, line: 580, baseType: !754, size: 32)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2001, file: !1830, line: 581, baseType: !754, size: 32, offset: 32)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2001, file: !1830, line: 582, baseType: !754, size: 32, offset: 64)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2001, file: !1830, line: 583, baseType: !754, size: 32, offset: 96)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2001, file: !1830, line: 584, baseType: !777, size: 8, offset: 128)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2001, file: !1830, line: 585, baseType: !777, size: 8, offset: 136)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2001, file: !1830, line: 586, baseType: !777, size: 8, offset: 144)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2001, file: !1830, line: 587, baseType: !777, size: 8, offset: 152)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2001, file: !1830, line: 588, baseType: !777, size: 8, offset: 160)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2001, file: !1830, line: 589, baseType: !777, size: 8, offset: 168)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2001, file: !1830, line: 590, baseType: !777, size: 8, offset: 176)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !653, file: !654, line: 257, baseType: !657, size: 64, offset: 64)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2017)
!2017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ivtype_map_elt_s", file: !654, line: 286, size: 128, elements: !2018)
!2018 = !{!2019, !2020}
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2017, file: !654, line: 288, baseType: !657, size: 64)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "cloog_iv", scope: !2017, file: !654, line: 289, baseType: !861, size: 64, offset: 64)
!2021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2022, size: 64)
!2022 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sese_s", file: !654, line: 28, size: 384, elements: !2023)
!2023 = !{!2024, !2025, !2026, !2032, !2033, !2039}
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !2022, file: !654, line: 31, baseType: !967, size: 64)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "exit", scope: !2022, file: !654, line: 31, baseType: !967, size: 64, offset: 64)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "params", scope: !2022, file: !654, line: 34, baseType: !2027, size: 64, offset: 128)
!2027 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2028, size: 64)
!2028 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !133, line: 184, baseType: !2029)
!2029 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !133, line: 184, size: 128, elements: !2030)
!2030 = !{!2031}
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2029, file: !133, line: 184, baseType: !1538, size: 128)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "loops", scope: !2022, file: !654, line: 37, baseType: !1556, size: 64, offset: 192)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2022, file: !654, line: 38, baseType: !2034, size: 64, offset: 256)
!2034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2035, size: 64)
!2035 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !328, line: 86, baseType: !2036)
!2036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !328, line: 86, size: 128, elements: !2037)
!2037 = !{!2038}
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2036, file: !328, line: 86, baseType: !1222, size: 128)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "add_params", scope: !2022, file: !654, line: 43, baseType: !777, size: 8, offset: 320)
!2040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1248, size: 64)
!2041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2042, size: 64)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ifsese_s", file: !654, line: 222, size: 192, elements: !2043)
!2043 = !{!2044, !2046, !2047}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2042, file: !654, line: 223, baseType: !2045, size: 64)
!2045 = !DIDerivedType(tag: DW_TAG_typedef, name: "sese", file: !654, line: 44, baseType: !2021)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "true_region", scope: !2042, file: !654, line: 224, baseType: !2045, size: 64, offset: 64)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "false_region", scope: !2042, file: !654, line: 225, baseType: !2045, size: 64, offset: 128)
!2048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !653, size: 64)
!2049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2017, size: 64)
!2050 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !576, line: 30, baseType: !2051)
!2051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2052, size: 64)
!2052 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !133, line: 1893, baseType: !1028)
!2053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!2054 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2055, line: 32, baseType: !2056)
!2055 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2055, line: 32, size: 96, elements: !2057)
!2057 = !{!2058}
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2056, file: !2055, line: 32, baseType: !2059, size: 96)
!2059 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2055, line: 31, baseType: !2060)
!2060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2055, line: 31, size: 96, elements: !2061)
!2061 = !{!2062, !2063, !2064}
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2060, file: !2055, line: 31, baseType: !5, size: 32)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2060, file: !2055, line: 31, baseType: !5, size: 32, offset: 32)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2060, file: !2055, line: 31, baseType: !2065, size: 32, offset: 64)
!2065 = !DICompositeType(tag: DW_TAG_array_type, baseType: !754, size: 32, elements: !758)
!2066 = !DIDerivedType(tag: DW_TAG_typedef, name: "rename_map_elt", file: !654, line: 258, baseType: !2048)
!2067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2068, size: 64)
!2068 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rename_map_elt_heap", file: !654, line: 261, baseType: !2069)
!2069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rename_map_elt_heap", file: !654, line: 261, size: 128, elements: !2070)
!2070 = !{!2071}
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2069, file: !654, line: 261, baseType: !2072, size: 128)
!2072 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rename_map_elt_base", file: !654, line: 260, baseType: !2073)
!2073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rename_map_elt_base", file: !654, line: 260, size: 128, elements: !2074)
!2074 = !{!2075, !2076, !2077}
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2073, file: !654, line: 260, baseType: !5, size: 32)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2073, file: !654, line: 260, baseType: !5, size: 32, offset: 32)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2073, file: !654, line: 260, baseType: !2078, size: 64, offset: 64)
!2078 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2066, size: 64, elements: !758)
!2079 = !DIDerivedType(tag: DW_TAG_typedef, name: "alep_p", file: !1, line: 1188, baseType: !2080)
!2080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2081, size: 64)
!2081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alep", file: !1, line: 1185, size: 128, elements: !2082)
!2082 = !{!2083, !2084}
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !2081, file: !1, line: 1186, baseType: !1229, size: 64)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "new_renames", scope: !2081, file: !1, line: 1187, baseType: !2067, size: 64, offset: 64)
!2085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2086, size: 64)
!2086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "igp", file: !1, line: 1274, size: 256, elements: !2087)
!2087 = !{!2088, !2089, !2090, !2091}
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2086, file: !1, line: 1275, baseType: !1439, size: 64)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "true_edge", scope: !2086, file: !1, line: 1276, baseType: !967, size: 64, offset: 64)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "false_edge", scope: !2086, file: !1, line: 1276, baseType: !967, size: 64, offset: 128)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "before_guard", scope: !2086, file: !1, line: 1277, baseType: !1471, size: 64, offset: 192)
!2092 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !576, line: 27, baseType: !1021)
!2093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2094, size: 64)
!2094 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !989)
!2095 = !{i32 7, !"Dwarf Version", i32 4}
!2096 = !{i32 2, !"Debug Info Version", i32 3}
!2097 = !{i32 1, !"wchar_size", i32 4}
!2098 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2099 = distinct !DISubprogram(name: "debug_rename_map", scope: !1, file: !1, line: 72, type: !2100, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2100 = !DISubroutineType(types: !2101)
!2101 = !{null, !1471}
!2102 = !{}
!2103 = !DILocalVariable(name: "map", arg: 1, scope: !2099, file: !1, line: 72, type: !1471)
!2104 = !DILocation(line: 72, column: 26, scope: !2099)
!2105 = !DILocation(line: 74, column: 18, scope: !2099)
!2106 = !DILocation(line: 74, column: 3, scope: !2099)
!2107 = !DILocation(line: 75, column: 1, scope: !2099)
!2108 = distinct !DISubprogram(name: "debug_rename_map_1", scope: !1, file: !1, line: 62, type: !2109, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2109 = !DISubroutineType(types: !2110)
!2110 = !{!754, !1494, !650}
!2111 = !DILocalVariable(name: "slot", arg: 1, scope: !2108, file: !1, line: 62, type: !1494)
!2112 = !DILocation(line: 62, column: 28, scope: !2108)
!2113 = !DILocalVariable(name: "s", arg: 2, scope: !2108, file: !1, line: 62, type: !650)
!2114 = !DILocation(line: 62, column: 40, scope: !2108)
!2115 = !DILocalVariable(name: "entry", scope: !2108, file: !1, line: 64, type: !2048)
!2116 = !DILocation(line: 64, column: 28, scope: !2108)
!2117 = !DILocation(line: 64, column: 65, scope: !2108)
!2118 = !DILocation(line: 64, column: 64, scope: !2108)
!2119 = !DILocation(line: 64, column: 36, scope: !2108)
!2120 = !DILocation(line: 65, column: 21, scope: !2108)
!2121 = !DILocation(line: 65, column: 3, scope: !2108)
!2122 = !DILocation(line: 66, column: 3, scope: !2108)
!2123 = distinct !DISubprogram(name: "rename_map_elt_info", scope: !1, file: !1, line: 80, type: !1478, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2124 = !DILocalVariable(name: "elt", arg: 1, scope: !2123, file: !1, line: 80, type: !1481)
!2125 = !DILocation(line: 80, column: 34, scope: !2123)
!2126 = !DILocation(line: 82, column: 10, scope: !2123)
!2127 = !DILocation(line: 82, column: 3, scope: !2123)
!2128 = distinct !DISubprogram(name: "eq_rename_map_elts", scope: !1, file: !1, line: 88, type: !1486, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2129 = !DILocalVariable(name: "e1", arg: 1, scope: !2128, file: !1, line: 88, type: !1481)
!2130 = !DILocation(line: 88, column: 33, scope: !2128)
!2131 = !DILocalVariable(name: "e2", arg: 2, scope: !2128, file: !1, line: 88, type: !1481)
!2132 = !DILocation(line: 88, column: 49, scope: !2128)
!2133 = !DILocalVariable(name: "elt1", scope: !2128, file: !1, line: 90, type: !651)
!2134 = !DILocation(line: 90, column: 34, scope: !2128)
!2135 = !DILocation(line: 90, column: 75, scope: !2128)
!2136 = !DILocation(line: 90, column: 41, scope: !2128)
!2137 = !DILocalVariable(name: "elt2", scope: !2128, file: !1, line: 91, type: !651)
!2138 = !DILocation(line: 91, column: 34, scope: !2128)
!2139 = !DILocation(line: 91, column: 75, scope: !2128)
!2140 = !DILocation(line: 91, column: 41, scope: !2128)
!2141 = !DILocation(line: 93, column: 11, scope: !2128)
!2142 = !DILocation(line: 93, column: 17, scope: !2128)
!2143 = !DILocation(line: 93, column: 29, scope: !2128)
!2144 = !DILocation(line: 93, column: 35, scope: !2128)
!2145 = !DILocation(line: 93, column: 26, scope: !2128)
!2146 = !DILocation(line: 93, column: 3, scope: !2128)
!2147 = distinct !DISubprogram(name: "debug_ivtype_map", scope: !1, file: !1, line: 121, type: !2100, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2148 = !DILocalVariable(name: "map", arg: 1, scope: !2147, file: !1, line: 121, type: !1471)
!2149 = !DILocation(line: 121, column: 26, scope: !2147)
!2150 = !DILocation(line: 123, column: 18, scope: !2147)
!2151 = !DILocation(line: 123, column: 3, scope: !2147)
!2152 = !DILocation(line: 124, column: 1, scope: !2147)
!2153 = distinct !DISubprogram(name: "debug_ivtype_map_1", scope: !1, file: !1, line: 111, type: !2109, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2154 = !DILocalVariable(name: "slot", arg: 1, scope: !2153, file: !1, line: 111, type: !1494)
!2155 = !DILocation(line: 111, column: 28, scope: !2153)
!2156 = !DILocalVariable(name: "s", arg: 2, scope: !2153, file: !1, line: 111, type: !650)
!2157 = !DILocation(line: 111, column: 40, scope: !2153)
!2158 = !DILocalVariable(name: "entry", scope: !2153, file: !1, line: 113, type: !2049)
!2159 = !DILocation(line: 113, column: 28, scope: !2153)
!2160 = !DILocation(line: 113, column: 65, scope: !2153)
!2161 = !DILocation(line: 113, column: 64, scope: !2153)
!2162 = !DILocation(line: 113, column: 36, scope: !2153)
!2163 = !DILocation(line: 114, column: 21, scope: !2153)
!2164 = !DILocation(line: 114, column: 3, scope: !2153)
!2165 = !DILocation(line: 115, column: 3, scope: !2153)
!2166 = distinct !DISubprogram(name: "ivtype_map_elt_info", scope: !1, file: !1, line: 129, type: !1478, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2167 = !DILocalVariable(name: "elt", arg: 1, scope: !2166, file: !1, line: 129, type: !1481)
!2168 = !DILocation(line: 129, column: 34, scope: !2166)
!2169 = !DILocation(line: 131, column: 10, scope: !2166)
!2170 = !DILocation(line: 131, column: 64, scope: !2166)
!2171 = !DILocation(line: 131, column: 30, scope: !2166)
!2172 = !DILocation(line: 131, column: 70, scope: !2166)
!2173 = !DILocation(line: 131, column: 3, scope: !2166)
!2174 = distinct !DISubprogram(name: "eq_ivtype_map_elts", scope: !1, file: !1, line: 137, type: !1486, scopeLine: 138, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2175 = !DILocalVariable(name: "e1", arg: 1, scope: !2174, file: !1, line: 137, type: !1481)
!2176 = !DILocation(line: 137, column: 33, scope: !2174)
!2177 = !DILocalVariable(name: "e2", arg: 2, scope: !2174, file: !1, line: 137, type: !1481)
!2178 = !DILocation(line: 137, column: 49, scope: !2174)
!2179 = !DILocalVariable(name: "elt1", scope: !2174, file: !1, line: 139, type: !2015)
!2180 = !DILocation(line: 139, column: 34, scope: !2174)
!2181 = !DILocation(line: 139, column: 75, scope: !2174)
!2182 = !DILocation(line: 139, column: 41, scope: !2174)
!2183 = !DILocalVariable(name: "elt2", scope: !2174, file: !1, line: 140, type: !2015)
!2184 = !DILocation(line: 140, column: 34, scope: !2174)
!2185 = !DILocation(line: 140, column: 75, scope: !2174)
!2186 = !DILocation(line: 140, column: 41, scope: !2174)
!2187 = !DILocation(line: 142, column: 11, scope: !2174)
!2188 = !DILocation(line: 142, column: 17, scope: !2174)
!2189 = !DILocation(line: 142, column: 29, scope: !2174)
!2190 = !DILocation(line: 142, column: 35, scope: !2174)
!2191 = !DILocation(line: 142, column: 26, scope: !2174)
!2192 = !DILocation(line: 142, column: 3, scope: !2174)
!2193 = distinct !DISubprogram(name: "build_sese_loop_nests", scope: !1, file: !1, line: 163, type: !2194, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2194 = !DISubroutineType(types: !2195)
!2195 = !{null, !2045}
!2196 = !DILocalVariable(name: "region", arg: 1, scope: !2193, file: !1, line: 163, type: !2045)
!2197 = !DILocation(line: 163, column: 29, scope: !2193)
!2198 = !DILocalVariable(name: "i", scope: !2193, file: !1, line: 165, type: !5)
!2199 = !DILocation(line: 165, column: 12, scope: !2193)
!2200 = !DILocalVariable(name: "bb", scope: !2193, file: !1, line: 166, type: !1439)
!2201 = !DILocation(line: 166, column: 15, scope: !2193)
!2202 = !DILocalVariable(name: "loop0", scope: !2193, file: !1, line: 167, type: !1202)
!2203 = !DILocation(line: 167, column: 16, scope: !2193)
!2204 = !DILocalVariable(name: "loop1", scope: !2193, file: !1, line: 167, type: !1202)
!2205 = !DILocation(line: 167, column: 24, scope: !2193)
!2206 = !DILocation(line: 169, column: 3, scope: !2207)
!2207 = distinct !DILexicalBlock(scope: !2193, file: !1, line: 169, column: 3)
!2208 = !DILocation(line: 169, column: 3, scope: !2209)
!2209 = distinct !DILexicalBlock(scope: !2207, file: !1, line: 169, column: 3)
!2210 = !DILocation(line: 170, column: 23, scope: !2211)
!2211 = distinct !DILexicalBlock(scope: !2209, file: !1, line: 170, column: 9)
!2212 = !DILocation(line: 170, column: 27, scope: !2211)
!2213 = !DILocation(line: 170, column: 9, scope: !2211)
!2214 = !DILocation(line: 170, column: 9, scope: !2209)
!2215 = !DILocalVariable(name: "loop", scope: !2216, file: !1, line: 172, type: !1202)
!2216 = distinct !DILexicalBlock(scope: !2211, file: !1, line: 171, column: 7)
!2217 = !DILocation(line: 172, column: 15, scope: !2216)
!2218 = !DILocation(line: 172, column: 22, scope: !2216)
!2219 = !DILocation(line: 172, column: 26, scope: !2216)
!2220 = !DILocation(line: 175, column: 6, scope: !2221)
!2221 = distinct !DILexicalBlock(scope: !2216, file: !1, line: 175, column: 6)
!2222 = !DILocation(line: 175, column: 12, scope: !2221)
!2223 = !DILocation(line: 175, column: 22, scope: !2221)
!2224 = !DILocation(line: 175, column: 19, scope: !2221)
!2225 = !DILocation(line: 176, column: 6, scope: !2221)
!2226 = !DILocation(line: 176, column: 23, scope: !2221)
!2227 = !DILocation(line: 176, column: 29, scope: !2221)
!2228 = !DILocation(line: 176, column: 36, scope: !2221)
!2229 = !DILocation(line: 176, column: 9, scope: !2221)
!2230 = !DILocation(line: 175, column: 6, scope: !2216)
!2231 = !DILocation(line: 177, column: 22, scope: !2221)
!2232 = !DILocation(line: 177, column: 30, scope: !2221)
!2233 = !DILocation(line: 177, column: 4, scope: !2221)
!2234 = !DILocation(line: 178, column: 7, scope: !2216)
!2235 = !DILocation(line: 170, column: 33, scope: !2211)
!2236 = distinct !{!2236, !2206, !2237}
!2237 = !DILocation(line: 178, column: 7, scope: !2207)
!2238 = !DILocation(line: 183, column: 10, scope: !2239)
!2239 = distinct !DILexicalBlock(scope: !2193, file: !1, line: 183, column: 3)
!2240 = !DILocation(line: 183, column: 8, scope: !2239)
!2241 = !DILocation(line: 183, column: 15, scope: !2242)
!2242 = distinct !DILexicalBlock(scope: !2239, file: !1, line: 183, column: 3)
!2243 = !DILocation(line: 183, column: 3, scope: !2239)
!2244 = !DILocation(line: 185, column: 11, scope: !2245)
!2245 = distinct !DILexicalBlock(scope: !2246, file: !1, line: 185, column: 11)
!2246 = distinct !DILexicalBlock(scope: !2242, file: !1, line: 184, column: 5)
!2247 = !DILocation(line: 185, column: 59, scope: !2245)
!2248 = !DILocation(line: 185, column: 61, scope: !2245)
!2249 = !DILocation(line: 185, column: 56, scope: !2245)
!2250 = !DILocation(line: 185, column: 11, scope: !2246)
!2251 = !DILocation(line: 186, column: 2, scope: !2245)
!2252 = !DILocation(line: 188, column: 15, scope: !2246)
!2253 = !DILocation(line: 188, column: 13, scope: !2246)
!2254 = !DILocation(line: 189, column: 11, scope: !2255)
!2255 = distinct !DILexicalBlock(scope: !2246, file: !1, line: 189, column: 11)
!2256 = !DILocation(line: 189, column: 18, scope: !2255)
!2257 = !DILocation(line: 189, column: 24, scope: !2255)
!2258 = !DILocation(line: 189, column: 31, scope: !2255)
!2259 = !DILocation(line: 189, column: 22, scope: !2255)
!2260 = !DILocation(line: 189, column: 11, scope: !2246)
!2261 = !DILocation(line: 191, column: 4, scope: !2262)
!2262 = distinct !DILexicalBlock(scope: !2255, file: !1, line: 190, column: 2)
!2263 = !DILocation(line: 192, column: 4, scope: !2262)
!2264 = !DILocation(line: 193, column: 2, scope: !2262)
!2265 = !DILocation(line: 194, column: 5, scope: !2246)
!2266 = !DILocation(line: 183, column: 73, scope: !2242)
!2267 = !DILocation(line: 183, column: 3, scope: !2242)
!2268 = distinct !{!2268, !2243, !2269}
!2269 = !DILocation(line: 194, column: 5, scope: !2239)
!2270 = !DILocation(line: 195, column: 1, scope: !2193)
!2271 = distinct !DISubprogram(name: "bb_in_sese_p", scope: !654, file: !654, line: 113, type: !2272, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2272 = !DISubroutineType(types: !2273)
!2273 = !{!777, !1439, !2045}
!2274 = !DILocalVariable(name: "bb", arg: 1, scope: !2271, file: !654, line: 113, type: !1439)
!2275 = !DILocation(line: 113, column: 27, scope: !2271)
!2276 = !DILocalVariable(name: "region", arg: 2, scope: !2271, file: !654, line: 113, type: !2045)
!2277 = !DILocation(line: 113, column: 36, scope: !2271)
!2278 = !DILocalVariable(name: "entry", scope: !2271, file: !654, line: 115, type: !1439)
!2279 = !DILocation(line: 115, column: 15, scope: !2271)
!2280 = !DILocation(line: 115, column: 23, scope: !2271)
!2281 = !DILocalVariable(name: "exit", scope: !2271, file: !654, line: 116, type: !1439)
!2282 = !DILocation(line: 116, column: 15, scope: !2271)
!2283 = !DILocation(line: 116, column: 22, scope: !2271)
!2284 = !DILocation(line: 118, column: 24, scope: !2271)
!2285 = !DILocation(line: 118, column: 28, scope: !2271)
!2286 = !DILocation(line: 118, column: 35, scope: !2271)
!2287 = !DILocation(line: 118, column: 10, scope: !2271)
!2288 = !DILocation(line: 118, column: 3, scope: !2271)
!2289 = distinct !DISubprogram(name: "sese_record_loop", scope: !1, file: !1, line: 150, type: !2290, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2290 = !DISubroutineType(types: !2291)
!2291 = !{null, !2045, !1229}
!2292 = !DILocalVariable(name: "region", arg: 1, scope: !2289, file: !1, line: 150, type: !2045)
!2293 = !DILocation(line: 150, column: 24, scope: !2289)
!2294 = !DILocalVariable(name: "loop", arg: 2, scope: !2289, file: !1, line: 150, type: !1229)
!2295 = !DILocation(line: 150, column: 39, scope: !2289)
!2296 = !DILocation(line: 152, column: 27, scope: !2297)
!2297 = distinct !DILexicalBlock(scope: !2289, file: !1, line: 152, column: 7)
!2298 = !DILocation(line: 152, column: 35, scope: !2297)
!2299 = !DILocation(line: 152, column: 7, scope: !2297)
!2300 = !DILocation(line: 152, column: 7, scope: !2289)
!2301 = !DILocation(line: 153, column: 5, scope: !2297)
!2302 = !DILocation(line: 155, column: 19, scope: !2289)
!2303 = !DILocation(line: 155, column: 40, scope: !2289)
!2304 = !DILocation(line: 155, column: 46, scope: !2289)
!2305 = !DILocation(line: 155, column: 3, scope: !2289)
!2306 = !DILocation(line: 156, column: 3, scope: !2289)
!2307 = !DILocation(line: 157, column: 1, scope: !2289)
!2308 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !328, file: !328, line: 85, type: !2309, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2309 = !DISubroutineType(types: !2310)
!2310 = !{!754, !2311, !5, !2313}
!2311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2312, size: 64)
!2312 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1222)
!2313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1229, size: 64)
!2314 = !DILocalVariable(name: "vec_", arg: 1, scope: !2308, file: !328, line: 85, type: !2311)
!2315 = !DILocation(line: 85, column: 1, scope: !2308)
!2316 = !DILocalVariable(name: "ix_", arg: 2, scope: !2308, file: !328, line: 85, type: !5)
!2317 = !DILocalVariable(name: "ptr", arg: 3, scope: !2308, file: !328, line: 85, type: !2313)
!2318 = !DILocation(line: 85, column: 1, scope: !2319)
!2319 = distinct !DILexicalBlock(scope: !2308, file: !328, line: 85, column: 1)
!2320 = !DILocation(line: 85, column: 1, scope: !2321)
!2321 = distinct !DILexicalBlock(scope: !2319, file: !328, line: 85, column: 1)
!2322 = !DILocation(line: 85, column: 1, scope: !2323)
!2323 = distinct !DILexicalBlock(scope: !2319, file: !328, line: 85, column: 1)
!2324 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !328, file: !328, line: 85, type: !2325, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2325 = !DISubroutineType(types: !2326)
!2326 = !{!5, !2311}
!2327 = !DILocalVariable(name: "vec_", arg: 1, scope: !2324, file: !328, line: 85, type: !2311)
!2328 = !DILocation(line: 85, column: 1, scope: !2324)
!2329 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !328, file: !328, line: 85, type: !2330, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2330 = !DISubroutineType(types: !2331)
!2331 = !{!1229, !2311, !5}
!2332 = !DILocalVariable(name: "vec_", arg: 1, scope: !2329, file: !328, line: 85, type: !2311)
!2333 = !DILocation(line: 85, column: 1, scope: !2329)
!2334 = !DILocalVariable(name: "ix_", arg: 2, scope: !2329, file: !328, line: 85, type: !5)
!2335 = !DILocation(line: 0, scope: !2329)
!2336 = distinct !DISubprogram(name: "VEC_loop_p_base_replace", scope: !328, file: !328, line: 85, type: !2337, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2337 = !DISubroutineType(types: !2338)
!2338 = !{!1229, !2339, !5, !1229}
!2339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1222, size: 64)
!2340 = !DILocalVariable(name: "vec_", arg: 1, scope: !2336, file: !328, line: 85, type: !2339)
!2341 = !DILocation(line: 85, column: 1, scope: !2336)
!2342 = !DILocalVariable(name: "ix_", arg: 2, scope: !2336, file: !328, line: 85, type: !5)
!2343 = !DILocalVariable(name: "obj_", arg: 3, scope: !2336, file: !328, line: 85, type: !1229)
!2344 = !DILocalVariable(name: "old_obj_", scope: !2336, file: !328, line: 85, type: !1229)
!2345 = distinct !DISubprogram(name: "new_sese", scope: !1, file: !1, line: 326, type: !2346, scopeLine: 327, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2346 = !DISubroutineType(types: !2347)
!2347 = !{!2045, !967, !967}
!2348 = !DILocalVariable(name: "entry", arg: 1, scope: !2345, file: !1, line: 326, type: !967)
!2349 = !DILocation(line: 326, column: 16, scope: !2345)
!2350 = !DILocalVariable(name: "exit", arg: 2, scope: !2345, file: !1, line: 326, type: !967)
!2351 = !DILocation(line: 326, column: 28, scope: !2345)
!2352 = !DILocalVariable(name: "region", scope: !2345, file: !1, line: 328, type: !2045)
!2353 = !DILocation(line: 328, column: 8, scope: !2345)
!2354 = !DILocation(line: 328, column: 17, scope: !2345)
!2355 = !DILocation(line: 330, column: 25, scope: !2345)
!2356 = !DILocation(line: 330, column: 3, scope: !2345)
!2357 = !DILocation(line: 330, column: 23, scope: !2345)
!2358 = !DILocation(line: 331, column: 24, scope: !2345)
!2359 = !DILocation(line: 331, column: 3, scope: !2345)
!2360 = !DILocation(line: 331, column: 22, scope: !2345)
!2361 = !DILocation(line: 332, column: 25, scope: !2345)
!2362 = !DILocation(line: 332, column: 3, scope: !2345)
!2363 = !DILocation(line: 332, column: 23, scope: !2345)
!2364 = !DILocation(line: 333, column: 29, scope: !2345)
!2365 = !DILocation(line: 333, column: 3, scope: !2345)
!2366 = !DILocation(line: 333, column: 27, scope: !2345)
!2367 = !DILocation(line: 334, column: 3, scope: !2345)
!2368 = !DILocation(line: 334, column: 28, scope: !2345)
!2369 = !DILocation(line: 335, column: 26, scope: !2345)
!2370 = !DILocation(line: 335, column: 3, scope: !2345)
!2371 = !DILocation(line: 335, column: 24, scope: !2345)
!2372 = !DILocation(line: 337, column: 10, scope: !2345)
!2373 = !DILocation(line: 337, column: 3, scope: !2345)
!2374 = distinct !DISubprogram(name: "VEC_loop_p_heap_alloc", scope: !328, file: !328, line: 86, type: !2375, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2375 = !DISubroutineType(types: !2376)
!2376 = !{!2034, !754}
!2377 = !DILocalVariable(name: "alloc_", arg: 1, scope: !2374, file: !328, line: 86, type: !754)
!2378 = !DILocation(line: 86, column: 1, scope: !2374)
!2379 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !133, file: !133, line: 184, type: !2380, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2380 = !DISubroutineType(types: !2381)
!2381 = !{!2027, !754}
!2382 = !DILocalVariable(name: "alloc_", arg: 1, scope: !2379, file: !133, line: 184, type: !754)
!2383 = !DILocation(line: 184, column: 1, scope: !2379)
!2384 = distinct !DISubprogram(name: "free_sese", scope: !1, file: !1, line: 343, type: !2194, scopeLine: 344, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2385 = !DILocalVariable(name: "region", arg: 1, scope: !2384, file: !1, line: 343, type: !2045)
!2386 = !DILocation(line: 343, column: 17, scope: !2384)
!2387 = !DILocation(line: 345, column: 7, scope: !2388)
!2388 = distinct !DILexicalBlock(scope: !2384, file: !1, line: 345, column: 7)
!2389 = !DILocation(line: 345, column: 7, scope: !2384)
!2390 = !DILocation(line: 346, column: 27, scope: !2388)
!2391 = !DILocation(line: 346, column: 5, scope: !2388)
!2392 = !DILocation(line: 346, column: 25, scope: !2388)
!2393 = !DILocation(line: 348, column: 3, scope: !2384)
!2394 = !DILocation(line: 349, column: 3, scope: !2384)
!2395 = !DILocation(line: 351, column: 3, scope: !2384)
!2396 = !DILocation(line: 352, column: 1, scope: !2384)
!2397 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !133, file: !133, line: 184, type: !2398, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2398 = !DISubroutineType(types: !2399)
!2399 = !{null, !2400}
!2400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2027, size: 64)
!2401 = !DILocalVariable(name: "vec_", arg: 1, scope: !2397, file: !133, line: 184, type: !2400)
!2402 = !DILocation(line: 184, column: 1, scope: !2397)
!2403 = !DILocation(line: 184, column: 1, scope: !2404)
!2404 = distinct !DILexicalBlock(scope: !2397, file: !133, line: 184, column: 1)
!2405 = distinct !DISubprogram(name: "VEC_loop_p_heap_free", scope: !328, file: !328, line: 86, type: !2406, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2406 = !DISubroutineType(types: !2407)
!2407 = !{null, !2408}
!2408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2034, size: 64)
!2409 = !DILocalVariable(name: "vec_", arg: 1, scope: !2405, file: !328, line: 86, type: !2408)
!2410 = !DILocation(line: 86, column: 1, scope: !2405)
!2411 = !DILocation(line: 86, column: 1, scope: !2412)
!2412 = distinct !DILexicalBlock(scope: !2405, file: !328, line: 86, column: 1)
!2413 = distinct !DISubprogram(name: "sese_insert_phis_for_liveouts", scope: !1, file: !1, line: 379, type: !2414, scopeLine: 381, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2414 = !DISubroutineType(types: !2415)
!2415 = !{null, !2045, !1439, !967, !967}
!2416 = !DILocalVariable(name: "region", arg: 1, scope: !2413, file: !1, line: 379, type: !2045)
!2417 = !DILocation(line: 379, column: 37, scope: !2413)
!2418 = !DILocalVariable(name: "bb", arg: 2, scope: !2413, file: !1, line: 379, type: !1439)
!2419 = !DILocation(line: 379, column: 57, scope: !2413)
!2420 = !DILocalVariable(name: "false_e", arg: 3, scope: !2413, file: !1, line: 380, type: !967)
!2421 = !DILocation(line: 380, column: 16, scope: !2413)
!2422 = !DILocalVariable(name: "true_e", arg: 4, scope: !2413, file: !1, line: 380, type: !967)
!2423 = !DILocation(line: 380, column: 30, scope: !2413)
!2424 = !DILocalVariable(name: "i", scope: !2413, file: !1, line: 382, type: !5)
!2425 = !DILocation(line: 382, column: 12, scope: !2413)
!2426 = !DILocalVariable(name: "bi", scope: !2413, file: !1, line: 383, type: !2427)
!2427 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !891, line: 218, baseType: !2428)
!2428 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !891, line: 203, size: 256, elements: !2429)
!2429 = !{!2430, !2431, !2432, !2433}
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !2428, file: !891, line: 206, baseType: !894, size: 64)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !2428, file: !891, line: 209, baseType: !894, size: 64, offset: 64)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !2428, file: !891, line: 212, baseType: !5, size: 32, offset: 128)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2428, file: !891, line: 217, baseType: !904, size: 64, offset: 192)
!2434 = !DILocation(line: 383, column: 19, scope: !2413)
!2435 = !DILocalVariable(name: "liveouts", scope: !2413, file: !1, line: 384, type: !1556)
!2436 = !DILocation(line: 384, column: 10, scope: !2413)
!2437 = !DILocation(line: 384, column: 21, scope: !2413)
!2438 = !DILocation(line: 386, column: 3, scope: !2413)
!2439 = !DILocation(line: 388, column: 24, scope: !2413)
!2440 = !DILocation(line: 388, column: 32, scope: !2413)
!2441 = !DILocation(line: 388, column: 3, scope: !2413)
!2442 = !DILocation(line: 389, column: 3, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2413, file: !1, line: 389, column: 3)
!2444 = !DILocation(line: 389, column: 3, scope: !2445)
!2445 = distinct !DILexicalBlock(scope: !2443, file: !1, line: 389, column: 3)
!2446 = !DILocation(line: 390, column: 30, scope: !2445)
!2447 = !DILocation(line: 390, column: 34, scope: !2445)
!2448 = !DILocation(line: 390, column: 48, scope: !2445)
!2449 = !DILocation(line: 390, column: 57, scope: !2445)
!2450 = !DILocation(line: 390, column: 5, scope: !2445)
!2451 = distinct !{!2451, !2442, !2452}
!2452 = !DILocation(line: 390, column: 63, scope: !2443)
!2453 = !DILocation(line: 391, column: 3, scope: !2413)
!2454 = !DILocation(line: 393, column: 3, scope: !2413)
!2455 = !DILocation(line: 394, column: 1, scope: !2413)
!2456 = distinct !DISubprogram(name: "sese_build_liveouts", scope: !1, file: !1, line: 312, type: !2457, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2457 = !DISubroutineType(types: !2458)
!2458 = !{null, !2045, !1556}
!2459 = !DILocalVariable(name: "region", arg: 1, scope: !2456, file: !1, line: 312, type: !2045)
!2460 = !DILocation(line: 312, column: 27, scope: !2456)
!2461 = !DILocalVariable(name: "liveouts", arg: 2, scope: !2456, file: !1, line: 312, type: !1556)
!2462 = !DILocation(line: 312, column: 42, scope: !2456)
!2463 = !DILocalVariable(name: "bb", scope: !2456, file: !1, line: 314, type: !1439)
!2464 = !DILocation(line: 314, column: 15, scope: !2456)
!2465 = !DILocation(line: 316, column: 3, scope: !2466)
!2466 = distinct !DILexicalBlock(scope: !2456, file: !1, line: 316, column: 3)
!2467 = !DILocation(line: 316, column: 3, scope: !2468)
!2468 = distinct !DILexicalBlock(scope: !2466, file: !1, line: 316, column: 3)
!2469 = !DILocation(line: 317, column: 29, scope: !2468)
!2470 = !DILocation(line: 317, column: 37, scope: !2468)
!2471 = !DILocation(line: 317, column: 47, scope: !2468)
!2472 = !DILocation(line: 317, column: 5, scope: !2468)
!2473 = distinct !{!2473, !2465, !2474}
!2474 = !DILocation(line: 317, column: 49, scope: !2466)
!2475 = !DILocation(line: 318, column: 7, scope: !2476)
!2476 = distinct !DILexicalBlock(scope: !2456, file: !1, line: 318, column: 7)
!2477 = !DILocation(line: 318, column: 7, scope: !2456)
!2478 = !DILocation(line: 319, column: 5, scope: !2479)
!2479 = distinct !DILexicalBlock(scope: !2476, file: !1, line: 319, column: 5)
!2480 = !DILocation(line: 319, column: 5, scope: !2481)
!2481 = distinct !DILexicalBlock(scope: !2479, file: !1, line: 319, column: 5)
!2482 = !DILocation(line: 320, column: 37, scope: !2481)
!2483 = !DILocation(line: 320, column: 45, scope: !2481)
!2484 = !DILocation(line: 320, column: 55, scope: !2481)
!2485 = !DILocation(line: 320, column: 7, scope: !2481)
!2486 = distinct !{!2486, !2478, !2487}
!2487 = !DILocation(line: 320, column: 57, scope: !2479)
!2488 = !DILocation(line: 321, column: 1, scope: !2456)
!2489 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !891, file: !891, line: 224, type: !2490, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2490 = !DISubroutineType(types: !2491)
!2491 = !{null, !2492, !2493, !5, !2496}
!2492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2427, size: 64)
!2493 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !658, line: 48, baseType: !2494)
!2494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2495, size: 64)
!2495 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !890)
!2496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!2497 = !DILocalVariable(name: "bi", arg: 1, scope: !2489, file: !891, line: 224, type: !2492)
!2498 = !DILocation(line: 224, column: 37, scope: !2489)
!2499 = !DILocalVariable(name: "map", arg: 2, scope: !2489, file: !891, line: 224, type: !2493)
!2500 = !DILocation(line: 224, column: 54, scope: !2489)
!2501 = !DILocalVariable(name: "start_bit", arg: 3, scope: !2489, file: !891, line: 225, type: !5)
!2502 = !DILocation(line: 225, column: 15, scope: !2489)
!2503 = !DILocalVariable(name: "bit_no", arg: 4, scope: !2489, file: !891, line: 225, type: !2496)
!2504 = !DILocation(line: 225, column: 36, scope: !2489)
!2505 = !DILocation(line: 227, column: 14, scope: !2489)
!2506 = !DILocation(line: 227, column: 19, scope: !2489)
!2507 = !DILocation(line: 227, column: 3, scope: !2489)
!2508 = !DILocation(line: 227, column: 7, scope: !2489)
!2509 = !DILocation(line: 227, column: 12, scope: !2489)
!2510 = !DILocation(line: 228, column: 3, scope: !2489)
!2511 = !DILocation(line: 228, column: 7, scope: !2489)
!2512 = !DILocation(line: 228, column: 12, scope: !2489)
!2513 = !DILocation(line: 231, column: 3, scope: !2489)
!2514 = !DILocation(line: 233, column: 12, scope: !2515)
!2515 = distinct !DILexicalBlock(scope: !2516, file: !891, line: 233, column: 11)
!2516 = distinct !DILexicalBlock(scope: !2489, file: !891, line: 232, column: 5)
!2517 = !DILocation(line: 233, column: 16, scope: !2515)
!2518 = !DILocation(line: 233, column: 11, scope: !2516)
!2519 = !DILocation(line: 235, column: 4, scope: !2520)
!2520 = distinct !DILexicalBlock(scope: !2515, file: !891, line: 234, column: 2)
!2521 = !DILocation(line: 235, column: 8, scope: !2520)
!2522 = !DILocation(line: 235, column: 13, scope: !2520)
!2523 = !DILocation(line: 236, column: 4, scope: !2520)
!2524 = !DILocation(line: 239, column: 11, scope: !2525)
!2525 = distinct !DILexicalBlock(scope: !2516, file: !891, line: 239, column: 11)
!2526 = !DILocation(line: 239, column: 15, scope: !2525)
!2527 = !DILocation(line: 239, column: 21, scope: !2525)
!2528 = !DILocation(line: 239, column: 29, scope: !2525)
!2529 = !DILocation(line: 239, column: 39, scope: !2525)
!2530 = !DILocation(line: 239, column: 26, scope: !2525)
!2531 = !DILocation(line: 239, column: 11, scope: !2516)
!2532 = !DILocation(line: 240, column: 2, scope: !2525)
!2533 = !DILocation(line: 241, column: 18, scope: !2516)
!2534 = !DILocation(line: 241, column: 22, scope: !2516)
!2535 = !DILocation(line: 241, column: 28, scope: !2516)
!2536 = !DILocation(line: 241, column: 7, scope: !2516)
!2537 = !DILocation(line: 241, column: 11, scope: !2516)
!2538 = !DILocation(line: 241, column: 16, scope: !2516)
!2539 = distinct !{!2539, !2513, !2540}
!2540 = !DILocation(line: 242, column: 5, scope: !2489)
!2541 = !DILocation(line: 245, column: 7, scope: !2542)
!2542 = distinct !DILexicalBlock(scope: !2489, file: !891, line: 245, column: 7)
!2543 = !DILocation(line: 245, column: 11, scope: !2542)
!2544 = !DILocation(line: 245, column: 17, scope: !2542)
!2545 = !DILocation(line: 245, column: 25, scope: !2542)
!2546 = !DILocation(line: 245, column: 35, scope: !2542)
!2547 = !DILocation(line: 245, column: 22, scope: !2542)
!2548 = !DILocation(line: 245, column: 7, scope: !2489)
!2549 = !DILocation(line: 246, column: 17, scope: !2542)
!2550 = !DILocation(line: 246, column: 21, scope: !2542)
!2551 = !DILocation(line: 246, column: 27, scope: !2542)
!2552 = !DILocation(line: 246, column: 32, scope: !2542)
!2553 = !DILocation(line: 246, column: 15, scope: !2542)
!2554 = !DILocation(line: 246, column: 5, scope: !2542)
!2555 = !DILocation(line: 249, column: 17, scope: !2489)
!2556 = !DILocation(line: 249, column: 27, scope: !2489)
!2557 = !DILocation(line: 249, column: 46, scope: !2489)
!2558 = !DILocation(line: 249, column: 3, scope: !2489)
!2559 = !DILocation(line: 249, column: 7, scope: !2489)
!2560 = !DILocation(line: 249, column: 15, scope: !2489)
!2561 = !DILocation(line: 250, column: 14, scope: !2489)
!2562 = !DILocation(line: 250, column: 18, scope: !2489)
!2563 = !DILocation(line: 250, column: 24, scope: !2489)
!2564 = !DILocation(line: 250, column: 29, scope: !2489)
!2565 = !DILocation(line: 250, column: 33, scope: !2489)
!2566 = !DILocation(line: 250, column: 3, scope: !2489)
!2567 = !DILocation(line: 250, column: 7, scope: !2489)
!2568 = !DILocation(line: 250, column: 12, scope: !2489)
!2569 = !DILocation(line: 251, column: 16, scope: !2489)
!2570 = !DILocation(line: 251, column: 26, scope: !2489)
!2571 = !DILocation(line: 251, column: 3, scope: !2489)
!2572 = !DILocation(line: 251, column: 7, scope: !2489)
!2573 = !DILocation(line: 251, column: 12, scope: !2489)
!2574 = !DILocation(line: 257, column: 17, scope: !2489)
!2575 = !DILocation(line: 257, column: 21, scope: !2489)
!2576 = !DILocation(line: 257, column: 16, scope: !2489)
!2577 = !DILocation(line: 257, column: 13, scope: !2489)
!2578 = !DILocation(line: 259, column: 13, scope: !2489)
!2579 = !DILocation(line: 259, column: 4, scope: !2489)
!2580 = !DILocation(line: 259, column: 11, scope: !2489)
!2581 = !DILocation(line: 260, column: 1, scope: !2489)
!2582 = distinct !DISubprogram(name: "bmp_iter_set", scope: !891, file: !891, line: 393, type: !2583, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2583 = !DISubroutineType(types: !2584)
!2584 = !{!777, !2492, !2496}
!2585 = !DILocalVariable(name: "bi", arg: 1, scope: !2582, file: !891, line: 393, type: !2492)
!2586 = !DILocation(line: 393, column: 32, scope: !2582)
!2587 = !DILocalVariable(name: "bit_no", arg: 2, scope: !2582, file: !891, line: 393, type: !2496)
!2588 = !DILocation(line: 393, column: 46, scope: !2582)
!2589 = !DILocation(line: 396, column: 7, scope: !2590)
!2590 = distinct !DILexicalBlock(scope: !2582, file: !891, line: 396, column: 7)
!2591 = !DILocation(line: 396, column: 11, scope: !2590)
!2592 = !DILocation(line: 396, column: 7, scope: !2582)
!2593 = !DILocation(line: 397, column: 5, scope: !2590)
!2594 = !DILabel(scope: !2595, name: "next_bit", file: !891, line: 398)
!2595 = distinct !DILexicalBlock(scope: !2590, file: !891, line: 397, column: 5)
!2596 = !DILocation(line: 398, column: 5, scope: !2595)
!2597 = !DILocation(line: 399, column: 7, scope: !2595)
!2598 = !DILocation(line: 399, column: 16, scope: !2595)
!2599 = !DILocation(line: 399, column: 20, scope: !2595)
!2600 = !DILocation(line: 399, column: 25, scope: !2595)
!2601 = !DILocation(line: 399, column: 14, scope: !2595)
!2602 = !DILocation(line: 401, column: 4, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2595, file: !891, line: 400, column: 2)
!2604 = !DILocation(line: 401, column: 8, scope: !2603)
!2605 = !DILocation(line: 401, column: 13, scope: !2603)
!2606 = !DILocation(line: 402, column: 5, scope: !2603)
!2607 = !DILocation(line: 402, column: 12, scope: !2603)
!2608 = distinct !{!2608, !2597, !2609}
!2609 = !DILocation(line: 403, column: 2, scope: !2595)
!2610 = !DILocation(line: 404, column: 7, scope: !2595)
!2611 = !DILocation(line: 410, column: 16, scope: !2582)
!2612 = !DILocation(line: 410, column: 15, scope: !2582)
!2613 = !DILocation(line: 410, column: 23, scope: !2582)
!2614 = !DILocation(line: 410, column: 42, scope: !2582)
!2615 = !DILocation(line: 411, column: 7, scope: !2582)
!2616 = !DILocation(line: 411, column: 26, scope: !2582)
!2617 = !DILocation(line: 410, column: 4, scope: !2582)
!2618 = !DILocation(line: 410, column: 11, scope: !2582)
!2619 = !DILocation(line: 412, column: 3, scope: !2582)
!2620 = !DILocation(line: 412, column: 7, scope: !2582)
!2621 = !DILocation(line: 412, column: 14, scope: !2582)
!2622 = !DILocation(line: 414, column: 3, scope: !2582)
!2623 = !DILocation(line: 417, column: 7, scope: !2624)
!2624 = distinct !DILexicalBlock(scope: !2582, file: !891, line: 415, column: 5)
!2625 = !DILocation(line: 417, column: 14, scope: !2624)
!2626 = !DILocation(line: 417, column: 18, scope: !2624)
!2627 = !DILocation(line: 417, column: 26, scope: !2624)
!2628 = !DILocation(line: 419, column: 15, scope: !2629)
!2629 = distinct !DILexicalBlock(scope: !2624, file: !891, line: 418, column: 2)
!2630 = !DILocation(line: 419, column: 19, scope: !2629)
!2631 = !DILocation(line: 419, column: 25, scope: !2629)
!2632 = !DILocation(line: 419, column: 30, scope: !2629)
!2633 = !DILocation(line: 419, column: 34, scope: !2629)
!2634 = !DILocation(line: 419, column: 4, scope: !2629)
!2635 = !DILocation(line: 419, column: 8, scope: !2629)
!2636 = !DILocation(line: 419, column: 13, scope: !2629)
!2637 = !DILocation(line: 420, column: 8, scope: !2638)
!2638 = distinct !DILexicalBlock(scope: !2629, file: !891, line: 420, column: 8)
!2639 = !DILocation(line: 420, column: 12, scope: !2638)
!2640 = !DILocation(line: 420, column: 8, scope: !2629)
!2641 = !DILocation(line: 421, column: 6, scope: !2638)
!2642 = !DILocation(line: 422, column: 5, scope: !2629)
!2643 = !DILocation(line: 422, column: 12, scope: !2629)
!2644 = !DILocation(line: 423, column: 4, scope: !2629)
!2645 = !DILocation(line: 423, column: 8, scope: !2629)
!2646 = !DILocation(line: 423, column: 15, scope: !2629)
!2647 = distinct !{!2647, !2623, !2648}
!2648 = !DILocation(line: 424, column: 2, scope: !2624)
!2649 = !DILocation(line: 427, column: 18, scope: !2624)
!2650 = !DILocation(line: 427, column: 22, scope: !2624)
!2651 = !DILocation(line: 427, column: 28, scope: !2624)
!2652 = !DILocation(line: 427, column: 7, scope: !2624)
!2653 = !DILocation(line: 427, column: 11, scope: !2624)
!2654 = !DILocation(line: 427, column: 16, scope: !2624)
!2655 = !DILocation(line: 428, column: 12, scope: !2656)
!2656 = distinct !DILexicalBlock(scope: !2624, file: !891, line: 428, column: 11)
!2657 = !DILocation(line: 428, column: 16, scope: !2656)
!2658 = !DILocation(line: 428, column: 11, scope: !2624)
!2659 = !DILocation(line: 429, column: 2, scope: !2656)
!2660 = !DILocation(line: 430, column: 17, scope: !2624)
!2661 = !DILocation(line: 430, column: 21, scope: !2624)
!2662 = !DILocation(line: 430, column: 27, scope: !2624)
!2663 = !DILocation(line: 430, column: 32, scope: !2624)
!2664 = !DILocation(line: 430, column: 8, scope: !2624)
!2665 = !DILocation(line: 430, column: 15, scope: !2624)
!2666 = !DILocation(line: 431, column: 7, scope: !2624)
!2667 = !DILocation(line: 431, column: 11, scope: !2624)
!2668 = !DILocation(line: 431, column: 19, scope: !2624)
!2669 = distinct !{!2669, !2622, !2670}
!2670 = !DILocation(line: 432, column: 5, scope: !2582)
!2671 = !DILocation(line: 433, column: 1, scope: !2582)
!2672 = distinct !DISubprogram(name: "sese_add_exit_phis_edge", scope: !1, file: !1, line: 357, type: !2673, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2673 = !DISubroutineType(types: !2674)
!2674 = !{null, !1439, !657, !967, !967}
!2675 = !DILocalVariable(name: "exit", arg: 1, scope: !2672, file: !1, line: 357, type: !1439)
!2676 = !DILocation(line: 357, column: 38, scope: !2672)
!2677 = !DILocalVariable(name: "use", arg: 2, scope: !2672, file: !1, line: 357, type: !657)
!2678 = !DILocation(line: 357, column: 49, scope: !2672)
!2679 = !DILocalVariable(name: "false_e", arg: 3, scope: !2672, file: !1, line: 357, type: !967)
!2680 = !DILocation(line: 357, column: 59, scope: !2672)
!2681 = !DILocalVariable(name: "true_e", arg: 4, scope: !2672, file: !1, line: 357, type: !967)
!2682 = !DILocation(line: 357, column: 73, scope: !2672)
!2683 = !DILocalVariable(name: "phi", scope: !2672, file: !1, line: 359, type: !987)
!2684 = !DILocation(line: 359, column: 10, scope: !2672)
!2685 = !DILocation(line: 359, column: 33, scope: !2672)
!2686 = !DILocation(line: 359, column: 38, scope: !2672)
!2687 = !DILocation(line: 359, column: 16, scope: !2672)
!2688 = !DILocation(line: 361, column: 42, scope: !2672)
!2689 = !DILocation(line: 361, column: 23, scope: !2672)
!2690 = !DILocation(line: 361, column: 48, scope: !2672)
!2691 = !DILocation(line: 362, column: 32, scope: !2672)
!2692 = !DILocation(line: 362, column: 9, scope: !2672)
!2693 = !DILocation(line: 361, column: 3, scope: !2672)
!2694 = !DILocation(line: 363, column: 16, scope: !2672)
!2695 = !DILocation(line: 363, column: 21, scope: !2672)
!2696 = !DILocation(line: 363, column: 26, scope: !2672)
!2697 = !DILocation(line: 363, column: 3, scope: !2672)
!2698 = !DILocation(line: 364, column: 16, scope: !2672)
!2699 = !DILocation(line: 364, column: 21, scope: !2672)
!2700 = !DILocation(line: 364, column: 26, scope: !2672)
!2701 = !DILocation(line: 364, column: 3, scope: !2672)
!2702 = !DILocation(line: 365, column: 1, scope: !2672)
!2703 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !133, file: !133, line: 182, type: !2704, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2704 = !DISubroutineType(types: !2705)
!2705 = !{!657, !2706, !5}
!2706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2707, size: 64)
!2707 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1538)
!2708 = !DILocalVariable(name: "vec_", arg: 1, scope: !2703, file: !133, line: 182, type: !2706)
!2709 = !DILocation(line: 182, column: 1, scope: !2703)
!2710 = !DILocalVariable(name: "ix_", arg: 2, scope: !2703, file: !133, line: 182, type: !5)
!2711 = !DILocation(line: 0, scope: !2703)
!2712 = distinct !DISubprogram(name: "bmp_iter_next", scope: !891, file: !891, line: 382, type: !2713, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2713 = !DISubroutineType(types: !2714)
!2714 = !{null, !2492, !2496}
!2715 = !DILocalVariable(name: "bi", arg: 1, scope: !2712, file: !891, line: 382, type: !2492)
!2716 = !DILocation(line: 382, column: 33, scope: !2712)
!2717 = !DILocalVariable(name: "bit_no", arg: 2, scope: !2712, file: !891, line: 382, type: !2496)
!2718 = !DILocation(line: 382, column: 47, scope: !2712)
!2719 = !DILocation(line: 384, column: 3, scope: !2712)
!2720 = !DILocation(line: 384, column: 7, scope: !2712)
!2721 = !DILocation(line: 384, column: 12, scope: !2712)
!2722 = !DILocation(line: 385, column: 4, scope: !2712)
!2723 = !DILocation(line: 385, column: 11, scope: !2712)
!2724 = !DILocation(line: 386, column: 1, scope: !2712)
!2725 = distinct !DISubprogram(name: "set_rename", scope: !1, file: !1, line: 511, type: !2726, scopeLine: 512, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2726 = !DISubroutineType(types: !2727)
!2727 = !{null, !1471, !657, !657}
!2728 = !DILocalVariable(name: "map", arg: 1, scope: !2725, file: !1, line: 511, type: !1471)
!2729 = !DILocation(line: 511, column: 20, scope: !2725)
!2730 = !DILocalVariable(name: "old_name", arg: 2, scope: !2725, file: !1, line: 511, type: !657)
!2731 = !DILocation(line: 511, column: 30, scope: !2725)
!2732 = !DILocalVariable(name: "expr", arg: 3, scope: !2725, file: !1, line: 511, type: !657)
!2733 = !DILocation(line: 511, column: 45, scope: !2725)
!2734 = !DILocalVariable(name: "tmp", scope: !2725, file: !1, line: 513, type: !653)
!2735 = !DILocation(line: 513, column: 27, scope: !2725)
!2736 = !DILocalVariable(name: "slot", scope: !2725, file: !1, line: 514, type: !1494)
!2737 = !DILocation(line: 514, column: 8, scope: !2725)
!2738 = !DILocation(line: 516, column: 7, scope: !2739)
!2739 = distinct !DILexicalBlock(scope: !2725, file: !1, line: 516, column: 7)
!2740 = !DILocation(line: 516, column: 19, scope: !2739)
!2741 = !DILocation(line: 516, column: 16, scope: !2739)
!2742 = !DILocation(line: 516, column: 7, scope: !2725)
!2743 = !DILocation(line: 517, column: 5, scope: !2739)
!2744 = !DILocation(line: 519, column: 18, scope: !2725)
!2745 = !DILocation(line: 519, column: 7, scope: !2725)
!2746 = !DILocation(line: 519, column: 16, scope: !2725)
!2747 = !DILocation(line: 520, column: 26, scope: !2725)
!2748 = !DILocation(line: 520, column: 31, scope: !2725)
!2749 = !DILocation(line: 520, column: 10, scope: !2725)
!2750 = !DILocation(line: 520, column: 8, scope: !2725)
!2751 = !DILocation(line: 522, column: 8, scope: !2752)
!2752 = distinct !DILexicalBlock(scope: !2725, file: !1, line: 522, column: 7)
!2753 = !DILocation(line: 522, column: 7, scope: !2725)
!2754 = !DILocation(line: 523, column: 5, scope: !2752)
!2755 = !DILocation(line: 525, column: 8, scope: !2756)
!2756 = distinct !DILexicalBlock(scope: !2725, file: !1, line: 525, column: 7)
!2757 = !DILocation(line: 525, column: 7, scope: !2756)
!2758 = !DILocation(line: 525, column: 7, scope: !2725)
!2759 = !DILocation(line: 526, column: 12, scope: !2756)
!2760 = !DILocation(line: 526, column: 11, scope: !2756)
!2761 = !DILocation(line: 526, column: 5, scope: !2756)
!2762 = !DILocation(line: 528, column: 31, scope: !2725)
!2763 = !DILocation(line: 528, column: 41, scope: !2725)
!2764 = !DILocation(line: 528, column: 11, scope: !2725)
!2765 = !DILocation(line: 528, column: 4, scope: !2725)
!2766 = !DILocation(line: 528, column: 9, scope: !2725)
!2767 = !DILocation(line: 529, column: 1, scope: !2725)
!2768 = distinct !DISubprogram(name: "new_rename_map_elt", scope: !654, file: !654, line: 273, type: !2769, scopeLine: 274, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2769 = !DISubroutineType(types: !2770)
!2770 = !{!2066, !657, !657}
!2771 = !DILocalVariable(name: "old_name", arg: 1, scope: !2768, file: !654, line: 273, type: !657)
!2772 = !DILocation(line: 273, column: 26, scope: !2768)
!2773 = !DILocalVariable(name: "expr", arg: 2, scope: !2768, file: !654, line: 273, type: !657)
!2774 = !DILocation(line: 273, column: 41, scope: !2768)
!2775 = !DILocalVariable(name: "res", scope: !2768, file: !654, line: 275, type: !2066)
!2776 = !DILocation(line: 275, column: 18, scope: !2768)
!2777 = !DILocation(line: 277, column: 9, scope: !2768)
!2778 = !DILocation(line: 277, column: 7, scope: !2768)
!2779 = !DILocation(line: 278, column: 19, scope: !2768)
!2780 = !DILocation(line: 278, column: 3, scope: !2768)
!2781 = !DILocation(line: 278, column: 8, scope: !2768)
!2782 = !DILocation(line: 278, column: 17, scope: !2768)
!2783 = !DILocation(line: 279, column: 15, scope: !2768)
!2784 = !DILocation(line: 279, column: 3, scope: !2768)
!2785 = !DILocation(line: 279, column: 8, scope: !2768)
!2786 = !DILocation(line: 279, column: 13, scope: !2768)
!2787 = !DILocation(line: 281, column: 10, scope: !2768)
!2788 = !DILocation(line: 281, column: 3, scope: !2768)
!2789 = distinct !DISubprogram(name: "rename_nb_iterations", scope: !1, file: !1, line: 563, type: !2100, scopeLine: 564, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2790 = !DILocalVariable(name: "rename_map", arg: 1, scope: !2789, file: !1, line: 563, type: !1471)
!2791 = !DILocation(line: 563, column: 30, scope: !2789)
!2792 = !DILocalVariable(name: "li", scope: !2789, file: !1, line: 565, type: !2793)
!2793 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !328, line: 515, baseType: !2794)
!2794 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !328, line: 508, size: 128, elements: !2795)
!2795 = !{!2796, !2797}
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !2794, file: !328, line: 511, baseType: !2053, size: 64)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !2794, file: !328, line: 514, baseType: !5, size: 32, offset: 64)
!2798 = !DILocation(line: 565, column: 17, scope: !2789)
!2799 = !DILocalVariable(name: "loop", scope: !2789, file: !1, line: 566, type: !1202)
!2800 = !DILocation(line: 566, column: 16, scope: !2789)
!2801 = !DILocation(line: 568, column: 3, scope: !2802)
!2802 = distinct !DILexicalBlock(scope: !2789, file: !1, line: 568, column: 3)
!2803 = !DILocation(line: 568, column: 3, scope: !2804)
!2804 = distinct !DILexicalBlock(scope: !2802, file: !1, line: 568, column: 3)
!2805 = !DILocation(line: 569, column: 53, scope: !2804)
!2806 = !DILocation(line: 570, column: 11, scope: !2804)
!2807 = !DILocation(line: 570, column: 17, scope: !2804)
!2808 = !DILocation(line: 569, column: 27, scope: !2804)
!2809 = !DILocation(line: 569, column: 5, scope: !2804)
!2810 = !DILocation(line: 569, column: 11, scope: !2804)
!2811 = !DILocation(line: 569, column: 25, scope: !2804)
!2812 = distinct !{!2812, !2801, !2813}
!2813 = !DILocation(line: 570, column: 30, scope: !2802)
!2814 = !DILocation(line: 571, column: 1, scope: !2789)
!2815 = distinct !DISubprogram(name: "fel_init", scope: !328, file: !328, line: 535, type: !2816, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2816 = !DISubroutineType(types: !2817)
!2817 = !{null, !2818, !2313, !5}
!2818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2793, size: 64)
!2819 = !DILocalVariable(name: "li", arg: 1, scope: !2815, file: !328, line: 535, type: !2818)
!2820 = !DILocation(line: 535, column: 26, scope: !2815)
!2821 = !DILocalVariable(name: "loop", arg: 2, scope: !2815, file: !328, line: 535, type: !2313)
!2822 = !DILocation(line: 535, column: 38, scope: !2815)
!2823 = !DILocalVariable(name: "flags", arg: 3, scope: !2815, file: !328, line: 535, type: !5)
!2824 = !DILocation(line: 535, column: 53, scope: !2815)
!2825 = !DILocalVariable(name: "aloop", scope: !2815, file: !328, line: 537, type: !1202)
!2826 = !DILocation(line: 537, column: 16, scope: !2815)
!2827 = !DILocalVariable(name: "i", scope: !2815, file: !328, line: 538, type: !5)
!2828 = !DILocation(line: 538, column: 12, scope: !2815)
!2829 = !DILocalVariable(name: "mn", scope: !2815, file: !328, line: 539, type: !754)
!2830 = !DILocation(line: 539, column: 7, scope: !2815)
!2831 = !DILocation(line: 541, column: 3, scope: !2815)
!2832 = !DILocation(line: 541, column: 7, scope: !2815)
!2833 = !DILocation(line: 541, column: 11, scope: !2815)
!2834 = !DILocation(line: 542, column: 8, scope: !2835)
!2835 = distinct !DILexicalBlock(scope: !2815, file: !328, line: 542, column: 7)
!2836 = !DILocation(line: 542, column: 7, scope: !2815)
!2837 = !DILocation(line: 544, column: 7, scope: !2838)
!2838 = distinct !DILexicalBlock(scope: !2835, file: !328, line: 543, column: 5)
!2839 = !DILocation(line: 544, column: 11, scope: !2838)
!2840 = !DILocation(line: 544, column: 20, scope: !2838)
!2841 = !DILocation(line: 545, column: 8, scope: !2838)
!2842 = !DILocation(line: 545, column: 13, scope: !2838)
!2843 = !DILocation(line: 546, column: 7, scope: !2838)
!2844 = !DILocation(line: 549, column: 18, scope: !2815)
!2845 = !DILocation(line: 549, column: 3, scope: !2815)
!2846 = !DILocation(line: 549, column: 7, scope: !2815)
!2847 = !DILocation(line: 549, column: 16, scope: !2815)
!2848 = !DILocation(line: 550, column: 9, scope: !2815)
!2849 = !DILocation(line: 550, column: 15, scope: !2815)
!2850 = !DILocation(line: 550, column: 8, scope: !2815)
!2851 = !DILocation(line: 550, column: 6, scope: !2815)
!2852 = !DILocation(line: 552, column: 7, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2815, file: !328, line: 552, column: 7)
!2854 = !DILocation(line: 552, column: 13, scope: !2853)
!2855 = !DILocation(line: 552, column: 7, scope: !2815)
!2856 = !DILocation(line: 554, column: 14, scope: !2857)
!2857 = distinct !DILexicalBlock(scope: !2858, file: !328, line: 554, column: 7)
!2858 = distinct !DILexicalBlock(scope: !2853, file: !328, line: 553, column: 5)
!2859 = !DILocation(line: 554, column: 12, scope: !2857)
!2860 = !DILocation(line: 554, column: 19, scope: !2861)
!2861 = distinct !DILexicalBlock(scope: !2857, file: !328, line: 554, column: 7)
!2862 = !DILocation(line: 554, column: 7, scope: !2857)
!2863 = !DILocation(line: 555, column: 6, scope: !2864)
!2864 = distinct !DILexicalBlock(scope: !2861, file: !328, line: 555, column: 6)
!2865 = !DILocation(line: 555, column: 12, scope: !2864)
!2866 = !DILocation(line: 556, column: 6, scope: !2864)
!2867 = !DILocation(line: 556, column: 9, scope: !2864)
!2868 = !DILocation(line: 556, column: 16, scope: !2864)
!2869 = !DILocation(line: 556, column: 22, scope: !2864)
!2870 = !DILocation(line: 557, column: 6, scope: !2864)
!2871 = !DILocation(line: 557, column: 9, scope: !2864)
!2872 = !DILocation(line: 557, column: 16, scope: !2864)
!2873 = !DILocation(line: 557, column: 23, scope: !2864)
!2874 = !DILocation(line: 557, column: 20, scope: !2864)
!2875 = !DILocation(line: 555, column: 6, scope: !2861)
!2876 = !DILocation(line: 558, column: 4, scope: !2864)
!2877 = !DILocation(line: 554, column: 75, scope: !2861)
!2878 = !DILocation(line: 554, column: 7, scope: !2861)
!2879 = distinct !{!2879, !2862, !2880}
!2880 = !DILocation(line: 558, column: 4, scope: !2857)
!2881 = !DILocation(line: 559, column: 5, scope: !2858)
!2882 = !DILocation(line: 560, column: 12, scope: !2883)
!2883 = distinct !DILexicalBlock(scope: !2853, file: !328, line: 560, column: 12)
!2884 = !DILocation(line: 560, column: 18, scope: !2883)
!2885 = !DILocation(line: 560, column: 12, scope: !2853)
!2886 = !DILocation(line: 563, column: 20, scope: !2887)
!2887 = distinct !DILexicalBlock(scope: !2888, file: !328, line: 563, column: 7)
!2888 = distinct !DILexicalBlock(scope: !2883, file: !328, line: 561, column: 5)
!2889 = !DILocation(line: 563, column: 35, scope: !2887)
!2890 = !DILocation(line: 563, column: 18, scope: !2887)
!2891 = !DILocation(line: 563, column: 12, scope: !2887)
!2892 = !DILocation(line: 564, column: 5, scope: !2893)
!2893 = distinct !DILexicalBlock(scope: !2887, file: !328, line: 563, column: 7)
!2894 = !DILocation(line: 564, column: 12, scope: !2893)
!2895 = !DILocation(line: 564, column: 18, scope: !2893)
!2896 = !DILocation(line: 563, column: 7, scope: !2887)
!2897 = !DILocation(line: 566, column: 2, scope: !2893)
!2898 = !DILocation(line: 565, column: 13, scope: !2893)
!2899 = !DILocation(line: 565, column: 20, scope: !2893)
!2900 = !DILocation(line: 565, column: 11, scope: !2893)
!2901 = !DILocation(line: 563, column: 7, scope: !2893)
!2902 = distinct !{!2902, !2896, !2903}
!2903 = !DILocation(line: 566, column: 2, scope: !2887)
!2904 = !DILocation(line: 568, column: 7, scope: !2888)
!2905 = !DILocation(line: 570, column: 8, scope: !2906)
!2906 = distinct !DILexicalBlock(scope: !2907, file: !328, line: 570, column: 8)
!2907 = distinct !DILexicalBlock(scope: !2888, file: !328, line: 569, column: 2)
!2908 = !DILocation(line: 570, column: 15, scope: !2906)
!2909 = !DILocation(line: 570, column: 22, scope: !2906)
!2910 = !DILocation(line: 570, column: 19, scope: !2906)
!2911 = !DILocation(line: 570, column: 8, scope: !2907)
!2912 = !DILocation(line: 571, column: 6, scope: !2906)
!2913 = !DILocation(line: 573, column: 8, scope: !2914)
!2914 = distinct !DILexicalBlock(scope: !2907, file: !328, line: 573, column: 8)
!2915 = !DILocation(line: 573, column: 15, scope: !2914)
!2916 = !DILocation(line: 573, column: 8, scope: !2907)
!2917 = !DILocation(line: 575, column: 21, scope: !2918)
!2918 = distinct !DILexicalBlock(scope: !2919, file: !328, line: 575, column: 8)
!2919 = distinct !DILexicalBlock(scope: !2914, file: !328, line: 574, column: 6)
!2920 = !DILocation(line: 575, column: 28, scope: !2918)
!2921 = !DILocation(line: 575, column: 19, scope: !2918)
!2922 = !DILocation(line: 575, column: 13, scope: !2918)
!2923 = !DILocation(line: 576, column: 6, scope: !2924)
!2924 = distinct !DILexicalBlock(scope: !2918, file: !328, line: 575, column: 8)
!2925 = !DILocation(line: 576, column: 13, scope: !2924)
!2926 = !DILocation(line: 576, column: 19, scope: !2924)
!2927 = !DILocation(line: 575, column: 8, scope: !2918)
!2928 = !DILocation(line: 578, column: 3, scope: !2924)
!2929 = !DILocation(line: 577, column: 14, scope: !2924)
!2930 = !DILocation(line: 577, column: 21, scope: !2924)
!2931 = !DILocation(line: 577, column: 12, scope: !2924)
!2932 = !DILocation(line: 575, column: 8, scope: !2924)
!2933 = distinct !{!2933, !2927, !2934}
!2934 = !DILocation(line: 578, column: 3, scope: !2918)
!2935 = !DILocation(line: 579, column: 6, scope: !2919)
!2936 = !DILocation(line: 580, column: 26, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !2914, file: !328, line: 580, column: 13)
!2938 = !DILocation(line: 580, column: 14, scope: !2937)
!2939 = !DILocation(line: 580, column: 13, scope: !2914)
!2940 = !DILocation(line: 581, column: 6, scope: !2937)
!2941 = !DILocation(line: 583, column: 26, scope: !2937)
!2942 = !DILocation(line: 583, column: 14, scope: !2937)
!2943 = !DILocation(line: 583, column: 12, scope: !2937)
!2944 = distinct !{!2944, !2904, !2945}
!2945 = !DILocation(line: 584, column: 2, scope: !2888)
!2946 = !DILocation(line: 585, column: 5, scope: !2888)
!2947 = !DILocation(line: 589, column: 15, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2883, file: !328, line: 587, column: 5)
!2949 = !DILocation(line: 589, column: 30, scope: !2948)
!2950 = !DILocation(line: 589, column: 13, scope: !2948)
!2951 = !DILocation(line: 590, column: 7, scope: !2948)
!2952 = !DILocation(line: 592, column: 8, scope: !2953)
!2953 = distinct !DILexicalBlock(scope: !2954, file: !328, line: 592, column: 8)
!2954 = distinct !DILexicalBlock(scope: !2948, file: !328, line: 591, column: 2)
!2955 = !DILocation(line: 592, column: 15, scope: !2953)
!2956 = !DILocation(line: 592, column: 22, scope: !2953)
!2957 = !DILocation(line: 592, column: 19, scope: !2953)
!2958 = !DILocation(line: 592, column: 8, scope: !2954)
!2959 = !DILocation(line: 593, column: 6, scope: !2953)
!2960 = !DILocation(line: 595, column: 8, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2954, file: !328, line: 595, column: 8)
!2962 = !DILocation(line: 595, column: 15, scope: !2961)
!2963 = !DILocation(line: 595, column: 21, scope: !2961)
!2964 = !DILocation(line: 595, column: 8, scope: !2954)
!2965 = !DILocation(line: 596, column: 14, scope: !2961)
!2966 = !DILocation(line: 596, column: 21, scope: !2961)
!2967 = !DILocation(line: 596, column: 12, scope: !2961)
!2968 = !DILocation(line: 596, column: 6, scope: !2961)
!2969 = !DILocation(line: 599, column: 8, scope: !2970)
!2970 = distinct !DILexicalBlock(scope: !2961, file: !328, line: 598, column: 6)
!2971 = !DILocation(line: 599, column: 15, scope: !2970)
!2972 = !DILocation(line: 599, column: 21, scope: !2970)
!2973 = !DILocation(line: 599, column: 29, scope: !2970)
!2974 = !DILocation(line: 599, column: 32, scope: !2970)
!2975 = !DILocation(line: 599, column: 39, scope: !2970)
!2976 = !DILocation(line: 599, column: 44, scope: !2970)
!2977 = !DILocation(line: 0, scope: !2970)
!2978 = !DILocation(line: 600, column: 23, scope: !2970)
!2979 = !DILocation(line: 600, column: 11, scope: !2970)
!2980 = !DILocation(line: 600, column: 9, scope: !2970)
!2981 = distinct !{!2981, !2969, !2982}
!2982 = !DILocation(line: 600, column: 28, scope: !2970)
!2983 = !DILocation(line: 601, column: 12, scope: !2984)
!2984 = distinct !DILexicalBlock(scope: !2970, file: !328, line: 601, column: 12)
!2985 = !DILocation(line: 601, column: 18, scope: !2984)
!2986 = !DILocation(line: 601, column: 12, scope: !2970)
!2987 = !DILocation(line: 602, column: 3, scope: !2984)
!2988 = !DILocation(line: 603, column: 16, scope: !2970)
!2989 = !DILocation(line: 603, column: 23, scope: !2970)
!2990 = !DILocation(line: 603, column: 14, scope: !2970)
!2991 = distinct !{!2991, !2951, !2992}
!2992 = !DILocation(line: 605, column: 2, scope: !2948)
!2993 = !DILocation(line: 608, column: 13, scope: !2815)
!2994 = !DILocation(line: 608, column: 17, scope: !2815)
!2995 = !DILocation(line: 608, column: 3, scope: !2815)
!2996 = !DILocation(line: 609, column: 1, scope: !2815)
!2997 = distinct !DISubprogram(name: "rename_variables_in_expr", scope: !1, file: !1, line: 535, type: !2998, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!2998 = !DISubroutineType(types: !2999)
!2999 = !{!657, !1471, !657}
!3000 = !DILocalVariable(name: "m", arg: 1, scope: !2997, file: !1, line: 535, type: !1471)
!3001 = !DILocation(line: 535, column: 34, scope: !2997)
!3002 = !DILocalVariable(name: "t", arg: 2, scope: !2997, file: !1, line: 535, type: !657)
!3003 = !DILocation(line: 535, column: 42, scope: !2997)
!3004 = !DILocation(line: 537, column: 8, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !2997, file: !1, line: 537, column: 7)
!3006 = !DILocation(line: 537, column: 7, scope: !2997)
!3007 = !DILocation(line: 538, column: 12, scope: !3005)
!3008 = !DILocation(line: 538, column: 5, scope: !3005)
!3009 = !DILocation(line: 540, column: 6, scope: !3010)
!3010 = distinct !DILexicalBlock(scope: !2997, file: !1, line: 540, column: 6)
!3011 = !DILocation(line: 540, column: 20, scope: !3010)
!3012 = !DILocation(line: 540, column: 6, scope: !2997)
!3013 = !DILocation(line: 541, column: 23, scope: !3010)
!3014 = !DILocation(line: 541, column: 26, scope: !3010)
!3015 = !DILocation(line: 541, column: 11, scope: !3010)
!3016 = !DILocation(line: 541, column: 4, scope: !3010)
!3017 = !DILocation(line: 543, column: 11, scope: !2997)
!3018 = !DILocation(line: 543, column: 3, scope: !2997)
!3019 = !DILocation(line: 546, column: 55, scope: !3020)
!3020 = distinct !DILexicalBlock(scope: !2997, file: !1, line: 544, column: 5)
!3021 = !DILocation(line: 546, column: 58, scope: !3020)
!3022 = !DILocation(line: 546, column: 29, scope: !3020)
!3023 = !DILocation(line: 546, column: 7, scope: !3020)
!3024 = !DILocation(line: 546, column: 27, scope: !3020)
!3025 = !DILocation(line: 549, column: 55, scope: !3020)
!3026 = !DILocation(line: 549, column: 58, scope: !3020)
!3027 = !DILocation(line: 549, column: 29, scope: !3020)
!3028 = !DILocation(line: 549, column: 7, scope: !3020)
!3029 = !DILocation(line: 549, column: 27, scope: !3020)
!3030 = !DILocation(line: 552, column: 55, scope: !3020)
!3031 = !DILocation(line: 552, column: 58, scope: !3020)
!3032 = !DILocation(line: 552, column: 29, scope: !3020)
!3033 = !DILocation(line: 552, column: 7, scope: !3020)
!3034 = !DILocation(line: 552, column: 27, scope: !3020)
!3035 = !DILocation(line: 555, column: 14, scope: !3020)
!3036 = !DILocation(line: 555, column: 7, scope: !3020)
!3037 = !DILocation(line: 557, column: 1, scope: !2997)
!3038 = distinct !DISubprogram(name: "fel_next", scope: !328, file: !328, line: 518, type: !3039, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3039 = !DISubroutineType(types: !3040)
!3040 = !{null, !2818, !2313}
!3041 = !DILocalVariable(name: "li", arg: 1, scope: !3038, file: !328, line: 518, type: !2818)
!3042 = !DILocation(line: 518, column: 26, scope: !3038)
!3043 = !DILocalVariable(name: "loop", arg: 2, scope: !3038, file: !328, line: 518, type: !2313)
!3044 = !DILocation(line: 518, column: 38, scope: !3038)
!3045 = !DILocalVariable(name: "anum", scope: !3038, file: !328, line: 520, type: !754)
!3046 = !DILocation(line: 520, column: 7, scope: !3038)
!3047 = !DILocation(line: 522, column: 3, scope: !3038)
!3048 = !DILocation(line: 522, column: 10, scope: !3038)
!3049 = !DILocation(line: 524, column: 7, scope: !3050)
!3050 = distinct !DILexicalBlock(scope: !3038, file: !328, line: 523, column: 5)
!3051 = !DILocation(line: 524, column: 11, scope: !3050)
!3052 = !DILocation(line: 524, column: 14, scope: !3050)
!3053 = !DILocation(line: 525, column: 25, scope: !3050)
!3054 = !DILocation(line: 525, column: 15, scope: !3050)
!3055 = !DILocation(line: 525, column: 8, scope: !3050)
!3056 = !DILocation(line: 525, column: 13, scope: !3050)
!3057 = !DILocation(line: 526, column: 12, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3050, file: !328, line: 526, column: 11)
!3059 = !DILocation(line: 526, column: 11, scope: !3058)
!3060 = !DILocation(line: 526, column: 11, scope: !3050)
!3061 = !DILocation(line: 527, column: 2, scope: !3058)
!3062 = distinct !{!3062, !3047, !3063}
!3063 = !DILocation(line: 528, column: 5, scope: !3038)
!3064 = !DILocation(line: 530, column: 3, scope: !3038)
!3065 = !DILocation(line: 531, column: 4, scope: !3038)
!3066 = !DILocation(line: 531, column: 9, scope: !3038)
!3067 = !DILocation(line: 532, column: 1, scope: !3038)
!3068 = distinct !DISubprogram(name: "rename_sese_parameters", scope: !1, file: !1, line: 577, type: !3069, scopeLine: 578, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3069 = !DISubroutineType(types: !3070)
!3070 = !{null, !1471, !2045}
!3071 = !DILocalVariable(name: "rename_map", arg: 1, scope: !3068, file: !1, line: 577, type: !1471)
!3072 = !DILocation(line: 577, column: 32, scope: !3068)
!3073 = !DILocalVariable(name: "region", arg: 2, scope: !3068, file: !1, line: 577, type: !2045)
!3074 = !DILocation(line: 577, column: 49, scope: !3068)
!3075 = !DILocalVariable(name: "i", scope: !3068, file: !1, line: 579, type: !754)
!3076 = !DILocation(line: 579, column: 7, scope: !3068)
!3077 = !DILocalVariable(name: "p", scope: !3068, file: !1, line: 580, type: !657)
!3078 = !DILocation(line: 580, column: 8, scope: !3068)
!3079 = !DILocation(line: 582, column: 10, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3068, file: !1, line: 582, column: 3)
!3081 = !DILocation(line: 582, column: 8, scope: !3080)
!3082 = !DILocation(line: 582, column: 15, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !3080, file: !1, line: 582, column: 3)
!3084 = !DILocation(line: 582, column: 3, scope: !3080)
!3085 = !DILocation(line: 583, column: 5, scope: !3083)
!3086 = !DILocation(line: 582, column: 64, scope: !3083)
!3087 = !DILocation(line: 582, column: 3, scope: !3083)
!3088 = distinct !{!3088, !3084, !3089}
!3089 = !DILocation(line: 583, column: 5, scope: !3080)
!3090 = !DILocation(line: 585, column: 1, scope: !3068)
!3091 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !133, file: !133, line: 182, type: !3092, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3092 = !DISubroutineType(types: !3093)
!3093 = !{!754, !2706, !5, !1021}
!3094 = !DILocalVariable(name: "vec_", arg: 1, scope: !3091, file: !133, line: 182, type: !2706)
!3095 = !DILocation(line: 182, column: 1, scope: !3091)
!3096 = !DILocalVariable(name: "ix_", arg: 2, scope: !3091, file: !133, line: 182, type: !5)
!3097 = !DILocalVariable(name: "ptr", arg: 3, scope: !3091, file: !133, line: 182, type: !1021)
!3098 = !DILocation(line: 182, column: 1, scope: !3099)
!3099 = distinct !DILexicalBlock(scope: !3091, file: !133, line: 182, column: 1)
!3100 = !DILocation(line: 182, column: 1, scope: !3101)
!3101 = distinct !DILexicalBlock(scope: !3099, file: !133, line: 182, column: 1)
!3102 = !DILocation(line: 182, column: 1, scope: !3103)
!3103 = distinct !DILexicalBlock(scope: !3099, file: !133, line: 182, column: 1)
!3104 = distinct !DISubprogram(name: "VEC_tree_base_replace", scope: !133, file: !133, line: 182, type: !3105, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3105 = !DISubroutineType(types: !3106)
!3106 = !{!657, !3107, !5, !657}
!3107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1538, size: 64)
!3108 = !DILocalVariable(name: "vec_", arg: 1, scope: !3104, file: !133, line: 182, type: !3107)
!3109 = !DILocation(line: 182, column: 1, scope: !3104)
!3110 = !DILocalVariable(name: "ix_", arg: 2, scope: !3104, file: !133, line: 182, type: !5)
!3111 = !DILocalVariable(name: "obj_", arg: 3, scope: !3104, file: !133, line: 182, type: !657)
!3112 = !DILocalVariable(name: "old_obj_", scope: !3104, file: !133, line: 182, type: !657)
!3113 = distinct !DISubprogram(name: "sese_adjust_liveout_phis", scope: !1, file: !1, line: 601, type: !3114, scopeLine: 603, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3114 = !DISubroutineType(types: !3115)
!3115 = !{null, !2045, !1471, !1439, !967, !967}
!3116 = !DILocalVariable(name: "region", arg: 1, scope: !3113, file: !1, line: 601, type: !2045)
!3117 = !DILocation(line: 601, column: 32, scope: !3113)
!3118 = !DILocalVariable(name: "rename_map", arg: 2, scope: !3113, file: !1, line: 601, type: !1471)
!3119 = !DILocation(line: 601, column: 47, scope: !3113)
!3120 = !DILocalVariable(name: "bb", arg: 3, scope: !3113, file: !1, line: 601, type: !1439)
!3121 = !DILocation(line: 601, column: 71, scope: !3113)
!3122 = !DILocalVariable(name: "false_e", arg: 4, scope: !3113, file: !1, line: 602, type: !967)
!3123 = !DILocation(line: 602, column: 11, scope: !3113)
!3124 = !DILocalVariable(name: "true_e", arg: 5, scope: !3113, file: !1, line: 602, type: !967)
!3125 = !DILocation(line: 602, column: 25, scope: !3113)
!3126 = !DILocalVariable(name: "si", scope: !3113, file: !1, line: 604, type: !3127)
!3127 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !528, line: 265, baseType: !3128)
!3128 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !528, line: 254, size: 192, elements: !3129)
!3129 = !{!3130, !3131, !3132}
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3128, file: !528, line: 257, baseType: !982, size: 64)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3128, file: !528, line: 263, baseType: !977, size: 64, offset: 64)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3128, file: !528, line: 264, baseType: !1439, size: 64, offset: 128)
!3133 = !DILocation(line: 604, column: 24, scope: !3113)
!3134 = !DILocation(line: 606, column: 29, scope: !3135)
!3135 = distinct !DILexicalBlock(scope: !3113, file: !1, line: 606, column: 3)
!3136 = !DILocation(line: 606, column: 13, scope: !3135)
!3137 = !DILocation(line: 606, column: 8, scope: !3135)
!3138 = !DILocation(line: 606, column: 35, scope: !3139)
!3139 = distinct !DILexicalBlock(scope: !3135, file: !1, line: 606, column: 3)
!3140 = !DILocation(line: 606, column: 34, scope: !3139)
!3141 = !DILocation(line: 606, column: 3, scope: !3135)
!3142 = !DILocalVariable(name: "i", scope: !3143, file: !1, line: 608, type: !5)
!3143 = distinct !DILexicalBlock(scope: !3139, file: !1, line: 607, column: 5)
!3144 = !DILocation(line: 608, column: 16, scope: !3143)
!3145 = !DILocalVariable(name: "false_i", scope: !3143, file: !1, line: 609, type: !5)
!3146 = !DILocation(line: 609, column: 16, scope: !3143)
!3147 = !DILocalVariable(name: "phi", scope: !3143, file: !1, line: 610, type: !987)
!3148 = !DILocation(line: 610, column: 14, scope: !3143)
!3149 = !DILocation(line: 610, column: 20, scope: !3143)
!3150 = !DILocalVariable(name: "res", scope: !3143, file: !1, line: 611, type: !657)
!3151 = !DILocation(line: 611, column: 12, scope: !3143)
!3152 = !DILocation(line: 611, column: 37, scope: !3143)
!3153 = !DILocation(line: 611, column: 18, scope: !3143)
!3154 = !DILocation(line: 613, column: 27, scope: !3155)
!3155 = distinct !DILexicalBlock(scope: !3143, file: !1, line: 613, column: 11)
!3156 = !DILocation(line: 613, column: 12, scope: !3155)
!3157 = !DILocation(line: 613, column: 11, scope: !3143)
!3158 = !DILocation(line: 615, column: 22, scope: !3159)
!3159 = distinct !DILexicalBlock(scope: !3155, file: !1, line: 614, column: 2)
!3160 = !DILocation(line: 615, column: 30, scope: !3159)
!3161 = !DILocation(line: 615, column: 35, scope: !3159)
!3162 = !DILocation(line: 615, column: 4, scope: !3159)
!3163 = !DILocation(line: 616, column: 4, scope: !3159)
!3164 = !DILocation(line: 619, column: 14, scope: !3165)
!3165 = distinct !DILexicalBlock(scope: !3143, file: !1, line: 619, column: 7)
!3166 = !DILocation(line: 619, column: 12, scope: !3165)
!3167 = !DILocation(line: 619, column: 19, scope: !3168)
!3168 = distinct !DILexicalBlock(scope: !3165, file: !1, line: 619, column: 7)
!3169 = !DILocation(line: 619, column: 44, scope: !3168)
!3170 = !DILocation(line: 619, column: 23, scope: !3168)
!3171 = !DILocation(line: 619, column: 21, scope: !3168)
!3172 = !DILocation(line: 619, column: 7, scope: !3165)
!3173 = !DILocation(line: 620, column: 27, scope: !3174)
!3174 = distinct !DILexicalBlock(scope: !3168, file: !1, line: 620, column: 6)
!3175 = !DILocation(line: 620, column: 32, scope: !3174)
!3176 = !DILocation(line: 620, column: 6, scope: !3174)
!3177 = !DILocation(line: 620, column: 38, scope: !3174)
!3178 = !DILocation(line: 620, column: 35, scope: !3174)
!3179 = !DILocation(line: 620, column: 6, scope: !3168)
!3180 = !DILocation(line: 622, column: 16, scope: !3181)
!3181 = distinct !DILexicalBlock(scope: !3174, file: !1, line: 621, column: 4)
!3182 = !DILocation(line: 622, column: 14, scope: !3181)
!3183 = !DILocation(line: 623, column: 6, scope: !3181)
!3184 = !DILocation(line: 619, column: 51, scope: !3168)
!3185 = !DILocation(line: 619, column: 7, scope: !3168)
!3186 = distinct !{!3186, !3172, !3187}
!3187 = !DILocation(line: 624, column: 4, scope: !3165)
!3188 = !DILocation(line: 626, column: 14, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3143, file: !1, line: 626, column: 7)
!3190 = !DILocation(line: 626, column: 12, scope: !3189)
!3191 = !DILocation(line: 626, column: 19, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3189, file: !1, line: 626, column: 7)
!3193 = !DILocation(line: 626, column: 44, scope: !3192)
!3194 = !DILocation(line: 626, column: 23, scope: !3192)
!3195 = !DILocation(line: 626, column: 21, scope: !3192)
!3196 = !DILocation(line: 626, column: 7, scope: !3189)
!3197 = !DILocation(line: 627, column: 27, scope: !3198)
!3198 = distinct !DILexicalBlock(scope: !3192, file: !1, line: 627, column: 6)
!3199 = !DILocation(line: 627, column: 32, scope: !3198)
!3200 = !DILocation(line: 627, column: 6, scope: !3198)
!3201 = !DILocation(line: 627, column: 38, scope: !3198)
!3202 = !DILocation(line: 627, column: 35, scope: !3198)
!3203 = !DILocation(line: 627, column: 6, scope: !3192)
!3204 = !DILocalVariable(name: "old_name", scope: !3205, file: !1, line: 629, type: !657)
!3205 = distinct !DILexicalBlock(scope: !3198, file: !1, line: 628, column: 4)
!3206 = !DILocation(line: 629, column: 11, scope: !3205)
!3207 = !DILocation(line: 629, column: 42, scope: !3205)
!3208 = !DILocation(line: 629, column: 47, scope: !3205)
!3209 = !DILocation(line: 629, column: 22, scope: !3205)
!3210 = !DILocalVariable(name: "expr", scope: !3205, file: !1, line: 630, type: !657)
!3211 = !DILocation(line: 630, column: 11, scope: !3205)
!3212 = !DILocation(line: 630, column: 30, scope: !3205)
!3213 = !DILocation(line: 630, column: 42, scope: !3205)
!3214 = !DILocation(line: 630, column: 18, scope: !3205)
!3215 = !DILocalVariable(name: "stmts", scope: !3205, file: !1, line: 631, type: !977)
!3216 = !DILocation(line: 631, column: 17, scope: !3205)
!3217 = !DILocation(line: 633, column: 6, scope: !3205)
!3218 = !DILocation(line: 635, column: 10, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3205, file: !1, line: 635, column: 10)
!3220 = !DILocation(line: 635, column: 27, scope: !3219)
!3221 = !DILocation(line: 636, column: 3, scope: !3219)
!3222 = !DILocation(line: 636, column: 21, scope: !3219)
!3223 = !DILocation(line: 636, column: 6, scope: !3219)
!3224 = !DILocation(line: 635, column: 10, scope: !3205)
!3225 = !DILocalVariable(name: "type", scope: !3226, file: !1, line: 638, type: !657)
!3226 = distinct !DILexicalBlock(scope: !3219, file: !1, line: 637, column: 8)
!3227 = !DILocation(line: 638, column: 8, scope: !3226)
!3228 = !DILocation(line: 638, column: 15, scope: !3226)
!3229 = !DILocalVariable(name: "var", scope: !3226, file: !1, line: 639, type: !657)
!3230 = !DILocation(line: 639, column: 8, scope: !3226)
!3231 = !DILocation(line: 639, column: 30, scope: !3226)
!3232 = !DILocation(line: 639, column: 14, scope: !3226)
!3233 = !DILocation(line: 641, column: 10, scope: !3226)
!3234 = !DILocation(line: 641, column: 8, scope: !3226)
!3235 = !DILocation(line: 642, column: 32, scope: !3226)
!3236 = !DILocation(line: 642, column: 10, scope: !3226)
!3237 = !DILocation(line: 642, column: 8, scope: !3226)
!3238 = !DILocation(line: 643, column: 37, scope: !3226)
!3239 = !DILocation(line: 643, column: 45, scope: !3226)
!3240 = !DILocation(line: 643, column: 3, scope: !3226)
!3241 = !DILocation(line: 644, column: 8, scope: !3226)
!3242 = !DILocation(line: 646, column: 6, scope: !3205)
!3243 = !DILocation(line: 647, column: 18, scope: !3205)
!3244 = !DILocation(line: 647, column: 30, scope: !3205)
!3245 = !DILocation(line: 647, column: 40, scope: !3205)
!3246 = !DILocation(line: 647, column: 6, scope: !3205)
!3247 = !DILocation(line: 648, column: 4, scope: !3205)
!3248 = !DILocation(line: 626, column: 51, scope: !3192)
!3249 = !DILocation(line: 626, column: 7, scope: !3192)
!3250 = distinct !{!3250, !3196, !3251}
!3251 = !DILocation(line: 648, column: 4, scope: !3189)
!3252 = !DILocation(line: 649, column: 5, scope: !3143)
!3253 = !DILocation(line: 606, column: 51, scope: !3139)
!3254 = !DILocation(line: 606, column: 3, scope: !3139)
!3255 = distinct !{!3255, !3141, !3256}
!3256 = !DILocation(line: 649, column: 5, scope: !3135)
!3257 = !DILocation(line: 650, column: 1, scope: !3113)
!3258 = distinct !DISubprogram(name: "gsi_end_p", scope: !528, file: !528, line: 4467, type: !3259, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3259 = !DISubroutineType(types: !3260)
!3260 = !{!777, !3127}
!3261 = !DILocalVariable(name: "i", arg: 1, scope: !3258, file: !528, line: 4467, type: !3127)
!3262 = !DILocation(line: 4467, column: 33, scope: !3258)
!3263 = !DILocation(line: 4469, column: 12, scope: !3258)
!3264 = !DILocation(line: 4469, column: 16, scope: !3258)
!3265 = !DILocation(line: 4469, column: 10, scope: !3258)
!3266 = !DILocation(line: 4469, column: 3, scope: !3258)
!3267 = distinct !DISubprogram(name: "gsi_stmt", scope: !528, file: !528, line: 4501, type: !3268, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3268 = !DISubroutineType(types: !3269)
!3269 = !{!987, !3127}
!3270 = !DILocalVariable(name: "i", arg: 1, scope: !3267, file: !528, line: 4501, type: !3127)
!3271 = !DILocation(line: 4501, column: 32, scope: !3267)
!3272 = !DILocation(line: 4503, column: 12, scope: !3267)
!3273 = !DILocation(line: 4503, column: 17, scope: !3267)
!3274 = !DILocation(line: 4503, column: 3, scope: !3267)
!3275 = distinct !DISubprogram(name: "gimple_phi_result", scope: !528, file: !528, line: 3071, type: !3276, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3276 = !DISubroutineType(types: !3277)
!3277 = !{!657, !3278}
!3278 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !658, line: 60, baseType: !2093)
!3279 = !DILocalVariable(name: "gs", arg: 1, scope: !3275, file: !528, line: 3071, type: !3278)
!3280 = !DILocation(line: 3071, column: 33, scope: !3275)
!3281 = !DILocation(line: 3074, column: 10, scope: !3275)
!3282 = !DILocation(line: 3074, column: 14, scope: !3275)
!3283 = !DILocation(line: 3074, column: 25, scope: !3275)
!3284 = !DILocation(line: 3074, column: 3, scope: !3275)
!3285 = distinct !DISubprogram(name: "sese_adjust_vphi", scope: !1, file: !1, line: 461, type: !3286, scopeLine: 462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3286 = !DISubroutineType(types: !3287)
!3287 = !{null, !2045, !987, !967}
!3288 = !DILocalVariable(name: "region", arg: 1, scope: !3285, file: !1, line: 461, type: !2045)
!3289 = !DILocation(line: 461, column: 24, scope: !3285)
!3290 = !DILocalVariable(name: "phi", arg: 2, scope: !3285, file: !1, line: 461, type: !987)
!3291 = !DILocation(line: 461, column: 39, scope: !3285)
!3292 = !DILocalVariable(name: "true_e", arg: 3, scope: !3285, file: !1, line: 461, type: !967)
!3293 = !DILocation(line: 461, column: 49, scope: !3285)
!3294 = !DILocalVariable(name: "i", scope: !3285, file: !1, line: 463, type: !5)
!3295 = !DILocation(line: 463, column: 12, scope: !3285)
!3296 = !DILocation(line: 465, column: 3, scope: !3285)
!3297 = !DILocation(line: 467, column: 10, scope: !3298)
!3298 = distinct !DILexicalBlock(scope: !3285, file: !1, line: 467, column: 3)
!3299 = !DILocation(line: 467, column: 8, scope: !3298)
!3300 = !DILocation(line: 467, column: 15, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3298, file: !1, line: 467, column: 3)
!3302 = !DILocation(line: 467, column: 40, scope: !3301)
!3303 = !DILocation(line: 467, column: 19, scope: !3301)
!3304 = !DILocation(line: 467, column: 17, scope: !3301)
!3305 = !DILocation(line: 467, column: 3, scope: !3298)
!3306 = !DILocation(line: 468, column: 30, scope: !3307)
!3307 = distinct !DILexicalBlock(scope: !3301, file: !1, line: 468, column: 9)
!3308 = !DILocation(line: 468, column: 35, scope: !3307)
!3309 = !DILocation(line: 468, column: 9, scope: !3307)
!3310 = !DILocation(line: 468, column: 41, scope: !3307)
!3311 = !DILocation(line: 468, column: 38, scope: !3307)
!3312 = !DILocation(line: 468, column: 9, scope: !3301)
!3313 = !DILocalVariable(name: "true_arg", scope: !3314, file: !1, line: 470, type: !657)
!3314 = distinct !DILexicalBlock(scope: !3307, file: !1, line: 469, column: 7)
!3315 = !DILocation(line: 470, column: 7, scope: !3314)
!3316 = !DILocalVariable(name: "false_arg", scope: !3314, file: !1, line: 470, type: !657)
!3317 = !DILocation(line: 470, column: 17, scope: !3314)
!3318 = !DILocalVariable(name: "before_scop_arg", scope: !3314, file: !1, line: 470, type: !657)
!3319 = !DILocation(line: 470, column: 28, scope: !3314)
!3320 = !DILocalVariable(name: "visited", scope: !3314, file: !1, line: 471, type: !3321)
!3321 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !3322, line: 45, baseType: !3323)
!3322 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3324, size: 64)
!3324 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !3322, line: 39, size: 192, elements: !3325)
!3325 = !{!3326, !3328, !3329, !3330}
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !3324, file: !3322, line: 41, baseType: !3327, size: 64)
!3327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !777, size: 64)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !3324, file: !3322, line: 42, baseType: !5, size: 32, offset: 64)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3324, file: !3322, line: 43, baseType: !5, size: 32, offset: 96)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3324, file: !3322, line: 44, baseType: !3331, size: 64, offset: 128)
!3331 = !DICompositeType(tag: DW_TAG_array_type, baseType: !711, size: 64, elements: !758)
!3332 = !DILocation(line: 471, column: 10, scope: !3314)
!3333 = !DILocation(line: 473, column: 33, scope: !3314)
!3334 = !DILocation(line: 473, column: 38, scope: !3314)
!3335 = !DILocation(line: 473, column: 13, scope: !3314)
!3336 = !DILocation(line: 473, column: 11, scope: !3314)
!3337 = !DILocation(line: 474, column: 7, scope: !3338)
!3338 = distinct !DILexicalBlock(scope: !3314, file: !1, line: 474, column: 6)
!3339 = !DILocation(line: 474, column: 6, scope: !3314)
!3340 = !DILocation(line: 475, column: 4, scope: !3338)
!3341 = !DILocation(line: 477, column: 34, scope: !3314)
!3342 = !DILocation(line: 477, column: 39, scope: !3314)
!3343 = !DILocation(line: 477, column: 41, scope: !3314)
!3344 = !DILocation(line: 477, column: 14, scope: !3314)
!3345 = !DILocation(line: 477, column: 12, scope: !3314)
!3346 = !DILocation(line: 478, column: 6, scope: !3347)
!3347 = distinct !DILexicalBlock(scope: !3314, file: !1, line: 478, column: 6)
!3348 = !DILocation(line: 478, column: 6, scope: !3314)
!3349 = !DILocation(line: 479, column: 4, scope: !3347)
!3350 = !DILocation(line: 481, column: 27, scope: !3314)
!3351 = !DILocation(line: 481, column: 12, scope: !3314)
!3352 = !DILocation(line: 481, column: 10, scope: !3314)
!3353 = !DILocation(line: 482, column: 16, scope: !3314)
!3354 = !DILocation(line: 482, column: 2, scope: !3314)
!3355 = !DILocation(line: 483, column: 42, scope: !3314)
!3356 = !DILocation(line: 483, column: 50, scope: !3314)
!3357 = !DILocation(line: 483, column: 61, scope: !3314)
!3358 = !DILocation(line: 483, column: 20, scope: !3314)
!3359 = !DILocation(line: 483, column: 18, scope: !3314)
!3360 = !DILocation(line: 484, column: 2, scope: !3314)
!3361 = !DILocation(line: 485, column: 2, scope: !3314)
!3362 = !DILocation(line: 486, column: 2, scope: !3314)
!3363 = !DILocation(line: 487, column: 7, scope: !3314)
!3364 = !DILocation(line: 467, column: 47, scope: !3301)
!3365 = !DILocation(line: 467, column: 3, scope: !3301)
!3366 = distinct !{!3366, !3305, !3367}
!3367 = !DILocation(line: 487, column: 7, scope: !3298)
!3368 = !DILocation(line: 488, column: 1, scope: !3285)
!3369 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !528, file: !528, line: 3061, type: !3370, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3370 = !DISubroutineType(types: !3371)
!3371 = !{!5, !3278}
!3372 = !DILocalVariable(name: "gs", arg: 1, scope: !3369, file: !528, line: 3061, type: !3278)
!3373 = !DILocation(line: 3061, column: 35, scope: !3369)
!3374 = !DILocation(line: 3064, column: 10, scope: !3369)
!3375 = !DILocation(line: 3064, column: 14, scope: !3369)
!3376 = !DILocation(line: 3064, column: 25, scope: !3369)
!3377 = !DILocation(line: 3064, column: 3, scope: !3369)
!3378 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !3379, file: !3379, line: 467, type: !3380, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3379 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3380 = !DISubroutineType(types: !3381)
!3381 = !{!967, !987, !1132}
!3382 = !DILocalVariable(name: "gs", arg: 1, scope: !3378, file: !3379, line: 467, type: !987)
!3383 = !DILocation(line: 467, column: 29, scope: !3378)
!3384 = !DILocalVariable(name: "i", arg: 2, scope: !3378, file: !3379, line: 467, type: !1132)
!3385 = !DILocation(line: 467, column: 40, scope: !3378)
!3386 = !DILocation(line: 469, column: 10, scope: !3378)
!3387 = !DILocation(line: 469, column: 3, scope: !3378)
!3388 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !3379, file: !3379, line: 450, type: !3389, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3389 = !DISubroutineType(types: !3390)
!3390 = !{!657, !987, !1132}
!3391 = !DILocalVariable(name: "gs", arg: 1, scope: !3388, file: !3379, line: 450, type: !987)
!3392 = !DILocation(line: 450, column: 28, scope: !3388)
!3393 = !DILocalVariable(name: "index", arg: 2, scope: !3388, file: !3379, line: 450, type: !1132)
!3394 = !DILocation(line: 450, column: 39, scope: !3388)
!3395 = !DILocalVariable(name: "pd", scope: !3388, file: !3379, line: 452, type: !3396)
!3396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1090, size: 64)
!3397 = !DILocation(line: 452, column: 21, scope: !3388)
!3398 = !DILocation(line: 452, column: 42, scope: !3388)
!3399 = !DILocation(line: 452, column: 46, scope: !3388)
!3400 = !DILocation(line: 452, column: 26, scope: !3388)
!3401 = !DILocation(line: 453, column: 29, scope: !3388)
!3402 = !DILocation(line: 453, column: 33, scope: !3388)
!3403 = !DILocation(line: 453, column: 10, scope: !3388)
!3404 = !DILocation(line: 453, column: 3, scope: !3388)
!3405 = distinct !DISubprogram(name: "get_rename", scope: !1, file: !1, line: 493, type: !2998, scopeLine: 494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3406 = !DILocalVariable(name: "map", arg: 1, scope: !3405, file: !1, line: 493, type: !1471)
!3407 = !DILocation(line: 493, column: 20, scope: !3405)
!3408 = !DILocalVariable(name: "old_name", arg: 2, scope: !3405, file: !1, line: 493, type: !657)
!3409 = !DILocation(line: 493, column: 30, scope: !3405)
!3410 = !DILocalVariable(name: "tmp", scope: !3405, file: !1, line: 495, type: !653)
!3411 = !DILocation(line: 495, column: 27, scope: !3405)
!3412 = !DILocalVariable(name: "slot", scope: !3405, file: !1, line: 496, type: !1494)
!3413 = !DILocation(line: 496, column: 8, scope: !3405)
!3414 = !DILocation(line: 498, column: 3, scope: !3405)
!3415 = !DILocation(line: 499, column: 18, scope: !3405)
!3416 = !DILocation(line: 499, column: 7, scope: !3405)
!3417 = !DILocation(line: 499, column: 16, scope: !3405)
!3418 = !DILocation(line: 500, column: 26, scope: !3405)
!3419 = !DILocation(line: 500, column: 31, scope: !3405)
!3420 = !DILocation(line: 500, column: 10, scope: !3405)
!3421 = !DILocation(line: 500, column: 8, scope: !3405)
!3422 = !DILocation(line: 502, column: 7, scope: !3423)
!3423 = distinct !DILexicalBlock(scope: !3405, file: !1, line: 502, column: 7)
!3424 = !DILocation(line: 502, column: 12, scope: !3423)
!3425 = !DILocation(line: 502, column: 16, scope: !3423)
!3426 = !DILocation(line: 502, column: 15, scope: !3423)
!3427 = !DILocation(line: 502, column: 7, scope: !3405)
!3428 = !DILocation(line: 503, column: 31, scope: !3423)
!3429 = !DILocation(line: 503, column: 30, scope: !3423)
!3430 = !DILocation(line: 503, column: 13, scope: !3423)
!3431 = !DILocation(line: 503, column: 38, scope: !3423)
!3432 = !DILocation(line: 503, column: 5, scope: !3423)
!3433 = !DILocation(line: 505, column: 10, scope: !3405)
!3434 = !DILocation(line: 505, column: 3, scope: !3405)
!3435 = !DILocation(line: 506, column: 1, scope: !3405)
!3436 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !3379, file: !3379, line: 233, type: !3437, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3437 = !DISubroutineType(types: !3438)
!3438 = !{null, !2050, !657}
!3439 = !DILocalVariable(name: "use", arg: 1, scope: !3436, file: !3379, line: 233, type: !2050)
!3440 = !DILocation(line: 233, column: 37, scope: !3436)
!3441 = !DILocalVariable(name: "val", arg: 2, scope: !3436, file: !3379, line: 233, type: !657)
!3442 = !DILocation(line: 233, column: 47, scope: !3436)
!3443 = !DILocation(line: 235, column: 19, scope: !3436)
!3444 = !DILocation(line: 235, column: 3, scope: !3436)
!3445 = !DILocation(line: 236, column: 17, scope: !3436)
!3446 = !DILocation(line: 236, column: 5, scope: !3436)
!3447 = !DILocation(line: 236, column: 10, scope: !3436)
!3448 = !DILocation(line: 236, column: 15, scope: !3436)
!3449 = !DILocation(line: 237, column: 17, scope: !3436)
!3450 = !DILocation(line: 237, column: 22, scope: !3436)
!3451 = !DILocation(line: 237, column: 3, scope: !3436)
!3452 = !DILocation(line: 238, column: 1, scope: !3436)
!3453 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3379, file: !3379, line: 442, type: !3454, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3454 = !DISubroutineType(types: !3455)
!3455 = !{!2050, !987, !754}
!3456 = !DILocalVariable(name: "gs", arg: 1, scope: !3453, file: !3379, line: 442, type: !987)
!3457 = !DILocation(line: 442, column: 36, scope: !3453)
!3458 = !DILocalVariable(name: "i", arg: 2, scope: !3453, file: !3379, line: 442, type: !754)
!3459 = !DILocation(line: 442, column: 44, scope: !3453)
!3460 = !DILocation(line: 444, column: 27, scope: !3453)
!3461 = !DILocation(line: 444, column: 31, scope: !3453)
!3462 = !DILocation(line: 444, column: 11, scope: !3453)
!3463 = !DILocation(line: 444, column: 35, scope: !3453)
!3464 = !DILocation(line: 444, column: 3, scope: !3453)
!3465 = distinct !DISubprogram(name: "gsi_next", scope: !528, file: !528, line: 4485, type: !3466, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3466 = !DISubroutineType(types: !3467)
!3467 = !{null, !3468}
!3468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3127, size: 64)
!3469 = !DILocalVariable(name: "i", arg: 1, scope: !3465, file: !528, line: 4485, type: !3468)
!3470 = !DILocation(line: 4485, column: 33, scope: !3465)
!3471 = !DILocation(line: 4487, column: 12, scope: !3465)
!3472 = !DILocation(line: 4487, column: 15, scope: !3465)
!3473 = !DILocation(line: 4487, column: 20, scope: !3465)
!3474 = !DILocation(line: 4487, column: 3, scope: !3465)
!3475 = !DILocation(line: 4487, column: 6, scope: !3465)
!3476 = !DILocation(line: 4487, column: 10, scope: !3465)
!3477 = !DILocation(line: 4488, column: 1, scope: !3465)
!3478 = distinct !DISubprogram(name: "get_true_edge_from_guard_bb", scope: !1, file: !1, line: 1076, type: !3479, scopeLine: 1077, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3479 = !DISubroutineType(types: !3480)
!3480 = !{!967, !1439}
!3481 = !DILocalVariable(name: "bb", arg: 1, scope: !3478, file: !1, line: 1076, type: !1439)
!3482 = !DILocation(line: 1076, column: 42, scope: !3478)
!3483 = !DILocalVariable(name: "e", scope: !3478, file: !1, line: 1078, type: !967)
!3484 = !DILocation(line: 1078, column: 8, scope: !3478)
!3485 = !DILocalVariable(name: "ei", scope: !3478, file: !1, line: 1079, type: !3486)
!3486 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !341, line: 682, baseType: !3487)
!3487 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !341, line: 679, size: 128, elements: !3488)
!3488 = !{!3489, !3490}
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3487, file: !341, line: 680, baseType: !5, size: 32)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !3487, file: !341, line: 681, baseType: !3491, size: 64, offset: 64)
!3491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !955, size: 64)
!3492 = !DILocation(line: 1079, column: 17, scope: !3478)
!3493 = !DILocation(line: 1081, column: 3, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3478, file: !1, line: 1081, column: 3)
!3495 = !DILocation(line: 1081, column: 3, scope: !3496)
!3496 = distinct !DILexicalBlock(scope: !3494, file: !1, line: 1081, column: 3)
!3497 = !DILocation(line: 1082, column: 9, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3496, file: !1, line: 1082, column: 9)
!3499 = !DILocation(line: 1082, column: 12, scope: !3498)
!3500 = !DILocation(line: 1082, column: 18, scope: !3498)
!3501 = !DILocation(line: 1082, column: 9, scope: !3496)
!3502 = !DILocation(line: 1083, column: 14, scope: !3498)
!3503 = !DILocation(line: 1083, column: 7, scope: !3498)
!3504 = !DILocation(line: 1082, column: 20, scope: !3498)
!3505 = distinct !{!3505, !3493, !3506}
!3506 = !DILocation(line: 1083, column: 14, scope: !3494)
!3507 = !DILocation(line: 1085, column: 3, scope: !3478)
!3508 = !DILocation(line: 1086, column: 3, scope: !3478)
!3509 = !DILocation(line: 1087, column: 1, scope: !3478)
!3510 = distinct !DISubprogram(name: "ei_start_1", scope: !341, file: !341, line: 696, type: !3511, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3511 = !DISubroutineType(types: !3512)
!3512 = !{!3486, !3491}
!3513 = !DILocalVariable(name: "ev", arg: 1, scope: !3510, file: !341, line: 696, type: !3491)
!3514 = !DILocation(line: 696, column: 28, scope: !3510)
!3515 = !DILocalVariable(name: "i", scope: !3510, file: !341, line: 698, type: !3486)
!3516 = !DILocation(line: 698, column: 17, scope: !3510)
!3517 = !DILocation(line: 700, column: 5, scope: !3510)
!3518 = !DILocation(line: 700, column: 11, scope: !3510)
!3519 = !DILocation(line: 701, column: 17, scope: !3510)
!3520 = !DILocation(line: 701, column: 5, scope: !3510)
!3521 = !DILocation(line: 701, column: 15, scope: !3510)
!3522 = !DILocation(line: 703, column: 3, scope: !3510)
!3523 = distinct !DISubprogram(name: "ei_cond", scope: !341, file: !341, line: 771, type: !3524, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3524 = !DISubroutineType(types: !3525)
!3525 = !{!777, !3486, !3526}
!3526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !967, size: 64)
!3527 = !DILocalVariable(name: "ei", arg: 1, scope: !3523, file: !341, line: 771, type: !3486)
!3528 = !DILocation(line: 771, column: 24, scope: !3523)
!3529 = !DILocalVariable(name: "p", arg: 2, scope: !3523, file: !341, line: 771, type: !3526)
!3530 = !DILocation(line: 771, column: 34, scope: !3523)
!3531 = !DILocation(line: 773, column: 8, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3523, file: !341, line: 773, column: 7)
!3533 = !DILocation(line: 773, column: 7, scope: !3523)
!3534 = !DILocation(line: 775, column: 12, scope: !3535)
!3535 = distinct !DILexicalBlock(scope: !3532, file: !341, line: 774, column: 5)
!3536 = !DILocation(line: 775, column: 8, scope: !3535)
!3537 = !DILocation(line: 775, column: 10, scope: !3535)
!3538 = !DILocation(line: 776, column: 7, scope: !3535)
!3539 = !DILocation(line: 780, column: 8, scope: !3540)
!3540 = distinct !DILexicalBlock(scope: !3532, file: !341, line: 779, column: 5)
!3541 = !DILocation(line: 780, column: 10, scope: !3540)
!3542 = !DILocation(line: 781, column: 7, scope: !3540)
!3543 = !DILocation(line: 783, column: 1, scope: !3523)
!3544 = distinct !DISubprogram(name: "ei_next", scope: !341, file: !341, line: 736, type: !3545, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3545 = !DISubroutineType(types: !3546)
!3546 = !{null, !3547}
!3547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3486, size: 64)
!3548 = !DILocalVariable(name: "i", arg: 1, scope: !3544, file: !341, line: 736, type: !3547)
!3549 = !DILocation(line: 736, column: 25, scope: !3544)
!3550 = !DILocation(line: 738, column: 3, scope: !3544)
!3551 = !DILocation(line: 739, column: 3, scope: !3544)
!3552 = !DILocation(line: 739, column: 6, scope: !3544)
!3553 = !DILocation(line: 739, column: 11, scope: !3544)
!3554 = !DILocation(line: 740, column: 1, scope: !3544)
!3555 = distinct !DISubprogram(name: "get_false_edge_from_guard_bb", scope: !1, file: !1, line: 1092, type: !3479, scopeLine: 1093, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3556 = !DILocalVariable(name: "bb", arg: 1, scope: !3555, file: !1, line: 1092, type: !1439)
!3557 = !DILocation(line: 1092, column: 43, scope: !3555)
!3558 = !DILocalVariable(name: "e", scope: !3555, file: !1, line: 1094, type: !967)
!3559 = !DILocation(line: 1094, column: 8, scope: !3555)
!3560 = !DILocalVariable(name: "ei", scope: !3555, file: !1, line: 1095, type: !3486)
!3561 = !DILocation(line: 1095, column: 17, scope: !3555)
!3562 = !DILocation(line: 1097, column: 3, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !3555, file: !1, line: 1097, column: 3)
!3564 = !DILocation(line: 1097, column: 3, scope: !3565)
!3565 = distinct !DILexicalBlock(scope: !3563, file: !1, line: 1097, column: 3)
!3566 = !DILocation(line: 1098, column: 11, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3565, file: !1, line: 1098, column: 9)
!3568 = !DILocation(line: 1098, column: 14, scope: !3567)
!3569 = !DILocation(line: 1098, column: 20, scope: !3567)
!3570 = !DILocation(line: 1098, column: 9, scope: !3565)
!3571 = !DILocation(line: 1099, column: 14, scope: !3567)
!3572 = !DILocation(line: 1099, column: 7, scope: !3567)
!3573 = !DILocation(line: 1098, column: 37, scope: !3567)
!3574 = distinct !{!3574, !3562, !3575}
!3575 = !DILocation(line: 1099, column: 14, scope: !3563)
!3576 = !DILocation(line: 1101, column: 3, scope: !3555)
!3577 = !DILocation(line: 1102, column: 3, scope: !3555)
!3578 = !DILocation(line: 1103, column: 1, scope: !3555)
!3579 = distinct !DISubprogram(name: "insert_loop_close_phis", scope: !1, file: !1, line: 1251, type: !3580, scopeLine: 1252, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3580 = !DISubroutineType(types: !3581)
!3581 = !{null, !1471, !1229}
!3582 = !DILocalVariable(name: "map", arg: 1, scope: !3579, file: !1, line: 1251, type: !1471)
!3583 = !DILocation(line: 1251, column: 32, scope: !3579)
!3584 = !DILocalVariable(name: "loop", arg: 2, scope: !3579, file: !1, line: 1251, type: !1229)
!3585 = !DILocation(line: 1251, column: 44, scope: !3579)
!3586 = !DILocalVariable(name: "i", scope: !3579, file: !1, line: 1253, type: !754)
!3587 = !DILocation(line: 1253, column: 7, scope: !3579)
!3588 = !DILocalVariable(name: "a", scope: !3579, file: !1, line: 1254, type: !2081)
!3589 = !DILocation(line: 1254, column: 15, scope: !3579)
!3590 = !DILocalVariable(name: "elt", scope: !3579, file: !1, line: 1255, type: !2066)
!3591 = !DILocation(line: 1255, column: 18, scope: !3579)
!3592 = !DILocation(line: 1257, column: 12, scope: !3579)
!3593 = !DILocation(line: 1257, column: 5, scope: !3579)
!3594 = !DILocation(line: 1257, column: 10, scope: !3579)
!3595 = !DILocation(line: 1258, column: 19, scope: !3579)
!3596 = !DILocation(line: 1258, column: 5, scope: !3579)
!3597 = !DILocation(line: 1258, column: 17, scope: !3579)
!3598 = !DILocation(line: 1259, column: 3, scope: !3579)
!3599 = !DILocation(line: 1260, column: 18, scope: !3579)
!3600 = !DILocation(line: 1260, column: 43, scope: !3579)
!3601 = !DILocation(line: 1260, column: 3, scope: !3579)
!3602 = !DILocation(line: 1261, column: 3, scope: !3579)
!3603 = !DILocation(line: 1263, column: 10, scope: !3604)
!3604 = distinct !DILexicalBlock(scope: !3579, file: !1, line: 1263, column: 3)
!3605 = !DILocation(line: 1263, column: 8, scope: !3604)
!3606 = !DILocation(line: 1263, column: 15, scope: !3607)
!3607 = distinct !DILexicalBlock(scope: !3604, file: !1, line: 1263, column: 3)
!3608 = !DILocation(line: 1263, column: 3, scope: !3604)
!3609 = !DILocation(line: 1265, column: 19, scope: !3610)
!3610 = distinct !DILexicalBlock(scope: !3607, file: !1, line: 1264, column: 5)
!3611 = !DILocation(line: 1265, column: 24, scope: !3610)
!3612 = !DILocation(line: 1265, column: 29, scope: !3610)
!3613 = !DILocation(line: 1265, column: 39, scope: !3610)
!3614 = !DILocation(line: 1265, column: 44, scope: !3610)
!3615 = !DILocation(line: 1265, column: 7, scope: !3610)
!3616 = !DILocation(line: 1266, column: 13, scope: !3610)
!3617 = !DILocation(line: 1266, column: 7, scope: !3610)
!3618 = !DILocation(line: 1267, column: 5, scope: !3610)
!3619 = !DILocation(line: 1263, column: 69, scope: !3607)
!3620 = !DILocation(line: 1263, column: 3, scope: !3607)
!3621 = distinct !{!3621, !3608, !3622}
!3622 = !DILocation(line: 1267, column: 5, scope: !3604)
!3623 = !DILocation(line: 1269, column: 3, scope: !3579)
!3624 = !DILocation(line: 1270, column: 1, scope: !3579)
!3625 = distinct !DISubprogram(name: "VEC_rename_map_elt_heap_alloc", scope: !654, file: !654, line: 261, type: !3626, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3626 = !DISubroutineType(types: !3627)
!3627 = !{!2067, !754}
!3628 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3625, file: !654, line: 261, type: !754)
!3629 = !DILocation(line: 261, column: 1, scope: !3625)
!3630 = distinct !DISubprogram(name: "add_loop_exit_phis", scope: !1, file: !1, line: 1193, type: !2109, scopeLine: 1194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3631 = !DILocalVariable(name: "slot", arg: 1, scope: !3630, file: !1, line: 1193, type: !1494)
!3632 = !DILocation(line: 1193, column: 28, scope: !3630)
!3633 = !DILocalVariable(name: "data", arg: 2, scope: !3630, file: !1, line: 1193, type: !650)
!3634 = !DILocation(line: 1193, column: 40, scope: !3630)
!3635 = !DILocalVariable(name: "entry", scope: !3630, file: !1, line: 1195, type: !2048)
!3636 = !DILocation(line: 1195, column: 28, scope: !3630)
!3637 = !DILocalVariable(name: "a", scope: !3630, file: !1, line: 1196, type: !2079)
!3638 = !DILocation(line: 1196, column: 10, scope: !3630)
!3639 = !DILocalVariable(name: "loop", scope: !3630, file: !1, line: 1197, type: !1229)
!3640 = !DILocation(line: 1197, column: 10, scope: !3630)
!3641 = !DILocalVariable(name: "expr", scope: !3630, file: !1, line: 1198, type: !657)
!3642 = !DILocation(line: 1198, column: 8, scope: !3630)
!3643 = !DILocalVariable(name: "new_name", scope: !3630, file: !1, line: 1198, type: !657)
!3644 = !DILocation(line: 1198, column: 14, scope: !3630)
!3645 = !DILocalVariable(name: "old_name", scope: !3630, file: !1, line: 1198, type: !657)
!3646 = !DILocation(line: 1198, column: 24, scope: !3630)
!3647 = !DILocalVariable(name: "def_in_loop_p", scope: !3630, file: !1, line: 1199, type: !777)
!3648 = !DILocation(line: 1199, column: 8, scope: !3630)
!3649 = !DILocalVariable(name: "used_outside_p", scope: !3630, file: !1, line: 1199, type: !777)
!3650 = !DILocation(line: 1199, column: 23, scope: !3630)
!3651 = !DILocalVariable(name: "need_close_phi_p", scope: !3630, file: !1, line: 1199, type: !777)
!3652 = !DILocation(line: 1199, column: 39, scope: !3630)
!3653 = !DILocalVariable(name: "old_close_phi", scope: !3630, file: !1, line: 1200, type: !987)
!3654 = !DILocation(line: 1200, column: 10, scope: !3630)
!3655 = !DILocation(line: 1202, column: 8, scope: !3656)
!3656 = distinct !DILexicalBlock(scope: !3630, file: !1, line: 1202, column: 7)
!3657 = !DILocation(line: 1202, column: 13, scope: !3656)
!3658 = !DILocation(line: 1202, column: 18, scope: !3656)
!3659 = !DILocation(line: 1202, column: 17, scope: !3656)
!3660 = !DILocation(line: 1202, column: 23, scope: !3656)
!3661 = !DILocation(line: 1202, column: 27, scope: !3656)
!3662 = !DILocation(line: 1202, column: 7, scope: !3630)
!3663 = !DILocation(line: 1203, column: 5, scope: !3656)
!3664 = !DILocation(line: 1205, column: 40, scope: !3630)
!3665 = !DILocation(line: 1205, column: 39, scope: !3630)
!3666 = !DILocation(line: 1205, column: 11, scope: !3630)
!3667 = !DILocation(line: 1205, column: 9, scope: !3630)
!3668 = !DILocation(line: 1206, column: 16, scope: !3630)
!3669 = !DILocation(line: 1206, column: 7, scope: !3630)
!3670 = !DILocation(line: 1206, column: 5, scope: !3630)
!3671 = !DILocation(line: 1207, column: 10, scope: !3630)
!3672 = !DILocation(line: 1207, column: 13, scope: !3630)
!3673 = !DILocation(line: 1207, column: 8, scope: !3630)
!3674 = !DILocation(line: 1208, column: 21, scope: !3630)
!3675 = !DILocation(line: 1208, column: 28, scope: !3630)
!3676 = !DILocation(line: 1208, column: 19, scope: !3630)
!3677 = !DILocation(line: 1208, column: 12, scope: !3630)
!3678 = !DILocation(line: 1209, column: 14, scope: !3630)
!3679 = !DILocation(line: 1209, column: 21, scope: !3630)
!3680 = !DILocation(line: 1209, column: 12, scope: !3630)
!3681 = !DILocation(line: 1211, column: 43, scope: !3630)
!3682 = !DILocation(line: 1211, column: 49, scope: !3630)
!3683 = !DILocation(line: 1211, column: 19, scope: !3630)
!3684 = !DILocation(line: 1211, column: 17, scope: !3630)
!3685 = !DILocation(line: 1212, column: 8, scope: !3686)
!3686 = distinct !DILexicalBlock(scope: !3630, file: !1, line: 1212, column: 7)
!3687 = !DILocation(line: 1212, column: 7, scope: !3630)
!3688 = !DILocation(line: 1213, column: 5, scope: !3686)
!3689 = !DILocation(line: 1217, column: 10, scope: !3630)
!3690 = !DILocation(line: 1217, column: 9, scope: !3630)
!3691 = !DILocation(line: 1217, column: 3, scope: !3630)
!3692 = !DILocation(line: 1218, column: 4, scope: !3630)
!3693 = !DILocation(line: 1218, column: 9, scope: !3630)
!3694 = !DILocation(line: 1220, column: 7, scope: !3695)
!3695 = distinct !DILexicalBlock(scope: !3630, file: !1, line: 1220, column: 7)
!3696 = !DILocation(line: 1220, column: 24, scope: !3695)
!3697 = !DILocation(line: 1220, column: 7, scope: !3630)
!3698 = !DILocation(line: 1221, column: 5, scope: !3695)
!3699 = !DILocation(line: 1223, column: 37, scope: !3630)
!3700 = !DILocation(line: 1223, column: 19, scope: !3630)
!3701 = !DILocation(line: 1223, column: 17, scope: !3630)
!3702 = !DILocation(line: 1224, column: 21, scope: !3630)
!3703 = !DILocation(line: 1224, column: 35, scope: !3630)
!3704 = !DILocation(line: 1224, column: 20, scope: !3630)
!3705 = !DILocation(line: 1224, column: 18, scope: !3630)
!3706 = !DILocation(line: 1225, column: 23, scope: !3630)
!3707 = !DILocation(line: 1226, column: 9, scope: !3630)
!3708 = !DILocation(line: 1226, column: 42, scope: !3630)
!3709 = !DILocation(line: 1226, column: 48, scope: !3630)
!3710 = !DILocation(line: 1226, column: 12, scope: !3630)
!3711 = !DILocation(line: 0, scope: !3630)
!3712 = !DILocation(line: 1225, column: 22, scope: !3630)
!3713 = !DILocation(line: 1225, column: 20, scope: !3630)
!3714 = !DILocation(line: 1229, column: 7, scope: !3715)
!3715 = distinct !DILexicalBlock(scope: !3630, file: !1, line: 1229, column: 7)
!3716 = !DILocation(line: 1229, column: 7, scope: !3630)
!3717 = !DILocalVariable(name: "bb", scope: !3718, file: !1, line: 1231, type: !1439)
!3718 = distinct !DILexicalBlock(scope: !3715, file: !1, line: 1230, column: 5)
!3719 = !DILocation(line: 1231, column: 19, scope: !3718)
!3720 = !DILocation(line: 1231, column: 37, scope: !3718)
!3721 = !DILocation(line: 1231, column: 24, scope: !3718)
!3722 = !DILocation(line: 1231, column: 44, scope: !3718)
!3723 = !DILocalVariable(name: "phi", scope: !3718, file: !1, line: 1232, type: !987)
!3724 = !DILocation(line: 1232, column: 14, scope: !3718)
!3725 = !DILocation(line: 1232, column: 37, scope: !3718)
!3726 = !DILocation(line: 1232, column: 47, scope: !3718)
!3727 = !DILocation(line: 1232, column: 20, scope: !3718)
!3728 = !DILocalVariable(name: "new_res", scope: !3718, file: !1, line: 1233, type: !657)
!3729 = !DILocation(line: 1233, column: 12, scope: !3718)
!3730 = !DILocation(line: 1233, column: 61, scope: !3718)
!3731 = !DILocation(line: 1233, column: 42, scope: !3718)
!3732 = !DILocation(line: 1233, column: 67, scope: !3718)
!3733 = !DILocation(line: 1234, column: 30, scope: !3718)
!3734 = !DILocation(line: 1234, column: 7, scope: !3718)
!3735 = !DILocation(line: 1233, column: 22, scope: !3718)
!3736 = !DILocation(line: 1236, column: 20, scope: !3718)
!3737 = !DILocation(line: 1236, column: 25, scope: !3718)
!3738 = !DILocation(line: 1236, column: 53, scope: !3718)
!3739 = !DILocation(line: 1236, column: 35, scope: !3718)
!3740 = !DILocation(line: 1236, column: 7, scope: !3718)
!3741 = !DILocation(line: 1237, column: 7, scope: !3718)
!3742 = !DILocation(line: 1240, column: 5, scope: !3718)
!3743 = !DILocation(line: 1242, column: 3, scope: !3630)
!3744 = !DILocation(line: 1243, column: 1, scope: !3630)
!3745 = distinct !DISubprogram(name: "VEC_rename_map_elt_base_iterate", scope: !654, file: !654, line: 260, type: !3746, scopeLine: 260, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3746 = !DISubroutineType(types: !3747)
!3747 = !{!754, !3748, !5, !3750}
!3748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3749, size: 64)
!3749 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2072)
!3750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2066, size: 64)
!3751 = !DILocalVariable(name: "vec_", arg: 1, scope: !3745, file: !654, line: 260, type: !3748)
!3752 = !DILocation(line: 260, column: 1, scope: !3745)
!3753 = !DILocalVariable(name: "ix_", arg: 2, scope: !3745, file: !654, line: 260, type: !5)
!3754 = !DILocalVariable(name: "ptr", arg: 3, scope: !3745, file: !654, line: 260, type: !3750)
!3755 = !DILocation(line: 260, column: 1, scope: !3756)
!3756 = distinct !DILexicalBlock(scope: !3745, file: !654, line: 260, column: 1)
!3757 = !DILocation(line: 260, column: 1, scope: !3758)
!3758 = distinct !DILexicalBlock(scope: !3756, file: !654, line: 260, column: 1)
!3759 = !DILocation(line: 260, column: 1, scope: !3760)
!3760 = distinct !DILexicalBlock(scope: !3756, file: !654, line: 260, column: 1)
!3761 = distinct !DISubprogram(name: "VEC_rename_map_elt_heap_free", scope: !654, file: !654, line: 261, type: !3762, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3762 = !DISubroutineType(types: !3763)
!3763 = !{null, !3764}
!3764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2067, size: 64)
!3765 = !DILocalVariable(name: "vec_", arg: 1, scope: !3761, file: !654, line: 261, type: !3764)
!3766 = !DILocation(line: 261, column: 1, scope: !3761)
!3767 = !DILocation(line: 261, column: 1, scope: !3768)
!3768 = distinct !DILexicalBlock(scope: !3761, file: !654, line: 261, column: 1)
!3769 = distinct !DISubprogram(name: "insert_guard_phis", scope: !1, file: !1, line: 1371, type: !3770, scopeLine: 1373, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3770 = !DISubroutineType(types: !3771)
!3771 = !{null, !1439, !967, !967, !1471, !1471}
!3772 = !DILocalVariable(name: "bb", arg: 1, scope: !3769, file: !1, line: 1371, type: !1439)
!3773 = !DILocation(line: 1371, column: 32, scope: !3769)
!3774 = !DILocalVariable(name: "true_edge", arg: 2, scope: !3769, file: !1, line: 1371, type: !967)
!3775 = !DILocation(line: 1371, column: 41, scope: !3769)
!3776 = !DILocalVariable(name: "false_edge", arg: 3, scope: !3769, file: !1, line: 1371, type: !967)
!3777 = !DILocation(line: 1371, column: 57, scope: !3769)
!3778 = !DILocalVariable(name: "before_guard", arg: 4, scope: !3769, file: !1, line: 1372, type: !1471)
!3779 = !DILocation(line: 1372, column: 13, scope: !3769)
!3780 = !DILocalVariable(name: "rename_map", arg: 5, scope: !3769, file: !1, line: 1372, type: !1471)
!3781 = !DILocation(line: 1372, column: 34, scope: !3769)
!3782 = !DILocalVariable(name: "i", scope: !3769, file: !1, line: 1374, type: !2086)
!3783 = !DILocation(line: 1374, column: 14, scope: !3769)
!3784 = !DILocation(line: 1375, column: 10, scope: !3769)
!3785 = !DILocation(line: 1375, column: 5, scope: !3769)
!3786 = !DILocation(line: 1375, column: 8, scope: !3769)
!3787 = !DILocation(line: 1376, column: 17, scope: !3769)
!3788 = !DILocation(line: 1376, column: 5, scope: !3769)
!3789 = !DILocation(line: 1376, column: 15, scope: !3769)
!3790 = !DILocation(line: 1377, column: 18, scope: !3769)
!3791 = !DILocation(line: 1377, column: 5, scope: !3769)
!3792 = !DILocation(line: 1377, column: 16, scope: !3769)
!3793 = !DILocation(line: 1378, column: 20, scope: !3769)
!3794 = !DILocation(line: 1378, column: 5, scope: !3769)
!3795 = !DILocation(line: 1378, column: 18, scope: !3769)
!3796 = !DILocation(line: 1380, column: 3, scope: !3769)
!3797 = !DILocation(line: 1381, column: 18, scope: !3769)
!3798 = !DILocation(line: 1381, column: 51, scope: !3769)
!3799 = !DILocation(line: 1381, column: 3, scope: !3769)
!3800 = !DILocation(line: 1382, column: 3, scope: !3769)
!3801 = !DILocation(line: 1383, column: 1, scope: !3769)
!3802 = distinct !DISubprogram(name: "add_guard_exit_phis", scope: !1, file: !1, line: 1325, type: !2109, scopeLine: 1326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3803 = !DILocalVariable(name: "slot", arg: 1, scope: !3802, file: !1, line: 1325, type: !1494)
!3804 = !DILocation(line: 1325, column: 29, scope: !3802)
!3805 = !DILocalVariable(name: "s", arg: 2, scope: !3802, file: !1, line: 1325, type: !650)
!3806 = !DILocation(line: 1325, column: 41, scope: !3802)
!3807 = !DILocalVariable(name: "entry", scope: !3802, file: !1, line: 1327, type: !2048)
!3808 = !DILocation(line: 1327, column: 28, scope: !3802)
!3809 = !DILocation(line: 1327, column: 65, scope: !3802)
!3810 = !DILocation(line: 1327, column: 64, scope: !3802)
!3811 = !DILocation(line: 1327, column: 36, scope: !3802)
!3812 = !DILocalVariable(name: "i", scope: !3802, file: !1, line: 1328, type: !2085)
!3813 = !DILocation(line: 1328, column: 15, scope: !3802)
!3814 = !DILocation(line: 1328, column: 34, scope: !3802)
!3815 = !DILocation(line: 1328, column: 19, scope: !3802)
!3816 = !DILocalVariable(name: "bb", scope: !3802, file: !1, line: 1329, type: !1439)
!3817 = !DILocation(line: 1329, column: 15, scope: !3802)
!3818 = !DILocation(line: 1329, column: 20, scope: !3802)
!3819 = !DILocation(line: 1329, column: 23, scope: !3802)
!3820 = !DILocalVariable(name: "true_edge", scope: !3802, file: !1, line: 1330, type: !967)
!3821 = !DILocation(line: 1330, column: 8, scope: !3802)
!3822 = !DILocation(line: 1330, column: 20, scope: !3802)
!3823 = !DILocation(line: 1330, column: 23, scope: !3802)
!3824 = !DILocalVariable(name: "false_edge", scope: !3802, file: !1, line: 1331, type: !967)
!3825 = !DILocation(line: 1331, column: 8, scope: !3802)
!3826 = !DILocation(line: 1331, column: 21, scope: !3802)
!3827 = !DILocation(line: 1331, column: 24, scope: !3802)
!3828 = !DILocalVariable(name: "res", scope: !3802, file: !1, line: 1332, type: !657)
!3829 = !DILocation(line: 1332, column: 8, scope: !3802)
!3830 = !DILocation(line: 1332, column: 14, scope: !3802)
!3831 = !DILocation(line: 1332, column: 21, scope: !3802)
!3832 = !DILocalVariable(name: "name1", scope: !3802, file: !1, line: 1333, type: !657)
!3833 = !DILocation(line: 1333, column: 8, scope: !3802)
!3834 = !DILocation(line: 1333, column: 16, scope: !3802)
!3835 = !DILocation(line: 1333, column: 23, scope: !3802)
!3836 = !DILocalVariable(name: "name2", scope: !3802, file: !1, line: 1334, type: !657)
!3837 = !DILocation(line: 1334, column: 8, scope: !3802)
!3838 = !DILocation(line: 1334, column: 38, scope: !3802)
!3839 = !DILocation(line: 1334, column: 41, scope: !3802)
!3840 = !DILocation(line: 1334, column: 55, scope: !3802)
!3841 = !DILocation(line: 1334, column: 16, scope: !3802)
!3842 = !DILocalVariable(name: "phi", scope: !3802, file: !1, line: 1335, type: !987)
!3843 = !DILocation(line: 1335, column: 10, scope: !3802)
!3844 = !DILocation(line: 1339, column: 7, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3802, file: !1, line: 1339, column: 7)
!3846 = !DILocation(line: 1339, column: 16, scope: !3845)
!3847 = !DILocation(line: 1339, column: 13, scope: !3845)
!3848 = !DILocation(line: 1339, column: 7, scope: !3802)
!3849 = !DILocation(line: 1340, column: 5, scope: !3845)
!3850 = !DILocation(line: 1342, column: 32, scope: !3802)
!3851 = !DILocation(line: 1342, column: 39, scope: !3802)
!3852 = !DILocation(line: 1342, column: 44, scope: !3802)
!3853 = !DILocation(line: 1342, column: 11, scope: !3802)
!3854 = !DILocation(line: 1342, column: 9, scope: !3802)
!3855 = !DILocation(line: 1343, column: 32, scope: !3802)
!3856 = !DILocation(line: 1343, column: 39, scope: !3802)
!3857 = !DILocation(line: 1343, column: 44, scope: !3802)
!3858 = !DILocation(line: 1343, column: 11, scope: !3802)
!3859 = !DILocation(line: 1343, column: 9, scope: !3802)
!3860 = !DILocation(line: 1345, column: 26, scope: !3802)
!3861 = !DILocation(line: 1345, column: 31, scope: !3802)
!3862 = !DILocation(line: 1345, column: 9, scope: !3802)
!3863 = !DILocation(line: 1345, column: 7, scope: !3802)
!3864 = !DILocation(line: 1346, column: 48, scope: !3802)
!3865 = !DILocation(line: 1346, column: 29, scope: !3802)
!3866 = !DILocation(line: 1346, column: 54, scope: !3802)
!3867 = !DILocation(line: 1347, column: 31, scope: !3802)
!3868 = !DILocation(line: 1347, column: 8, scope: !3802)
!3869 = !DILocation(line: 1346, column: 9, scope: !3802)
!3870 = !DILocation(line: 1346, column: 7, scope: !3802)
!3871 = !DILocation(line: 1349, column: 16, scope: !3802)
!3872 = !DILocation(line: 1349, column: 21, scope: !3802)
!3873 = !DILocation(line: 1349, column: 28, scope: !3802)
!3874 = !DILocation(line: 1349, column: 3, scope: !3802)
!3875 = !DILocation(line: 1350, column: 16, scope: !3802)
!3876 = !DILocation(line: 1350, column: 21, scope: !3802)
!3877 = !DILocation(line: 1350, column: 28, scope: !3802)
!3878 = !DILocation(line: 1350, column: 3, scope: !3802)
!3879 = !DILocation(line: 1352, column: 17, scope: !3802)
!3880 = !DILocation(line: 1352, column: 3, scope: !3802)
!3881 = !DILocation(line: 1352, column: 10, scope: !3802)
!3882 = !DILocation(line: 1352, column: 15, scope: !3802)
!3883 = !DILocation(line: 1353, column: 11, scope: !3802)
!3884 = !DILocation(line: 1353, column: 4, scope: !3802)
!3885 = !DILocation(line: 1353, column: 9, scope: !3802)
!3886 = !DILocation(line: 1354, column: 3, scope: !3802)
!3887 = !DILocation(line: 1355, column: 1, scope: !3802)
!3888 = distinct !DISubprogram(name: "copy_bb_and_scalar_dependences", scope: !1, file: !1, line: 1429, type: !3889, scopeLine: 1431, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3889 = !DISubroutineType(types: !3890)
!3890 = !{!967, !1439, !2045, !967, !1471}
!3891 = !DILocalVariable(name: "bb", arg: 1, scope: !3888, file: !1, line: 1429, type: !1439)
!3892 = !DILocation(line: 1429, column: 45, scope: !3888)
!3893 = !DILocalVariable(name: "region", arg: 2, scope: !3888, file: !1, line: 1429, type: !2045)
!3894 = !DILocation(line: 1429, column: 54, scope: !3888)
!3895 = !DILocalVariable(name: "next_e", arg: 3, scope: !3888, file: !1, line: 1430, type: !967)
!3896 = !DILocation(line: 1430, column: 10, scope: !3888)
!3897 = !DILocalVariable(name: "map", arg: 4, scope: !3888, file: !1, line: 1430, type: !1471)
!3898 = !DILocation(line: 1430, column: 25, scope: !3888)
!3899 = !DILocalVariable(name: "new_bb", scope: !3888, file: !1, line: 1432, type: !1439)
!3900 = !DILocation(line: 1432, column: 15, scope: !3888)
!3901 = !DILocation(line: 1432, column: 36, scope: !3888)
!3902 = !DILocation(line: 1432, column: 24, scope: !3888)
!3903 = !DILocation(line: 1434, column: 30, scope: !3888)
!3904 = !DILocation(line: 1434, column: 12, scope: !3888)
!3905 = !DILocation(line: 1434, column: 10, scope: !3888)
!3906 = !DILocation(line: 1435, column: 35, scope: !3888)
!3907 = !DILocation(line: 1435, column: 39, scope: !3888)
!3908 = !DILocation(line: 1435, column: 47, scope: !3888)
!3909 = !DILocation(line: 1435, column: 3, scope: !3888)
!3910 = !DILocation(line: 1436, column: 21, scope: !3888)
!3911 = !DILocation(line: 1436, column: 3, scope: !3888)
!3912 = !DILocation(line: 1437, column: 21, scope: !3888)
!3913 = !DILocation(line: 1437, column: 3, scope: !3888)
!3914 = !DILocation(line: 1438, column: 28, scope: !3888)
!3915 = !DILocation(line: 1438, column: 36, scope: !3888)
!3916 = !DILocation(line: 1438, column: 44, scope: !3888)
!3917 = !DILocation(line: 1438, column: 3, scope: !3888)
!3918 = !DILocation(line: 1439, column: 21, scope: !3888)
!3919 = !DILocation(line: 1439, column: 29, scope: !3888)
!3920 = !DILocation(line: 1439, column: 3, scope: !3888)
!3921 = !DILocation(line: 1441, column: 10, scope: !3888)
!3922 = !DILocation(line: 1441, column: 3, scope: !3888)
!3923 = distinct !DISubprogram(name: "single_succ_edge", scope: !341, file: !341, line: 643, type: !3924, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3924 = !DISubroutineType(types: !3925)
!3925 = !{!967, !3926}
!3926 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !658, line: 112, baseType: !3927)
!3927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3928, size: 64)
!3928 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !952)
!3929 = !DILocalVariable(name: "bb", arg: 1, scope: !3923, file: !341, line: 643, type: !3926)
!3930 = !DILocation(line: 643, column: 37, scope: !3923)
!3931 = !DILocation(line: 645, column: 3, scope: !3923)
!3932 = !DILocation(line: 646, column: 10, scope: !3923)
!3933 = !DILocation(line: 646, column: 3, scope: !3923)
!3934 = distinct !DISubprogram(name: "graphite_copy_stmts_from_block", scope: !1, file: !1, line: 1389, type: !3935, scopeLine: 1390, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!3935 = !DISubroutineType(types: !3936)
!3936 = !{null, !1439, !1439, !1471}
!3937 = !DILocalVariable(name: "bb", arg: 1, scope: !3934, file: !1, line: 1389, type: !1439)
!3938 = !DILocation(line: 1389, column: 45, scope: !3934)
!3939 = !DILocalVariable(name: "new_bb", arg: 2, scope: !3934, file: !1, line: 1389, type: !1439)
!3940 = !DILocation(line: 1389, column: 61, scope: !3934)
!3941 = !DILocalVariable(name: "map", arg: 3, scope: !3934, file: !1, line: 1389, type: !1471)
!3942 = !DILocation(line: 1389, column: 76, scope: !3934)
!3943 = !DILocalVariable(name: "gsi", scope: !3934, file: !1, line: 1391, type: !3127)
!3944 = !DILocation(line: 1391, column: 24, scope: !3934)
!3945 = !DILocalVariable(name: "gsi_tgt", scope: !3934, file: !1, line: 1391, type: !3127)
!3946 = !DILocation(line: 1391, column: 29, scope: !3934)
!3947 = !DILocation(line: 1393, column: 27, scope: !3934)
!3948 = !DILocation(line: 1393, column: 13, scope: !3934)
!3949 = !DILocation(line: 1394, column: 28, scope: !3950)
!3950 = distinct !DILexicalBlock(scope: !3934, file: !1, line: 1394, column: 3)
!3951 = !DILocation(line: 1394, column: 14, scope: !3950)
!3952 = !DILocation(line: 1394, column: 8, scope: !3950)
!3953 = !DILocation(line: 1394, column: 34, scope: !3954)
!3954 = distinct !DILexicalBlock(scope: !3950, file: !1, line: 1394, column: 3)
!3955 = !DILocation(line: 1394, column: 33, scope: !3954)
!3956 = !DILocation(line: 1394, column: 3, scope: !3950)
!3957 = !DILocalVariable(name: "def_p", scope: !3958, file: !1, line: 1396, type: !2092)
!3958 = distinct !DILexicalBlock(scope: !3954, file: !1, line: 1395, column: 5)
!3959 = !DILocation(line: 1396, column: 21, scope: !3958)
!3960 = !DILocalVariable(name: "op_iter", scope: !3958, file: !1, line: 1397, type: !3961)
!3961 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !576, line: 140, baseType: !3962)
!3962 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !576, line: 131, size: 320, elements: !3963)
!3963 = !{!3964, !3965, !3966, !3968, !3970, !3971, !3972}
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !3962, file: !576, line: 133, baseType: !777, size: 8)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !3962, file: !576, line: 134, baseType: !575, size: 32, offset: 32)
!3966 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !3962, file: !576, line: 135, baseType: !3967, size: 64, offset: 64)
!3967 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !576, line: 42, baseType: !1016)
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !3962, file: !576, line: 136, baseType: !3969, size: 64, offset: 128)
!3969 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !576, line: 50, baseType: !1023)
!3970 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !3962, file: !576, line: 137, baseType: !754, size: 32, offset: 192)
!3971 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !3962, file: !576, line: 138, baseType: !754, size: 32, offset: 224)
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !3962, file: !576, line: 139, baseType: !987, size: 64, offset: 256)
!3973 = !DILocation(line: 1397, column: 19, scope: !3958)
!3974 = !DILocalVariable(name: "stmt", scope: !3958, file: !1, line: 1398, type: !987)
!3975 = !DILocation(line: 1398, column: 14, scope: !3958)
!3976 = !DILocation(line: 1398, column: 21, scope: !3958)
!3977 = !DILocalVariable(name: "copy", scope: !3958, file: !1, line: 1399, type: !987)
!3978 = !DILocation(line: 1399, column: 14, scope: !3958)
!3979 = !DILocation(line: 1401, column: 24, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3958, file: !1, line: 1401, column: 11)
!3981 = !DILocation(line: 1401, column: 11, scope: !3980)
!3982 = !DILocation(line: 1401, column: 30, scope: !3980)
!3983 = !DILocation(line: 1401, column: 11, scope: !3958)
!3984 = !DILocation(line: 1402, column: 2, scope: !3980)
!3985 = !DILocation(line: 1406, column: 27, scope: !3958)
!3986 = !DILocation(line: 1406, column: 14, scope: !3958)
!3987 = !DILocation(line: 1406, column: 12, scope: !3958)
!3988 = !DILocation(line: 1407, column: 35, scope: !3958)
!3989 = !DILocation(line: 1407, column: 7, scope: !3958)
!3990 = !DILocation(line: 1408, column: 42, scope: !3958)
!3991 = !DILocation(line: 1408, column: 30, scope: !3958)
!3992 = !DILocation(line: 1408, column: 7, scope: !3958)
!3993 = !DILocation(line: 1410, column: 32, scope: !3958)
!3994 = !DILocation(line: 1410, column: 38, scope: !3958)
!3995 = !DILocation(line: 1410, column: 7, scope: !3958)
!3996 = !DILocation(line: 1411, column: 41, scope: !3958)
!3997 = !DILocation(line: 1411, column: 47, scope: !3958)
!3998 = !DILocation(line: 1411, column: 53, scope: !3958)
!3999 = !DILocation(line: 1411, column: 59, scope: !3958)
!4000 = !DILocation(line: 1411, column: 7, scope: !3958)
!4001 = !DILocation(line: 1415, column: 7, scope: !4002)
!4002 = distinct !DILexicalBlock(scope: !3958, file: !1, line: 1415, column: 7)
!4003 = !DILocation(line: 1415, column: 7, scope: !4004)
!4004 = distinct !DILexicalBlock(scope: !4002, file: !1, line: 1415, column: 7)
!4005 = !DILocalVariable(name: "old_name", scope: !4006, file: !1, line: 1417, type: !657)
!4006 = distinct !DILexicalBlock(scope: !4004, file: !1, line: 1416, column: 2)
!4007 = !DILocation(line: 1417, column: 9, scope: !4006)
!4008 = !DILocation(line: 1417, column: 20, scope: !4006)
!4009 = !DILocalVariable(name: "new_name", scope: !4006, file: !1, line: 1418, type: !657)
!4010 = !DILocation(line: 1418, column: 9, scope: !4006)
!4011 = !DILocation(line: 1418, column: 40, scope: !4006)
!4012 = !DILocation(line: 1418, column: 50, scope: !4006)
!4013 = !DILocation(line: 1418, column: 56, scope: !4006)
!4014 = !DILocation(line: 1418, column: 20, scope: !4006)
!4015 = !DILocation(line: 1419, column: 16, scope: !4006)
!4016 = !DILocation(line: 1419, column: 21, scope: !4006)
!4017 = !DILocation(line: 1419, column: 31, scope: !4006)
!4018 = !DILocation(line: 1419, column: 4, scope: !4006)
!4019 = !DILocation(line: 1420, column: 2, scope: !4006)
!4020 = distinct !{!4020, !4001, !4021}
!4021 = !DILocation(line: 1420, column: 2, scope: !4002)
!4022 = !DILocation(line: 1421, column: 5, scope: !3958)
!4023 = !DILocation(line: 1394, column: 51, scope: !3954)
!4024 = !DILocation(line: 1394, column: 3, scope: !3954)
!4025 = distinct !{!4025, !3956, !4026}
!4026 = !DILocation(line: 1421, column: 5, scope: !3950)
!4027 = !DILocation(line: 1422, column: 1, scope: !3934)
!4028 = distinct !DISubprogram(name: "remove_condition", scope: !1, file: !1, line: 1062, type: !4029, scopeLine: 1063, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4029 = !DISubroutineType(types: !4030)
!4030 = !{null, !1439}
!4031 = !DILocalVariable(name: "bb", arg: 1, scope: !4028, file: !1, line: 1062, type: !1439)
!4032 = !DILocation(line: 1062, column: 31, scope: !4028)
!4033 = !DILocalVariable(name: "last", scope: !4028, file: !1, line: 1064, type: !987)
!4034 = !DILocation(line: 1064, column: 10, scope: !4028)
!4035 = !DILocation(line: 1064, column: 28, scope: !4028)
!4036 = !DILocation(line: 1064, column: 17, scope: !4028)
!4037 = !DILocation(line: 1066, column: 7, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4028, file: !1, line: 1066, column: 7)
!4039 = !DILocation(line: 1066, column: 12, scope: !4038)
!4040 = !DILocation(line: 1066, column: 28, scope: !4038)
!4041 = !DILocation(line: 1066, column: 15, scope: !4038)
!4042 = !DILocation(line: 1066, column: 34, scope: !4038)
!4043 = !DILocation(line: 1066, column: 7, scope: !4028)
!4044 = !DILocalVariable(name: "gsi", scope: !4045, file: !1, line: 1068, type: !3127)
!4045 = distinct !DILexicalBlock(scope: !4038, file: !1, line: 1067, column: 5)
!4046 = !DILocation(line: 1068, column: 28, scope: !4045)
!4047 = !DILocation(line: 1068, column: 47, scope: !4045)
!4048 = !DILocation(line: 1068, column: 34, scope: !4045)
!4049 = !DILocation(line: 1069, column: 7, scope: !4045)
!4050 = !DILocation(line: 1070, column: 5, scope: !4045)
!4051 = !DILocation(line: 1071, column: 1, scope: !4028)
!4052 = distinct !DISubprogram(name: "expand_scalar_variables", scope: !1, file: !1, line: 1035, type: !4053, scopeLine: 1036, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4053 = !DISubroutineType(types: !4054)
!4054 = !{null, !1439, !2045, !1471}
!4055 = !DILocalVariable(name: "bb", arg: 1, scope: !4052, file: !1, line: 1035, type: !1439)
!4056 = !DILocation(line: 1035, column: 38, scope: !4052)
!4057 = !DILocalVariable(name: "region", arg: 2, scope: !4052, file: !1, line: 1035, type: !2045)
!4058 = !DILocation(line: 1035, column: 47, scope: !4052)
!4059 = !DILocalVariable(name: "map", arg: 3, scope: !4052, file: !1, line: 1035, type: !1471)
!4060 = !DILocation(line: 1035, column: 62, scope: !4052)
!4061 = !DILocalVariable(name: "gsi", scope: !4052, file: !1, line: 1037, type: !3127)
!4062 = !DILocation(line: 1037, column: 24, scope: !4052)
!4063 = !DILocation(line: 1039, column: 32, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4052, file: !1, line: 1039, column: 3)
!4065 = !DILocation(line: 1039, column: 14, scope: !4064)
!4066 = !DILocation(line: 1039, column: 8, scope: !4064)
!4067 = !DILocation(line: 1039, column: 38, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !4064, file: !1, line: 1039, column: 3)
!4069 = !DILocation(line: 1039, column: 37, scope: !4068)
!4070 = !DILocation(line: 1039, column: 3, scope: !4064)
!4071 = !DILocalVariable(name: "stmt", scope: !4072, file: !1, line: 1041, type: !987)
!4072 = distinct !DILexicalBlock(scope: !4068, file: !1, line: 1040, column: 5)
!4073 = !DILocation(line: 1041, column: 14, scope: !4072)
!4074 = !DILocation(line: 1041, column: 21, scope: !4072)
!4075 = !DILocation(line: 1042, column: 37, scope: !4072)
!4076 = !DILocation(line: 1042, column: 43, scope: !4072)
!4077 = !DILocation(line: 1042, column: 47, scope: !4072)
!4078 = !DILocation(line: 1042, column: 55, scope: !4072)
!4079 = !DILocation(line: 1042, column: 7, scope: !4072)
!4080 = !DILocation(line: 1043, column: 7, scope: !4072)
!4081 = !DILocation(line: 1039, column: 3, scope: !4068)
!4082 = distinct !{!4082, !4070, !4083}
!4083 = !DILocation(line: 1044, column: 5, scope: !4064)
!4084 = !DILocation(line: 1045, column: 1, scope: !4052)
!4085 = distinct !DISubprogram(name: "rename_variables", scope: !1, file: !1, line: 1050, type: !4086, scopeLine: 1051, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4086 = !DISubroutineType(types: !4087)
!4087 = !{null, !1439, !1471}
!4088 = !DILocalVariable(name: "bb", arg: 1, scope: !4085, file: !1, line: 1050, type: !1439)
!4089 = !DILocation(line: 1050, column: 31, scope: !4085)
!4090 = !DILocalVariable(name: "map", arg: 2, scope: !4085, file: !1, line: 1050, type: !1471)
!4091 = !DILocation(line: 1050, column: 42, scope: !4085)
!4092 = !DILocalVariable(name: "gsi", scope: !4085, file: !1, line: 1052, type: !3127)
!4093 = !DILocation(line: 1052, column: 24, scope: !4085)
!4094 = !DILocalVariable(name: "insert_gsi", scope: !4085, file: !1, line: 1053, type: !3127)
!4095 = !DILocation(line: 1053, column: 24, scope: !4085)
!4096 = !DILocation(line: 1053, column: 51, scope: !4085)
!4097 = !DILocation(line: 1053, column: 37, scope: !4085)
!4098 = !DILocation(line: 1055, column: 32, scope: !4099)
!4099 = distinct !DILexicalBlock(scope: !4085, file: !1, line: 1055, column: 3)
!4100 = !DILocation(line: 1055, column: 14, scope: !4099)
!4101 = !DILocation(line: 1055, column: 8, scope: !4099)
!4102 = !DILocation(line: 1055, column: 38, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !4099, file: !1, line: 1055, column: 3)
!4104 = !DILocation(line: 1055, column: 37, scope: !4103)
!4105 = !DILocation(line: 1055, column: 3, scope: !4099)
!4106 = !DILocation(line: 1056, column: 31, scope: !4103)
!4107 = !DILocation(line: 1056, column: 47, scope: !4103)
!4108 = !DILocation(line: 1056, column: 5, scope: !4103)
!4109 = !DILocation(line: 1055, column: 55, scope: !4103)
!4110 = !DILocation(line: 1055, column: 3, scope: !4103)
!4111 = distinct !{!4111, !4105, !4112}
!4112 = !DILocation(line: 1056, column: 63, scope: !4099)
!4113 = !DILocation(line: 1057, column: 1, scope: !4085)
!4114 = distinct !DISubprogram(name: "outermost_loop_in_sese", scope: !1, file: !1, line: 1447, type: !4115, scopeLine: 1448, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4115 = !DISubroutineType(types: !4116)
!4116 = !{!1202, !2045, !1439}
!4117 = !DILocalVariable(name: "region", arg: 1, scope: !4114, file: !1, line: 1447, type: !2045)
!4118 = !DILocation(line: 1447, column: 30, scope: !4114)
!4119 = !DILocalVariable(name: "bb", arg: 2, scope: !4114, file: !1, line: 1447, type: !1439)
!4120 = !DILocation(line: 1447, column: 50, scope: !4114)
!4121 = !DILocalVariable(name: "nest", scope: !4114, file: !1, line: 1449, type: !1202)
!4122 = !DILocation(line: 1449, column: 16, scope: !4114)
!4123 = !DILocation(line: 1451, column: 10, scope: !4114)
!4124 = !DILocation(line: 1451, column: 14, scope: !4114)
!4125 = !DILocation(line: 1451, column: 8, scope: !4114)
!4126 = !DILocation(line: 1452, column: 3, scope: !4114)
!4127 = !DILocation(line: 1452, column: 22, scope: !4114)
!4128 = !DILocation(line: 1452, column: 10, scope: !4114)
!4129 = !DILocation(line: 1453, column: 3, scope: !4114)
!4130 = !DILocation(line: 1453, column: 34, scope: !4114)
!4131 = !DILocation(line: 1453, column: 22, scope: !4114)
!4132 = !DILocation(line: 1453, column: 41, scope: !4114)
!4133 = !DILocation(line: 1453, column: 6, scope: !4114)
!4134 = !DILocation(line: 0, scope: !4114)
!4135 = !DILocation(line: 1454, column: 24, scope: !4114)
!4136 = !DILocation(line: 1454, column: 12, scope: !4114)
!4137 = !DILocation(line: 1454, column: 10, scope: !4114)
!4138 = distinct !{!4138, !4126, !4139}
!4139 = !DILocation(line: 1454, column: 28, scope: !4114)
!4140 = !DILocation(line: 1456, column: 10, scope: !4114)
!4141 = !DILocation(line: 1456, column: 3, scope: !4114)
!4142 = distinct !DISubprogram(name: "loop_outer", scope: !328, file: !328, line: 434, type: !4143, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4143 = !DISubroutineType(types: !4144)
!4144 = !{!1202, !4145}
!4145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4146, size: 64)
!4146 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1203)
!4147 = !DILocalVariable(name: "loop", arg: 1, scope: !4142, file: !328, line: 434, type: !4145)
!4148 = !DILocation(line: 434, column: 32, scope: !4142)
!4149 = !DILocalVariable(name: "n", scope: !4142, file: !328, line: 436, type: !5)
!4150 = !DILocation(line: 436, column: 12, scope: !4142)
!4151 = !DILocation(line: 436, column: 16, scope: !4142)
!4152 = !DILocation(line: 438, column: 7, scope: !4153)
!4153 = distinct !DILexicalBlock(scope: !4142, file: !328, line: 438, column: 7)
!4154 = !DILocation(line: 438, column: 9, scope: !4153)
!4155 = !DILocation(line: 438, column: 7, scope: !4142)
!4156 = !DILocation(line: 439, column: 5, scope: !4153)
!4157 = !DILocation(line: 441, column: 10, scope: !4142)
!4158 = !DILocation(line: 441, column: 3, scope: !4142)
!4159 = !DILocation(line: 442, column: 1, scope: !4142)
!4160 = distinct !DISubprogram(name: "loop_in_sese_p", scope: !654, file: !654, line: 135, type: !4161, scopeLine: 136, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4161 = !DISubroutineType(types: !4162)
!4162 = !{!777, !1202, !2045}
!4163 = !DILocalVariable(name: "loop", arg: 1, scope: !4160, file: !654, line: 135, type: !1202)
!4164 = !DILocation(line: 135, column: 30, scope: !4160)
!4165 = !DILocalVariable(name: "region", arg: 2, scope: !4160, file: !654, line: 135, type: !2045)
!4166 = !DILocation(line: 135, column: 41, scope: !4160)
!4167 = !DILocation(line: 137, column: 25, scope: !4160)
!4168 = !DILocation(line: 137, column: 31, scope: !4160)
!4169 = !DILocation(line: 137, column: 39, scope: !4160)
!4170 = !DILocation(line: 137, column: 11, scope: !4160)
!4171 = !DILocation(line: 138, column: 4, scope: !4160)
!4172 = !DILocation(line: 138, column: 21, scope: !4160)
!4173 = !DILocation(line: 138, column: 27, scope: !4160)
!4174 = !DILocation(line: 138, column: 34, scope: !4160)
!4175 = !DILocation(line: 138, column: 7, scope: !4160)
!4176 = !DILocation(line: 0, scope: !4160)
!4177 = !DILocation(line: 137, column: 10, scope: !4160)
!4178 = !DILocation(line: 137, column: 3, scope: !4160)
!4179 = distinct !DISubprogram(name: "if_region_set_false_region", scope: !1, file: !1, line: 1462, type: !4180, scopeLine: 1463, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4180 = !DISubroutineType(types: !4181)
!4181 = !{null, !4182, !2045}
!4182 = !DIDerivedType(tag: DW_TAG_typedef, name: "ifsese", file: !654, line: 226, baseType: !2041)
!4183 = !DILocalVariable(name: "if_region", arg: 1, scope: !4179, file: !1, line: 1462, type: !4182)
!4184 = !DILocation(line: 1462, column: 36, scope: !4179)
!4185 = !DILocalVariable(name: "region", arg: 2, scope: !4179, file: !1, line: 1462, type: !2045)
!4186 = !DILocation(line: 1462, column: 52, scope: !4179)
!4187 = !DILocalVariable(name: "condition", scope: !4179, file: !1, line: 1464, type: !1439)
!4188 = !DILocation(line: 1464, column: 15, scope: !4179)
!4189 = !DILocation(line: 1464, column: 58, scope: !4179)
!4190 = !DILocation(line: 1464, column: 27, scope: !4179)
!4191 = !DILocalVariable(name: "false_edge", scope: !4179, file: !1, line: 1465, type: !967)
!4192 = !DILocation(line: 1465, column: 8, scope: !4179)
!4193 = !DILocation(line: 1465, column: 51, scope: !4179)
!4194 = !DILocation(line: 1465, column: 21, scope: !4179)
!4195 = !DILocalVariable(name: "dummy", scope: !4179, file: !1, line: 1466, type: !1439)
!4196 = !DILocation(line: 1466, column: 15, scope: !4179)
!4197 = !DILocation(line: 1466, column: 23, scope: !4179)
!4198 = !DILocation(line: 1466, column: 35, scope: !4179)
!4199 = !DILocalVariable(name: "entry_region", scope: !4179, file: !1, line: 1467, type: !967)
!4200 = !DILocation(line: 1467, column: 8, scope: !4179)
!4201 = !DILocation(line: 1467, column: 23, scope: !4179)
!4202 = !DILocalVariable(name: "exit_region", scope: !4179, file: !1, line: 1468, type: !967)
!4203 = !DILocation(line: 1468, column: 8, scope: !4179)
!4204 = !DILocation(line: 1468, column: 22, scope: !4179)
!4205 = !DILocalVariable(name: "before_region", scope: !4179, file: !1, line: 1469, type: !1439)
!4206 = !DILocation(line: 1469, column: 15, scope: !4179)
!4207 = !DILocation(line: 1469, column: 31, scope: !4179)
!4208 = !DILocation(line: 1469, column: 45, scope: !4179)
!4209 = !DILocalVariable(name: "last_in_region", scope: !4179, file: !1, line: 1470, type: !1439)
!4210 = !DILocation(line: 1470, column: 15, scope: !4179)
!4211 = !DILocation(line: 1470, column: 32, scope: !4179)
!4212 = !DILocation(line: 1470, column: 45, scope: !4179)
!4213 = !DILocalVariable(name: "slot", scope: !4179, file: !1, line: 1471, type: !1494)
!4214 = !DILocation(line: 1471, column: 10, scope: !4179)
!4215 = !DILocation(line: 1471, column: 43, scope: !4179)
!4216 = !DILocation(line: 1471, column: 58, scope: !4179)
!4217 = !DILocation(line: 1471, column: 65, scope: !4179)
!4218 = !DILocation(line: 1472, column: 8, scope: !4179)
!4219 = !DILocation(line: 1472, column: 27, scope: !4179)
!4220 = !DILocation(line: 1471, column: 17, scope: !4179)
!4221 = !DILocation(line: 1475, column: 25, scope: !4179)
!4222 = !DILocation(line: 1475, column: 37, scope: !4179)
!4223 = !DILocation(line: 1475, column: 3, scope: !4179)
!4224 = !DILocation(line: 1475, column: 17, scope: !4179)
!4225 = !DILocation(line: 1475, column: 23, scope: !4179)
!4226 = !DILocation(line: 1476, column: 23, scope: !4179)
!4227 = !DILocation(line: 1476, column: 36, scope: !4179)
!4228 = !DILocation(line: 1476, column: 3, scope: !4179)
!4229 = !DILocation(line: 1476, column: 15, scope: !4179)
!4230 = !DILocation(line: 1476, column: 21, scope: !4179)
!4231 = !DILocation(line: 1478, column: 23, scope: !4179)
!4232 = !DILocation(line: 1478, column: 37, scope: !4179)
!4233 = !DILocation(line: 1478, column: 3, scope: !4179)
!4234 = !DILocation(line: 1479, column: 23, scope: !4179)
!4235 = !DILocation(line: 1479, column: 36, scope: !4179)
!4236 = !DILocation(line: 1479, column: 3, scope: !4179)
!4237 = !DILocation(line: 1480, column: 23, scope: !4179)
!4238 = !DILocation(line: 1480, column: 35, scope: !4179)
!4239 = !DILocation(line: 1480, column: 3, scope: !4179)
!4240 = !DILocation(line: 1481, column: 23, scope: !4179)
!4241 = !DILocation(line: 1481, column: 48, scope: !4179)
!4242 = !DILocation(line: 1481, column: 35, scope: !4179)
!4243 = !DILocation(line: 1481, column: 3, scope: !4179)
!4244 = !DILocation(line: 1482, column: 23, scope: !4179)
!4245 = !DILocation(line: 1482, column: 3, scope: !4179)
!4246 = !DILocation(line: 1484, column: 3, scope: !4179)
!4247 = !DILocation(line: 1484, column: 16, scope: !4179)
!4248 = !DILocation(line: 1484, column: 22, scope: !4179)
!4249 = !DILocation(line: 1485, column: 3, scope: !4179)
!4250 = !DILocation(line: 1487, column: 24, scope: !4179)
!4251 = !DILocation(line: 1487, column: 3, scope: !4179)
!4252 = !DILocation(line: 1487, column: 22, scope: !4179)
!4253 = !DILocation(line: 1489, column: 7, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4179, file: !1, line: 1489, column: 7)
!4255 = !DILocation(line: 1489, column: 18, scope: !4254)
!4256 = !DILocation(line: 1489, column: 7, scope: !4179)
!4257 = !DILocation(line: 1490, column: 11, scope: !4254)
!4258 = !DILocation(line: 1490, column: 22, scope: !4254)
!4259 = !DILocation(line: 1490, column: 5, scope: !4254)
!4260 = !DILocation(line: 1491, column: 29, scope: !4179)
!4261 = !DILocation(line: 1491, column: 3, scope: !4179)
!4262 = !DILocation(line: 1491, column: 14, scope: !4179)
!4263 = !DILocation(line: 1491, column: 27, scope: !4179)
!4264 = !DILocation(line: 1493, column: 7, scope: !4265)
!4265 = distinct !DILexicalBlock(scope: !4179, file: !1, line: 1493, column: 7)
!4266 = !DILocation(line: 1493, column: 7, scope: !4179)
!4267 = !DILocalVariable(name: "loop_exit", scope: !4268, file: !1, line: 1495, type: !1248)
!4268 = distinct !DILexicalBlock(scope: !4265, file: !1, line: 1494, column: 5)
!4269 = !DILocation(line: 1495, column: 25, scope: !4268)
!4270 = !DILocation(line: 1495, column: 37, scope: !4268)
!4271 = !DILocation(line: 1497, column: 15, scope: !4268)
!4272 = !DILocation(line: 1497, column: 7, scope: !4268)
!4273 = !DILocation(line: 1497, column: 50, scope: !4268)
!4274 = !DILocation(line: 1497, column: 26, scope: !4268)
!4275 = !DILocation(line: 1498, column: 24, scope: !4268)
!4276 = !DILocation(line: 1498, column: 39, scope: !4268)
!4277 = !DILocation(line: 1498, column: 46, scope: !4268)
!4278 = !DILocation(line: 1498, column: 7, scope: !4268)
!4279 = !DILocation(line: 1500, column: 40, scope: !4268)
!4280 = !DILocation(line: 1500, column: 55, scope: !4268)
!4281 = !DILocation(line: 1500, column: 62, scope: !4268)
!4282 = !DILocation(line: 1501, column: 12, scope: !4268)
!4283 = !DILocation(line: 1501, column: 31, scope: !4268)
!4284 = !DILocation(line: 1500, column: 14, scope: !4268)
!4285 = !DILocation(line: 1500, column: 12, scope: !4268)
!4286 = !DILocation(line: 1503, column: 22, scope: !4268)
!4287 = !DILocation(line: 1503, column: 7, scope: !4268)
!4288 = !DILocation(line: 1503, column: 18, scope: !4268)
!4289 = !DILocation(line: 1503, column: 20, scope: !4268)
!4290 = !DILocation(line: 1504, column: 15, scope: !4268)
!4291 = !DILocation(line: 1504, column: 8, scope: !4268)
!4292 = !DILocation(line: 1504, column: 13, scope: !4268)
!4293 = !DILocation(line: 1505, column: 51, scope: !4268)
!4294 = !DILocation(line: 1505, column: 7, scope: !4268)
!4295 = !DILocation(line: 1505, column: 19, scope: !4268)
!4296 = !DILocation(line: 1505, column: 24, scope: !4268)
!4297 = !DILocation(line: 1505, column: 37, scope: !4268)
!4298 = !DILocation(line: 1505, column: 44, scope: !4268)
!4299 = !DILocation(line: 1505, column: 49, scope: !4268)
!4300 = !DILocation(line: 1506, column: 5, scope: !4268)
!4301 = !DILocation(line: 1507, column: 1, scope: !4179)
!4302 = distinct !DISubprogram(name: "if_region_get_condition_block", scope: !654, file: !654, line: 248, type: !4303, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4303 = !DISubroutineType(types: !4304)
!4304 = !{!1439, !4182}
!4305 = !DILocalVariable(name: "if_region", arg: 1, scope: !4302, file: !654, line: 248, type: !4182)
!4306 = !DILocation(line: 248, column: 39, scope: !4302)
!4307 = !DILocation(line: 250, column: 27, scope: !4302)
!4308 = !DILocation(line: 250, column: 10, scope: !4302)
!4309 = !DILocation(line: 250, column: 39, scope: !4302)
!4310 = !DILocation(line: 250, column: 3, scope: !4302)
!4311 = distinct !DISubprogram(name: "single_succ", scope: !341, file: !341, line: 663, type: !4312, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4312 = !DISubroutineType(types: !4313)
!4313 = !{!1439, !3926}
!4314 = !DILocalVariable(name: "bb", arg: 1, scope: !4311, file: !341, line: 663, type: !3926)
!4315 = !DILocation(line: 663, column: 32, scope: !4311)
!4316 = !DILocation(line: 665, column: 28, scope: !4311)
!4317 = !DILocation(line: 665, column: 10, scope: !4311)
!4318 = !DILocation(line: 665, column: 33, scope: !4311)
!4319 = !DILocation(line: 665, column: 3, scope: !4311)
!4320 = distinct !DISubprogram(name: "recompute_all_dominators", scope: !654, file: !654, line: 313, type: !4321, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4321 = !DISubroutineType(types: !4322)
!4322 = !{null}
!4323 = !DILocation(line: 315, column: 3, scope: !4320)
!4324 = !DILocation(line: 316, column: 3, scope: !4320)
!4325 = !DILocation(line: 317, column: 3, scope: !4320)
!4326 = !DILocation(line: 318, column: 3, scope: !4320)
!4327 = !DILocation(line: 319, column: 3, scope: !4320)
!4328 = !DILocation(line: 320, column: 1, scope: !4320)
!4329 = distinct !DISubprogram(name: "create_if_region_on_edge", scope: !1, file: !1, line: 1512, type: !4330, scopeLine: 1513, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4330 = !DISubroutineType(types: !4331)
!4331 = !{!4182, !967, !657}
!4332 = !DILocalVariable(name: "entry", arg: 1, scope: !4329, file: !1, line: 1512, type: !967)
!4333 = !DILocation(line: 1512, column: 32, scope: !4329)
!4334 = !DILocalVariable(name: "condition", arg: 2, scope: !4329, file: !1, line: 1512, type: !657)
!4335 = !DILocation(line: 1512, column: 44, scope: !4329)
!4336 = !DILocalVariable(name: "e", scope: !4329, file: !1, line: 1514, type: !967)
!4337 = !DILocation(line: 1514, column: 8, scope: !4329)
!4338 = !DILocalVariable(name: "ei", scope: !4329, file: !1, line: 1515, type: !3486)
!4339 = !DILocation(line: 1515, column: 17, scope: !4329)
!4340 = !DILocalVariable(name: "sese_region", scope: !4329, file: !1, line: 1516, type: !2045)
!4341 = !DILocation(line: 1516, column: 8, scope: !4329)
!4342 = !DILocation(line: 1516, column: 22, scope: !4329)
!4343 = !DILocalVariable(name: "true_region", scope: !4329, file: !1, line: 1517, type: !2045)
!4344 = !DILocation(line: 1517, column: 8, scope: !4329)
!4345 = !DILocation(line: 1517, column: 22, scope: !4329)
!4346 = !DILocalVariable(name: "false_region", scope: !4329, file: !1, line: 1518, type: !2045)
!4347 = !DILocation(line: 1518, column: 8, scope: !4329)
!4348 = !DILocation(line: 1518, column: 23, scope: !4329)
!4349 = !DILocalVariable(name: "if_region", scope: !4329, file: !1, line: 1519, type: !4182)
!4350 = !DILocation(line: 1519, column: 10, scope: !4329)
!4351 = !DILocation(line: 1519, column: 22, scope: !4329)
!4352 = !DILocalVariable(name: "exit", scope: !4329, file: !1, line: 1520, type: !967)
!4353 = !DILocation(line: 1520, column: 8, scope: !4329)
!4354 = !DILocation(line: 1520, column: 47, scope: !4329)
!4355 = !DILocation(line: 1520, column: 54, scope: !4329)
!4356 = !DILocation(line: 1520, column: 15, scope: !4329)
!4357 = !DILocation(line: 1522, column: 23, scope: !4329)
!4358 = !DILocation(line: 1522, column: 3, scope: !4329)
!4359 = !DILocation(line: 1522, column: 14, scope: !4329)
!4360 = !DILocation(line: 1522, column: 21, scope: !4329)
!4361 = !DILocation(line: 1523, column: 30, scope: !4329)
!4362 = !DILocation(line: 1523, column: 3, scope: !4329)
!4363 = !DILocation(line: 1523, column: 14, scope: !4329)
!4364 = !DILocation(line: 1523, column: 22, scope: !4329)
!4365 = !DILocation(line: 1523, column: 28, scope: !4329)
!4366 = !DILocation(line: 1524, column: 29, scope: !4329)
!4367 = !DILocation(line: 1524, column: 3, scope: !4329)
!4368 = !DILocation(line: 1524, column: 14, scope: !4329)
!4369 = !DILocation(line: 1524, column: 22, scope: !4329)
!4370 = !DILocation(line: 1524, column: 27, scope: !4329)
!4371 = !DILocation(line: 1526, column: 3, scope: !4372)
!4372 = distinct !DILexicalBlock(scope: !4329, file: !1, line: 1526, column: 3)
!4373 = !DILocation(line: 1526, column: 3, scope: !4374)
!4374 = distinct !DILexicalBlock(scope: !4372, file: !1, line: 1526, column: 3)
!4375 = !DILocation(line: 1528, column: 11, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !4377, file: !1, line: 1528, column: 11)
!4377 = distinct !DILexicalBlock(scope: !4374, file: !1, line: 1527, column: 5)
!4378 = !DILocation(line: 1528, column: 14, scope: !4376)
!4379 = !DILocation(line: 1528, column: 20, scope: !4376)
!4380 = !DILocation(line: 1528, column: 11, scope: !4377)
!4381 = !DILocation(line: 1530, column: 25, scope: !4382)
!4382 = distinct !DILexicalBlock(scope: !4376, file: !1, line: 1529, column: 2)
!4383 = !DILocation(line: 1530, column: 4, scope: !4382)
!4384 = !DILocation(line: 1530, column: 17, scope: !4382)
!4385 = !DILocation(line: 1530, column: 23, scope: !4382)
!4386 = !DILocation(line: 1531, column: 42, scope: !4382)
!4387 = !DILocation(line: 1531, column: 45, scope: !4382)
!4388 = !DILocation(line: 1531, column: 24, scope: !4382)
!4389 = !DILocation(line: 1531, column: 4, scope: !4382)
!4390 = !DILocation(line: 1531, column: 17, scope: !4382)
!4391 = !DILocation(line: 1531, column: 22, scope: !4382)
!4392 = !DILocation(line: 1532, column: 29, scope: !4382)
!4393 = !DILocation(line: 1532, column: 4, scope: !4382)
!4394 = !DILocation(line: 1532, column: 15, scope: !4382)
!4395 = !DILocation(line: 1532, column: 27, scope: !4382)
!4396 = !DILocation(line: 1533, column: 2, scope: !4382)
!4397 = !DILocation(line: 1534, column: 16, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4376, file: !1, line: 1534, column: 16)
!4399 = !DILocation(line: 1534, column: 19, scope: !4398)
!4400 = !DILocation(line: 1534, column: 25, scope: !4398)
!4401 = !DILocation(line: 1534, column: 16, scope: !4376)
!4402 = !DILocation(line: 1536, column: 26, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1535, column: 2)
!4404 = !DILocation(line: 1536, column: 4, scope: !4403)
!4405 = !DILocation(line: 1536, column: 18, scope: !4403)
!4406 = !DILocation(line: 1536, column: 24, scope: !4403)
!4407 = !DILocation(line: 1537, column: 43, scope: !4403)
!4408 = !DILocation(line: 1537, column: 46, scope: !4403)
!4409 = !DILocation(line: 1537, column: 25, scope: !4403)
!4410 = !DILocation(line: 1537, column: 4, scope: !4403)
!4411 = !DILocation(line: 1537, column: 18, scope: !4403)
!4412 = !DILocation(line: 1537, column: 23, scope: !4403)
!4413 = !DILocation(line: 1538, column: 30, scope: !4403)
!4414 = !DILocation(line: 1538, column: 4, scope: !4403)
!4415 = !DILocation(line: 1538, column: 15, scope: !4403)
!4416 = !DILocation(line: 1538, column: 28, scope: !4403)
!4417 = !DILocation(line: 1539, column: 2, scope: !4403)
!4418 = !DILocation(line: 1540, column: 5, scope: !4377)
!4419 = distinct !{!4419, !4371, !4420}
!4420 = !DILocation(line: 1540, column: 5, scope: !4372)
!4421 = !DILocation(line: 1542, column: 10, scope: !4329)
!4422 = !DILocation(line: 1542, column: 3, scope: !4329)
!4423 = distinct !DISubprogram(name: "move_sese_in_condition", scope: !1, file: !1, line: 1553, type: !4424, scopeLine: 1554, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4424 = !DISubroutineType(types: !4425)
!4425 = !{!4182, !2045}
!4426 = !DILocalVariable(name: "region", arg: 1, scope: !4423, file: !1, line: 1553, type: !2045)
!4427 = !DILocation(line: 1553, column: 30, scope: !4423)
!4428 = !DILocalVariable(name: "pred_block", scope: !4423, file: !1, line: 1555, type: !1439)
!4429 = !DILocation(line: 1555, column: 15, scope: !4423)
!4430 = !DILocation(line: 1555, column: 40, scope: !4423)
!4431 = !DILocation(line: 1555, column: 28, scope: !4423)
!4432 = !DILocalVariable(name: "if_region", scope: !4423, file: !1, line: 1556, type: !4182)
!4433 = !DILocation(line: 1556, column: 10, scope: !4423)
!4434 = !DILocation(line: 1558, column: 43, scope: !4423)
!4435 = !DILocation(line: 1558, column: 25, scope: !4423)
!4436 = !DILocation(line: 1558, column: 3, scope: !4423)
!4437 = !DILocation(line: 1558, column: 23, scope: !4423)
!4438 = !DILocation(line: 1559, column: 59, scope: !4423)
!4439 = !DILocation(line: 1559, column: 41, scope: !4423)
!4440 = !DILocation(line: 1559, column: 72, scope: !4423)
!4441 = !DILocation(line: 1559, column: 15, scope: !4423)
!4442 = !DILocation(line: 1559, column: 13, scope: !4423)
!4443 = !DILocation(line: 1560, column: 31, scope: !4423)
!4444 = !DILocation(line: 1560, column: 42, scope: !4423)
!4445 = !DILocation(line: 1560, column: 3, scope: !4423)
!4446 = !DILocation(line: 1562, column: 10, scope: !4423)
!4447 = !DILocation(line: 1562, column: 3, scope: !4423)
!4448 = distinct !DISubprogram(name: "single_pred_edge", scope: !341, file: !341, line: 653, type: !3924, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4449 = !DILocalVariable(name: "bb", arg: 1, scope: !4448, file: !341, line: 653, type: !3926)
!4450 = !DILocation(line: 653, column: 37, scope: !4448)
!4451 = !DILocation(line: 655, column: 3, scope: !4448)
!4452 = !DILocation(line: 656, column: 10, scope: !4448)
!4453 = !DILocation(line: 656, column: 3, scope: !4448)
!4454 = distinct !DISubprogram(name: "set_ifsese_condition", scope: !1, file: !1, line: 1573, type: !4455, scopeLine: 1574, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4455 = !DISubroutineType(types: !4456)
!4456 = !{null, !4182, !657}
!4457 = !DILocalVariable(name: "if_region", arg: 1, scope: !4454, file: !1, line: 1573, type: !4182)
!4458 = !DILocation(line: 1573, column: 30, scope: !4454)
!4459 = !DILocalVariable(name: "condition", arg: 2, scope: !4454, file: !1, line: 1573, type: !657)
!4460 = !DILocation(line: 1573, column: 46, scope: !4454)
!4461 = !DILocalVariable(name: "region", scope: !4454, file: !1, line: 1575, type: !2045)
!4462 = !DILocation(line: 1575, column: 8, scope: !4454)
!4463 = !DILocation(line: 1575, column: 17, scope: !4454)
!4464 = !DILocation(line: 1575, column: 28, scope: !4454)
!4465 = !DILocalVariable(name: "entry", scope: !4454, file: !1, line: 1576, type: !967)
!4466 = !DILocation(line: 1576, column: 8, scope: !4454)
!4467 = !DILocation(line: 1576, column: 16, scope: !4454)
!4468 = !DILocation(line: 1576, column: 24, scope: !4454)
!4469 = !DILocalVariable(name: "bb", scope: !4454, file: !1, line: 1577, type: !1439)
!4470 = !DILocation(line: 1577, column: 15, scope: !4454)
!4471 = !DILocation(line: 1577, column: 20, scope: !4454)
!4472 = !DILocation(line: 1577, column: 27, scope: !4454)
!4473 = !DILocalVariable(name: "last", scope: !4454, file: !1, line: 1578, type: !987)
!4474 = !DILocation(line: 1578, column: 10, scope: !4454)
!4475 = !DILocation(line: 1578, column: 28, scope: !4454)
!4476 = !DILocation(line: 1578, column: 17, scope: !4454)
!4477 = !DILocalVariable(name: "gsi", scope: !4454, file: !1, line: 1579, type: !3127)
!4478 = !DILocation(line: 1579, column: 24, scope: !4454)
!4479 = !DILocation(line: 1579, column: 43, scope: !4454)
!4480 = !DILocation(line: 1579, column: 30, scope: !4454)
!4481 = !DILocalVariable(name: "cond_stmt", scope: !4454, file: !1, line: 1580, type: !987)
!4482 = !DILocation(line: 1580, column: 10, scope: !4454)
!4483 = !DILocation(line: 1582, column: 3, scope: !4454)
!4484 = !DILocation(line: 1584, column: 3, scope: !4454)
!4485 = !DILocation(line: 1585, column: 22, scope: !4454)
!4486 = !DILocation(line: 1585, column: 9, scope: !4454)
!4487 = !DILocation(line: 1586, column: 47, scope: !4454)
!4488 = !DILocation(line: 1586, column: 15, scope: !4454)
!4489 = !DILocation(line: 1586, column: 13, scope: !4454)
!4490 = !DILocation(line: 1588, column: 44, scope: !4454)
!4491 = !DILocation(line: 1588, column: 15, scope: !4454)
!4492 = !DILocation(line: 1588, column: 13, scope: !4454)
!4493 = !DILocation(line: 1589, column: 22, scope: !4454)
!4494 = !DILocation(line: 1589, column: 9, scope: !4454)
!4495 = !DILocation(line: 1590, column: 27, scope: !4454)
!4496 = !DILocation(line: 1590, column: 3, scope: !4454)
!4497 = !DILocation(line: 1591, column: 1, scope: !4454)
!4498 = distinct !DISubprogram(name: "gsi_last_bb", scope: !528, file: !528, line: 4450, type: !4499, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4499 = !DISubroutineType(types: !4500)
!4500 = !{!3127, !1439}
!4501 = !DILocalVariable(name: "bb", arg: 1, scope: !4498, file: !528, line: 4450, type: !1439)
!4502 = !DILocation(line: 4450, column: 26, scope: !4498)
!4503 = !DILocalVariable(name: "i", scope: !4498, file: !528, line: 4452, type: !3127)
!4504 = !DILocation(line: 4452, column: 24, scope: !4498)
!4505 = !DILocalVariable(name: "seq", scope: !4498, file: !528, line: 4453, type: !977)
!4506 = !DILocation(line: 4453, column: 14, scope: !4498)
!4507 = !DILocation(line: 4455, column: 17, scope: !4498)
!4508 = !DILocation(line: 4455, column: 9, scope: !4498)
!4509 = !DILocation(line: 4455, column: 7, scope: !4498)
!4510 = !DILocation(line: 4456, column: 28, scope: !4498)
!4511 = !DILocation(line: 4456, column: 11, scope: !4498)
!4512 = !DILocation(line: 4456, column: 5, scope: !4498)
!4513 = !DILocation(line: 4456, column: 9, scope: !4498)
!4514 = !DILocation(line: 4457, column: 11, scope: !4498)
!4515 = !DILocation(line: 4457, column: 5, scope: !4498)
!4516 = !DILocation(line: 4457, column: 9, scope: !4498)
!4517 = !DILocation(line: 4458, column: 10, scope: !4498)
!4518 = !DILocation(line: 4458, column: 5, scope: !4498)
!4519 = !DILocation(line: 4458, column: 8, scope: !4498)
!4520 = !DILocation(line: 4460, column: 3, scope: !4498)
!4521 = distinct !DISubprogram(name: "gimple_code", scope: !528, file: !528, line: 1052, type: !4522, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4522 = !DISubroutineType(types: !4523)
!4523 = !{!527, !3278}
!4524 = !DILocalVariable(name: "g", arg: 1, scope: !4521, file: !528, line: 1052, type: !3278)
!4525 = !DILocation(line: 1052, column: 27, scope: !4521)
!4526 = !DILocation(line: 1054, column: 10, scope: !4521)
!4527 = !DILocation(line: 1054, column: 13, scope: !4521)
!4528 = !DILocation(line: 1054, column: 20, scope: !4521)
!4529 = !DILocation(line: 1054, column: 3, scope: !4521)
!4530 = distinct !DISubprogram(name: "scalar_evolution_in_region", scope: !1, file: !1, line: 1597, type: !4531, scopeLine: 1598, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4531 = !DISubroutineType(types: !4532)
!4532 = !{!657, !2045, !1229, !657}
!4533 = !DILocalVariable(name: "region", arg: 1, scope: !4530, file: !1, line: 1597, type: !2045)
!4534 = !DILocation(line: 1597, column: 34, scope: !4530)
!4535 = !DILocalVariable(name: "loop", arg: 2, scope: !4530, file: !1, line: 1597, type: !1229)
!4536 = !DILocation(line: 1597, column: 49, scope: !4530)
!4537 = !DILocalVariable(name: "t", arg: 3, scope: !4530, file: !1, line: 1597, type: !657)
!4538 = !DILocation(line: 1597, column: 60, scope: !4530)
!4539 = !DILocalVariable(name: "def", scope: !4530, file: !1, line: 1599, type: !987)
!4540 = !DILocation(line: 1599, column: 10, scope: !4530)
!4541 = !DILocalVariable(name: "def_loop", scope: !4530, file: !1, line: 1600, type: !1202)
!4542 = !DILocation(line: 1600, column: 16, scope: !4530)
!4543 = !DILocalVariable(name: "before", scope: !4530, file: !1, line: 1601, type: !1439)
!4544 = !DILocation(line: 1601, column: 15, scope: !4530)
!4545 = !DILocation(line: 1601, column: 43, scope: !4530)
!4546 = !DILocation(line: 1601, column: 24, scope: !4530)
!4547 = !DILocation(line: 1603, column: 7, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4530, file: !1, line: 1603, column: 7)
!4549 = !DILocation(line: 1603, column: 21, scope: !4548)
!4550 = !DILocation(line: 1604, column: 7, scope: !4548)
!4551 = !DILocation(line: 1604, column: 26, scope: !4548)
!4552 = !DILocation(line: 1604, column: 32, scope: !4548)
!4553 = !DILocation(line: 1604, column: 10, scope: !4548)
!4554 = !DILocation(line: 1603, column: 7, scope: !4530)
!4555 = !DILocation(line: 1605, column: 30, scope: !4548)
!4556 = !DILocation(line: 1605, column: 38, scope: !4548)
!4557 = !DILocation(line: 1606, column: 35, scope: !4548)
!4558 = !DILocation(line: 1606, column: 41, scope: !4548)
!4559 = !DILocation(line: 1606, column: 9, scope: !4548)
!4560 = !DILocation(line: 1605, column: 12, scope: !4548)
!4561 = !DILocation(line: 1605, column: 5, scope: !4548)
!4562 = !DILocation(line: 1608, column: 27, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4530, file: !1, line: 1608, column: 7)
!4564 = !DILocation(line: 1608, column: 30, scope: !4563)
!4565 = !DILocation(line: 1608, column: 8, scope: !4563)
!4566 = !DILocation(line: 1608, column: 7, scope: !4530)
!4567 = !DILocation(line: 1609, column: 12, scope: !4563)
!4568 = !DILocation(line: 1609, column: 5, scope: !4563)
!4569 = !DILocation(line: 1611, column: 9, scope: !4530)
!4570 = !DILocation(line: 1611, column: 7, scope: !4530)
!4571 = !DILocation(line: 1612, column: 36, scope: !4530)
!4572 = !DILocation(line: 1612, column: 14, scope: !4530)
!4573 = !DILocation(line: 1612, column: 12, scope: !4530)
!4574 = !DILocation(line: 1614, column: 23, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4530, file: !1, line: 1614, column: 7)
!4576 = !DILocation(line: 1614, column: 33, scope: !4575)
!4577 = !DILocation(line: 1614, column: 7, scope: !4575)
!4578 = !DILocation(line: 1614, column: 7, scope: !4530)
!4579 = !DILocation(line: 1616, column: 37, scope: !4580)
!4580 = distinct !DILexicalBlock(scope: !4575, file: !1, line: 1615, column: 5)
!4581 = !DILocation(line: 1616, column: 47, scope: !4580)
!4582 = !DILocation(line: 1616, column: 11, scope: !4580)
!4583 = !DILocation(line: 1616, column: 9, scope: !4580)
!4584 = !DILocation(line: 1617, column: 38, scope: !4580)
!4585 = !DILocation(line: 1617, column: 60, scope: !4580)
!4586 = !DILocation(line: 1617, column: 48, scope: !4580)
!4587 = !DILocation(line: 1617, column: 66, scope: !4580)
!4588 = !DILocation(line: 1617, column: 18, scope: !4580)
!4589 = !DILocation(line: 1617, column: 16, scope: !4580)
!4590 = !DILocation(line: 1618, column: 49, scope: !4580)
!4591 = !DILocation(line: 1618, column: 59, scope: !4580)
!4592 = !DILocation(line: 1618, column: 11, scope: !4580)
!4593 = !DILocation(line: 1618, column: 9, scope: !4580)
!4594 = !DILocation(line: 1619, column: 14, scope: !4580)
!4595 = !DILocation(line: 1619, column: 7, scope: !4580)
!4596 = !DILocation(line: 1622, column: 30, scope: !4575)
!4597 = !DILocation(line: 1622, column: 38, scope: !4575)
!4598 = !DILocation(line: 1622, column: 44, scope: !4575)
!4599 = !DILocation(line: 1622, column: 12, scope: !4575)
!4600 = !DILocation(line: 1622, column: 5, scope: !4575)
!4601 = !DILocation(line: 1623, column: 1, scope: !4530)
!4602 = distinct !DISubprogram(name: "block_before_sese", scope: !654, file: !654, line: 213, type: !4603, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4603 = !DISubroutineType(types: !4604)
!4604 = !{!1439, !2045}
!4605 = !DILocalVariable(name: "sese", arg: 1, scope: !4602, file: !654, line: 213, type: !2045)
!4606 = !DILocation(line: 213, column: 25, scope: !4602)
!4607 = !DILocation(line: 215, column: 10, scope: !4602)
!4608 = !DILocation(line: 215, column: 29, scope: !4602)
!4609 = !DILocation(line: 215, column: 3, scope: !4602)
!4610 = distinct !DISubprogram(name: "defined_in_sese_p", scope: !654, file: !654, line: 124, type: !4611, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4611 = !DISubroutineType(types: !4612)
!4612 = !{!777, !657, !2045}
!4613 = !DILocalVariable(name: "name", arg: 1, scope: !4610, file: !654, line: 124, type: !657)
!4614 = !DILocation(line: 124, column: 25, scope: !4610)
!4615 = !DILocalVariable(name: "region", arg: 2, scope: !4610, file: !654, line: 124, type: !2045)
!4616 = !DILocation(line: 124, column: 36, scope: !4610)
!4617 = !DILocalVariable(name: "stmt", scope: !4610, file: !654, line: 126, type: !987)
!4618 = !DILocation(line: 126, column: 10, scope: !4610)
!4619 = !DILocation(line: 126, column: 17, scope: !4610)
!4620 = !DILocalVariable(name: "bb", scope: !4610, file: !654, line: 127, type: !1439)
!4621 = !DILocation(line: 127, column: 15, scope: !4610)
!4622 = !DILocation(line: 127, column: 31, scope: !4610)
!4623 = !DILocation(line: 127, column: 20, scope: !4610)
!4624 = !DILocation(line: 129, column: 10, scope: !4610)
!4625 = !DILocation(line: 129, column: 13, scope: !4610)
!4626 = !DILocation(line: 129, column: 30, scope: !4610)
!4627 = !DILocation(line: 129, column: 34, scope: !4610)
!4628 = !DILocation(line: 129, column: 16, scope: !4610)
!4629 = !DILocation(line: 0, scope: !4610)
!4630 = !DILocation(line: 129, column: 3, scope: !4610)
!4631 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !3379, file: !3379, line: 617, type: !4632, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4632 = !DISubroutineType(types: !4633)
!4633 = !{!1202, !987}
!4634 = !DILocalVariable(name: "stmt", arg: 1, scope: !4631, file: !3379, line: 617, type: !987)
!4635 = !DILocation(line: 617, column: 30, scope: !4631)
!4636 = !DILocalVariable(name: "bb", scope: !4631, file: !3379, line: 619, type: !1439)
!4637 = !DILocation(line: 619, column: 15, scope: !4631)
!4638 = !DILocation(line: 619, column: 31, scope: !4631)
!4639 = !DILocation(line: 619, column: 20, scope: !4631)
!4640 = !DILocation(line: 620, column: 8, scope: !4641)
!4641 = distinct !DILexicalBlock(scope: !4631, file: !3379, line: 620, column: 7)
!4642 = !DILocation(line: 620, column: 7, scope: !4631)
!4643 = !DILocation(line: 621, column: 5, scope: !4641)
!4644 = !DILocation(line: 623, column: 10, scope: !4631)
!4645 = !DILocation(line: 623, column: 14, scope: !4631)
!4646 = !DILocation(line: 623, column: 3, scope: !4631)
!4647 = !DILocation(line: 624, column: 1, scope: !4631)
!4648 = distinct !DISubprogram(name: "loop_depth", scope: !328, file: !328, line: 425, type: !4649, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4649 = !DISubroutineType(types: !4650)
!4650 = !{!5, !4145}
!4651 = !DILocalVariable(name: "loop", arg: 1, scope: !4648, file: !328, line: 425, type: !4145)
!4652 = !DILocation(line: 425, column: 32, scope: !4648)
!4653 = !DILocation(line: 427, column: 10, scope: !4648)
!4654 = !DILocation(line: 427, column: 3, scope: !4648)
!4655 = distinct !DISubprogram(name: "debug_rename_elt", scope: !1, file: !1, line: 50, type: !4656, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4656 = !DISubroutineType(types: !4657)
!4657 = !{null, !2066}
!4658 = !DILocalVariable(name: "elt", arg: 1, scope: !4655, file: !1, line: 50, type: !2066)
!4659 = !DILocation(line: 50, column: 34, scope: !4655)
!4660 = !DILocation(line: 52, column: 12, scope: !4655)
!4661 = !DILocation(line: 52, column: 3, scope: !4655)
!4662 = !DILocation(line: 53, column: 23, scope: !4655)
!4663 = !DILocation(line: 53, column: 31, scope: !4655)
!4664 = !DILocation(line: 53, column: 36, scope: !4655)
!4665 = !DILocation(line: 53, column: 3, scope: !4655)
!4666 = !DILocation(line: 54, column: 12, scope: !4655)
!4667 = !DILocation(line: 54, column: 3, scope: !4655)
!4668 = !DILocation(line: 55, column: 23, scope: !4655)
!4669 = !DILocation(line: 55, column: 31, scope: !4655)
!4670 = !DILocation(line: 55, column: 36, scope: !4655)
!4671 = !DILocation(line: 55, column: 3, scope: !4655)
!4672 = !DILocation(line: 56, column: 12, scope: !4655)
!4673 = !DILocation(line: 56, column: 3, scope: !4655)
!4674 = !DILocation(line: 57, column: 1, scope: !4655)
!4675 = distinct !DISubprogram(name: "debug_ivtype_elt", scope: !1, file: !1, line: 101, type: !4676, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4676 = !DISubroutineType(types: !4677)
!4677 = !{null, !4678}
!4678 = !DIDerivedType(tag: DW_TAG_typedef, name: "ivtype_map_elt", file: !654, line: 290, baseType: !2049)
!4679 = !DILocalVariable(name: "elt", arg: 1, scope: !4675, file: !1, line: 101, type: !4678)
!4680 = !DILocation(line: 101, column: 34, scope: !4675)
!4681 = !DILocation(line: 103, column: 12, scope: !4675)
!4682 = !DILocation(line: 103, column: 29, scope: !4675)
!4683 = !DILocation(line: 103, column: 34, scope: !4675)
!4684 = !DILocation(line: 103, column: 3, scope: !4675)
!4685 = !DILocation(line: 104, column: 23, scope: !4675)
!4686 = !DILocation(line: 104, column: 31, scope: !4675)
!4687 = !DILocation(line: 104, column: 36, scope: !4675)
!4688 = !DILocation(line: 104, column: 3, scope: !4675)
!4689 = !DILocation(line: 105, column: 12, scope: !4675)
!4690 = !DILocation(line: 105, column: 3, scope: !4675)
!4691 = !DILocation(line: 106, column: 1, scope: !4675)
!4692 = distinct !DISubprogram(name: "bb_in_region", scope: !654, file: !654, line: 86, type: !4693, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4693 = !DISubroutineType(types: !4694)
!4694 = !{!777, !1439, !1439, !1439}
!4695 = !DILocalVariable(name: "bb", arg: 1, scope: !4692, file: !654, line: 86, type: !1439)
!4696 = !DILocation(line: 86, column: 27, scope: !4692)
!4697 = !DILocalVariable(name: "entry", arg: 2, scope: !4692, file: !654, line: 86, type: !1439)
!4698 = !DILocation(line: 86, column: 43, scope: !4692)
!4699 = !DILocalVariable(name: "exit", arg: 3, scope: !4692, file: !654, line: 86, type: !1439)
!4700 = !DILocation(line: 86, column: 62, scope: !4692)
!4701 = !DILocation(line: 104, column: 42, scope: !4692)
!4702 = !DILocation(line: 104, column: 46, scope: !4692)
!4703 = !DILocation(line: 104, column: 10, scope: !4692)
!4704 = !DILocation(line: 105, column: 3, scope: !4692)
!4705 = !DILocation(line: 105, column: 40, scope: !4692)
!4706 = !DILocation(line: 105, column: 44, scope: !4692)
!4707 = !DILocation(line: 105, column: 8, scope: !4692)
!4708 = !DILocation(line: 106, column: 8, scope: !4692)
!4709 = !DILocation(line: 106, column: 44, scope: !4692)
!4710 = !DILocation(line: 106, column: 51, scope: !4692)
!4711 = !DILocation(line: 106, column: 12, scope: !4692)
!4712 = !DILocation(line: 106, column: 11, scope: !4692)
!4713 = !DILocation(line: 0, scope: !4692)
!4714 = !DILocation(line: 105, column: 6, scope: !4692)
!4715 = !DILocation(line: 104, column: 3, scope: !4692)
!4716 = distinct !DISubprogram(name: "sese_contains_loop", scope: !654, file: !654, line: 69, type: !4717, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4717 = !DISubroutineType(types: !4718)
!4718 = !{!777, !2045, !1202}
!4719 = !DILocalVariable(name: "sese", arg: 1, scope: !4716, file: !654, line: 69, type: !2045)
!4720 = !DILocation(line: 69, column: 26, scope: !4716)
!4721 = !DILocalVariable(name: "loop", arg: 2, scope: !4716, file: !654, line: 69, type: !1202)
!4722 = !DILocation(line: 69, column: 45, scope: !4716)
!4723 = !DILocation(line: 71, column: 24, scope: !4716)
!4724 = !DILocation(line: 71, column: 43, scope: !4716)
!4725 = !DILocation(line: 71, column: 49, scope: !4716)
!4726 = !DILocation(line: 71, column: 10, scope: !4716)
!4727 = !DILocation(line: 71, column: 3, scope: !4716)
!4728 = distinct !DISubprogram(name: "VEC_loop_p_heap_safe_push", scope: !328, file: !328, line: 86, type: !4729, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4729 = !DISubroutineType(types: !4730)
!4730 = !{!2313, !2408, !1229}
!4731 = !DILocalVariable(name: "vec_", arg: 1, scope: !4728, file: !328, line: 86, type: !2408)
!4732 = !DILocation(line: 86, column: 1, scope: !4728)
!4733 = !DILocalVariable(name: "obj_", arg: 2, scope: !4728, file: !328, line: 86, type: !1229)
!4734 = distinct !DISubprogram(name: "VEC_loop_p_heap_reserve", scope: !328, file: !328, line: 86, type: !4735, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4735 = !DISubroutineType(types: !4736)
!4736 = !{!754, !2408, !754}
!4737 = !DILocalVariable(name: "vec_", arg: 1, scope: !4734, file: !328, line: 86, type: !2408)
!4738 = !DILocation(line: 86, column: 1, scope: !4734)
!4739 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4734, file: !328, line: 86, type: !754)
!4740 = !DILocalVariable(name: "extend", scope: !4734, file: !328, line: 86, type: !754)
!4741 = !DILocation(line: 86, column: 1, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4734, file: !328, line: 86, column: 1)
!4743 = distinct !DISubprogram(name: "VEC_loop_p_base_quick_push", scope: !328, file: !328, line: 85, type: !4744, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4744 = !DISubroutineType(types: !4745)
!4745 = !{!2313, !2339, !1229}
!4746 = !DILocalVariable(name: "vec_", arg: 1, scope: !4743, file: !328, line: 85, type: !2339)
!4747 = !DILocation(line: 85, column: 1, scope: !4743)
!4748 = !DILocalVariable(name: "obj_", arg: 2, scope: !4743, file: !328, line: 85, type: !1229)
!4749 = !DILocalVariable(name: "slot_", scope: !4743, file: !328, line: 85, type: !2313)
!4750 = distinct !DISubprogram(name: "VEC_loop_p_base_space", scope: !328, file: !328, line: 85, type: !4751, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4751 = !DISubroutineType(types: !4752)
!4752 = !{!754, !2339, !754}
!4753 = !DILocalVariable(name: "vec_", arg: 1, scope: !4750, file: !328, line: 85, type: !2339)
!4754 = !DILocation(line: 85, column: 1, scope: !4750)
!4755 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4750, file: !328, line: 85, type: !754)
!4756 = distinct !DISubprogram(name: "sese_build_liveouts_bb", scope: !1, file: !1, line: 225, type: !4757, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4757 = !DISubroutineType(types: !4758)
!4758 = !{null, !2045, !1556, !1439}
!4759 = !DILocalVariable(name: "region", arg: 1, scope: !4756, file: !1, line: 225, type: !2045)
!4760 = !DILocation(line: 225, column: 30, scope: !4756)
!4761 = !DILocalVariable(name: "liveouts", arg: 2, scope: !4756, file: !1, line: 225, type: !1556)
!4762 = !DILocation(line: 225, column: 45, scope: !4756)
!4763 = !DILocalVariable(name: "bb", arg: 3, scope: !4756, file: !1, line: 225, type: !1439)
!4764 = !DILocation(line: 225, column: 67, scope: !4756)
!4765 = !DILocalVariable(name: "bsi", scope: !4756, file: !1, line: 227, type: !3127)
!4766 = !DILocation(line: 227, column: 24, scope: !4756)
!4767 = !DILocalVariable(name: "e", scope: !4756, file: !1, line: 228, type: !967)
!4768 = !DILocation(line: 228, column: 8, scope: !4756)
!4769 = !DILocalVariable(name: "ei", scope: !4756, file: !1, line: 229, type: !3486)
!4770 = !DILocation(line: 229, column: 17, scope: !4756)
!4771 = !DILocalVariable(name: "iter", scope: !4756, file: !1, line: 230, type: !3961)
!4772 = !DILocation(line: 230, column: 15, scope: !4756)
!4773 = !DILocalVariable(name: "use_p", scope: !4756, file: !1, line: 231, type: !2050)
!4774 = !DILocation(line: 231, column: 17, scope: !4756)
!4775 = !DILocation(line: 233, column: 3, scope: !4776)
!4776 = distinct !DILexicalBlock(scope: !4756, file: !1, line: 233, column: 3)
!4777 = !DILocation(line: 233, column: 3, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4776, file: !1, line: 233, column: 3)
!4779 = !DILocation(line: 234, column: 32, scope: !4780)
!4780 = distinct !DILexicalBlock(scope: !4778, file: !1, line: 234, column: 5)
!4781 = !DILocation(line: 234, column: 35, scope: !4780)
!4782 = !DILocation(line: 234, column: 16, scope: !4780)
!4783 = !DILocation(line: 234, column: 10, scope: !4780)
!4784 = !DILocation(line: 234, column: 43, scope: !4785)
!4785 = distinct !DILexicalBlock(scope: !4780, file: !1, line: 234, column: 5)
!4786 = !DILocation(line: 234, column: 42, scope: !4785)
!4787 = !DILocation(line: 234, column: 5, scope: !4780)
!4788 = !DILocation(line: 235, column: 32, scope: !4785)
!4789 = !DILocation(line: 235, column: 40, scope: !4785)
!4790 = !DILocation(line: 235, column: 50, scope: !4785)
!4791 = !DILocation(line: 236, column: 11, scope: !4785)
!4792 = !DILocation(line: 235, column: 7, scope: !4785)
!4793 = !DILocation(line: 234, column: 60, scope: !4785)
!4794 = !DILocation(line: 234, column: 5, scope: !4785)
!4795 = distinct !{!4795, !4787, !4796}
!4796 = !DILocation(line: 236, column: 52, scope: !4780)
!4797 = distinct !{!4797, !4775, !4798}
!4798 = !DILocation(line: 236, column: 52, scope: !4776)
!4799 = !DILocation(line: 238, column: 28, scope: !4800)
!4800 = distinct !DILexicalBlock(scope: !4756, file: !1, line: 238, column: 3)
!4801 = !DILocation(line: 238, column: 14, scope: !4800)
!4802 = !DILocation(line: 238, column: 8, scope: !4800)
!4803 = !DILocation(line: 238, column: 34, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4800, file: !1, line: 238, column: 3)
!4805 = !DILocation(line: 238, column: 33, scope: !4804)
!4806 = !DILocation(line: 238, column: 3, scope: !4800)
!4807 = !DILocalVariable(name: "stmt", scope: !4808, file: !1, line: 240, type: !987)
!4808 = distinct !DILexicalBlock(scope: !4804, file: !1, line: 239, column: 5)
!4809 = !DILocation(line: 240, column: 14, scope: !4808)
!4810 = !DILocation(line: 240, column: 21, scope: !4808)
!4811 = !DILocation(line: 242, column: 28, scope: !4812)
!4812 = distinct !DILexicalBlock(scope: !4808, file: !1, line: 242, column: 11)
!4813 = !DILocation(line: 242, column: 11, scope: !4812)
!4814 = !DILocation(line: 242, column: 11, scope: !4808)
!4815 = !DILocation(line: 243, column: 2, scope: !4812)
!4816 = !DILocation(line: 245, column: 7, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4808, file: !1, line: 245, column: 7)
!4818 = !DILocation(line: 245, column: 7, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4817, file: !1, line: 245, column: 7)
!4820 = !DILocation(line: 246, column: 27, scope: !4819)
!4821 = !DILocation(line: 246, column: 35, scope: !4819)
!4822 = !DILocation(line: 246, column: 45, scope: !4819)
!4823 = !DILocation(line: 246, column: 49, scope: !4819)
!4824 = !DILocation(line: 246, column: 2, scope: !4819)
!4825 = distinct !{!4825, !4816, !4826}
!4826 = !DILocation(line: 246, column: 69, scope: !4817)
!4827 = !DILocation(line: 247, column: 5, scope: !4808)
!4828 = !DILocation(line: 238, column: 51, scope: !4804)
!4829 = !DILocation(line: 238, column: 3, scope: !4804)
!4830 = distinct !{!4830, !4806, !4831}
!4831 = !DILocation(line: 247, column: 5, scope: !4800)
!4832 = !DILocation(line: 248, column: 1, scope: !4756)
!4833 = distinct !DISubprogram(name: "sese_reset_debug_liveouts_bb", scope: !1, file: !1, line: 284, type: !4757, scopeLine: 285, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4834 = !DILocalVariable(name: "region", arg: 1, scope: !4833, file: !1, line: 284, type: !2045)
!4835 = !DILocation(line: 284, column: 36, scope: !4833)
!4836 = !DILocalVariable(name: "liveouts", arg: 2, scope: !4833, file: !1, line: 284, type: !1556)
!4837 = !DILocation(line: 284, column: 51, scope: !4833)
!4838 = !DILocalVariable(name: "bb", arg: 3, scope: !4833, file: !1, line: 284, type: !1439)
!4839 = !DILocation(line: 284, column: 73, scope: !4833)
!4840 = !DILocalVariable(name: "bsi", scope: !4833, file: !1, line: 286, type: !3127)
!4841 = !DILocation(line: 286, column: 24, scope: !4833)
!4842 = !DILocalVariable(name: "iter", scope: !4833, file: !1, line: 287, type: !3961)
!4843 = !DILocation(line: 287, column: 15, scope: !4833)
!4844 = !DILocalVariable(name: "use_p", scope: !4833, file: !1, line: 288, type: !2050)
!4845 = !DILocation(line: 288, column: 17, scope: !4833)
!4846 = !DILocation(line: 290, column: 28, scope: !4847)
!4847 = distinct !DILexicalBlock(scope: !4833, file: !1, line: 290, column: 3)
!4848 = !DILocation(line: 290, column: 14, scope: !4847)
!4849 = !DILocation(line: 290, column: 8, scope: !4847)
!4850 = !DILocation(line: 290, column: 34, scope: !4851)
!4851 = distinct !DILexicalBlock(scope: !4847, file: !1, line: 290, column: 3)
!4852 = !DILocation(line: 290, column: 33, scope: !4851)
!4853 = !DILocation(line: 290, column: 3, scope: !4847)
!4854 = !DILocalVariable(name: "stmt", scope: !4855, file: !1, line: 292, type: !987)
!4855 = distinct !DILexicalBlock(scope: !4851, file: !1, line: 291, column: 5)
!4856 = !DILocation(line: 292, column: 14, scope: !4855)
!4857 = !DILocation(line: 292, column: 21, scope: !4855)
!4858 = !DILocation(line: 294, column: 29, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4855, file: !1, line: 294, column: 11)
!4860 = !DILocation(line: 294, column: 12, scope: !4859)
!4861 = !DILocation(line: 294, column: 11, scope: !4855)
!4862 = !DILocation(line: 295, column: 2, scope: !4859)
!4863 = !DILocation(line: 297, column: 7, scope: !4864)
!4864 = distinct !DILexicalBlock(scope: !4855, file: !1, line: 297, column: 7)
!4865 = !DILocation(line: 297, column: 7, scope: !4866)
!4866 = distinct !DILexicalBlock(scope: !4864, file: !1, line: 297, column: 7)
!4867 = !DILocation(line: 298, column: 29, scope: !4868)
!4868 = distinct !DILexicalBlock(scope: !4866, file: !1, line: 298, column: 6)
!4869 = !DILocation(line: 298, column: 37, scope: !4868)
!4870 = !DILocation(line: 298, column: 47, scope: !4868)
!4871 = !DILocation(line: 299, column: 8, scope: !4868)
!4872 = !DILocation(line: 298, column: 6, scope: !4868)
!4873 = !DILocation(line: 298, column: 6, scope: !4866)
!4874 = !DILocation(line: 301, column: 37, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4868, file: !1, line: 300, column: 4)
!4876 = !DILocation(line: 301, column: 6, scope: !4875)
!4877 = !DILocation(line: 302, column: 19, scope: !4875)
!4878 = !DILocation(line: 302, column: 6, scope: !4875)
!4879 = !DILocation(line: 303, column: 6, scope: !4875)
!4880 = !DILocation(line: 299, column: 28, scope: !4868)
!4881 = distinct !{!4881, !4863, !4882}
!4882 = !DILocation(line: 304, column: 4, scope: !4864)
!4883 = !DILocation(line: 305, column: 5, scope: !4855)
!4884 = !DILocation(line: 290, column: 51, scope: !4851)
!4885 = !DILocation(line: 290, column: 3, scope: !4851)
!4886 = distinct !{!4886, !4853, !4887}
!4887 = !DILocation(line: 305, column: 5, scope: !4847)
!4888 = !DILocation(line: 306, column: 1, scope: !4833)
!4889 = distinct !DISubprogram(name: "sese_build_liveouts_use", scope: !1, file: !1, line: 201, type: !4890, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4890 = !DISubroutineType(types: !4891)
!4891 = !{null, !2045, !1556, !1439, !657}
!4892 = !DILocalVariable(name: "region", arg: 1, scope: !4889, file: !1, line: 201, type: !2045)
!4893 = !DILocation(line: 201, column: 31, scope: !4889)
!4894 = !DILocalVariable(name: "liveouts", arg: 2, scope: !4889, file: !1, line: 201, type: !1556)
!4895 = !DILocation(line: 201, column: 46, scope: !4889)
!4896 = !DILocalVariable(name: "bb", arg: 3, scope: !4889, file: !1, line: 201, type: !1439)
!4897 = !DILocation(line: 201, column: 68, scope: !4889)
!4898 = !DILocalVariable(name: "use", arg: 4, scope: !4889, file: !1, line: 202, type: !657)
!4899 = !DILocation(line: 202, column: 10, scope: !4889)
!4900 = !DILocalVariable(name: "ver", scope: !4889, file: !1, line: 204, type: !5)
!4901 = !DILocation(line: 204, column: 12, scope: !4889)
!4902 = !DILocalVariable(name: "def_bb", scope: !4889, file: !1, line: 205, type: !1439)
!4903 = !DILocation(line: 205, column: 15, scope: !4889)
!4904 = !DILocation(line: 207, column: 7, scope: !4905)
!4905 = distinct !DILexicalBlock(scope: !4889, file: !1, line: 207, column: 7)
!4906 = !DILocation(line: 207, column: 23, scope: !4905)
!4907 = !DILocation(line: 207, column: 7, scope: !4889)
!4908 = !DILocation(line: 208, column: 5, scope: !4905)
!4909 = !DILocation(line: 210, column: 9, scope: !4889)
!4910 = !DILocation(line: 210, column: 7, scope: !4889)
!4911 = !DILocation(line: 211, column: 23, scope: !4889)
!4912 = !DILocation(line: 211, column: 12, scope: !4889)
!4913 = !DILocation(line: 211, column: 10, scope: !4889)
!4914 = !DILocation(line: 213, column: 8, scope: !4915)
!4915 = distinct !DILexicalBlock(scope: !4889, file: !1, line: 213, column: 7)
!4916 = !DILocation(line: 214, column: 7, scope: !4915)
!4917 = !DILocation(line: 214, column: 25, scope: !4915)
!4918 = !DILocation(line: 214, column: 33, scope: !4915)
!4919 = !DILocation(line: 214, column: 11, scope: !4915)
!4920 = !DILocation(line: 215, column: 7, scope: !4915)
!4921 = !DILocation(line: 215, column: 24, scope: !4915)
!4922 = !DILocation(line: 215, column: 28, scope: !4915)
!4923 = !DILocation(line: 215, column: 10, scope: !4915)
!4924 = !DILocation(line: 213, column: 7, scope: !4889)
!4925 = !DILocation(line: 216, column: 5, scope: !4915)
!4926 = !DILocation(line: 218, column: 19, scope: !4889)
!4927 = !DILocation(line: 218, column: 29, scope: !4889)
!4928 = !DILocation(line: 218, column: 3, scope: !4889)
!4929 = !DILocation(line: 219, column: 1, scope: !4889)
!4930 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3379, file: !3379, line: 427, type: !4931, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4931 = !DISubroutineType(types: !4932)
!4932 = !{!657, !2050}
!4933 = !DILocalVariable(name: "use", arg: 1, scope: !4930, file: !3379, line: 427, type: !2050)
!4934 = !DILocation(line: 427, column: 33, scope: !4930)
!4935 = !DILocation(line: 429, column: 12, scope: !4930)
!4936 = !DILocation(line: 429, column: 17, scope: !4930)
!4937 = !DILocation(line: 429, column: 10, scope: !4930)
!4938 = !DILocation(line: 429, column: 3, scope: !4930)
!4939 = distinct !DISubprogram(name: "gsi_start_bb", scope: !528, file: !528, line: 4418, type: !4499, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4940 = !DILocalVariable(name: "bb", arg: 1, scope: !4939, file: !528, line: 4418, type: !1439)
!4941 = !DILocation(line: 4418, column: 27, scope: !4939)
!4942 = !DILocalVariable(name: "i", scope: !4939, file: !528, line: 4420, type: !3127)
!4943 = !DILocation(line: 4420, column: 24, scope: !4939)
!4944 = !DILocalVariable(name: "seq", scope: !4939, file: !528, line: 4421, type: !977)
!4945 = !DILocation(line: 4421, column: 14, scope: !4939)
!4946 = !DILocation(line: 4423, column: 17, scope: !4939)
!4947 = !DILocation(line: 4423, column: 9, scope: !4939)
!4948 = !DILocation(line: 4423, column: 7, scope: !4939)
!4949 = !DILocation(line: 4424, column: 29, scope: !4939)
!4950 = !DILocation(line: 4424, column: 11, scope: !4939)
!4951 = !DILocation(line: 4424, column: 5, scope: !4939)
!4952 = !DILocation(line: 4424, column: 9, scope: !4939)
!4953 = !DILocation(line: 4425, column: 11, scope: !4939)
!4954 = !DILocation(line: 4425, column: 5, scope: !4939)
!4955 = !DILocation(line: 4425, column: 9, scope: !4939)
!4956 = !DILocation(line: 4426, column: 10, scope: !4939)
!4957 = !DILocation(line: 4426, column: 5, scope: !4939)
!4958 = !DILocation(line: 4426, column: 8, scope: !4939)
!4959 = !DILocation(line: 4428, column: 3, scope: !4939)
!4960 = distinct !DISubprogram(name: "is_gimple_debug", scope: !528, file: !528, line: 3249, type: !4961, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4961 = !DISubroutineType(types: !4962)
!4962 = !{!777, !3278}
!4963 = !DILocalVariable(name: "gs", arg: 1, scope: !4960, file: !528, line: 3249, type: !3278)
!4964 = !DILocation(line: 3249, column: 31, scope: !4960)
!4965 = !DILocation(line: 3251, column: 23, scope: !4960)
!4966 = !DILocation(line: 3251, column: 10, scope: !4960)
!4967 = !DILocation(line: 3251, column: 27, scope: !4960)
!4968 = !DILocation(line: 3251, column: 3, scope: !4960)
!4969 = distinct !DISubprogram(name: "op_iter_init_use", scope: !3379, file: !3379, line: 768, type: !4970, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4970 = !DISubroutineType(types: !4971)
!4971 = !{!2050, !4972, !987, !754}
!4972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3961, size: 64)
!4973 = !DILocalVariable(name: "ptr", arg: 1, scope: !4969, file: !3379, line: 768, type: !4972)
!4974 = !DILocation(line: 768, column: 32, scope: !4969)
!4975 = !DILocalVariable(name: "stmt", arg: 2, scope: !4969, file: !3379, line: 768, type: !987)
!4976 = !DILocation(line: 768, column: 44, scope: !4969)
!4977 = !DILocalVariable(name: "flags", arg: 3, scope: !4969, file: !3379, line: 768, type: !754)
!4978 = !DILocation(line: 768, column: 54, scope: !4969)
!4979 = !DILocation(line: 770, column: 3, scope: !4969)
!4980 = !DILocation(line: 772, column: 17, scope: !4969)
!4981 = !DILocation(line: 772, column: 22, scope: !4969)
!4982 = !DILocation(line: 772, column: 28, scope: !4969)
!4983 = !DILocation(line: 772, column: 3, scope: !4969)
!4984 = !DILocation(line: 773, column: 3, scope: !4969)
!4985 = !DILocation(line: 773, column: 8, scope: !4969)
!4986 = !DILocation(line: 773, column: 18, scope: !4969)
!4987 = !DILocation(line: 774, column: 28, scope: !4969)
!4988 = !DILocation(line: 774, column: 10, scope: !4969)
!4989 = !DILocation(line: 774, column: 3, scope: !4969)
!4990 = distinct !DISubprogram(name: "op_iter_done", scope: !3379, file: !3379, line: 652, type: !4991, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!4991 = !DISubroutineType(types: !4992)
!4992 = !{!777, !4993}
!4993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4994, size: 64)
!4994 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3961)
!4995 = !DILocalVariable(name: "ptr", arg: 1, scope: !4990, file: !3379, line: 652, type: !4993)
!4996 = !DILocation(line: 652, column: 34, scope: !4990)
!4997 = !DILocation(line: 654, column: 10, scope: !4990)
!4998 = !DILocation(line: 654, column: 15, scope: !4990)
!4999 = !DILocation(line: 654, column: 3, scope: !4990)
!5000 = distinct !DISubprogram(name: "op_iter_next_use", scope: !3379, file: !3379, line: 659, type: !5001, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5001 = !DISubroutineType(types: !5002)
!5002 = !{!2050, !4972}
!5003 = !DILocalVariable(name: "ptr", arg: 1, scope: !5000, file: !3379, line: 659, type: !4972)
!5004 = !DILocation(line: 659, column: 32, scope: !5000)
!5005 = !DILocalVariable(name: "use_p", scope: !5000, file: !3379, line: 661, type: !2050)
!5006 = !DILocation(line: 661, column: 17, scope: !5000)
!5007 = !DILocation(line: 665, column: 7, scope: !5008)
!5008 = distinct !DILexicalBlock(scope: !5000, file: !3379, line: 665, column: 7)
!5009 = !DILocation(line: 665, column: 12, scope: !5008)
!5010 = !DILocation(line: 665, column: 7, scope: !5000)
!5011 = !DILocation(line: 667, column: 15, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !5008, file: !3379, line: 666, column: 5)
!5013 = !DILocation(line: 667, column: 13, scope: !5012)
!5014 = !DILocation(line: 668, column: 19, scope: !5012)
!5015 = !DILocation(line: 668, column: 24, scope: !5012)
!5016 = !DILocation(line: 668, column: 30, scope: !5012)
!5017 = !DILocation(line: 668, column: 7, scope: !5012)
!5018 = !DILocation(line: 668, column: 12, scope: !5012)
!5019 = !DILocation(line: 668, column: 17, scope: !5012)
!5020 = !DILocation(line: 669, column: 14, scope: !5012)
!5021 = !DILocation(line: 669, column: 7, scope: !5012)
!5022 = !DILocation(line: 671, column: 7, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !5000, file: !3379, line: 671, column: 7)
!5024 = !DILocation(line: 671, column: 12, scope: !5023)
!5025 = !DILocation(line: 671, column: 20, scope: !5023)
!5026 = !DILocation(line: 671, column: 25, scope: !5023)
!5027 = !DILocation(line: 671, column: 18, scope: !5023)
!5028 = !DILocation(line: 671, column: 7, scope: !5000)
!5029 = !DILocation(line: 673, column: 14, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !5023, file: !3379, line: 672, column: 5)
!5031 = !DILocation(line: 673, column: 7, scope: !5030)
!5032 = !DILocation(line: 675, column: 3, scope: !5000)
!5033 = !DILocation(line: 675, column: 8, scope: !5000)
!5034 = !DILocation(line: 675, column: 13, scope: !5000)
!5035 = !DILocation(line: 676, column: 3, scope: !5000)
!5036 = !DILocation(line: 677, column: 1, scope: !5000)
!5037 = distinct !DISubprogram(name: "gimple_bb", scope: !528, file: !528, line: 1112, type: !5038, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5038 = !DISubroutineType(types: !5039)
!5039 = !{!951, !3278}
!5040 = !DILocalVariable(name: "g", arg: 1, scope: !5037, file: !528, line: 1112, type: !3278)
!5041 = !DILocation(line: 1112, column: 25, scope: !5037)
!5042 = !DILocation(line: 1114, column: 10, scope: !5037)
!5043 = !DILocation(line: 1114, column: 13, scope: !5037)
!5044 = !DILocation(line: 1114, column: 20, scope: !5037)
!5045 = !DILocation(line: 1114, column: 3, scope: !5037)
!5046 = distinct !DISubprogram(name: "bb_seq", scope: !528, file: !528, line: 237, type: !5047, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5047 = !DISubroutineType(types: !5048)
!5048 = !{!977, !3926}
!5049 = !DILocalVariable(name: "bb", arg: 1, scope: !5046, file: !528, line: 237, type: !3926)
!5050 = !DILocation(line: 237, column: 27, scope: !5046)
!5051 = !DILocation(line: 239, column: 13, scope: !5046)
!5052 = !DILocation(line: 239, column: 17, scope: !5046)
!5053 = !DILocation(line: 239, column: 23, scope: !5046)
!5054 = !DILocation(line: 239, column: 33, scope: !5046)
!5055 = !DILocation(line: 239, column: 36, scope: !5046)
!5056 = !DILocation(line: 239, column: 40, scope: !5046)
!5057 = !DILocation(line: 239, column: 43, scope: !5046)
!5058 = !DILocation(line: 239, column: 10, scope: !5046)
!5059 = !DILocation(line: 239, column: 53, scope: !5046)
!5060 = !DILocation(line: 239, column: 57, scope: !5046)
!5061 = !DILocation(line: 239, column: 60, scope: !5046)
!5062 = !DILocation(line: 239, column: 68, scope: !5046)
!5063 = !DILocation(line: 239, column: 3, scope: !5046)
!5064 = distinct !DISubprogram(name: "gimple_seq_first", scope: !528, file: !528, line: 159, type: !5065, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5065 = !DISubroutineType(types: !5066)
!5066 = !{!982, !5067}
!5067 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !658, line: 67, baseType: !5068)
!5068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5069, size: 64)
!5069 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !979)
!5070 = !DILocalVariable(name: "s", arg: 1, scope: !5064, file: !528, line: 159, type: !5067)
!5071 = !DILocation(line: 159, column: 36, scope: !5064)
!5072 = !DILocation(line: 161, column: 10, scope: !5064)
!5073 = !DILocation(line: 161, column: 14, scope: !5064)
!5074 = !DILocation(line: 161, column: 17, scope: !5064)
!5075 = !DILocation(line: 161, column: 3, scope: !5064)
!5076 = distinct !DISubprogram(name: "op_iter_init", scope: !3379, file: !3379, line: 742, type: !5077, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5077 = !DISubroutineType(types: !5078)
!5078 = !{null, !4972, !987, !754}
!5079 = !DILocalVariable(name: "ptr", arg: 1, scope: !5076, file: !3379, line: 742, type: !4972)
!5080 = !DILocation(line: 742, column: 28, scope: !5076)
!5081 = !DILocalVariable(name: "stmt", arg: 2, scope: !5076, file: !3379, line: 742, type: !987)
!5082 = !DILocation(line: 742, column: 40, scope: !5076)
!5083 = !DILocalVariable(name: "flags", arg: 3, scope: !5076, file: !3379, line: 742, type: !754)
!5084 = !DILocation(line: 742, column: 50, scope: !5076)
!5085 = !DILocation(line: 746, column: 3, scope: !5076)
!5086 = !DILocation(line: 748, column: 16, scope: !5076)
!5087 = !DILocation(line: 748, column: 22, scope: !5076)
!5088 = !DILocation(line: 748, column: 15, scope: !5076)
!5089 = !DILocation(line: 748, column: 68, scope: !5076)
!5090 = !DILocation(line: 748, column: 52, scope: !5076)
!5091 = !DILocation(line: 748, column: 3, scope: !5076)
!5092 = !DILocation(line: 748, column: 8, scope: !5076)
!5093 = !DILocation(line: 748, column: 13, scope: !5076)
!5094 = !DILocation(line: 749, column: 9, scope: !5095)
!5095 = distinct !DILexicalBlock(scope: !5076, file: !3379, line: 749, column: 7)
!5096 = !DILocation(line: 749, column: 15, scope: !5095)
!5097 = !DILocation(line: 750, column: 7, scope: !5095)
!5098 = !DILocation(line: 750, column: 10, scope: !5095)
!5099 = !DILocation(line: 750, column: 15, scope: !5095)
!5100 = !DILocation(line: 751, column: 7, scope: !5095)
!5101 = !DILocation(line: 751, column: 23, scope: !5095)
!5102 = !DILocation(line: 751, column: 10, scope: !5095)
!5103 = !DILocation(line: 751, column: 29, scope: !5095)
!5104 = !DILocation(line: 749, column: 7, scope: !5076)
!5105 = !DILocation(line: 752, column: 17, scope: !5095)
!5106 = !DILocation(line: 752, column: 22, scope: !5095)
!5107 = !DILocation(line: 752, column: 28, scope: !5095)
!5108 = !DILocation(line: 752, column: 5, scope: !5095)
!5109 = !DILocation(line: 752, column: 10, scope: !5095)
!5110 = !DILocation(line: 752, column: 15, scope: !5095)
!5111 = !DILocation(line: 753, column: 16, scope: !5076)
!5112 = !DILocation(line: 753, column: 22, scope: !5076)
!5113 = !DILocation(line: 753, column: 15, scope: !5076)
!5114 = !DILocation(line: 753, column: 68, scope: !5076)
!5115 = !DILocation(line: 753, column: 52, scope: !5076)
!5116 = !DILocation(line: 753, column: 3, scope: !5076)
!5117 = !DILocation(line: 753, column: 8, scope: !5076)
!5118 = !DILocation(line: 753, column: 13, scope: !5076)
!5119 = !DILocation(line: 754, column: 9, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5076, file: !3379, line: 754, column: 7)
!5121 = !DILocation(line: 754, column: 15, scope: !5120)
!5122 = !DILocation(line: 755, column: 7, scope: !5120)
!5123 = !DILocation(line: 755, column: 10, scope: !5120)
!5124 = !DILocation(line: 755, column: 15, scope: !5120)
!5125 = !DILocation(line: 756, column: 7, scope: !5120)
!5126 = !DILocation(line: 756, column: 23, scope: !5120)
!5127 = !DILocation(line: 756, column: 10, scope: !5120)
!5128 = !DILocation(line: 756, column: 29, scope: !5120)
!5129 = !DILocation(line: 754, column: 7, scope: !5076)
!5130 = !DILocation(line: 757, column: 17, scope: !5120)
!5131 = !DILocation(line: 757, column: 22, scope: !5120)
!5132 = !DILocation(line: 757, column: 28, scope: !5120)
!5133 = !DILocation(line: 757, column: 5, scope: !5120)
!5134 = !DILocation(line: 757, column: 10, scope: !5120)
!5135 = !DILocation(line: 757, column: 15, scope: !5120)
!5136 = !DILocation(line: 758, column: 3, scope: !5076)
!5137 = !DILocation(line: 758, column: 8, scope: !5076)
!5138 = !DILocation(line: 758, column: 13, scope: !5076)
!5139 = !DILocation(line: 760, column: 3, scope: !5076)
!5140 = !DILocation(line: 760, column: 8, scope: !5076)
!5141 = !DILocation(line: 760, column: 14, scope: !5076)
!5142 = !DILocation(line: 761, column: 3, scope: !5076)
!5143 = !DILocation(line: 761, column: 8, scope: !5076)
!5144 = !DILocation(line: 761, column: 16, scope: !5076)
!5145 = !DILocation(line: 762, column: 3, scope: !5076)
!5146 = !DILocation(line: 762, column: 8, scope: !5076)
!5147 = !DILocation(line: 762, column: 17, scope: !5076)
!5148 = !DILocation(line: 763, column: 1, scope: !5076)
!5149 = distinct !DISubprogram(name: "gimple_def_ops", scope: !528, file: !528, line: 1292, type: !5150, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5150 = !DISubroutineType(types: !5151)
!5151 = !{!1016, !3278}
!5152 = !DILocalVariable(name: "g", arg: 1, scope: !5149, file: !528, line: 1292, type: !3278)
!5153 = !DILocation(line: 1292, column: 30, scope: !5149)
!5154 = !DILocation(line: 1294, column: 24, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !5149, file: !528, line: 1294, column: 7)
!5156 = !DILocation(line: 1294, column: 8, scope: !5155)
!5157 = !DILocation(line: 1294, column: 7, scope: !5149)
!5158 = !DILocation(line: 1295, column: 5, scope: !5155)
!5159 = !DILocation(line: 1296, column: 10, scope: !5149)
!5160 = !DILocation(line: 1296, column: 13, scope: !5149)
!5161 = !DILocation(line: 1296, column: 19, scope: !5149)
!5162 = !DILocation(line: 1296, column: 26, scope: !5149)
!5163 = !DILocation(line: 1296, column: 3, scope: !5149)
!5164 = !DILocation(line: 1297, column: 1, scope: !5149)
!5165 = distinct !DISubprogram(name: "gimple_vdef", scope: !528, file: !528, line: 1375, type: !3276, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5166 = !DILocalVariable(name: "g", arg: 1, scope: !5165, file: !528, line: 1375, type: !3278)
!5167 = !DILocation(line: 1375, column: 27, scope: !5165)
!5168 = !DILocation(line: 1377, column: 28, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5165, file: !528, line: 1377, column: 7)
!5170 = !DILocation(line: 1377, column: 8, scope: !5169)
!5171 = !DILocation(line: 1377, column: 7, scope: !5165)
!5172 = !DILocation(line: 1378, column: 5, scope: !5169)
!5173 = !DILocation(line: 1379, column: 10, scope: !5165)
!5174 = !DILocation(line: 1379, column: 13, scope: !5165)
!5175 = !DILocation(line: 1379, column: 23, scope: !5165)
!5176 = !DILocation(line: 1379, column: 3, scope: !5165)
!5177 = !DILocation(line: 1380, column: 1, scope: !5165)
!5178 = distinct !DISubprogram(name: "gimple_use_ops", scope: !528, file: !528, line: 1313, type: !5179, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5179 = !DISubroutineType(types: !5180)
!5180 = !{!1023, !3278}
!5181 = !DILocalVariable(name: "g", arg: 1, scope: !5178, file: !528, line: 1313, type: !3278)
!5182 = !DILocation(line: 1313, column: 30, scope: !5178)
!5183 = !DILocation(line: 1315, column: 24, scope: !5184)
!5184 = distinct !DILexicalBlock(scope: !5178, file: !528, line: 1315, column: 7)
!5185 = !DILocation(line: 1315, column: 8, scope: !5184)
!5186 = !DILocation(line: 1315, column: 7, scope: !5178)
!5187 = !DILocation(line: 1316, column: 5, scope: !5184)
!5188 = !DILocation(line: 1317, column: 10, scope: !5178)
!5189 = !DILocation(line: 1317, column: 13, scope: !5178)
!5190 = !DILocation(line: 1317, column: 19, scope: !5178)
!5191 = !DILocation(line: 1317, column: 26, scope: !5178)
!5192 = !DILocation(line: 1317, column: 3, scope: !5178)
!5193 = !DILocation(line: 1318, column: 1, scope: !5178)
!5194 = distinct !DISubprogram(name: "gimple_vuse", scope: !528, file: !528, line: 1365, type: !3276, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5195 = !DILocalVariable(name: "g", arg: 1, scope: !5194, file: !528, line: 1365, type: !3278)
!5196 = !DILocation(line: 1365, column: 27, scope: !5194)
!5197 = !DILocation(line: 1367, column: 28, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5194, file: !528, line: 1367, column: 7)
!5199 = !DILocation(line: 1367, column: 8, scope: !5198)
!5200 = !DILocation(line: 1367, column: 7, scope: !5194)
!5201 = !DILocation(line: 1368, column: 5, scope: !5198)
!5202 = !DILocation(line: 1369, column: 10, scope: !5194)
!5203 = !DILocation(line: 1369, column: 13, scope: !5194)
!5204 = !DILocation(line: 1369, column: 23, scope: !5194)
!5205 = !DILocation(line: 1369, column: 3, scope: !5194)
!5206 = !DILocation(line: 1370, column: 1, scope: !5194)
!5207 = distinct !DISubprogram(name: "gimple_has_ops", scope: !528, file: !528, line: 1274, type: !4961, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5208 = !DILocalVariable(name: "g", arg: 1, scope: !5207, file: !528, line: 1274, type: !3278)
!5209 = !DILocation(line: 1274, column: 30, scope: !5207)
!5210 = !DILocation(line: 1276, column: 23, scope: !5207)
!5211 = !DILocation(line: 1276, column: 10, scope: !5207)
!5212 = !DILocation(line: 1276, column: 26, scope: !5207)
!5213 = !DILocation(line: 1276, column: 41, scope: !5207)
!5214 = !DILocation(line: 1276, column: 57, scope: !5207)
!5215 = !DILocation(line: 1276, column: 44, scope: !5207)
!5216 = !DILocation(line: 1276, column: 60, scope: !5207)
!5217 = !DILocation(line: 0, scope: !5207)
!5218 = !DILocation(line: 1276, column: 3, scope: !5207)
!5219 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !528, file: !528, line: 1283, type: !4961, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5220 = !DILocalVariable(name: "g", arg: 1, scope: !5219, file: !528, line: 1283, type: !3278)
!5221 = !DILocation(line: 1283, column: 34, scope: !5219)
!5222 = !DILocation(line: 1285, column: 23, scope: !5219)
!5223 = !DILocation(line: 1285, column: 10, scope: !5219)
!5224 = !DILocation(line: 1285, column: 26, scope: !5219)
!5225 = !DILocation(line: 1285, column: 43, scope: !5219)
!5226 = !DILocation(line: 1285, column: 59, scope: !5219)
!5227 = !DILocation(line: 1285, column: 46, scope: !5219)
!5228 = !DILocation(line: 1285, column: 62, scope: !5219)
!5229 = !DILocation(line: 0, scope: !5219)
!5230 = !DILocation(line: 1285, column: 3, scope: !5219)
!5231 = distinct !DISubprogram(name: "sese_bad_liveouts_use", scope: !1, file: !1, line: 254, type: !5232, scopeLine: 256, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5232 = !DISubroutineType(types: !5233)
!5233 = !{!777, !2045, !1556, !1439, !657}
!5234 = !DILocalVariable(name: "region", arg: 1, scope: !5231, file: !1, line: 254, type: !2045)
!5235 = !DILocation(line: 254, column: 29, scope: !5231)
!5236 = !DILocalVariable(name: "liveouts", arg: 2, scope: !5231, file: !1, line: 254, type: !1556)
!5237 = !DILocation(line: 254, column: 44, scope: !5231)
!5238 = !DILocalVariable(name: "bb", arg: 3, scope: !5231, file: !1, line: 254, type: !1439)
!5239 = !DILocation(line: 254, column: 66, scope: !5231)
!5240 = !DILocalVariable(name: "use", arg: 4, scope: !5231, file: !1, line: 255, type: !657)
!5241 = !DILocation(line: 255, column: 15, scope: !5231)
!5242 = !DILocalVariable(name: "ver", scope: !5231, file: !1, line: 257, type: !5)
!5243 = !DILocation(line: 257, column: 12, scope: !5231)
!5244 = !DILocalVariable(name: "def_bb", scope: !5231, file: !1, line: 258, type: !1439)
!5245 = !DILocation(line: 258, column: 15, scope: !5231)
!5246 = !DILocation(line: 260, column: 7, scope: !5247)
!5247 = distinct !DILexicalBlock(scope: !5231, file: !1, line: 260, column: 7)
!5248 = !DILocation(line: 260, column: 23, scope: !5247)
!5249 = !DILocation(line: 260, column: 7, scope: !5231)
!5250 = !DILocation(line: 261, column: 5, scope: !5247)
!5251 = !DILocation(line: 263, column: 9, scope: !5231)
!5252 = !DILocation(line: 263, column: 7, scope: !5231)
!5253 = !DILocation(line: 267, column: 21, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5231, file: !1, line: 267, column: 7)
!5255 = !DILocation(line: 267, column: 31, scope: !5254)
!5256 = !DILocation(line: 267, column: 7, scope: !5254)
!5257 = !DILocation(line: 267, column: 7, scope: !5231)
!5258 = !DILocation(line: 268, column: 5, scope: !5254)
!5259 = !DILocation(line: 270, column: 23, scope: !5231)
!5260 = !DILocation(line: 270, column: 12, scope: !5231)
!5261 = !DILocation(line: 270, column: 10, scope: !5231)
!5262 = !DILocation(line: 272, column: 8, scope: !5263)
!5263 = distinct !DILexicalBlock(scope: !5231, file: !1, line: 272, column: 7)
!5264 = !DILocation(line: 273, column: 7, scope: !5263)
!5265 = !DILocation(line: 273, column: 25, scope: !5263)
!5266 = !DILocation(line: 273, column: 33, scope: !5263)
!5267 = !DILocation(line: 273, column: 11, scope: !5263)
!5268 = !DILocation(line: 274, column: 7, scope: !5263)
!5269 = !DILocation(line: 274, column: 24, scope: !5263)
!5270 = !DILocation(line: 274, column: 28, scope: !5263)
!5271 = !DILocation(line: 274, column: 10, scope: !5263)
!5272 = !DILocation(line: 272, column: 7, scope: !5231)
!5273 = !DILocation(line: 275, column: 5, scope: !5263)
!5274 = !DILocation(line: 277, column: 3, scope: !5231)
!5275 = !DILocation(line: 278, column: 1, scope: !5231)
!5276 = distinct !DISubprogram(name: "gimple_debug_bind_reset_value", scope: !528, file: !528, line: 3336, type: !5277, scopeLine: 3337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5277 = !DISubroutineType(types: !5278)
!5278 = !{null, !987}
!5279 = !DILocalVariable(name: "dbg", arg: 1, scope: !5276, file: !528, line: 3336, type: !987)
!5280 = !DILocation(line: 3336, column: 39, scope: !5276)
!5281 = !DILocation(line: 3342, column: 18, scope: !5276)
!5282 = !DILocation(line: 3342, column: 3, scope: !5276)
!5283 = !DILocation(line: 3343, column: 1, scope: !5276)
!5284 = distinct !DISubprogram(name: "update_stmt", scope: !528, file: !528, line: 1456, type: !5277, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5285 = !DILocalVariable(name: "s", arg: 1, scope: !5284, file: !528, line: 1456, type: !987)
!5286 = !DILocation(line: 1456, column: 21, scope: !5284)
!5287 = !DILocation(line: 1458, column: 23, scope: !5288)
!5288 = distinct !DILexicalBlock(scope: !5284, file: !528, line: 1458, column: 7)
!5289 = !DILocation(line: 1458, column: 7, scope: !5288)
!5290 = !DILocation(line: 1458, column: 7, scope: !5284)
!5291 = !DILocation(line: 1460, column: 28, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5288, file: !528, line: 1459, column: 5)
!5293 = !DILocation(line: 1460, column: 7, scope: !5292)
!5294 = !DILocation(line: 1461, column: 29, scope: !5292)
!5295 = !DILocation(line: 1461, column: 7, scope: !5292)
!5296 = !DILocation(line: 1462, column: 5, scope: !5292)
!5297 = !DILocation(line: 1463, column: 1, scope: !5284)
!5298 = distinct !DISubprogram(name: "gimple_set_op", scope: !528, file: !528, line: 1663, type: !5299, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5299 = !DISubroutineType(types: !5300)
!5300 = !{null, !987, !5, !657}
!5301 = !DILocalVariable(name: "gs", arg: 1, scope: !5298, file: !528, line: 1663, type: !987)
!5302 = !DILocation(line: 1663, column: 23, scope: !5298)
!5303 = !DILocalVariable(name: "i", arg: 2, scope: !5298, file: !528, line: 1663, type: !5)
!5304 = !DILocation(line: 1663, column: 36, scope: !5298)
!5305 = !DILocalVariable(name: "op", arg: 3, scope: !5298, file: !528, line: 1663, type: !657)
!5306 = !DILocation(line: 1663, column: 44, scope: !5298)
!5307 = !DILocation(line: 1665, column: 3, scope: !5298)
!5308 = !DILocation(line: 1671, column: 24, scope: !5298)
!5309 = !DILocation(line: 1671, column: 15, scope: !5298)
!5310 = !DILocation(line: 1671, column: 3, scope: !5298)
!5311 = !DILocation(line: 1671, column: 19, scope: !5298)
!5312 = !DILocation(line: 1671, column: 22, scope: !5298)
!5313 = !DILocation(line: 1672, column: 1, scope: !5298)
!5314 = distinct !DISubprogram(name: "gimple_num_ops", scope: !528, file: !528, line: 1596, type: !3370, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5315 = !DILocalVariable(name: "gs", arg: 1, scope: !5314, file: !528, line: 1596, type: !3278)
!5316 = !DILocation(line: 1596, column: 30, scope: !5314)
!5317 = !DILocation(line: 1598, column: 10, scope: !5314)
!5318 = !DILocation(line: 1598, column: 14, scope: !5314)
!5319 = !DILocation(line: 1598, column: 21, scope: !5314)
!5320 = !DILocation(line: 1598, column: 3, scope: !5314)
!5321 = distinct !DISubprogram(name: "gimple_ops", scope: !528, file: !528, line: 1614, type: !5322, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5322 = !DISubroutineType(types: !5323)
!5323 = !{!1021, !987}
!5324 = !DILocalVariable(name: "gs", arg: 1, scope: !5321, file: !528, line: 1614, type: !987)
!5325 = !DILocation(line: 1614, column: 20, scope: !5321)
!5326 = !DILocalVariable(name: "off", scope: !5321, file: !528, line: 1616, type: !1132)
!5327 = !DILocation(line: 1616, column: 10, scope: !5321)
!5328 = !DILocation(line: 1621, column: 56, scope: !5321)
!5329 = !DILocation(line: 1621, column: 28, scope: !5321)
!5330 = !DILocation(line: 1621, column: 9, scope: !5321)
!5331 = !DILocation(line: 1621, column: 7, scope: !5321)
!5332 = !DILocation(line: 1622, column: 3, scope: !5321)
!5333 = !DILocation(line: 1624, column: 29, scope: !5321)
!5334 = !DILocation(line: 1624, column: 20, scope: !5321)
!5335 = !DILocation(line: 1624, column: 34, scope: !5321)
!5336 = !DILocation(line: 1624, column: 32, scope: !5321)
!5337 = !DILocation(line: 1624, column: 10, scope: !5321)
!5338 = !DILocation(line: 1624, column: 3, scope: !5321)
!5339 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !528, file: !528, line: 1073, type: !5340, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5340 = !DISubroutineType(types: !5341)
!5341 = !{!596, !987}
!5342 = !DILocalVariable(name: "gs", arg: 1, scope: !5339, file: !528, line: 1073, type: !987)
!5343 = !DILocation(line: 1073, column: 36, scope: !5339)
!5344 = !DILocation(line: 1075, column: 37, scope: !5339)
!5345 = !DILocation(line: 1075, column: 24, scope: !5339)
!5346 = !DILocation(line: 1075, column: 10, scope: !5339)
!5347 = !DILocation(line: 1075, column: 3, scope: !5339)
!5348 = distinct !DISubprogram(name: "gss_for_code", scope: !528, file: !528, line: 1061, type: !5349, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5349 = !DISubroutineType(types: !5350)
!5350 = !{!596, !527}
!5351 = !DILocalVariable(name: "code", arg: 1, scope: !5348, file: !528, line: 1061, type: !527)
!5352 = !DILocation(line: 1061, column: 32, scope: !5348)
!5353 = !DILocation(line: 1066, column: 24, scope: !5348)
!5354 = !DILocation(line: 1066, column: 10, scope: !5348)
!5355 = !DILocation(line: 1066, column: 3, scope: !5348)
!5356 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !528, file: !528, line: 3080, type: !5322, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5357 = !DILocalVariable(name: "gs", arg: 1, scope: !5356, file: !528, line: 3080, type: !987)
!5358 = !DILocation(line: 3080, column: 31, scope: !5356)
!5359 = !DILocation(line: 3083, column: 11, scope: !5356)
!5360 = !DILocation(line: 3083, column: 15, scope: !5356)
!5361 = !DILocation(line: 3083, column: 26, scope: !5356)
!5362 = !DILocation(line: 3083, column: 3, scope: !5356)
!5363 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2055, file: !2055, line: 32, type: !5364, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5364 = !DISubroutineType(types: !5365)
!5365 = !{!2053, !754}
!5366 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5363, file: !2055, line: 32, type: !754)
!5367 = !DILocation(line: 32, column: 1, scope: !5363)
!5368 = distinct !DISubprogram(name: "number_of_loops", scope: !328, file: !328, line: 459, type: !5369, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5369 = !DISubroutineType(types: !5370)
!5370 = !{!5}
!5371 = !DILocation(line: 461, column: 8, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !5368, file: !328, line: 461, column: 7)
!5373 = !DILocation(line: 461, column: 7, scope: !5368)
!5374 = !DILocation(line: 462, column: 5, scope: !5372)
!5375 = !DILocation(line: 464, column: 10, scope: !5368)
!5376 = !DILocation(line: 464, column: 3, scope: !5368)
!5377 = !DILocation(line: 465, column: 1, scope: !5368)
!5378 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2055, file: !2055, line: 31, type: !5379, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5379 = !DISubroutineType(types: !5380)
!5380 = !{!5381, !5382, !754}
!5381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !754, size: 64)
!5382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2059, size: 64)
!5383 = !DILocalVariable(name: "vec_", arg: 1, scope: !5378, file: !2055, line: 31, type: !5382)
!5384 = !DILocation(line: 31, column: 1, scope: !5378)
!5385 = !DILocalVariable(name: "obj_", arg: 2, scope: !5378, file: !2055, line: 31, type: !754)
!5386 = !DILocalVariable(name: "slot_", scope: !5378, file: !2055, line: 31, type: !5381)
!5387 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2055, file: !2055, line: 31, type: !5388, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5388 = !DISubroutineType(types: !5389)
!5389 = !{!754, !5390, !5, !5381}
!5390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5391, size: 64)
!5391 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2059)
!5392 = !DILocalVariable(name: "vec_", arg: 1, scope: !5387, file: !2055, line: 31, type: !5390)
!5393 = !DILocation(line: 31, column: 1, scope: !5387)
!5394 = !DILocalVariable(name: "ix_", arg: 2, scope: !5387, file: !2055, line: 31, type: !5)
!5395 = !DILocalVariable(name: "ptr", arg: 3, scope: !5387, file: !2055, line: 31, type: !5381)
!5396 = !DILocation(line: 31, column: 1, scope: !5397)
!5397 = distinct !DILexicalBlock(scope: !5387, file: !2055, line: 31, column: 1)
!5398 = !DILocation(line: 31, column: 1, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5397, file: !2055, line: 31, column: 1)
!5400 = !DILocation(line: 31, column: 1, scope: !5401)
!5401 = distinct !DILexicalBlock(scope: !5397, file: !2055, line: 31, column: 1)
!5402 = distinct !DISubprogram(name: "get_loop", scope: !328, file: !328, line: 417, type: !5403, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5403 = !DISubroutineType(types: !5404)
!5404 = !{!1202, !5}
!5405 = !DILocalVariable(name: "num", arg: 1, scope: !5402, file: !328, line: 417, type: !5)
!5406 = !DILocation(line: 417, column: 20, scope: !5402)
!5407 = !DILocation(line: 419, column: 10, scope: !5402)
!5408 = !DILocation(line: 419, column: 3, scope: !5402)
!5409 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2055, file: !2055, line: 32, type: !5410, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5410 = !DISubroutineType(types: !5411)
!5411 = !{null, !5412}
!5412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2053, size: 64)
!5413 = !DILocalVariable(name: "vec_", arg: 1, scope: !5409, file: !2055, line: 32, type: !5412)
!5414 = !DILocation(line: 32, column: 1, scope: !5409)
!5415 = !DILocation(line: 32, column: 1, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5409, file: !2055, line: 32, column: 1)
!5417 = distinct !DISubprogram(name: "get_vdef_before_sese", scope: !1, file: !1, line: 400, type: !5418, scopeLine: 401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5418 = !DISubroutineType(types: !5419)
!5419 = !{!657, !2045, !657, !3321}
!5420 = !DILocalVariable(name: "region", arg: 1, scope: !5417, file: !1, line: 400, type: !2045)
!5421 = !DILocation(line: 400, column: 28, scope: !5417)
!5422 = !DILocalVariable(name: "name", arg: 2, scope: !5417, file: !1, line: 400, type: !657)
!5423 = !DILocation(line: 400, column: 41, scope: !5417)
!5424 = !DILocalVariable(name: "visited", arg: 3, scope: !5417, file: !1, line: 400, type: !3321)
!5425 = !DILocation(line: 400, column: 55, scope: !5417)
!5426 = !DILocalVariable(name: "i", scope: !5417, file: !1, line: 402, type: !5)
!5427 = !DILocation(line: 402, column: 12, scope: !5417)
!5428 = !DILocalVariable(name: "stmt", scope: !5417, file: !1, line: 403, type: !987)
!5429 = !DILocation(line: 403, column: 10, scope: !5417)
!5430 = !DILocation(line: 403, column: 17, scope: !5417)
!5431 = !DILocalVariable(name: "def_bb", scope: !5417, file: !1, line: 404, type: !1439)
!5432 = !DILocation(line: 404, column: 15, scope: !5417)
!5433 = !DILocation(line: 404, column: 35, scope: !5417)
!5434 = !DILocation(line: 404, column: 24, scope: !5417)
!5435 = !DILocation(line: 406, column: 8, scope: !5436)
!5436 = distinct !DILexicalBlock(scope: !5417, file: !1, line: 406, column: 7)
!5437 = !DILocation(line: 406, column: 15, scope: !5436)
!5438 = !DILocation(line: 406, column: 33, scope: !5436)
!5439 = !DILocation(line: 406, column: 41, scope: !5436)
!5440 = !DILocation(line: 406, column: 19, scope: !5436)
!5441 = !DILocation(line: 406, column: 7, scope: !5417)
!5442 = !DILocation(line: 407, column: 12, scope: !5436)
!5443 = !DILocation(line: 407, column: 5, scope: !5436)
!5444 = !DILocation(line: 409, column: 7, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5417, file: !1, line: 409, column: 7)
!5446 = !DILocation(line: 409, column: 7, scope: !5417)
!5447 = !DILocation(line: 410, column: 5, scope: !5445)
!5448 = !DILocation(line: 412, column: 12, scope: !5417)
!5449 = !DILocation(line: 412, column: 21, scope: !5417)
!5450 = !DILocation(line: 412, column: 29, scope: !5417)
!5451 = !DILocation(line: 412, column: 3, scope: !5417)
!5452 = !DILocation(line: 414, column: 24, scope: !5417)
!5453 = !DILocation(line: 414, column: 11, scope: !5417)
!5454 = !DILocation(line: 414, column: 3, scope: !5417)
!5455 = !DILocation(line: 417, column: 14, scope: !5456)
!5456 = distinct !DILexicalBlock(scope: !5457, file: !1, line: 417, column: 7)
!5457 = distinct !DILexicalBlock(scope: !5417, file: !1, line: 415, column: 5)
!5458 = !DILocation(line: 417, column: 12, scope: !5456)
!5459 = !DILocation(line: 417, column: 19, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5456, file: !1, line: 417, column: 7)
!5461 = !DILocation(line: 417, column: 44, scope: !5460)
!5462 = !DILocation(line: 417, column: 23, scope: !5460)
!5463 = !DILocation(line: 417, column: 21, scope: !5460)
!5464 = !DILocation(line: 417, column: 7, scope: !5456)
!5465 = !DILocalVariable(name: "arg", scope: !5466, file: !1, line: 419, type: !657)
!5466 = distinct !DILexicalBlock(scope: !5460, file: !1, line: 418, column: 2)
!5467 = !DILocation(line: 419, column: 9, scope: !5466)
!5468 = !DILocation(line: 419, column: 35, scope: !5466)
!5469 = !DILocation(line: 419, column: 41, scope: !5466)
!5470 = !DILocation(line: 419, column: 15, scope: !5466)
!5471 = !DILocalVariable(name: "res", scope: !5466, file: !1, line: 420, type: !657)
!5472 = !DILocation(line: 420, column: 9, scope: !5466)
!5473 = !DILocation(line: 422, column: 19, scope: !5474)
!5474 = distinct !DILexicalBlock(scope: !5466, file: !1, line: 422, column: 8)
!5475 = !DILocation(line: 422, column: 8, scope: !5474)
!5476 = !DILocation(line: 423, column: 8, scope: !5474)
!5477 = !DILocation(line: 423, column: 11, scope: !5474)
!5478 = !DILocation(line: 423, column: 19, scope: !5474)
!5479 = !DILocation(line: 423, column: 39, scope: !5474)
!5480 = !DILocation(line: 423, column: 28, scope: !5474)
!5481 = !DILocation(line: 423, column: 65, scope: !5474)
!5482 = !DILocation(line: 423, column: 25, scope: !5474)
!5483 = !DILocation(line: 422, column: 8, scope: !5466)
!5484 = !DILocation(line: 424, column: 6, scope: !5474)
!5485 = !DILocation(line: 426, column: 32, scope: !5466)
!5486 = !DILocation(line: 426, column: 40, scope: !5466)
!5487 = !DILocation(line: 426, column: 45, scope: !5466)
!5488 = !DILocation(line: 426, column: 10, scope: !5466)
!5489 = !DILocation(line: 426, column: 8, scope: !5466)
!5490 = !DILocation(line: 427, column: 8, scope: !5491)
!5491 = distinct !DILexicalBlock(scope: !5466, file: !1, line: 427, column: 8)
!5492 = !DILocation(line: 427, column: 8, scope: !5466)
!5493 = !DILocation(line: 428, column: 13, scope: !5491)
!5494 = !DILocation(line: 428, column: 6, scope: !5491)
!5495 = !DILocation(line: 429, column: 2, scope: !5466)
!5496 = !DILocation(line: 417, column: 52, scope: !5460)
!5497 = !DILocation(line: 417, column: 7, scope: !5460)
!5498 = distinct !{!5498, !5464, !5499}
!5499 = !DILocation(line: 429, column: 2, scope: !5456)
!5500 = !DILocation(line: 430, column: 7, scope: !5457)
!5501 = !DILocalVariable(name: "use_p", scope: !5502, file: !1, line: 435, type: !2050)
!5502 = distinct !DILexicalBlock(scope: !5457, file: !1, line: 434, column: 7)
!5503 = !DILocation(line: 435, column: 16, scope: !5502)
!5504 = !DILocation(line: 435, column: 40, scope: !5502)
!5505 = !DILocation(line: 435, column: 24, scope: !5502)
!5506 = !DILocalVariable(name: "use", scope: !5502, file: !1, line: 436, type: !657)
!5507 = !DILocation(line: 436, column: 7, scope: !5502)
!5508 = !DILocation(line: 436, column: 13, scope: !5502)
!5509 = !DILocation(line: 438, column: 6, scope: !5510)
!5510 = distinct !DILexicalBlock(scope: !5502, file: !1, line: 438, column: 6)
!5511 = !DILocation(line: 438, column: 14, scope: !5510)
!5512 = !DILocation(line: 438, column: 34, scope: !5510)
!5513 = !DILocation(line: 438, column: 23, scope: !5510)
!5514 = !DILocation(line: 438, column: 60, scope: !5510)
!5515 = !DILocation(line: 438, column: 20, scope: !5510)
!5516 = !DILocation(line: 438, column: 6, scope: !5502)
!5517 = !DILocation(line: 439, column: 15, scope: !5510)
!5518 = !DILocation(line: 439, column: 24, scope: !5510)
!5519 = !DILocation(line: 439, column: 32, scope: !5510)
!5520 = !DILocation(line: 439, column: 4, scope: !5510)
!5521 = !DILocation(line: 441, column: 31, scope: !5502)
!5522 = !DILocation(line: 441, column: 39, scope: !5502)
!5523 = !DILocation(line: 441, column: 44, scope: !5502)
!5524 = !DILocation(line: 441, column: 9, scope: !5502)
!5525 = !DILocation(line: 441, column: 2, scope: !5502)
!5526 = !DILocation(line: 445, column: 7, scope: !5457)
!5527 = !DILocation(line: 447, column: 1, scope: !5417)
!5528 = distinct !DISubprogram(name: "SET_BIT", scope: !3322, file: !3322, line: 63, type: !5529, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5529 = !DISubroutineType(types: !5530)
!5530 = !{null, !3321, !5}
!5531 = !DILocalVariable(name: "map", arg: 1, scope: !5528, file: !3322, line: 63, type: !3321)
!5532 = !DILocation(line: 63, column: 18, scope: !5528)
!5533 = !DILocalVariable(name: "bitno", arg: 2, scope: !5528, file: !3322, line: 63, type: !5)
!5534 = !DILocation(line: 63, column: 36, scope: !5528)
!5535 = !DILocation(line: 65, column: 7, scope: !5536)
!5536 = distinct !DILexicalBlock(scope: !5528, file: !3322, line: 65, column: 7)
!5537 = !DILocation(line: 65, column: 12, scope: !5536)
!5538 = !DILocation(line: 65, column: 7, scope: !5528)
!5539 = !DILocalVariable(name: "oldbit", scope: !5540, file: !3322, line: 67, type: !777)
!5540 = distinct !DILexicalBlock(scope: !5536, file: !3322, line: 66, column: 5)
!5541 = !DILocation(line: 67, column: 12, scope: !5540)
!5542 = !DILocation(line: 68, column: 16, scope: !5540)
!5543 = !DILocation(line: 68, column: 14, scope: !5540)
!5544 = !DILocation(line: 69, column: 12, scope: !5545)
!5545 = distinct !DILexicalBlock(scope: !5540, file: !3322, line: 69, column: 11)
!5546 = !DILocation(line: 69, column: 11, scope: !5540)
!5547 = !DILocation(line: 70, column: 2, scope: !5545)
!5548 = !DILocation(line: 70, column: 7, scope: !5545)
!5549 = !DILocation(line: 70, column: 16, scope: !5545)
!5550 = !DILocation(line: 70, column: 22, scope: !5545)
!5551 = !DILocation(line: 70, column: 41, scope: !5545)
!5552 = !DILocation(line: 71, column: 5, scope: !5540)
!5553 = !DILocation(line: 73, column: 33, scope: !5528)
!5554 = !DILocation(line: 73, column: 40, scope: !5528)
!5555 = !DILocation(line: 73, column: 29, scope: !5528)
!5556 = !DILocation(line: 72, column: 3, scope: !5528)
!5557 = !DILocation(line: 72, column: 8, scope: !5528)
!5558 = !DILocation(line: 72, column: 13, scope: !5528)
!5559 = !DILocation(line: 72, column: 19, scope: !5528)
!5560 = !DILocation(line: 73, column: 5, scope: !5528)
!5561 = !DILocation(line: 74, column: 1, scope: !5528)
!5562 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !528, file: !528, line: 1334, type: !5563, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5563 = !DISubroutineType(types: !5564)
!5564 = !{!2050, !3278}
!5565 = !DILocalVariable(name: "g", arg: 1, scope: !5562, file: !528, line: 1334, type: !3278)
!5566 = !DILocation(line: 1334, column: 30, scope: !5562)
!5567 = !DILocalVariable(name: "ops", scope: !5562, file: !528, line: 1336, type: !1023)
!5568 = !DILocation(line: 1336, column: 24, scope: !5562)
!5569 = !DILocation(line: 1337, column: 28, scope: !5570)
!5570 = distinct !DILexicalBlock(scope: !5562, file: !528, line: 1337, column: 7)
!5571 = !DILocation(line: 1337, column: 8, scope: !5570)
!5572 = !DILocation(line: 1337, column: 7, scope: !5562)
!5573 = !DILocation(line: 1338, column: 5, scope: !5570)
!5574 = !DILocation(line: 1339, column: 9, scope: !5562)
!5575 = !DILocation(line: 1339, column: 12, scope: !5562)
!5576 = !DILocation(line: 1339, column: 18, scope: !5562)
!5577 = !DILocation(line: 1339, column: 25, scope: !5562)
!5578 = !DILocation(line: 1339, column: 7, scope: !5562)
!5579 = !DILocation(line: 1340, column: 7, scope: !5580)
!5580 = distinct !DILexicalBlock(scope: !5562, file: !528, line: 1340, column: 7)
!5581 = !DILocation(line: 1341, column: 7, scope: !5580)
!5582 = !DILocation(line: 1341, column: 10, scope: !5580)
!5583 = !DILocation(line: 1341, column: 28, scope: !5580)
!5584 = !DILocation(line: 1341, column: 36, scope: !5580)
!5585 = !DILocation(line: 1341, column: 39, scope: !5580)
!5586 = !DILocation(line: 1341, column: 49, scope: !5580)
!5587 = !DILocation(line: 1341, column: 32, scope: !5580)
!5588 = !DILocation(line: 1340, column: 7, scope: !5562)
!5589 = !DILocation(line: 1342, column: 12, scope: !5580)
!5590 = !DILocation(line: 1342, column: 5, scope: !5580)
!5591 = !DILocation(line: 1343, column: 3, scope: !5562)
!5592 = !DILocation(line: 1344, column: 1, scope: !5562)
!5593 = distinct !DISubprogram(name: "RESET_BIT", scope: !3322, file: !3322, line: 82, type: !5529, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5594 = !DILocalVariable(name: "map", arg: 1, scope: !5593, file: !3322, line: 82, type: !3321)
!5595 = !DILocation(line: 82, column: 20, scope: !5593)
!5596 = !DILocalVariable(name: "bitno", arg: 2, scope: !5593, file: !3322, line: 82, type: !5)
!5597 = !DILocation(line: 82, column: 39, scope: !5593)
!5598 = !DILocation(line: 84, column: 7, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5593, file: !3322, line: 84, column: 7)
!5600 = !DILocation(line: 84, column: 12, scope: !5599)
!5601 = !DILocation(line: 84, column: 7, scope: !5593)
!5602 = !DILocalVariable(name: "oldbit", scope: !5603, file: !3322, line: 86, type: !777)
!5603 = distinct !DILexicalBlock(scope: !5599, file: !3322, line: 85, column: 5)
!5604 = !DILocation(line: 86, column: 12, scope: !5603)
!5605 = !DILocation(line: 87, column: 16, scope: !5603)
!5606 = !DILocation(line: 87, column: 14, scope: !5603)
!5607 = !DILocation(line: 88, column: 11, scope: !5608)
!5608 = distinct !DILexicalBlock(scope: !5603, file: !3322, line: 88, column: 11)
!5609 = !DILocation(line: 88, column: 11, scope: !5603)
!5610 = !DILocation(line: 89, column: 2, scope: !5608)
!5611 = !DILocation(line: 89, column: 7, scope: !5608)
!5612 = !DILocation(line: 89, column: 16, scope: !5608)
!5613 = !DILocation(line: 89, column: 22, scope: !5608)
!5614 = !DILocation(line: 89, column: 41, scope: !5608)
!5615 = !DILocation(line: 90, column: 5, scope: !5603)
!5616 = !DILocation(line: 92, column: 35, scope: !5593)
!5617 = !DILocation(line: 92, column: 42, scope: !5593)
!5618 = !DILocation(line: 92, column: 31, scope: !5593)
!5619 = !DILocation(line: 92, column: 8, scope: !5593)
!5620 = !DILocation(line: 91, column: 3, scope: !5593)
!5621 = !DILocation(line: 91, column: 8, scope: !5593)
!5622 = !DILocation(line: 91, column: 13, scope: !5593)
!5623 = !DILocation(line: 91, column: 19, scope: !5593)
!5624 = !DILocation(line: 92, column: 5, scope: !5593)
!5625 = !DILocation(line: 93, column: 1, scope: !5593)
!5626 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !341, file: !341, line: 150, type: !5627, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5627 = !DISubroutineType(types: !5628)
!5628 = !{!967, !5629, !5}
!5629 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5630, size: 64)
!5630 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !960)
!5631 = !DILocalVariable(name: "vec_", arg: 1, scope: !5626, file: !341, line: 150, type: !5629)
!5632 = !DILocation(line: 150, column: 1, scope: !5626)
!5633 = !DILocalVariable(name: "ix_", arg: 2, scope: !5626, file: !341, line: 150, type: !5)
!5634 = !DILocation(line: 0, scope: !5626)
!5635 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !528, file: !528, line: 3100, type: !5636, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5636 = !DISubroutineType(types: !5637)
!5637 = !{!3396, !987, !5}
!5638 = !DILocalVariable(name: "gs", arg: 1, scope: !5635, file: !528, line: 3100, type: !987)
!5639 = !DILocation(line: 3100, column: 24, scope: !5635)
!5640 = !DILocalVariable(name: "index", arg: 2, scope: !5635, file: !528, line: 3100, type: !5)
!5641 = !DILocation(line: 3100, column: 37, scope: !5635)
!5642 = !DILocation(line: 3103, column: 3, scope: !5635)
!5643 = !DILocation(line: 3104, column: 12, scope: !5635)
!5644 = !DILocation(line: 3104, column: 16, scope: !5635)
!5645 = !DILocation(line: 3104, column: 27, scope: !5635)
!5646 = !DILocation(line: 3104, column: 32, scope: !5635)
!5647 = !DILocation(line: 3104, column: 3, scope: !5635)
!5648 = distinct !DISubprogram(name: "delink_imm_use", scope: !3379, file: !3379, line: 188, type: !5649, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5649 = !DISubroutineType(types: !5650)
!5650 = !{null, !2051}
!5651 = !DILocalVariable(name: "linknode", arg: 1, scope: !5648, file: !3379, line: 188, type: !2051)
!5652 = !DILocation(line: 188, column: 36, scope: !5648)
!5653 = !DILocation(line: 191, column: 7, scope: !5654)
!5654 = distinct !DILexicalBlock(scope: !5648, file: !3379, line: 191, column: 7)
!5655 = !DILocation(line: 191, column: 17, scope: !5654)
!5656 = !DILocation(line: 191, column: 22, scope: !5654)
!5657 = !DILocation(line: 191, column: 7, scope: !5648)
!5658 = !DILocation(line: 192, column: 5, scope: !5654)
!5659 = !DILocation(line: 194, column: 26, scope: !5648)
!5660 = !DILocation(line: 194, column: 36, scope: !5648)
!5661 = !DILocation(line: 194, column: 3, scope: !5648)
!5662 = !DILocation(line: 194, column: 13, scope: !5648)
!5663 = !DILocation(line: 194, column: 19, scope: !5648)
!5664 = !DILocation(line: 194, column: 24, scope: !5648)
!5665 = !DILocation(line: 195, column: 26, scope: !5648)
!5666 = !DILocation(line: 195, column: 36, scope: !5648)
!5667 = !DILocation(line: 195, column: 3, scope: !5648)
!5668 = !DILocation(line: 195, column: 13, scope: !5648)
!5669 = !DILocation(line: 195, column: 19, scope: !5648)
!5670 = !DILocation(line: 195, column: 24, scope: !5648)
!5671 = !DILocation(line: 196, column: 3, scope: !5648)
!5672 = !DILocation(line: 196, column: 13, scope: !5648)
!5673 = !DILocation(line: 196, column: 18, scope: !5648)
!5674 = !DILocation(line: 197, column: 3, scope: !5648)
!5675 = !DILocation(line: 197, column: 13, scope: !5648)
!5676 = !DILocation(line: 197, column: 18, scope: !5648)
!5677 = !DILocation(line: 198, column: 1, scope: !5648)
!5678 = distinct !DISubprogram(name: "link_imm_use", scope: !3379, file: !3379, line: 214, type: !5679, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5679 = !DISubroutineType(types: !5680)
!5680 = !{null, !2051, !657}
!5681 = !DILocalVariable(name: "linknode", arg: 1, scope: !5678, file: !3379, line: 214, type: !2051)
!5682 = !DILocation(line: 214, column: 34, scope: !5678)
!5683 = !DILocalVariable(name: "def", arg: 2, scope: !5678, file: !3379, line: 214, type: !657)
!5684 = !DILocation(line: 214, column: 49, scope: !5678)
!5685 = !DILocalVariable(name: "root", scope: !5678, file: !3379, line: 216, type: !2051)
!5686 = !DILocation(line: 216, column: 22, scope: !5678)
!5687 = !DILocation(line: 218, column: 8, scope: !5688)
!5688 = distinct !DILexicalBlock(scope: !5678, file: !3379, line: 218, column: 7)
!5689 = !DILocation(line: 218, column: 12, scope: !5688)
!5690 = !DILocation(line: 218, column: 15, scope: !5688)
!5691 = !DILocation(line: 218, column: 31, scope: !5688)
!5692 = !DILocation(line: 218, column: 7, scope: !5678)
!5693 = !DILocation(line: 219, column: 5, scope: !5688)
!5694 = !DILocation(line: 219, column: 15, scope: !5688)
!5695 = !DILocation(line: 219, column: 20, scope: !5688)
!5696 = !DILocation(line: 222, column: 16, scope: !5697)
!5697 = distinct !DILexicalBlock(scope: !5688, file: !3379, line: 221, column: 5)
!5698 = !DILocation(line: 222, column: 12, scope: !5697)
!5699 = !DILocation(line: 227, column: 29, scope: !5697)
!5700 = !DILocation(line: 227, column: 39, scope: !5697)
!5701 = !DILocation(line: 227, column: 7, scope: !5697)
!5702 = !DILocation(line: 229, column: 1, scope: !5678)
!5703 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !3379, file: !3379, line: 202, type: !5704, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5704 = !DISubroutineType(types: !5705)
!5705 = !{null, !2051, !2051}
!5706 = !DILocalVariable(name: "linknode", arg: 1, scope: !5703, file: !3379, line: 202, type: !2051)
!5707 = !DILocation(line: 202, column: 42, scope: !5703)
!5708 = !DILocalVariable(name: "list", arg: 2, scope: !5703, file: !3379, line: 202, type: !2051)
!5709 = !DILocation(line: 202, column: 71, scope: !5703)
!5710 = !DILocation(line: 206, column: 20, scope: !5703)
!5711 = !DILocation(line: 206, column: 3, scope: !5703)
!5712 = !DILocation(line: 206, column: 13, scope: !5703)
!5713 = !DILocation(line: 206, column: 18, scope: !5703)
!5714 = !DILocation(line: 207, column: 20, scope: !5703)
!5715 = !DILocation(line: 207, column: 26, scope: !5703)
!5716 = !DILocation(line: 207, column: 3, scope: !5703)
!5717 = !DILocation(line: 207, column: 13, scope: !5703)
!5718 = !DILocation(line: 207, column: 18, scope: !5703)
!5719 = !DILocation(line: 208, column: 22, scope: !5703)
!5720 = !DILocation(line: 208, column: 3, scope: !5703)
!5721 = !DILocation(line: 208, column: 9, scope: !5703)
!5722 = !DILocation(line: 208, column: 15, scope: !5703)
!5723 = !DILocation(line: 208, column: 20, scope: !5703)
!5724 = !DILocation(line: 209, column: 16, scope: !5703)
!5725 = !DILocation(line: 209, column: 3, scope: !5703)
!5726 = !DILocation(line: 209, column: 9, scope: !5703)
!5727 = !DILocation(line: 209, column: 14, scope: !5703)
!5728 = !DILocation(line: 210, column: 1, scope: !5703)
!5729 = distinct !DISubprogram(name: "ei_end_p", scope: !341, file: !341, line: 721, type: !5730, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5730 = !DISubroutineType(types: !5731)
!5731 = !{!777, !3486}
!5732 = !DILocalVariable(name: "i", arg: 1, scope: !5729, file: !341, line: 721, type: !3486)
!5733 = !DILocation(line: 721, column: 25, scope: !5729)
!5734 = !DILocation(line: 723, column: 13, scope: !5729)
!5735 = !DILocation(line: 723, column: 22, scope: !5729)
!5736 = !DILocation(line: 723, column: 19, scope: !5729)
!5737 = !DILocation(line: 723, column: 10, scope: !5729)
!5738 = !DILocation(line: 723, column: 3, scope: !5729)
!5739 = distinct !DISubprogram(name: "ei_edge", scope: !341, file: !341, line: 752, type: !5740, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5740 = !DISubroutineType(types: !5741)
!5741 = !{!967, !3486}
!5742 = !DILocalVariable(name: "i", arg: 1, scope: !5739, file: !341, line: 752, type: !3486)
!5743 = !DILocation(line: 752, column: 24, scope: !5739)
!5744 = !DILocation(line: 754, column: 10, scope: !5739)
!5745 = !DILocation(line: 754, column: 3, scope: !5739)
!5746 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !341, file: !341, line: 150, type: !5747, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5747 = !DISubroutineType(types: !5748)
!5748 = !{!5, !5629}
!5749 = !DILocalVariable(name: "vec_", arg: 1, scope: !5746, file: !341, line: 150, type: !5629)
!5750 = !DILocation(line: 150, column: 1, scope: !5746)
!5751 = distinct !DISubprogram(name: "ei_container", scope: !341, file: !341, line: 685, type: !5752, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5752 = !DISubroutineType(types: !5753)
!5753 = !{!955, !3486}
!5754 = !DILocalVariable(name: "i", arg: 1, scope: !5751, file: !341, line: 685, type: !3486)
!5755 = !DILocation(line: 685, column: 29, scope: !5751)
!5756 = !DILocation(line: 687, column: 3, scope: !5751)
!5757 = !DILocation(line: 688, column: 13, scope: !5751)
!5758 = !DILocation(line: 688, column: 10, scope: !5751)
!5759 = !DILocation(line: 688, column: 3, scope: !5751)
!5760 = distinct !DISubprogram(name: "expr_defined_in_loop_p", scope: !1, file: !1, line: 1117, type: !5761, scopeLine: 1118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5761 = !DISubroutineType(types: !5762)
!5762 = !{!777, !657, !1229}
!5763 = !DILocalVariable(name: "expr", arg: 1, scope: !5760, file: !1, line: 1117, type: !657)
!5764 = !DILocation(line: 1117, column: 30, scope: !5760)
!5765 = !DILocalVariable(name: "loop", arg: 2, scope: !5760, file: !1, line: 1117, type: !1229)
!5766 = !DILocation(line: 1117, column: 43, scope: !5760)
!5767 = !DILocation(line: 1119, column: 11, scope: !5760)
!5768 = !DILocation(line: 1119, column: 3, scope: !5760)
!5769 = !DILocation(line: 1122, column: 38, scope: !5770)
!5770 = distinct !DILexicalBlock(scope: !5760, file: !1, line: 1120, column: 5)
!5771 = !DILocation(line: 1122, column: 62, scope: !5770)
!5772 = !DILocation(line: 1122, column: 14, scope: !5770)
!5773 = !DILocation(line: 1123, column: 2, scope: !5770)
!5774 = !DILocation(line: 1123, column: 29, scope: !5770)
!5775 = !DILocation(line: 1123, column: 53, scope: !5770)
!5776 = !DILocation(line: 1123, column: 5, scope: !5770)
!5777 = !DILocation(line: 1124, column: 2, scope: !5770)
!5778 = !DILocation(line: 1124, column: 29, scope: !5770)
!5779 = !DILocation(line: 1124, column: 53, scope: !5770)
!5780 = !DILocation(line: 1124, column: 5, scope: !5770)
!5781 = !DILocation(line: 1122, column: 7, scope: !5770)
!5782 = !DILocation(line: 1127, column: 38, scope: !5770)
!5783 = !DILocation(line: 1127, column: 62, scope: !5770)
!5784 = !DILocation(line: 1127, column: 14, scope: !5770)
!5785 = !DILocation(line: 1128, column: 2, scope: !5770)
!5786 = !DILocation(line: 1128, column: 29, scope: !5770)
!5787 = !DILocation(line: 1128, column: 53, scope: !5770)
!5788 = !DILocation(line: 1128, column: 5, scope: !5770)
!5789 = !DILocation(line: 1127, column: 7, scope: !5770)
!5790 = !DILocation(line: 1131, column: 38, scope: !5770)
!5791 = !DILocation(line: 1131, column: 62, scope: !5770)
!5792 = !DILocation(line: 1131, column: 14, scope: !5770)
!5793 = !DILocation(line: 1131, column: 7, scope: !5770)
!5794 = !DILocation(line: 1134, column: 14, scope: !5770)
!5795 = !DILocation(line: 1134, column: 31, scope: !5770)
!5796 = !DILocation(line: 1135, column: 2, scope: !5770)
!5797 = !DILocation(line: 1135, column: 29, scope: !5770)
!5798 = !DILocation(line: 1135, column: 35, scope: !5770)
!5799 = !DILocation(line: 1135, column: 5, scope: !5770)
!5800 = !DILocation(line: 0, scope: !5770)
!5801 = !DILocation(line: 1134, column: 7, scope: !5770)
!5802 = !DILocation(line: 1138, column: 7, scope: !5770)
!5803 = !DILocation(line: 1140, column: 1, scope: !5760)
!5804 = distinct !DISubprogram(name: "alive_after_loop", scope: !1, file: !1, line: 1149, type: !5805, scopeLine: 1150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5805 = !DISubroutineType(types: !5806)
!5806 = !{!987, !657}
!5807 = !DILocalVariable(name: "name", arg: 1, scope: !5804, file: !1, line: 1149, type: !657)
!5808 = !DILocation(line: 1149, column: 24, scope: !5804)
!5809 = !DILocalVariable(name: "use_p", scope: !5804, file: !1, line: 1151, type: !2050)
!5810 = !DILocation(line: 1151, column: 17, scope: !5804)
!5811 = !DILocalVariable(name: "imm_iter", scope: !5804, file: !1, line: 1152, type: !5812)
!5812 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1379, line: 249, baseType: !5813)
!5813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1379, line: 238, size: 448, elements: !5814)
!5814 = !{!5815, !5816, !5817, !5818}
!5815 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !5813, file: !1379, line: 241, baseType: !2051, size: 64)
!5816 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !5813, file: !1379, line: 243, baseType: !2051, size: 64, offset: 64)
!5817 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !5813, file: !1379, line: 245, baseType: !2052, size: 256, offset: 128)
!5818 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !5813, file: !1379, line: 248, baseType: !2051, size: 64, offset: 384)
!5819 = !DILocation(line: 1152, column: 20, scope: !5804)
!5820 = !DILocalVariable(name: "loop", scope: !5804, file: !1, line: 1153, type: !1229)
!5821 = !DILocation(line: 1153, column: 10, scope: !5804)
!5822 = !DILocation(line: 1153, column: 28, scope: !5804)
!5823 = !DILocation(line: 1153, column: 17, scope: !5804)
!5824 = !DILocation(line: 1153, column: 55, scope: !5804)
!5825 = !DILocation(line: 1155, column: 3, scope: !5826)
!5826 = distinct !DILexicalBlock(scope: !5804, file: !1, line: 1155, column: 3)
!5827 = !DILocation(line: 1155, column: 3, scope: !5828)
!5828 = distinct !DILexicalBlock(scope: !5826, file: !1, line: 1155, column: 3)
!5829 = !DILocalVariable(name: "stmt", scope: !5830, file: !1, line: 1157, type: !987)
!5830 = distinct !DILexicalBlock(scope: !5828, file: !1, line: 1156, column: 5)
!5831 = !DILocation(line: 1157, column: 14, scope: !5830)
!5832 = !DILocation(line: 1157, column: 21, scope: !5830)
!5833 = !DILocation(line: 1159, column: 24, scope: !5834)
!5834 = distinct !DILexicalBlock(scope: !5830, file: !1, line: 1159, column: 11)
!5835 = !DILocation(line: 1159, column: 11, scope: !5834)
!5836 = !DILocation(line: 1159, column: 30, scope: !5834)
!5837 = !DILocation(line: 1160, column: 4, scope: !5834)
!5838 = !DILocation(line: 1160, column: 18, scope: !5834)
!5839 = !DILocation(line: 1160, column: 7, scope: !5834)
!5840 = !DILocation(line: 1160, column: 25, scope: !5834)
!5841 = !DILocation(line: 1160, column: 40, scope: !5834)
!5842 = !DILocation(line: 1160, column: 37, scope: !5834)
!5843 = !DILocation(line: 1159, column: 11, scope: !5830)
!5844 = !DILocation(line: 1161, column: 9, scope: !5834)
!5845 = !DILocation(line: 1161, column: 2, scope: !5834)
!5846 = !DILocation(line: 1162, column: 5, scope: !5830)
!5847 = distinct !{!5847, !5825, !5848}
!5848 = !DILocation(line: 1162, column: 5, scope: !5826)
!5849 = !DILocation(line: 1164, column: 3, scope: !5804)
!5850 = !DILocation(line: 1165, column: 1, scope: !5804)
!5851 = distinct !DISubprogram(name: "close_phi_not_yet_inserted_p", scope: !1, file: !1, line: 1171, type: !5852, scopeLine: 1172, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5852 = !DISubroutineType(types: !5853)
!5853 = !{!777, !1229, !657}
!5854 = !DILocalVariable(name: "loop", arg: 1, scope: !5851, file: !1, line: 1171, type: !1229)
!5855 = !DILocation(line: 1171, column: 38, scope: !5851)
!5856 = !DILocalVariable(name: "name", arg: 2, scope: !5851, file: !1, line: 1171, type: !657)
!5857 = !DILocation(line: 1171, column: 49, scope: !5851)
!5858 = !DILocalVariable(name: "psi", scope: !5851, file: !1, line: 1173, type: !3127)
!5859 = !DILocation(line: 1173, column: 24, scope: !5851)
!5860 = !DILocalVariable(name: "bb", scope: !5851, file: !1, line: 1174, type: !1439)
!5861 = !DILocation(line: 1174, column: 15, scope: !5851)
!5862 = !DILocation(line: 1174, column: 33, scope: !5851)
!5863 = !DILocation(line: 1174, column: 20, scope: !5851)
!5864 = !DILocation(line: 1174, column: 40, scope: !5851)
!5865 = !DILocation(line: 1176, column: 30, scope: !5866)
!5866 = distinct !DILexicalBlock(scope: !5851, file: !1, line: 1176, column: 3)
!5867 = !DILocation(line: 1176, column: 14, scope: !5866)
!5868 = !DILocation(line: 1176, column: 8, scope: !5866)
!5869 = !DILocation(line: 1176, column: 36, scope: !5870)
!5870 = distinct !DILexicalBlock(scope: !5866, file: !1, line: 1176, column: 3)
!5871 = !DILocation(line: 1176, column: 35, scope: !5870)
!5872 = !DILocation(line: 1176, column: 3, scope: !5866)
!5873 = !DILocation(line: 1177, column: 29, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5870, file: !1, line: 1177, column: 9)
!5875 = !DILocation(line: 1177, column: 9, scope: !5874)
!5876 = !DILocation(line: 1177, column: 51, scope: !5874)
!5877 = !DILocation(line: 1177, column: 48, scope: !5874)
!5878 = !DILocation(line: 1177, column: 9, scope: !5870)
!5879 = !DILocation(line: 1178, column: 7, scope: !5874)
!5880 = !DILocation(line: 1176, column: 53, scope: !5870)
!5881 = !DILocation(line: 1176, column: 3, scope: !5870)
!5882 = distinct !{!5882, !5872, !5883}
!5883 = !DILocation(line: 1178, column: 14, scope: !5866)
!5884 = !DILocation(line: 1180, column: 3, scope: !5851)
!5885 = !DILocation(line: 1181, column: 1, scope: !5851)
!5886 = distinct !DISubprogram(name: "VEC_rename_map_elt_heap_safe_push", scope: !654, file: !654, line: 261, type: !5887, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5887 = !DISubroutineType(types: !5888)
!5888 = !{!3750, !3764, !2066}
!5889 = !DILocalVariable(name: "vec_", arg: 1, scope: !5886, file: !654, line: 261, type: !3764)
!5890 = !DILocation(line: 261, column: 1, scope: !5886)
!5891 = !DILocalVariable(name: "obj_", arg: 2, scope: !5886, file: !654, line: 261, type: !2066)
!5892 = distinct !DISubprogram(name: "name_defined_in_loop_p", scope: !1, file: !1, line: 1108, type: !5761, scopeLine: 1109, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5893 = !DILocalVariable(name: "name", arg: 1, scope: !5892, file: !1, line: 1108, type: !657)
!5894 = !DILocation(line: 1108, column: 30, scope: !5892)
!5895 = !DILocalVariable(name: "loop", arg: 2, scope: !5892, file: !1, line: 1108, type: !1229)
!5896 = !DILocation(line: 1108, column: 43, scope: !5892)
!5897 = !DILocation(line: 1110, column: 11, scope: !5892)
!5898 = !DILocation(line: 1111, column: 5, scope: !5892)
!5899 = !DILocation(line: 1111, column: 19, scope: !5892)
!5900 = !DILocation(line: 1111, column: 8, scope: !5892)
!5901 = !DILocation(line: 1111, column: 46, scope: !5892)
!5902 = !DILocation(line: 1111, column: 61, scope: !5892)
!5903 = !DILocation(line: 1111, column: 58, scope: !5892)
!5904 = !DILocation(line: 0, scope: !5892)
!5905 = !DILocation(line: 1110, column: 10, scope: !5892)
!5906 = !DILocation(line: 1110, column: 3, scope: !5892)
!5907 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !3379, file: !3379, line: 292, type: !5908, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5908 = !DISubroutineType(types: !5909)
!5909 = !{!2050, !5910, !657}
!5910 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5812, size: 64)
!5911 = !DILocalVariable(name: "imm", arg: 1, scope: !5907, file: !3379, line: 292, type: !5910)
!5912 = !DILocation(line: 292, column: 43, scope: !5907)
!5913 = !DILocalVariable(name: "var", arg: 2, scope: !5907, file: !3379, line: 292, type: !657)
!5914 = !DILocation(line: 292, column: 53, scope: !5907)
!5915 = !DILocation(line: 294, column: 18, scope: !5907)
!5916 = !DILocation(line: 294, column: 3, scope: !5907)
!5917 = !DILocation(line: 294, column: 8, scope: !5907)
!5918 = !DILocation(line: 294, column: 14, scope: !5907)
!5919 = !DILocation(line: 295, column: 18, scope: !5907)
!5920 = !DILocation(line: 295, column: 23, scope: !5907)
!5921 = !DILocation(line: 295, column: 30, scope: !5907)
!5922 = !DILocation(line: 295, column: 3, scope: !5907)
!5923 = !DILocation(line: 295, column: 8, scope: !5907)
!5924 = !DILocation(line: 295, column: 16, scope: !5907)
!5925 = !DILocation(line: 299, column: 31, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5907, file: !3379, line: 299, column: 7)
!5927 = !DILocation(line: 299, column: 7, scope: !5926)
!5928 = !DILocation(line: 299, column: 7, scope: !5907)
!5929 = !DILocation(line: 300, column: 5, scope: !5926)
!5930 = !DILocation(line: 301, column: 10, scope: !5907)
!5931 = !DILocation(line: 301, column: 15, scope: !5907)
!5932 = !DILocation(line: 301, column: 3, scope: !5907)
!5933 = !DILocation(line: 302, column: 1, scope: !5907)
!5934 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !3379, file: !3379, line: 285, type: !5935, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5935 = !DISubroutineType(types: !5936)
!5936 = !{!777, !5937}
!5937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5938, size: 64)
!5938 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5812)
!5939 = !DILocalVariable(name: "imm", arg: 1, scope: !5934, file: !3379, line: 285, type: !5937)
!5940 = !DILocation(line: 285, column: 49, scope: !5934)
!5941 = !DILocation(line: 287, column: 11, scope: !5934)
!5942 = !DILocation(line: 287, column: 16, scope: !5934)
!5943 = !DILocation(line: 287, column: 27, scope: !5934)
!5944 = !DILocation(line: 287, column: 32, scope: !5934)
!5945 = !DILocation(line: 287, column: 24, scope: !5934)
!5946 = !DILocation(line: 287, column: 10, scope: !5934)
!5947 = !DILocation(line: 287, column: 3, scope: !5934)
!5948 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !3379, file: !3379, line: 306, type: !5949, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5949 = !DISubroutineType(types: !5950)
!5950 = !{!2050, !5910}
!5951 = !DILocalVariable(name: "imm", arg: 1, scope: !5948, file: !3379, line: 306, type: !5910)
!5952 = !DILocation(line: 306, column: 42, scope: !5948)
!5953 = !DILocalVariable(name: "old", scope: !5948, file: !3379, line: 308, type: !2050)
!5954 = !DILocation(line: 308, column: 17, scope: !5948)
!5955 = !DILocation(line: 308, column: 23, scope: !5948)
!5956 = !DILocation(line: 308, column: 28, scope: !5948)
!5957 = !DILocation(line: 319, column: 18, scope: !5948)
!5958 = !DILocation(line: 319, column: 23, scope: !5948)
!5959 = !DILocation(line: 319, column: 3, scope: !5948)
!5960 = !DILocation(line: 319, column: 8, scope: !5948)
!5961 = !DILocation(line: 319, column: 16, scope: !5948)
!5962 = !DILocation(line: 320, column: 31, scope: !5963)
!5963 = distinct !DILexicalBlock(scope: !5948, file: !3379, line: 320, column: 7)
!5964 = !DILocation(line: 320, column: 7, scope: !5963)
!5965 = !DILocation(line: 320, column: 7, scope: !5948)
!5966 = !DILocation(line: 321, column: 5, scope: !5963)
!5967 = !DILocation(line: 322, column: 10, scope: !5948)
!5968 = !DILocation(line: 322, column: 15, scope: !5948)
!5969 = !DILocation(line: 322, column: 3, scope: !5948)
!5970 = !DILocation(line: 323, column: 1, scope: !5948)
!5971 = distinct !DISubprogram(name: "VEC_rename_map_elt_heap_reserve", scope: !654, file: !654, line: 261, type: !5972, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5972 = !DISubroutineType(types: !5973)
!5973 = !{!754, !3764, !754}
!5974 = !DILocalVariable(name: "vec_", arg: 1, scope: !5971, file: !654, line: 261, type: !3764)
!5975 = !DILocation(line: 261, column: 1, scope: !5971)
!5976 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5971, file: !654, line: 261, type: !754)
!5977 = !DILocalVariable(name: "extend", scope: !5971, file: !654, line: 261, type: !754)
!5978 = !DILocation(line: 261, column: 1, scope: !5979)
!5979 = distinct !DILexicalBlock(scope: !5971, file: !654, line: 261, column: 1)
!5980 = distinct !DISubprogram(name: "VEC_rename_map_elt_base_quick_push", scope: !654, file: !654, line: 260, type: !5981, scopeLine: 260, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5981 = !DISubroutineType(types: !5982)
!5982 = !{!3750, !5983, !2066}
!5983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2072, size: 64)
!5984 = !DILocalVariable(name: "vec_", arg: 1, scope: !5980, file: !654, line: 260, type: !5983)
!5985 = !DILocation(line: 260, column: 1, scope: !5980)
!5986 = !DILocalVariable(name: "obj_", arg: 2, scope: !5980, file: !654, line: 260, type: !2066)
!5987 = !DILocalVariable(name: "slot_", scope: !5980, file: !654, line: 260, type: !3750)
!5988 = distinct !DISubprogram(name: "VEC_rename_map_elt_base_space", scope: !654, file: !654, line: 260, type: !5989, scopeLine: 260, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5989 = !DISubroutineType(types: !5990)
!5990 = !{!754, !5983, !754}
!5991 = !DILocalVariable(name: "vec_", arg: 1, scope: !5988, file: !654, line: 260, type: !5983)
!5992 = !DILocation(line: 260, column: 1, scope: !5988)
!5993 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5988, file: !654, line: 260, type: !754)
!5994 = distinct !DISubprogram(name: "default_before_guard", scope: !1, file: !1, line: 1283, type: !2998, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!5995 = !DILocalVariable(name: "before_guard", arg: 1, scope: !5994, file: !1, line: 1283, type: !1471)
!5996 = !DILocation(line: 1283, column: 30, scope: !5994)
!5997 = !DILocalVariable(name: "old_name", arg: 2, scope: !5994, file: !1, line: 1283, type: !657)
!5998 = !DILocation(line: 1283, column: 49, scope: !5994)
!5999 = !DILocalVariable(name: "res", scope: !5994, file: !1, line: 1285, type: !657)
!6000 = !DILocation(line: 1285, column: 8, scope: !5994)
!6001 = !DILocation(line: 1285, column: 26, scope: !5994)
!6002 = !DILocation(line: 1285, column: 40, scope: !5994)
!6003 = !DILocation(line: 1285, column: 14, scope: !5994)
!6004 = !DILocation(line: 1287, column: 7, scope: !6005)
!6005 = distinct !DILexicalBlock(scope: !5994, file: !1, line: 1287, column: 7)
!6006 = !DILocation(line: 1287, column: 14, scope: !6005)
!6007 = !DILocation(line: 1287, column: 11, scope: !6005)
!6008 = !DILocation(line: 1287, column: 7, scope: !5994)
!6009 = !DILocation(line: 1289, column: 26, scope: !6010)
!6010 = distinct !DILexicalBlock(scope: !6011, file: !1, line: 1289, column: 11)
!6011 = distinct !DILexicalBlock(scope: !6005, file: !1, line: 1288, column: 5)
!6012 = !DILocation(line: 1289, column: 11, scope: !6010)
!6013 = !DILocation(line: 1289, column: 11, scope: !6011)
!6014 = !DILocation(line: 1290, column: 9, scope: !6010)
!6015 = !DILocation(line: 1290, column: 2, scope: !6010)
!6016 = !DILocation(line: 1291, column: 34, scope: !6011)
!6017 = !DILocation(line: 1291, column: 40, scope: !6011)
!6018 = !DILocation(line: 1291, column: 14, scope: !6011)
!6019 = !DILocation(line: 1291, column: 7, scope: !6011)
!6020 = !DILocation(line: 1294, column: 10, scope: !5994)
!6021 = !DILocation(line: 1294, column: 3, scope: !5994)
!6022 = !DILocation(line: 1295, column: 1, scope: !5994)
!6023 = distinct !DISubprogram(name: "convert_for_phi_arg", scope: !1, file: !1, line: 1301, type: !6024, scopeLine: 1302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6024 = !DISubroutineType(types: !6025)
!6025 = !{!657, !657, !657, !967}
!6026 = !DILocalVariable(name: "expr", arg: 1, scope: !6023, file: !1, line: 1301, type: !657)
!6027 = !DILocation(line: 1301, column: 27, scope: !6023)
!6028 = !DILocalVariable(name: "res", arg: 2, scope: !6023, file: !1, line: 1301, type: !657)
!6029 = !DILocation(line: 1301, column: 38, scope: !6023)
!6030 = !DILocalVariable(name: "e", arg: 3, scope: !6023, file: !1, line: 1301, type: !967)
!6031 = !DILocation(line: 1301, column: 48, scope: !6023)
!6032 = !DILocalVariable(name: "type", scope: !6023, file: !1, line: 1303, type: !657)
!6033 = !DILocation(line: 1303, column: 8, scope: !6023)
!6034 = !DILocation(line: 1303, column: 15, scope: !6023)
!6035 = !DILocation(line: 1305, column: 7, scope: !6036)
!6036 = distinct !DILexicalBlock(scope: !6023, file: !1, line: 1305, column: 7)
!6037 = !DILocation(line: 1305, column: 27, scope: !6036)
!6038 = !DILocation(line: 1305, column: 24, scope: !6036)
!6039 = !DILocation(line: 1305, column: 7, scope: !6023)
!6040 = !DILocation(line: 1306, column: 12, scope: !6036)
!6041 = !DILocation(line: 1306, column: 10, scope: !6036)
!6042 = !DILocation(line: 1306, column: 5, scope: !6036)
!6043 = !DILocation(line: 1308, column: 7, scope: !6044)
!6044 = distinct !DILexicalBlock(scope: !6023, file: !1, line: 1308, column: 7)
!6045 = !DILocation(line: 1308, column: 24, scope: !6044)
!6046 = !DILocation(line: 1309, column: 7, scope: !6044)
!6047 = !DILocation(line: 1309, column: 36, scope: !6044)
!6048 = !DILocation(line: 1309, column: 11, scope: !6044)
!6049 = !DILocation(line: 1308, column: 7, scope: !6023)
!6050 = !DILocalVariable(name: "var", scope: !6051, file: !1, line: 1311, type: !657)
!6051 = distinct !DILexicalBlock(scope: !6044, file: !1, line: 1310, column: 5)
!6052 = !DILocation(line: 1311, column: 12, scope: !6051)
!6053 = !DILocation(line: 1311, column: 34, scope: !6051)
!6054 = !DILocation(line: 1311, column: 18, scope: !6051)
!6055 = !DILocalVariable(name: "stmts", scope: !6051, file: !1, line: 1312, type: !977)
!6056 = !DILocation(line: 1312, column: 18, scope: !6051)
!6057 = !DILocation(line: 1314, column: 14, scope: !6051)
!6058 = !DILocation(line: 1314, column: 12, scope: !6051)
!6059 = !DILocation(line: 1315, column: 36, scope: !6051)
!6060 = !DILocation(line: 1315, column: 14, scope: !6051)
!6061 = !DILocation(line: 1315, column: 12, scope: !6051)
!6062 = !DILocation(line: 1316, column: 41, scope: !6051)
!6063 = !DILocation(line: 1316, column: 44, scope: !6051)
!6064 = !DILocation(line: 1316, column: 7, scope: !6051)
!6065 = !DILocation(line: 1317, column: 5, scope: !6051)
!6066 = !DILocation(line: 1319, column: 10, scope: !6023)
!6067 = !DILocation(line: 1319, column: 3, scope: !6023)
!6068 = distinct !DISubprogram(name: "single_succ_p", scope: !341, file: !341, line: 626, type: !6069, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6069 = !DISubroutineType(types: !6070)
!6070 = !{!777, !3926}
!6071 = !DILocalVariable(name: "bb", arg: 1, scope: !6068, file: !341, line: 626, type: !3926)
!6072 = !DILocation(line: 626, column: 34, scope: !6068)
!6073 = !DILocation(line: 628, column: 10, scope: !6068)
!6074 = !DILocation(line: 628, column: 33, scope: !6068)
!6075 = !DILocation(line: 628, column: 3, scope: !6068)
!6076 = distinct !DISubprogram(name: "gimple_vop", scope: !3379, file: !3379, line: 49, type: !6077, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6077 = !DISubroutineType(types: !6078)
!6078 = !{!657, !6079}
!6079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6080, size: 64)
!6080 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1428)
!6081 = !DILocalVariable(name: "fun", arg: 1, scope: !6076, file: !3379, line: 49, type: !6079)
!6082 = !DILocation(line: 49, column: 36, scope: !6076)
!6083 = !DILocation(line: 51, column: 3, scope: !6076)
!6084 = !DILocation(line: 52, column: 10, scope: !6076)
!6085 = !DILocation(line: 52, column: 15, scope: !6076)
!6086 = !DILocation(line: 52, column: 26, scope: !6076)
!6087 = !DILocation(line: 52, column: 3, scope: !6076)
!6088 = distinct !DISubprogram(name: "op_iter_init_def", scope: !3379, file: !3379, line: 780, type: !6089, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6089 = !DISubroutineType(types: !6090)
!6090 = !{!2092, !4972, !987, !754}
!6091 = !DILocalVariable(name: "ptr", arg: 1, scope: !6088, file: !3379, line: 780, type: !4972)
!6092 = !DILocation(line: 780, column: 32, scope: !6088)
!6093 = !DILocalVariable(name: "stmt", arg: 2, scope: !6088, file: !3379, line: 780, type: !987)
!6094 = !DILocation(line: 780, column: 44, scope: !6088)
!6095 = !DILocalVariable(name: "flags", arg: 3, scope: !6088, file: !3379, line: 780, type: !754)
!6096 = !DILocation(line: 780, column: 54, scope: !6088)
!6097 = !DILocation(line: 782, column: 3, scope: !6088)
!6098 = !DILocation(line: 784, column: 17, scope: !6088)
!6099 = !DILocation(line: 784, column: 22, scope: !6088)
!6100 = !DILocation(line: 784, column: 28, scope: !6088)
!6101 = !DILocation(line: 784, column: 3, scope: !6088)
!6102 = !DILocation(line: 785, column: 3, scope: !6088)
!6103 = !DILocation(line: 785, column: 8, scope: !6088)
!6104 = !DILocation(line: 785, column: 18, scope: !6088)
!6105 = !DILocation(line: 786, column: 28, scope: !6088)
!6106 = !DILocation(line: 786, column: 10, scope: !6088)
!6107 = !DILocation(line: 786, column: 3, scope: !6088)
!6108 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !3379, file: !3379, line: 434, type: !6109, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6109 = !DISubroutineType(types: !6110)
!6110 = !{!657, !2092}
!6111 = !DILocalVariable(name: "def", arg: 1, scope: !6108, file: !3379, line: 434, type: !2092)
!6112 = !DILocation(line: 434, column: 33, scope: !6108)
!6113 = !DILocation(line: 436, column: 11, scope: !6108)
!6114 = !DILocation(line: 436, column: 10, scope: !6108)
!6115 = !DILocation(line: 436, column: 3, scope: !6108)
!6116 = distinct !DISubprogram(name: "op_iter_next_def", scope: !3379, file: !3379, line: 681, type: !6117, scopeLine: 682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6117 = !DISubroutineType(types: !6118)
!6118 = !{!2092, !4972}
!6119 = !DILocalVariable(name: "ptr", arg: 1, scope: !6116, file: !3379, line: 681, type: !4972)
!6120 = !DILocation(line: 681, column: 32, scope: !6116)
!6121 = !DILocalVariable(name: "def_p", scope: !6116, file: !3379, line: 683, type: !2092)
!6122 = !DILocation(line: 683, column: 17, scope: !6116)
!6123 = !DILocation(line: 687, column: 7, scope: !6124)
!6124 = distinct !DILexicalBlock(scope: !6116, file: !3379, line: 687, column: 7)
!6125 = !DILocation(line: 687, column: 12, scope: !6124)
!6126 = !DILocation(line: 687, column: 7, scope: !6116)
!6127 = !DILocation(line: 689, column: 15, scope: !6128)
!6128 = distinct !DILexicalBlock(scope: !6124, file: !3379, line: 688, column: 5)
!6129 = !DILocation(line: 689, column: 13, scope: !6128)
!6130 = !DILocation(line: 690, column: 19, scope: !6128)
!6131 = !DILocation(line: 690, column: 24, scope: !6128)
!6132 = !DILocation(line: 690, column: 30, scope: !6128)
!6133 = !DILocation(line: 690, column: 7, scope: !6128)
!6134 = !DILocation(line: 690, column: 12, scope: !6128)
!6135 = !DILocation(line: 690, column: 17, scope: !6128)
!6136 = !DILocation(line: 691, column: 14, scope: !6128)
!6137 = !DILocation(line: 691, column: 7, scope: !6128)
!6138 = !DILocation(line: 693, column: 3, scope: !6116)
!6139 = !DILocation(line: 693, column: 8, scope: !6116)
!6140 = !DILocation(line: 693, column: 13, scope: !6116)
!6141 = !DILocation(line: 694, column: 3, scope: !6116)
!6142 = !DILocation(line: 695, column: 1, scope: !6116)
!6143 = distinct !DISubprogram(name: "gsi_after_labels", scope: !528, file: !528, line: 4510, type: !4499, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6144 = !DILocalVariable(name: "bb", arg: 1, scope: !6143, file: !528, line: 4510, type: !1439)
!6145 = !DILocation(line: 4510, column: 31, scope: !6143)
!6146 = !DILocalVariable(name: "gsi", scope: !6143, file: !528, line: 4512, type: !3127)
!6147 = !DILocation(line: 4512, column: 24, scope: !6143)
!6148 = !DILocation(line: 4512, column: 44, scope: !6143)
!6149 = !DILocation(line: 4512, column: 30, scope: !6143)
!6150 = !DILocation(line: 4514, column: 3, scope: !6143)
!6151 = !DILocation(line: 4514, column: 11, scope: !6143)
!6152 = !DILocation(line: 4514, column: 27, scope: !6143)
!6153 = !DILocation(line: 4514, column: 43, scope: !6143)
!6154 = !DILocation(line: 4514, column: 30, scope: !6143)
!6155 = !DILocation(line: 4514, column: 59, scope: !6143)
!6156 = !DILocation(line: 0, scope: !6143)
!6157 = !DILocation(line: 4515, column: 5, scope: !6143)
!6158 = distinct !{!6158, !6150, !6159}
!6159 = !DILocation(line: 4515, column: 19, scope: !6143)
!6160 = !DILocation(line: 4517, column: 3, scope: !6143)
!6161 = distinct !DISubprogram(name: "expand_scalar_variables_stmt", scope: !1, file: !1, line: 973, type: !6162, scopeLine: 975, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6162 = !DISubroutineType(types: !6163)
!6163 = !{null, !987, !1439, !2045, !1471, !3468}
!6164 = !DILocalVariable(name: "stmt", arg: 1, scope: !6161, file: !1, line: 973, type: !987)
!6165 = !DILocation(line: 973, column: 38, scope: !6161)
!6166 = !DILocalVariable(name: "bb", arg: 2, scope: !6161, file: !1, line: 973, type: !1439)
!6167 = !DILocation(line: 973, column: 56, scope: !6161)
!6168 = !DILocalVariable(name: "region", arg: 3, scope: !6161, file: !1, line: 973, type: !2045)
!6169 = !DILocation(line: 973, column: 65, scope: !6161)
!6170 = !DILocalVariable(name: "map", arg: 4, scope: !6161, file: !1, line: 974, type: !1471)
!6171 = !DILocation(line: 974, column: 17, scope: !6161)
!6172 = !DILocalVariable(name: "gsi", arg: 5, scope: !6161, file: !1, line: 974, type: !3468)
!6173 = !DILocation(line: 974, column: 44, scope: !6161)
!6174 = !DILocalVariable(name: "iter", scope: !6161, file: !1, line: 976, type: !3961)
!6175 = !DILocation(line: 976, column: 15, scope: !6161)
!6176 = !DILocalVariable(name: "use_p", scope: !6161, file: !1, line: 977, type: !2050)
!6177 = !DILocation(line: 977, column: 17, scope: !6161)
!6178 = !DILocation(line: 979, column: 3, scope: !6179)
!6179 = distinct !DILexicalBlock(scope: !6161, file: !1, line: 979, column: 3)
!6180 = !DILocation(line: 979, column: 3, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 979, column: 3)
!6182 = !DILocalVariable(name: "use", scope: !6183, file: !1, line: 981, type: !657)
!6183 = distinct !DILexicalBlock(scope: !6181, file: !1, line: 980, column: 5)
!6184 = !DILocation(line: 981, column: 12, scope: !6183)
!6185 = !DILocation(line: 981, column: 18, scope: !6183)
!6186 = !DILocalVariable(name: "type", scope: !6183, file: !1, line: 982, type: !657)
!6187 = !DILocation(line: 982, column: 12, scope: !6183)
!6188 = !DILocation(line: 982, column: 19, scope: !6183)
!6189 = !DILocalVariable(name: "code", scope: !6183, file: !1, line: 983, type: !132)
!6190 = !DILocation(line: 983, column: 22, scope: !6183)
!6191 = !DILocation(line: 983, column: 29, scope: !6183)
!6192 = !DILocalVariable(name: "use_expr", scope: !6183, file: !1, line: 984, type: !657)
!6193 = !DILocation(line: 984, column: 12, scope: !6183)
!6194 = !DILocation(line: 986, column: 27, scope: !6195)
!6195 = distinct !DILexicalBlock(scope: !6183, file: !1, line: 986, column: 11)
!6196 = !DILocation(line: 986, column: 12, scope: !6195)
!6197 = !DILocation(line: 986, column: 11, scope: !6183)
!6198 = !DILocation(line: 987, column: 2, scope: !6195)
!6199 = !DILocation(line: 990, column: 30, scope: !6183)
!6200 = !DILocation(line: 990, column: 35, scope: !6183)
!6201 = !DILocation(line: 990, column: 18, scope: !6183)
!6202 = !DILocation(line: 990, column: 16, scope: !6183)
!6203 = !DILocation(line: 991, column: 11, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6183, file: !1, line: 991, column: 11)
!6205 = !DILocation(line: 991, column: 23, scope: !6204)
!6206 = !DILocation(line: 991, column: 20, scope: !6204)
!6207 = !DILocation(line: 991, column: 11, scope: !6183)
!6208 = !DILocation(line: 992, column: 2, scope: !6204)
!6209 = !DILocation(line: 994, column: 48, scope: !6183)
!6210 = !DILocation(line: 994, column: 54, scope: !6183)
!6211 = !DILocation(line: 994, column: 59, scope: !6183)
!6212 = !DILocation(line: 994, column: 71, scope: !6183)
!6213 = !DILocation(line: 995, column: 13, scope: !6183)
!6214 = !DILocation(line: 995, column: 21, scope: !6183)
!6215 = !DILocation(line: 995, column: 26, scope: !6183)
!6216 = !DILocation(line: 994, column: 18, scope: !6183)
!6217 = !DILocation(line: 994, column: 16, scope: !6183)
!6218 = !DILocation(line: 996, column: 18, scope: !6183)
!6219 = !DILocation(line: 996, column: 16, scope: !6183)
!6220 = !DILocation(line: 998, column: 11, scope: !6221)
!6221 = distinct !DILexicalBlock(scope: !6183, file: !1, line: 998, column: 11)
!6222 = !DILocation(line: 998, column: 23, scope: !6221)
!6223 = !DILocation(line: 998, column: 20, scope: !6221)
!6224 = !DILocation(line: 998, column: 11, scope: !6183)
!6225 = !DILocation(line: 999, column: 2, scope: !6221)
!6226 = !DILocation(line: 1001, column: 28, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !6183, file: !1, line: 1001, column: 11)
!6228 = !DILocation(line: 1001, column: 11, scope: !6227)
!6229 = !DILocation(line: 1001, column: 11, scope: !6183)
!6230 = !DILocation(line: 1003, column: 29, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6232, file: !1, line: 1003, column: 8)
!6232 = distinct !DILexicalBlock(scope: !6227, file: !1, line: 1002, column: 2)
!6233 = !DILocation(line: 1003, column: 8, scope: !6231)
!6234 = !DILocation(line: 1003, column: 8, scope: !6232)
!6235 = !DILocation(line: 1004, column: 37, scope: !6231)
!6236 = !DILocation(line: 1004, column: 6, scope: !6231)
!6237 = !DILocation(line: 1006, column: 6, scope: !6231)
!6238 = !DILocation(line: 1008, column: 4, scope: !6232)
!6239 = !DILocation(line: 1011, column: 11, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6183, file: !1, line: 1011, column: 11)
!6241 = !DILocation(line: 1011, column: 32, scope: !6240)
!6242 = !DILocation(line: 1011, column: 11, scope: !6183)
!6243 = !DILocalVariable(name: "var", scope: !6244, file: !1, line: 1013, type: !657)
!6244 = distinct !DILexicalBlock(scope: !6240, file: !1, line: 1012, column: 2)
!6245 = !DILocation(line: 1013, column: 9, scope: !6244)
!6246 = !DILocation(line: 1013, column: 31, scope: !6244)
!6247 = !DILocation(line: 1013, column: 15, scope: !6244)
!6248 = !DILocation(line: 1015, column: 15, scope: !6244)
!6249 = !DILocation(line: 1015, column: 13, scope: !6244)
!6250 = !DILocation(line: 1016, column: 41, scope: !6244)
!6251 = !DILocation(line: 1016, column: 46, scope: !6244)
!6252 = !DILocation(line: 1016, column: 15, scope: !6244)
!6253 = !DILocation(line: 1016, column: 13, scope: !6244)
!6254 = !DILocation(line: 1018, column: 2, scope: !6244)
!6255 = !DILocation(line: 1020, column: 20, scope: !6183)
!6256 = !DILocation(line: 1020, column: 27, scope: !6183)
!6257 = !DILocation(line: 1020, column: 7, scope: !6183)
!6258 = !DILocation(line: 1021, column: 5, scope: !6183)
!6259 = distinct !{!6259, !6178, !6260}
!6260 = !DILocation(line: 1021, column: 5, scope: !6179)
!6261 = !DILocation(line: 1023, column: 16, scope: !6161)
!6262 = !DILocation(line: 1023, column: 3, scope: !6161)
!6263 = !DILocation(line: 1024, column: 1, scope: !6161)
!6264 = distinct !DISubprogram(name: "expand_scalar_variables_expr", scope: !1, file: !1, line: 848, type: !6265, scopeLine: 851, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6265 = !DISubroutineType(types: !6266)
!6266 = !{!657, !657, !657, !132, !657, !1439, !2045, !1471, !3468}
!6267 = !DILocalVariable(name: "type", arg: 1, scope: !6264, file: !1, line: 848, type: !657)
!6268 = !DILocation(line: 848, column: 36, scope: !6264)
!6269 = !DILocalVariable(name: "op0", arg: 2, scope: !6264, file: !1, line: 848, type: !657)
!6270 = !DILocation(line: 848, column: 47, scope: !6264)
!6271 = !DILocalVariable(name: "code", arg: 3, scope: !6264, file: !1, line: 848, type: !132)
!6272 = !DILocation(line: 848, column: 67, scope: !6264)
!6273 = !DILocalVariable(name: "op1", arg: 4, scope: !6264, file: !1, line: 849, type: !657)
!6274 = !DILocation(line: 849, column: 15, scope: !6264)
!6275 = !DILocalVariable(name: "bb", arg: 5, scope: !6264, file: !1, line: 849, type: !1439)
!6276 = !DILocation(line: 849, column: 32, scope: !6264)
!6277 = !DILocalVariable(name: "region", arg: 6, scope: !6264, file: !1, line: 849, type: !2045)
!6278 = !DILocation(line: 849, column: 41, scope: !6264)
!6279 = !DILocalVariable(name: "map", arg: 7, scope: !6264, file: !1, line: 850, type: !1471)
!6280 = !DILocation(line: 850, column: 17, scope: !6264)
!6281 = !DILocalVariable(name: "gsi", arg: 8, scope: !6264, file: !1, line: 850, type: !3468)
!6282 = !DILocation(line: 850, column: 44, scope: !6264)
!6283 = !DILocation(line: 852, column: 7, scope: !6284)
!6284 = distinct !DILexicalBlock(scope: !6264, file: !1, line: 852, column: 7)
!6285 = !DILocation(line: 852, column: 30, scope: !6284)
!6286 = !DILocation(line: 853, column: 7, scope: !6284)
!6287 = !DILocation(line: 853, column: 10, scope: !6284)
!6288 = !DILocation(line: 853, column: 33, scope: !6284)
!6289 = !DILocation(line: 852, column: 7, scope: !6264)
!6290 = !DILocation(line: 854, column: 12, scope: !6284)
!6291 = !DILocation(line: 854, column: 5, scope: !6284)
!6292 = !DILocation(line: 858, column: 7, scope: !6293)
!6293 = distinct !DILexicalBlock(scope: !6264, file: !1, line: 858, column: 7)
!6294 = !DILocation(line: 858, column: 30, scope: !6293)
!6295 = !DILocation(line: 858, column: 7, scope: !6264)
!6296 = !DILocation(line: 860, column: 15, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6293, file: !1, line: 859, column: 5)
!6298 = !DILocation(line: 860, column: 7, scope: !6297)
!6299 = !DILocalVariable(name: "op", scope: !6300, file: !1, line: 865, type: !657)
!6300 = distinct !DILexicalBlock(scope: !6301, file: !1, line: 864, column: 4)
!6301 = distinct !DILexicalBlock(scope: !6297, file: !1, line: 861, column: 2)
!6302 = !DILocation(line: 865, column: 11, scope: !6300)
!6303 = !DILocation(line: 865, column: 16, scope: !6300)
!6304 = !DILocalVariable(name: "res", scope: !6300, file: !1, line: 866, type: !657)
!6305 = !DILocation(line: 866, column: 11, scope: !6300)
!6306 = !DILocation(line: 867, column: 9, scope: !6300)
!6307 = !DILocation(line: 867, column: 15, scope: !6300)
!6308 = !DILocation(line: 867, column: 19, scope: !6300)
!6309 = !DILocation(line: 867, column: 41, scope: !6300)
!6310 = !DILocation(line: 867, column: 45, scope: !6300)
!6311 = !DILocation(line: 867, column: 53, scope: !6300)
!6312 = !DILocation(line: 867, column: 58, scope: !6300)
!6313 = !DILocation(line: 866, column: 17, scope: !6300)
!6314 = !DILocation(line: 868, column: 13, scope: !6300)
!6315 = !DILocation(line: 868, column: 6, scope: !6300)
!6316 = !DILocalVariable(name: "old_name", scope: !6317, file: !1, line: 873, type: !657)
!6317 = distinct !DILexicalBlock(scope: !6301, file: !1, line: 872, column: 4)
!6318 = !DILocation(line: 873, column: 11, scope: !6317)
!6319 = !DILocation(line: 873, column: 22, scope: !6317)
!6320 = !DILocalVariable(name: "expr", scope: !6317, file: !1, line: 874, type: !657)
!6321 = !DILocation(line: 874, column: 11, scope: !6317)
!6322 = !DILocation(line: 875, column: 9, scope: !6317)
!6323 = !DILocation(line: 875, column: 15, scope: !6317)
!6324 = !DILocation(line: 875, column: 25, scope: !6317)
!6325 = !DILocation(line: 875, column: 29, scope: !6317)
!6326 = !DILocation(line: 875, column: 37, scope: !6317)
!6327 = !DILocation(line: 875, column: 42, scope: !6317)
!6328 = !DILocation(line: 874, column: 18, scope: !6317)
!6329 = !DILocation(line: 877, column: 10, scope: !6330)
!6330 = distinct !DILexicalBlock(scope: !6317, file: !1, line: 877, column: 10)
!6331 = !DILocation(line: 877, column: 27, scope: !6330)
!6332 = !DILocation(line: 878, column: 3, scope: !6330)
!6333 = !DILocation(line: 878, column: 21, scope: !6330)
!6334 = !DILocation(line: 878, column: 6, scope: !6330)
!6335 = !DILocation(line: 877, column: 10, scope: !6317)
!6336 = !DILocalVariable(name: "type", scope: !6337, file: !1, line: 880, type: !657)
!6337 = distinct !DILexicalBlock(scope: !6330, file: !1, line: 879, column: 8)
!6338 = !DILocation(line: 880, column: 8, scope: !6337)
!6339 = !DILocation(line: 880, column: 15, scope: !6337)
!6340 = !DILocalVariable(name: "var", scope: !6337, file: !1, line: 881, type: !657)
!6341 = !DILocation(line: 881, column: 8, scope: !6337)
!6342 = !DILocation(line: 881, column: 30, scope: !6337)
!6343 = !DILocation(line: 881, column: 14, scope: !6337)
!6344 = !DILocation(line: 883, column: 10, scope: !6337)
!6345 = !DILocation(line: 883, column: 8, scope: !6337)
!6346 = !DILocation(line: 884, column: 36, scope: !6337)
!6347 = !DILocation(line: 884, column: 41, scope: !6337)
!6348 = !DILocation(line: 884, column: 10, scope: !6337)
!6349 = !DILocation(line: 884, column: 8, scope: !6337)
!6350 = !DILocation(line: 886, column: 8, scope: !6337)
!6351 = !DILocation(line: 888, column: 13, scope: !6317)
!6352 = !DILocation(line: 888, column: 6, scope: !6317)
!6353 = !DILocalVariable(name: "op00", scope: !6354, file: !1, line: 893, type: !657)
!6354 = distinct !DILexicalBlock(scope: !6301, file: !1, line: 892, column: 4)
!6355 = !DILocation(line: 893, column: 11, scope: !6354)
!6356 = !DILocation(line: 893, column: 18, scope: !6354)
!6357 = !DILocalVariable(name: "op01", scope: !6354, file: !1, line: 894, type: !657)
!6358 = !DILocation(line: 894, column: 11, scope: !6354)
!6359 = !DILocation(line: 894, column: 18, scope: !6354)
!6360 = !DILocalVariable(name: "op02", scope: !6354, file: !1, line: 895, type: !657)
!6361 = !DILocation(line: 895, column: 11, scope: !6354)
!6362 = !DILocation(line: 895, column: 18, scope: !6354)
!6363 = !DILocalVariable(name: "op03", scope: !6354, file: !1, line: 896, type: !657)
!6364 = !DILocation(line: 896, column: 11, scope: !6354)
!6365 = !DILocation(line: 896, column: 18, scope: !6354)
!6366 = !DILocalVariable(name: "base", scope: !6354, file: !1, line: 897, type: !657)
!6367 = !DILocation(line: 897, column: 11, scope: !6354)
!6368 = !DILocation(line: 898, column: 9, scope: !6354)
!6369 = !DILocation(line: 898, column: 27, scope: !6354)
!6370 = !DILocation(line: 898, column: 33, scope: !6354)
!6371 = !DILocation(line: 898, column: 57, scope: !6354)
!6372 = !DILocation(line: 898, column: 61, scope: !6354)
!6373 = !DILocation(line: 899, column: 9, scope: !6354)
!6374 = !DILocation(line: 899, column: 14, scope: !6354)
!6375 = !DILocation(line: 897, column: 18, scope: !6354)
!6376 = !DILocalVariable(name: "subscript", scope: !6354, file: !1, line: 900, type: !657)
!6377 = !DILocation(line: 900, column: 11, scope: !6354)
!6378 = !DILocation(line: 901, column: 9, scope: !6354)
!6379 = !DILocation(line: 901, column: 27, scope: !6354)
!6380 = !DILocation(line: 901, column: 33, scope: !6354)
!6381 = !DILocation(line: 901, column: 57, scope: !6354)
!6382 = !DILocation(line: 901, column: 61, scope: !6354)
!6383 = !DILocation(line: 902, column: 9, scope: !6354)
!6384 = !DILocation(line: 902, column: 14, scope: !6354)
!6385 = !DILocation(line: 900, column: 23, scope: !6354)
!6386 = !DILocation(line: 904, column: 13, scope: !6354)
!6387 = !DILocation(line: 904, column: 6, scope: !6354)
!6388 = !DILocation(line: 908, column: 11, scope: !6301)
!6389 = !DILocation(line: 908, column: 4, scope: !6301)
!6390 = !DILocation(line: 912, column: 4, scope: !6301)
!6391 = !DILocation(line: 913, column: 2, scope: !6301)
!6392 = !DILocation(line: 914, column: 5, scope: !6297)
!6393 = !DILocation(line: 916, column: 7, scope: !6394)
!6394 = distinct !DILexicalBlock(scope: !6264, file: !1, line: 916, column: 7)
!6395 = !DILocation(line: 916, column: 30, scope: !6394)
!6396 = !DILocation(line: 916, column: 7, scope: !6264)
!6397 = !DILocalVariable(name: "op0_type", scope: !6398, file: !1, line: 918, type: !657)
!6398 = distinct !DILexicalBlock(scope: !6394, file: !1, line: 917, column: 5)
!6399 = !DILocation(line: 918, column: 12, scope: !6398)
!6400 = !DILocation(line: 918, column: 23, scope: !6398)
!6401 = !DILocalVariable(name: "op0_code", scope: !6398, file: !1, line: 919, type: !132)
!6402 = !DILocation(line: 919, column: 22, scope: !6398)
!6403 = !DILocation(line: 919, column: 33, scope: !6398)
!6404 = !DILocalVariable(name: "op0_expr", scope: !6398, file: !1, line: 920, type: !657)
!6405 = !DILocation(line: 920, column: 12, scope: !6398)
!6406 = !DILocation(line: 920, column: 53, scope: !6398)
!6407 = !DILocation(line: 920, column: 63, scope: !6398)
!6408 = !DILocation(line: 920, column: 68, scope: !6398)
!6409 = !DILocation(line: 921, column: 17, scope: !6398)
!6410 = !DILocation(line: 921, column: 21, scope: !6398)
!6411 = !DILocation(line: 921, column: 29, scope: !6398)
!6412 = !DILocation(line: 921, column: 34, scope: !6398)
!6413 = !DILocation(line: 920, column: 23, scope: !6398)
!6414 = !DILocation(line: 923, column: 14, scope: !6398)
!6415 = !DILocation(line: 923, column: 7, scope: !6398)
!6416 = !DILocation(line: 926, column: 7, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6264, file: !1, line: 926, column: 7)
!6418 = !DILocation(line: 926, column: 30, scope: !6417)
!6419 = !DILocation(line: 927, column: 7, scope: !6417)
!6420 = !DILocation(line: 927, column: 10, scope: !6417)
!6421 = !DILocation(line: 927, column: 33, scope: !6417)
!6422 = !DILocation(line: 926, column: 7, scope: !6264)
!6423 = !DILocalVariable(name: "op0_type", scope: !6424, file: !1, line: 929, type: !657)
!6424 = distinct !DILexicalBlock(scope: !6417, file: !1, line: 928, column: 5)
!6425 = !DILocation(line: 929, column: 12, scope: !6424)
!6426 = !DILocation(line: 929, column: 23, scope: !6424)
!6427 = !DILocalVariable(name: "op0_code", scope: !6424, file: !1, line: 930, type: !132)
!6428 = !DILocation(line: 930, column: 22, scope: !6424)
!6429 = !DILocation(line: 930, column: 33, scope: !6424)
!6430 = !DILocalVariable(name: "op0_expr", scope: !6424, file: !1, line: 931, type: !657)
!6431 = !DILocation(line: 931, column: 12, scope: !6424)
!6432 = !DILocation(line: 931, column: 53, scope: !6424)
!6433 = !DILocation(line: 931, column: 63, scope: !6424)
!6434 = !DILocation(line: 931, column: 68, scope: !6424)
!6435 = !DILocation(line: 932, column: 17, scope: !6424)
!6436 = !DILocation(line: 932, column: 21, scope: !6424)
!6437 = !DILocation(line: 932, column: 29, scope: !6424)
!6438 = !DILocation(line: 932, column: 34, scope: !6424)
!6439 = !DILocation(line: 931, column: 23, scope: !6424)
!6440 = !DILocalVariable(name: "op1_type", scope: !6424, file: !1, line: 933, type: !657)
!6441 = !DILocation(line: 933, column: 12, scope: !6424)
!6442 = !DILocation(line: 933, column: 23, scope: !6424)
!6443 = !DILocalVariable(name: "op1_code", scope: !6424, file: !1, line: 934, type: !132)
!6444 = !DILocation(line: 934, column: 22, scope: !6424)
!6445 = !DILocation(line: 934, column: 33, scope: !6424)
!6446 = !DILocalVariable(name: "op1_expr", scope: !6424, file: !1, line: 935, type: !657)
!6447 = !DILocation(line: 935, column: 12, scope: !6424)
!6448 = !DILocation(line: 935, column: 53, scope: !6424)
!6449 = !DILocation(line: 935, column: 63, scope: !6424)
!6450 = !DILocation(line: 935, column: 68, scope: !6424)
!6451 = !DILocation(line: 936, column: 17, scope: !6424)
!6452 = !DILocation(line: 936, column: 21, scope: !6424)
!6453 = !DILocation(line: 936, column: 29, scope: !6424)
!6454 = !DILocation(line: 936, column: 34, scope: !6424)
!6455 = !DILocation(line: 935, column: 23, scope: !6424)
!6456 = !DILocation(line: 938, column: 14, scope: !6424)
!6457 = !DILocation(line: 938, column: 7, scope: !6424)
!6458 = !DILocation(line: 941, column: 7, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6264, file: !1, line: 941, column: 7)
!6460 = !DILocation(line: 941, column: 12, scope: !6459)
!6461 = !DILocation(line: 941, column: 7, scope: !6264)
!6462 = !DILocation(line: 942, column: 46, scope: !6459)
!6463 = !DILocation(line: 942, column: 52, scope: !6459)
!6464 = !DILocation(line: 942, column: 57, scope: !6459)
!6465 = !DILocation(line: 942, column: 61, scope: !6459)
!6466 = !DILocation(line: 942, column: 69, scope: !6459)
!6467 = !DILocation(line: 942, column: 74, scope: !6459)
!6468 = !DILocation(line: 942, column: 12, scope: !6459)
!6469 = !DILocation(line: 942, column: 5, scope: !6459)
!6470 = !DILocation(line: 944, column: 7, scope: !6471)
!6471 = distinct !DILexicalBlock(scope: !6264, file: !1, line: 944, column: 7)
!6472 = !DILocation(line: 944, column: 12, scope: !6471)
!6473 = !DILocation(line: 944, column: 7, scope: !6264)
!6474 = !DILocalVariable(name: "op00", scope: !6475, file: !1, line: 946, type: !657)
!6475 = distinct !DILexicalBlock(scope: !6471, file: !1, line: 945, column: 5)
!6476 = !DILocation(line: 946, column: 12, scope: !6475)
!6477 = !DILocation(line: 946, column: 19, scope: !6475)
!6478 = !DILocation(line: 948, column: 32, scope: !6479)
!6479 = distinct !DILexicalBlock(scope: !6475, file: !1, line: 948, column: 11)
!6480 = !DILocation(line: 948, column: 11, scope: !6479)
!6481 = !DILocation(line: 949, column: 4, scope: !6479)
!6482 = !DILocation(line: 949, column: 7, scope: !6479)
!6483 = !DILocation(line: 949, column: 24, scope: !6479)
!6484 = !DILocation(line: 948, column: 11, scope: !6475)
!6485 = !DILocalVariable(name: "e", scope: !6486, file: !1, line: 951, type: !657)
!6486 = distinct !DILexicalBlock(scope: !6479, file: !1, line: 950, column: 2)
!6487 = !DILocation(line: 951, column: 9, scope: !6486)
!6488 = !DILocation(line: 951, column: 43, scope: !6486)
!6489 = !DILocation(line: 951, column: 61, scope: !6486)
!6490 = !DILocation(line: 952, column: 8, scope: !6486)
!6491 = !DILocation(line: 953, column: 14, scope: !6486)
!6492 = !DILocation(line: 953, column: 18, scope: !6486)
!6493 = !DILocation(line: 953, column: 26, scope: !6486)
!6494 = !DILocation(line: 953, column: 31, scope: !6486)
!6495 = !DILocation(line: 951, column: 13, scope: !6486)
!6496 = !DILocation(line: 954, column: 11, scope: !6486)
!6497 = !DILocation(line: 954, column: 4, scope: !6486)
!6498 = !DILocation(line: 957, column: 14, scope: !6475)
!6499 = !DILocation(line: 957, column: 7, scope: !6475)
!6500 = !DILocation(line: 960, column: 3, scope: !6264)
!6501 = !DILocation(line: 961, column: 3, scope: !6264)
!6502 = !DILocation(line: 962, column: 1, scope: !6264)
!6503 = distinct !DISubprogram(name: "gimple_debug_bind_p", scope: !528, file: !528, line: 3257, type: !4961, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6504 = !DILocalVariable(name: "s", arg: 1, scope: !6503, file: !528, line: 3257, type: !3278)
!6505 = !DILocation(line: 3257, column: 35, scope: !6503)
!6506 = !DILocation(line: 3259, column: 24, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6503, file: !528, line: 3259, column: 7)
!6508 = !DILocation(line: 3259, column: 7, scope: !6507)
!6509 = !DILocation(line: 3259, column: 7, scope: !6503)
!6510 = !DILocation(line: 3260, column: 12, scope: !6507)
!6511 = !DILocation(line: 3260, column: 15, scope: !6507)
!6512 = !DILocation(line: 3260, column: 22, scope: !6507)
!6513 = !DILocation(line: 3260, column: 30, scope: !6507)
!6514 = !DILocation(line: 3260, column: 5, scope: !6507)
!6515 = !DILocation(line: 3262, column: 3, scope: !6503)
!6516 = !DILocation(line: 3263, column: 1, scope: !6503)
!6517 = distinct !DISubprogram(name: "expand_scalar_variables_ssa_name", scope: !1, file: !1, line: 782, type: !6518, scopeLine: 785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6518 = !DISubroutineType(types: !6519)
!6519 = !{!657, !657, !657, !1439, !2045, !1471, !3468}
!6520 = !DILocalVariable(name: "type", arg: 1, scope: !6517, file: !1, line: 782, type: !657)
!6521 = !DILocation(line: 782, column: 40, scope: !6517)
!6522 = !DILocalVariable(name: "op0", arg: 2, scope: !6517, file: !1, line: 782, type: !657)
!6523 = !DILocation(line: 782, column: 51, scope: !6517)
!6524 = !DILocalVariable(name: "bb", arg: 3, scope: !6517, file: !1, line: 782, type: !1439)
!6525 = !DILocation(line: 782, column: 68, scope: !6517)
!6526 = !DILocalVariable(name: "region", arg: 4, scope: !6517, file: !1, line: 783, type: !2045)
!6527 = !DILocation(line: 783, column: 12, scope: !6517)
!6528 = !DILocalVariable(name: "map", arg: 5, scope: !6517, file: !1, line: 783, type: !1471)
!6529 = !DILocation(line: 783, column: 27, scope: !6517)
!6530 = !DILocalVariable(name: "gsi", arg: 6, scope: !6517, file: !1, line: 784, type: !3468)
!6531 = !DILocation(line: 784, column: 29, scope: !6517)
!6532 = !DILocalVariable(name: "def_stmt", scope: !6517, file: !1, line: 786, type: !987)
!6533 = !DILocation(line: 786, column: 10, scope: !6517)
!6534 = !DILocalVariable(name: "new_op", scope: !6517, file: !1, line: 787, type: !657)
!6535 = !DILocation(line: 787, column: 8, scope: !6517)
!6536 = !DILocation(line: 789, column: 21, scope: !6537)
!6537 = distinct !DILexicalBlock(scope: !6517, file: !1, line: 789, column: 7)
!6538 = !DILocation(line: 789, column: 29, scope: !6537)
!6539 = !DILocation(line: 789, column: 7, scope: !6537)
!6540 = !DILocation(line: 790, column: 7, scope: !6537)
!6541 = !DILocation(line: 790, column: 17, scope: !6537)
!6542 = !DILocation(line: 790, column: 10, scope: !6537)
!6543 = !DILocation(line: 789, column: 7, scope: !6517)
!6544 = !DILocation(line: 791, column: 12, scope: !6537)
!6545 = !DILocation(line: 791, column: 5, scope: !6537)
!6546 = !DILocation(line: 793, column: 14, scope: !6517)
!6547 = !DILocation(line: 793, column: 12, scope: !6517)
!6548 = !DILocation(line: 796, column: 24, scope: !6517)
!6549 = !DILocation(line: 796, column: 29, scope: !6517)
!6550 = !DILocation(line: 796, column: 12, scope: !6517)
!6551 = !DILocation(line: 796, column: 10, scope: !6517)
!6552 = !DILocation(line: 798, column: 7, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6517, file: !1, line: 798, column: 7)
!6554 = !DILocation(line: 798, column: 17, scope: !6553)
!6555 = !DILocation(line: 798, column: 14, scope: !6553)
!6556 = !DILocation(line: 799, column: 7, scope: !6553)
!6557 = !DILocation(line: 799, column: 21, scope: !6553)
!6558 = !DILocation(line: 799, column: 10, scope: !6553)
!6559 = !DILocation(line: 799, column: 52, scope: !6553)
!6560 = !DILocation(line: 799, column: 49, scope: !6553)
!6561 = !DILocation(line: 798, column: 7, scope: !6517)
!6562 = !DILocation(line: 800, column: 12, scope: !6553)
!6563 = !DILocation(line: 800, column: 5, scope: !6553)
!6564 = !DILocation(line: 802, column: 18, scope: !6565)
!6565 = distinct !DILexicalBlock(scope: !6517, file: !1, line: 802, column: 7)
!6566 = !DILocation(line: 802, column: 7, scope: !6565)
!6567 = !DILocation(line: 802, column: 31, scope: !6565)
!6568 = !DILocation(line: 802, column: 28, scope: !6565)
!6569 = !DILocation(line: 802, column: 7, scope: !6517)
!6570 = !DILocation(line: 807, column: 37, scope: !6571)
!6571 = distinct !DILexicalBlock(scope: !6565, file: !1, line: 803, column: 5)
!6572 = !DILocation(line: 807, column: 47, scope: !6571)
!6573 = !DILocation(line: 807, column: 51, scope: !6571)
!6574 = !DILocation(line: 807, column: 59, scope: !6571)
!6575 = !DILocation(line: 807, column: 64, scope: !6571)
!6576 = !DILocation(line: 807, column: 7, scope: !6571)
!6577 = !DILocation(line: 808, column: 14, scope: !6571)
!6578 = !DILocation(line: 808, column: 7, scope: !6571)
!6579 = !DILocation(line: 812, column: 23, scope: !6580)
!6580 = distinct !DILexicalBlock(scope: !6581, file: !1, line: 812, column: 11)
!6581 = distinct !DILexicalBlock(scope: !6565, file: !1, line: 811, column: 5)
!6582 = !DILocation(line: 812, column: 12, scope: !6580)
!6583 = !DILocation(line: 813, column: 4, scope: !6580)
!6584 = !DILocation(line: 813, column: 33, scope: !6580)
!6585 = !DILocation(line: 813, column: 22, scope: !6580)
!6586 = !DILocation(line: 813, column: 44, scope: !6580)
!6587 = !DILocation(line: 813, column: 8, scope: !6580)
!6588 = !DILocation(line: 812, column: 11, scope: !6581)
!6589 = !DILocation(line: 814, column: 9, scope: !6580)
!6590 = !DILocation(line: 814, column: 2, scope: !6580)
!6591 = !DILocation(line: 816, column: 28, scope: !6581)
!6592 = !DILocation(line: 816, column: 15, scope: !6581)
!6593 = !DILocation(line: 816, column: 7, scope: !6581)
!6594 = !DILocalVariable(name: "var0", scope: !6595, file: !1, line: 820, type: !657)
!6595 = distinct !DILexicalBlock(scope: !6596, file: !1, line: 819, column: 4)
!6596 = distinct !DILexicalBlock(scope: !6581, file: !1, line: 817, column: 2)
!6597 = !DILocation(line: 820, column: 11, scope: !6595)
!6598 = !DILocation(line: 820, column: 38, scope: !6595)
!6599 = !DILocation(line: 820, column: 18, scope: !6595)
!6600 = !DILocalVariable(name: "subcode", scope: !6595, file: !1, line: 821, type: !132)
!6601 = !DILocation(line: 821, column: 21, scope: !6595)
!6602 = !DILocation(line: 821, column: 55, scope: !6595)
!6603 = !DILocation(line: 821, column: 31, scope: !6595)
!6604 = !DILocalVariable(name: "var1", scope: !6595, file: !1, line: 822, type: !657)
!6605 = !DILocation(line: 822, column: 11, scope: !6595)
!6606 = !DILocation(line: 822, column: 38, scope: !6595)
!6607 = !DILocation(line: 822, column: 18, scope: !6595)
!6608 = !DILocalVariable(name: "type", scope: !6595, file: !1, line: 823, type: !657)
!6609 = !DILocation(line: 823, column: 11, scope: !6595)
!6610 = !DILocation(line: 823, column: 36, scope: !6595)
!6611 = !DILocation(line: 823, column: 18, scope: !6595)
!6612 = !DILocation(line: 825, column: 43, scope: !6595)
!6613 = !DILocation(line: 825, column: 49, scope: !6595)
!6614 = !DILocation(line: 825, column: 55, scope: !6595)
!6615 = !DILocation(line: 825, column: 64, scope: !6595)
!6616 = !DILocation(line: 825, column: 70, scope: !6595)
!6617 = !DILocation(line: 826, column: 8, scope: !6595)
!6618 = !DILocation(line: 826, column: 16, scope: !6595)
!6619 = !DILocation(line: 826, column: 21, scope: !6595)
!6620 = !DILocation(line: 825, column: 13, scope: !6595)
!6621 = !DILocation(line: 825, column: 6, scope: !6595)
!6622 = !DILocation(line: 830, column: 41, scope: !6596)
!6623 = !DILocation(line: 830, column: 51, scope: !6596)
!6624 = !DILocation(line: 830, column: 55, scope: !6596)
!6625 = !DILocation(line: 830, column: 63, scope: !6596)
!6626 = !DILocation(line: 830, column: 68, scope: !6596)
!6627 = !DILocation(line: 830, column: 11, scope: !6596)
!6628 = !DILocation(line: 830, column: 4, scope: !6596)
!6629 = !DILocation(line: 833, column: 4, scope: !6596)
!6630 = !DILocation(line: 834, column: 11, scope: !6596)
!6631 = !DILocation(line: 834, column: 4, scope: !6596)
!6632 = !DILocation(line: 837, column: 1, scope: !6517)
!6633 = distinct !DISubprogram(name: "handled_component_p", scope: !133, file: !133, line: 4551, type: !6634, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6634 = !DISubroutineType(types: !6635)
!6635 = !{!777, !6636}
!6636 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !658, line: 59, baseType: !6637)
!6637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6638, size: 64)
!6638 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !660)
!6639 = !DILocalVariable(name: "t", arg: 1, scope: !6633, file: !133, line: 4551, type: !6636)
!6640 = !DILocation(line: 4551, column: 33, scope: !6633)
!6641 = !DILocation(line: 4553, column: 11, scope: !6633)
!6642 = !DILocation(line: 4553, column: 3, scope: !6633)
!6643 = !DILocation(line: 4562, column: 7, scope: !6644)
!6644 = distinct !DILexicalBlock(scope: !6633, file: !133, line: 4554, column: 5)
!6645 = !DILocation(line: 4565, column: 7, scope: !6644)
!6646 = !DILocation(line: 4567, column: 1, scope: !6633)
!6647 = distinct !DISubprogram(name: "is_parameter", scope: !1, file: !1, line: 711, type: !6648, scopeLine: 712, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6648 = !DISubroutineType(types: !6649)
!6649 = !{!777, !2045, !657}
!6650 = !DILocalVariable(name: "region", arg: 1, scope: !6647, file: !1, line: 711, type: !2045)
!6651 = !DILocation(line: 711, column: 20, scope: !6647)
!6652 = !DILocalVariable(name: "name", arg: 2, scope: !6647, file: !1, line: 711, type: !657)
!6653 = !DILocation(line: 711, column: 33, scope: !6647)
!6654 = !DILocalVariable(name: "i", scope: !6647, file: !1, line: 713, type: !754)
!6655 = !DILocation(line: 713, column: 7, scope: !6647)
!6656 = !DILocalVariable(name: "p", scope: !6647, file: !1, line: 714, type: !657)
!6657 = !DILocation(line: 714, column: 8, scope: !6647)
!6658 = !DILocation(line: 716, column: 10, scope: !6659)
!6659 = distinct !DILexicalBlock(scope: !6647, file: !1, line: 716, column: 3)
!6660 = !DILocation(line: 716, column: 8, scope: !6659)
!6661 = !DILocation(line: 716, column: 15, scope: !6662)
!6662 = distinct !DILexicalBlock(scope: !6659, file: !1, line: 716, column: 3)
!6663 = !DILocation(line: 716, column: 3, scope: !6659)
!6664 = !DILocation(line: 717, column: 9, scope: !6665)
!6665 = distinct !DILexicalBlock(scope: !6662, file: !1, line: 717, column: 9)
!6666 = !DILocation(line: 717, column: 14, scope: !6665)
!6667 = !DILocation(line: 717, column: 11, scope: !6665)
!6668 = !DILocation(line: 717, column: 9, scope: !6662)
!6669 = !DILocation(line: 718, column: 7, scope: !6665)
!6670 = !DILocation(line: 716, column: 64, scope: !6662)
!6671 = !DILocation(line: 716, column: 3, scope: !6662)
!6672 = distinct !{!6672, !6663, !6673}
!6673 = !DILocation(line: 718, column: 14, scope: !6659)
!6674 = !DILocation(line: 720, column: 3, scope: !6647)
!6675 = !DILocation(line: 721, column: 1, scope: !6647)
!6676 = distinct !DISubprogram(name: "is_iv", scope: !1, file: !1, line: 726, type: !6677, scopeLine: 727, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6677 = !DISubroutineType(types: !6678)
!6678 = !{!777, !657}
!6679 = !DILocalVariable(name: "name", arg: 1, scope: !6676, file: !1, line: 726, type: !657)
!6680 = !DILocation(line: 726, column: 13, scope: !6676)
!6681 = !DILocation(line: 728, column: 23, scope: !6676)
!6682 = !DILocation(line: 728, column: 10, scope: !6676)
!6683 = !DILocation(line: 728, column: 49, scope: !6676)
!6684 = !DILocation(line: 728, column: 3, scope: !6676)
!6685 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !528, file: !528, line: 1727, type: !3276, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6686 = !DILocalVariable(name: "gs", arg: 1, scope: !6685, file: !528, line: 1727, type: !3278)
!6687 = !DILocation(line: 1727, column: 34, scope: !6685)
!6688 = !DILocation(line: 1730, column: 21, scope: !6685)
!6689 = !DILocation(line: 1730, column: 10, scope: !6685)
!6690 = !DILocation(line: 1730, column: 3, scope: !6685)
!6691 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !528, file: !528, line: 1815, type: !6692, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6692 = !DISubroutineType(types: !6693)
!6693 = !{!132, !3278}
!6694 = !DILocalVariable(name: "gs", arg: 1, scope: !6691, file: !528, line: 1815, type: !3278)
!6695 = !DILocation(line: 1815, column: 38, scope: !6691)
!6696 = !DILocalVariable(name: "code", scope: !6691, file: !528, line: 1817, type: !132)
!6697 = !DILocation(line: 1817, column: 18, scope: !6691)
!6698 = !DILocation(line: 1820, column: 28, scope: !6691)
!6699 = !DILocation(line: 1820, column: 10, scope: !6691)
!6700 = !DILocation(line: 1820, column: 8, scope: !6691)
!6701 = !DILocation(line: 1821, column: 29, scope: !6702)
!6702 = distinct !DILexicalBlock(scope: !6691, file: !528, line: 1821, column: 7)
!6703 = !DILocation(line: 1821, column: 7, scope: !6702)
!6704 = !DILocation(line: 1821, column: 35, scope: !6702)
!6705 = !DILocation(line: 1821, column: 7, scope: !6691)
!6706 = !DILocation(line: 1822, column: 12, scope: !6702)
!6707 = !DILocation(line: 1822, column: 10, scope: !6702)
!6708 = !DILocation(line: 1822, column: 5, scope: !6702)
!6709 = !DILocation(line: 1824, column: 10, scope: !6691)
!6710 = !DILocation(line: 1824, column: 3, scope: !6691)
!6711 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !528, file: !528, line: 1759, type: !3276, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6712 = !DILocalVariable(name: "gs", arg: 1, scope: !6711, file: !528, line: 1759, type: !3278)
!6713 = !DILocation(line: 1759, column: 34, scope: !6711)
!6714 = !DILocation(line: 1763, column: 23, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6711, file: !528, line: 1763, column: 7)
!6716 = !DILocation(line: 1763, column: 7, scope: !6715)
!6717 = !DILocation(line: 1763, column: 27, scope: !6715)
!6718 = !DILocation(line: 1763, column: 7, scope: !6711)
!6719 = !DILocation(line: 1764, column: 23, scope: !6715)
!6720 = !DILocation(line: 1764, column: 12, scope: !6715)
!6721 = !DILocation(line: 1764, column: 5, scope: !6715)
!6722 = !DILocation(line: 1766, column: 5, scope: !6715)
!6723 = !DILocation(line: 1767, column: 1, scope: !6711)
!6724 = distinct !DISubprogram(name: "gimple_expr_type", scope: !528, file: !528, line: 4366, type: !3276, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6725 = !DILocalVariable(name: "stmt", arg: 1, scope: !6724, file: !528, line: 4366, type: !3278)
!6726 = !DILocation(line: 4366, column: 32, scope: !6724)
!6727 = !DILocalVariable(name: "code", scope: !6724, file: !528, line: 4368, type: !527)
!6728 = !DILocation(line: 4368, column: 20, scope: !6724)
!6729 = !DILocation(line: 4368, column: 40, scope: !6724)
!6730 = !DILocation(line: 4368, column: 27, scope: !6724)
!6731 = !DILocation(line: 4370, column: 7, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6724, file: !528, line: 4370, column: 7)
!6733 = !DILocation(line: 4370, column: 12, scope: !6732)
!6734 = !DILocation(line: 4370, column: 29, scope: !6732)
!6735 = !DILocation(line: 4370, column: 32, scope: !6732)
!6736 = !DILocation(line: 4370, column: 37, scope: !6732)
!6737 = !DILocation(line: 4370, column: 7, scope: !6724)
!6738 = !DILocalVariable(name: "type", scope: !6739, file: !528, line: 4372, type: !657)
!6739 = distinct !DILexicalBlock(scope: !6732, file: !528, line: 4371, column: 5)
!6740 = !DILocation(line: 4372, column: 12, scope: !6739)
!6741 = !DILocation(line: 4377, column: 11, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6739, file: !528, line: 4377, column: 11)
!6743 = !DILocation(line: 4377, column: 16, scope: !6742)
!6744 = !DILocation(line: 4377, column: 11, scope: !6739)
!6745 = !DILocation(line: 4378, column: 34, scope: !6742)
!6746 = !DILocation(line: 4378, column: 9, scope: !6742)
!6747 = !DILocation(line: 4378, column: 7, scope: !6742)
!6748 = !DILocation(line: 4378, column: 2, scope: !6742)
!6749 = !DILocation(line: 4380, column: 34, scope: !6742)
!6750 = !DILocation(line: 4380, column: 10, scope: !6742)
!6751 = !DILocation(line: 4380, column: 2, scope: !6742)
!6752 = !DILocation(line: 4383, column: 13, scope: !6753)
!6753 = distinct !DILexicalBlock(scope: !6742, file: !528, line: 4381, column: 4)
!6754 = !DILocation(line: 4383, column: 11, scope: !6753)
!6755 = !DILocation(line: 4384, column: 6, scope: !6753)
!6756 = !DILocation(line: 4388, column: 13, scope: !6753)
!6757 = !DILocation(line: 4388, column: 11, scope: !6753)
!6758 = !DILocation(line: 4389, column: 6, scope: !6753)
!6759 = !DILocation(line: 4391, column: 14, scope: !6739)
!6760 = !DILocation(line: 4391, column: 7, scope: !6739)
!6761 = !DILocation(line: 4393, column: 12, scope: !6762)
!6762 = distinct !DILexicalBlock(scope: !6732, file: !528, line: 4393, column: 12)
!6763 = !DILocation(line: 4393, column: 17, scope: !6762)
!6764 = !DILocation(line: 4393, column: 12, scope: !6732)
!6765 = !DILocation(line: 4394, column: 12, scope: !6762)
!6766 = !DILocation(line: 4394, column: 5, scope: !6762)
!6767 = !DILocation(line: 4396, column: 12, scope: !6762)
!6768 = !DILocation(line: 4396, column: 5, scope: !6762)
!6769 = !DILocation(line: 4397, column: 1, scope: !6724)
!6770 = distinct !DISubprogram(name: "expand_scalar_variables_call", scope: !1, file: !1, line: 738, type: !6771, scopeLine: 740, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6771 = !DISubroutineType(types: !6772)
!6772 = !{!657, !987, !1439, !2045, !1471, !3468}
!6773 = !DILocalVariable(name: "stmt", arg: 1, scope: !6770, file: !1, line: 738, type: !987)
!6774 = !DILocation(line: 738, column: 38, scope: !6770)
!6775 = !DILocalVariable(name: "bb", arg: 2, scope: !6770, file: !1, line: 738, type: !1439)
!6776 = !DILocation(line: 738, column: 56, scope: !6770)
!6777 = !DILocalVariable(name: "region", arg: 3, scope: !6770, file: !1, line: 738, type: !2045)
!6778 = !DILocation(line: 738, column: 65, scope: !6770)
!6779 = !DILocalVariable(name: "map", arg: 4, scope: !6770, file: !1, line: 739, type: !1471)
!6780 = !DILocation(line: 739, column: 17, scope: !6770)
!6781 = !DILocalVariable(name: "gsi", arg: 5, scope: !6770, file: !1, line: 739, type: !3468)
!6782 = !DILocation(line: 739, column: 44, scope: !6770)
!6783 = !DILocalVariable(name: "i", scope: !6770, file: !1, line: 741, type: !754)
!6784 = !DILocation(line: 741, column: 7, scope: !6770)
!6785 = !DILocalVariable(name: "nargs", scope: !6770, file: !1, line: 741, type: !754)
!6786 = !DILocation(line: 741, column: 10, scope: !6770)
!6787 = !DILocation(line: 741, column: 40, scope: !6770)
!6788 = !DILocation(line: 741, column: 18, scope: !6770)
!6789 = !DILocalVariable(name: "args", scope: !6770, file: !1, line: 742, type: !1533)
!6790 = !DILocation(line: 742, column: 19, scope: !6770)
!6791 = !DILocation(line: 742, column: 26, scope: !6770)
!6792 = !DILocalVariable(name: "fn_type", scope: !6770, file: !1, line: 743, type: !657)
!6793 = !DILocation(line: 743, column: 8, scope: !6770)
!6794 = !DILocation(line: 743, column: 18, scope: !6770)
!6795 = !DILocalVariable(name: "fn", scope: !6770, file: !1, line: 744, type: !657)
!6796 = !DILocation(line: 744, column: 8, scope: !6770)
!6797 = !DILocation(line: 744, column: 33, scope: !6770)
!6798 = !DILocation(line: 744, column: 13, scope: !6770)
!6799 = !DILocalVariable(name: "call_expr", scope: !6770, file: !1, line: 745, type: !657)
!6800 = !DILocation(line: 745, column: 8, scope: !6770)
!6801 = !DILocalVariable(name: "var", scope: !6770, file: !1, line: 745, type: !657)
!6802 = !DILocation(line: 745, column: 19, scope: !6770)
!6803 = !DILocalVariable(name: "lhs", scope: !6770, file: !1, line: 745, type: !657)
!6804 = !DILocation(line: 745, column: 24, scope: !6770)
!6805 = !DILocalVariable(name: "call", scope: !6770, file: !1, line: 746, type: !987)
!6806 = !DILocation(line: 746, column: 10, scope: !6770)
!6807 = !DILocation(line: 748, column: 10, scope: !6808)
!6808 = distinct !DILexicalBlock(scope: !6770, file: !1, line: 748, column: 3)
!6809 = !DILocation(line: 748, column: 8, scope: !6808)
!6810 = !DILocation(line: 748, column: 15, scope: !6811)
!6811 = distinct !DILexicalBlock(scope: !6808, file: !1, line: 748, column: 3)
!6812 = !DILocation(line: 748, column: 19, scope: !6811)
!6813 = !DILocation(line: 748, column: 17, scope: !6811)
!6814 = !DILocation(line: 748, column: 3, scope: !6808)
!6815 = !DILocalVariable(name: "arg", scope: !6816, file: !1, line: 750, type: !657)
!6816 = distinct !DILexicalBlock(scope: !6811, file: !1, line: 749, column: 5)
!6817 = !DILocation(line: 750, column: 12, scope: !6816)
!6818 = !DILocation(line: 750, column: 35, scope: !6816)
!6819 = !DILocation(line: 750, column: 41, scope: !6816)
!6820 = !DILocation(line: 750, column: 18, scope: !6816)
!6821 = !DILocalVariable(name: "t", scope: !6816, file: !1, line: 751, type: !657)
!6822 = !DILocation(line: 751, column: 12, scope: !6816)
!6823 = !DILocation(line: 751, column: 16, scope: !6816)
!6824 = !DILocation(line: 753, column: 29, scope: !6816)
!6825 = !DILocation(line: 753, column: 13, scope: !6816)
!6826 = !DILocation(line: 753, column: 11, scope: !6816)
!6827 = !DILocation(line: 754, column: 43, scope: !6816)
!6828 = !DILocation(line: 754, column: 46, scope: !6816)
!6829 = !DILocation(line: 754, column: 51, scope: !6816)
!6830 = !DILocation(line: 755, column: 8, scope: !6816)
!6831 = !DILocation(line: 755, column: 12, scope: !6816)
!6832 = !DILocation(line: 755, column: 20, scope: !6816)
!6833 = !DILocation(line: 755, column: 25, scope: !6816)
!6834 = !DILocation(line: 754, column: 13, scope: !6816)
!6835 = !DILocation(line: 754, column: 11, scope: !6816)
!6836 = !DILocation(line: 756, column: 13, scope: !6816)
!6837 = !DILocation(line: 756, column: 11, scope: !6816)
!6838 = !DILocation(line: 757, column: 39, scope: !6816)
!6839 = !DILocation(line: 757, column: 44, scope: !6816)
!6840 = !DILocation(line: 757, column: 13, scope: !6816)
!6841 = !DILocation(line: 757, column: 11, scope: !6816)
!6842 = !DILocation(line: 759, column: 7, scope: !6816)
!6843 = !DILocation(line: 760, column: 5, scope: !6816)
!6844 = !DILocation(line: 748, column: 27, scope: !6811)
!6845 = !DILocation(line: 748, column: 3, scope: !6811)
!6846 = distinct !{!6846, !6814, !6847}
!6847 = !DILocation(line: 760, column: 5, scope: !6808)
!6848 = !DILocation(line: 762, column: 26, scope: !6770)
!6849 = !DILocation(line: 762, column: 9, scope: !6770)
!6850 = !DILocation(line: 762, column: 7, scope: !6770)
!6851 = !DILocation(line: 763, column: 25, scope: !6770)
!6852 = !DILocation(line: 763, column: 9, scope: !6770)
!6853 = !DILocation(line: 763, column: 7, scope: !6770)
!6854 = !DILocation(line: 764, column: 31, scope: !6770)
!6855 = !DILocation(line: 764, column: 40, scope: !6770)
!6856 = !DILocation(line: 764, column: 44, scope: !6770)
!6857 = !DILocation(line: 764, column: 15, scope: !6770)
!6858 = !DILocation(line: 764, column: 13, scope: !6770)
!6859 = !DILocation(line: 765, column: 39, scope: !6770)
!6860 = !DILocation(line: 765, column: 10, scope: !6770)
!6861 = !DILocation(line: 765, column: 8, scope: !6770)
!6862 = !DILocation(line: 766, column: 24, scope: !6770)
!6863 = !DILocation(line: 766, column: 29, scope: !6770)
!6864 = !DILocation(line: 766, column: 9, scope: !6770)
!6865 = !DILocation(line: 766, column: 7, scope: !6770)
!6866 = !DILocation(line: 767, column: 24, scope: !6770)
!6867 = !DILocation(line: 767, column: 30, scope: !6770)
!6868 = !DILocation(line: 767, column: 3, scope: !6770)
!6869 = !DILocation(line: 768, column: 22, scope: !6770)
!6870 = !DILocation(line: 768, column: 27, scope: !6770)
!6871 = !DILocation(line: 768, column: 3, scope: !6770)
!6872 = !DILocation(line: 770, column: 10, scope: !6770)
!6873 = !DILocation(line: 770, column: 3, scope: !6770)
!6874 = distinct !DISubprogram(name: "gimple_op", scope: !528, file: !528, line: 1631, type: !6875, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6875 = !DISubroutineType(types: !6876)
!6876 = !{!657, !3278, !5}
!6877 = !DILocalVariable(name: "gs", arg: 1, scope: !6874, file: !528, line: 1631, type: !3278)
!6878 = !DILocation(line: 1631, column: 25, scope: !6874)
!6879 = !DILocalVariable(name: "i", arg: 2, scope: !6874, file: !528, line: 1631, type: !5)
!6880 = !DILocation(line: 1631, column: 38, scope: !6874)
!6881 = !DILocation(line: 1633, column: 23, scope: !6882)
!6882 = distinct !DILexicalBlock(scope: !6874, file: !528, line: 1633, column: 7)
!6883 = !DILocation(line: 1633, column: 7, scope: !6882)
!6884 = !DILocation(line: 1633, column: 7, scope: !6874)
!6885 = !DILocation(line: 1638, column: 26, scope: !6886)
!6886 = distinct !DILexicalBlock(scope: !6882, file: !528, line: 1634, column: 5)
!6887 = !DILocation(line: 1638, column: 14, scope: !6886)
!6888 = !DILocation(line: 1638, column: 50, scope: !6886)
!6889 = !DILocation(line: 1638, column: 7, scope: !6886)
!6890 = !DILocation(line: 1641, column: 5, scope: !6882)
!6891 = !DILocation(line: 1642, column: 1, scope: !6874)
!6892 = distinct !DISubprogram(name: "gimple_expr_code", scope: !528, file: !528, line: 1438, type: !6692, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6893 = !DILocalVariable(name: "stmt", arg: 1, scope: !6892, file: !528, line: 1438, type: !3278)
!6894 = !DILocation(line: 1438, column: 32, scope: !6892)
!6895 = !DILocalVariable(name: "code", scope: !6892, file: !528, line: 1440, type: !527)
!6896 = !DILocation(line: 1440, column: 20, scope: !6892)
!6897 = !DILocation(line: 1440, column: 40, scope: !6892)
!6898 = !DILocation(line: 1440, column: 27, scope: !6892)
!6899 = !DILocation(line: 1441, column: 7, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6892, file: !528, line: 1441, column: 7)
!6901 = !DILocation(line: 1441, column: 12, scope: !6900)
!6902 = !DILocation(line: 1441, column: 29, scope: !6900)
!6903 = !DILocation(line: 1441, column: 32, scope: !6900)
!6904 = !DILocation(line: 1441, column: 37, scope: !6900)
!6905 = !DILocation(line: 1441, column: 7, scope: !6892)
!6906 = !DILocation(line: 1442, column: 29, scope: !6900)
!6907 = !DILocation(line: 1442, column: 35, scope: !6900)
!6908 = !DILocation(line: 1442, column: 42, scope: !6900)
!6909 = !DILocation(line: 1442, column: 5, scope: !6900)
!6910 = !DILocation(line: 1443, column: 12, scope: !6911)
!6911 = distinct !DILexicalBlock(scope: !6900, file: !528, line: 1443, column: 12)
!6912 = !DILocation(line: 1443, column: 17, scope: !6911)
!6913 = !DILocation(line: 1443, column: 12, scope: !6900)
!6914 = !DILocation(line: 1444, column: 5, scope: !6911)
!6915 = !DILocation(line: 1446, column: 5, scope: !6911)
!6916 = !DILocation(line: 1448, column: 5, scope: !6892)
!6917 = !DILocation(line: 1450, column: 1, scope: !6892)
!6918 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !528, file: !528, line: 1686, type: !6919, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6919 = !DISubroutineType(types: !6920)
!6920 = !{!640, !132}
!6921 = !DILocalVariable(name: "code", arg: 1, scope: !6918, file: !528, line: 1686, type: !132)
!6922 = !DILocation(line: 1686, column: 38, scope: !6918)
!6923 = !DILocation(line: 1688, column: 63, scope: !6918)
!6924 = !DILocation(line: 1688, column: 34, scope: !6918)
!6925 = !DILocation(line: 1688, column: 10, scope: !6918)
!6926 = !DILocation(line: 1688, column: 3, scope: !6918)
!6927 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !528, file: !528, line: 1966, type: !3276, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6928 = !DILocalVariable(name: "gs", arg: 1, scope: !6927, file: !528, line: 1966, type: !3278)
!6929 = !DILocation(line: 1966, column: 39, scope: !6927)
!6930 = !DILocalVariable(name: "fn", scope: !6927, file: !528, line: 1968, type: !657)
!6931 = !DILocation(line: 1968, column: 8, scope: !6927)
!6932 = !DILocation(line: 1968, column: 29, scope: !6927)
!6933 = !DILocation(line: 1968, column: 13, scope: !6927)
!6934 = !DILocalVariable(name: "type", scope: !6927, file: !528, line: 1969, type: !657)
!6935 = !DILocation(line: 1969, column: 8, scope: !6927)
!6936 = !DILocation(line: 1969, column: 15, scope: !6927)
!6937 = !DILocation(line: 1972, column: 10, scope: !6927)
!6938 = !DILocation(line: 1972, column: 8, scope: !6927)
!6939 = !DILocation(line: 1976, column: 10, scope: !6927)
!6940 = !DILocation(line: 1976, column: 3, scope: !6927)
!6941 = distinct !DISubprogram(name: "gimple_call_fn", scope: !528, file: !528, line: 1911, type: !3276, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6942 = !DILocalVariable(name: "gs", arg: 1, scope: !6941, file: !528, line: 1911, type: !3278)
!6943 = !DILocation(line: 1911, column: 30, scope: !6941)
!6944 = !DILocation(line: 1914, column: 21, scope: !6941)
!6945 = !DILocation(line: 1914, column: 10, scope: !6941)
!6946 = !DILocation(line: 1914, column: 3, scope: !6941)
!6947 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !528, file: !528, line: 2013, type: !3370, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6948 = !DILocalVariable(name: "gs", arg: 1, scope: !6947, file: !528, line: 2013, type: !3278)
!6949 = !DILocation(line: 2013, column: 36, scope: !6947)
!6950 = !DILocalVariable(name: "num_ops", scope: !6947, file: !528, line: 2015, type: !5)
!6951 = !DILocation(line: 2015, column: 12, scope: !6947)
!6952 = !DILocation(line: 2017, column: 29, scope: !6947)
!6953 = !DILocation(line: 2017, column: 13, scope: !6947)
!6954 = !DILocation(line: 2017, column: 11, scope: !6947)
!6955 = !DILocation(line: 2018, column: 10, scope: !6947)
!6956 = !DILocation(line: 2018, column: 18, scope: !6947)
!6957 = !DILocation(line: 2018, column: 3, scope: !6947)
!6958 = distinct !DISubprogram(name: "VEC_tree_gc_alloc", scope: !133, file: !133, line: 183, type: !6959, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6959 = !DISubroutineType(types: !6960)
!6960 = !{!1533, !754}
!6961 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6958, file: !133, line: 183, type: !754)
!6962 = !DILocation(line: 183, column: 1, scope: !6958)
!6963 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !528, file: !528, line: 1954, type: !3276, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6964 = !DILocalVariable(name: "gs", arg: 1, scope: !6963, file: !528, line: 1954, type: !3278)
!6965 = !DILocation(line: 1954, column: 34, scope: !6963)
!6966 = !DILocalVariable(name: "addr", scope: !6963, file: !528, line: 1956, type: !657)
!6967 = !DILocation(line: 1956, column: 8, scope: !6963)
!6968 = !DILocation(line: 1956, column: 31, scope: !6963)
!6969 = !DILocation(line: 1956, column: 15, scope: !6963)
!6970 = !DILocation(line: 1957, column: 7, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6963, file: !528, line: 1957, column: 7)
!6972 = !DILocation(line: 1957, column: 24, scope: !6971)
!6973 = !DILocation(line: 1957, column: 7, scope: !6963)
!6974 = !DILocation(line: 1958, column: 12, scope: !6971)
!6975 = !DILocation(line: 1958, column: 5, scope: !6971)
!6976 = !DILocation(line: 1959, column: 3, scope: !6963)
!6977 = !DILocation(line: 1960, column: 1, scope: !6963)
!6978 = distinct !DISubprogram(name: "gimple_call_arg", scope: !528, file: !528, line: 2025, type: !6875, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6979 = !DILocalVariable(name: "gs", arg: 1, scope: !6978, file: !528, line: 2025, type: !3278)
!6980 = !DILocation(line: 2025, column: 31, scope: !6978)
!6981 = !DILocalVariable(name: "index", arg: 2, scope: !6978, file: !528, line: 2025, type: !5)
!6982 = !DILocation(line: 2025, column: 44, scope: !6978)
!6983 = !DILocation(line: 2028, column: 21, scope: !6978)
!6984 = !DILocation(line: 2028, column: 25, scope: !6978)
!6985 = !DILocation(line: 2028, column: 31, scope: !6978)
!6986 = !DILocation(line: 2028, column: 10, scope: !6978)
!6987 = !DILocation(line: 2028, column: 3, scope: !6978)
!6988 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !133, file: !133, line: 182, type: !6989, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6989 = !DISubroutineType(types: !6990)
!6990 = !{!1021, !3107, !657}
!6991 = !DILocalVariable(name: "vec_", arg: 1, scope: !6988, file: !133, line: 182, type: !3107)
!6992 = !DILocation(line: 182, column: 1, scope: !6988)
!6993 = !DILocalVariable(name: "obj_", arg: 2, scope: !6988, file: !133, line: 182, type: !657)
!6994 = !DILocalVariable(name: "slot_", scope: !6988, file: !133, line: 182, type: !1021)
!6995 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !528, file: !528, line: 1878, type: !3276, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!6996 = !DILocalVariable(name: "gs", arg: 1, scope: !6995, file: !528, line: 1878, type: !3278)
!6997 = !DILocation(line: 1878, column: 31, scope: !6995)
!6998 = !DILocation(line: 1881, column: 21, scope: !6995)
!6999 = !DILocation(line: 1881, column: 10, scope: !6995)
!7000 = !DILocation(line: 1881, column: 3, scope: !6995)
!7001 = distinct !DISubprogram(name: "make_ssa_name", scope: !3379, file: !3379, line: 1245, type: !7002, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!7002 = !DISubroutineType(types: !7003)
!7003 = !{!657, !657, !987}
!7004 = !DILocalVariable(name: "var", arg: 1, scope: !7001, file: !3379, line: 1245, type: !657)
!7005 = !DILocation(line: 1245, column: 21, scope: !7001)
!7006 = !DILocalVariable(name: "stmt", arg: 2, scope: !7001, file: !3379, line: 1245, type: !987)
!7007 = !DILocation(line: 1245, column: 33, scope: !7001)
!7008 = !DILocation(line: 1247, column: 28, scope: !7001)
!7009 = !DILocation(line: 1247, column: 34, scope: !7001)
!7010 = !DILocation(line: 1247, column: 39, scope: !7001)
!7011 = !DILocation(line: 1247, column: 10, scope: !7001)
!7012 = !DILocation(line: 1247, column: 3, scope: !7001)
!7013 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !528, file: !528, line: 1898, type: !7014, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!7014 = !DISubroutineType(types: !7015)
!7015 = !{null, !987, !657}
!7016 = !DILocalVariable(name: "gs", arg: 1, scope: !7013, file: !528, line: 1898, type: !987)
!7017 = !DILocation(line: 1898, column: 29, scope: !7013)
!7018 = !DILocalVariable(name: "lhs", arg: 2, scope: !7013, file: !528, line: 1898, type: !657)
!7019 = !DILocation(line: 1898, column: 38, scope: !7013)
!7020 = !DILocation(line: 1901, column: 18, scope: !7013)
!7021 = !DILocation(line: 1901, column: 25, scope: !7013)
!7022 = !DILocation(line: 1901, column: 3, scope: !7013)
!7023 = !DILocation(line: 1902, column: 7, scope: !7024)
!7024 = distinct !DILexicalBlock(scope: !7013, file: !528, line: 1902, column: 7)
!7025 = !DILocation(line: 1902, column: 11, scope: !7024)
!7026 = !DILocation(line: 1902, column: 14, scope: !7024)
!7027 = !DILocation(line: 1902, column: 30, scope: !7024)
!7028 = !DILocation(line: 1902, column: 7, scope: !7013)
!7029 = !DILocation(line: 1903, column: 31, scope: !7024)
!7030 = !DILocation(line: 1903, column: 5, scope: !7024)
!7031 = !DILocation(line: 1903, column: 29, scope: !7024)
!7032 = !DILocation(line: 1904, column: 1, scope: !7013)
!7033 = distinct !DISubprogram(name: "rename_variables_in_stmt", scope: !1, file: !1, line: 655, type: !7034, scopeLine: 656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!7034 = !DISubroutineType(types: !7035)
!7035 = !{null, !987, !1471, !3468}
!7036 = !DILocalVariable(name: "stmt", arg: 1, scope: !7033, file: !1, line: 655, type: !987)
!7037 = !DILocation(line: 655, column: 34, scope: !7033)
!7038 = !DILocalVariable(name: "map", arg: 2, scope: !7033, file: !1, line: 655, type: !1471)
!7039 = !DILocation(line: 655, column: 47, scope: !7033)
!7040 = !DILocalVariable(name: "insert_gsi", arg: 3, scope: !7033, file: !1, line: 655, type: !3468)
!7041 = !DILocation(line: 655, column: 74, scope: !7033)
!7042 = !DILocalVariable(name: "iter", scope: !7033, file: !1, line: 657, type: !3961)
!7043 = !DILocation(line: 657, column: 15, scope: !7033)
!7044 = !DILocalVariable(name: "use_p", scope: !7033, file: !1, line: 658, type: !2050)
!7045 = !DILocation(line: 658, column: 17, scope: !7033)
!7046 = !DILocation(line: 660, column: 3, scope: !7047)
!7047 = distinct !DILexicalBlock(scope: !7033, file: !1, line: 660, column: 3)
!7048 = !DILocation(line: 660, column: 3, scope: !7049)
!7049 = distinct !DILexicalBlock(scope: !7047, file: !1, line: 660, column: 3)
!7050 = !DILocalVariable(name: "use", scope: !7051, file: !1, line: 662, type: !657)
!7051 = distinct !DILexicalBlock(scope: !7049, file: !1, line: 661, column: 5)
!7052 = !DILocation(line: 662, column: 12, scope: !7051)
!7053 = !DILocation(line: 662, column: 18, scope: !7051)
!7054 = !DILocalVariable(name: "expr", scope: !7051, file: !1, line: 663, type: !657)
!7055 = !DILocation(line: 663, column: 12, scope: !7051)
!7056 = !DILocalVariable(name: "type_use", scope: !7051, file: !1, line: 663, type: !657)
!7057 = !DILocation(line: 663, column: 18, scope: !7051)
!7058 = !DILocalVariable(name: "type_expr", scope: !7051, file: !1, line: 663, type: !657)
!7059 = !DILocation(line: 663, column: 28, scope: !7051)
!7060 = !DILocalVariable(name: "stmts", scope: !7051, file: !1, line: 664, type: !977)
!7061 = !DILocation(line: 664, column: 18, scope: !7051)
!7062 = !DILocation(line: 666, column: 11, scope: !7063)
!7063 = distinct !DILexicalBlock(scope: !7051, file: !1, line: 666, column: 11)
!7064 = !DILocation(line: 666, column: 27, scope: !7063)
!7065 = !DILocation(line: 666, column: 11, scope: !7051)
!7066 = !DILocation(line: 667, column: 2, scope: !7063)
!7067 = !DILocation(line: 669, column: 26, scope: !7051)
!7068 = !DILocation(line: 669, column: 31, scope: !7051)
!7069 = !DILocation(line: 669, column: 14, scope: !7051)
!7070 = !DILocation(line: 669, column: 12, scope: !7051)
!7071 = !DILocation(line: 670, column: 11, scope: !7072)
!7072 = distinct !DILexicalBlock(scope: !7051, file: !1, line: 670, column: 11)
!7073 = !DILocation(line: 670, column: 18, scope: !7072)
!7074 = !DILocation(line: 670, column: 15, scope: !7072)
!7075 = !DILocation(line: 670, column: 11, scope: !7051)
!7076 = !DILocation(line: 671, column: 2, scope: !7072)
!7077 = !DILocation(line: 673, column: 18, scope: !7051)
!7078 = !DILocation(line: 673, column: 16, scope: !7051)
!7079 = !DILocation(line: 674, column: 19, scope: !7051)
!7080 = !DILocation(line: 674, column: 17, scope: !7051)
!7081 = !DILocation(line: 676, column: 11, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7051, file: !1, line: 676, column: 11)
!7083 = !DILocation(line: 676, column: 23, scope: !7082)
!7084 = !DILocation(line: 676, column: 20, scope: !7082)
!7085 = !DILocation(line: 677, column: 4, scope: !7082)
!7086 = !DILocation(line: 677, column: 8, scope: !7082)
!7087 = !DILocation(line: 677, column: 25, scope: !7082)
!7088 = !DILocation(line: 678, column: 8, scope: !7082)
!7089 = !DILocation(line: 678, column: 26, scope: !7082)
!7090 = !DILocation(line: 678, column: 11, scope: !7082)
!7091 = !DILocation(line: 676, column: 11, scope: !7051)
!7092 = !DILocalVariable(name: "var", scope: !7093, file: !1, line: 680, type: !657)
!7093 = distinct !DILexicalBlock(scope: !7082, file: !1, line: 679, column: 2)
!7094 = !DILocation(line: 680, column: 9, scope: !7093)
!7095 = !DILocation(line: 682, column: 25, scope: !7096)
!7096 = distinct !DILexicalBlock(scope: !7093, file: !1, line: 682, column: 8)
!7097 = !DILocation(line: 682, column: 8, scope: !7096)
!7098 = !DILocation(line: 682, column: 8, scope: !7093)
!7099 = !DILocation(line: 684, column: 33, scope: !7100)
!7100 = distinct !DILexicalBlock(scope: !7101, file: !1, line: 684, column: 12)
!7101 = distinct !DILexicalBlock(scope: !7096, file: !1, line: 683, column: 6)
!7102 = !DILocation(line: 684, column: 12, scope: !7100)
!7103 = !DILocation(line: 684, column: 12, scope: !7101)
!7104 = !DILocation(line: 685, column: 34, scope: !7100)
!7105 = !DILocation(line: 685, column: 3, scope: !7100)
!7106 = !DILocation(line: 687, column: 3, scope: !7100)
!7107 = !DILocation(line: 689, column: 8, scope: !7101)
!7108 = !DILocation(line: 692, column: 26, scope: !7093)
!7109 = !DILocation(line: 692, column: 10, scope: !7093)
!7110 = !DILocation(line: 692, column: 8, scope: !7093)
!7111 = !DILocation(line: 694, column: 8, scope: !7112)
!7112 = distinct !DILexicalBlock(scope: !7093, file: !1, line: 694, column: 8)
!7113 = !DILocation(line: 694, column: 20, scope: !7112)
!7114 = !DILocation(line: 694, column: 17, scope: !7112)
!7115 = !DILocation(line: 694, column: 8, scope: !7093)
!7116 = !DILocation(line: 695, column: 13, scope: !7112)
!7117 = !DILocation(line: 695, column: 11, scope: !7112)
!7118 = !DILocation(line: 695, column: 6, scope: !7112)
!7119 = !DILocation(line: 697, column: 11, scope: !7093)
!7120 = !DILocation(line: 697, column: 9, scope: !7093)
!7121 = !DILocation(line: 698, column: 33, scope: !7093)
!7122 = !DILocation(line: 698, column: 11, scope: !7093)
!7123 = !DILocation(line: 698, column: 9, scope: !7093)
!7124 = !DILocation(line: 699, column: 27, scope: !7093)
!7125 = !DILocation(line: 699, column: 39, scope: !7093)
!7126 = !DILocation(line: 699, column: 4, scope: !7093)
!7127 = !DILocation(line: 700, column: 2, scope: !7093)
!7128 = !DILocation(line: 702, column: 20, scope: !7051)
!7129 = !DILocation(line: 702, column: 27, scope: !7051)
!7130 = !DILocation(line: 702, column: 7, scope: !7051)
!7131 = !DILocation(line: 703, column: 5, scope: !7051)
!7132 = distinct !{!7132, !7046, !7133}
!7133 = !DILocation(line: 703, column: 5, scope: !7047)
!7134 = !DILocation(line: 705, column: 16, scope: !7033)
!7135 = !DILocation(line: 705, column: 3, scope: !7033)
!7136 = !DILocation(line: 706, column: 1, scope: !7033)
!7137 = distinct !DISubprogram(name: "if_region_entry", scope: !654, file: !654, line: 236, type: !7138, scopeLine: 237, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!7138 = !DISubroutineType(types: !7139)
!7139 = !{!967, !4182}
!7140 = !DILocalVariable(name: "if_region", arg: 1, scope: !7137, file: !654, line: 236, type: !4182)
!7141 = !DILocation(line: 236, column: 25, scope: !7137)
!7142 = !DILocation(line: 238, column: 10, scope: !7137)
!7143 = !DILocation(line: 238, column: 3, scope: !7137)
!7144 = distinct !DISubprogram(name: "single_pred_p", scope: !341, file: !341, line: 634, type: !6069, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!7145 = !DILocalVariable(name: "bb", arg: 1, scope: !7144, file: !341, line: 634, type: !3926)
!7146 = !DILocation(line: 634, column: 34, scope: !7144)
!7147 = !DILocation(line: 636, column: 10, scope: !7144)
!7148 = !DILocation(line: 636, column: 33, scope: !7144)
!7149 = !DILocation(line: 636, column: 3, scope: !7144)
!7150 = distinct !DISubprogram(name: "gimple_seq_last", scope: !528, file: !528, line: 178, type: !5065, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2102)
!7151 = !DILocalVariable(name: "s", arg: 1, scope: !7150, file: !528, line: 178, type: !5067)
!7152 = !DILocation(line: 178, column: 35, scope: !7150)
!7153 = !DILocation(line: 180, column: 10, scope: !7150)
!7154 = !DILocation(line: 180, column: 14, scope: !7150)
!7155 = !DILocation(line: 180, column: 17, scope: !7150)
!7156 = !DILocation(line: 180, column: 3, scope: !7150)
