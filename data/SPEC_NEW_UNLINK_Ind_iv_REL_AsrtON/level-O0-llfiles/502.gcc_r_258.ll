; ModuleID = 'modulo-sched.c'
source_filename = "modulo-sched.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type { %struct.rtx_def*, %struct.rtx_def*, i32, i32 }
%struct.spec_info_def = type { i32, %struct._IO_FILE*, i32, i32, i32 }
%struct.ddg = type { %struct.basic_block_def*, i32, i32, i32, i32, %struct.ddg_node*, %struct.ddg_node*, i32, i32, %struct.ddg_edge** }
%struct.ddg_node = type { i32, %struct.rtx_def*, %struct.rtx_def*, %struct.ddg_edge*, %struct.ddg_edge*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %union.anon.1 }
%struct.ddg_edge = type { %struct.ddg_node*, %struct.ddg_node*, i32, i32, i32, i32, %struct.ddg_edge*, %struct.ddg_edge*, %union.anon.0 }
%union.anon.0 = type { i8* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%union.anon.1 = type { i8* }
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.gcov_ctr_summary = type { i32, i32, i64, i64, i64 }
%struct.node_sched_params = type { i32, i32, %struct.rtx_def*, i32, i32, i32, i32 }
%struct.common_sched_info_def = type { void (i32, i32, i32)*, void (%struct.basic_block_def*, %struct.basic_block_def*)*, i32 (%struct.basic_block_def*)*, i32 (%struct.rtx_def*)*, i32 }
%struct.sched_deps_info_def = type { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)*, void (%struct.rtx_def*)*, void ()*, void (%struct.rtx_def*)*, void ()*, void (%struct.rtx_def*)*, void ()*, void (i32)*, void (i32)*, void (i32)*, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, i8 }
%struct.haifa_sched_info = type { void ()*, i32 (%struct.rtx_def*)*, i32 ()*, i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*)*, i8* (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*)*, i8 (%struct.rtx_def*)*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i8, i32, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, i32 }
%struct.partial_schedule = type { i32, i32, %struct.ps_insn**, i32, i32, %struct.ddg* }
%struct.ps_insn = type { %struct.ddg_node*, i32, %struct.ps_insn*, %struct.ps_insn*, i32 }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.undo_replace_buff_elem = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.undo_replace_buff_elem* }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.ddg_all_sccs = type { %struct.ddg_scc**, i32, %struct.ddg* }
%struct.ddg_scc = type { %struct.simple_bitmap_def*, %struct.ddg_edge**, i32, i32 }
%struct.node_order_params = type { i32, i32, i32 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.sbitmap_iterator = type { i64*, i32, i32, i32, i64 }

@.str = private unnamed_addr constant [13 x i8] c"\0A[ROW %d ]: \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d, \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"sms\00", align 1
@pass_sms = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8 ()* @gate_handle_sms, i32 ()* @rest_of_handle_sms, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 144, i32 0, i32 0, i32 0, i32 1, i32 132099 } }, align 8, !dbg !0
@optimize = external dso_local global i32, align 4
@flag_modulo_sched = external dso_local global i32, align 4
@max_regno = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@targetm = external dso_local global %struct.gcc_target, align 8
@reload_completed = external dso_local global i32, align 4
@issue_rate = external dso_local global i32, align 4
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [22 x i8] c"\0A\0ASMS analysis phase\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"===================\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"SMS reached max limit... \0A\00", align 1
@.str.6 = private unnamed_addr constant [38 x i8] c"SMS loop num: %d, file: %s, line: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [31 x i8] c"SMS not loop_single_full_bb_p\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"modulo-sched.c\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.10 = private unnamed_addr constant [21 x i8] c" %s %d (file, line)\0A\00", align 1
@.str.11 = private unnamed_addr constant [20 x i8] c"SMS single-bb-loop\0A\00", align 1
@profile_info = external dso_local global %struct.gcov_ctr_summary*, align 8
@flag_branch_probabilities = external dso_local global i32, align 4
@.str.12 = private unnamed_addr constant [16 x i8] c"SMS loop-count \00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"SMS trip-count \00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"SMS profile-sum-max \00", align 1
@.str.17 = private unnamed_addr constant [32 x i8] c"SMS doloop_register_get failed\0A\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"SMS loop-with-call\0A\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"SMS loop-with-barrier\0A\00", align 1
@.str.20 = private unnamed_addr constant [30 x i8] c"SMS loop-with-not-single-set\0A\00", align 1
@.str.21 = private unnamed_addr constant [29 x i8] c"SMS loop with subreg in lhs\0A\00", align 1
@.str.22 = private unnamed_addr constant [23 x i8] c"SMS create_ddg failed\0A\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"...OK\0A\00", align 1
@.str.24 = private unnamed_addr constant [27 x i8] c"\0ASMS transformation phase\0A\00", align 1
@.str.25 = private unnamed_addr constant [28 x i8] c"=========================\0A\0A\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"SMS doloop\0A\00", align 1
@.str.27 = private unnamed_addr constant [18 x i8] c"SMS built-ddg %d\0A\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c"SMS num-loads %d\0A\00", align 1
@.str.29 = private unnamed_addr constant [19 x i8] c"SMS num-stores %d\0A\00", align 1
@.str.30 = private unnamed_addr constant [18 x i8] c"SMS const-doloop \00", align 1
@.str.31 = private unnamed_addr constant [40 x i8] c"SMS iis %d %d %d (rec_mii, mii, maxii)\0A\00", align 1
@.str.32 = private unnamed_addr constant [16 x i8] c"SMS failed... \0A\00", align 1
@.str.33 = private unnamed_addr constant [46 x i8] c"SMS sched-failed (stage-count=%d, loop-count=\00", align 1
@.str.34 = private unnamed_addr constant [14 x i8] c", trip-count=\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.36 = private unnamed_addr constant [35 x i8] c"SMS succeeded %d %d (with ii, sc)\0A\00", align 1
@.str.37 = private unnamed_addr constant [54 x i8] c"SMS Branch (%d) will later be scheduled at cycle %d.\0A\00", align 1
@flag_resched_modulo_sched = external dso_local global i32, align 4
@node_sched_params = internal global %struct.node_sched_params* null, align 8, !dbg !2393
@sms_common_sched_info = internal global %struct.common_sched_info_def zeroinitializer, align 8, !dbg !2276
@haifa_common_sched_info = external dso_local constant %struct.common_sched_info_def, align 8
@common_sched_info = external dso_local global %struct.common_sched_info_def*, align 8
@sms_sched_deps_info = internal global %struct.sched_deps_info_def { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)* @compute_jump_reg_dependencies, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (i32)* null, void (i32)* null, void (i32)* null, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)* null, void (%struct.rtx_def*, i32)* null, i8 0 }, align 8, !dbg !2297
@sched_deps_info = external dso_local global %struct.sched_deps_info_def*, align 8
@sms_sched_info = internal global %struct.haifa_sched_info { void ()* null, i32 (%struct.rtx_def*)* null, i32 ()* null, i32 (%struct.rtx_def*, i32)* null, i32 (%struct.rtx_def*, %struct.rtx_def*)* null, i8* (%struct.rtx_def*, i32)* @sms_print_insn, i32 (%struct.rtx_def*, %struct.rtx_def*)* null, i8 (%struct.rtx_def*)* null, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* null, i8 0, i32 0, void (%struct.rtx_def*, i32)* null, void (%struct.rtx_def*, %struct.rtx_def*)* null, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)* null, i32 0 }, align 8, !dbg !2337
@current_sched_info = external dso_local global %struct.haifa_sched_info*, align 8
@sms_print_insn.tmp = internal global [80 x i8] zeroinitializer, align 16, !dbg !2386
@.str.38 = private unnamed_addr constant [5 x i8] c"i%4d\00", align 1
@.str.39 = private unnamed_addr constant [31 x i8] c"SMS loop inner or !loop_outer\0A\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"SMS loop many exits \00", align 1
@.str.41 = private unnamed_addr constant [20 x i8] c"SMS loop many BBs. \00", align 1
@.str.42 = private unnamed_addr constant [15 x i8] c"\0AOrder params\0A\00", align 1
@.str.43 = private unnamed_addr constant [41 x i8] c"node %d, ASAP: %d, ALAP: %d, HEIGHT: %d\0A\00", align 1
@.str.44 = private unnamed_addr constant [25 x i8] c"SMS final nodes order: \0A\00", align 1
@.str.45 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.46 = private unnamed_addr constant [21 x i8] c"Starting with ii=%d\0A\00", align 1
@.str.47 = private unnamed_addr constant [86 x i8] c"\0ATrying to schedule node %d                         INSN = %d  in (%d .. %d) step %d\0A\00", align 1
@.str.48 = private unnamed_addr constant [15 x i8] c"num_splits=%d\0A\00", align 1
@.str.49 = private unnamed_addr constant [19 x i8] c"\0AProcessing edge: \00", align 1
@.str.50 = private unnamed_addr constant [59 x i8] c"\0AScheduling %d (%d) in psp_not_empty, checking p %d (%d): \00", align 1
@.str.51 = private unnamed_addr constant [44 x i8] c"pred st = %d; early_start = %d; latency: %d\00", align 1
@.str.52 = private unnamed_addr constant [27 x i8] c"the node is not scheduled\0A\00", align 1
@.str.53 = private unnamed_addr constant [55 x i8] c"\0AScheduling %d (%d) in a window (%d..%d) with step %d\0A\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"\0AProcessing edge:\00", align 1
@.str.55 = private unnamed_addr constant [59 x i8] c"\0AScheduling %d (%d) in pss_not_empty, checking s %d (%d): \00", align 1
@.str.56 = private unnamed_addr constant [44 x i8] c"succ st = %d; late_start = %d; latency = %d\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"end = %d\0A\00", align 1
@.str.58 = private unnamed_addr constant [63 x i8] c"\0AScheduling %d (%d) in psp_pss_not_empty, checking p %d (%d): \00", align 1
@.str.59 = private unnamed_addr constant [45 x i8] c"pred st = %d; early_start = %d; latency = %d\00", align 1
@.str.60 = private unnamed_addr constant [63 x i8] c"\0AScheduling %d (%d) in psp_pss_not_empty, checking s %d (%d): \00", align 1
@.str.61 = private unnamed_addr constant [42 x i8] c"\0AEmpty window: start=%d, end=%d, step=%d\0A\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c"\0Amust_precede: \00", align 1
@.str.63 = private unnamed_addr constant [15 x i8] c"\0Amust_follow: \00", align 1
@.str.64 = private unnamed_addr constant [27 x i8] c"Scheduled w/o split in %d\0A\00", align 1
@curr_state = external dso_local global i8*, align 8
@sched_dump = external dso_local global %struct._IO_FILE*, align 8
@sched_verbose = external dso_local global i32, align 4
@.str.65 = private unnamed_addr constant [39 x i8] c"Both crit_pred and crit_succ are NULL\0A\00", align 1
@.str.66 = private unnamed_addr constant [14 x i8] c"split_row=%d\0A\00", align 1
@.str.67 = private unnamed_addr constant [28 x i8] c"min_cycle=%d, max_cycle=%d\0A\00", align 1
@.str.68 = private unnamed_addr constant [57 x i8] c"crr_insn->node=%d, crr_insn->cycle=%d,\09\09   min_cycle=%d\0A\00", align 1
@.str.69 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.70 = private unnamed_addr constant [22 x i8] c"Node = %d; INSN = %d\0A\00", align 1
@.str.71 = private unnamed_addr constant [13 x i8] c" asap = %d:\0A\00", align 1
@.str.72 = private unnamed_addr constant [13 x i8] c" time = %d:\0A\00", align 1
@.str.73 = private unnamed_addr constant [19 x i8] c" nreg_moves = %d:\0A\00", align 1
@.str.74 = private unnamed_addr constant [13 x i8] c" reg_move = \00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_partial_schedule(%struct.partial_schedule* %ps, %struct._IO_FILE* %dump) #0 !dbg !2425 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %dump.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %ps_i = alloca %struct.ps_insn*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !2479, metadata !DIExpression()), !dbg !2480
  store %struct._IO_FILE* %dump, %struct._IO_FILE** %dump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %dump.addr, metadata !2481, metadata !DIExpression()), !dbg !2482
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2483, metadata !DIExpression()), !dbg !2484
  store i32 0, i32* %i, align 4, !dbg !2485
  br label %for.cond, !dbg !2487

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2488
  %1 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !2490
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %1, i32 0, i32 0, !dbg !2491
  %2 = load i32, i32* %ii, align 8, !dbg !2491
  %cmp = icmp slt i32 %0, %2, !dbg !2492
  br i1 %cmp, label %for.body, label %for.end, !dbg !2493

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_i, metadata !2494, metadata !DIExpression()), !dbg !2496
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !2497
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %3, i32 0, i32 2, !dbg !2498
  %4 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !2498
  %5 = load i32, i32* %i, align 4, !dbg !2499
  %idxprom = sext i32 %5 to i64, !dbg !2497
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %4, i64 %idxprom, !dbg !2497
  %6 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !2497
  store %struct.ps_insn* %6, %struct.ps_insn** %ps_i, align 8, !dbg !2496
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8, !dbg !2500
  %8 = load i32, i32* %i, align 4, !dbg !2501
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 %8), !dbg !2502
  br label %while.cond, !dbg !2503

while.cond:                                       ; preds = %while.body, %for.body
  %9 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !2504
  %tobool = icmp ne %struct.ps_insn* %9, null, !dbg !2503
  br i1 %tobool, label %while.body, label %while.end, !dbg !2503

while.body:                                       ; preds = %while.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %dump.addr, align 8, !dbg !2505
  %11 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !2507
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %11, i32 0, i32 0, !dbg !2507
  %12 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !2507
  %insn = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %12, i32 0, i32 1, !dbg !2507
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2507
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !2507
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2507
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !2507
  %rt_int = bitcast %union.rtunion_def* %arrayidx1 to i32*, !dbg !2507
  %14 = load i32, i32* %rt_int, align 8, !dbg !2507
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %14), !dbg !2508
  %15 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !2509
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %15, i32 0, i32 2, !dbg !2510
  %16 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !2510
  store %struct.ps_insn* %16, %struct.ps_insn** %ps_i, align 8, !dbg !2511
  br label %while.cond, !dbg !2503, !llvm.loop !2512

while.end:                                        ; preds = %while.cond
  br label %for.inc, !dbg !2514

for.inc:                                          ; preds = %while.end
  %17 = load i32, i32* %i, align 4, !dbg !2515
  %inc = add nsw i32 %17, 1, !dbg !2515
  store i32 %inc, i32* %i, align 4, !dbg !2515
  br label %for.cond, !dbg !2516, !llvm.loop !2517

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2519
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_handle_sms() #0 !dbg !2520 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !2521
  %cmp = icmp sgt i32 %0, 0, !dbg !2522
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !2523

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* @flag_modulo_sched, align 4, !dbg !2524
  %tobool = icmp ne i32 %1, 0, !dbg !2523
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ], !dbg !2525
  %land.ext = zext i1 %2 to i32, !dbg !2523
  %conv = trunc i32 %land.ext to i8, !dbg !2526
  ret i8 %conv, !dbg !2527
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_sms() #0 !dbg !2528 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2529, metadata !DIExpression()), !dbg !2530
  call void @cfg_layout_initialize(i32 0), !dbg !2531
  call void @sms_schedule(), !dbg !2532
  %call = call i32 @max_reg_num(), !dbg !2533
  store i32 %call, i32* @max_regno, align 4, !dbg !2534
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2535
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2535
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2535
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2535
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !2535
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2535
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !2535
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2535
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !2535
  br label %for.cond, !dbg !2535

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2537
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2537
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2537
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2537
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2537
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !2537
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2537
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !2537
  br i1 %cmp, label %for.body, label %for.end, !dbg !2535

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2539
  %next_bb3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 6, !dbg !2541
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb3, align 8, !dbg !2541
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2542
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !2542
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !2542
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !2542
  %x_exit_block_ptr6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 1, !dbg !2542
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr6, align 8, !dbg !2542
  %cmp7 = icmp ne %struct.basic_block_def* %9, %12, !dbg !2543
  br i1 %cmp7, label %if.then, label %if.end, !dbg !2544

if.then:                                          ; preds = %for.body
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2545
  %next_bb8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 6, !dbg !2546
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb8, align 8, !dbg !2546
  %15 = bitcast %struct.basic_block_def* %14 to i8*, !dbg !2545
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2547
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 2, !dbg !2548
  store i8* %15, i8** %aux, align 8, !dbg !2549
  br label %if.end, !dbg !2547

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2542

for.inc:                                          ; preds = %if.end
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2537
  %next_bb9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 6, !dbg !2537
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb9, align 8, !dbg !2537
  store %struct.basic_block_def* %18, %struct.basic_block_def** %bb, align 8, !dbg !2537
  br label %for.cond, !dbg !2537, !llvm.loop !2550

for.end:                                          ; preds = %for.cond
  call void @free_dominance_info(i32 1), !dbg !2552
  call void @cfg_layout_finalize(), !dbg !2553
  ret i32 0, !dbg !2554
}

declare dso_local void @cfg_layout_initialize(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sms_schedule() #0 !dbg !2555 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %g_arr = alloca %struct.ddg**, align 8
  %g = alloca %struct.ddg*, align 8
  %node_order = alloca i32*, align 8
  %maxii = alloca i32, align 4
  %max_asap = alloca i32, align 4
  %li = alloca %struct.loop_iterator, align 8
  %ps = alloca %struct.partial_schedule*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %condition_bb = alloca %struct.basic_block_def*, align 8
  %latch_edge = alloca %struct.edge_def*, align 8
  %trip_count = alloca i64, align 8
  %temp = alloca i32, align 4
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  %count_reg = alloca %struct.rtx_def*, align 8
  %insn24 = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %head404 = alloca %struct.rtx_def*, align 8
  %tail405 = alloca %struct.rtx_def*, align 8
  %count_reg406 = alloca %struct.rtx_def*, align 8
  %count_init = alloca %struct.rtx_def*, align 8
  %mii = alloca i32, align 4
  %rec_mii = alloca i32, align 4
  %stage_count = alloca i32, align 4
  %loop_count = alloca i64, align 8
  %insn415 = alloca %struct.rtx_def*, align 8
  %pre_header = alloca %struct.basic_block_def*, align 8
  %reg_move_replaces = alloca %struct.undo_replace_buff_elem*, align 8
  %comp_rtx = alloca %struct.rtx_def*, align 8
  %prob = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !2556, metadata !DIExpression()), !dbg !2557
  call void @llvm.dbg.declare(metadata %struct.ddg*** %g_arr, metadata !2558, metadata !DIExpression()), !dbg !2559
  call void @llvm.dbg.declare(metadata %struct.ddg** %g, metadata !2560, metadata !DIExpression()), !dbg !2561
  call void @llvm.dbg.declare(metadata i32** %node_order, metadata !2562, metadata !DIExpression()), !dbg !2563
  call void @llvm.dbg.declare(metadata i32* %maxii, metadata !2564, metadata !DIExpression()), !dbg !2565
  call void @llvm.dbg.declare(metadata i32* %max_asap, metadata !2566, metadata !DIExpression()), !dbg !2567
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !2568, metadata !DIExpression()), !dbg !2574
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps, metadata !2575, metadata !DIExpression()), !dbg !2576
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2577, metadata !DIExpression()), !dbg !2578
  store %struct.basic_block_def* null, %struct.basic_block_def** %bb, align 8, !dbg !2578
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2579, metadata !DIExpression()), !dbg !2580
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %condition_bb, metadata !2581, metadata !DIExpression()), !dbg !2582
  store %struct.basic_block_def* null, %struct.basic_block_def** %condition_bb, align 8, !dbg !2582
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch_edge, metadata !2583, metadata !DIExpression()), !dbg !2584
  call void @llvm.dbg.declare(metadata i64* %trip_count, metadata !2585, metadata !DIExpression()), !dbg !2586
  store i64 0, i64* %trip_count, align 8, !dbg !2586
  call void @loop_optimizer_init(i32 9), !dbg !2587
  %call = call i32 @number_of_loops(), !dbg !2588
  %cmp = icmp ule i32 %call, 1, !dbg !2590
  br i1 %cmp, label %if.then, label %if.end, !dbg !2591

if.then:                                          ; preds = %entry
  call void @loop_optimizer_finalize(), !dbg !2592
  br label %return, !dbg !2594

if.end:                                           ; preds = %entry
  %0 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 2), align 8, !dbg !2595
  %tobool = icmp ne i32 ()* %0, null, !dbg !2597
  br i1 %tobool, label %if.then1, label %if.else, !dbg !2598

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !2599, metadata !DIExpression()), !dbg !2601
  %1 = load i32, i32* @reload_completed, align 4, !dbg !2602
  store i32 %1, i32* %temp, align 4, !dbg !2601
  store i32 1, i32* @reload_completed, align 4, !dbg !2603
  %2 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 2), align 8, !dbg !2604
  %call2 = call i32 %2(), !dbg !2605
  store i32 %call2, i32* @issue_rate, align 4, !dbg !2606
  %3 = load i32, i32* %temp, align 4, !dbg !2607
  store i32 %3, i32* @reload_completed, align 4, !dbg !2608
  br label %if.end3, !dbg !2609

if.else:                                          ; preds = %if.end
  store i32 1, i32* @issue_rate, align 4, !dbg !2610
  br label %if.end3

if.end3:                                          ; preds = %if.else, %if.then1
  call void @setup_sched_infos(), !dbg !2611
  call void @haifa_sched_init(), !dbg !2612
  %call4 = call i32 @number_of_loops(), !dbg !2613
  %conv = zext i32 %call4 to i64, !dbg !2613
  %call5 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !2613
  %4 = bitcast i8* %call5 to %struct.ddg**, !dbg !2613
  store %struct.ddg** %4, %struct.ddg*** %g_arr, align 8, !dbg !2614
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2615
  %tobool6 = icmp ne %struct._IO_FILE* %5, null, !dbg !2615
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !2617

if.then7:                                         ; preds = %if.end3
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2618
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)), !dbg !2620
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2621
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0)), !dbg !2622
  br label %if.end10, !dbg !2623

if.end10:                                         ; preds = %if.then7, %if.end3
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !2624
  br label %for.cond, !dbg !2624

for.cond:                                         ; preds = %for.inc394, %if.end10
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2626
  %tobool11 = icmp ne %struct.loop* %8, null, !dbg !2624
  br i1 %tobool11, label %for.body, label %for.end395, !dbg !2624

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !2628, metadata !DIExpression()), !dbg !2630
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !2631, metadata !DIExpression()), !dbg !2632
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %count_reg, metadata !2633, metadata !DIExpression()), !dbg !2634
  %call12 = call zeroext i8 @dbg_cnt(i32 34), !dbg !2635
  %conv13 = zext i8 %call12 to i32, !dbg !2635
  %cmp14 = icmp eq i32 %conv13, 0, !dbg !2637
  br i1 %cmp14, label %if.then16, label %if.end21, !dbg !2638

if.then16:                                        ; preds = %for.body
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2639
  %tobool17 = icmp ne %struct._IO_FILE* %9, null, !dbg !2639
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !2642

if.then18:                                        ; preds = %if.then16
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2643
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0)), !dbg !2644
  br label %if.end20, !dbg !2644

if.end20:                                         ; preds = %if.then18, %if.then16
  br label %for.end395, !dbg !2645

if.end21:                                         ; preds = %for.body
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2646
  %tobool22 = icmp ne %struct._IO_FILE* %11, null, !dbg !2646
  br i1 %tobool22, label %if.then23, label %if.end28, !dbg !2648

if.then23:                                        ; preds = %if.end21
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn24, metadata !2649, metadata !DIExpression()), !dbg !2651
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2652
  %header = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 2, !dbg !2652
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2652
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !2652
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !2652
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !2652
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !2652
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !2652
  store %struct.rtx_def* %15, %struct.rtx_def** %insn24, align 8, !dbg !2651
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2653
  %17 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2654
  %num = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 0, !dbg !2655
  %18 = load i32, i32* %num, align 8, !dbg !2655
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !2656
  %call25 = call i8* @insn_file(%struct.rtx_def* %19), !dbg !2657
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !2658
  %call26 = call i32 @insn_line(%struct.rtx_def* %20), !dbg !2659
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6, i64 0, i64 0), i32 %18, i8* %call25, i32 %call26), !dbg !2660
  br label %if.end28, !dbg !2661

if.end28:                                         ; preds = %if.then23, %if.end21
  %21 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2662
  %call29 = call zeroext i8 @loop_canon_p(%struct.loop* %21), !dbg !2664
  %tobool30 = icmp ne i8 %call29, 0, !dbg !2664
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !2665

if.then31:                                        ; preds = %if.end28
  br label %for.inc394, !dbg !2666

if.end32:                                         ; preds = %if.end28
  %22 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2667
  %call33 = call zeroext i8 @loop_single_full_bb_p(%struct.loop* %22), !dbg !2669
  %tobool34 = icmp ne i8 %call33, 0, !dbg !2669
  br i1 %tobool34, label %if.end40, label %if.then35, !dbg !2670

if.then35:                                        ; preds = %if.end32
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2671
  %tobool36 = icmp ne %struct._IO_FILE* %23, null, !dbg !2671
  br i1 %tobool36, label %if.then37, label %if.end39, !dbg !2674

if.then37:                                        ; preds = %if.then35
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2675
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0)), !dbg !2676
  br label %if.end39, !dbg !2676

if.end39:                                         ; preds = %if.then37, %if.then35
  br label %for.inc394, !dbg !2677

if.end40:                                         ; preds = %if.end32
  %25 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2678
  %header41 = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 2, !dbg !2679
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %header41, align 8, !dbg !2679
  store %struct.basic_block_def* %26, %struct.basic_block_def** %bb, align 8, !dbg !2680
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2681
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2682
  call void @get_ebb_head_tail(%struct.basic_block_def* %27, %struct.basic_block_def* %28, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !2683
  %29 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2684
  %call42 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %29), !dbg !2685
  store %struct.edge_def* %call42, %struct.edge_def** %latch_edge, align 8, !dbg !2686
  %30 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2687
  %call43 = call %struct.edge_def* @single_exit(%struct.loop* %30), !dbg !2687
  %tobool44 = icmp ne %struct.edge_def* %call43, null, !dbg !2687
  br i1 %tobool44, label %cond.false, label %cond.true, !dbg !2687

cond.true:                                        ; preds = %if.end40
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 971, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !2687
  br label %cond.end, !dbg !2687

cond.false:                                       ; preds = %if.end40
  br label %cond.end, !dbg !2687

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2687
  %31 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2688
  %call45 = call %struct.edge_def* @single_exit(%struct.loop* %31), !dbg !2690
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call45, i32 0, i32 9, !dbg !2691
  %32 = load i64, i64* %count, align 8, !dbg !2691
  %tobool46 = icmp ne i64 %32, 0, !dbg !2690
  br i1 %tobool46, label %if.then47, label %if.end51, !dbg !2692

if.then47:                                        ; preds = %cond.end
  %33 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !2693
  %count48 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 9, !dbg !2694
  %34 = load i64, i64* %count48, align 8, !dbg !2694
  %35 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2695
  %call49 = call %struct.edge_def* @single_exit(%struct.loop* %35), !dbg !2696
  %count50 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call49, i32 0, i32 9, !dbg !2697
  %36 = load i64, i64* %count50, align 8, !dbg !2697
  %div = sdiv i64 %34, %36, !dbg !2698
  store i64 %div, i64* %trip_count, align 8, !dbg !2699
  br label %if.end51, !dbg !2700

if.end51:                                         ; preds = %if.then47, %cond.end
  %37 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !2701
  %count52 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 9, !dbg !2703
  %38 = load i64, i64* %count52, align 8, !dbg !2703
  %tobool53 = icmp ne i64 %38, 0, !dbg !2701
  br i1 %tobool53, label %land.lhs.true, label %if.end83, !dbg !2704

land.lhs.true:                                    ; preds = %if.end51
  %39 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !2705
  %count54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 9, !dbg !2706
  %40 = load i64, i64* %count54, align 8, !dbg !2706
  %41 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2707
  %call55 = call %struct.edge_def* @single_exit(%struct.loop* %41), !dbg !2708
  %count56 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call55, i32 0, i32 9, !dbg !2709
  %42 = load i64, i64* %count56, align 8, !dbg !2709
  %43 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !2710
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %43, i64 41, !dbg !2710
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !2710
  %44 = load i32, i32* %value, align 8, !dbg !2710
  %conv57 = sext i32 %44 to i64, !dbg !2710
  %mul = mul nsw i64 %42, %conv57, !dbg !2711
  %cmp58 = icmp slt i64 %40, %mul, !dbg !2712
  br i1 %cmp58, label %if.then60, label %if.end83, !dbg !2713

if.then60:                                        ; preds = %land.lhs.true
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2714
  %tobool61 = icmp ne %struct._IO_FILE* %45, null, !dbg !2714
  br i1 %tobool61, label %if.then62, label %if.end82, !dbg !2717

if.then62:                                        ; preds = %if.then60
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2718
  %47 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !2720
  %call63 = call i8* @insn_file(%struct.rtx_def* %47), !dbg !2721
  %48 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !2722
  %call64 = call i32 @insn_line(%struct.rtx_def* %48), !dbg !2723
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), i8* %call63, i32 %call64), !dbg !2724
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2725
  %call66 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.11, i64 0, i64 0)), !dbg !2726
  %50 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !2727
  %tobool67 = icmp ne %struct.gcov_ctr_summary* %50, null, !dbg !2727
  br i1 %tobool67, label %land.lhs.true68, label %if.end81, !dbg !2729

land.lhs.true68:                                  ; preds = %if.then62
  %51 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !2730
  %tobool69 = icmp ne i32 %51, 0, !dbg !2730
  br i1 %tobool69, label %if.then70, label %if.end81, !dbg !2731

if.then70:                                        ; preds = %land.lhs.true68
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2732
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0)), !dbg !2734
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2735
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2736
  %count72 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 8, !dbg !2737
  %55 = load i64, i64* %count72, align 8, !dbg !2737
  %call73 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %55), !dbg !2738
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2739
  %call74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !2740
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2741
  %call75 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0)), !dbg !2742
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2743
  %59 = load i64, i64* %trip_count, align 8, !dbg !2744
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %59), !dbg !2745
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2746
  %call77 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !2747
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2748
  %call78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i64 0, i64 0)), !dbg !2749
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2750
  %63 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !2751
  %sum_max = getelementptr inbounds %struct.gcov_ctr_summary, %struct.gcov_ctr_summary* %63, i32 0, i32 4, !dbg !2752
  %64 = load i64, i64* %sum_max, align 8, !dbg !2752
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %64), !dbg !2753
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2754
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !2755
  br label %if.end81, !dbg !2756

if.end81:                                         ; preds = %if.then70, %land.lhs.true68, %if.then62
  br label %if.end82, !dbg !2757

if.end82:                                         ; preds = %if.end81, %if.then60
  br label %for.inc394, !dbg !2758

if.end83:                                         ; preds = %land.lhs.true, %if.end51
  %66 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !2759
  %67 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !2761
  %call84 = call %struct.rtx_def* @doloop_register_get(%struct.rtx_def* %66, %struct.rtx_def* %67), !dbg !2762
  store %struct.rtx_def* %call84, %struct.rtx_def** %count_reg, align 8, !dbg !2763
  %tobool85 = icmp ne %struct.rtx_def* %call84, null, !dbg !2763
  br i1 %tobool85, label %if.end91, label %if.then86, !dbg !2764

if.then86:                                        ; preds = %if.end83
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2765
  %tobool87 = icmp ne %struct._IO_FILE* %68, null, !dbg !2765
  br i1 %tobool87, label %if.then88, label %if.end90, !dbg !2768

if.then88:                                        ; preds = %if.then86
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2769
  %call89 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.17, i64 0, i64 0)), !dbg !2770
  br label %if.end90, !dbg !2770

if.end90:                                         ; preds = %if.then88, %if.then86
  br label %for.inc394, !dbg !2771

if.end91:                                         ; preds = %if.end83
  %70 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !2772
  store %struct.rtx_def* %70, %struct.rtx_def** %insn, align 8, !dbg !2774
  br label %for.cond92, !dbg !2775

for.cond92:                                       ; preds = %for.inc, %if.end91
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2776
  %72 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !2778
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !2778
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2778
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !2778
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !2778
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2778
  %cmp94 = icmp ne %struct.rtx_def* %71, %73, !dbg !2779
  br i1 %cmp94, label %for.body96, label %for.end, !dbg !2780

for.body96:                                       ; preds = %for.cond92
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !2781, metadata !DIExpression()), !dbg !2783
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2784
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !2784
  %bf.load = load i32, i32* %75, align 8, !dbg !2784
  %bf.clear = and i32 %bf.load, 65535, !dbg !2784
  %cmp97 = icmp eq i32 %bf.clear, 10, !dbg !2784
  br i1 %cmp97, label %if.then260, label %lor.lhs.false, !dbg !2786

lor.lhs.false:                                    ; preds = %for.body96
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2787
  %77 = bitcast %struct.rtx_def* %76 to i32*, !dbg !2787
  %bf.load99 = load i32, i32* %77, align 8, !dbg !2787
  %bf.clear100 = and i32 %bf.load99, 65535, !dbg !2787
  %cmp101 = icmp eq i32 %bf.clear100, 11, !dbg !2787
  br i1 %cmp101, label %if.then260, label %lor.lhs.false103, !dbg !2788

lor.lhs.false103:                                 ; preds = %lor.lhs.false
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2789
  %79 = bitcast %struct.rtx_def* %78 to i32*, !dbg !2789
  %bf.load104 = load i32, i32* %79, align 8, !dbg !2789
  %bf.clear105 = and i32 %bf.load104, 65535, !dbg !2789
  %cmp106 = icmp eq i32 %bf.clear105, 8, !dbg !2789
  br i1 %cmp106, label %land.lhs.true123, label %lor.lhs.false108, !dbg !2789

lor.lhs.false108:                                 ; preds = %lor.lhs.false103
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2789
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !2789
  %bf.load109 = load i32, i32* %81, align 8, !dbg !2789
  %bf.clear110 = and i32 %bf.load109, 65535, !dbg !2789
  %cmp111 = icmp eq i32 %bf.clear110, 7, !dbg !2789
  br i1 %cmp111, label %land.lhs.true123, label %lor.lhs.false113, !dbg !2789

lor.lhs.false113:                                 ; preds = %lor.lhs.false108
  %82 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2789
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !2789
  %bf.load114 = load i32, i32* %83, align 8, !dbg !2789
  %bf.clear115 = and i32 %bf.load114, 65535, !dbg !2789
  %cmp116 = icmp eq i32 %bf.clear115, 9, !dbg !2789
  br i1 %cmp116, label %land.lhs.true123, label %lor.lhs.false118, !dbg !2789

lor.lhs.false118:                                 ; preds = %lor.lhs.false113
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2789
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !2789
  %bf.load119 = load i32, i32* %85, align 8, !dbg !2789
  %bf.clear120 = and i32 %bf.load119, 65535, !dbg !2789
  %cmp121 = icmp eq i32 %bf.clear120, 10, !dbg !2789
  br i1 %cmp121, label %land.lhs.true123, label %lor.lhs.false185, !dbg !2789

land.lhs.true123:                                 ; preds = %lor.lhs.false118, %lor.lhs.false113, %lor.lhs.false108, %lor.lhs.false103
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2789
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !2789
  %bf.load124 = load i32, i32* %87, align 8, !dbg !2789
  %bf.clear125 = and i32 %bf.load124, 65535, !dbg !2789
  %cmp126 = icmp eq i32 %bf.clear125, 7, !dbg !2789
  br i1 %cmp126, label %lor.lhs.false185, label %land.lhs.true128, !dbg !2790

land.lhs.true128:                                 ; preds = %land.lhs.true123
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2791
  %89 = bitcast %struct.rtx_def* %88 to i32*, !dbg !2791
  %bf.load129 = load i32, i32* %89, align 8, !dbg !2791
  %bf.clear130 = and i32 %bf.load129, 65535, !dbg !2791
  %cmp131 = icmp eq i32 %bf.clear130, 9, !dbg !2791
  br i1 %cmp131, label %lor.lhs.false185, label %land.lhs.true133, !dbg !2792

land.lhs.true133:                                 ; preds = %land.lhs.true128
  %90 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2793
  %91 = bitcast %struct.rtx_def* %90 to i32*, !dbg !2793
  %bf.load134 = load i32, i32* %91, align 8, !dbg !2793
  %bf.clear135 = and i32 %bf.load134, 65535, !dbg !2793
  %cmp136 = icmp eq i32 %bf.clear135, 8, !dbg !2793
  br i1 %cmp136, label %cond.true153, label %lor.lhs.false138, !dbg !2793

lor.lhs.false138:                                 ; preds = %land.lhs.true133
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2793
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !2793
  %bf.load139 = load i32, i32* %93, align 8, !dbg !2793
  %bf.clear140 = and i32 %bf.load139, 65535, !dbg !2793
  %cmp141 = icmp eq i32 %bf.clear140, 7, !dbg !2793
  br i1 %cmp141, label %cond.true153, label %lor.lhs.false143, !dbg !2793

lor.lhs.false143:                                 ; preds = %lor.lhs.false138
  %94 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2793
  %95 = bitcast %struct.rtx_def* %94 to i32*, !dbg !2793
  %bf.load144 = load i32, i32* %95, align 8, !dbg !2793
  %bf.clear145 = and i32 %bf.load144, 65535, !dbg !2793
  %cmp146 = icmp eq i32 %bf.clear145, 9, !dbg !2793
  br i1 %cmp146, label %cond.true153, label %lor.lhs.false148, !dbg !2793

lor.lhs.false148:                                 ; preds = %lor.lhs.false143
  %96 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2793
  %97 = bitcast %struct.rtx_def* %96 to i32*, !dbg !2793
  %bf.load149 = load i32, i32* %97, align 8, !dbg !2793
  %bf.clear150 = and i32 %bf.load149, 65535, !dbg !2793
  %cmp151 = icmp eq i32 %bf.clear150, 10, !dbg !2793
  br i1 %cmp151, label %cond.true153, label %cond.false175, !dbg !2794

cond.true153:                                     ; preds = %lor.lhs.false148, %lor.lhs.false143, %lor.lhs.false138, %land.lhs.true133
  %98 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2793
  %u154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1, !dbg !2793
  %fld155 = bitcast %union.u* %u154 to [1 x %union.rtunion_def]*, !dbg !2793
  %arrayidx156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld155, i64 0, i64 5, !dbg !2793
  %rt_rtx157 = bitcast %union.rtunion_def* %arrayidx156 to %struct.rtx_def**, !dbg !2793
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx157, align 8, !dbg !2793
  %100 = bitcast %struct.rtx_def* %99 to i32*, !dbg !2793
  %bf.load158 = load i32, i32* %100, align 8, !dbg !2793
  %bf.clear159 = and i32 %bf.load158, 65535, !dbg !2793
  %cmp160 = icmp eq i32 %bf.clear159, 23, !dbg !2793
  br i1 %cmp160, label %cond.true162, label %cond.false168, !dbg !2793

cond.true162:                                     ; preds = %cond.true153
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2793
  %u163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1, !dbg !2793
  %fld164 = bitcast %union.u* %u163 to [1 x %union.rtunion_def]*, !dbg !2793
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i64 0, i64 5, !dbg !2793
  %rt_rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**, !dbg !2793
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx166, align 8, !dbg !2793
  %tobool167 = icmp ne %struct.rtx_def* %102, null, !dbg !2793
  br i1 %tobool167, label %lor.lhs.false185, label %land.lhs.true176, !dbg !2793

cond.false168:                                    ; preds = %cond.true153
  %103 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2793
  %104 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2793
  %u169 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !2793
  %fld170 = bitcast %union.u* %u169 to [1 x %union.rtunion_def]*, !dbg !2793
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i64 0, i64 5, !dbg !2793
  %rt_rtx172 = bitcast %union.rtunion_def* %arrayidx171 to %struct.rtx_def**, !dbg !2793
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx172, align 8, !dbg !2793
  %call173 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %103, %struct.rtx_def* %105), !dbg !2793
  %tobool174 = icmp ne %struct.rtx_def* %call173, null, !dbg !2793
  br i1 %tobool174, label %lor.lhs.false185, label %land.lhs.true176, !dbg !2793

cond.false175:                                    ; preds = %lor.lhs.false148
  br i1 false, label %lor.lhs.false185, label %land.lhs.true176, !dbg !2794

land.lhs.true176:                                 ; preds = %cond.false175, %cond.false168, %cond.true162
  %106 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2795
  %u177 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !2795
  %fld178 = bitcast %union.u* %u177 to [1 x %union.rtunion_def]*, !dbg !2795
  %arrayidx179 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld178, i64 0, i64 5, !dbg !2795
  %rt_rtx180 = bitcast %union.rtunion_def* %arrayidx179 to %struct.rtx_def**, !dbg !2795
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx180, align 8, !dbg !2795
  %108 = bitcast %struct.rtx_def* %107 to i32*, !dbg !2795
  %bf.load181 = load i32, i32* %108, align 8, !dbg !2795
  %bf.clear182 = and i32 %bf.load181, 65535, !dbg !2795
  %cmp183 = icmp ne i32 %bf.clear182, 24, !dbg !2796
  br i1 %cmp183, label %if.then260, label %lor.lhs.false185, !dbg !2797

lor.lhs.false185:                                 ; preds = %land.lhs.true176, %cond.false175, %cond.false168, %cond.true162, %land.lhs.true128, %land.lhs.true123, %lor.lhs.false118
  %109 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2798
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !2798
  %bf.load186 = load i32, i32* %110, align 8, !dbg !2798
  %bf.clear187 = and i32 %bf.load186, 65535, !dbg !2798
  %cmp188 = icmp eq i32 %bf.clear187, 8, !dbg !2798
  br i1 %cmp188, label %land.lhs.true205, label %lor.lhs.false190, !dbg !2798

lor.lhs.false190:                                 ; preds = %lor.lhs.false185
  %111 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2798
  %112 = bitcast %struct.rtx_def* %111 to i32*, !dbg !2798
  %bf.load191 = load i32, i32* %112, align 8, !dbg !2798
  %bf.clear192 = and i32 %bf.load191, 65535, !dbg !2798
  %cmp193 = icmp eq i32 %bf.clear192, 7, !dbg !2798
  br i1 %cmp193, label %land.lhs.true205, label %lor.lhs.false195, !dbg !2798

lor.lhs.false195:                                 ; preds = %lor.lhs.false190
  %113 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2798
  %114 = bitcast %struct.rtx_def* %113 to i32*, !dbg !2798
  %bf.load196 = load i32, i32* %114, align 8, !dbg !2798
  %bf.clear197 = and i32 %bf.load196, 65535, !dbg !2798
  %cmp198 = icmp eq i32 %bf.clear197, 9, !dbg !2798
  br i1 %cmp198, label %land.lhs.true205, label %lor.lhs.false200, !dbg !2798

lor.lhs.false200:                                 ; preds = %lor.lhs.false195
  %115 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2798
  %116 = bitcast %struct.rtx_def* %115 to i32*, !dbg !2798
  %bf.load201 = load i32, i32* %116, align 8, !dbg !2798
  %bf.clear202 = and i32 %bf.load201, 65535, !dbg !2798
  %cmp203 = icmp eq i32 %bf.clear202, 10, !dbg !2798
  br i1 %cmp203, label %land.lhs.true205, label %if.end261, !dbg !2799

land.lhs.true205:                                 ; preds = %lor.lhs.false200, %lor.lhs.false195, %lor.lhs.false190, %lor.lhs.false185
  %117 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2800
  %118 = bitcast %struct.rtx_def* %117 to i32*, !dbg !2800
  %bf.load206 = load i32, i32* %118, align 8, !dbg !2800
  %bf.clear207 = and i32 %bf.load206, 65535, !dbg !2800
  %cmp208 = icmp eq i32 %bf.clear207, 8, !dbg !2800
  br i1 %cmp208, label %cond.true225, label %lor.lhs.false210, !dbg !2800

lor.lhs.false210:                                 ; preds = %land.lhs.true205
  %119 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2800
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !2800
  %bf.load211 = load i32, i32* %120, align 8, !dbg !2800
  %bf.clear212 = and i32 %bf.load211, 65535, !dbg !2800
  %cmp213 = icmp eq i32 %bf.clear212, 7, !dbg !2800
  br i1 %cmp213, label %cond.true225, label %lor.lhs.false215, !dbg !2800

lor.lhs.false215:                                 ; preds = %lor.lhs.false210
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2800
  %122 = bitcast %struct.rtx_def* %121 to i32*, !dbg !2800
  %bf.load216 = load i32, i32* %122, align 8, !dbg !2800
  %bf.clear217 = and i32 %bf.load216, 65535, !dbg !2800
  %cmp218 = icmp eq i32 %bf.clear217, 9, !dbg !2800
  br i1 %cmp218, label %cond.true225, label %lor.lhs.false220, !dbg !2800

lor.lhs.false220:                                 ; preds = %lor.lhs.false215
  %123 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2800
  %124 = bitcast %struct.rtx_def* %123 to i32*, !dbg !2800
  %bf.load221 = load i32, i32* %124, align 8, !dbg !2800
  %bf.clear222 = and i32 %bf.load221, 65535, !dbg !2800
  %cmp223 = icmp eq i32 %bf.clear222, 10, !dbg !2800
  br i1 %cmp223, label %cond.true225, label %cond.false247, !dbg !2800

cond.true225:                                     ; preds = %lor.lhs.false220, %lor.lhs.false215, %lor.lhs.false210, %land.lhs.true205
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2800
  %u226 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1, !dbg !2800
  %fld227 = bitcast %union.u* %u226 to [1 x %union.rtunion_def]*, !dbg !2800
  %arrayidx228 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld227, i64 0, i64 5, !dbg !2800
  %rt_rtx229 = bitcast %union.rtunion_def* %arrayidx228 to %struct.rtx_def**, !dbg !2800
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx229, align 8, !dbg !2800
  %127 = bitcast %struct.rtx_def* %126 to i32*, !dbg !2800
  %bf.load230 = load i32, i32* %127, align 8, !dbg !2800
  %bf.clear231 = and i32 %bf.load230, 65535, !dbg !2800
  %cmp232 = icmp eq i32 %bf.clear231, 23, !dbg !2800
  br i1 %cmp232, label %cond.true234, label %cond.false239, !dbg !2800

cond.true234:                                     ; preds = %cond.true225
  %128 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2800
  %u235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1, !dbg !2800
  %fld236 = bitcast %union.u* %u235 to [1 x %union.rtunion_def]*, !dbg !2800
  %arrayidx237 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld236, i64 0, i64 5, !dbg !2800
  %rt_rtx238 = bitcast %union.rtunion_def* %arrayidx237 to %struct.rtx_def**, !dbg !2800
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx238, align 8, !dbg !2800
  br label %cond.end245, !dbg !2800

cond.false239:                                    ; preds = %cond.true225
  %130 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2800
  %131 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2800
  %u240 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1, !dbg !2800
  %fld241 = bitcast %union.u* %u240 to [1 x %union.rtunion_def]*, !dbg !2800
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i64 0, i64 5, !dbg !2800
  %rt_rtx243 = bitcast %union.rtunion_def* %arrayidx242 to %struct.rtx_def**, !dbg !2800
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx243, align 8, !dbg !2800
  %call244 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %130, %struct.rtx_def* %132), !dbg !2800
  br label %cond.end245, !dbg !2800

cond.end245:                                      ; preds = %cond.false239, %cond.true234
  %cond246 = phi %struct.rtx_def* [ %129, %cond.true234 ], [ %call244, %cond.false239 ], !dbg !2800
  br label %cond.end248, !dbg !2800

cond.false247:                                    ; preds = %lor.lhs.false220
  br label %cond.end248, !dbg !2800

cond.end248:                                      ; preds = %cond.false247, %cond.end245
  %cond249 = phi %struct.rtx_def* [ %cond246, %cond.end245 ], [ null, %cond.false247 ], !dbg !2800
  store %struct.rtx_def* %cond249, %struct.rtx_def** %set, align 8, !dbg !2801
  %tobool250 = icmp ne %struct.rtx_def* %cond249, null, !dbg !2801
  br i1 %tobool250, label %land.lhs.true251, label %if.end261, !dbg !2802

land.lhs.true251:                                 ; preds = %cond.end248
  %133 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !2803
  %u252 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1, !dbg !2803
  %fld253 = bitcast %union.u* %u252 to [1 x %union.rtunion_def]*, !dbg !2803
  %arrayidx254 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld253, i64 0, i64 0, !dbg !2803
  %rt_rtx255 = bitcast %union.rtunion_def* %arrayidx254 to %struct.rtx_def**, !dbg !2803
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx255, align 8, !dbg !2803
  %135 = bitcast %struct.rtx_def* %134 to i32*, !dbg !2803
  %bf.load256 = load i32, i32* %135, align 8, !dbg !2803
  %bf.clear257 = and i32 %bf.load256, 65535, !dbg !2803
  %cmp258 = icmp eq i32 %bf.clear257, 39, !dbg !2804
  br i1 %cmp258, label %if.then260, label %if.end261, !dbg !2805

if.then260:                                       ; preds = %land.lhs.true251, %land.lhs.true176, %lor.lhs.false, %for.body96
  br label %for.end, !dbg !2806

if.end261:                                        ; preds = %land.lhs.true251, %cond.end248, %lor.lhs.false200
  br label %for.inc, !dbg !2807

for.inc:                                          ; preds = %if.end261
  %136 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2808
  %u262 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1, !dbg !2808
  %fld263 = bitcast %union.u* %u262 to [1 x %union.rtunion_def]*, !dbg !2808
  %arrayidx264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld263, i64 0, i64 2, !dbg !2808
  %rt_rtx265 = bitcast %union.rtunion_def* %arrayidx264 to %struct.rtx_def**, !dbg !2808
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx265, align 8, !dbg !2808
  store %struct.rtx_def* %137, %struct.rtx_def** %insn, align 8, !dbg !2809
  br label %for.cond92, !dbg !2810, !llvm.loop !2811

for.end:                                          ; preds = %if.then260, %for.cond92
  %138 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2813
  %139 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !2815
  %u266 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1, !dbg !2815
  %fld267 = bitcast %union.u* %u266 to [1 x %union.rtunion_def]*, !dbg !2815
  %arrayidx268 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld267, i64 0, i64 2, !dbg !2815
  %rt_rtx269 = bitcast %union.rtunion_def* %arrayidx268 to %struct.rtx_def**, !dbg !2815
  %140 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx269, align 8, !dbg !2815
  %cmp270 = icmp ne %struct.rtx_def* %138, %140, !dbg !2816
  br i1 %cmp270, label %if.then272, label %if.end379, !dbg !2817

if.then272:                                       ; preds = %for.end
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2818
  %tobool273 = icmp ne %struct._IO_FILE* %141, null, !dbg !2818
  br i1 %tobool273, label %if.then274, label %if.end378, !dbg !2821

if.then274:                                       ; preds = %if.then272
  %142 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2822
  %143 = bitcast %struct.rtx_def* %142 to i32*, !dbg !2822
  %bf.load275 = load i32, i32* %143, align 8, !dbg !2822
  %bf.clear276 = and i32 %bf.load275, 65535, !dbg !2822
  %cmp277 = icmp eq i32 %bf.clear276, 10, !dbg !2822
  br i1 %cmp277, label %if.then279, label %if.else281, !dbg !2825

if.then279:                                       ; preds = %if.then274
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2826
  %call280 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %144, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i64 0, i64 0)), !dbg !2827
  br label %if.end376, !dbg !2827

if.else281:                                       ; preds = %if.then274
  %145 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2828
  %146 = bitcast %struct.rtx_def* %145 to i32*, !dbg !2828
  %bf.load282 = load i32, i32* %146, align 8, !dbg !2828
  %bf.clear283 = and i32 %bf.load282, 65535, !dbg !2828
  %cmp284 = icmp eq i32 %bf.clear283, 11, !dbg !2828
  br i1 %cmp284, label %if.then286, label %if.else288, !dbg !2830

if.then286:                                       ; preds = %if.else281
  %147 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2831
  %call287 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %147, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0)), !dbg !2832
  br label %if.end375, !dbg !2832

if.else288:                                       ; preds = %if.else281
  %148 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2833
  %149 = bitcast %struct.rtx_def* %148 to i32*, !dbg !2833
  %bf.load289 = load i32, i32* %149, align 8, !dbg !2833
  %bf.clear290 = and i32 %bf.load289, 65535, !dbg !2833
  %cmp291 = icmp eq i32 %bf.clear290, 8, !dbg !2833
  br i1 %cmp291, label %land.lhs.true308, label %lor.lhs.false293, !dbg !2833

lor.lhs.false293:                                 ; preds = %if.else288
  %150 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2833
  %151 = bitcast %struct.rtx_def* %150 to i32*, !dbg !2833
  %bf.load294 = load i32, i32* %151, align 8, !dbg !2833
  %bf.clear295 = and i32 %bf.load294, 65535, !dbg !2833
  %cmp296 = icmp eq i32 %bf.clear295, 7, !dbg !2833
  br i1 %cmp296, label %land.lhs.true308, label %lor.lhs.false298, !dbg !2833

lor.lhs.false298:                                 ; preds = %lor.lhs.false293
  %152 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2833
  %153 = bitcast %struct.rtx_def* %152 to i32*, !dbg !2833
  %bf.load299 = load i32, i32* %153, align 8, !dbg !2833
  %bf.clear300 = and i32 %bf.load299, 65535, !dbg !2833
  %cmp301 = icmp eq i32 %bf.clear300, 9, !dbg !2833
  br i1 %cmp301, label %land.lhs.true308, label %lor.lhs.false303, !dbg !2833

lor.lhs.false303:                                 ; preds = %lor.lhs.false298
  %154 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2833
  %155 = bitcast %struct.rtx_def* %154 to i32*, !dbg !2833
  %bf.load304 = load i32, i32* %155, align 8, !dbg !2833
  %bf.clear305 = and i32 %bf.load304, 65535, !dbg !2833
  %cmp306 = icmp eq i32 %bf.clear305, 10, !dbg !2833
  br i1 %cmp306, label %land.lhs.true308, label %if.else372, !dbg !2833

land.lhs.true308:                                 ; preds = %lor.lhs.false303, %lor.lhs.false298, %lor.lhs.false293, %if.else288
  %156 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2833
  %157 = bitcast %struct.rtx_def* %156 to i32*, !dbg !2833
  %bf.load309 = load i32, i32* %157, align 8, !dbg !2833
  %bf.clear310 = and i32 %bf.load309, 65535, !dbg !2833
  %cmp311 = icmp eq i32 %bf.clear310, 7, !dbg !2833
  br i1 %cmp311, label %if.else372, label %land.lhs.true313, !dbg !2836

land.lhs.true313:                                 ; preds = %land.lhs.true308
  %158 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2837
  %159 = bitcast %struct.rtx_def* %158 to i32*, !dbg !2837
  %bf.load314 = load i32, i32* %159, align 8, !dbg !2837
  %bf.clear315 = and i32 %bf.load314, 65535, !dbg !2837
  %cmp316 = icmp eq i32 %bf.clear315, 9, !dbg !2837
  br i1 %cmp316, label %if.else372, label %land.lhs.true318, !dbg !2838

land.lhs.true318:                                 ; preds = %land.lhs.true313
  %160 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2839
  %161 = bitcast %struct.rtx_def* %160 to i32*, !dbg !2839
  %bf.load319 = load i32, i32* %161, align 8, !dbg !2839
  %bf.clear320 = and i32 %bf.load319, 65535, !dbg !2839
  %cmp321 = icmp eq i32 %bf.clear320, 8, !dbg !2839
  br i1 %cmp321, label %cond.true338, label %lor.lhs.false323, !dbg !2839

lor.lhs.false323:                                 ; preds = %land.lhs.true318
  %162 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2839
  %163 = bitcast %struct.rtx_def* %162 to i32*, !dbg !2839
  %bf.load324 = load i32, i32* %163, align 8, !dbg !2839
  %bf.clear325 = and i32 %bf.load324, 65535, !dbg !2839
  %cmp326 = icmp eq i32 %bf.clear325, 7, !dbg !2839
  br i1 %cmp326, label %cond.true338, label %lor.lhs.false328, !dbg !2839

lor.lhs.false328:                                 ; preds = %lor.lhs.false323
  %164 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2839
  %165 = bitcast %struct.rtx_def* %164 to i32*, !dbg !2839
  %bf.load329 = load i32, i32* %165, align 8, !dbg !2839
  %bf.clear330 = and i32 %bf.load329, 65535, !dbg !2839
  %cmp331 = icmp eq i32 %bf.clear330, 9, !dbg !2839
  br i1 %cmp331, label %cond.true338, label %lor.lhs.false333, !dbg !2839

lor.lhs.false333:                                 ; preds = %lor.lhs.false328
  %166 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2839
  %167 = bitcast %struct.rtx_def* %166 to i32*, !dbg !2839
  %bf.load334 = load i32, i32* %167, align 8, !dbg !2839
  %bf.clear335 = and i32 %bf.load334, 65535, !dbg !2839
  %cmp336 = icmp eq i32 %bf.clear335, 10, !dbg !2839
  br i1 %cmp336, label %cond.true338, label %cond.false360, !dbg !2840

cond.true338:                                     ; preds = %lor.lhs.false333, %lor.lhs.false328, %lor.lhs.false323, %land.lhs.true318
  %168 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2839
  %u339 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1, !dbg !2839
  %fld340 = bitcast %union.u* %u339 to [1 x %union.rtunion_def]*, !dbg !2839
  %arrayidx341 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld340, i64 0, i64 5, !dbg !2839
  %rt_rtx342 = bitcast %union.rtunion_def* %arrayidx341 to %struct.rtx_def**, !dbg !2839
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx342, align 8, !dbg !2839
  %170 = bitcast %struct.rtx_def* %169 to i32*, !dbg !2839
  %bf.load343 = load i32, i32* %170, align 8, !dbg !2839
  %bf.clear344 = and i32 %bf.load343, 65535, !dbg !2839
  %cmp345 = icmp eq i32 %bf.clear344, 23, !dbg !2839
  br i1 %cmp345, label %cond.true347, label %cond.false353, !dbg !2839

cond.true347:                                     ; preds = %cond.true338
  %171 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2839
  %u348 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1, !dbg !2839
  %fld349 = bitcast %union.u* %u348 to [1 x %union.rtunion_def]*, !dbg !2839
  %arrayidx350 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld349, i64 0, i64 5, !dbg !2839
  %rt_rtx351 = bitcast %union.rtunion_def* %arrayidx350 to %struct.rtx_def**, !dbg !2839
  %172 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx351, align 8, !dbg !2839
  %tobool352 = icmp ne %struct.rtx_def* %172, null, !dbg !2839
  br i1 %tobool352, label %if.else372, label %land.lhs.true361, !dbg !2839

cond.false353:                                    ; preds = %cond.true338
  %173 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2839
  %174 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2839
  %u354 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1, !dbg !2839
  %fld355 = bitcast %union.u* %u354 to [1 x %union.rtunion_def]*, !dbg !2839
  %arrayidx356 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld355, i64 0, i64 5, !dbg !2839
  %rt_rtx357 = bitcast %union.rtunion_def* %arrayidx356 to %struct.rtx_def**, !dbg !2839
  %175 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx357, align 8, !dbg !2839
  %call358 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %173, %struct.rtx_def* %175), !dbg !2839
  %tobool359 = icmp ne %struct.rtx_def* %call358, null, !dbg !2839
  br i1 %tobool359, label %if.else372, label %land.lhs.true361, !dbg !2839

cond.false360:                                    ; preds = %lor.lhs.false333
  br i1 false, label %if.else372, label %land.lhs.true361, !dbg !2840

land.lhs.true361:                                 ; preds = %cond.false360, %cond.false353, %cond.true347
  %176 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2841
  %u362 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1, !dbg !2841
  %fld363 = bitcast %union.u* %u362 to [1 x %union.rtunion_def]*, !dbg !2841
  %arrayidx364 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld363, i64 0, i64 5, !dbg !2841
  %rt_rtx365 = bitcast %union.rtunion_def* %arrayidx364 to %struct.rtx_def**, !dbg !2841
  %177 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx365, align 8, !dbg !2841
  %178 = bitcast %struct.rtx_def* %177 to i32*, !dbg !2841
  %bf.load366 = load i32, i32* %178, align 8, !dbg !2841
  %bf.clear367 = and i32 %bf.load366, 65535, !dbg !2841
  %cmp368 = icmp ne i32 %bf.clear367, 24, !dbg !2842
  br i1 %cmp368, label %if.then370, label %if.else372, !dbg !2843

if.then370:                                       ; preds = %land.lhs.true361
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2844
  %call371 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %179, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.20, i64 0, i64 0)), !dbg !2845
  br label %if.end374, !dbg !2845

if.else372:                                       ; preds = %land.lhs.true361, %cond.false360, %cond.false353, %cond.true347, %land.lhs.true313, %land.lhs.true308, %lor.lhs.false303
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2846
  %call373 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %180, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.21, i64 0, i64 0)), !dbg !2847
  br label %if.end374

if.end374:                                        ; preds = %if.else372, %if.then370
  br label %if.end375

if.end375:                                        ; preds = %if.end374, %if.then286
  br label %if.end376

if.end376:                                        ; preds = %if.end375, %if.then279
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2848
  %182 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2849
  %call377 = call i32 @print_rtl_single(%struct._IO_FILE* %181, %struct.rtx_def* %182), !dbg !2850
  br label %if.end378, !dbg !2851

if.end378:                                        ; preds = %if.end376, %if.then272
  br label %for.inc394, !dbg !2852

if.end379:                                        ; preds = %for.end
  %183 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2853
  %call380 = call %struct.ddg* @create_ddg(%struct.basic_block_def* %183, i32 0), !dbg !2855
  store %struct.ddg* %call380, %struct.ddg** %g, align 8, !dbg !2856
  %tobool381 = icmp ne %struct.ddg* %call380, null, !dbg !2856
  br i1 %tobool381, label %if.end387, label %if.then382, !dbg !2857

if.then382:                                       ; preds = %if.end379
  %184 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2858
  %tobool383 = icmp ne %struct._IO_FILE* %184, null, !dbg !2858
  br i1 %tobool383, label %if.then384, label %if.end386, !dbg !2861

if.then384:                                       ; preds = %if.then382
  %185 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2862
  %call385 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %185, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)), !dbg !2863
  br label %if.end386, !dbg !2863

if.end386:                                        ; preds = %if.then384, %if.then382
  br label %for.inc394, !dbg !2864

if.end387:                                        ; preds = %if.end379
  %186 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !2865
  %187 = load %struct.ddg**, %struct.ddg*** %g_arr, align 8, !dbg !2866
  %188 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2867
  %num388 = getelementptr inbounds %struct.loop, %struct.loop* %188, i32 0, i32 0, !dbg !2868
  %189 = load i32, i32* %num388, align 8, !dbg !2868
  %idxprom = sext i32 %189 to i64, !dbg !2866
  %arrayidx389 = getelementptr inbounds %struct.ddg*, %struct.ddg** %187, i64 %idxprom, !dbg !2866
  store %struct.ddg* %186, %struct.ddg** %arrayidx389, align 8, !dbg !2869
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2870
  %tobool390 = icmp ne %struct._IO_FILE* %190, null, !dbg !2870
  br i1 %tobool390, label %if.then391, label %if.end393, !dbg !2872

if.then391:                                       ; preds = %if.end387
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2873
  %call392 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %191, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0)), !dbg !2874
  br label %if.end393, !dbg !2874

if.end393:                                        ; preds = %if.then391, %if.end387
  br label %for.inc394, !dbg !2875

for.inc394:                                       ; preds = %if.end393, %if.end386, %if.end378, %if.end90, %if.end82, %if.end39, %if.then31
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2626
  br label %for.cond, !dbg !2626, !llvm.loop !2876

for.end395:                                       ; preds = %if.end20, %for.cond
  %192 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2878
  %tobool396 = icmp ne %struct._IO_FILE* %192, null, !dbg !2878
  br i1 %tobool396, label %if.then397, label %if.end400, !dbg !2880

if.then397:                                       ; preds = %for.end395
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2881
  %call398 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %193, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0)), !dbg !2883
  %194 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2884
  %call399 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %194, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.25, i64 0, i64 0)), !dbg !2885
  br label %if.end400, !dbg !2886

if.end400:                                        ; preds = %if.then397, %for.end395
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !2887
  br label %for.cond401, !dbg !2887

for.cond401:                                      ; preds = %for.inc638, %if.end400
  %195 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2889
  %tobool402 = icmp ne %struct.loop* %195, null, !dbg !2887
  br i1 %tobool402, label %for.body403, label %for.end639, !dbg !2887

for.body403:                                      ; preds = %for.cond401
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head404, metadata !2891, metadata !DIExpression()), !dbg !2893
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail405, metadata !2894, metadata !DIExpression()), !dbg !2895
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %count_reg406, metadata !2896, metadata !DIExpression()), !dbg !2897
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %count_init, metadata !2898, metadata !DIExpression()), !dbg !2899
  call void @llvm.dbg.declare(metadata i32* %mii, metadata !2900, metadata !DIExpression()), !dbg !2901
  call void @llvm.dbg.declare(metadata i32* %rec_mii, metadata !2902, metadata !DIExpression()), !dbg !2903
  call void @llvm.dbg.declare(metadata i32* %stage_count, metadata !2904, metadata !DIExpression()), !dbg !2905
  store i32 0, i32* %stage_count, align 4, !dbg !2905
  call void @llvm.dbg.declare(metadata i64* %loop_count, metadata !2906, metadata !DIExpression()), !dbg !2907
  store i64 0, i64* %loop_count, align 8, !dbg !2907
  %196 = load %struct.ddg**, %struct.ddg*** %g_arr, align 8, !dbg !2908
  %197 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2910
  %num407 = getelementptr inbounds %struct.loop, %struct.loop* %197, i32 0, i32 0, !dbg !2911
  %198 = load i32, i32* %num407, align 8, !dbg !2911
  %idxprom408 = sext i32 %198 to i64, !dbg !2908
  %arrayidx409 = getelementptr inbounds %struct.ddg*, %struct.ddg** %196, i64 %idxprom408, !dbg !2908
  %199 = load %struct.ddg*, %struct.ddg** %arrayidx409, align 8, !dbg !2908
  store %struct.ddg* %199, %struct.ddg** %g, align 8, !dbg !2912
  %tobool410 = icmp ne %struct.ddg* %199, null, !dbg !2912
  br i1 %tobool410, label %if.end412, label %if.then411, !dbg !2913

if.then411:                                       ; preds = %for.body403
  br label %for.inc638, !dbg !2914

if.end412:                                        ; preds = %for.body403
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2915
  %tobool413 = icmp ne %struct._IO_FILE* %200, null, !dbg !2915
  br i1 %tobool413, label %if.then414, label %if.end424, !dbg !2917

if.then414:                                       ; preds = %if.end412
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn415, metadata !2918, metadata !DIExpression()), !dbg !2920
  %201 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2921
  %header416 = getelementptr inbounds %struct.loop, %struct.loop* %201, i32 0, i32 2, !dbg !2921
  %202 = load %struct.basic_block_def*, %struct.basic_block_def** %header416, align 8, !dbg !2921
  %il417 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %202, i32 0, i32 7, !dbg !2921
  %rtl418 = bitcast %union.basic_block_il_dependent* %il417 to %struct.rtl_bb_info**, !dbg !2921
  %203 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl418, align 8, !dbg !2921
  %end_419 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %203, i32 0, i32 1, !dbg !2921
  %204 = load %struct.rtx_def*, %struct.rtx_def** %end_419, align 8, !dbg !2921
  store %struct.rtx_def* %204, %struct.rtx_def** %insn415, align 8, !dbg !2920
  %205 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2922
  %206 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2923
  %num420 = getelementptr inbounds %struct.loop, %struct.loop* %206, i32 0, i32 0, !dbg !2924
  %207 = load i32, i32* %num420, align 8, !dbg !2924
  %208 = load %struct.rtx_def*, %struct.rtx_def** %insn415, align 8, !dbg !2925
  %call421 = call i8* @insn_file(%struct.rtx_def* %208), !dbg !2926
  %209 = load %struct.rtx_def*, %struct.rtx_def** %insn415, align 8, !dbg !2927
  %call422 = call i32 @insn_line(%struct.rtx_def* %209), !dbg !2928
  %call423 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %205, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6, i64 0, i64 0), i32 %207, i8* %call421, i32 %call422), !dbg !2929
  %210 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2930
  %211 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !2931
  call void @print_ddg(%struct._IO_FILE* %210, %struct.ddg* %211), !dbg !2932
  br label %if.end424, !dbg !2933

if.end424:                                        ; preds = %if.then414, %if.end412
  %212 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2934
  %header425 = getelementptr inbounds %struct.loop, %struct.loop* %212, i32 0, i32 2, !dbg !2935
  %213 = load %struct.basic_block_def*, %struct.basic_block_def** %header425, align 8, !dbg !2935
  %214 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2936
  %header426 = getelementptr inbounds %struct.loop, %struct.loop* %214, i32 0, i32 2, !dbg !2937
  %215 = load %struct.basic_block_def*, %struct.basic_block_def** %header426, align 8, !dbg !2937
  call void @get_ebb_head_tail(%struct.basic_block_def* %213, %struct.basic_block_def* %215, %struct.rtx_def** %head404, %struct.rtx_def** %tail405), !dbg !2938
  %216 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2939
  %call427 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %216), !dbg !2940
  store %struct.edge_def* %call427, %struct.edge_def** %latch_edge, align 8, !dbg !2941
  %217 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2942
  %call428 = call %struct.edge_def* @single_exit(%struct.loop* %217), !dbg !2942
  %tobool429 = icmp ne %struct.edge_def* %call428, null, !dbg !2942
  br i1 %tobool429, label %cond.false431, label %cond.true430, !dbg !2942

cond.true430:                                     ; preds = %if.end424
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 1095, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !2942
  br label %cond.end432, !dbg !2942

cond.false431:                                    ; preds = %if.end424
  br label %cond.end432, !dbg !2942

cond.end432:                                      ; preds = %cond.false431, %cond.true430
  %cond433 = phi i32 [ 0, %cond.true430 ], [ 0, %cond.false431 ], !dbg !2942
  %218 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2943
  %call434 = call %struct.edge_def* @single_exit(%struct.loop* %218), !dbg !2945
  %count435 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call434, i32 0, i32 9, !dbg !2946
  %219 = load i64, i64* %count435, align 8, !dbg !2946
  %tobool436 = icmp ne i64 %219, 0, !dbg !2945
  br i1 %tobool436, label %if.then437, label %if.end442, !dbg !2947

if.then437:                                       ; preds = %cond.end432
  %220 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !2948
  %count438 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %220, i32 0, i32 9, !dbg !2949
  %221 = load i64, i64* %count438, align 8, !dbg !2949
  %222 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2950
  %call439 = call %struct.edge_def* @single_exit(%struct.loop* %222), !dbg !2951
  %count440 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call439, i32 0, i32 9, !dbg !2952
  %223 = load i64, i64* %count440, align 8, !dbg !2952
  %div441 = sdiv i64 %221, %223, !dbg !2953
  store i64 %div441, i64* %trip_count, align 8, !dbg !2954
  br label %if.end442, !dbg !2955

if.end442:                                        ; preds = %if.then437, %cond.end432
  %224 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2956
  %tobool443 = icmp ne %struct._IO_FILE* %224, null, !dbg !2956
  br i1 %tobool443, label %if.then444, label %if.end466, !dbg !2958

if.then444:                                       ; preds = %if.end442
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2959
  %226 = load %struct.rtx_def*, %struct.rtx_def** %tail405, align 8, !dbg !2961
  %call445 = call i8* @insn_file(%struct.rtx_def* %226), !dbg !2962
  %227 = load %struct.rtx_def*, %struct.rtx_def** %tail405, align 8, !dbg !2963
  %call446 = call i32 @insn_line(%struct.rtx_def* %227), !dbg !2964
  %call447 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %225, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), i8* %call445, i32 %call446), !dbg !2965
  %228 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2966
  %call448 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %228, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.11, i64 0, i64 0)), !dbg !2967
  %229 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !2968
  %tobool449 = icmp ne %struct.gcov_ctr_summary* %229, null, !dbg !2968
  br i1 %tobool449, label %land.lhs.true450, label %if.end461, !dbg !2970

land.lhs.true450:                                 ; preds = %if.then444
  %230 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !2971
  %tobool451 = icmp ne i32 %230, 0, !dbg !2971
  br i1 %tobool451, label %if.then452, label %if.end461, !dbg !2972

if.then452:                                       ; preds = %land.lhs.true450
  %231 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2973
  %call453 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %231, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0)), !dbg !2975
  %232 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2976
  %233 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2977
  %count454 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %233, i32 0, i32 8, !dbg !2978
  %234 = load i64, i64* %count454, align 8, !dbg !2978
  %call455 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %232, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %234), !dbg !2979
  %235 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2980
  %call456 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %235, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !2981
  %236 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2982
  %call457 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %236, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i64 0, i64 0)), !dbg !2983
  %237 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2984
  %238 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !2985
  %sum_max458 = getelementptr inbounds %struct.gcov_ctr_summary, %struct.gcov_ctr_summary* %238, i32 0, i32 4, !dbg !2986
  %239 = load i64, i64* %sum_max458, align 8, !dbg !2986
  %call459 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %237, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %239), !dbg !2987
  %240 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2988
  %call460 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %240, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !2989
  br label %if.end461, !dbg !2990

if.end461:                                        ; preds = %if.then452, %land.lhs.true450, %if.then444
  %241 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2991
  %call462 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %241, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i64 0, i64 0)), !dbg !2992
  %242 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2993
  %243 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !2994
  %num_nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %243, i32 0, i32 1, !dbg !2995
  %244 = load i32, i32* %num_nodes, align 8, !dbg !2995
  %call463 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %242, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.27, i64 0, i64 0), i32 %244), !dbg !2996
  %245 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2997
  %246 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !2998
  %num_loads = getelementptr inbounds %struct.ddg, %struct.ddg* %246, i32 0, i32 2, !dbg !2999
  %247 = load i32, i32* %num_loads, align 4, !dbg !2999
  %call464 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %245, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0), i32 %247), !dbg !3000
  %248 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3001
  %249 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3002
  %num_stores = getelementptr inbounds %struct.ddg, %struct.ddg* %249, i32 0, i32 3, !dbg !3003
  %250 = load i32, i32* %num_stores, align 8, !dbg !3003
  %call465 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %248, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i64 0, i64 0), i32 %250), !dbg !3004
  br label %if.end466, !dbg !3005

if.end466:                                        ; preds = %if.end461, %if.end442
  store %struct.rtx_def* null, %struct.rtx_def** %count_init, align 8, !dbg !3006
  %251 = load %struct.rtx_def*, %struct.rtx_def** %head404, align 8, !dbg !3007
  %252 = load %struct.rtx_def*, %struct.rtx_def** %tail405, align 8, !dbg !3009
  %call467 = call %struct.rtx_def* @doloop_register_get(%struct.rtx_def* %251, %struct.rtx_def* %252), !dbg !3010
  store %struct.rtx_def* %call467, %struct.rtx_def** %count_reg406, align 8, !dbg !3011
  %tobool468 = icmp ne %struct.rtx_def* %call467, null, !dbg !3011
  br i1 %tobool468, label %if.then469, label %if.end472, !dbg !3012

if.then469:                                       ; preds = %if.end466
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pre_header, metadata !3013, metadata !DIExpression()), !dbg !3015
  %253 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3016
  %call470 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %253), !dbg !3017
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call470, i32 0, i32 0, !dbg !3018
  %254 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3018
  store %struct.basic_block_def* %254, %struct.basic_block_def** %pre_header, align 8, !dbg !3019
  %255 = load %struct.rtx_def*, %struct.rtx_def** %count_reg406, align 8, !dbg !3020
  %256 = load %struct.basic_block_def*, %struct.basic_block_def** %pre_header, align 8, !dbg !3021
  %call471 = call %struct.rtx_def* @const_iteration_count(%struct.rtx_def* %255, %struct.basic_block_def* %256, i64* %loop_count), !dbg !3022
  store %struct.rtx_def* %call471, %struct.rtx_def** %count_init, align 8, !dbg !3023
  br label %if.end472, !dbg !3024

if.end472:                                        ; preds = %if.then469, %if.end466
  %257 = load %struct.rtx_def*, %struct.rtx_def** %count_reg406, align 8, !dbg !3025
  %tobool473 = icmp ne %struct.rtx_def* %257, null, !dbg !3025
  br i1 %tobool473, label %cond.false475, label %cond.true474, !dbg !3025

cond.true474:                                     ; preds = %if.end472
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 1133, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3025
  br label %cond.end476, !dbg !3025

cond.false475:                                    ; preds = %if.end472
  br label %cond.end476, !dbg !3025

cond.end476:                                      ; preds = %cond.false475, %cond.true474
  %cond477 = phi i32 [ 0, %cond.true474 ], [ 0, %cond.false475 ], !dbg !3025
  %258 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3026
  %tobool478 = icmp ne %struct._IO_FILE* %258, null, !dbg !3026
  br i1 %tobool478, label %land.lhs.true479, label %if.end485, !dbg !3028

land.lhs.true479:                                 ; preds = %cond.end476
  %259 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3029
  %tobool480 = icmp ne %struct.rtx_def* %259, null, !dbg !3029
  br i1 %tobool480, label %if.then481, label %if.end485, !dbg !3030

if.then481:                                       ; preds = %land.lhs.true479
  %260 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3031
  %call482 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %260, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.30, i64 0, i64 0)), !dbg !3033
  %261 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3034
  %262 = load i64, i64* %loop_count, align 8, !dbg !3035
  %call483 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %261, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %262), !dbg !3036
  %263 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3037
  %call484 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %263, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !3038
  br label %if.end485, !dbg !3039

if.end485:                                        ; preds = %if.then481, %land.lhs.true479, %cond.end476
  %264 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3040
  %num_nodes486 = getelementptr inbounds %struct.ddg, %struct.ddg* %264, i32 0, i32 1, !dbg !3040
  %265 = load i32, i32* %num_nodes486, align 8, !dbg !3040
  %conv487 = sext i32 %265 to i64, !dbg !3040
  %mul488 = mul i64 4, %conv487, !dbg !3040
  %call489 = call i8* @xmalloc(i64 %mul488), !dbg !3040
  %266 = bitcast i8* %call489 to i32*, !dbg !3040
  store i32* %266, i32** %node_order, align 8, !dbg !3041
  store i32 1, i32* %mii, align 4, !dbg !3042
  %267 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3043
  %268 = load i32, i32* %mii, align 4, !dbg !3044
  %269 = load i32*, i32** %node_order, align 8, !dbg !3045
  %call490 = call i32 @sms_order_nodes(%struct.ddg* %267, i32 %268, i32* %269, i32* %max_asap), !dbg !3046
  store i32 %call490, i32* %rec_mii, align 4, !dbg !3047
  %270 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3048
  %call491 = call i32 @res_MII(%struct.ddg* %270), !dbg !3048
  %271 = load i32, i32* %rec_mii, align 4, !dbg !3048
  %cmp492 = icmp sgt i32 %call491, %271, !dbg !3048
  br i1 %cmp492, label %cond.true494, label %cond.false496, !dbg !3048

cond.true494:                                     ; preds = %if.end485
  %272 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3048
  %call495 = call i32 @res_MII(%struct.ddg* %272), !dbg !3048
  br label %cond.end497, !dbg !3048

cond.false496:                                    ; preds = %if.end485
  %273 = load i32, i32* %rec_mii, align 4, !dbg !3048
  br label %cond.end497, !dbg !3048

cond.end497:                                      ; preds = %cond.false496, %cond.true494
  %cond498 = phi i32 [ %call495, %cond.true494 ], [ %273, %cond.false496 ], !dbg !3048
  store i32 %cond498, i32* %mii, align 4, !dbg !3049
  %274 = load i32, i32* %max_asap, align 4, !dbg !3050
  %275 = load i32, i32* %mii, align 4, !dbg !3050
  %mul499 = mul nsw i32 2, %275, !dbg !3050
  %cmp500 = icmp sgt i32 %274, %mul499, !dbg !3050
  br i1 %cmp500, label %cond.true502, label %cond.false503, !dbg !3050

cond.true502:                                     ; preds = %cond.end497
  %276 = load i32, i32* %max_asap, align 4, !dbg !3050
  br label %cond.end505, !dbg !3050

cond.false503:                                    ; preds = %cond.end497
  %277 = load i32, i32* %mii, align 4, !dbg !3050
  %mul504 = mul nsw i32 2, %277, !dbg !3050
  br label %cond.end505, !dbg !3050

cond.end505:                                      ; preds = %cond.false503, %cond.true502
  %cond506 = phi i32 [ %276, %cond.true502 ], [ %mul504, %cond.false503 ], !dbg !3050
  store i32 %cond506, i32* %maxii, align 4, !dbg !3051
  %278 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3052
  %tobool507 = icmp ne %struct._IO_FILE* %278, null, !dbg !3052
  br i1 %tobool507, label %if.then508, label %if.end510, !dbg !3054

if.then508:                                       ; preds = %cond.end505
  %279 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3055
  %280 = load i32, i32* %rec_mii, align 4, !dbg !3056
  %281 = load i32, i32* %mii, align 4, !dbg !3057
  %282 = load i32, i32* %maxii, align 4, !dbg !3058
  %call509 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %279, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.31, i64 0, i64 0), i32 %280, i32 %281, i32 %282), !dbg !3059
  br label %if.end510, !dbg !3059

if.end510:                                        ; preds = %if.then508, %cond.end505
  %283 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3060
  call void @set_node_sched_params(%struct.ddg* %283), !dbg !3061
  %284 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3062
  %285 = load i32, i32* %mii, align 4, !dbg !3063
  %286 = load i32, i32* %maxii, align 4, !dbg !3064
  %287 = load i32*, i32** %node_order, align 8, !dbg !3065
  %call511 = call %struct.partial_schedule* @sms_schedule_by_order(%struct.ddg* %284, i32 %285, i32 %286, i32* %287), !dbg !3066
  store %struct.partial_schedule* %call511, %struct.partial_schedule** %ps, align 8, !dbg !3067
  %288 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3068
  %tobool512 = icmp ne %struct.partial_schedule* %288, null, !dbg !3068
  br i1 %tobool512, label %if.then513, label %if.end524, !dbg !3070

if.then513:                                       ; preds = %if.end510
  %289 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3071
  %max_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %289, i32 0, i32 4, !dbg !3071
  %290 = load i32, i32* %max_cycle, align 4, !dbg !3071
  %291 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3071
  %min_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %291, i32 0, i32 3, !dbg !3071
  %292 = load i32, i32* %min_cycle, align 8, !dbg !3071
  %sub = sub nsw i32 %290, %292, !dbg !3071
  %add = add nsw i32 %sub, 1, !dbg !3071
  %293 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3071
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %293, i32 0, i32 0, !dbg !3071
  %294 = load i32, i32* %ii, align 8, !dbg !3071
  %add514 = add nsw i32 %add, %294, !dbg !3071
  %sub515 = sub nsw i32 %add514, 1, !dbg !3071
  %295 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3071
  %ii516 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %295, i32 0, i32 0, !dbg !3071
  %296 = load i32, i32* %ii516, align 8, !dbg !3071
  %div517 = sdiv i32 %sub515, %296, !dbg !3071
  store i32 %div517, i32* %stage_count, align 4, !dbg !3073
  %297 = load i32, i32* %stage_count, align 4, !dbg !3074
  %cmp518 = icmp uge i32 %297, 1, !dbg !3074
  br i1 %cmp518, label %cond.false521, label %cond.true520, !dbg !3074

cond.true520:                                     ; preds = %if.then513
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 1162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3074
  br label %cond.end522, !dbg !3074

cond.false521:                                    ; preds = %if.then513
  br label %cond.end522, !dbg !3074

cond.end522:                                      ; preds = %cond.false521, %cond.true520
  %cond523 = phi i32 [ 0, %cond.true520 ], [ 0, %cond.false521 ], !dbg !3074
  br label %if.end524, !dbg !3075

if.end524:                                        ; preds = %cond.end522, %if.end510
  %298 = load i32, i32* %stage_count, align 4, !dbg !3076
  %cmp525 = icmp ule i32 %298, 1, !dbg !3078
  br i1 %cmp525, label %if.then539, label %lor.lhs.false527, !dbg !3079

lor.lhs.false527:                                 ; preds = %if.end524
  %299 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3080
  %tobool528 = icmp ne %struct.rtx_def* %299, null, !dbg !3080
  br i1 %tobool528, label %land.lhs.true529, label %lor.lhs.false533, !dbg !3081

land.lhs.true529:                                 ; preds = %lor.lhs.false527
  %300 = load i64, i64* %loop_count, align 8, !dbg !3082
  %301 = load i32, i32* %stage_count, align 4, !dbg !3083
  %conv530 = zext i32 %301 to i64, !dbg !3083
  %cmp531 = icmp sle i64 %300, %conv530, !dbg !3084
  br i1 %cmp531, label %if.then539, label %lor.lhs.false533, !dbg !3085

lor.lhs.false533:                                 ; preds = %land.lhs.true529, %lor.lhs.false527
  %302 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !3086
  %tobool534 = icmp ne i32 %302, 0, !dbg !3086
  br i1 %tobool534, label %land.lhs.true535, label %if.else549, !dbg !3087

land.lhs.true535:                                 ; preds = %lor.lhs.false533
  %303 = load i64, i64* %trip_count, align 8, !dbg !3088
  %304 = load i32, i32* %stage_count, align 4, !dbg !3089
  %conv536 = zext i32 %304 to i64, !dbg !3089
  %cmp537 = icmp sle i64 %303, %conv536, !dbg !3090
  br i1 %cmp537, label %if.then539, label %if.else549, !dbg !3091

if.then539:                                       ; preds = %land.lhs.true535, %land.lhs.true529, %if.end524
  %305 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3092
  %tobool540 = icmp ne %struct._IO_FILE* %305, null, !dbg !3092
  br i1 %tobool540, label %if.then541, label %if.end548, !dbg !3095

if.then541:                                       ; preds = %if.then539
  %306 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3096
  %call542 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %306, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.32, i64 0, i64 0)), !dbg !3098
  %307 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3099
  %308 = load i32, i32* %stage_count, align 4, !dbg !3100
  %call543 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %307, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.33, i64 0, i64 0), i32 %308), !dbg !3101
  %309 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3102
  %310 = load i64, i64* %loop_count, align 8, !dbg !3103
  %call544 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %309, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %310), !dbg !3104
  %311 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3105
  %call545 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %311, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.34, i64 0, i64 0)), !dbg !3106
  %312 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3107
  %313 = load i64, i64* %trip_count, align 8, !dbg !3108
  %call546 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %312, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %313), !dbg !3109
  %314 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3110
  %call547 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %314, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i64 0, i64 0)), !dbg !3111
  br label %if.end548, !dbg !3112

if.end548:                                        ; preds = %if.then541, %if.then539
  br label %for.inc638, !dbg !3113

if.else549:                                       ; preds = %land.lhs.true535, %lor.lhs.false533
  call void @llvm.dbg.declare(metadata %struct.undo_replace_buff_elem** %reg_move_replaces, metadata !3114, metadata !DIExpression()), !dbg !3116
  %315 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3117
  %tobool550 = icmp ne %struct._IO_FILE* %315, null, !dbg !3117
  br i1 %tobool550, label %if.then551, label %if.end557, !dbg !3119

if.then551:                                       ; preds = %if.else549
  %316 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3120
  %317 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3122
  %ii552 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %317, i32 0, i32 0, !dbg !3123
  %318 = load i32, i32* %ii552, align 8, !dbg !3123
  %319 = load i32, i32* %stage_count, align 4, !dbg !3124
  %call553 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %316, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.36, i64 0, i64 0), i32 %318, i32 %319), !dbg !3125
  %320 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3126
  %321 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3127
  call void @print_partial_schedule(%struct.partial_schedule* %320, %struct._IO_FILE* %321), !dbg !3128
  %322 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3129
  %323 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3130
  %closing_branch = getelementptr inbounds %struct.ddg, %struct.ddg* %323, i32 0, i32 6, !dbg !3131
  %324 = load %struct.ddg_node*, %struct.ddg_node** %closing_branch, align 8, !dbg !3131
  %cuid = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %324, i32 0, i32 0, !dbg !3132
  %325 = load i32, i32* %cuid, align 8, !dbg !3132
  %326 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3133
  %min_cycle554 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %326, i32 0, i32 3, !dbg !3133
  %327 = load i32, i32* %min_cycle554, align 8, !dbg !3133
  %sub555 = sub nsw i32 %327, 1, !dbg !3134
  %call556 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %322, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.37, i64 0, i64 0), i32 %325, i32 %sub555), !dbg !3135
  br label %if.end557, !dbg !3136

if.end557:                                        ; preds = %if.then551, %if.else549
  %328 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3137
  call void @normalize_sched_times(%struct.partial_schedule* %328), !dbg !3138
  %329 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3139
  %330 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3140
  %min_cycle558 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %330, i32 0, i32 3, !dbg !3140
  %331 = load i32, i32* %min_cycle558, align 8, !dbg !3140
  call void @rotate_partial_schedule(%struct.partial_schedule* %329, i32 %331), !dbg !3141
  %332 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3142
  call void @set_columns_for_ps(%struct.partial_schedule* %332), !dbg !3143
  %333 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3144
  call void @canon_loop(%struct.loop* %333), !dbg !3145
  %334 = load %struct.rtx_def*, %struct.rtx_def** %count_reg406, align 8, !dbg !3146
  %tobool559 = icmp ne %struct.rtx_def* %334, null, !dbg !3146
  br i1 %tobool559, label %land.lhs.true560, label %if.end568, !dbg !3148

land.lhs.true560:                                 ; preds = %if.end557
  %335 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3149
  %tobool561 = icmp ne %struct.rtx_def* %335, null, !dbg !3149
  br i1 %tobool561, label %if.end568, label %if.then562, !dbg !3150

if.then562:                                       ; preds = %land.lhs.true560
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %comp_rtx, metadata !3151, metadata !DIExpression()), !dbg !3153
  %336 = load %struct.rtx_def*, %struct.rtx_def** %count_reg406, align 8, !dbg !3154
  %337 = load i32, i32* %stage_count, align 4, !dbg !3154
  %conv563 = zext i32 %337 to i64, !dbg !3154
  %call564 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv563), !dbg !3154
  %call565 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 83, i32 0, %struct.rtx_def* %336, %struct.rtx_def* %call564), !dbg !3154
  store %struct.rtx_def* %call565, %struct.rtx_def** %comp_rtx, align 8, !dbg !3153
  call void @llvm.dbg.declare(metadata i32* %prob, metadata !3155, metadata !DIExpression()), !dbg !3156
  store i32 8000, i32* %prob, align 4, !dbg !3156
  %338 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3157
  %339 = load %struct.rtx_def*, %struct.rtx_def** %comp_rtx, align 8, !dbg !3158
  %340 = bitcast %struct.rtx_def* %339 to i8*, !dbg !3158
  %341 = load i32, i32* %prob, align 4, !dbg !3159
  %342 = load i32, i32* %prob, align 4, !dbg !3160
  %343 = load i32, i32* %prob, align 4, !dbg !3161
  %sub566 = sub i32 10000, %343, !dbg !3162
  %call567 = call %struct.loop* @loop_version(%struct.loop* %338, i8* %340, %struct.basic_block_def** %condition_bb, i32 %341, i32 %342, i32 %sub566, i8 zeroext 1), !dbg !3163
  br label %if.end568, !dbg !3164

if.end568:                                        ; preds = %if.then562, %land.lhs.true560, %if.end557
  %344 = load %struct.rtx_def*, %struct.rtx_def** %count_reg406, align 8, !dbg !3165
  %tobool569 = icmp ne %struct.rtx_def* %344, null, !dbg !3165
  br i1 %tobool569, label %land.lhs.true570, label %if.end625, !dbg !3167

land.lhs.true570:                                 ; preds = %if.end568
  %345 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3168
  %tobool571 = icmp ne %struct.rtx_def* %345, null, !dbg !3168
  br i1 %tobool571, label %if.then572, label %if.end625, !dbg !3169

if.then572:                                       ; preds = %land.lhs.true570
  %346 = load i64, i64* %loop_count, align 8, !dbg !3170
  %347 = load i32, i32* %stage_count, align 4, !dbg !3170
  %conv573 = zext i32 %347 to i64, !dbg !3170
  %sub574 = sub nsw i64 %346, %conv573, !dbg !3170
  %add575 = add nsw i64 %sub574, 1, !dbg !3170
  %call576 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add575), !dbg !3170
  %348 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3171
  %349 = bitcast %struct.rtx_def* %348 to i32*, !dbg !3171
  %bf.load577 = load i32, i32* %349, align 8, !dbg !3171
  %bf.clear578 = and i32 %bf.load577, 65535, !dbg !3171
  %cmp579 = icmp eq i32 %bf.clear578, 8, !dbg !3171
  br i1 %cmp579, label %cond.true596, label %lor.lhs.false581, !dbg !3171

lor.lhs.false581:                                 ; preds = %if.then572
  %350 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3171
  %351 = bitcast %struct.rtx_def* %350 to i32*, !dbg !3171
  %bf.load582 = load i32, i32* %351, align 8, !dbg !3171
  %bf.clear583 = and i32 %bf.load582, 65535, !dbg !3171
  %cmp584 = icmp eq i32 %bf.clear583, 7, !dbg !3171
  br i1 %cmp584, label %cond.true596, label %lor.lhs.false586, !dbg !3171

lor.lhs.false586:                                 ; preds = %lor.lhs.false581
  %352 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3171
  %353 = bitcast %struct.rtx_def* %352 to i32*, !dbg !3171
  %bf.load587 = load i32, i32* %353, align 8, !dbg !3171
  %bf.clear588 = and i32 %bf.load587, 65535, !dbg !3171
  %cmp589 = icmp eq i32 %bf.clear588, 9, !dbg !3171
  br i1 %cmp589, label %cond.true596, label %lor.lhs.false591, !dbg !3171

lor.lhs.false591:                                 ; preds = %lor.lhs.false586
  %354 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3171
  %355 = bitcast %struct.rtx_def* %354 to i32*, !dbg !3171
  %bf.load592 = load i32, i32* %355, align 8, !dbg !3171
  %bf.clear593 = and i32 %bf.load592, 65535, !dbg !3171
  %cmp594 = icmp eq i32 %bf.clear593, 10, !dbg !3171
  br i1 %cmp594, label %cond.true596, label %cond.false618, !dbg !3171

cond.true596:                                     ; preds = %lor.lhs.false591, %lor.lhs.false586, %lor.lhs.false581, %if.then572
  %356 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3171
  %u597 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %356, i32 0, i32 1, !dbg !3171
  %fld598 = bitcast %union.u* %u597 to [1 x %union.rtunion_def]*, !dbg !3171
  %arrayidx599 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld598, i64 0, i64 5, !dbg !3171
  %rt_rtx600 = bitcast %union.rtunion_def* %arrayidx599 to %struct.rtx_def**, !dbg !3171
  %357 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx600, align 8, !dbg !3171
  %358 = bitcast %struct.rtx_def* %357 to i32*, !dbg !3171
  %bf.load601 = load i32, i32* %358, align 8, !dbg !3171
  %bf.clear602 = and i32 %bf.load601, 65535, !dbg !3171
  %cmp603 = icmp eq i32 %bf.clear602, 23, !dbg !3171
  br i1 %cmp603, label %cond.true605, label %cond.false610, !dbg !3171

cond.true605:                                     ; preds = %cond.true596
  %359 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3171
  %u606 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %359, i32 0, i32 1, !dbg !3171
  %fld607 = bitcast %union.u* %u606 to [1 x %union.rtunion_def]*, !dbg !3171
  %arrayidx608 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld607, i64 0, i64 5, !dbg !3171
  %rt_rtx609 = bitcast %union.rtunion_def* %arrayidx608 to %struct.rtx_def**, !dbg !3171
  %360 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx609, align 8, !dbg !3171
  br label %cond.end616, !dbg !3171

cond.false610:                                    ; preds = %cond.true596
  %361 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3171
  %362 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3171
  %u611 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %362, i32 0, i32 1, !dbg !3171
  %fld612 = bitcast %union.u* %u611 to [1 x %union.rtunion_def]*, !dbg !3171
  %arrayidx613 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld612, i64 0, i64 5, !dbg !3171
  %rt_rtx614 = bitcast %union.rtunion_def* %arrayidx613 to %struct.rtx_def**, !dbg !3171
  %363 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx614, align 8, !dbg !3171
  %call615 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %361, %struct.rtx_def* %363), !dbg !3171
  br label %cond.end616, !dbg !3171

cond.end616:                                      ; preds = %cond.false610, %cond.true605
  %cond617 = phi %struct.rtx_def* [ %360, %cond.true605 ], [ %call615, %cond.false610 ], !dbg !3171
  br label %cond.end619, !dbg !3171

cond.false618:                                    ; preds = %lor.lhs.false591
  br label %cond.end619, !dbg !3171

cond.end619:                                      ; preds = %cond.false618, %cond.end616
  %cond620 = phi %struct.rtx_def* [ %cond617, %cond.end616 ], [ null, %cond.false618 ], !dbg !3171
  %u621 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond620, i32 0, i32 1, !dbg !3171
  %fld622 = bitcast %union.u* %u621 to [1 x %union.rtunion_def]*, !dbg !3171
  %arrayidx623 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld622, i64 0, i64 1, !dbg !3171
  %rt_rtx624 = bitcast %union.rtunion_def* %arrayidx623 to %struct.rtx_def**, !dbg !3171
  store %struct.rtx_def* %call576, %struct.rtx_def** %rt_rtx624, align 8, !dbg !3172
  br label %if.end625, !dbg !3171

if.end625:                                        ; preds = %cond.end619, %land.lhs.true570, %if.end568
  %364 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3173
  %365 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3174
  %closing_branch626 = getelementptr inbounds %struct.ddg, %struct.ddg* %365, i32 0, i32 6, !dbg !3175
  %366 = load %struct.ddg_node*, %struct.ddg_node** %closing_branch626, align 8, !dbg !3175
  %first_note = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %366, i32 0, i32 2, !dbg !3176
  %367 = load %struct.rtx_def*, %struct.rtx_def** %first_note, align 8, !dbg !3176
  call void @permute_partial_schedule(%struct.partial_schedule* %364, %struct.rtx_def* %367), !dbg !3177
  %368 = load i32, i32* @flag_resched_modulo_sched, align 4, !dbg !3178
  %tobool627 = icmp ne i32 %368, 0, !dbg !3178
  br i1 %tobool627, label %if.end630, label %if.then628, !dbg !3180

if.then628:                                       ; preds = %if.end625
  %369 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3181
  %bb629 = getelementptr inbounds %struct.ddg, %struct.ddg* %369, i32 0, i32 0, !dbg !3182
  %370 = load %struct.basic_block_def*, %struct.basic_block_def** %bb629, align 8, !dbg !3182
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %370, i32 0, i32 13, !dbg !3183
  %371 = load i32, i32* %flags, align 8, !dbg !3184
  %or = or i32 %371, 16, !dbg !3184
  store i32 %or, i32* %flags, align 8, !dbg !3184
  br label %if.end630, !dbg !3181

if.end630:                                        ; preds = %if.then628, %if.end625
  %372 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3185
  %bb631 = getelementptr inbounds %struct.ddg, %struct.ddg* %372, i32 0, i32 0, !dbg !3186
  %373 = load %struct.basic_block_def*, %struct.basic_block_def** %bb631, align 8, !dbg !3186
  call void @df_set_bb_dirty(%struct.basic_block_def* %373), !dbg !3187
  %374 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3188
  %call632 = call %struct.undo_replace_buff_elem* @generate_reg_moves(%struct.partial_schedule* %374, i8 zeroext 1), !dbg !3189
  store %struct.undo_replace_buff_elem* %call632, %struct.undo_replace_buff_elem** %reg_move_replaces, align 8, !dbg !3190
  %375 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3191
  %tobool633 = icmp ne %struct._IO_FILE* %375, null, !dbg !3191
  br i1 %tobool633, label %if.then634, label %if.end636, !dbg !3193

if.then634:                                       ; preds = %if.end630
  %376 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3194
  %377 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3195
  %num_nodes635 = getelementptr inbounds %struct.ddg, %struct.ddg* %377, i32 0, i32 1, !dbg !3196
  %378 = load i32, i32* %num_nodes635, align 8, !dbg !3196
  %379 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3197
  call void @print_node_sched_params(%struct._IO_FILE* %376, i32 %378, %struct.ddg* %379), !dbg !3198
  br label %if.end636, !dbg !3198

if.end636:                                        ; preds = %if.then634, %if.end630
  %380 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3199
  %381 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3200
  %382 = load %struct.rtx_def*, %struct.rtx_def** %count_reg406, align 8, !dbg !3201
  %383 = load %struct.rtx_def*, %struct.rtx_def** %count_init, align 8, !dbg !3202
  call void @generate_prolog_epilog(%struct.partial_schedule* %380, %struct.loop* %381, %struct.rtx_def* %382, %struct.rtx_def* %383), !dbg !3203
  %384 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %reg_move_replaces, align 8, !dbg !3204
  call void @free_undo_replace_buff(%struct.undo_replace_buff_elem* %384), !dbg !3205
  br label %if.end637

if.end637:                                        ; preds = %if.end636
  %385 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3206
  call void @free_partial_schedule(%struct.partial_schedule* %385), !dbg !3207
  %386 = load %struct.node_sched_params*, %struct.node_sched_params** @node_sched_params, align 8, !dbg !3208
  %387 = bitcast %struct.node_sched_params* %386 to i8*, !dbg !3208
  call void @free(i8* %387), !dbg !3209
  %388 = load i32*, i32** %node_order, align 8, !dbg !3210
  %389 = bitcast i32* %388 to i8*, !dbg !3210
  call void @free(i8* %389), !dbg !3211
  %390 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !3212
  call void @free_ddg(%struct.ddg* %390), !dbg !3213
  br label %for.inc638, !dbg !3214

for.inc638:                                       ; preds = %if.end637, %if.end548, %if.then411
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2889
  br label %for.cond401, !dbg !2889, !llvm.loop !3215

for.end639:                                       ; preds = %for.cond401
  %391 = load %struct.ddg**, %struct.ddg*** %g_arr, align 8, !dbg !3217
  %392 = bitcast %struct.ddg** %391 to i8*, !dbg !3217
  call void @free(i8* %392), !dbg !3218
  call void @haifa_sched_finish(), !dbg !3219
  call void @loop_optimizer_finalize(), !dbg !3220
  br label %return, !dbg !3221

return:                                           ; preds = %for.end639, %if.then
  ret void, !dbg !3221
}

declare dso_local i32 @max_reg_num() #2

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @cfg_layout_finalize() #2

declare dso_local void @loop_optimizer_init(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !3222 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3223
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3223
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3223
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3223
  %tobool = icmp ne %struct.loops* %1, null, !dbg !3223
  br i1 %tobool, label %if.end, label %if.then, !dbg !3225

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3226
  br label %return, !dbg !3226

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3227
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3227
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !3227
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !3227
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !3227
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3227
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !3227
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3227

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3227
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3227
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !3227
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !3227
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !3227
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !3227
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !3227
  br label %cond.end, !dbg !3227

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3227

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3227
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3227
  store i32 %call, i32* %retval, align 4, !dbg !3228
  br label %return, !dbg !3228

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3229
  ret i32 %8, !dbg !3229
}

declare dso_local void @loop_optimizer_finalize() #2

; Function Attrs: noinline nounwind uwtable
define internal void @setup_sched_infos() #0 !dbg !3230 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.common_sched_info_def* @sms_common_sched_info to i8*), i8* align 8 bitcast (%struct.common_sched_info_def* @haifa_common_sched_info to i8*), i64 40, i1 false), !dbg !3231
  store i32 3, i32* getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @sms_common_sched_info, i32 0, i32 4), align 8, !dbg !3232
  store %struct.common_sched_info_def* @sms_common_sched_info, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !3233
  store %struct.sched_deps_info_def* @sms_sched_deps_info, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !3234
  store %struct.haifa_sched_info* @sms_sched_info, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !3235
  ret void, !dbg !3236
}

declare dso_local void @haifa_sched_init() #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !3237 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3242, metadata !DIExpression()), !dbg !3243
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3244, metadata !DIExpression()), !dbg !3245
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3246, metadata !DIExpression()), !dbg !3247
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !3248, metadata !DIExpression()), !dbg !3249
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3250, metadata !DIExpression()), !dbg !3251
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !3252, metadata !DIExpression()), !dbg !3253
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3254
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !3255
  store i32 0, i32* %idx, align 8, !dbg !3256
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3257
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3257
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3257
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3257
  %tobool = icmp ne %struct.loops* %2, null, !dbg !3257
  br i1 %tobool, label %if.end, label %if.then, !dbg !3259

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3260
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !3262
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3263
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3264
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !3265
  br label %return, !dbg !3266

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !3267
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !3267
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3268
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !3269
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !3270
  %6 = load i32, i32* %flags.addr, align 4, !dbg !3271
  %and = and i32 %6, 1, !dbg !3272
  %tobool3 = icmp ne i32 %and, 0, !dbg !3273
  %7 = zext i1 %tobool3 to i64, !dbg !3273
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !3273
  store i32 %cond, i32* %mn, align 4, !dbg !3274
  %8 = load i32, i32* %flags.addr, align 4, !dbg !3275
  %and4 = and i32 %8, 4, !dbg !3277
  %tobool5 = icmp ne i32 %and4, 0, !dbg !3277
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3278

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !3279
  br label %for.cond, !dbg !3282

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3283
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3283
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !3283
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !3283
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !3283
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3283
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !3283
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !3283

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3283
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3283
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !3283
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !3283
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !3283
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !3283
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !3283
  br label %cond.end, !dbg !3283

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3283

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3283
  %15 = load i32, i32* %i, align 4, !dbg !3283
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !3283
  %tobool15 = icmp ne i32 %call14, 0, !dbg !3285
  br i1 %tobool15, label %for.body, label %for.end, !dbg !3285

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3286
  %cmp = icmp ne %struct.loop* %16, null, !dbg !3288
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !3289

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3290
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !3291
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3291
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !3292
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !3293

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3294
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !3295
  %20 = load i32, i32* %num, align 8, !dbg !3295
  %21 = load i32, i32* %mn, align 4, !dbg !3296
  %cmp18 = icmp sge i32 %20, %21, !dbg !3297
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !3298

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3299
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !3299
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !3299
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !3299
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !3299

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3299
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !3299
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !3299
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !3299
  br label %cond.end26, !dbg !3299

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !3299

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !3299
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3299
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !3299
  %27 = load i32, i32* %num28, align 8, !dbg !3299
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !3299
  br label %if.end30, !dbg !3299

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !3296

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !3300
  %inc = add i32 %28, 1, !dbg !3300
  store i32 %inc, i32* %i, align 4, !dbg !3300
  br label %for.cond, !dbg !3301, !llvm.loop !3302

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !3304

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !3305
  %and31 = and i32 %29, 2, !dbg !3307
  %tobool32 = icmp ne i32 %and31, 0, !dbg !3307
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !3308

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3309
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !3309
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !3309
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !3309
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !3312
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !3312
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !3313
  br label %for.cond36, !dbg !3314

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3315
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !3317
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !3317
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !3318
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !3319

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !3320

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3321
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !3322
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !3322
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !3323
  br label %for.cond36, !dbg !3324, !llvm.loop !3325

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !3327

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3328
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !3331
  %38 = load i32, i32* %num43, align 8, !dbg !3331
  %39 = load i32, i32* %mn, align 4, !dbg !3332
  %cmp44 = icmp sge i32 %38, %39, !dbg !3333
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !3334

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3335
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !3335
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !3335
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !3335
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !3335

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3335
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !3335
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !3335
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !3335
  br label %cond.end52, !dbg !3335

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !3335

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !3335
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3335
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !3335
  %45 = load i32, i32* %num54, align 8, !dbg !3335
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !3335
  br label %if.end56, !dbg !3335

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3336
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !3338
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !3338
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !3336
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !3339

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3340
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !3343
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !3343
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !3344
  br label %for.cond60, !dbg !3345

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3346
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !3348
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !3348
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !3349
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !3350

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !3351

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3352
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !3353
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !3353
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !3354
  br label %for.cond60, !dbg !3355, !llvm.loop !3356

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !3358

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3359
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !3361
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !3361
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !3362

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !3363

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3364
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !3365
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !3366
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !3327, !llvm.loop !3367

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !3369

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3370
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !3370
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !3370
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !3370
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !3372
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !3372
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !3373
  br label %while.body79, !dbg !3374

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3375
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !3378
  %60 = load i32, i32* %num80, align 8, !dbg !3378
  %61 = load i32, i32* %mn, align 4, !dbg !3379
  %cmp81 = icmp sge i32 %60, %61, !dbg !3380
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !3381

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3382
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !3382
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !3382
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !3382
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !3382

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3382
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !3382
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !3382
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !3382
  br label %cond.end89, !dbg !3382

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !3382

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !3382
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3382
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !3382
  %67 = load i32, i32* %num91, align 8, !dbg !3382
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !3382
  br label %if.end93, !dbg !3382

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3383
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !3385
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !3385
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !3386
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !3387

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3388
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !3389
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !3389
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !3390
  br label %if.end110, !dbg !3391

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !3392

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3394
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !3395
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !3396

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3397
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !3398
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !3398
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !3399
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !3400
  br i1 %75, label %while.body103, label %while.end105, !dbg !3392

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3401
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !3402
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !3403
  br label %while.cond99, !dbg !3392, !llvm.loop !3404

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3406
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !3408
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !3409

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !3410

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3411
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !3412
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !3412
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !3413
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !3374, !llvm.loop !3414

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3416
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3417
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !3418
  br label %return, !dbg !3419

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !3419
}

declare dso_local zeroext i8 @dbg_cnt(i32) #2

declare dso_local i8* @insn_file(%struct.rtx_def*) #2

declare dso_local i32 @insn_line(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_canon_p(%struct.loop* %loop) #0 !dbg !3420 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %insn40 = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3423, metadata !DIExpression()), !dbg !3424
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3425
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 8, !dbg !3427
  %1 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3427
  %tobool = icmp ne %struct.loop* %1, null, !dbg !3425
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3428

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3429
  %call = call %struct.loop* @loop_outer(%struct.loop* %2), !dbg !3430
  %tobool1 = icmp ne %struct.loop* %call, null, !dbg !3430
  br i1 %tobool1, label %if.end5, label %if.then, !dbg !3431

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3432
  %tobool2 = icmp ne %struct._IO_FILE* %3, null, !dbg !3432
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !3435

if.then3:                                         ; preds = %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3436
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)), !dbg !3437
  br label %if.end, !dbg !3437

if.end:                                           ; preds = %if.then3, %if.then
  store i8 0, i8* %retval, align 1, !dbg !3438
  br label %return, !dbg !3438

if.end5:                                          ; preds = %lor.lhs.false
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3439
  %call6 = call %struct.edge_def* @single_exit(%struct.loop* %5), !dbg !3441
  %tobool7 = icmp ne %struct.edge_def* %call6, null, !dbg !3441
  br i1 %tobool7, label %if.end16, label %if.then8, !dbg !3442

if.then8:                                         ; preds = %if.end5
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3443
  %tobool9 = icmp ne %struct._IO_FILE* %6, null, !dbg !3443
  br i1 %tobool9, label %if.then10, label %if.end15, !dbg !3446

if.then10:                                        ; preds = %if.then8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3447, metadata !DIExpression()), !dbg !3449
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3450
  %header = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 2, !dbg !3450
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3450
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !3450
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3450
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3450
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 1, !dbg !3450
  %10 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3450
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !3449
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3451
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0)), !dbg !3452
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3453
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3454
  %call12 = call i8* @insn_file(%struct.rtx_def* %13), !dbg !3455
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3456
  %call13 = call i32 @insn_line(%struct.rtx_def* %14), !dbg !3457
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), i8* %call12, i32 %call13), !dbg !3458
  br label %if.end15, !dbg !3459

if.end15:                                         ; preds = %if.then10, %if.then8
  store i8 0, i8* %retval, align 1, !dbg !3460
  br label %return, !dbg !3460

if.end16:                                         ; preds = %if.end5
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3461
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 6, !dbg !3461
  %16 = load i32, i32* %num_nodes, align 4, !dbg !3461
  %cmp = icmp ult i32 %16, 3, !dbg !3461
  br i1 %cmp, label %land.lhs.true, label %land.lhs.true34, !dbg !3461

land.lhs.true:                                    ; preds = %if.end16
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3461
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 3, !dbg !3461
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3461
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 0, !dbg !3461
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !3461
  %tobool17 = icmp ne %struct.VEC_edge_gc* %19, null, !dbg !3461
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !3461

cond.true:                                        ; preds = %land.lhs.true
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3461
  %latch18 = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 3, !dbg !3461
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %latch18, align 8, !dbg !3461
  %preds19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 0, !dbg !3461
  %22 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds19, align 8, !dbg !3461
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %22, i32 0, i32 0, !dbg !3461
  br label %cond.end, !dbg !3461

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3461

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3461
  %call20 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3461
  %cmp21 = icmp eq i32 %call20, 1, !dbg !3461
  br i1 %cmp21, label %land.lhs.true22, label %land.lhs.true34, !dbg !3461

land.lhs.true22:                                  ; preds = %cond.end
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3461
  %latch23 = getelementptr inbounds %struct.loop, %struct.loop* %23, i32 0, i32 3, !dbg !3461
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %latch23, align 8, !dbg !3461
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 1, !dbg !3461
  %25 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3461
  %tobool24 = icmp ne %struct.VEC_edge_gc* %25, null, !dbg !3461
  br i1 %tobool24, label %cond.true25, label %cond.false29, !dbg !3461

cond.true25:                                      ; preds = %land.lhs.true22
  %26 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3461
  %latch26 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 3, !dbg !3461
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %latch26, align 8, !dbg !3461
  %succs27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 1, !dbg !3461
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs27, align 8, !dbg !3461
  %base28 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %28, i32 0, i32 0, !dbg !3461
  br label %cond.end30, !dbg !3461

cond.false29:                                     ; preds = %land.lhs.true22
  br label %cond.end30, !dbg !3461

cond.end30:                                       ; preds = %cond.false29, %cond.true25
  %cond31 = phi %struct.VEC_edge_base* [ %base28, %cond.true25 ], [ null, %cond.false29 ], !dbg !3461
  %call32 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond31), !dbg !3461
  %cmp33 = icmp eq i32 %call32, 1, !dbg !3461
  br i1 %cmp33, label %if.end50, label %land.lhs.true34, !dbg !3463

land.lhs.true34:                                  ; preds = %cond.end30, %cond.end, %if.end16
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3464
  %call35 = call zeroext i8 @loop_single_full_bb_p(%struct.loop* %29), !dbg !3465
  %tobool36 = icmp ne i8 %call35, 0, !dbg !3465
  br i1 %tobool36, label %if.end50, label %if.then37, !dbg !3466

if.then37:                                        ; preds = %land.lhs.true34
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3467
  %tobool38 = icmp ne %struct._IO_FILE* %30, null, !dbg !3467
  br i1 %tobool38, label %if.then39, label %if.end49, !dbg !3470

if.then39:                                        ; preds = %if.then37
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn40, metadata !3471, metadata !DIExpression()), !dbg !3473
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3474
  %header41 = getelementptr inbounds %struct.loop, %struct.loop* %31, i32 0, i32 2, !dbg !3474
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %header41, align 8, !dbg !3474
  %il42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 7, !dbg !3474
  %rtl43 = bitcast %union.basic_block_il_dependent* %il42 to %struct.rtl_bb_info**, !dbg !3474
  %33 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl43, align 8, !dbg !3474
  %end_44 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %33, i32 0, i32 1, !dbg !3474
  %34 = load %struct.rtx_def*, %struct.rtx_def** %end_44, align 8, !dbg !3474
  store %struct.rtx_def* %34, %struct.rtx_def** %insn40, align 8, !dbg !3473
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3475
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.41, i64 0, i64 0)), !dbg !3476
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3477
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn40, align 8, !dbg !3478
  %call46 = call i8* @insn_file(%struct.rtx_def* %37), !dbg !3479
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn40, align 8, !dbg !3480
  %call47 = call i32 @insn_line(%struct.rtx_def* %38), !dbg !3481
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0), i8* %call46, i32 %call47), !dbg !3482
  br label %if.end49, !dbg !3483

if.end49:                                         ; preds = %if.then39, %if.then37
  store i8 0, i8* %retval, align 1, !dbg !3484
  br label %return, !dbg !3484

if.end50:                                         ; preds = %land.lhs.true34, %cond.end30
  store i8 1, i8* %retval, align 1, !dbg !3485
  br label %return, !dbg !3485

return:                                           ; preds = %if.end50, %if.end49, %if.end15, %if.end
  %39 = load i8, i8* %retval, align 1, !dbg !3486
  ret i8 %39, !dbg !3486
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_single_full_bb_p(%struct.loop* %loop) #0 !dbg !3487 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  %empty_bb = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3488, metadata !DIExpression()), !dbg !3489
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3490, metadata !DIExpression()), !dbg !3491
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !3492, metadata !DIExpression()), !dbg !3494
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3495
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %0), !dbg !3496
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !3494
  store i32 0, i32* %i, align 4, !dbg !3497
  br label %for.cond, !dbg !3499

for.cond:                                         ; preds = %for.inc45, %entry
  %1 = load i32, i32* %i, align 4, !dbg !3500
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3502
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !3503
  %3 = load i32, i32* %num_nodes, align 4, !dbg !3503
  %cmp = icmp ult i32 %1, %3, !dbg !3504
  br i1 %cmp, label %for.body, label %for.end46, !dbg !3505

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !3506, metadata !DIExpression()), !dbg !3508
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !3509, metadata !DIExpression()), !dbg !3510
  call void @llvm.dbg.declare(metadata i8* %empty_bb, metadata !3511, metadata !DIExpression()), !dbg !3512
  store i8 1, i8* %empty_bb, align 1, !dbg !3512
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3513
  %5 = load i32, i32* %i, align 4, !dbg !3515
  %idxprom = zext i32 %5 to i64, !dbg !3513
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !3513
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3513
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3516
  %header = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 2, !dbg !3517
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3517
  %cmp1 = icmp eq %struct.basic_block_def* %6, %8, !dbg !3518
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3519

if.then:                                          ; preds = %for.body
  br label %for.inc45, !dbg !3520

if.end:                                           ; preds = %for.body
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3521
  %10 = load i32, i32* %i, align 4, !dbg !3522
  %idxprom2 = zext i32 %10 to i64, !dbg !3521
  %arrayidx3 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %9, i64 %idxprom2, !dbg !3521
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx3, align 8, !dbg !3521
  %12 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3523
  %13 = load i32, i32* %i, align 4, !dbg !3524
  %idxprom4 = zext i32 %13 to i64, !dbg !3523
  %arrayidx5 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %12, i64 %idxprom4, !dbg !3523
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx5, align 8, !dbg !3523
  call void @get_ebb_head_tail(%struct.basic_block_def* %11, %struct.basic_block_def* %14, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !3525
  br label %for.cond6, !dbg !3526

for.cond6:                                        ; preds = %for.inc, %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3527
  %16 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !3530
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !3530
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3530
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3530
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !3530
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3530
  %cmp8 = icmp ne %struct.rtx_def* %15, %17, !dbg !3531
  br i1 %cmp8, label %for.body9, label %for.end, !dbg !3532

for.body9:                                        ; preds = %for.cond6
  %18 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3533
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !3533
  %bf.load = load i32, i32* %19, align 8, !dbg !3533
  %bf.clear = and i32 %bf.load, 65535, !dbg !3533
  %cmp10 = icmp eq i32 %bf.clear, 13, !dbg !3533
  br i1 %cmp10, label %if.then37, label %lor.lhs.false, !dbg !3536

lor.lhs.false:                                    ; preds = %for.body9
  %20 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3537
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !3537
  %bf.load11 = load i32, i32* %21, align 8, !dbg !3537
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !3537
  %cmp13 = icmp eq i32 %bf.clear12, 12, !dbg !3537
  br i1 %cmp13, label %if.then37, label %lor.lhs.false14, !dbg !3538

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %22 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3539
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !3539
  %bf.load15 = load i32, i32* %23, align 8, !dbg !3539
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !3539
  %cmp17 = icmp eq i32 %bf.clear16, 8, !dbg !3539
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false18, !dbg !3539

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %24 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3539
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !3539
  %bf.load19 = load i32, i32* %25, align 8, !dbg !3539
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !3539
  %cmp21 = icmp eq i32 %bf.clear20, 7, !dbg !3539
  br i1 %cmp21, label %land.lhs.true, label %lor.lhs.false22, !dbg !3539

lor.lhs.false22:                                  ; preds = %lor.lhs.false18
  %26 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3539
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !3539
  %bf.load23 = load i32, i32* %27, align 8, !dbg !3539
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !3539
  %cmp25 = icmp eq i32 %bf.clear24, 9, !dbg !3539
  br i1 %cmp25, label %land.lhs.true, label %lor.lhs.false26, !dbg !3539

lor.lhs.false26:                                  ; preds = %lor.lhs.false22
  %28 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3539
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !3539
  %bf.load27 = load i32, i32* %29, align 8, !dbg !3539
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !3539
  %cmp29 = icmp eq i32 %bf.clear28, 10, !dbg !3539
  br i1 %cmp29, label %land.lhs.true, label %if.end38, !dbg !3540

land.lhs.true:                                    ; preds = %lor.lhs.false26, %lor.lhs.false22, %lor.lhs.false18, %lor.lhs.false14
  %30 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3541
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !3541
  %bf.load30 = load i32, i32* %31, align 8, !dbg !3541
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !3541
  %cmp32 = icmp eq i32 %bf.clear31, 7, !dbg !3541
  br i1 %cmp32, label %if.then37, label %lor.lhs.false33, !dbg !3542

lor.lhs.false33:                                  ; preds = %land.lhs.true
  %32 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3543
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !3543
  %bf.load34 = load i32, i32* %33, align 8, !dbg !3543
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !3543
  %cmp36 = icmp eq i32 %bf.clear35, 9, !dbg !3543
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !3544

if.then37:                                        ; preds = %lor.lhs.false33, %land.lhs.true, %lor.lhs.false, %for.body9
  br label %for.inc, !dbg !3545

if.end38:                                         ; preds = %lor.lhs.false33, %lor.lhs.false26
  store i8 0, i8* %empty_bb, align 1, !dbg !3546
  br label %for.end, !dbg !3547

for.inc:                                          ; preds = %if.then37
  %34 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3548
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !3548
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !3548
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 2, !dbg !3548
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !3548
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !3548
  store %struct.rtx_def* %35, %struct.rtx_def** %head, align 8, !dbg !3549
  br label %for.cond6, !dbg !3550, !llvm.loop !3551

for.end:                                          ; preds = %if.end38, %for.cond6
  %36 = load i8, i8* %empty_bb, align 1, !dbg !3553
  %tobool = icmp ne i8 %36, 0, !dbg !3553
  br i1 %tobool, label %if.end44, label %if.then43, !dbg !3555

if.then43:                                        ; preds = %for.end
  %37 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3556
  %38 = bitcast %struct.basic_block_def** %37 to i8*, !dbg !3556
  call void @free(i8* %38), !dbg !3558
  store i8 0, i8* %retval, align 1, !dbg !3559
  br label %return, !dbg !3559

if.end44:                                         ; preds = %for.end
  br label %for.inc45, !dbg !3560

for.inc45:                                        ; preds = %if.end44, %if.then
  %39 = load i32, i32* %i, align 4, !dbg !3561
  %inc = add i32 %39, 1, !dbg !3561
  store i32 %inc, i32* %i, align 4, !dbg !3561
  br label %for.cond, !dbg !3562, !llvm.loop !3563

for.end46:                                        ; preds = %for.cond
  %40 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3565
  %41 = bitcast %struct.basic_block_def** %40 to i8*, !dbg !3565
  call void @free(i8* %41), !dbg !3566
  store i8 1, i8* %retval, align 1, !dbg !3567
  br label %return, !dbg !3567

return:                                           ; preds = %for.end46, %if.then43
  %42 = load i8, i8* %retval, align 1, !dbg !3568
  ret i8 %42, !dbg !3568
}

declare dso_local void @get_ebb_head_tail(%struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def**, %struct.rtx_def**) #2

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @doloop_register_get(%struct.rtx_def* %head, %struct.rtx_def* %tail) #0 !dbg !3569 {
entry:
  %head.addr = alloca %struct.rtx_def*, align 8
  %tail.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %head, %struct.rtx_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head.addr, metadata !3572, metadata !DIExpression()), !dbg !3573
  store %struct.rtx_def* %tail, %struct.rtx_def** %tail.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail.addr, metadata !3574, metadata !DIExpression()), !dbg !3575
  ret %struct.rtx_def* null, !dbg !3576
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @print_rtl_single(%struct._IO_FILE*, %struct.rtx_def*) #2

declare dso_local %struct.ddg* @create_ddg(%struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !3577 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3580, metadata !DIExpression()), !dbg !3581
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3582, metadata !DIExpression()), !dbg !3583
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !3584, metadata !DIExpression()), !dbg !3585
  br label %while.cond, !dbg !3586

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3587
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !3587
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3587
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3587
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3587

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3587
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !3587
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !3587
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !3587
  br label %cond.end, !dbg !3587

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !3587

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3587
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3587
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !3587
  %5 = load i32, i32* %idx, align 8, !dbg !3587
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !3587
  %tobool2 = icmp ne i32 %call, 0, !dbg !3586
  br i1 %tobool2, label %while.body, label %while.end, !dbg !3586

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3588
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !3590
  %7 = load i32, i32* %idx3, align 8, !dbg !3591
  %inc = add i32 %7, 1, !dbg !3591
  store i32 %inc, i32* %idx3, align 8, !dbg !3591
  %8 = load i32, i32* %anum, align 4, !dbg !3592
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !3593
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3594
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !3595
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3596
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !3598
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !3598
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3599

if.then:                                          ; preds = %while.body
  br label %return, !dbg !3600

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !3586, !llvm.loop !3601

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3603
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !3603
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !3603
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3604
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !3605
  br label %return, !dbg !3606

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !3606
}

declare dso_local void @print_ddg(%struct._IO_FILE*, %struct.ddg*) #2

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @const_iteration_count(%struct.rtx_def* %count_reg, %struct.basic_block_def* %pre_header, i64* %count) #0 !dbg !3607 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %count_reg.addr = alloca %struct.rtx_def*, align 8
  %pre_header.addr = alloca %struct.basic_block_def*, align 8
  %count.addr = alloca i64*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %head = alloca %struct.rtx_def*, align 8
  %tail = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %count_reg, %struct.rtx_def** %count_reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %count_reg.addr, metadata !3611, metadata !DIExpression()), !dbg !3612
  store %struct.basic_block_def* %pre_header, %struct.basic_block_def** %pre_header.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pre_header.addr, metadata !3613, metadata !DIExpression()), !dbg !3614
  store i64* %count, i64** %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %count.addr, metadata !3615, metadata !DIExpression()), !dbg !3616
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3617, metadata !DIExpression()), !dbg !3618
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !3619, metadata !DIExpression()), !dbg !3620
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail, metadata !3621, metadata !DIExpression()), !dbg !3622
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %pre_header.addr, align 8, !dbg !3623
  %tobool = icmp ne %struct.basic_block_def* %0, null, !dbg !3623
  br i1 %tobool, label %if.end, label %if.then, !dbg !3625

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3626
  br label %return, !dbg !3626

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %pre_header.addr, align 8, !dbg !3627
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %pre_header.addr, align 8, !dbg !3628
  call void @get_ebb_head_tail(%struct.basic_block_def* %1, %struct.basic_block_def* %2, %struct.rtx_def** %head, %struct.rtx_def** %tail), !dbg !3629
  %3 = load %struct.rtx_def*, %struct.rtx_def** %tail, align 8, !dbg !3630
  store %struct.rtx_def* %3, %struct.rtx_def** %insn, align 8, !dbg !3632
  br label %for.cond, !dbg !3633

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3634
  %5 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !3636
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !3636
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3636
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !3636
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3636
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3636
  %cmp = icmp ne %struct.rtx_def* %4, %6, !dbg !3637
  br i1 %cmp, label %for.body, label %for.end, !dbg !3638

for.body:                                         ; preds = %for.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3639
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !3639
  %bf.load = load i32, i32* %8, align 8, !dbg !3639
  %bf.clear = and i32 %bf.load, 65535, !dbg !3639
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !3639
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false, !dbg !3639

lor.lhs.false:                                    ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3639
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !3639
  %bf.load2 = load i32, i32* %10, align 8, !dbg !3639
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !3639
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !3639
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false5, !dbg !3639

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3639
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !3639
  %bf.load6 = load i32, i32* %12, align 8, !dbg !3639
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !3639
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !3639
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false9, !dbg !3639

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3639
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !3639
  %bf.load10 = load i32, i32* %14, align 8, !dbg !3639
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !3639
  %cmp12 = icmp eq i32 %bf.clear11, 10, !dbg !3639
  br i1 %cmp12, label %land.lhs.true, label %if.end150, !dbg !3639

land.lhs.true:                                    ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %for.body
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3639
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !3639
  %bf.load13 = load i32, i32* %16, align 8, !dbg !3639
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !3639
  %cmp15 = icmp eq i32 %bf.clear14, 7, !dbg !3639
  br i1 %cmp15, label %if.end150, label %land.lhs.true16, !dbg !3641

land.lhs.true16:                                  ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3642
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !3642
  %bf.load17 = load i32, i32* %18, align 8, !dbg !3642
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !3642
  %cmp19 = icmp eq i32 %bf.clear18, 8, !dbg !3642
  br i1 %cmp19, label %cond.true, label %lor.lhs.false20, !dbg !3642

lor.lhs.false20:                                  ; preds = %land.lhs.true16
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3642
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !3642
  %bf.load21 = load i32, i32* %20, align 8, !dbg !3642
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !3642
  %cmp23 = icmp eq i32 %bf.clear22, 7, !dbg !3642
  br i1 %cmp23, label %cond.true, label %lor.lhs.false24, !dbg !3642

lor.lhs.false24:                                  ; preds = %lor.lhs.false20
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3642
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !3642
  %bf.load25 = load i32, i32* %22, align 8, !dbg !3642
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !3642
  %cmp27 = icmp eq i32 %bf.clear26, 9, !dbg !3642
  br i1 %cmp27, label %cond.true, label %lor.lhs.false28, !dbg !3642

lor.lhs.false28:                                  ; preds = %lor.lhs.false24
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3642
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !3642
  %bf.load29 = load i32, i32* %24, align 8, !dbg !3642
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !3642
  %cmp31 = icmp eq i32 %bf.clear30, 10, !dbg !3642
  br i1 %cmp31, label %cond.true, label %cond.false50, !dbg !3643

cond.true:                                        ; preds = %lor.lhs.false28, %lor.lhs.false24, %lor.lhs.false20, %land.lhs.true16
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3642
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !3642
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !3642
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 5, !dbg !3642
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !3642
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !3642
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !3642
  %bf.load36 = load i32, i32* %27, align 8, !dbg !3642
  %bf.clear37 = and i32 %bf.load36, 65535, !dbg !3642
  %cmp38 = icmp eq i32 %bf.clear37, 23, !dbg !3642
  br i1 %cmp38, label %cond.true39, label %cond.false, !dbg !3642

cond.true39:                                      ; preds = %cond.true
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3642
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !3642
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !3642
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 5, !dbg !3642
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !3642
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !3642
  %tobool44 = icmp ne %struct.rtx_def* %29, null, !dbg !3642
  br i1 %tobool44, label %land.lhs.true51, label %if.end150, !dbg !3642

cond.false:                                       ; preds = %cond.true
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3642
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3642
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !3642
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !3642
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 5, !dbg !3642
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !3642
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !3642
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %30, %struct.rtx_def* %32), !dbg !3642
  %tobool49 = icmp ne %struct.rtx_def* %call, null, !dbg !3642
  br i1 %tobool49, label %land.lhs.true51, label %if.end150, !dbg !3642

cond.false50:                                     ; preds = %lor.lhs.false28
  br i1 false, label %land.lhs.true51, label %if.end150, !dbg !3643

land.lhs.true51:                                  ; preds = %cond.false50, %cond.false, %cond.true39
  %33 = load %struct.rtx_def*, %struct.rtx_def** %count_reg.addr, align 8, !dbg !3644
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3645
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !3645
  %bf.load52 = load i32, i32* %35, align 8, !dbg !3645
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !3645
  %cmp54 = icmp eq i32 %bf.clear53, 8, !dbg !3645
  br i1 %cmp54, label %cond.true67, label %lor.lhs.false55, !dbg !3645

lor.lhs.false55:                                  ; preds = %land.lhs.true51
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3645
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !3645
  %bf.load56 = load i32, i32* %37, align 8, !dbg !3645
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !3645
  %cmp58 = icmp eq i32 %bf.clear57, 7, !dbg !3645
  br i1 %cmp58, label %cond.true67, label %lor.lhs.false59, !dbg !3645

lor.lhs.false59:                                  ; preds = %lor.lhs.false55
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3645
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !3645
  %bf.load60 = load i32, i32* %39, align 8, !dbg !3645
  %bf.clear61 = and i32 %bf.load60, 65535, !dbg !3645
  %cmp62 = icmp eq i32 %bf.clear61, 9, !dbg !3645
  br i1 %cmp62, label %cond.true67, label %lor.lhs.false63, !dbg !3645

lor.lhs.false63:                                  ; preds = %lor.lhs.false59
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3645
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !3645
  %bf.load64 = load i32, i32* %41, align 8, !dbg !3645
  %bf.clear65 = and i32 %bf.load64, 65535, !dbg !3645
  %cmp66 = icmp eq i32 %bf.clear65, 10, !dbg !3645
  br i1 %cmp66, label %cond.true67, label %cond.false86, !dbg !3645

cond.true67:                                      ; preds = %lor.lhs.false63, %lor.lhs.false59, %lor.lhs.false55, %land.lhs.true51
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3645
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !3645
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !3645
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 5, !dbg !3645
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !3645
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !3645
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !3645
  %bf.load72 = load i32, i32* %44, align 8, !dbg !3645
  %bf.clear73 = and i32 %bf.load72, 65535, !dbg !3645
  %cmp74 = icmp eq i32 %bf.clear73, 23, !dbg !3645
  br i1 %cmp74, label %cond.true75, label %cond.false80, !dbg !3645

cond.true75:                                      ; preds = %cond.true67
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3645
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !3645
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !3645
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 5, !dbg !3645
  %rt_rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**, !dbg !3645
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx79, align 8, !dbg !3645
  br label %cond.end, !dbg !3645

cond.false80:                                     ; preds = %cond.true67
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3645
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3645
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !3645
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !3645
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 5, !dbg !3645
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !3645
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !3645
  %call85 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %47, %struct.rtx_def* %49), !dbg !3645
  br label %cond.end, !dbg !3645

cond.end:                                         ; preds = %cond.false80, %cond.true75
  %cond = phi %struct.rtx_def* [ %46, %cond.true75 ], [ %call85, %cond.false80 ], !dbg !3645
  br label %cond.end87, !dbg !3645

cond.false86:                                     ; preds = %lor.lhs.false63
  br label %cond.end87, !dbg !3645

cond.end87:                                       ; preds = %cond.false86, %cond.end
  %cond88 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false86 ], !dbg !3645
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond88, i32 0, i32 1, !dbg !3645
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !3645
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 0, !dbg !3645
  %rt_rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**, !dbg !3645
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx92, align 8, !dbg !3645
  %call93 = call i32 @rtx_equal_p(%struct.rtx_def* %33, %struct.rtx_def* %50), !dbg !3646
  %tobool94 = icmp ne i32 %call93, 0, !dbg !3646
  br i1 %tobool94, label %if.then95, label %if.end150, !dbg !3647

if.then95:                                        ; preds = %cond.end87
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !3648, metadata !DIExpression()), !dbg !3650
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3651
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !3651
  %bf.load96 = load i32, i32* %52, align 8, !dbg !3651
  %bf.clear97 = and i32 %bf.load96, 65535, !dbg !3651
  %cmp98 = icmp eq i32 %bf.clear97, 8, !dbg !3651
  br i1 %cmp98, label %cond.true111, label %lor.lhs.false99, !dbg !3651

lor.lhs.false99:                                  ; preds = %if.then95
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3651
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !3651
  %bf.load100 = load i32, i32* %54, align 8, !dbg !3651
  %bf.clear101 = and i32 %bf.load100, 65535, !dbg !3651
  %cmp102 = icmp eq i32 %bf.clear101, 7, !dbg !3651
  br i1 %cmp102, label %cond.true111, label %lor.lhs.false103, !dbg !3651

lor.lhs.false103:                                 ; preds = %lor.lhs.false99
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3651
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !3651
  %bf.load104 = load i32, i32* %56, align 8, !dbg !3651
  %bf.clear105 = and i32 %bf.load104, 65535, !dbg !3651
  %cmp106 = icmp eq i32 %bf.clear105, 9, !dbg !3651
  br i1 %cmp106, label %cond.true111, label %lor.lhs.false107, !dbg !3651

lor.lhs.false107:                                 ; preds = %lor.lhs.false103
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3651
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !3651
  %bf.load108 = load i32, i32* %58, align 8, !dbg !3651
  %bf.clear109 = and i32 %bf.load108, 65535, !dbg !3651
  %cmp110 = icmp eq i32 %bf.clear109, 10, !dbg !3651
  br i1 %cmp110, label %cond.true111, label %cond.false132, !dbg !3651

cond.true111:                                     ; preds = %lor.lhs.false107, %lor.lhs.false103, %lor.lhs.false99, %if.then95
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3651
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !3651
  %fld113 = bitcast %union.u* %u112 to [1 x %union.rtunion_def]*, !dbg !3651
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i64 0, i64 5, !dbg !3651
  %rt_rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**, !dbg !3651
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx115, align 8, !dbg !3651
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !3651
  %bf.load116 = load i32, i32* %61, align 8, !dbg !3651
  %bf.clear117 = and i32 %bf.load116, 65535, !dbg !3651
  %cmp118 = icmp eq i32 %bf.clear117, 23, !dbg !3651
  br i1 %cmp118, label %cond.true119, label %cond.false124, !dbg !3651

cond.true119:                                     ; preds = %cond.true111
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3651
  %u120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !3651
  %fld121 = bitcast %union.u* %u120 to [1 x %union.rtunion_def]*, !dbg !3651
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i64 0, i64 5, !dbg !3651
  %rt_rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**, !dbg !3651
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx123, align 8, !dbg !3651
  br label %cond.end130, !dbg !3651

cond.false124:                                    ; preds = %cond.true111
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3651
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3651
  %u125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !3651
  %fld126 = bitcast %union.u* %u125 to [1 x %union.rtunion_def]*, !dbg !3651
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i64 0, i64 5, !dbg !3651
  %rt_rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**, !dbg !3651
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx128, align 8, !dbg !3651
  %call129 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %64, %struct.rtx_def* %66), !dbg !3651
  br label %cond.end130, !dbg !3651

cond.end130:                                      ; preds = %cond.false124, %cond.true119
  %cond131 = phi %struct.rtx_def* [ %63, %cond.true119 ], [ %call129, %cond.false124 ], !dbg !3651
  br label %cond.end133, !dbg !3651

cond.false132:                                    ; preds = %lor.lhs.false107
  br label %cond.end133, !dbg !3651

cond.end133:                                      ; preds = %cond.false132, %cond.end130
  %cond134 = phi %struct.rtx_def* [ %cond131, %cond.end130 ], [ null, %cond.false132 ], !dbg !3651
  store %struct.rtx_def* %cond134, %struct.rtx_def** %pat, align 8, !dbg !3650
  %67 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !3652
  %u135 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !3652
  %fld136 = bitcast %union.u* %u135 to [1 x %union.rtunion_def]*, !dbg !3652
  %arrayidx137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld136, i64 0, i64 1, !dbg !3652
  %rt_rtx138 = bitcast %union.rtunion_def* %arrayidx137 to %struct.rtx_def**, !dbg !3652
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx138, align 8, !dbg !3652
  %69 = bitcast %struct.rtx_def* %68 to i32*, !dbg !3652
  %bf.load139 = load i32, i32* %69, align 8, !dbg !3652
  %bf.clear140 = and i32 %bf.load139, 65535, !dbg !3652
  %cmp141 = icmp eq i32 %bf.clear140, 30, !dbg !3652
  br i1 %cmp141, label %if.then142, label %if.end149, !dbg !3654

if.then142:                                       ; preds = %cond.end133
  %70 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !3655
  %u143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !3655
  %fld144 = bitcast %union.u* %u143 to [1 x %union.rtunion_def]*, !dbg !3655
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i64 0, i64 1, !dbg !3655
  %rt_rtx146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.rtx_def**, !dbg !3655
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx146, align 8, !dbg !3655
  %u147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !3655
  %hwint = bitcast %union.u* %u147 to [1 x i64]*, !dbg !3655
  %arrayidx148 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !3655
  %72 = load i64, i64* %arrayidx148, align 8, !dbg !3655
  %73 = load i64*, i64** %count.addr, align 8, !dbg !3657
  store i64 %72, i64* %73, align 8, !dbg !3658
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3659
  store %struct.rtx_def* %74, %struct.rtx_def** %retval, align 8, !dbg !3660
  br label %return, !dbg !3660

if.end149:                                        ; preds = %cond.end133
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3661
  br label %return, !dbg !3661

if.end150:                                        ; preds = %cond.end87, %cond.false50, %cond.false, %cond.true39, %land.lhs.true, %lor.lhs.false9
  br label %for.inc, !dbg !3662

for.inc:                                          ; preds = %if.end150
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3663
  %u151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !3663
  %fld152 = bitcast %union.u* %u151 to [1 x %union.rtunion_def]*, !dbg !3663
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i64 0, i64 1, !dbg !3663
  %rt_rtx154 = bitcast %union.rtunion_def* %arrayidx153 to %struct.rtx_def**, !dbg !3663
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx154, align 8, !dbg !3663
  store %struct.rtx_def* %76, %struct.rtx_def** %insn, align 8, !dbg !3664
  br label %for.cond, !dbg !3665, !llvm.loop !3666

for.end:                                          ; preds = %for.cond
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !3668
  br label %return, !dbg !3668

return:                                           ; preds = %for.end, %if.end149, %if.then142, %if.then
  %77 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !3669
  ret %struct.rtx_def* %77, !dbg !3669
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @sms_order_nodes(%struct.ddg* %g, i32 %mii, i32* %node_order, i32* %pmax_asap) #0 !dbg !3670 {
entry:
  %g.addr = alloca %struct.ddg*, align 8
  %mii.addr = alloca i32, align 4
  %node_order.addr = alloca i32*, align 8
  %pmax_asap.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %rec_mii = alloca i32, align 4
  %sccs = alloca %struct.ddg_all_sccs*, align 8
  %nops = alloca %struct.node_order_params*, align 8
  %v = alloca %struct.ddg_node*, align 8
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !3673, metadata !DIExpression()), !dbg !3674
  store i32 %mii, i32* %mii.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mii.addr, metadata !3675, metadata !DIExpression()), !dbg !3676
  store i32* %node_order, i32** %node_order.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %node_order.addr, metadata !3677, metadata !DIExpression()), !dbg !3678
  store i32* %pmax_asap, i32** %pmax_asap.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pmax_asap.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3681, metadata !DIExpression()), !dbg !3682
  call void @llvm.dbg.declare(metadata i32* %rec_mii, metadata !3683, metadata !DIExpression()), !dbg !3684
  store i32 0, i32* %rec_mii, align 4, !dbg !3684
  call void @llvm.dbg.declare(metadata %struct.ddg_all_sccs** %sccs, metadata !3685, metadata !DIExpression()), !dbg !3702
  %0 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3703
  %call = call %struct.ddg_all_sccs* @create_ddg_all_sccs(%struct.ddg* %0), !dbg !3704
  store %struct.ddg_all_sccs* %call, %struct.ddg_all_sccs** %sccs, align 8, !dbg !3702
  call void @llvm.dbg.declare(metadata %struct.node_order_params** %nops, metadata !3705, metadata !DIExpression()), !dbg !3706
  %1 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3707
  %2 = load i32, i32* %mii.addr, align 4, !dbg !3708
  %3 = load i32*, i32** %pmax_asap.addr, align 8, !dbg !3709
  %call1 = call %struct.node_order_params* @calculate_order_params(%struct.ddg* %1, i32 %2, i32* %3), !dbg !3710
  store %struct.node_order_params* %call1, %struct.node_order_params** %nops, align 8, !dbg !3706
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3711
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !3711
  br i1 %tobool, label %if.then, label %if.end, !dbg !3713

if.then:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3714
  %6 = load %struct.ddg_all_sccs*, %struct.ddg_all_sccs** %sccs, align 8, !dbg !3715
  %7 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3716
  call void @print_sccs(%struct._IO_FILE* %5, %struct.ddg_all_sccs* %6, %struct.ddg* %7), !dbg !3717
  br label %if.end, !dbg !3717

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.ddg_all_sccs*, %struct.ddg_all_sccs** %sccs, align 8, !dbg !3718
  %9 = load i32*, i32** %node_order.addr, align 8, !dbg !3719
  call void @order_nodes_of_sccs(%struct.ddg_all_sccs* %8, i32* %9), !dbg !3720
  %10 = load %struct.ddg_all_sccs*, %struct.ddg_all_sccs** %sccs, align 8, !dbg !3721
  %num_sccs = getelementptr inbounds %struct.ddg_all_sccs, %struct.ddg_all_sccs* %10, i32 0, i32 1, !dbg !3723
  %11 = load i32, i32* %num_sccs, align 8, !dbg !3723
  %cmp = icmp sgt i32 %11, 0, !dbg !3724
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !3725

if.then2:                                         ; preds = %if.end
  %12 = load %struct.ddg_all_sccs*, %struct.ddg_all_sccs** %sccs, align 8, !dbg !3726
  %sccs3 = getelementptr inbounds %struct.ddg_all_sccs, %struct.ddg_all_sccs* %12, i32 0, i32 0, !dbg !3727
  %13 = load %struct.ddg_scc**, %struct.ddg_scc*** %sccs3, align 8, !dbg !3727
  %arrayidx = getelementptr inbounds %struct.ddg_scc*, %struct.ddg_scc** %13, i64 0, !dbg !3726
  %14 = load %struct.ddg_scc*, %struct.ddg_scc** %arrayidx, align 8, !dbg !3726
  %recurrence_length = getelementptr inbounds %struct.ddg_scc, %struct.ddg_scc* %14, i32 0, i32 3, !dbg !3728
  %15 = load i32, i32* %recurrence_length, align 4, !dbg !3728
  store i32 %15, i32* %rec_mii, align 4, !dbg !3729
  br label %if.end4, !dbg !3730

if.end4:                                          ; preds = %if.then2, %if.end
  store i32 0, i32* %i, align 4, !dbg !3731
  br label %for.cond, !dbg !3733

for.cond:                                         ; preds = %for.inc, %if.end4
  %16 = load i32, i32* %i, align 4, !dbg !3734
  %17 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3736
  %num_nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %17, i32 0, i32 1, !dbg !3737
  %18 = load i32, i32* %num_nodes, align 8, !dbg !3737
  %cmp5 = icmp slt i32 %16, %18, !dbg !3738
  br i1 %cmp5, label %for.body, label %for.end, !dbg !3739

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %v, metadata !3740, metadata !DIExpression()), !dbg !3742
  %19 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3743
  %nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %19, i32 0, i32 5, !dbg !3744
  %20 = load %struct.ddg_node*, %struct.ddg_node** %nodes, align 8, !dbg !3744
  %21 = load i32, i32* %i, align 4, !dbg !3745
  %idxprom = sext i32 %21 to i64, !dbg !3743
  %arrayidx6 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %20, i64 %idxprom, !dbg !3743
  store %struct.ddg_node* %arrayidx6, %struct.ddg_node** %v, align 8, !dbg !3742
  %22 = load %struct.ddg_node*, %struct.ddg_node** %v, align 8, !dbg !3746
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %22, i32 0, i32 7, !dbg !3746
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !3746
  %23 = load i8*, i8** %info, align 8, !dbg !3746
  %24 = bitcast i8* %23 to %struct.node_order_params*, !dbg !3746
  %asap = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %24, i32 0, i32 0, !dbg !3746
  %25 = load i32, i32* %asap, align 4, !dbg !3746
  %26 = load %struct.ddg_node*, %struct.ddg_node** %v, align 8, !dbg !3747
  %aux7 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %26, i32 0, i32 7, !dbg !3748
  %count = bitcast %union.anon.1* %aux7 to i32*, !dbg !3749
  store i32 %25, i32* %count, align 8, !dbg !3750
  br label %for.inc, !dbg !3751

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !dbg !3752
  %inc = add nsw i32 %27, 1, !dbg !3752
  store i32 %inc, i32* %i, align 4, !dbg !3752
  br label %for.cond, !dbg !3753, !llvm.loop !3754

for.end:                                          ; preds = %for.cond
  %28 = load %struct.node_order_params*, %struct.node_order_params** %nops, align 8, !dbg !3756
  %29 = bitcast %struct.node_order_params* %28 to i8*, !dbg !3756
  call void @free(i8* %29), !dbg !3757
  %30 = load %struct.ddg_all_sccs*, %struct.ddg_all_sccs** %sccs, align 8, !dbg !3758
  call void @free_ddg_all_sccs(%struct.ddg_all_sccs* %30), !dbg !3759
  %31 = load i32*, i32** %node_order.addr, align 8, !dbg !3760
  %32 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3761
  %num_nodes8 = getelementptr inbounds %struct.ddg, %struct.ddg* %32, i32 0, i32 1, !dbg !3762
  %33 = load i32, i32* %num_nodes8, align 8, !dbg !3762
  call void @check_nodes_order(i32* %31, i32 %33), !dbg !3763
  %34 = load i32, i32* %rec_mii, align 4, !dbg !3764
  ret i32 %34, !dbg !3765
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @res_MII(%struct.ddg* %g) #0 !dbg !3766 {
entry:
  %retval = alloca i32, align 4
  %g.addr = alloca %struct.ddg*, align 8
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !3769, metadata !DIExpression()), !dbg !3770
  %0 = load i32 (%struct.ddg*)*, i32 (%struct.ddg*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 36), align 8, !dbg !3771
  %tobool = icmp ne i32 (%struct.ddg*)* %0, null, !dbg !3773
  br i1 %tobool, label %if.then, label %if.end, !dbg !3774

if.then:                                          ; preds = %entry
  %1 = load i32 (%struct.ddg*)*, i32 (%struct.ddg*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 36), align 8, !dbg !3775
  %2 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3776
  %call = call i32 %1(%struct.ddg* %2), !dbg !3777
  store i32 %call, i32* %retval, align 4, !dbg !3778
  br label %return, !dbg !3778

if.end:                                           ; preds = %entry
  %3 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3779
  %num_nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %3, i32 0, i32 1, !dbg !3780
  %4 = load i32, i32* %num_nodes, align 8, !dbg !3780
  %5 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3781
  %num_debug = getelementptr inbounds %struct.ddg, %struct.ddg* %5, i32 0, i32 4, !dbg !3782
  %6 = load i32, i32* %num_debug, align 4, !dbg !3782
  %sub = sub nsw i32 %4, %6, !dbg !3783
  %7 = load i32, i32* @issue_rate, align 4, !dbg !3784
  %div = sdiv i32 %sub, %7, !dbg !3785
  store i32 %div, i32* %retval, align 4, !dbg !3786
  br label %return, !dbg !3786

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3787
  ret i32 %8, !dbg !3787
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_node_sched_params(%struct.ddg* %g) #0 !dbg !3788 {
entry:
  %g.addr = alloca %struct.ddg*, align 8
  %i = alloca i32, align 4
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !3791, metadata !DIExpression()), !dbg !3792
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3793, metadata !DIExpression()), !dbg !3794
  %0 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3795
  %num_nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %0, i32 0, i32 1, !dbg !3796
  %1 = load i32, i32* %num_nodes, align 8, !dbg !3796
  %conv = sext i32 %1 to i64, !dbg !3795
  %call = call i8* @xcalloc(i64 %conv, i64 32), !dbg !3797
  %2 = bitcast i8* %call to %struct.node_sched_params*, !dbg !3798
  store %struct.node_sched_params* %2, %struct.node_sched_params** @node_sched_params, align 8, !dbg !3799
  store i32 0, i32* %i, align 4, !dbg !3800
  br label %for.cond, !dbg !3802

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !3803
  %4 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3805
  %num_nodes1 = getelementptr inbounds %struct.ddg, %struct.ddg* %4, i32 0, i32 1, !dbg !3806
  %5 = load i32, i32* %num_nodes1, align 8, !dbg !3806
  %cmp = icmp slt i32 %3, %5, !dbg !3807
  br i1 %cmp, label %for.body, label %for.end, !dbg !3808

for.body:                                         ; preds = %for.cond
  %6 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3809
  %nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %6, i32 0, i32 5, !dbg !3811
  %7 = load %struct.ddg_node*, %struct.ddg_node** %nodes, align 8, !dbg !3811
  %8 = load i32, i32* %i, align 4, !dbg !3812
  %idxprom = sext i32 %8 to i64, !dbg !3809
  %arrayidx = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %7, i64 %idxprom, !dbg !3809
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %arrayidx, i32 0, i32 7, !dbg !3813
  %count = bitcast %union.anon.1* %aux to i32*, !dbg !3814
  %9 = load i32, i32* %count, align 8, !dbg !3814
  %10 = load %struct.node_sched_params*, %struct.node_sched_params** @node_sched_params, align 8, !dbg !3815
  %11 = load i32, i32* %i, align 4, !dbg !3816
  %idxprom3 = sext i32 %11 to i64, !dbg !3815
  %arrayidx4 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %10, i64 %idxprom3, !dbg !3815
  %asap = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %arrayidx4, i32 0, i32 0, !dbg !3817
  store i32 %9, i32* %asap, align 8, !dbg !3818
  %12 = load %struct.node_sched_params*, %struct.node_sched_params** @node_sched_params, align 8, !dbg !3819
  %13 = load i32, i32* %i, align 4, !dbg !3820
  %idxprom5 = sext i32 %13 to i64, !dbg !3819
  %arrayidx6 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %12, i64 %idxprom5, !dbg !3819
  %14 = bitcast %struct.node_sched_params* %arrayidx6 to i8*, !dbg !3821
  %15 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3822
  %nodes7 = getelementptr inbounds %struct.ddg, %struct.ddg* %15, i32 0, i32 5, !dbg !3823
  %16 = load %struct.ddg_node*, %struct.ddg_node** %nodes7, align 8, !dbg !3823
  %17 = load i32, i32* %i, align 4, !dbg !3824
  %idxprom8 = sext i32 %17 to i64, !dbg !3822
  %arrayidx9 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %16, i64 %idxprom8, !dbg !3822
  %aux10 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %arrayidx9, i32 0, i32 7, !dbg !3825
  %info = bitcast %union.anon.1* %aux10 to i8**, !dbg !3826
  store i8* %14, i8** %info, align 8, !dbg !3827
  br label %for.inc, !dbg !3828

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !3829
  %inc = add nsw i32 %18, 1, !dbg !3829
  store i32 %inc, i32* %i, align 4, !dbg !3829
  br label %for.cond, !dbg !3830, !llvm.loop !3831

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3833
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.partial_schedule* @sms_schedule_by_order(%struct.ddg* %g, i32 %mii, i32 %maxii, i32* %nodes_order) #0 !dbg !3834 {
entry:
  %g.addr = alloca %struct.ddg*, align 8
  %mii.addr = alloca i32, align 4
  %maxii.addr = alloca i32, align 4
  %nodes_order.addr = alloca i32*, align 8
  %ii = alloca i32, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %success = alloca i32, align 4
  %num_splits = alloca i32, align 4
  %flush_and_start_over = alloca i32, align 4
  %num_nodes = alloca i32, align 4
  %start = alloca i32, align 4
  %end = alloca i32, align 4
  %step = alloca i32, align 4
  %sched_nodes = alloca %struct.simple_bitmap_def*, align 8
  %must_precede = alloca %struct.simple_bitmap_def*, align 8
  %must_follow = alloca %struct.simple_bitmap_def*, align 8
  %tobe_scheduled = alloca %struct.simple_bitmap_def*, align 8
  %ps = alloca %struct.partial_schedule*, align 8
  %u = alloca i32, align 4
  %u_node = alloca %struct.ddg_node*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %tmp_precede = alloca %struct.simple_bitmap_def*, align 8
  %tmp_follow = alloca %struct.simple_bitmap_def*, align 8
  %split_row = alloca i32, align 4
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !3837, metadata !DIExpression()), !dbg !3838
  store i32 %mii, i32* %mii.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mii.addr, metadata !3839, metadata !DIExpression()), !dbg !3840
  store i32 %maxii, i32* %maxii.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %maxii.addr, metadata !3841, metadata !DIExpression()), !dbg !3842
  store i32* %nodes_order, i32** %nodes_order.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %nodes_order.addr, metadata !3843, metadata !DIExpression()), !dbg !3844
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !3845, metadata !DIExpression()), !dbg !3846
  %0 = load i32, i32* %mii.addr, align 4, !dbg !3847
  store i32 %0, i32* %ii, align 4, !dbg !3846
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3848, metadata !DIExpression()), !dbg !3849
  call void @llvm.dbg.declare(metadata i32* %c, metadata !3850, metadata !DIExpression()), !dbg !3851
  call void @llvm.dbg.declare(metadata i32* %success, metadata !3852, metadata !DIExpression()), !dbg !3853
  call void @llvm.dbg.declare(metadata i32* %num_splits, metadata !3854, metadata !DIExpression()), !dbg !3855
  store i32 0, i32* %num_splits, align 4, !dbg !3855
  call void @llvm.dbg.declare(metadata i32* %flush_and_start_over, metadata !3856, metadata !DIExpression()), !dbg !3857
  store i32 1, i32* %flush_and_start_over, align 4, !dbg !3857
  call void @llvm.dbg.declare(metadata i32* %num_nodes, metadata !3858, metadata !DIExpression()), !dbg !3859
  %1 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3860
  %num_nodes1 = getelementptr inbounds %struct.ddg, %struct.ddg* %1, i32 0, i32 1, !dbg !3861
  %2 = load i32, i32* %num_nodes1, align 8, !dbg !3861
  store i32 %2, i32* %num_nodes, align 4, !dbg !3859
  call void @llvm.dbg.declare(metadata i32* %start, metadata !3862, metadata !DIExpression()), !dbg !3863
  call void @llvm.dbg.declare(metadata i32* %end, metadata !3864, metadata !DIExpression()), !dbg !3865
  call void @llvm.dbg.declare(metadata i32* %step, metadata !3866, metadata !DIExpression()), !dbg !3867
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %sched_nodes, metadata !3868, metadata !DIExpression()), !dbg !3869
  %3 = load i32, i32* %num_nodes, align 4, !dbg !3870
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %3), !dbg !3871
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !3869
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_precede, metadata !3872, metadata !DIExpression()), !dbg !3873
  %4 = load i32, i32* %num_nodes, align 4, !dbg !3874
  %call2 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %4), !dbg !3875
  store %struct.simple_bitmap_def* %call2, %struct.simple_bitmap_def** %must_precede, align 8, !dbg !3873
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_follow, metadata !3876, metadata !DIExpression()), !dbg !3877
  %5 = load i32, i32* %num_nodes, align 4, !dbg !3878
  %call3 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %5), !dbg !3879
  store %struct.simple_bitmap_def* %call3, %struct.simple_bitmap_def** %must_follow, align 8, !dbg !3877
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %tobe_scheduled, metadata !3880, metadata !DIExpression()), !dbg !3881
  %6 = load i32, i32* %num_nodes, align 4, !dbg !3882
  %call4 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %6), !dbg !3883
  store %struct.simple_bitmap_def* %call4, %struct.simple_bitmap_def** %tobe_scheduled, align 8, !dbg !3881
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps, metadata !3884, metadata !DIExpression()), !dbg !3885
  %7 = load i32, i32* %ii, align 4, !dbg !3886
  %8 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3887
  %9 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3888
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %9, i64 40, !dbg !3888
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3888
  %10 = load i32, i32* %value, align 8, !dbg !3888
  %call5 = call %struct.partial_schedule* @create_partial_schedule(i32 %7, %struct.ddg* %8, i32 %10), !dbg !3889
  store %struct.partial_schedule* %call5, %struct.partial_schedule** %ps, align 8, !dbg !3885
  %11 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tobe_scheduled, align 8, !dbg !3890
  call void @sbitmap_ones(%struct.simple_bitmap_def* %11), !dbg !3891
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !3892
  call void @sbitmap_zero(%struct.simple_bitmap_def* %12), !dbg !3893
  br label %while.cond, !dbg !3894

while.cond:                                       ; preds = %for.end111, %entry
  %13 = load i32, i32* %flush_and_start_over, align 4, !dbg !3895
  %tobool = icmp ne i32 %13, 0, !dbg !3895
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3896

land.rhs:                                         ; preds = %while.cond
  %14 = load i32, i32* %ii, align 4, !dbg !3897
  %15 = load i32, i32* %maxii.addr, align 4, !dbg !3898
  %cmp = icmp slt i32 %14, %15, !dbg !3899
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %16 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !3900
  br i1 %16, label %while.body, label %while.end, !dbg !3894

while.body:                                       ; preds = %land.end
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3901
  %tobool6 = icmp ne %struct._IO_FILE* %17, null, !dbg !3901
  br i1 %tobool6, label %if.then, label %if.end, !dbg !3904

if.then:                                          ; preds = %while.body
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3905
  %19 = load i32, i32* %ii, align 4, !dbg !3906
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.46, i64 0, i64 0), i32 %19), !dbg !3907
  br label %if.end, !dbg !3907

if.end:                                           ; preds = %if.then, %while.body
  store i32 0, i32* %flush_and_start_over, align 4, !dbg !3908
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !3909
  call void @sbitmap_zero(%struct.simple_bitmap_def* %20), !dbg !3910
  store i32 0, i32* %i, align 4, !dbg !3911
  br label %for.cond, !dbg !3913

for.cond:                                         ; preds = %for.inc109, %if.end
  %21 = load i32, i32* %i, align 4, !dbg !3914
  %22 = load i32, i32* %num_nodes, align 4, !dbg !3916
  %cmp8 = icmp slt i32 %21, %22, !dbg !3917
  br i1 %cmp8, label %for.body, label %for.end111, !dbg !3918

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %u, metadata !3919, metadata !DIExpression()), !dbg !3921
  %23 = load i32*, i32** %nodes_order.addr, align 8, !dbg !3922
  %24 = load i32, i32* %i, align 4, !dbg !3923
  %idxprom = sext i32 %24 to i64, !dbg !3922
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i64 %idxprom, !dbg !3922
  %25 = load i32, i32* %arrayidx9, align 4, !dbg !3922
  store i32 %25, i32* %u, align 4, !dbg !3921
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node, metadata !3924, metadata !DIExpression()), !dbg !3925
  %26 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3926
  %g10 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %26, i32 0, i32 5, !dbg !3927
  %27 = load %struct.ddg*, %struct.ddg** %g10, align 8, !dbg !3927
  %nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %27, i32 0, i32 5, !dbg !3928
  %28 = load %struct.ddg_node*, %struct.ddg_node** %nodes, align 8, !dbg !3928
  %29 = load i32, i32* %u, align 4, !dbg !3929
  %idxprom11 = sext i32 %29 to i64, !dbg !3926
  %arrayidx12 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %28, i64 %idxprom11, !dbg !3926
  store %struct.ddg_node* %arrayidx12, %struct.ddg_node** %u_node, align 8, !dbg !3925
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3930, metadata !DIExpression()), !dbg !3931
  %30 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !3932
  %insn13 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %30, i32 0, i32 1, !dbg !3933
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn13, align 8, !dbg !3933
  store %struct.rtx_def* %31, %struct.rtx_def** %insn, align 8, !dbg !3931
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3934
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !3934
  %bf.load = load i32, i32* %33, align 8, !dbg !3934
  %bf.clear = and i32 %bf.load, 65535, !dbg !3934
  %cmp14 = icmp eq i32 %bf.clear, 8, !dbg !3934
  br i1 %cmp14, label %land.lhs.true, label %lor.lhs.false, !dbg !3934

lor.lhs.false:                                    ; preds = %for.body
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3934
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !3934
  %bf.load15 = load i32, i32* %35, align 8, !dbg !3934
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !3934
  %cmp17 = icmp eq i32 %bf.clear16, 7, !dbg !3934
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false18, !dbg !3934

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3934
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !3934
  %bf.load19 = load i32, i32* %37, align 8, !dbg !3934
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !3934
  %cmp21 = icmp eq i32 %bf.clear20, 9, !dbg !3934
  br i1 %cmp21, label %land.lhs.true, label %lor.lhs.false22, !dbg !3934

lor.lhs.false22:                                  ; preds = %lor.lhs.false18
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3934
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !3934
  %bf.load23 = load i32, i32* %39, align 8, !dbg !3934
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !3934
  %cmp25 = icmp eq i32 %bf.clear24, 10, !dbg !3934
  br i1 %cmp25, label %land.lhs.true, label %if.then29, !dbg !3934

land.lhs.true:                                    ; preds = %lor.lhs.false22, %lor.lhs.false18, %lor.lhs.false, %for.body
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3934
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !3934
  %bf.load26 = load i32, i32* %41, align 8, !dbg !3934
  %bf.clear27 = and i32 %bf.load26, 65535, !dbg !3934
  %cmp28 = icmp eq i32 %bf.clear27, 7, !dbg !3934
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !3936

if.then29:                                        ; preds = %land.lhs.true, %lor.lhs.false22
  %42 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tobe_scheduled, align 8, !dbg !3937
  %43 = load i32, i32* %u, align 4, !dbg !3939
  call void @RESET_BIT(%struct.simple_bitmap_def* %42, i32 %43), !dbg !3940
  br label %for.inc109, !dbg !3941

if.end30:                                         ; preds = %land.lhs.true
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3942
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !3942
  %bf.load31 = load i32, i32* %45, align 8, !dbg !3942
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !3942
  %cmp33 = icmp eq i32 %bf.clear32, 9, !dbg !3942
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !3944

if.then34:                                        ; preds = %if.end30
  %46 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tobe_scheduled, align 8, !dbg !3945
  %47 = load i32, i32* %u, align 4, !dbg !3947
  call void @RESET_BIT(%struct.simple_bitmap_def* %46, i32 %47), !dbg !3948
  br label %for.inc109, !dbg !3949

if.end35:                                         ; preds = %if.end30
  %48 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !3950
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %48, i32 0, i32 3, !dbg !3950
  %49 = load i32, i32* %u, align 4, !dbg !3950
  %div = udiv i32 %49, 64, !dbg !3950
  %idxprom36 = zext i32 %div to i64, !dbg !3950
  %arrayidx37 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom36, !dbg !3950
  %50 = load i64, i64* %arrayidx37, align 8, !dbg !3950
  %51 = load i32, i32* %u, align 4, !dbg !3950
  %rem = urem i32 %51, 64, !dbg !3950
  %sh_prom = zext i32 %rem to i64, !dbg !3950
  %shr = lshr i64 %50, %sh_prom, !dbg !3950
  %and = and i64 %shr, 1, !dbg !3950
  %tobool38 = icmp ne i64 %and, 0, !dbg !3950
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !3952

if.then39:                                        ; preds = %if.end35
  br label %for.inc109, !dbg !3953

if.end40:                                         ; preds = %if.end35
  store i32 0, i32* %success, align 4, !dbg !3954
  %52 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !3955
  %53 = load i32*, i32** %nodes_order.addr, align 8, !dbg !3957
  %54 = load i32, i32* %i, align 4, !dbg !3958
  %55 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !3959
  %56 = load i32, i32* %ii, align 4, !dbg !3960
  %call41 = call i32 @get_sched_window(%struct.partial_schedule* %52, i32* %53, i32 %54, %struct.simple_bitmap_def* %55, i32 %56, i32* %start, i32* %step, i32* %end), !dbg !3961
  %cmp42 = icmp eq i32 %call41, 0, !dbg !3962
  br i1 %cmp42, label %if.then43, label %if.end81, !dbg !3963

if.then43:                                        ; preds = %if.end40
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3964
  %tobool44 = icmp ne %struct._IO_FILE* %57, null, !dbg !3964
  br i1 %tobool44, label %if.then45, label %if.end53, !dbg !3967

if.then45:                                        ; preds = %if.then43
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3968
  %59 = load i32, i32* %u, align 4, !dbg !3969
  %60 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !3970
  %nodes46 = getelementptr inbounds %struct.ddg, %struct.ddg* %60, i32 0, i32 5, !dbg !3970
  %61 = load %struct.ddg_node*, %struct.ddg_node** %nodes46, align 8, !dbg !3970
  %62 = load i32, i32* %u, align 4, !dbg !3970
  %idxprom47 = sext i32 %62 to i64, !dbg !3970
  %arrayidx48 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %61, i64 %idxprom47, !dbg !3970
  %insn49 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %arrayidx48, i32 0, i32 1, !dbg !3970
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn49, align 8, !dbg !3970
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !3970
  %fld = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !3970
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3970
  %rt_int = bitcast %union.rtunion_def* %arrayidx51 to i32*, !dbg !3970
  %64 = load i32, i32* %rt_int, align 8, !dbg !3970
  %65 = load i32, i32* %start, align 4, !dbg !3971
  %66 = load i32, i32* %end, align 4, !dbg !3972
  %67 = load i32, i32* %step, align 4, !dbg !3973
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.47, i64 0, i64 0), i32 %59, i32 %64, i32 %65, i32 %66, i32 %67), !dbg !3974
  br label %if.end53, !dbg !3974

if.end53:                                         ; preds = %if.then45, %if.then43
  %68 = load i32, i32* %step, align 4, !dbg !3975
  %cmp54 = icmp sgt i32 %68, 0, !dbg !3975
  br i1 %cmp54, label %land.lhs.true55, label %lor.lhs.false57, !dbg !3975

land.lhs.true55:                                  ; preds = %if.end53
  %69 = load i32, i32* %start, align 4, !dbg !3975
  %70 = load i32, i32* %end, align 4, !dbg !3975
  %cmp56 = icmp slt i32 %69, %70, !dbg !3975
  br i1 %cmp56, label %cond.false, label %lor.lhs.false57, !dbg !3975

lor.lhs.false57:                                  ; preds = %land.lhs.true55, %if.end53
  %71 = load i32, i32* %step, align 4, !dbg !3975
  %cmp58 = icmp slt i32 %71, 0, !dbg !3975
  br i1 %cmp58, label %land.lhs.true59, label %cond.true, !dbg !3975

land.lhs.true59:                                  ; preds = %lor.lhs.false57
  %72 = load i32, i32* %start, align 4, !dbg !3975
  %73 = load i32, i32* %end, align 4, !dbg !3975
  %cmp60 = icmp sgt i32 %72, %73, !dbg !3975
  br i1 %cmp60, label %cond.false, label %cond.true, !dbg !3975

cond.true:                                        ; preds = %land.lhs.true59, %lor.lhs.false57
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 1783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3975
  br label %cond.end, !dbg !3975

cond.false:                                       ; preds = %land.lhs.true59, %land.lhs.true55
  br label %cond.end, !dbg !3975

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3975
  %74 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !3976
  %75 = load i32, i32* %start, align 4, !dbg !3977
  %76 = load i32, i32* %end, align 4, !dbg !3978
  %77 = load i32, i32* %step, align 4, !dbg !3979
  %78 = load i32, i32* %ii, align 4, !dbg !3980
  %79 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !3981
  %80 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede, align 8, !dbg !3982
  %81 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow, align 8, !dbg !3983
  call void @calculate_must_precede_follow(%struct.ddg_node* %74, i32 %75, i32 %76, i32 %77, i32 %78, %struct.simple_bitmap_def* %79, %struct.simple_bitmap_def* %80, %struct.simple_bitmap_def* %81), !dbg !3984
  %82 = load i32, i32* %start, align 4, !dbg !3985
  store i32 %82, i32* %c, align 4, !dbg !3987
  br label %for.cond61, !dbg !3988

for.cond61:                                       ; preds = %for.inc, %cond.end
  %83 = load i32, i32* %c, align 4, !dbg !3989
  %84 = load i32, i32* %end, align 4, !dbg !3991
  %cmp62 = icmp ne i32 %83, %84, !dbg !3992
  br i1 %cmp62, label %for.body63, label %for.end, !dbg !3993

for.body63:                                       ; preds = %for.cond61
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %tmp_precede, metadata !3994, metadata !DIExpression()), !dbg !3996
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** %tmp_precede, align 8, !dbg !3996
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %tmp_follow, metadata !3997, metadata !DIExpression()), !dbg !3998
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** %tmp_follow, align 8, !dbg !3998
  %85 = load i32, i32* %c, align 4, !dbg !3999
  %86 = load i32, i32* %start, align 4, !dbg !4001
  %cmp64 = icmp eq i32 %85, %86, !dbg !4002
  br i1 %cmp64, label %if.then65, label %if.end69, !dbg !4003

if.then65:                                        ; preds = %for.body63
  %87 = load i32, i32* %step, align 4, !dbg !4004
  %cmp66 = icmp eq i32 %87, 1, !dbg !4007
  br i1 %cmp66, label %if.then67, label %if.else, !dbg !4008

if.then67:                                        ; preds = %if.then65
  %88 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede, align 8, !dbg !4009
  store %struct.simple_bitmap_def* %88, %struct.simple_bitmap_def** %tmp_precede, align 8, !dbg !4010
  br label %if.end68, !dbg !4011

if.else:                                          ; preds = %if.then65
  %89 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow, align 8, !dbg !4012
  store %struct.simple_bitmap_def* %89, %struct.simple_bitmap_def** %tmp_follow, align 8, !dbg !4013
  br label %if.end68

if.end68:                                         ; preds = %if.else, %if.then67
  br label %if.end69, !dbg !4014

if.end69:                                         ; preds = %if.end68, %for.body63
  %90 = load i32, i32* %c, align 4, !dbg !4015
  %91 = load i32, i32* %end, align 4, !dbg !4017
  %92 = load i32, i32* %step, align 4, !dbg !4018
  %sub = sub nsw i32 %91, %92, !dbg !4019
  %cmp70 = icmp eq i32 %90, %sub, !dbg !4020
  br i1 %cmp70, label %if.then71, label %if.end76, !dbg !4021

if.then71:                                        ; preds = %if.end69
  %93 = load i32, i32* %step, align 4, !dbg !4022
  %cmp72 = icmp eq i32 %93, 1, !dbg !4025
  br i1 %cmp72, label %if.then73, label %if.else74, !dbg !4026

if.then73:                                        ; preds = %if.then71
  %94 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow, align 8, !dbg !4027
  store %struct.simple_bitmap_def* %94, %struct.simple_bitmap_def** %tmp_follow, align 8, !dbg !4028
  br label %if.end75, !dbg !4029

if.else74:                                        ; preds = %if.then71
  %95 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede, align 8, !dbg !4030
  store %struct.simple_bitmap_def* %95, %struct.simple_bitmap_def** %tmp_precede, align 8, !dbg !4031
  br label %if.end75

if.end75:                                         ; preds = %if.else74, %if.then73
  br label %if.end76, !dbg !4032

if.end76:                                         ; preds = %if.end75, %if.end69
  %96 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4033
  %97 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !4034
  %98 = load i32, i32* %u, align 4, !dbg !4035
  %99 = load i32, i32* %c, align 4, !dbg !4036
  %100 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4037
  %101 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp_precede, align 8, !dbg !4038
  %102 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp_follow, align 8, !dbg !4039
  %call77 = call zeroext i8 @try_scheduling_node_in_cycle(%struct.partial_schedule* %96, %struct.ddg_node* %97, i32 %98, i32 %99, %struct.simple_bitmap_def* %100, i32* %num_splits, %struct.simple_bitmap_def* %101, %struct.simple_bitmap_def* %102), !dbg !4040
  %conv = zext i8 %call77 to i32, !dbg !4040
  store i32 %conv, i32* %success, align 4, !dbg !4041
  %103 = load i32, i32* %success, align 4, !dbg !4042
  %tobool78 = icmp ne i32 %103, 0, !dbg !4042
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !4044

if.then79:                                        ; preds = %if.end76
  br label %for.end, !dbg !4045

if.end80:                                         ; preds = %if.end76
  br label %for.inc, !dbg !4046

for.inc:                                          ; preds = %if.end80
  %104 = load i32, i32* %step, align 4, !dbg !4047
  %105 = load i32, i32* %c, align 4, !dbg !4048
  %add = add nsw i32 %105, %104, !dbg !4048
  store i32 %add, i32* %c, align 4, !dbg !4048
  br label %for.cond61, !dbg !4049, !llvm.loop !4050

for.end:                                          ; preds = %if.then79, %for.cond61
  %106 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4052
  %107 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4053
  call void @verify_partial_schedule(%struct.partial_schedule* %106, %struct.simple_bitmap_def* %107), !dbg !4054
  br label %if.end81, !dbg !4055

if.end81:                                         ; preds = %for.end, %if.end40
  %108 = load i32, i32* %success, align 4, !dbg !4056
  %tobool82 = icmp ne i32 %108, 0, !dbg !4056
  br i1 %tobool82, label %if.end108, label %if.then83, !dbg !4058

if.then83:                                        ; preds = %if.end81
  call void @llvm.dbg.declare(metadata i32* %split_row, metadata !4059, metadata !DIExpression()), !dbg !4061
  %109 = load i32, i32* %ii, align 4, !dbg !4062
  %inc = add nsw i32 %109, 1, !dbg !4062
  store i32 %inc, i32* %ii, align 4, !dbg !4062
  %110 = load i32, i32* %maxii.addr, align 4, !dbg !4064
  %cmp84 = icmp eq i32 %109, %110, !dbg !4065
  br i1 %cmp84, label %if.then86, label %if.end87, !dbg !4066

if.then86:                                        ; preds = %if.then83
  br label %for.end111, !dbg !4067

if.end87:                                         ; preds = %if.then83
  %111 = load i32, i32* %num_splits, align 4, !dbg !4068
  %cmp88 = icmp sge i32 %111, 10, !dbg !4070
  br i1 %cmp88, label %if.then90, label %if.end91, !dbg !4071

if.then90:                                        ; preds = %if.end87
  store i32 0, i32* %num_splits, align 4, !dbg !4072
  store i32 1, i32* %flush_and_start_over, align 4, !dbg !4074
  %112 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4075
  %113 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4076
  call void @verify_partial_schedule(%struct.partial_schedule* %112, %struct.simple_bitmap_def* %113), !dbg !4077
  %114 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4078
  %115 = load i32, i32* %ii, align 4, !dbg !4079
  call void @reset_partial_schedule(%struct.partial_schedule* %114, i32 %115), !dbg !4080
  %116 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4081
  %117 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4082
  call void @verify_partial_schedule(%struct.partial_schedule* %116, %struct.simple_bitmap_def* %117), !dbg !4083
  br label %for.end111, !dbg !4084

if.end91:                                         ; preds = %if.end87
  %118 = load i32, i32* %num_splits, align 4, !dbg !4085
  %inc92 = add nsw i32 %118, 1, !dbg !4085
  store i32 %inc92, i32* %num_splits, align 4, !dbg !4085
  %119 = load i32, i32* %step, align 4, !dbg !4086
  %cmp93 = icmp eq i32 %119, 1, !dbg !4088
  br i1 %cmp93, label %if.then95, label %if.else99, !dbg !4089

if.then95:                                        ; preds = %if.end91
  %120 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4090
  %121 = load i32, i32* %start, align 4, !dbg !4091
  %122 = load i32, i32* %end, align 4, !dbg !4092
  %sub96 = sub nsw i32 %122, 1, !dbg !4093
  %123 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4094
  %ii97 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %123, i32 0, i32 0, !dbg !4095
  %124 = load i32, i32* %ii97, align 8, !dbg !4095
  %125 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !4096
  %call98 = call i32 @compute_split_row(%struct.simple_bitmap_def* %120, i32 %121, i32 %sub96, i32 %124, %struct.ddg_node* %125), !dbg !4097
  store i32 %call98, i32* %split_row, align 4, !dbg !4098
  br label %if.end103, !dbg !4099

if.else99:                                        ; preds = %if.end91
  %126 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4100
  %127 = load i32, i32* %end, align 4, !dbg !4101
  %add100 = add nsw i32 %127, 1, !dbg !4102
  %128 = load i32, i32* %start, align 4, !dbg !4103
  %129 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4104
  %ii101 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %129, i32 0, i32 0, !dbg !4105
  %130 = load i32, i32* %ii101, align 8, !dbg !4105
  %131 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !4106
  %call102 = call i32 @compute_split_row(%struct.simple_bitmap_def* %126, i32 %add100, i32 %128, i32 %130, %struct.ddg_node* %131), !dbg !4107
  store i32 %call102, i32* %split_row, align 4, !dbg !4108
  br label %if.end103

if.end103:                                        ; preds = %if.else99, %if.then95
  %132 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4109
  %133 = load i32, i32* %split_row, align 4, !dbg !4110
  %134 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4111
  call void @ps_insert_empty_row(%struct.partial_schedule* %132, i32 %133, %struct.simple_bitmap_def* %134), !dbg !4112
  %135 = load i32, i32* %i, align 4, !dbg !4113
  %dec = add nsw i32 %135, -1, !dbg !4113
  store i32 %dec, i32* %i, align 4, !dbg !4113
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4114
  %tobool104 = icmp ne %struct._IO_FILE* %136, null, !dbg !4114
  br i1 %tobool104, label %if.then105, label %if.end107, !dbg !4116

if.then105:                                       ; preds = %if.end103
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4117
  %138 = load i32, i32* %num_splits, align 4, !dbg !4118
  %call106 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.48, i64 0, i64 0), i32 %138), !dbg !4119
  br label %if.end107, !dbg !4119

if.end107:                                        ; preds = %if.then105, %if.end103
  br label %if.end108, !dbg !4120

if.end108:                                        ; preds = %if.end107, %if.end81
  br label %for.inc109, !dbg !4121

for.inc109:                                       ; preds = %if.end108, %if.then39, %if.then34, %if.then29
  %139 = load i32, i32* %i, align 4, !dbg !4122
  %inc110 = add nsw i32 %139, 1, !dbg !4122
  store i32 %inc110, i32* %i, align 4, !dbg !4122
  br label %for.cond, !dbg !4123, !llvm.loop !4124

for.end111:                                       ; preds = %if.then90, %if.then86, %for.cond
  br label %while.cond, !dbg !3894, !llvm.loop !4126

while.end:                                        ; preds = %land.end
  %140 = load i32, i32* %ii, align 4, !dbg !4128
  %141 = load i32, i32* %maxii.addr, align 4, !dbg !4130
  %cmp112 = icmp sge i32 %140, %141, !dbg !4131
  br i1 %cmp112, label %if.then114, label %if.else115, !dbg !4132

if.then114:                                       ; preds = %while.end
  %142 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4133
  call void @free_partial_schedule(%struct.partial_schedule* %142), !dbg !4135
  store %struct.partial_schedule* null, %struct.partial_schedule** %ps, align 8, !dbg !4136
  br label %if.end122, !dbg !4137

if.else115:                                       ; preds = %while.end
  %143 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tobe_scheduled, align 8, !dbg !4138
  %144 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4138
  %call116 = call i32 @sbitmap_equal(%struct.simple_bitmap_def* %143, %struct.simple_bitmap_def* %144), !dbg !4138
  %tobool117 = icmp ne i32 %call116, 0, !dbg !4138
  br i1 %tobool117, label %cond.false119, label %cond.true118, !dbg !4138

cond.true118:                                     ; preds = %if.else115
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 1864, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4138
  br label %cond.end120, !dbg !4138

cond.false119:                                    ; preds = %if.else115
  br label %cond.end120, !dbg !4138

cond.end120:                                      ; preds = %cond.false119, %cond.true118
  %cond121 = phi i32 [ 0, %cond.true118 ], [ 0, %cond.false119 ], !dbg !4138
  br label %if.end122

if.end122:                                        ; preds = %cond.end120, %if.then114
  %145 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4139
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %145, i32 0, i32 0, !dbg !4139
  %146 = load i8*, i8** %popcount, align 8, !dbg !4139
  call void @free(i8* %146), !dbg !4139
  %147 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes, align 8, !dbg !4139
  %148 = bitcast %struct.simple_bitmap_def* %147 to i8*, !dbg !4139
  call void @free(i8* %148), !dbg !4139
  %149 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede, align 8, !dbg !4140
  %popcount123 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %149, i32 0, i32 0, !dbg !4140
  %150 = load i8*, i8** %popcount123, align 8, !dbg !4140
  call void @free(i8* %150), !dbg !4140
  %151 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede, align 8, !dbg !4140
  %152 = bitcast %struct.simple_bitmap_def* %151 to i8*, !dbg !4140
  call void @free(i8* %152), !dbg !4140
  %153 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow, align 8, !dbg !4141
  %popcount124 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %153, i32 0, i32 0, !dbg !4141
  %154 = load i8*, i8** %popcount124, align 8, !dbg !4141
  call void @free(i8* %154), !dbg !4141
  %155 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow, align 8, !dbg !4141
  %156 = bitcast %struct.simple_bitmap_def* %155 to i8*, !dbg !4141
  call void @free(i8* %156), !dbg !4141
  %157 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tobe_scheduled, align 8, !dbg !4142
  %popcount125 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %157, i32 0, i32 0, !dbg !4142
  %158 = load i8*, i8** %popcount125, align 8, !dbg !4142
  call void @free(i8* %158), !dbg !4142
  %159 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tobe_scheduled, align 8, !dbg !4142
  %160 = bitcast %struct.simple_bitmap_def* %159 to i8*, !dbg !4142
  call void @free(i8* %160), !dbg !4142
  %161 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !4143
  ret %struct.partial_schedule* %161, !dbg !4144
}

; Function Attrs: noinline nounwind uwtable
define internal void @normalize_sched_times(%struct.partial_schedule* %ps) #0 !dbg !4145 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %row = alloca i32, align 4
  %amount = alloca i32, align 4
  %ii = alloca i32, align 4
  %crr_insn = alloca %struct.ps_insn*, align 8
  %u = alloca %struct.ddg_node*, align 8
  %normalized_time = alloca i32, align 4
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !4148, metadata !DIExpression()), !dbg !4149
  call void @llvm.dbg.declare(metadata i32* %row, metadata !4150, metadata !DIExpression()), !dbg !4151
  call void @llvm.dbg.declare(metadata i32* %amount, metadata !4152, metadata !DIExpression()), !dbg !4153
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4154
  %min_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %0, i32 0, i32 3, !dbg !4154
  %1 = load i32, i32* %min_cycle, align 8, !dbg !4154
  store i32 %1, i32* %amount, align 4, !dbg !4153
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !4155, metadata !DIExpression()), !dbg !4156
  %2 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4157
  %ii1 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %2, i32 0, i32 0, !dbg !4158
  %3 = load i32, i32* %ii1, align 8, !dbg !4158
  store i32 %3, i32* %ii, align 4, !dbg !4156
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %crr_insn, metadata !4159, metadata !DIExpression()), !dbg !4160
  store i32 0, i32* %row, align 4, !dbg !4161
  br label %for.cond, !dbg !4163

for.cond:                                         ; preds = %for.inc31, %entry
  %4 = load i32, i32* %row, align 4, !dbg !4164
  %5 = load i32, i32* %ii, align 4, !dbg !4166
  %cmp = icmp slt i32 %4, %5, !dbg !4167
  br i1 %cmp, label %for.body, label %for.end32, !dbg !4168

for.body:                                         ; preds = %for.cond
  %6 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4169
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %6, i32 0, i32 2, !dbg !4171
  %7 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !4171
  %8 = load i32, i32* %row, align 4, !dbg !4172
  %idxprom = sext i32 %8 to i64, !dbg !4169
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %7, i64 %idxprom, !dbg !4169
  %9 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !4169
  store %struct.ps_insn* %9, %struct.ps_insn** %crr_insn, align 8, !dbg !4173
  br label %for.cond2, !dbg !4174

for.cond2:                                        ; preds = %for.inc, %for.body
  %10 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !4175
  %tobool = icmp ne %struct.ps_insn* %10, null, !dbg !4177
  br i1 %tobool, label %for.body3, label %for.end, !dbg !4177

for.body3:                                        ; preds = %for.cond2
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u, metadata !4178, metadata !DIExpression()), !dbg !4180
  %11 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !4181
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %11, i32 0, i32 0, !dbg !4182
  %12 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !4182
  store %struct.ddg_node* %12, %struct.ddg_node** %u, align 8, !dbg !4180
  call void @llvm.dbg.declare(metadata i32* %normalized_time, metadata !4183, metadata !DIExpression()), !dbg !4184
  %13 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4185
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %13, i32 0, i32 7, !dbg !4185
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !4185
  %14 = load i8*, i8** %info, align 8, !dbg !4185
  %15 = bitcast i8* %14 to %struct.node_sched_params*, !dbg !4185
  %time = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %15, i32 0, i32 1, !dbg !4185
  %16 = load i32, i32* %time, align 4, !dbg !4185
  %17 = load i32, i32* %amount, align 4, !dbg !4186
  %sub = sub nsw i32 %16, %17, !dbg !4187
  store i32 %sub, i32* %normalized_time, align 4, !dbg !4184
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4188
  %tobool4 = icmp ne %struct._IO_FILE* %18, null, !dbg !4188
  br i1 %tobool4, label %if.then, label %if.end, !dbg !4190

if.then:                                          ; preds = %for.body3
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4191
  %20 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !4192
  %node5 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %20, i32 0, i32 0, !dbg !4193
  %21 = load %struct.ddg_node*, %struct.ddg_node** %node5, align 8, !dbg !4193
  %cuid = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %21, i32 0, i32 0, !dbg !4194
  %22 = load i32, i32* %cuid, align 8, !dbg !4194
  %23 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4195
  %aux6 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %23, i32 0, i32 7, !dbg !4195
  %info7 = bitcast %union.anon.1* %aux6 to i8**, !dbg !4195
  %24 = load i8*, i8** %info7, align 8, !dbg !4195
  %25 = bitcast i8* %24 to %struct.node_sched_params*, !dbg !4195
  %time8 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %25, i32 0, i32 1, !dbg !4195
  %26 = load i32, i32* %time8, align 4, !dbg !4195
  %27 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4196
  %min_cycle9 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %27, i32 0, i32 3, !dbg !4197
  %28 = load i32, i32* %min_cycle9, align 8, !dbg !4197
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.68, i64 0, i64 0), i32 %22, i32 %26, i32 %28), !dbg !4198
  br label %if.end, !dbg !4198

if.end:                                           ; preds = %if.then, %for.body3
  %29 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4199
  %aux10 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %29, i32 0, i32 7, !dbg !4199
  %info11 = bitcast %union.anon.1* %aux10 to i8**, !dbg !4199
  %30 = load i8*, i8** %info11, align 8, !dbg !4199
  %31 = bitcast i8* %30 to %struct.node_sched_params*, !dbg !4199
  %time12 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %31, i32 0, i32 1, !dbg !4199
  %32 = load i32, i32* %time12, align 4, !dbg !4199
  %33 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4199
  %min_cycle13 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %33, i32 0, i32 3, !dbg !4199
  %34 = load i32, i32* %min_cycle13, align 8, !dbg !4199
  %cmp14 = icmp sge i32 %32, %34, !dbg !4199
  br i1 %cmp14, label %cond.false, label %cond.true, !dbg !4199

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 592, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4199
  br label %cond.end, !dbg !4199

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4199

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4199
  %35 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4200
  %aux15 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %35, i32 0, i32 7, !dbg !4200
  %info16 = bitcast %union.anon.1* %aux15 to i8**, !dbg !4200
  %36 = load i8*, i8** %info16, align 8, !dbg !4200
  %37 = bitcast i8* %36 to %struct.node_sched_params*, !dbg !4200
  %time17 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %37, i32 0, i32 1, !dbg !4200
  %38 = load i32, i32* %time17, align 4, !dbg !4200
  %39 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4200
  %max_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %39, i32 0, i32 4, !dbg !4200
  %40 = load i32, i32* %max_cycle, align 4, !dbg !4200
  %cmp18 = icmp sle i32 %38, %40, !dbg !4200
  br i1 %cmp18, label %cond.false20, label %cond.true19, !dbg !4200

cond.true19:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 593, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4200
  br label %cond.end21, !dbg !4200

cond.false20:                                     ; preds = %cond.end
  br label %cond.end21, !dbg !4200

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i32 [ 0, %cond.true19 ], [ 0, %cond.false20 ], !dbg !4200
  %41 = load i32, i32* %normalized_time, align 4, !dbg !4201
  %42 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4202
  %aux23 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %42, i32 0, i32 7, !dbg !4202
  %info24 = bitcast %union.anon.1* %aux23 to i8**, !dbg !4202
  %43 = load i8*, i8** %info24, align 8, !dbg !4202
  %44 = bitcast i8* %43 to %struct.node_sched_params*, !dbg !4202
  %time25 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %44, i32 0, i32 1, !dbg !4202
  store i32 %41, i32* %time25, align 4, !dbg !4203
  %45 = load i32, i32* %normalized_time, align 4, !dbg !4204
  %46 = load i32, i32* %ii, align 4, !dbg !4205
  %rem = srem i32 %45, %46, !dbg !4206
  %47 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4207
  %aux26 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %47, i32 0, i32 7, !dbg !4207
  %info27 = bitcast %union.anon.1* %aux26 to i8**, !dbg !4207
  %48 = load i8*, i8** %info27, align 8, !dbg !4207
  %49 = bitcast i8* %48 to %struct.node_sched_params*, !dbg !4207
  %row28 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %49, i32 0, i32 4, !dbg !4207
  store i32 %rem, i32* %row28, align 4, !dbg !4208
  %50 = load i32, i32* %normalized_time, align 4, !dbg !4209
  %51 = load i32, i32* %ii, align 4, !dbg !4210
  %div = sdiv i32 %50, %51, !dbg !4211
  %52 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4212
  %aux29 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %52, i32 0, i32 7, !dbg !4212
  %info30 = bitcast %union.anon.1* %aux29 to i8**, !dbg !4212
  %53 = load i8*, i8** %info30, align 8, !dbg !4212
  %54 = bitcast i8* %53 to %struct.node_sched_params*, !dbg !4212
  %stage = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %54, i32 0, i32 5, !dbg !4212
  store i32 %div, i32* %stage, align 8, !dbg !4213
  br label %for.inc, !dbg !4214

for.inc:                                          ; preds = %cond.end21
  %55 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !4215
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %55, i32 0, i32 2, !dbg !4216
  %56 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !4216
  store %struct.ps_insn* %56, %struct.ps_insn** %crr_insn, align 8, !dbg !4217
  br label %for.cond2, !dbg !4218, !llvm.loop !4219

for.end:                                          ; preds = %for.cond2
  br label %for.inc31, !dbg !4220

for.inc31:                                        ; preds = %for.end
  %57 = load i32, i32* %row, align 4, !dbg !4221
  %inc = add nsw i32 %57, 1, !dbg !4221
  store i32 %inc, i32* %row, align 4, !dbg !4221
  br label %for.cond, !dbg !4222, !llvm.loop !4223

for.end32:                                        ; preds = %for.cond
  ret void, !dbg !4225
}

; Function Attrs: noinline nounwind uwtable
define internal void @rotate_partial_schedule(%struct.partial_schedule* %ps, i32 %start_cycle) #0 !dbg !4226 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %start_cycle.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %row = alloca i32, align 4
  %backward_rotates = alloca i32, align 4
  %last_row = alloca i32, align 4
  %first_row = alloca %struct.ps_insn*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !4229, metadata !DIExpression()), !dbg !4230
  store i32 %start_cycle, i32* %start_cycle.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_cycle.addr, metadata !4231, metadata !DIExpression()), !dbg !4232
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4233, metadata !DIExpression()), !dbg !4234
  call void @llvm.dbg.declare(metadata i32* %row, metadata !4235, metadata !DIExpression()), !dbg !4236
  call void @llvm.dbg.declare(metadata i32* %backward_rotates, metadata !4237, metadata !DIExpression()), !dbg !4238
  call void @llvm.dbg.declare(metadata i32* %last_row, metadata !4239, metadata !DIExpression()), !dbg !4240
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4241
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %0, i32 0, i32 0, !dbg !4242
  %1 = load i32, i32* %ii, align 8, !dbg !4242
  %sub = sub nsw i32 %1, 1, !dbg !4243
  store i32 %sub, i32* %last_row, align 4, !dbg !4240
  %2 = load i32, i32* %start_cycle.addr, align 4, !dbg !4244
  %cmp = icmp eq i32 %2, 0, !dbg !4246
  br i1 %cmp, label %if.then, label %if.end, !dbg !4247

if.then:                                          ; preds = %entry
  br label %return, !dbg !4248

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %start_cycle.addr, align 4, !dbg !4249
  %4 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4249
  %ii1 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %4, i32 0, i32 0, !dbg !4249
  %5 = load i32, i32* %ii1, align 8, !dbg !4249
  %rem = srem i32 %3, %5, !dbg !4249
  %cmp2 = icmp slt i32 %rem, 0, !dbg !4249
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !4249

cond.true:                                        ; preds = %if.end
  %6 = load i32, i32* %start_cycle.addr, align 4, !dbg !4249
  %7 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4249
  %ii3 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %7, i32 0, i32 0, !dbg !4249
  %8 = load i32, i32* %ii3, align 8, !dbg !4249
  %rem4 = srem i32 %6, %8, !dbg !4249
  %9 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4249
  %ii5 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %9, i32 0, i32 0, !dbg !4249
  %10 = load i32, i32* %ii5, align 8, !dbg !4249
  %add = add nsw i32 %rem4, %10, !dbg !4249
  br label %cond.end, !dbg !4249

cond.false:                                       ; preds = %if.end
  %11 = load i32, i32* %start_cycle.addr, align 4, !dbg !4249
  %12 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4249
  %ii6 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %12, i32 0, i32 0, !dbg !4249
  %13 = load i32, i32* %ii6, align 8, !dbg !4249
  %rem7 = srem i32 %11, %13, !dbg !4249
  br label %cond.end, !dbg !4249

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %rem7, %cond.false ], !dbg !4249
  store i32 %cond, i32* %backward_rotates, align 4, !dbg !4250
  store i32 0, i32* %i, align 4, !dbg !4251
  br label %for.cond, !dbg !4253

for.cond:                                         ; preds = %for.inc21, %cond.end
  %14 = load i32, i32* %i, align 4, !dbg !4254
  %15 = load i32, i32* %backward_rotates, align 4, !dbg !4256
  %cmp8 = icmp slt i32 %14, %15, !dbg !4257
  br i1 %cmp8, label %for.body, label %for.end23, !dbg !4258

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %first_row, metadata !4259, metadata !DIExpression()), !dbg !4261
  %16 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4262
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %16, i32 0, i32 2, !dbg !4263
  %17 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !4263
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %17, i64 0, !dbg !4262
  %18 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !4262
  store %struct.ps_insn* %18, %struct.ps_insn** %first_row, align 8, !dbg !4261
  store i32 0, i32* %row, align 4, !dbg !4264
  br label %for.cond9, !dbg !4266

for.cond9:                                        ; preds = %for.inc, %for.body
  %19 = load i32, i32* %row, align 4, !dbg !4267
  %20 = load i32, i32* %last_row, align 4, !dbg !4269
  %cmp10 = icmp slt i32 %19, %20, !dbg !4270
  br i1 %cmp10, label %for.body11, label %for.end, !dbg !4271

for.body11:                                       ; preds = %for.cond9
  %21 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4272
  %rows12 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %21, i32 0, i32 2, !dbg !4273
  %22 = load %struct.ps_insn**, %struct.ps_insn*** %rows12, align 8, !dbg !4273
  %23 = load i32, i32* %row, align 4, !dbg !4274
  %add13 = add nsw i32 %23, 1, !dbg !4275
  %idxprom = sext i32 %add13 to i64, !dbg !4272
  %arrayidx14 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %22, i64 %idxprom, !dbg !4272
  %24 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx14, align 8, !dbg !4272
  %25 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4276
  %rows15 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %25, i32 0, i32 2, !dbg !4277
  %26 = load %struct.ps_insn**, %struct.ps_insn*** %rows15, align 8, !dbg !4277
  %27 = load i32, i32* %row, align 4, !dbg !4278
  %idxprom16 = sext i32 %27 to i64, !dbg !4276
  %arrayidx17 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %26, i64 %idxprom16, !dbg !4276
  store %struct.ps_insn* %24, %struct.ps_insn** %arrayidx17, align 8, !dbg !4279
  br label %for.inc, !dbg !4276

for.inc:                                          ; preds = %for.body11
  %28 = load i32, i32* %row, align 4, !dbg !4280
  %inc = add nsw i32 %28, 1, !dbg !4280
  store i32 %inc, i32* %row, align 4, !dbg !4280
  br label %for.cond9, !dbg !4281, !llvm.loop !4282

for.end:                                          ; preds = %for.cond9
  %29 = load %struct.ps_insn*, %struct.ps_insn** %first_row, align 8, !dbg !4284
  %30 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4285
  %rows18 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %30, i32 0, i32 2, !dbg !4286
  %31 = load %struct.ps_insn**, %struct.ps_insn*** %rows18, align 8, !dbg !4286
  %32 = load i32, i32* %last_row, align 4, !dbg !4287
  %idxprom19 = sext i32 %32 to i64, !dbg !4285
  %arrayidx20 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %31, i64 %idxprom19, !dbg !4285
  store %struct.ps_insn* %29, %struct.ps_insn** %arrayidx20, align 8, !dbg !4288
  br label %for.inc21, !dbg !4289

for.inc21:                                        ; preds = %for.end
  %33 = load i32, i32* %i, align 4, !dbg !4290
  %inc22 = add nsw i32 %33, 1, !dbg !4290
  store i32 %inc22, i32* %i, align 4, !dbg !4290
  br label %for.cond, !dbg !4291, !llvm.loop !4292

for.end23:                                        ; preds = %for.cond
  %34 = load i32, i32* %start_cycle.addr, align 4, !dbg !4294
  %35 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4295
  %max_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %35, i32 0, i32 4, !dbg !4296
  %36 = load i32, i32* %max_cycle, align 4, !dbg !4297
  %sub24 = sub nsw i32 %36, %34, !dbg !4297
  store i32 %sub24, i32* %max_cycle, align 4, !dbg !4297
  %37 = load i32, i32* %start_cycle.addr, align 4, !dbg !4298
  %38 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4299
  %min_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %38, i32 0, i32 3, !dbg !4300
  %39 = load i32, i32* %min_cycle, align 8, !dbg !4301
  %sub25 = sub nsw i32 %39, %37, !dbg !4301
  store i32 %sub25, i32* %min_cycle, align 8, !dbg !4301
  br label %return, !dbg !4302

return:                                           ; preds = %for.end23, %if.then
  ret void, !dbg !4302
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_columns_for_ps(%struct.partial_schedule* %ps) #0 !dbg !4303 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %row = alloca i32, align 4
  %cur_insn = alloca %struct.ps_insn*, align 8
  %column = alloca i32, align 4
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !4304, metadata !DIExpression()), !dbg !4305
  call void @llvm.dbg.declare(metadata i32* %row, metadata !4306, metadata !DIExpression()), !dbg !4307
  store i32 0, i32* %row, align 4, !dbg !4308
  br label %for.cond, !dbg !4310

for.cond:                                         ; preds = %for.inc4, %entry
  %0 = load i32, i32* %row, align 4, !dbg !4311
  %1 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4313
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %1, i32 0, i32 0, !dbg !4314
  %2 = load i32, i32* %ii, align 8, !dbg !4314
  %cmp = icmp slt i32 %0, %2, !dbg !4315
  br i1 %cmp, label %for.body, label %for.end6, !dbg !4316

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %cur_insn, metadata !4317, metadata !DIExpression()), !dbg !4319
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4320
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %3, i32 0, i32 2, !dbg !4321
  %4 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !4321
  %5 = load i32, i32* %row, align 4, !dbg !4322
  %idxprom = sext i32 %5 to i64, !dbg !4320
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %4, i64 %idxprom, !dbg !4320
  %6 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !4320
  store %struct.ps_insn* %6, %struct.ps_insn** %cur_insn, align 8, !dbg !4319
  call void @llvm.dbg.declare(metadata i32* %column, metadata !4323, metadata !DIExpression()), !dbg !4324
  store i32 0, i32* %column, align 4, !dbg !4324
  br label %for.cond1, !dbg !4325

for.cond1:                                        ; preds = %for.inc, %for.body
  %7 = load %struct.ps_insn*, %struct.ps_insn** %cur_insn, align 8, !dbg !4326
  %tobool = icmp ne %struct.ps_insn* %7, null, !dbg !4329
  br i1 %tobool, label %for.body2, label %for.end, !dbg !4329

for.body2:                                        ; preds = %for.cond1
  %8 = load i32, i32* %column, align 4, !dbg !4330
  %inc = add nsw i32 %8, 1, !dbg !4330
  store i32 %inc, i32* %column, align 4, !dbg !4330
  %9 = load %struct.ps_insn*, %struct.ps_insn** %cur_insn, align 8, !dbg !4331
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %9, i32 0, i32 0, !dbg !4331
  %10 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !4331
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %10, i32 0, i32 7, !dbg !4331
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !4331
  %11 = load i8*, i8** %info, align 8, !dbg !4331
  %12 = bitcast i8* %11 to %struct.node_sched_params*, !dbg !4331
  %column3 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %12, i32 0, i32 6, !dbg !4331
  store i32 %8, i32* %column3, align 4, !dbg !4332
  br label %for.inc, !dbg !4331

for.inc:                                          ; preds = %for.body2
  %13 = load %struct.ps_insn*, %struct.ps_insn** %cur_insn, align 8, !dbg !4333
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %13, i32 0, i32 2, !dbg !4334
  %14 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !4334
  store %struct.ps_insn* %14, %struct.ps_insn** %cur_insn, align 8, !dbg !4335
  br label %for.cond1, !dbg !4336, !llvm.loop !4337

for.end:                                          ; preds = %for.cond1
  br label %for.inc4, !dbg !4339

for.inc4:                                         ; preds = %for.end
  %15 = load i32, i32* %row, align 4, !dbg !4340
  %inc5 = add nsw i32 %15, 1, !dbg !4340
  store i32 %inc5, i32* %row, align 4, !dbg !4340
  br label %for.cond, !dbg !4341, !llvm.loop !4342

for.end6:                                         ; preds = %for.cond
  ret void, !dbg !4344
}

; Function Attrs: noinline nounwind uwtable
define internal void @canon_loop(%struct.loop* %loop) #0 !dbg !4345 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  %i = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp22 = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4348, metadata !DIExpression()), !dbg !4349
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4350, metadata !DIExpression()), !dbg !4351
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4352, metadata !DIExpression()), !dbg !4359
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4360
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4360
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4360
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4360
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 1, !dbg !4360
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4360
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !4360
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4360
  %3 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4360
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4360
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !4360
  store i32 %5, i32* %4, align 8, !dbg !4360
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4360
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !4360
  store %struct.VEC_edge_gc** %7, %struct.VEC_edge_gc*** %6, align 8, !dbg !4360
  %8 = bitcast %struct.edge_iterator* %i to i8*, !dbg !4360
  %9 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4360
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !4360
  br label %for.cond, !dbg !4360

for.cond:                                         ; preds = %for.inc, %entry
  %10 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4362
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 0, !dbg !4362
  %12 = load i32, i32* %11, align 8, !dbg !4362
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 1, !dbg !4362
  %14 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %13, align 8, !dbg !4362
  %call1 = call zeroext i8 @ei_cond(i32 %12, %struct.VEC_edge_gc** %14, %struct.edge_def** %e), !dbg !4362
  %tobool = icmp ne i8 %call1, 0, !dbg !4360
  br i1 %tobool, label %for.body, label %for.end, !dbg !4360

for.body:                                         ; preds = %for.cond
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4364
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 7, !dbg !4366
  %16 = load i32, i32* %flags, align 8, !dbg !4366
  %and = and i32 %16, 1, !dbg !4367
  %tobool2 = icmp ne i32 %and, 0, !dbg !4367
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !4368

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4369
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 0, !dbg !4369
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4369
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 1, !dbg !4369
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4369
  %tobool3 = icmp ne %struct.VEC_edge_gc* %19, null, !dbg !4369
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4369

cond.true:                                        ; preds = %land.lhs.true
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4369
  %src4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 0, !dbg !4369
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %src4, align 8, !dbg !4369
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 1, !dbg !4369
  %22 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !4369
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %22, i32 0, i32 0, !dbg !4369
  br label %cond.end, !dbg !4369

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4369

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4369
  %call6 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4369
  %cmp = icmp ugt i32 %call6, 1, !dbg !4370
  br i1 %cmp, label %if.then, label %if.end, !dbg !4371

if.then:                                          ; preds = %cond.end
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4372
  %call7 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %23), !dbg !4373
  br label %if.end, !dbg !4373

if.end:                                           ; preds = %if.then, %cond.end, %for.body
  br label %for.inc, !dbg !4374

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %i), !dbg !4362
  br label %for.cond, !dbg !4362, !llvm.loop !4375

for.end:                                          ; preds = %for.cond
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4377
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 3, !dbg !4379
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4379
  %26 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4380
  %header = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 2, !dbg !4381
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4381
  %cmp8 = icmp eq %struct.basic_block_def* %25, %27, !dbg !4382
  br i1 %cmp8, label %if.then21, label %lor.lhs.false, !dbg !4383

lor.lhs.false:                                    ; preds = %for.end
  %28 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4384
  %latch9 = getelementptr inbounds %struct.loop, %struct.loop* %28, i32 0, i32 3, !dbg !4384
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %latch9, align 8, !dbg !4384
  %succs10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 1, !dbg !4384
  %30 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs10, align 8, !dbg !4384
  %tobool11 = icmp ne %struct.VEC_edge_gc* %30, null, !dbg !4384
  br i1 %tobool11, label %cond.true12, label %cond.false16, !dbg !4384

cond.true12:                                      ; preds = %lor.lhs.false
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4384
  %latch13 = getelementptr inbounds %struct.loop, %struct.loop* %31, i32 0, i32 3, !dbg !4384
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %latch13, align 8, !dbg !4384
  %succs14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 1, !dbg !4384
  %33 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs14, align 8, !dbg !4384
  %base15 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %33, i32 0, i32 0, !dbg !4384
  br label %cond.end17, !dbg !4384

cond.false16:                                     ; preds = %lor.lhs.false
  br label %cond.end17, !dbg !4384

cond.end17:                                       ; preds = %cond.false16, %cond.true12
  %cond18 = phi %struct.VEC_edge_base* [ %base15, %cond.true12 ], [ null, %cond.false16 ], !dbg !4384
  %call19 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond18), !dbg !4384
  %cmp20 = icmp ugt i32 %call19, 1, !dbg !4385
  br i1 %cmp20, label %if.then21, label %if.end38, !dbg !4386

if.then21:                                        ; preds = %cond.end17, %for.end
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4387
  %header23 = getelementptr inbounds %struct.loop, %struct.loop* %34, i32 0, i32 2, !dbg !4387
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %header23, align 8, !dbg !4387
  %preds24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 0, !dbg !4387
  %call25 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds24), !dbg !4387
  %36 = bitcast %struct.edge_iterator* %tmp22 to { i32, %struct.VEC_edge_gc** }*, !dbg !4387
  %37 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %36, i32 0, i32 0, !dbg !4387
  %38 = extractvalue { i32, %struct.VEC_edge_gc** } %call25, 0, !dbg !4387
  store i32 %38, i32* %37, align 8, !dbg !4387
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %36, i32 0, i32 1, !dbg !4387
  %40 = extractvalue { i32, %struct.VEC_edge_gc** } %call25, 1, !dbg !4387
  store %struct.VEC_edge_gc** %40, %struct.VEC_edge_gc*** %39, align 8, !dbg !4387
  %41 = bitcast %struct.edge_iterator* %i to i8*, !dbg !4387
  %42 = bitcast %struct.edge_iterator* %tmp22 to i8*, !dbg !4387
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false), !dbg !4387
  br label %for.cond26, !dbg !4387

for.cond26:                                       ; preds = %for.inc35, %if.then21
  %43 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4390
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 0, !dbg !4390
  %45 = load i32, i32* %44, align 8, !dbg !4390
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 1, !dbg !4390
  %47 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %46, align 8, !dbg !4390
  %call27 = call zeroext i8 @ei_cond(i32 %45, %struct.VEC_edge_gc** %47, %struct.edge_def** %e), !dbg !4390
  %tobool28 = icmp ne i8 %call27, 0, !dbg !4387
  br i1 %tobool28, label %for.body29, label %for.end36, !dbg !4387

for.body29:                                       ; preds = %for.cond26
  %48 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4392
  %src30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 0, !dbg !4394
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %src30, align 8, !dbg !4394
  %50 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4395
  %latch31 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 3, !dbg !4396
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %latch31, align 8, !dbg !4396
  %cmp32 = icmp eq %struct.basic_block_def* %49, %51, !dbg !4397
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !4398

if.then33:                                        ; preds = %for.body29
  br label %for.end36, !dbg !4399

if.end34:                                         ; preds = %for.body29
  br label %for.inc35, !dbg !4396

for.inc35:                                        ; preds = %if.end34
  call void @ei_next(%struct.edge_iterator* %i), !dbg !4390
  br label %for.cond26, !dbg !4390, !llvm.loop !4400

for.end36:                                        ; preds = %if.then33, %for.cond26
  %52 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4402
  %call37 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %52), !dbg !4403
  br label %if.end38, !dbg !4404

if.end38:                                         ; preds = %for.end36, %cond.end17
  ret void, !dbg !4405
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

declare dso_local %struct.loop* @loop_version(%struct.loop*, i8*, %struct.basic_block_def**, i32, i32, i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @permute_partial_schedule(%struct.partial_schedule* %ps, %struct.rtx_def* %last) #0 !dbg !4406 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %last.addr = alloca %struct.rtx_def*, align 8
  %ii = alloca i32, align 4
  %row = alloca i32, align 4
  %ps_ij = alloca %struct.ps_insn*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !4409, metadata !DIExpression()), !dbg !4410
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last.addr, metadata !4411, metadata !DIExpression()), !dbg !4412
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !4413, metadata !DIExpression()), !dbg !4414
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4415
  %ii1 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %0, i32 0, i32 0, !dbg !4416
  %1 = load i32, i32* %ii1, align 8, !dbg !4416
  store i32 %1, i32* %ii, align 4, !dbg !4414
  call void @llvm.dbg.declare(metadata i32* %row, metadata !4417, metadata !DIExpression()), !dbg !4418
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_ij, metadata !4419, metadata !DIExpression()), !dbg !4420
  store i32 0, i32* %row, align 4, !dbg !4421
  br label %for.cond, !dbg !4423

for.cond:                                         ; preds = %for.inc13, %entry
  %2 = load i32, i32* %row, align 4, !dbg !4424
  %3 = load i32, i32* %ii, align 4, !dbg !4426
  %cmp = icmp slt i32 %2, %3, !dbg !4427
  br i1 %cmp, label %for.body, label %for.end14, !dbg !4428

for.body:                                         ; preds = %for.cond
  %4 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4429
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %4, i32 0, i32 2, !dbg !4431
  %5 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !4431
  %6 = load i32, i32* %row, align 4, !dbg !4432
  %idxprom = sext i32 %6 to i64, !dbg !4429
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %5, i64 %idxprom, !dbg !4429
  %7 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !4429
  store %struct.ps_insn* %7, %struct.ps_insn** %ps_ij, align 8, !dbg !4433
  br label %for.cond2, !dbg !4434

for.cond2:                                        ; preds = %for.inc, %for.body
  %8 = load %struct.ps_insn*, %struct.ps_insn** %ps_ij, align 8, !dbg !4435
  %tobool = icmp ne %struct.ps_insn* %8, null, !dbg !4437
  br i1 %tobool, label %for.body3, label %for.end, !dbg !4437

for.body3:                                        ; preds = %for.cond2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !4438
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4438
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4438
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4438
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !4438
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4438
  %11 = load %struct.ps_insn*, %struct.ps_insn** %ps_ij, align 8, !dbg !4440
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %11, i32 0, i32 0, !dbg !4441
  %12 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !4441
  %insn = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %12, i32 0, i32 1, !dbg !4442
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4442
  %cmp5 = icmp ne %struct.rtx_def* %10, %13, !dbg !4443
  br i1 %cmp5, label %if.then, label %if.end, !dbg !4444

if.then:                                          ; preds = %for.body3
  %14 = load %struct.ps_insn*, %struct.ps_insn** %ps_ij, align 8, !dbg !4445
  %node6 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %14, i32 0, i32 0, !dbg !4446
  %15 = load %struct.ddg_node*, %struct.ddg_node** %node6, align 8, !dbg !4446
  %first_note = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %15, i32 0, i32 2, !dbg !4447
  %16 = load %struct.rtx_def*, %struct.rtx_def** %first_note, align 8, !dbg !4447
  %17 = load %struct.ps_insn*, %struct.ps_insn** %ps_ij, align 8, !dbg !4448
  %node7 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %17, i32 0, i32 0, !dbg !4449
  %18 = load %struct.ddg_node*, %struct.ddg_node** %node7, align 8, !dbg !4449
  %insn8 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %18, i32 0, i32 1, !dbg !4450
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn8, align 8, !dbg !4450
  %20 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !4451
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4451
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !4451
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 1, !dbg !4451
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !4451
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !4451
  call void @reorder_insns_nobb(%struct.rtx_def* %16, %struct.rtx_def* %19, %struct.rtx_def* %21), !dbg !4452
  br label %if.end, !dbg !4452

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !4442

for.inc:                                          ; preds = %if.end
  %22 = load %struct.ps_insn*, %struct.ps_insn** %ps_ij, align 8, !dbg !4453
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %22, i32 0, i32 2, !dbg !4454
  %23 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !4454
  store %struct.ps_insn* %23, %struct.ps_insn** %ps_ij, align 8, !dbg !4455
  br label %for.cond2, !dbg !4456, !llvm.loop !4457

for.end:                                          ; preds = %for.cond2
  br label %for.inc13, !dbg !4458

for.inc13:                                        ; preds = %for.end
  %24 = load i32, i32* %row, align 4, !dbg !4459
  %inc = add nsw i32 %24, 1, !dbg !4459
  store i32 %inc, i32* %row, align 4, !dbg !4459
  br label %for.cond, !dbg !4460, !llvm.loop !4461

for.end14:                                        ; preds = %for.cond
  ret void, !dbg !4463
}

declare dso_local void @df_set_bb_dirty(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.undo_replace_buff_elem* @generate_reg_moves(%struct.partial_schedule* %ps, i8 zeroext %rescan) #0 !dbg !4464 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %rescan.addr = alloca i8, align 1
  %g = alloca %struct.ddg*, align 8
  %ii = alloca i32, align 4
  %i = alloca i32, align 4
  %reg_move_replaces = alloca %struct.undo_replace_buff_elem*, align 8
  %u = alloca %struct.ddg_node*, align 8
  %e = alloca %struct.ddg_edge*, align 8
  %nreg_moves = alloca i32, align 4
  %i_reg_move = alloca i32, align 4
  %uses_of_defs = alloca %struct.simple_bitmap_def**, align 8
  %last_reg_move = alloca %struct.rtx_def*, align 8
  %prev_reg = alloca %struct.rtx_def*, align 8
  %old_reg = alloca %struct.rtx_def*, align 8
  %nreg_moves4e = alloca i32, align 4
  %dest_copy = alloca i32, align 4
  %i_use = alloca i32, align 4
  %new_reg = alloca %struct.rtx_def*, align 8
  %reg_move = alloca %struct.rtx_def*, align 8
  %sbi = alloca %struct.sbitmap_iterator, align 8
  %rep = alloca %struct.undo_replace_buff_elem*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !4467, metadata !DIExpression()), !dbg !4468
  store i8 %rescan, i8* %rescan.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %rescan.addr, metadata !4469, metadata !DIExpression()), !dbg !4470
  call void @llvm.dbg.declare(metadata %struct.ddg** %g, metadata !4471, metadata !DIExpression()), !dbg !4472
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4473
  %g1 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %0, i32 0, i32 5, !dbg !4474
  %1 = load %struct.ddg*, %struct.ddg** %g1, align 8, !dbg !4474
  store %struct.ddg* %1, %struct.ddg** %g, align 8, !dbg !4472
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !4475, metadata !DIExpression()), !dbg !4476
  %2 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4477
  %ii2 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %2, i32 0, i32 0, !dbg !4478
  %3 = load i32, i32* %ii2, align 8, !dbg !4478
  store i32 %3, i32* %ii, align 4, !dbg !4476
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4479, metadata !DIExpression()), !dbg !4480
  call void @llvm.dbg.declare(metadata %struct.undo_replace_buff_elem** %reg_move_replaces, metadata !4481, metadata !DIExpression()), !dbg !4482
  store %struct.undo_replace_buff_elem* null, %struct.undo_replace_buff_elem** %reg_move_replaces, align 8, !dbg !4482
  store i32 0, i32* %i, align 4, !dbg !4483
  br label %for.cond, !dbg !4485

for.cond:                                         ; preds = %for.inc215, %entry
  %4 = load i32, i32* %i, align 4, !dbg !4486
  %5 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !4488
  %num_nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %5, i32 0, i32 1, !dbg !4489
  %6 = load i32, i32* %num_nodes, align 8, !dbg !4489
  %cmp = icmp slt i32 %4, %6, !dbg !4490
  br i1 %cmp, label %for.body, label %for.end217, !dbg !4491

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u, metadata !4492, metadata !DIExpression()), !dbg !4494
  %7 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !4495
  %nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %7, i32 0, i32 5, !dbg !4496
  %8 = load %struct.ddg_node*, %struct.ddg_node** %nodes, align 8, !dbg !4496
  %9 = load i32, i32* %i, align 4, !dbg !4497
  %idxprom = sext i32 %9 to i64, !dbg !4495
  %arrayidx = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %8, i64 %idxprom, !dbg !4495
  store %struct.ddg_node* %arrayidx, %struct.ddg_node** %u, align 8, !dbg !4494
  call void @llvm.dbg.declare(metadata %struct.ddg_edge** %e, metadata !4498, metadata !DIExpression()), !dbg !4499
  call void @llvm.dbg.declare(metadata i32* %nreg_moves, metadata !4500, metadata !DIExpression()), !dbg !4501
  store i32 0, i32* %nreg_moves, align 4, !dbg !4501
  call void @llvm.dbg.declare(metadata i32* %i_reg_move, metadata !4502, metadata !DIExpression()), !dbg !4503
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def*** %uses_of_defs, metadata !4504, metadata !DIExpression()), !dbg !4506
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_reg_move, metadata !4507, metadata !DIExpression()), !dbg !4508
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_reg, metadata !4509, metadata !DIExpression()), !dbg !4510
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_reg, metadata !4511, metadata !DIExpression()), !dbg !4512
  %10 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4513
  %out = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %10, i32 0, i32 4, !dbg !4515
  %11 = load %struct.ddg_edge*, %struct.ddg_edge** %out, align 8, !dbg !4515
  store %struct.ddg_edge* %11, %struct.ddg_edge** %e, align 8, !dbg !4516
  br label %for.cond3, !dbg !4517

for.cond3:                                        ; preds = %for.inc, %for.body
  %12 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4518
  %tobool = icmp ne %struct.ddg_edge* %12, null, !dbg !4520
  br i1 %tobool, label %for.body4, label %for.end, !dbg !4520

for.body4:                                        ; preds = %for.cond3
  %13 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4521
  %type = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %13, i32 0, i32 2, !dbg !4523
  %14 = load i32, i32* %type, align 8, !dbg !4523
  %cmp5 = icmp eq i32 %14, 0, !dbg !4524
  br i1 %cmp5, label %land.lhs.true, label %if.end44, !dbg !4525

land.lhs.true:                                    ; preds = %for.body4
  %15 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4526
  %dest = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %15, i32 0, i32 1, !dbg !4527
  %16 = load %struct.ddg_node*, %struct.ddg_node** %dest, align 8, !dbg !4527
  %17 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4528
  %src = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %17, i32 0, i32 0, !dbg !4529
  %18 = load %struct.ddg_node*, %struct.ddg_node** %src, align 8, !dbg !4529
  %cmp6 = icmp ne %struct.ddg_node* %16, %18, !dbg !4530
  br i1 %cmp6, label %if.then, label %if.end44, !dbg !4531

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %nreg_moves4e, metadata !4532, metadata !DIExpression()), !dbg !4534
  %19 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4535
  %dest7 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %19, i32 0, i32 1, !dbg !4535
  %20 = load %struct.ddg_node*, %struct.ddg_node** %dest7, align 8, !dbg !4535
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %20, i32 0, i32 7, !dbg !4535
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !4535
  %21 = load i8*, i8** %info, align 8, !dbg !4535
  %22 = bitcast i8* %21 to %struct.node_sched_params*, !dbg !4535
  %time = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %22, i32 0, i32 1, !dbg !4535
  %23 = load i32, i32* %time, align 4, !dbg !4535
  %24 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4536
  %src8 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %24, i32 0, i32 0, !dbg !4536
  %25 = load %struct.ddg_node*, %struct.ddg_node** %src8, align 8, !dbg !4536
  %aux9 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %25, i32 0, i32 7, !dbg !4536
  %info10 = bitcast %union.anon.1* %aux9 to i8**, !dbg !4536
  %26 = load i8*, i8** %info10, align 8, !dbg !4536
  %27 = bitcast i8* %26 to %struct.node_sched_params*, !dbg !4536
  %time11 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %27, i32 0, i32 1, !dbg !4536
  %28 = load i32, i32* %time11, align 4, !dbg !4536
  %sub = sub nsw i32 %23, %28, !dbg !4537
  %29 = load i32, i32* %ii, align 4, !dbg !4538
  %div = sdiv i32 %sub, %29, !dbg !4539
  store i32 %div, i32* %nreg_moves4e, align 4, !dbg !4534
  %30 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4540
  %distance = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %30, i32 0, i32 5, !dbg !4542
  %31 = load i32, i32* %distance, align 4, !dbg !4542
  %cmp12 = icmp eq i32 %31, 1, !dbg !4543
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !4544

if.then13:                                        ; preds = %if.then
  %32 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4545
  %dest14 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %32, i32 0, i32 1, !dbg !4545
  %33 = load %struct.ddg_node*, %struct.ddg_node** %dest14, align 8, !dbg !4545
  %aux15 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %33, i32 0, i32 7, !dbg !4545
  %info16 = bitcast %union.anon.1* %aux15 to i8**, !dbg !4545
  %34 = load i8*, i8** %info16, align 8, !dbg !4545
  %35 = bitcast i8* %34 to %struct.node_sched_params*, !dbg !4545
  %time17 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %35, i32 0, i32 1, !dbg !4545
  %36 = load i32, i32* %time17, align 4, !dbg !4545
  %37 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4546
  %src18 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %37, i32 0, i32 0, !dbg !4546
  %38 = load %struct.ddg_node*, %struct.ddg_node** %src18, align 8, !dbg !4546
  %aux19 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %38, i32 0, i32 7, !dbg !4546
  %info20 = bitcast %union.anon.1* %aux19 to i8**, !dbg !4546
  %39 = load i8*, i8** %info20, align 8, !dbg !4546
  %40 = bitcast i8* %39 to %struct.node_sched_params*, !dbg !4546
  %time21 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %40, i32 0, i32 1, !dbg !4546
  %41 = load i32, i32* %time21, align 4, !dbg !4546
  %sub22 = sub nsw i32 %36, %41, !dbg !4547
  %42 = load i32, i32* %ii, align 4, !dbg !4548
  %add = add nsw i32 %sub22, %42, !dbg !4549
  %43 = load i32, i32* %ii, align 4, !dbg !4550
  %div23 = sdiv i32 %add, %43, !dbg !4551
  store i32 %div23, i32* %nreg_moves4e, align 4, !dbg !4552
  br label %if.end, !dbg !4553

if.end:                                           ; preds = %if.then13, %if.then
  %44 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4554
  %dest24 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %44, i32 0, i32 1, !dbg !4554
  %45 = load %struct.ddg_node*, %struct.ddg_node** %dest24, align 8, !dbg !4554
  %aux25 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %45, i32 0, i32 7, !dbg !4554
  %info26 = bitcast %union.anon.1* %aux25 to i8**, !dbg !4554
  %46 = load i8*, i8** %info26, align 8, !dbg !4554
  %47 = bitcast i8* %46 to %struct.node_sched_params*, !dbg !4554
  %row = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %47, i32 0, i32 4, !dbg !4554
  %48 = load i32, i32* %row, align 4, !dbg !4554
  %49 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4556
  %src27 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %49, i32 0, i32 0, !dbg !4556
  %50 = load %struct.ddg_node*, %struct.ddg_node** %src27, align 8, !dbg !4556
  %aux28 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %50, i32 0, i32 7, !dbg !4556
  %info29 = bitcast %union.anon.1* %aux28 to i8**, !dbg !4556
  %51 = load i8*, i8** %info29, align 8, !dbg !4556
  %52 = bitcast i8* %51 to %struct.node_sched_params*, !dbg !4556
  %row30 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %52, i32 0, i32 4, !dbg !4556
  %53 = load i32, i32* %row30, align 4, !dbg !4556
  %cmp31 = icmp eq i32 %48, %53, !dbg !4557
  br i1 %cmp31, label %land.lhs.true32, label %if.end42, !dbg !4558

land.lhs.true32:                                  ; preds = %if.end
  %54 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4559
  %dest33 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %54, i32 0, i32 1, !dbg !4559
  %55 = load %struct.ddg_node*, %struct.ddg_node** %dest33, align 8, !dbg !4559
  %aux34 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %55, i32 0, i32 7, !dbg !4559
  %info35 = bitcast %union.anon.1* %aux34 to i8**, !dbg !4559
  %56 = load i8*, i8** %info35, align 8, !dbg !4559
  %57 = bitcast i8* %56 to %struct.node_sched_params*, !dbg !4559
  %column = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %57, i32 0, i32 6, !dbg !4559
  %58 = load i32, i32* %column, align 4, !dbg !4559
  %59 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4560
  %src36 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %59, i32 0, i32 0, !dbg !4560
  %60 = load %struct.ddg_node*, %struct.ddg_node** %src36, align 8, !dbg !4560
  %aux37 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %60, i32 0, i32 7, !dbg !4560
  %info38 = bitcast %union.anon.1* %aux37 to i8**, !dbg !4560
  %61 = load i8*, i8** %info38, align 8, !dbg !4560
  %62 = bitcast i8* %61 to %struct.node_sched_params*, !dbg !4560
  %column39 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %62, i32 0, i32 6, !dbg !4560
  %63 = load i32, i32* %column39, align 4, !dbg !4560
  %cmp40 = icmp slt i32 %58, %63, !dbg !4561
  br i1 %cmp40, label %if.then41, label %if.end42, !dbg !4562

if.then41:                                        ; preds = %land.lhs.true32
  %64 = load i32, i32* %nreg_moves4e, align 4, !dbg !4563
  %dec = add nsw i32 %64, -1, !dbg !4563
  store i32 %dec, i32* %nreg_moves4e, align 4, !dbg !4563
  br label %if.end42, !dbg !4564

if.end42:                                         ; preds = %if.then41, %land.lhs.true32, %if.end
  %65 = load i32, i32* %nreg_moves, align 4, !dbg !4565
  %66 = load i32, i32* %nreg_moves4e, align 4, !dbg !4565
  %cmp43 = icmp sgt i32 %65, %66, !dbg !4565
  br i1 %cmp43, label %cond.true, label %cond.false, !dbg !4565

cond.true:                                        ; preds = %if.end42
  %67 = load i32, i32* %nreg_moves, align 4, !dbg !4565
  br label %cond.end, !dbg !4565

cond.false:                                       ; preds = %if.end42
  %68 = load i32, i32* %nreg_moves4e, align 4, !dbg !4565
  br label %cond.end, !dbg !4565

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %67, %cond.true ], [ %68, %cond.false ], !dbg !4565
  store i32 %cond, i32* %nreg_moves, align 4, !dbg !4566
  br label %if.end44, !dbg !4567

if.end44:                                         ; preds = %cond.end, %land.lhs.true, %for.body4
  br label %for.inc, !dbg !4529

for.inc:                                          ; preds = %if.end44
  %69 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4568
  %next_out = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %69, i32 0, i32 7, !dbg !4569
  %70 = load %struct.ddg_edge*, %struct.ddg_edge** %next_out, align 8, !dbg !4569
  store %struct.ddg_edge* %70, %struct.ddg_edge** %e, align 8, !dbg !4570
  br label %for.cond3, !dbg !4571, !llvm.loop !4572

for.end:                                          ; preds = %for.cond3
  %71 = load i32, i32* %nreg_moves, align 4, !dbg !4574
  %cmp45 = icmp eq i32 %71, 0, !dbg !4576
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !4577

if.then46:                                        ; preds = %for.end
  br label %for.inc215, !dbg !4578

if.end47:                                         ; preds = %for.end
  %72 = load i32, i32* %nreg_moves, align 4, !dbg !4579
  %73 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !4580
  %num_nodes48 = getelementptr inbounds %struct.ddg, %struct.ddg* %73, i32 0, i32 1, !dbg !4581
  %74 = load i32, i32* %num_nodes48, align 8, !dbg !4581
  %call = call %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32 %72, i32 %74), !dbg !4582
  store %struct.simple_bitmap_def** %call, %struct.simple_bitmap_def*** %uses_of_defs, align 8, !dbg !4583
  %75 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %uses_of_defs, align 8, !dbg !4584
  %76 = load i32, i32* %nreg_moves, align 4, !dbg !4585
  call void @sbitmap_vector_zero(%struct.simple_bitmap_def** %75, i32 %76), !dbg !4586
  %77 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4587
  %out49 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %77, i32 0, i32 4, !dbg !4589
  %78 = load %struct.ddg_edge*, %struct.ddg_edge** %out49, align 8, !dbg !4589
  store %struct.ddg_edge* %78, %struct.ddg_edge** %e, align 8, !dbg !4590
  br label %for.cond50, !dbg !4591

for.cond50:                                       ; preds = %for.inc115, %if.end47
  %79 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4592
  %tobool51 = icmp ne %struct.ddg_edge* %79, null, !dbg !4594
  br i1 %tobool51, label %for.body52, label %for.end117, !dbg !4594

for.body52:                                       ; preds = %for.cond50
  %80 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4595
  %type53 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %80, i32 0, i32 2, !dbg !4597
  %81 = load i32, i32* %type53, align 8, !dbg !4597
  %cmp54 = icmp eq i32 %81, 0, !dbg !4598
  br i1 %cmp54, label %land.lhs.true55, label %if.end114, !dbg !4599

land.lhs.true55:                                  ; preds = %for.body52
  %82 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4600
  %dest56 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %82, i32 0, i32 1, !dbg !4601
  %83 = load %struct.ddg_node*, %struct.ddg_node** %dest56, align 8, !dbg !4601
  %84 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4602
  %src57 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %84, i32 0, i32 0, !dbg !4603
  %85 = load %struct.ddg_node*, %struct.ddg_node** %src57, align 8, !dbg !4603
  %cmp58 = icmp ne %struct.ddg_node* %83, %85, !dbg !4604
  br i1 %cmp58, label %if.then59, label %if.end114, !dbg !4605

if.then59:                                        ; preds = %land.lhs.true55
  call void @llvm.dbg.declare(metadata i32* %dest_copy, metadata !4606, metadata !DIExpression()), !dbg !4608
  %86 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4609
  %dest60 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %86, i32 0, i32 1, !dbg !4609
  %87 = load %struct.ddg_node*, %struct.ddg_node** %dest60, align 8, !dbg !4609
  %aux61 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %87, i32 0, i32 7, !dbg !4609
  %info62 = bitcast %union.anon.1* %aux61 to i8**, !dbg !4609
  %88 = load i8*, i8** %info62, align 8, !dbg !4609
  %89 = bitcast i8* %88 to %struct.node_sched_params*, !dbg !4609
  %time63 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %89, i32 0, i32 1, !dbg !4609
  %90 = load i32, i32* %time63, align 4, !dbg !4609
  %91 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4610
  %src64 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %91, i32 0, i32 0, !dbg !4610
  %92 = load %struct.ddg_node*, %struct.ddg_node** %src64, align 8, !dbg !4610
  %aux65 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %92, i32 0, i32 7, !dbg !4610
  %info66 = bitcast %union.anon.1* %aux65 to i8**, !dbg !4610
  %93 = load i8*, i8** %info66, align 8, !dbg !4610
  %94 = bitcast i8* %93 to %struct.node_sched_params*, !dbg !4610
  %time67 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %94, i32 0, i32 1, !dbg !4610
  %95 = load i32, i32* %time67, align 4, !dbg !4610
  %sub68 = sub nsw i32 %90, %95, !dbg !4611
  %96 = load i32, i32* %ii, align 4, !dbg !4612
  %div69 = sdiv i32 %sub68, %96, !dbg !4613
  store i32 %div69, i32* %dest_copy, align 4, !dbg !4608
  %97 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4614
  %distance70 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %97, i32 0, i32 5, !dbg !4616
  %98 = load i32, i32* %distance70, align 4, !dbg !4616
  %cmp71 = icmp eq i32 %98, 1, !dbg !4617
  br i1 %cmp71, label %if.then72, label %if.end84, !dbg !4618

if.then72:                                        ; preds = %if.then59
  %99 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4619
  %dest73 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %99, i32 0, i32 1, !dbg !4619
  %100 = load %struct.ddg_node*, %struct.ddg_node** %dest73, align 8, !dbg !4619
  %aux74 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %100, i32 0, i32 7, !dbg !4619
  %info75 = bitcast %union.anon.1* %aux74 to i8**, !dbg !4619
  %101 = load i8*, i8** %info75, align 8, !dbg !4619
  %102 = bitcast i8* %101 to %struct.node_sched_params*, !dbg !4619
  %time76 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %102, i32 0, i32 1, !dbg !4619
  %103 = load i32, i32* %time76, align 4, !dbg !4619
  %104 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4620
  %src77 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %104, i32 0, i32 0, !dbg !4620
  %105 = load %struct.ddg_node*, %struct.ddg_node** %src77, align 8, !dbg !4620
  %aux78 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %105, i32 0, i32 7, !dbg !4620
  %info79 = bitcast %union.anon.1* %aux78 to i8**, !dbg !4620
  %106 = load i8*, i8** %info79, align 8, !dbg !4620
  %107 = bitcast i8* %106 to %struct.node_sched_params*, !dbg !4620
  %time80 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %107, i32 0, i32 1, !dbg !4620
  %108 = load i32, i32* %time80, align 4, !dbg !4620
  %sub81 = sub nsw i32 %103, %108, !dbg !4621
  %109 = load i32, i32* %ii, align 4, !dbg !4622
  %add82 = add nsw i32 %sub81, %109, !dbg !4623
  %110 = load i32, i32* %ii, align 4, !dbg !4624
  %div83 = sdiv i32 %add82, %110, !dbg !4625
  store i32 %div83, i32* %dest_copy, align 4, !dbg !4626
  br label %if.end84, !dbg !4627

if.end84:                                         ; preds = %if.then72, %if.then59
  %111 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4628
  %dest85 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %111, i32 0, i32 1, !dbg !4628
  %112 = load %struct.ddg_node*, %struct.ddg_node** %dest85, align 8, !dbg !4628
  %aux86 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %112, i32 0, i32 7, !dbg !4628
  %info87 = bitcast %union.anon.1* %aux86 to i8**, !dbg !4628
  %113 = load i8*, i8** %info87, align 8, !dbg !4628
  %114 = bitcast i8* %113 to %struct.node_sched_params*, !dbg !4628
  %row88 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %114, i32 0, i32 4, !dbg !4628
  %115 = load i32, i32* %row88, align 4, !dbg !4628
  %116 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4630
  %src89 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %116, i32 0, i32 0, !dbg !4630
  %117 = load %struct.ddg_node*, %struct.ddg_node** %src89, align 8, !dbg !4630
  %aux90 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %117, i32 0, i32 7, !dbg !4630
  %info91 = bitcast %union.anon.1* %aux90 to i8**, !dbg !4630
  %118 = load i8*, i8** %info91, align 8, !dbg !4630
  %119 = bitcast i8* %118 to %struct.node_sched_params*, !dbg !4630
  %row92 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %119, i32 0, i32 4, !dbg !4630
  %120 = load i32, i32* %row92, align 4, !dbg !4630
  %cmp93 = icmp eq i32 %115, %120, !dbg !4631
  br i1 %cmp93, label %land.lhs.true94, label %if.end106, !dbg !4632

land.lhs.true94:                                  ; preds = %if.end84
  %121 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4633
  %dest95 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %121, i32 0, i32 1, !dbg !4633
  %122 = load %struct.ddg_node*, %struct.ddg_node** %dest95, align 8, !dbg !4633
  %aux96 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %122, i32 0, i32 7, !dbg !4633
  %info97 = bitcast %union.anon.1* %aux96 to i8**, !dbg !4633
  %123 = load i8*, i8** %info97, align 8, !dbg !4633
  %124 = bitcast i8* %123 to %struct.node_sched_params*, !dbg !4633
  %column98 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %124, i32 0, i32 6, !dbg !4633
  %125 = load i32, i32* %column98, align 4, !dbg !4633
  %126 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4634
  %src99 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %126, i32 0, i32 0, !dbg !4634
  %127 = load %struct.ddg_node*, %struct.ddg_node** %src99, align 8, !dbg !4634
  %aux100 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %127, i32 0, i32 7, !dbg !4634
  %info101 = bitcast %union.anon.1* %aux100 to i8**, !dbg !4634
  %128 = load i8*, i8** %info101, align 8, !dbg !4634
  %129 = bitcast i8* %128 to %struct.node_sched_params*, !dbg !4634
  %column102 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %129, i32 0, i32 6, !dbg !4634
  %130 = load i32, i32* %column102, align 4, !dbg !4634
  %cmp103 = icmp slt i32 %125, %130, !dbg !4635
  br i1 %cmp103, label %if.then104, label %if.end106, !dbg !4636

if.then104:                                       ; preds = %land.lhs.true94
  %131 = load i32, i32* %dest_copy, align 4, !dbg !4637
  %dec105 = add nsw i32 %131, -1, !dbg !4637
  store i32 %dec105, i32* %dest_copy, align 4, !dbg !4637
  br label %if.end106, !dbg !4638

if.end106:                                        ; preds = %if.then104, %land.lhs.true94, %if.end84
  %132 = load i32, i32* %dest_copy, align 4, !dbg !4639
  %tobool107 = icmp ne i32 %132, 0, !dbg !4639
  br i1 %tobool107, label %if.then108, label %if.end113, !dbg !4641

if.then108:                                       ; preds = %if.end106
  %133 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %uses_of_defs, align 8, !dbg !4642
  %134 = load i32, i32* %dest_copy, align 4, !dbg !4643
  %sub109 = sub nsw i32 %134, 1, !dbg !4644
  %idxprom110 = sext i32 %sub109 to i64, !dbg !4642
  %arrayidx111 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %133, i64 %idxprom110, !dbg !4642
  %135 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx111, align 8, !dbg !4642
  %136 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4645
  %dest112 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %136, i32 0, i32 1, !dbg !4646
  %137 = load %struct.ddg_node*, %struct.ddg_node** %dest112, align 8, !dbg !4646
  %cuid = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %137, i32 0, i32 0, !dbg !4647
  %138 = load i32, i32* %cuid, align 8, !dbg !4647
  call void @SET_BIT(%struct.simple_bitmap_def* %135, i32 %138), !dbg !4648
  br label %if.end113, !dbg !4648

if.end113:                                        ; preds = %if.then108, %if.end106
  br label %if.end114, !dbg !4649

if.end114:                                        ; preds = %if.end113, %land.lhs.true55, %for.body52
  br label %for.inc115, !dbg !4603

for.inc115:                                       ; preds = %if.end114
  %139 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !4650
  %next_out116 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %139, i32 0, i32 7, !dbg !4651
  %140 = load %struct.ddg_edge*, %struct.ddg_edge** %next_out116, align 8, !dbg !4651
  store %struct.ddg_edge* %140, %struct.ddg_edge** %e, align 8, !dbg !4652
  br label %for.cond50, !dbg !4653, !llvm.loop !4654

for.end117:                                       ; preds = %for.cond50
  %141 = load i32, i32* %nreg_moves, align 4, !dbg !4656
  %142 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4657
  %aux118 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %142, i32 0, i32 7, !dbg !4657
  %info119 = bitcast %union.anon.1* %aux118 to i8**, !dbg !4657
  %143 = load i8*, i8** %info119, align 8, !dbg !4657
  %144 = bitcast i8* %143 to %struct.node_sched_params*, !dbg !4657
  %nreg_moves120 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %144, i32 0, i32 3, !dbg !4657
  store i32 %141, i32* %nreg_moves120, align 8, !dbg !4658
  %145 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4659
  %insn = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %145, i32 0, i32 1, !dbg !4659
  %146 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4659
  %147 = bitcast %struct.rtx_def* %146 to i32*, !dbg !4659
  %bf.load = load i32, i32* %147, align 8, !dbg !4659
  %bf.clear = and i32 %bf.load, 65535, !dbg !4659
  %cmp121 = icmp eq i32 %bf.clear, 8, !dbg !4659
  br i1 %cmp121, label %cond.true136, label %lor.lhs.false, !dbg !4659

lor.lhs.false:                                    ; preds = %for.end117
  %148 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4659
  %insn122 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %148, i32 0, i32 1, !dbg !4659
  %149 = load %struct.rtx_def*, %struct.rtx_def** %insn122, align 8, !dbg !4659
  %150 = bitcast %struct.rtx_def* %149 to i32*, !dbg !4659
  %bf.load123 = load i32, i32* %150, align 8, !dbg !4659
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !4659
  %cmp125 = icmp eq i32 %bf.clear124, 7, !dbg !4659
  br i1 %cmp125, label %cond.true136, label %lor.lhs.false126, !dbg !4659

lor.lhs.false126:                                 ; preds = %lor.lhs.false
  %151 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4659
  %insn127 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %151, i32 0, i32 1, !dbg !4659
  %152 = load %struct.rtx_def*, %struct.rtx_def** %insn127, align 8, !dbg !4659
  %153 = bitcast %struct.rtx_def* %152 to i32*, !dbg !4659
  %bf.load128 = load i32, i32* %153, align 8, !dbg !4659
  %bf.clear129 = and i32 %bf.load128, 65535, !dbg !4659
  %cmp130 = icmp eq i32 %bf.clear129, 9, !dbg !4659
  br i1 %cmp130, label %cond.true136, label %lor.lhs.false131, !dbg !4659

lor.lhs.false131:                                 ; preds = %lor.lhs.false126
  %154 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4659
  %insn132 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %154, i32 0, i32 1, !dbg !4659
  %155 = load %struct.rtx_def*, %struct.rtx_def** %insn132, align 8, !dbg !4659
  %156 = bitcast %struct.rtx_def* %155 to i32*, !dbg !4659
  %bf.load133 = load i32, i32* %156, align 8, !dbg !4659
  %bf.clear134 = and i32 %bf.load133, 65535, !dbg !4659
  %cmp135 = icmp eq i32 %bf.clear134, 10, !dbg !4659
  br i1 %cmp135, label %cond.true136, label %cond.false159, !dbg !4659

cond.true136:                                     ; preds = %lor.lhs.false131, %lor.lhs.false126, %lor.lhs.false, %for.end117
  %157 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4659
  %insn137 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %157, i32 0, i32 1, !dbg !4659
  %158 = load %struct.rtx_def*, %struct.rtx_def** %insn137, align 8, !dbg !4659
  %u138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %158, i32 0, i32 1, !dbg !4659
  %fld = bitcast %union.u* %u138 to [1 x %union.rtunion_def]*, !dbg !4659
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4659
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx139 to %struct.rtx_def**, !dbg !4659
  %159 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4659
  %160 = bitcast %struct.rtx_def* %159 to i32*, !dbg !4659
  %bf.load140 = load i32, i32* %160, align 8, !dbg !4659
  %bf.clear141 = and i32 %bf.load140, 65535, !dbg !4659
  %cmp142 = icmp eq i32 %bf.clear141, 23, !dbg !4659
  br i1 %cmp142, label %cond.true143, label %cond.false149, !dbg !4659

cond.true143:                                     ; preds = %cond.true136
  %161 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4659
  %insn144 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %161, i32 0, i32 1, !dbg !4659
  %162 = load %struct.rtx_def*, %struct.rtx_def** %insn144, align 8, !dbg !4659
  %u145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1, !dbg !4659
  %fld146 = bitcast %union.u* %u145 to [1 x %union.rtunion_def]*, !dbg !4659
  %arrayidx147 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld146, i64 0, i64 5, !dbg !4659
  %rt_rtx148 = bitcast %union.rtunion_def* %arrayidx147 to %struct.rtx_def**, !dbg !4659
  %163 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx148, align 8, !dbg !4659
  br label %cond.end157, !dbg !4659

cond.false149:                                    ; preds = %cond.true136
  %164 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4659
  %insn150 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %164, i32 0, i32 1, !dbg !4659
  %165 = load %struct.rtx_def*, %struct.rtx_def** %insn150, align 8, !dbg !4659
  %166 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4659
  %insn151 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %166, i32 0, i32 1, !dbg !4659
  %167 = load %struct.rtx_def*, %struct.rtx_def** %insn151, align 8, !dbg !4659
  %u152 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !4659
  %fld153 = bitcast %union.u* %u152 to [1 x %union.rtunion_def]*, !dbg !4659
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld153, i64 0, i64 5, !dbg !4659
  %rt_rtx155 = bitcast %union.rtunion_def* %arrayidx154 to %struct.rtx_def**, !dbg !4659
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx155, align 8, !dbg !4659
  %call156 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %165, %struct.rtx_def* %168), !dbg !4659
  br label %cond.end157, !dbg !4659

cond.end157:                                      ; preds = %cond.false149, %cond.true143
  %cond158 = phi %struct.rtx_def* [ %163, %cond.true143 ], [ %call156, %cond.false149 ], !dbg !4659
  br label %cond.end160, !dbg !4659

cond.false159:                                    ; preds = %lor.lhs.false131
  br label %cond.end160, !dbg !4659

cond.end160:                                      ; preds = %cond.false159, %cond.end157
  %cond161 = phi %struct.rtx_def* [ %cond158, %cond.end157 ], [ null, %cond.false159 ], !dbg !4659
  %u162 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond161, i32 0, i32 1, !dbg !4659
  %fld163 = bitcast %union.u* %u162 to [1 x %union.rtunion_def]*, !dbg !4659
  %arrayidx164 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld163, i64 0, i64 0, !dbg !4659
  %rt_rtx165 = bitcast %union.rtunion_def* %arrayidx164 to %struct.rtx_def**, !dbg !4659
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx165, align 8, !dbg !4659
  %call166 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %169), !dbg !4660
  store %struct.rtx_def* %call166, %struct.rtx_def** %prev_reg, align 8, !dbg !4661
  store %struct.rtx_def* %call166, %struct.rtx_def** %old_reg, align 8, !dbg !4662
  %170 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4663
  %first_note = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %170, i32 0, i32 2, !dbg !4664
  %171 = load %struct.rtx_def*, %struct.rtx_def** %first_note, align 8, !dbg !4664
  store %struct.rtx_def* %171, %struct.rtx_def** %last_reg_move, align 8, !dbg !4665
  store i32 0, i32* %i_reg_move, align 4, !dbg !4666
  br label %for.cond167, !dbg !4668

for.cond167:                                      ; preds = %for.inc213, %cond.end160
  %172 = load i32, i32* %i_reg_move, align 4, !dbg !4669
  %173 = load i32, i32* %nreg_moves, align 4, !dbg !4671
  %cmp168 = icmp slt i32 %172, %173, !dbg !4672
  br i1 %cmp168, label %for.body169, label %for.end214, !dbg !4673

for.body169:                                      ; preds = %for.cond167
  call void @llvm.dbg.declare(metadata i32* %i_use, metadata !4674, metadata !DIExpression()), !dbg !4676
  store i32 0, i32* %i_use, align 4, !dbg !4676
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_reg, metadata !4677, metadata !DIExpression()), !dbg !4678
  %174 = load %struct.rtx_def*, %struct.rtx_def** %prev_reg, align 8, !dbg !4679
  %175 = bitcast %struct.rtx_def* %174 to i32*, !dbg !4679
  %bf.load170 = load i32, i32* %175, align 8, !dbg !4679
  %bf.lshr = lshr i32 %bf.load170, 16, !dbg !4679
  %bf.clear171 = and i32 %bf.lshr, 255, !dbg !4679
  %call172 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear171), !dbg !4680
  store %struct.rtx_def* %call172, %struct.rtx_def** %new_reg, align 8, !dbg !4678
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg_move, metadata !4681, metadata !DIExpression()), !dbg !4682
  %176 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8, !dbg !4683
  %177 = load %struct.rtx_def*, %struct.rtx_def** %prev_reg, align 8, !dbg !4684
  %call173 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %176, %struct.rtx_def* %177), !dbg !4685
  store %struct.rtx_def* %call173, %struct.rtx_def** %reg_move, align 8, !dbg !4682
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !4686, metadata !DIExpression()), !dbg !4697
  %178 = load %struct.rtx_def*, %struct.rtx_def** %reg_move, align 8, !dbg !4698
  %179 = load %struct.rtx_def*, %struct.rtx_def** %last_reg_move, align 8, !dbg !4699
  call void @add_insn_before(%struct.rtx_def* %178, %struct.rtx_def* %179, %struct.basic_block_def* null), !dbg !4700
  %180 = load %struct.rtx_def*, %struct.rtx_def** %reg_move, align 8, !dbg !4701
  store %struct.rtx_def* %180, %struct.rtx_def** %last_reg_move, align 8, !dbg !4702
  %181 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4703
  %aux174 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %181, i32 0, i32 7, !dbg !4703
  %info175 = bitcast %union.anon.1* %aux174 to i8**, !dbg !4703
  %182 = load i8*, i8** %info175, align 8, !dbg !4703
  %183 = bitcast i8* %182 to %struct.node_sched_params*, !dbg !4703
  %first_reg_move = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %183, i32 0, i32 2, !dbg !4703
  %184 = load %struct.rtx_def*, %struct.rtx_def** %first_reg_move, align 8, !dbg !4703
  %tobool176 = icmp ne %struct.rtx_def* %184, null, !dbg !4703
  br i1 %tobool176, label %if.end181, label %if.then177, !dbg !4705

if.then177:                                       ; preds = %for.body169
  %185 = load %struct.rtx_def*, %struct.rtx_def** %reg_move, align 8, !dbg !4706
  %186 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !4707
  %aux178 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %186, i32 0, i32 7, !dbg !4707
  %info179 = bitcast %union.anon.1* %aux178 to i8**, !dbg !4707
  %187 = load i8*, i8** %info179, align 8, !dbg !4707
  %188 = bitcast i8* %187 to %struct.node_sched_params*, !dbg !4707
  %first_reg_move180 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %188, i32 0, i32 2, !dbg !4707
  store %struct.rtx_def* %185, %struct.rtx_def** %first_reg_move180, align 8, !dbg !4708
  br label %if.end181, !dbg !4707

if.end181:                                        ; preds = %if.then177, %for.body169
  %189 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %uses_of_defs, align 8, !dbg !4709
  %190 = load i32, i32* %i_reg_move, align 4, !dbg !4709
  %idxprom182 = sext i32 %190 to i64, !dbg !4709
  %arrayidx183 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %189, i64 %idxprom182, !dbg !4709
  %191 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx183, align 8, !dbg !4709
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %191, i32 0), !dbg !4709
  br label %for.cond184, !dbg !4709

for.cond184:                                      ; preds = %for.inc211, %if.end181
  %call185 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %i_use), !dbg !4711
  %tobool186 = icmp ne i8 %call185, 0, !dbg !4709
  br i1 %tobool186, label %for.body187, label %for.end212, !dbg !4709

for.body187:                                      ; preds = %for.cond184
  call void @llvm.dbg.declare(metadata %struct.undo_replace_buff_elem** %rep, metadata !4713, metadata !DIExpression()), !dbg !4715
  %call188 = call i8* @xcalloc(i64 1, i64 32), !dbg !4716
  %192 = bitcast i8* %call188 to %struct.undo_replace_buff_elem*, !dbg !4717
  store %struct.undo_replace_buff_elem* %192, %struct.undo_replace_buff_elem** %rep, align 8, !dbg !4718
  %193 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !4719
  %nodes189 = getelementptr inbounds %struct.ddg, %struct.ddg* %193, i32 0, i32 5, !dbg !4720
  %194 = load %struct.ddg_node*, %struct.ddg_node** %nodes189, align 8, !dbg !4720
  %195 = load i32, i32* %i_use, align 4, !dbg !4721
  %idxprom190 = zext i32 %195 to i64, !dbg !4719
  %arrayidx191 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %194, i64 %idxprom190, !dbg !4719
  %insn192 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %arrayidx191, i32 0, i32 1, !dbg !4722
  %196 = load %struct.rtx_def*, %struct.rtx_def** %insn192, align 8, !dbg !4722
  %197 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %rep, align 8, !dbg !4723
  %insn193 = getelementptr inbounds %struct.undo_replace_buff_elem, %struct.undo_replace_buff_elem* %197, i32 0, i32 0, !dbg !4724
  store %struct.rtx_def* %196, %struct.rtx_def** %insn193, align 8, !dbg !4725
  %198 = load %struct.rtx_def*, %struct.rtx_def** %old_reg, align 8, !dbg !4726
  %199 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %rep, align 8, !dbg !4727
  %orig_reg = getelementptr inbounds %struct.undo_replace_buff_elem, %struct.undo_replace_buff_elem* %199, i32 0, i32 1, !dbg !4728
  store %struct.rtx_def* %198, %struct.rtx_def** %orig_reg, align 8, !dbg !4729
  %200 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8, !dbg !4730
  %201 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %rep, align 8, !dbg !4731
  %new_reg194 = getelementptr inbounds %struct.undo_replace_buff_elem, %struct.undo_replace_buff_elem* %201, i32 0, i32 2, !dbg !4732
  store %struct.rtx_def* %200, %struct.rtx_def** %new_reg194, align 8, !dbg !4733
  %202 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %reg_move_replaces, align 8, !dbg !4734
  %tobool195 = icmp ne %struct.undo_replace_buff_elem* %202, null, !dbg !4734
  br i1 %tobool195, label %if.else, label %if.then196, !dbg !4736

if.then196:                                       ; preds = %for.body187
  %203 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %rep, align 8, !dbg !4737
  store %struct.undo_replace_buff_elem* %203, %struct.undo_replace_buff_elem** %reg_move_replaces, align 8, !dbg !4738
  br label %if.end197, !dbg !4739

if.else:                                          ; preds = %for.body187
  %204 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %reg_move_replaces, align 8, !dbg !4740
  %205 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %rep, align 8, !dbg !4742
  %next = getelementptr inbounds %struct.undo_replace_buff_elem, %struct.undo_replace_buff_elem* %205, i32 0, i32 3, !dbg !4743
  store %struct.undo_replace_buff_elem* %204, %struct.undo_replace_buff_elem** %next, align 8, !dbg !4744
  %206 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %rep, align 8, !dbg !4745
  store %struct.undo_replace_buff_elem* %206, %struct.undo_replace_buff_elem** %reg_move_replaces, align 8, !dbg !4746
  br label %if.end197

if.end197:                                        ; preds = %if.else, %if.then196
  %207 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !4747
  %nodes198 = getelementptr inbounds %struct.ddg, %struct.ddg* %207, i32 0, i32 5, !dbg !4748
  %208 = load %struct.ddg_node*, %struct.ddg_node** %nodes198, align 8, !dbg !4748
  %209 = load i32, i32* %i_use, align 4, !dbg !4749
  %idxprom199 = zext i32 %209 to i64, !dbg !4747
  %arrayidx200 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %208, i64 %idxprom199, !dbg !4747
  %insn201 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %arrayidx200, i32 0, i32 1, !dbg !4750
  %210 = load %struct.rtx_def*, %struct.rtx_def** %insn201, align 8, !dbg !4750
  %211 = load %struct.rtx_def*, %struct.rtx_def** %old_reg, align 8, !dbg !4751
  %212 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8, !dbg !4752
  %call202 = call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %210, %struct.rtx_def* %211, %struct.rtx_def* %212), !dbg !4753
  %213 = load i8, i8* %rescan.addr, align 1, !dbg !4754
  %tobool203 = icmp ne i8 %213, 0, !dbg !4754
  br i1 %tobool203, label %if.then204, label %if.end210, !dbg !4756

if.then204:                                       ; preds = %if.end197
  %214 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !4757
  %nodes205 = getelementptr inbounds %struct.ddg, %struct.ddg* %214, i32 0, i32 5, !dbg !4758
  %215 = load %struct.ddg_node*, %struct.ddg_node** %nodes205, align 8, !dbg !4758
  %216 = load i32, i32* %i_use, align 4, !dbg !4759
  %idxprom206 = zext i32 %216 to i64, !dbg !4757
  %arrayidx207 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %215, i64 %idxprom206, !dbg !4757
  %insn208 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %arrayidx207, i32 0, i32 1, !dbg !4760
  %217 = load %struct.rtx_def*, %struct.rtx_def** %insn208, align 8, !dbg !4760
  %call209 = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %217), !dbg !4761
  br label %if.end210, !dbg !4761

if.end210:                                        ; preds = %if.then204, %if.end197
  br label %for.inc211, !dbg !4762

for.inc211:                                       ; preds = %if.end210
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !4711
  br label %for.cond184, !dbg !4711, !llvm.loop !4763

for.end212:                                       ; preds = %for.cond184
  %218 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8, !dbg !4765
  store %struct.rtx_def* %218, %struct.rtx_def** %prev_reg, align 8, !dbg !4766
  br label %for.inc213, !dbg !4767

for.inc213:                                       ; preds = %for.end212
  %219 = load i32, i32* %i_reg_move, align 4, !dbg !4768
  %inc = add nsw i32 %219, 1, !dbg !4768
  store i32 %inc, i32* %i_reg_move, align 4, !dbg !4768
  br label %for.cond167, !dbg !4769, !llvm.loop !4770

for.end214:                                       ; preds = %for.cond167
  %220 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %uses_of_defs, align 8, !dbg !4772
  %221 = bitcast %struct.simple_bitmap_def** %220 to i8*, !dbg !4772
  call void @free(i8* %221), !dbg !4772
  br label %for.inc215, !dbg !4773

for.inc215:                                       ; preds = %for.end214, %if.then46
  %222 = load i32, i32* %i, align 4, !dbg !4774
  %inc216 = add nsw i32 %222, 1, !dbg !4774
  store i32 %inc216, i32* %i, align 4, !dbg !4774
  br label %for.cond, !dbg !4775, !llvm.loop !4776

for.end217:                                       ; preds = %for.cond
  %223 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %reg_move_replaces, align 8, !dbg !4778
  ret %struct.undo_replace_buff_elem* %223, !dbg !4779
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_node_sched_params(%struct._IO_FILE* %file, i32 %num_nodes, %struct.ddg* %g) #0 !dbg !4780 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %num_nodes.addr = alloca i32, align 4
  %g.addr = alloca %struct.ddg*, align 8
  %i = alloca i32, align 4
  %nsp = alloca %struct.node_sched_params*, align 8
  %reg_move = alloca %struct.rtx_def*, align 8
  %j = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !4783, metadata !DIExpression()), !dbg !4784
  store i32 %num_nodes, i32* %num_nodes.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_nodes.addr, metadata !4785, metadata !DIExpression()), !dbg !4786
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !4787, metadata !DIExpression()), !dbg !4788
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4789, metadata !DIExpression()), !dbg !4790
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4791
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !4791
  br i1 %tobool, label %if.end, label %if.then, !dbg !4793

if.then:                                          ; preds = %entry
  br label %for.end18, !dbg !4794

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4795
  br label %for.cond, !dbg !4797

for.cond:                                         ; preds = %for.inc16, %if.end
  %1 = load i32, i32* %i, align 4, !dbg !4798
  %2 = load i32, i32* %num_nodes.addr, align 4, !dbg !4800
  %cmp = icmp slt i32 %1, %2, !dbg !4801
  br i1 %cmp, label %for.body, label %for.end18, !dbg !4802

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.node_sched_params** %nsp, metadata !4803, metadata !DIExpression()), !dbg !4805
  %3 = load %struct.node_sched_params*, %struct.node_sched_params** @node_sched_params, align 8, !dbg !4806
  %4 = load i32, i32* %i, align 4, !dbg !4807
  %idxprom = sext i32 %4 to i64, !dbg !4806
  %arrayidx = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %3, i64 %idxprom, !dbg !4806
  store %struct.node_sched_params* %arrayidx, %struct.node_sched_params** %nsp, align 8, !dbg !4805
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg_move, metadata !4808, metadata !DIExpression()), !dbg !4809
  %5 = load %struct.node_sched_params*, %struct.node_sched_params** %nsp, align 8, !dbg !4810
  %first_reg_move = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %5, i32 0, i32 2, !dbg !4811
  %6 = load %struct.rtx_def*, %struct.rtx_def** %first_reg_move, align 8, !dbg !4811
  store %struct.rtx_def* %6, %struct.rtx_def** %reg_move, align 8, !dbg !4809
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4812, metadata !DIExpression()), !dbg !4813
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4814
  %8 = load i32, i32* %i, align 4, !dbg !4815
  %9 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !4816
  %nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %9, i32 0, i32 5, !dbg !4816
  %10 = load %struct.ddg_node*, %struct.ddg_node** %nodes, align 8, !dbg !4816
  %11 = load i32, i32* %i, align 4, !dbg !4816
  %idxprom1 = sext i32 %11 to i64, !dbg !4816
  %arrayidx2 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %10, i64 %idxprom1, !dbg !4816
  %insn = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %arrayidx2, i32 0, i32 1, !dbg !4816
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4816
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !4816
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4816
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4816
  %rt_int = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !4816
  %13 = load i32, i32* %rt_int, align 8, !dbg !4816
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.70, i64 0, i64 0), i32 %8, i32 %13), !dbg !4817
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4818
  %15 = load %struct.node_sched_params*, %struct.node_sched_params** %nsp, align 8, !dbg !4819
  %asap = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %15, i32 0, i32 0, !dbg !4820
  %16 = load i32, i32* %asap, align 8, !dbg !4820
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.71, i64 0, i64 0), i32 %16), !dbg !4821
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4822
  %18 = load %struct.node_sched_params*, %struct.node_sched_params** %nsp, align 8, !dbg !4823
  %time = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %18, i32 0, i32 1, !dbg !4824
  %19 = load i32, i32* %time, align 4, !dbg !4824
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.72, i64 0, i64 0), i32 %19), !dbg !4825
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4826
  %21 = load %struct.node_sched_params*, %struct.node_sched_params** %nsp, align 8, !dbg !4827
  %nreg_moves = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %21, i32 0, i32 3, !dbg !4828
  %22 = load i32, i32* %nreg_moves, align 8, !dbg !4828
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.73, i64 0, i64 0), i32 %22), !dbg !4829
  store i32 0, i32* %j, align 4, !dbg !4830
  br label %for.cond7, !dbg !4832

for.cond7:                                        ; preds = %for.inc, %for.body
  %23 = load i32, i32* %j, align 4, !dbg !4833
  %24 = load %struct.node_sched_params*, %struct.node_sched_params** %nsp, align 8, !dbg !4835
  %nreg_moves8 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %24, i32 0, i32 3, !dbg !4836
  %25 = load i32, i32* %nreg_moves8, align 8, !dbg !4836
  %cmp9 = icmp slt i32 %23, %25, !dbg !4837
  br i1 %cmp9, label %for.body10, label %for.end, !dbg !4838

for.body10:                                       ; preds = %for.cond7
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4839
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.74, i64 0, i64 0)), !dbg !4841
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !4842
  %28 = load %struct.rtx_def*, %struct.rtx_def** %reg_move, align 8, !dbg !4843
  %call12 = call i32 @print_rtl_single(%struct._IO_FILE* %27, %struct.rtx_def* %28), !dbg !4844
  %29 = load %struct.rtx_def*, %struct.rtx_def** %reg_move, align 8, !dbg !4845
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !4845
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !4845
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 1, !dbg !4845
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !4845
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4845
  store %struct.rtx_def* %30, %struct.rtx_def** %reg_move, align 8, !dbg !4846
  br label %for.inc, !dbg !4847

for.inc:                                          ; preds = %for.body10
  %31 = load i32, i32* %j, align 4, !dbg !4848
  %inc = add nsw i32 %31, 1, !dbg !4848
  store i32 %inc, i32* %j, align 4, !dbg !4848
  br label %for.cond7, !dbg !4849, !llvm.loop !4850

for.end:                                          ; preds = %for.cond7
  br label %for.inc16, !dbg !4852

for.inc16:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4, !dbg !4853
  %inc17 = add nsw i32 %32, 1, !dbg !4853
  store i32 %inc17, i32* %i, align 4, !dbg !4853
  br label %for.cond, !dbg !4854, !llvm.loop !4855

for.end18:                                        ; preds = %if.then, %for.cond
  ret void, !dbg !4857
}

; Function Attrs: noinline nounwind uwtable
define internal void @generate_prolog_epilog(%struct.partial_schedule* %ps, %struct.loop* %loop, %struct.rtx_def* %count_reg, %struct.rtx_def* %count_init) #0 !dbg !4858 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %count_reg.addr = alloca %struct.rtx_def*, align 8
  %count_init.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %last_stage = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %sub_reg = alloca %struct.rtx_def*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !4861, metadata !DIExpression()), !dbg !4862
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4863, metadata !DIExpression()), !dbg !4864
  store %struct.rtx_def* %count_reg, %struct.rtx_def** %count_reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %count_reg.addr, metadata !4865, metadata !DIExpression()), !dbg !4866
  store %struct.rtx_def* %count_init, %struct.rtx_def** %count_init.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %count_init.addr, metadata !4867, metadata !DIExpression()), !dbg !4868
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4869, metadata !DIExpression()), !dbg !4870
  call void @llvm.dbg.declare(metadata i32* %last_stage, metadata !4871, metadata !DIExpression()), !dbg !4872
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4873
  %max_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %0, i32 0, i32 4, !dbg !4873
  %1 = load i32, i32* %max_cycle, align 4, !dbg !4873
  %2 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4873
  %min_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %2, i32 0, i32 3, !dbg !4873
  %3 = load i32, i32* %min_cycle, align 8, !dbg !4873
  %sub = sub nsw i32 %1, %3, !dbg !4873
  %add = add nsw i32 %sub, 1, !dbg !4873
  %4 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4873
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %4, i32 0, i32 0, !dbg !4873
  %5 = load i32, i32* %ii, align 8, !dbg !4873
  %add1 = add nsw i32 %add, %5, !dbg !4873
  %sub2 = sub nsw i32 %add1, 1, !dbg !4873
  %6 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4873
  %ii3 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %6, i32 0, i32 0, !dbg !4873
  %7 = load i32, i32* %ii3, align 8, !dbg !4873
  %div = sdiv i32 %sub2, %7, !dbg !4873
  %sub4 = sub nsw i32 %div, 1, !dbg !4874
  store i32 %sub4, i32* %last_stage, align 4, !dbg !4872
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4875, metadata !DIExpression()), !dbg !4876
  call void @start_sequence(), !dbg !4877
  %8 = load %struct.rtx_def*, %struct.rtx_def** %count_init.addr, align 8, !dbg !4878
  %tobool = icmp ne %struct.rtx_def* %8, null, !dbg !4878
  br i1 %tobool, label %if.end15, label %if.then, !dbg !4880

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sub_reg, metadata !4881, metadata !DIExpression()), !dbg !4883
  store %struct.rtx_def* null, %struct.rtx_def** %sub_reg, align 8, !dbg !4883
  %9 = load %struct.rtx_def*, %struct.rtx_def** %count_reg.addr, align 8, !dbg !4884
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4884
  %bf.load = load i32, i32* %10, align 8, !dbg !4884
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4884
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4884
  %11 = load %struct.rtx_def*, %struct.rtx_def** %count_reg.addr, align 8, !dbg !4885
  %12 = load i32, i32* %last_stage, align 4, !dbg !4886
  %conv = sext i32 %12 to i64, !dbg !4886
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !4886
  %13 = load %struct.rtx_def*, %struct.rtx_def** %count_reg.addr, align 8, !dbg !4887
  %call5 = call %struct.rtx_def* @expand_simple_binop(i32 %bf.clear, i32 50, %struct.rtx_def* %11, %struct.rtx_def* %call, %struct.rtx_def* %13, i32 1, i32 0), !dbg !4888
  store %struct.rtx_def* %call5, %struct.rtx_def** %sub_reg, align 8, !dbg !4889
  %14 = load %struct.rtx_def*, %struct.rtx_def** %sub_reg, align 8, !dbg !4890
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !4890
  %bf.load6 = load i32, i32* %15, align 8, !dbg !4890
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !4890
  %cmp = icmp eq i32 %bf.clear7, 37, !dbg !4890
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4890

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 723, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4890
  br label %cond.end, !dbg !4890

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !4890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4890
  %16 = load %struct.rtx_def*, %struct.rtx_def** %sub_reg, align 8, !dbg !4891
  %call9 = call i32 @rhs_regno(%struct.rtx_def* %16), !dbg !4891
  %17 = load %struct.rtx_def*, %struct.rtx_def** %count_reg.addr, align 8, !dbg !4893
  %call10 = call i32 @rhs_regno(%struct.rtx_def* %17), !dbg !4893
  %cmp11 = icmp ne i32 %call9, %call10, !dbg !4894
  br i1 %cmp11, label %if.then13, label %if.end, !dbg !4895

if.then13:                                        ; preds = %cond.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %count_reg.addr, align 8, !dbg !4896
  %19 = load %struct.rtx_def*, %struct.rtx_def** %sub_reg, align 8, !dbg !4897
  %call14 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %18, %struct.rtx_def* %19), !dbg !4898
  br label %if.end, !dbg !4898

if.end:                                           ; preds = %if.then13, %cond.end
  br label %if.end15, !dbg !4899

if.end15:                                         ; preds = %if.end, %entry
  store i32 0, i32* %i, align 4, !dbg !4900
  br label %for.cond, !dbg !4902

for.cond:                                         ; preds = %for.inc, %if.end15
  %20 = load i32, i32* %i, align 4, !dbg !4903
  %21 = load i32, i32* %last_stage, align 4, !dbg !4905
  %cmp16 = icmp slt i32 %20, %21, !dbg !4906
  br i1 %cmp16, label %for.body, label %for.end, !dbg !4907

for.body:                                         ; preds = %for.cond
  %22 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4908
  %23 = load i32, i32* %i, align 4, !dbg !4909
  %24 = load %struct.rtx_def*, %struct.rtx_def** %count_reg.addr, align 8, !dbg !4910
  call void @duplicate_insns_of_cycles(%struct.partial_schedule* %22, i32 0, i32 %23, i32 1, %struct.rtx_def* %24), !dbg !4911
  br label %for.inc, !dbg !4911

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4, !dbg !4912
  %inc = add nsw i32 %25, 1, !dbg !4912
  store i32 %inc, i32* %i, align 4, !dbg !4912
  br label %for.cond, !dbg !4913, !llvm.loop !4914

for.end:                                          ; preds = %for.cond
  %26 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4916
  %call18 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %26), !dbg !4917
  store %struct.edge_def* %call18, %struct.edge_def** %e, align 8, !dbg !4918
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4919
  %call19 = call %struct.rtx_def* @get_insns(), !dbg !4920
  %call20 = call %struct.basic_block_def* @split_edge_and_insert(%struct.edge_def* %27, %struct.rtx_def* %call19), !dbg !4921
  call void @end_sequence(), !dbg !4922
  call void @start_sequence(), !dbg !4923
  store i32 0, i32* %i, align 4, !dbg !4924
  br label %for.cond21, !dbg !4926

for.cond21:                                       ; preds = %for.inc26, %for.end
  %28 = load i32, i32* %i, align 4, !dbg !4927
  %29 = load i32, i32* %last_stage, align 4, !dbg !4929
  %cmp22 = icmp slt i32 %28, %29, !dbg !4930
  br i1 %cmp22, label %for.body24, label %for.end28, !dbg !4931

for.body24:                                       ; preds = %for.cond21
  %30 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4932
  %31 = load i32, i32* %i, align 4, !dbg !4933
  %add25 = add nsw i32 %31, 1, !dbg !4934
  %32 = load i32, i32* %last_stage, align 4, !dbg !4935
  %33 = load %struct.rtx_def*, %struct.rtx_def** %count_reg.addr, align 8, !dbg !4936
  call void @duplicate_insns_of_cycles(%struct.partial_schedule* %30, i32 %add25, i32 %32, i32 0, %struct.rtx_def* %33), !dbg !4937
  br label %for.inc26, !dbg !4937

for.inc26:                                        ; preds = %for.body24
  %34 = load i32, i32* %i, align 4, !dbg !4938
  %inc27 = add nsw i32 %34, 1, !dbg !4938
  store i32 %inc27, i32* %i, align 4, !dbg !4938
  br label %for.cond21, !dbg !4939, !llvm.loop !4940

for.end28:                                        ; preds = %for.cond21
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4942
  %call29 = call %struct.edge_def* @single_exit(%struct.loop* %35), !dbg !4942
  %tobool30 = icmp ne %struct.edge_def* %call29, null, !dbg !4942
  br i1 %tobool30, label %cond.false32, label %cond.true31, !dbg !4942

cond.true31:                                      ; preds = %for.end28
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 744, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4942
  br label %cond.end33, !dbg !4942

cond.false32:                                     ; preds = %for.end28
  br label %cond.end33, !dbg !4942

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi i32 [ 0, %cond.true31 ], [ 0, %cond.false32 ], !dbg !4942
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4943
  %call35 = call %struct.edge_def* @single_exit(%struct.loop* %36), !dbg !4944
  store %struct.edge_def* %call35, %struct.edge_def** %e, align 8, !dbg !4945
  %37 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4946
  %call36 = call %struct.rtx_def* @get_insns(), !dbg !4947
  %call37 = call %struct.basic_block_def* @split_edge_and_insert(%struct.edge_def* %37, %struct.rtx_def* %call36), !dbg !4948
  call void @end_sequence(), !dbg !4949
  ret void, !dbg !4950
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_undo_replace_buff(%struct.undo_replace_buff_elem* %reg_move_replaces) #0 !dbg !4951 {
entry:
  %reg_move_replaces.addr = alloca %struct.undo_replace_buff_elem*, align 8
  %rep = alloca %struct.undo_replace_buff_elem*, align 8
  store %struct.undo_replace_buff_elem* %reg_move_replaces, %struct.undo_replace_buff_elem** %reg_move_replaces.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.undo_replace_buff_elem** %reg_move_replaces.addr, metadata !4954, metadata !DIExpression()), !dbg !4955
  br label %while.cond, !dbg !4956

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %reg_move_replaces.addr, align 8, !dbg !4957
  %tobool = icmp ne %struct.undo_replace_buff_elem* %0, null, !dbg !4956
  br i1 %tobool, label %while.body, label %while.end, !dbg !4956

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.undo_replace_buff_elem** %rep, metadata !4958, metadata !DIExpression()), !dbg !4960
  %1 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %reg_move_replaces.addr, align 8, !dbg !4961
  store %struct.undo_replace_buff_elem* %1, %struct.undo_replace_buff_elem** %rep, align 8, !dbg !4960
  %2 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %reg_move_replaces.addr, align 8, !dbg !4962
  %next = getelementptr inbounds %struct.undo_replace_buff_elem, %struct.undo_replace_buff_elem* %2, i32 0, i32 3, !dbg !4963
  %3 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %next, align 8, !dbg !4963
  store %struct.undo_replace_buff_elem* %3, %struct.undo_replace_buff_elem** %reg_move_replaces.addr, align 8, !dbg !4964
  %4 = load %struct.undo_replace_buff_elem*, %struct.undo_replace_buff_elem** %rep, align 8, !dbg !4965
  %5 = bitcast %struct.undo_replace_buff_elem* %4 to i8*, !dbg !4965
  call void @free(i8* %5), !dbg !4966
  br label %while.cond, !dbg !4956, !llvm.loop !4967

while.end:                                        ; preds = %while.cond
  ret void, !dbg !4969
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_partial_schedule(%struct.partial_schedule* %ps) #0 !dbg !4970 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !4971, metadata !DIExpression()), !dbg !4972
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4973
  %tobool = icmp ne %struct.partial_schedule* %0, null, !dbg !4973
  br i1 %tobool, label %if.end, label %if.then, !dbg !4975

if.then:                                          ; preds = %entry
  br label %return, !dbg !4976

if.end:                                           ; preds = %entry
  %1 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4977
  call void @free_ps_insns(%struct.partial_schedule* %1), !dbg !4978
  %2 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4979
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %2, i32 0, i32 2, !dbg !4980
  %3 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !4980
  %4 = bitcast %struct.ps_insn** %3 to i8*, !dbg !4979
  call void @free(i8* %4), !dbg !4981
  %5 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !4982
  %6 = bitcast %struct.partial_schedule* %5 to i8*, !dbg !4982
  call void @free(i8* %6), !dbg !4983
  br label %return, !dbg !4984

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !4984
}

declare dso_local void @free(i8*) #2

declare dso_local void @free_ddg(%struct.ddg*) #2

declare dso_local void @haifa_sched_finish() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !4985 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !4990, metadata !DIExpression()), !dbg !4991
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4991
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !4991
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4991

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4991
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !4991
  %2 = load i32, i32* %num, align 8, !dbg !4991
  br label %cond.end, !dbg !4991

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4991

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4991
  ret i32 %cond, !dbg !4991
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @compute_jump_reg_dependencies(%struct.rtx_def* %insn, %struct.bitmap_head_def* %cond_exec, %struct.bitmap_head_def* %used, %struct.bitmap_head_def* %set) #0 !dbg !4992 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %cond_exec.addr = alloca %struct.bitmap_head_def*, align 8
  %used.addr = alloca %struct.bitmap_head_def*, align 8
  %set.addr = alloca %struct.bitmap_head_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4993, metadata !DIExpression()), !dbg !4994
  store %struct.bitmap_head_def* %cond_exec, %struct.bitmap_head_def** %cond_exec.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %cond_exec.addr, metadata !4995, metadata !DIExpression()), !dbg !4996
  store %struct.bitmap_head_def* %used, %struct.bitmap_head_def** %used.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %used.addr, metadata !4997, metadata !DIExpression()), !dbg !4998
  store %struct.bitmap_head_def* %set, %struct.bitmap_head_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %set.addr, metadata !4999, metadata !DIExpression()), !dbg !5000
  ret void, !dbg !5001
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @sms_print_insn(%struct.rtx_def* %insn, i32 %aligned) #0 !dbg !2388 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %aligned.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5002, metadata !DIExpression()), !dbg !5003
  store i32 %aligned, i32* %aligned.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %aligned.addr, metadata !5004, metadata !DIExpression()), !dbg !5005
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5006
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5006
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5006
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5006
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !5006
  %1 = load i32, i32* %rt_int, align 8, !dbg !5006
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @sms_print_insn.tmp, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i64 0, i64 0), i32 %1), !dbg !5007
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @sms_print_insn.tmp, i64 0, i64 0), !dbg !5008
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !5009 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5012, metadata !DIExpression()), !dbg !5013
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5013
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !5013
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !5013
  ret %struct.VEC_int_heap* %1, !dbg !5013
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !5014 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5017, metadata !DIExpression()), !dbg !5018
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5019, metadata !DIExpression()), !dbg !5018
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !5020, metadata !DIExpression()), !dbg !5018
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5021
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5021
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5021

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5021
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5021
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !5021
  %3 = load i32, i32* %num, align 8, !dbg !5021
  %cmp = icmp ult i32 %1, %3, !dbg !5021
  br i1 %cmp, label %if.then, label %if.else, !dbg !5018

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5023
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !5023
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5023
  %idxprom = zext i32 %5 to i64, !dbg !5023
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !5023
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !5023
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !5023
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !5023
  store i32 1, i32* %retval, align 4, !dbg !5023
  br label %return, !dbg !5023

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !5025
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !5025
  store i32 0, i32* %retval, align 4, !dbg !5025
  br label %return, !dbg !5025

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5018
  ret i32 %9, !dbg !5018
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !5027 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !5031, metadata !DIExpression()), !dbg !5032
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !5033, metadata !DIExpression()), !dbg !5032
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !5034, metadata !DIExpression()), !dbg !5032
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5032
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !5032
  %1 = load i32, i32* %num, align 4, !dbg !5032
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5032
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !5032
  %3 = load i32, i32* %alloc, align 4, !dbg !5032
  %cmp = icmp ult i32 %1, %3, !dbg !5032
  %conv = zext i1 %cmp to i32, !dbg !5032
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5032
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !5032
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5032
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !5032
  %6 = load i32, i32* %num1, align 4, !dbg !5032
  %inc = add i32 %6, 1, !dbg !5032
  store i32 %inc, i32* %num1, align 4, !dbg !5032
  %idxprom = zext i32 %6 to i64, !dbg !5032
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !5032
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !5032
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !5032
  %8 = load i32*, i32** %slot_, align 8, !dbg !5032
  store i32 %7, i32* %8, align 4, !dbg !5032
  %9 = load i32*, i32** %slot_, align 8, !dbg !5032
  ret i32* %9, !dbg !5032
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !5035 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5040, metadata !DIExpression()), !dbg !5041
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5042, metadata !DIExpression()), !dbg !5043
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5044
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !5044
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !5044
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !5044
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5044

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5044
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !5044
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !5044
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !5044
  br label %cond.end, !dbg !5044

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5044

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5044
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5044
  store i32 %call, i32* %n, align 4, !dbg !5043
  %4 = load i32, i32* %n, align 4, !dbg !5045
  %cmp = icmp eq i32 %4, 0, !dbg !5047
  br i1 %cmp, label %if.then, label %if.end, !dbg !5048

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !5049
  br label %return, !dbg !5049

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5050
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !5050
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !5050
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !5050
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !5050

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5050
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !5050
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !5050
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !5050
  br label %cond.end8, !dbg !5050

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !5050

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !5050
  %9 = load i32, i32* %n, align 4, !dbg !5050
  %sub = sub i32 %9, 1, !dbg !5050
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !5050
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !5051
  br label %return, !dbg !5051

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !5052
  ret %struct.loop* %10, !dbg !5052
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !5053 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5056, metadata !DIExpression()), !dbg !5057
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5058, metadata !DIExpression()), !dbg !5057
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5057
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5057
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5057

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5057
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5057
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !5057
  %3 = load i32, i32* %num, align 8, !dbg !5057
  %cmp = icmp ult i32 %1, %3, !dbg !5057
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5059
  %land.ext = zext i1 %4 to i32, !dbg !5057
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5057
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !5057
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5057
  %idxprom = zext i32 %6 to i64, !dbg !5057
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !5057
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !5057
  ret %struct.loop* %7, !dbg !5057
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5060 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5065, metadata !DIExpression()), !dbg !5066
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5066
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5066
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5066

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5066
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5066
  %2 = load i32, i32* %num, align 8, !dbg !5066
  br label %cond.end, !dbg !5066

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5066

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5066
  ret i32 %cond, !dbg !5066
}

declare dso_local %struct.basic_block_def** @get_loop_body(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !5067 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !5072, metadata !DIExpression()), !dbg !5073
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5074, metadata !DIExpression()), !dbg !5073
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !5075, metadata !DIExpression()), !dbg !5073
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5076
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !5076
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5076

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5076
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5076
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !5076
  %3 = load i32, i32* %num, align 4, !dbg !5076
  %cmp = icmp ult i32 %1, %3, !dbg !5076
  br i1 %cmp, label %if.then, label %if.else, !dbg !5073

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !5078
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !5078
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5078
  %idxprom = zext i32 %5 to i64, !dbg !5078
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !5078
  %6 = load i32, i32* %arrayidx, align 4, !dbg !5078
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !5078
  store i32 %6, i32* %7, align 4, !dbg !5078
  store i32 1, i32* %retval, align 4, !dbg !5078
  br label %return, !dbg !5078

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !5080
  store i32 0, i32* %8, align 4, !dbg !5080
  store i32 0, i32* %retval, align 4, !dbg !5080
  br label %return, !dbg !5080

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5073
  ret i32 %9, !dbg !5073
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !5082 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !5085, metadata !DIExpression()), !dbg !5086
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5087
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5087
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5087
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5087
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !5087
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5087
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !5087
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5087

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5087
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5087
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !5087
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !5087
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !5087
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !5087
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !5087
  br label %cond.end, !dbg !5087

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5087

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5087
  %6 = load i32, i32* %num.addr, align 4, !dbg !5087
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !5087
  ret %struct.loop* %call, !dbg !5088
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !5089 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !5093, metadata !DIExpression()), !dbg !5094
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5095
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !5095
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !5095
  br i1 %tobool, label %if.then, label %if.end, !dbg !5094

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5095
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !5095
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !5095
  call void @free(i8* %4), !dbg !5095
  br label %if.end, !dbg !5095

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !5094
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !5094
  ret void, !dbg !5094
}

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.ddg_all_sccs* @create_ddg_all_sccs(%struct.ddg*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.node_order_params* @calculate_order_params(%struct.ddg* %g, i32 %mii, i32* %pmax_asap) #0 !dbg !5097 {
entry:
  %g.addr = alloca %struct.ddg*, align 8
  %mii.addr = alloca i32, align 4
  %pmax_asap.addr = alloca i32*, align 8
  %u = alloca i32, align 4
  %max_asap = alloca i32, align 4
  %num_nodes = alloca i32, align 4
  %e = alloca %struct.ddg_edge*, align 8
  %node_order_params_arr = alloca %struct.node_order_params*, align 8
  %u_node = alloca %struct.ddg_node*, align 8
  %u_node59 = alloca %struct.ddg_node*, align 8
  %u_node139 = alloca %struct.ddg_node*, align 8
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !5100, metadata !DIExpression()), !dbg !5101
  store i32 %mii, i32* %mii.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mii.addr, metadata !5102, metadata !DIExpression()), !dbg !5103
  store i32* %pmax_asap, i32** %pmax_asap.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pmax_asap.addr, metadata !5104, metadata !DIExpression()), !dbg !5105
  call void @llvm.dbg.declare(metadata i32* %u, metadata !5106, metadata !DIExpression()), !dbg !5107
  call void @llvm.dbg.declare(metadata i32* %max_asap, metadata !5108, metadata !DIExpression()), !dbg !5109
  call void @llvm.dbg.declare(metadata i32* %num_nodes, metadata !5110, metadata !DIExpression()), !dbg !5111
  %0 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5112
  %num_nodes1 = getelementptr inbounds %struct.ddg, %struct.ddg* %0, i32 0, i32 1, !dbg !5113
  %1 = load i32, i32* %num_nodes1, align 8, !dbg !5113
  store i32 %1, i32* %num_nodes, align 4, !dbg !5111
  call void @llvm.dbg.declare(metadata %struct.ddg_edge** %e, metadata !5114, metadata !DIExpression()), !dbg !5115
  call void @llvm.dbg.declare(metadata %struct.node_order_params** %node_order_params_arr, metadata !5116, metadata !DIExpression()), !dbg !5117
  %2 = load i32, i32* %num_nodes, align 4, !dbg !5118
  %conv = sext i32 %2 to i64, !dbg !5118
  %call = call i8* @xcalloc(i64 %conv, i64 12), !dbg !5119
  %3 = bitcast i8* %call to %struct.node_order_params*, !dbg !5120
  store %struct.node_order_params* %3, %struct.node_order_params** %node_order_params_arr, align 8, !dbg !5121
  store i32 0, i32* %u, align 4, !dbg !5122
  br label %for.cond, !dbg !5124

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %u, align 4, !dbg !5125
  %5 = load i32, i32* %num_nodes, align 4, !dbg !5127
  %cmp = icmp slt i32 %4, %5, !dbg !5128
  br i1 %cmp, label %for.body, label %for.end, !dbg !5129

for.body:                                         ; preds = %for.cond
  %6 = load %struct.node_order_params*, %struct.node_order_params** %node_order_params_arr, align 8, !dbg !5130
  %7 = load i32, i32* %u, align 4, !dbg !5131
  %idxprom = sext i32 %7 to i64, !dbg !5130
  %arrayidx = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %6, i64 %idxprom, !dbg !5130
  %8 = bitcast %struct.node_order_params* %arrayidx to i8*, !dbg !5132
  %9 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5133
  %nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %9, i32 0, i32 5, !dbg !5134
  %10 = load %struct.ddg_node*, %struct.ddg_node** %nodes, align 8, !dbg !5134
  %11 = load i32, i32* %u, align 4, !dbg !5135
  %idxprom3 = sext i32 %11 to i64, !dbg !5133
  %arrayidx4 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %10, i64 %idxprom3, !dbg !5133
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %arrayidx4, i32 0, i32 7, !dbg !5136
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !5137
  store i8* %8, i8** %info, align 8, !dbg !5138
  br label %for.inc, !dbg !5133

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %u, align 4, !dbg !5139
  %inc = add nsw i32 %12, 1, !dbg !5139
  store i32 %inc, i32* %u, align 4, !dbg !5139
  br label %for.cond, !dbg !5140, !llvm.loop !5141

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %max_asap, align 4, !dbg !5143
  store i32 0, i32* %u, align 4, !dbg !5144
  br label %for.cond5, !dbg !5146

for.cond5:                                        ; preds = %for.inc52, %for.end
  %13 = load i32, i32* %u, align 4, !dbg !5147
  %14 = load i32, i32* %num_nodes, align 4, !dbg !5149
  %cmp6 = icmp slt i32 %13, %14, !dbg !5150
  br i1 %cmp6, label %for.body8, label %for.end54, !dbg !5151

for.body8:                                        ; preds = %for.cond5
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node, metadata !5152, metadata !DIExpression()), !dbg !5154
  %15 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5155
  %nodes9 = getelementptr inbounds %struct.ddg, %struct.ddg* %15, i32 0, i32 5, !dbg !5156
  %16 = load %struct.ddg_node*, %struct.ddg_node** %nodes9, align 8, !dbg !5156
  %17 = load i32, i32* %u, align 4, !dbg !5157
  %idxprom10 = sext i32 %17 to i64, !dbg !5155
  %arrayidx11 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %16, i64 %idxprom10, !dbg !5155
  store %struct.ddg_node* %arrayidx11, %struct.ddg_node** %u_node, align 8, !dbg !5154
  %18 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5158
  %aux12 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %18, i32 0, i32 7, !dbg !5158
  %info13 = bitcast %union.anon.1* %aux12 to i8**, !dbg !5158
  %19 = load i8*, i8** %info13, align 8, !dbg !5158
  %20 = bitcast i8* %19 to %struct.node_order_params*, !dbg !5158
  %asap = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %20, i32 0, i32 0, !dbg !5158
  store i32 0, i32* %asap, align 4, !dbg !5159
  %21 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5160
  %in = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %21, i32 0, i32 3, !dbg !5162
  %22 = load %struct.ddg_edge*, %struct.ddg_edge** %in, align 8, !dbg !5162
  store %struct.ddg_edge* %22, %struct.ddg_edge** %e, align 8, !dbg !5163
  br label %for.cond14, !dbg !5164

for.cond14:                                       ; preds = %for.inc38, %for.body8
  %23 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5165
  %tobool = icmp ne %struct.ddg_edge* %23, null, !dbg !5167
  br i1 %tobool, label %for.body15, label %for.end39, !dbg !5167

for.body15:                                       ; preds = %for.cond14
  %24 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5168
  %distance = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %24, i32 0, i32 5, !dbg !5170
  %25 = load i32, i32* %distance, align 4, !dbg !5170
  %cmp16 = icmp eq i32 %25, 0, !dbg !5171
  br i1 %cmp16, label %if.then, label %if.end, !dbg !5172

if.then:                                          ; preds = %for.body15
  %26 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5173
  %aux18 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %26, i32 0, i32 7, !dbg !5173
  %info19 = bitcast %union.anon.1* %aux18 to i8**, !dbg !5173
  %27 = load i8*, i8** %info19, align 8, !dbg !5173
  %28 = bitcast i8* %27 to %struct.node_order_params*, !dbg !5173
  %asap20 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %28, i32 0, i32 0, !dbg !5173
  %29 = load i32, i32* %asap20, align 4, !dbg !5173
  %30 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5173
  %src = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %30, i32 0, i32 0, !dbg !5173
  %31 = load %struct.ddg_node*, %struct.ddg_node** %src, align 8, !dbg !5173
  %aux21 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %31, i32 0, i32 7, !dbg !5173
  %info22 = bitcast %union.anon.1* %aux21 to i8**, !dbg !5173
  %32 = load i8*, i8** %info22, align 8, !dbg !5173
  %33 = bitcast i8* %32 to %struct.node_order_params*, !dbg !5173
  %asap23 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %33, i32 0, i32 0, !dbg !5173
  %34 = load i32, i32* %asap23, align 4, !dbg !5173
  %35 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5173
  %latency = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %35, i32 0, i32 4, !dbg !5173
  %36 = load i32, i32* %latency, align 8, !dbg !5173
  %add = add nsw i32 %34, %36, !dbg !5173
  %cmp24 = icmp sgt i32 %29, %add, !dbg !5173
  br i1 %cmp24, label %cond.true, label %cond.false, !dbg !5173

cond.true:                                        ; preds = %if.then
  %37 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5173
  %aux26 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %37, i32 0, i32 7, !dbg !5173
  %info27 = bitcast %union.anon.1* %aux26 to i8**, !dbg !5173
  %38 = load i8*, i8** %info27, align 8, !dbg !5173
  %39 = bitcast i8* %38 to %struct.node_order_params*, !dbg !5173
  %asap28 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %39, i32 0, i32 0, !dbg !5173
  %40 = load i32, i32* %asap28, align 4, !dbg !5173
  br label %cond.end, !dbg !5173

cond.false:                                       ; preds = %if.then
  %41 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5173
  %src29 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %41, i32 0, i32 0, !dbg !5173
  %42 = load %struct.ddg_node*, %struct.ddg_node** %src29, align 8, !dbg !5173
  %aux30 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %42, i32 0, i32 7, !dbg !5173
  %info31 = bitcast %union.anon.1* %aux30 to i8**, !dbg !5173
  %43 = load i8*, i8** %info31, align 8, !dbg !5173
  %44 = bitcast i8* %43 to %struct.node_order_params*, !dbg !5173
  %asap32 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %44, i32 0, i32 0, !dbg !5173
  %45 = load i32, i32* %asap32, align 4, !dbg !5173
  %46 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5173
  %latency33 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %46, i32 0, i32 4, !dbg !5173
  %47 = load i32, i32* %latency33, align 8, !dbg !5173
  %add34 = add nsw i32 %45, %47, !dbg !5173
  br label %cond.end, !dbg !5173

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %40, %cond.true ], [ %add34, %cond.false ], !dbg !5173
  %48 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5174
  %aux35 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %48, i32 0, i32 7, !dbg !5174
  %info36 = bitcast %union.anon.1* %aux35 to i8**, !dbg !5174
  %49 = load i8*, i8** %info36, align 8, !dbg !5174
  %50 = bitcast i8* %49 to %struct.node_order_params*, !dbg !5174
  %asap37 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %50, i32 0, i32 0, !dbg !5174
  store i32 %cond, i32* %asap37, align 4, !dbg !5175
  br label %if.end, !dbg !5174

if.end:                                           ; preds = %cond.end, %for.body15
  br label %for.inc38, !dbg !5176

for.inc38:                                        ; preds = %if.end
  %51 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5177
  %next_in = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %51, i32 0, i32 6, !dbg !5178
  %52 = load %struct.ddg_edge*, %struct.ddg_edge** %next_in, align 8, !dbg !5178
  store %struct.ddg_edge* %52, %struct.ddg_edge** %e, align 8, !dbg !5179
  br label %for.cond14, !dbg !5180, !llvm.loop !5181

for.end39:                                        ; preds = %for.cond14
  %53 = load i32, i32* %max_asap, align 4, !dbg !5183
  %54 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5183
  %aux40 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %54, i32 0, i32 7, !dbg !5183
  %info41 = bitcast %union.anon.1* %aux40 to i8**, !dbg !5183
  %55 = load i8*, i8** %info41, align 8, !dbg !5183
  %56 = bitcast i8* %55 to %struct.node_order_params*, !dbg !5183
  %asap42 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %56, i32 0, i32 0, !dbg !5183
  %57 = load i32, i32* %asap42, align 4, !dbg !5183
  %cmp43 = icmp sgt i32 %53, %57, !dbg !5183
  br i1 %cmp43, label %cond.true45, label %cond.false46, !dbg !5183

cond.true45:                                      ; preds = %for.end39
  %58 = load i32, i32* %max_asap, align 4, !dbg !5183
  br label %cond.end50, !dbg !5183

cond.false46:                                     ; preds = %for.end39
  %59 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5183
  %aux47 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %59, i32 0, i32 7, !dbg !5183
  %info48 = bitcast %union.anon.1* %aux47 to i8**, !dbg !5183
  %60 = load i8*, i8** %info48, align 8, !dbg !5183
  %61 = bitcast i8* %60 to %struct.node_order_params*, !dbg !5183
  %asap49 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %61, i32 0, i32 0, !dbg !5183
  %62 = load i32, i32* %asap49, align 4, !dbg !5183
  br label %cond.end50, !dbg !5183

cond.end50:                                       ; preds = %cond.false46, %cond.true45
  %cond51 = phi i32 [ %58, %cond.true45 ], [ %62, %cond.false46 ], !dbg !5183
  store i32 %cond51, i32* %max_asap, align 4, !dbg !5184
  br label %for.inc52, !dbg !5185

for.inc52:                                        ; preds = %cond.end50
  %63 = load i32, i32* %u, align 4, !dbg !5186
  %inc53 = add nsw i32 %63, 1, !dbg !5186
  store i32 %inc53, i32* %u, align 4, !dbg !5186
  br label %for.cond5, !dbg !5187, !llvm.loop !5188

for.end54:                                        ; preds = %for.cond5
  %64 = load i32, i32* %num_nodes, align 4, !dbg !5190
  %sub = sub nsw i32 %64, 1, !dbg !5192
  store i32 %sub, i32* %u, align 4, !dbg !5193
  br label %for.cond55, !dbg !5194

for.cond55:                                       ; preds = %for.inc130, %for.end54
  %65 = load i32, i32* %u, align 4, !dbg !5195
  %cmp56 = icmp sgt i32 %65, -1, !dbg !5197
  br i1 %cmp56, label %for.body58, label %for.end131, !dbg !5198

for.body58:                                       ; preds = %for.cond55
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node59, metadata !5199, metadata !DIExpression()), !dbg !5201
  %66 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5202
  %nodes60 = getelementptr inbounds %struct.ddg, %struct.ddg* %66, i32 0, i32 5, !dbg !5203
  %67 = load %struct.ddg_node*, %struct.ddg_node** %nodes60, align 8, !dbg !5203
  %68 = load i32, i32* %u, align 4, !dbg !5204
  %idxprom61 = sext i32 %68 to i64, !dbg !5202
  %arrayidx62 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %67, i64 %idxprom61, !dbg !5202
  store %struct.ddg_node* %arrayidx62, %struct.ddg_node** %u_node59, align 8, !dbg !5201
  %69 = load i32, i32* %max_asap, align 4, !dbg !5205
  %70 = load %struct.ddg_node*, %struct.ddg_node** %u_node59, align 8, !dbg !5206
  %aux63 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %70, i32 0, i32 7, !dbg !5206
  %info64 = bitcast %union.anon.1* %aux63 to i8**, !dbg !5206
  %71 = load i8*, i8** %info64, align 8, !dbg !5206
  %72 = bitcast i8* %71 to %struct.node_order_params*, !dbg !5206
  %alap = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %72, i32 0, i32 1, !dbg !5206
  store i32 %69, i32* %alap, align 4, !dbg !5207
  %73 = load %struct.ddg_node*, %struct.ddg_node** %u_node59, align 8, !dbg !5208
  %aux65 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %73, i32 0, i32 7, !dbg !5208
  %info66 = bitcast %union.anon.1* %aux65 to i8**, !dbg !5208
  %74 = load i8*, i8** %info66, align 8, !dbg !5208
  %75 = bitcast i8* %74 to %struct.node_order_params*, !dbg !5208
  %height = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %75, i32 0, i32 2, !dbg !5208
  store i32 0, i32* %height, align 4, !dbg !5209
  %76 = load %struct.ddg_node*, %struct.ddg_node** %u_node59, align 8, !dbg !5210
  %out = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %76, i32 0, i32 4, !dbg !5212
  %77 = load %struct.ddg_edge*, %struct.ddg_edge** %out, align 8, !dbg !5212
  store %struct.ddg_edge* %77, %struct.ddg_edge** %e, align 8, !dbg !5213
  br label %for.cond67, !dbg !5214

for.cond67:                                       ; preds = %for.inc128, %for.body58
  %78 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5215
  %tobool68 = icmp ne %struct.ddg_edge* %78, null, !dbg !5217
  br i1 %tobool68, label %for.body69, label %for.end129, !dbg !5217

for.body69:                                       ; preds = %for.cond67
  %79 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5218
  %distance70 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %79, i32 0, i32 5, !dbg !5220
  %80 = load i32, i32* %distance70, align 4, !dbg !5220
  %cmp71 = icmp eq i32 %80, 0, !dbg !5221
  br i1 %cmp71, label %if.then73, label %if.end127, !dbg !5222

if.then73:                                        ; preds = %for.body69
  %81 = load %struct.ddg_node*, %struct.ddg_node** %u_node59, align 8, !dbg !5223
  %aux74 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %81, i32 0, i32 7, !dbg !5223
  %info75 = bitcast %union.anon.1* %aux74 to i8**, !dbg !5223
  %82 = load i8*, i8** %info75, align 8, !dbg !5223
  %83 = bitcast i8* %82 to %struct.node_order_params*, !dbg !5223
  %alap76 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %83, i32 0, i32 1, !dbg !5223
  %84 = load i32, i32* %alap76, align 4, !dbg !5223
  %85 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5223
  %dest = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %85, i32 0, i32 1, !dbg !5223
  %86 = load %struct.ddg_node*, %struct.ddg_node** %dest, align 8, !dbg !5223
  %aux77 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %86, i32 0, i32 7, !dbg !5223
  %info78 = bitcast %union.anon.1* %aux77 to i8**, !dbg !5223
  %87 = load i8*, i8** %info78, align 8, !dbg !5223
  %88 = bitcast i8* %87 to %struct.node_order_params*, !dbg !5223
  %alap79 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %88, i32 0, i32 1, !dbg !5223
  %89 = load i32, i32* %alap79, align 4, !dbg !5223
  %90 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5223
  %latency80 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %90, i32 0, i32 4, !dbg !5223
  %91 = load i32, i32* %latency80, align 8, !dbg !5223
  %sub81 = sub nsw i32 %89, %91, !dbg !5223
  %cmp82 = icmp slt i32 %84, %sub81, !dbg !5223
  br i1 %cmp82, label %cond.true84, label %cond.false88, !dbg !5223

cond.true84:                                      ; preds = %if.then73
  %92 = load %struct.ddg_node*, %struct.ddg_node** %u_node59, align 8, !dbg !5223
  %aux85 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %92, i32 0, i32 7, !dbg !5223
  %info86 = bitcast %union.anon.1* %aux85 to i8**, !dbg !5223
  %93 = load i8*, i8** %info86, align 8, !dbg !5223
  %94 = bitcast i8* %93 to %struct.node_order_params*, !dbg !5223
  %alap87 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %94, i32 0, i32 1, !dbg !5223
  %95 = load i32, i32* %alap87, align 4, !dbg !5223
  br label %cond.end95, !dbg !5223

cond.false88:                                     ; preds = %if.then73
  %96 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5223
  %dest89 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %96, i32 0, i32 1, !dbg !5223
  %97 = load %struct.ddg_node*, %struct.ddg_node** %dest89, align 8, !dbg !5223
  %aux90 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %97, i32 0, i32 7, !dbg !5223
  %info91 = bitcast %union.anon.1* %aux90 to i8**, !dbg !5223
  %98 = load i8*, i8** %info91, align 8, !dbg !5223
  %99 = bitcast i8* %98 to %struct.node_order_params*, !dbg !5223
  %alap92 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %99, i32 0, i32 1, !dbg !5223
  %100 = load i32, i32* %alap92, align 4, !dbg !5223
  %101 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5223
  %latency93 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %101, i32 0, i32 4, !dbg !5223
  %102 = load i32, i32* %latency93, align 8, !dbg !5223
  %sub94 = sub nsw i32 %100, %102, !dbg !5223
  br label %cond.end95, !dbg !5223

cond.end95:                                       ; preds = %cond.false88, %cond.true84
  %cond96 = phi i32 [ %95, %cond.true84 ], [ %sub94, %cond.false88 ], !dbg !5223
  %103 = load %struct.ddg_node*, %struct.ddg_node** %u_node59, align 8, !dbg !5225
  %aux97 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %103, i32 0, i32 7, !dbg !5225
  %info98 = bitcast %union.anon.1* %aux97 to i8**, !dbg !5225
  %104 = load i8*, i8** %info98, align 8, !dbg !5225
  %105 = bitcast i8* %104 to %struct.node_order_params*, !dbg !5225
  %alap99 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %105, i32 0, i32 1, !dbg !5225
  store i32 %cond96, i32* %alap99, align 4, !dbg !5226
  %106 = load %struct.ddg_node*, %struct.ddg_node** %u_node59, align 8, !dbg !5227
  %aux100 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %106, i32 0, i32 7, !dbg !5227
  %info101 = bitcast %union.anon.1* %aux100 to i8**, !dbg !5227
  %107 = load i8*, i8** %info101, align 8, !dbg !5227
  %108 = bitcast i8* %107 to %struct.node_order_params*, !dbg !5227
  %height102 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %108, i32 0, i32 2, !dbg !5227
  %109 = load i32, i32* %height102, align 4, !dbg !5227
  %110 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5227
  %dest103 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %110, i32 0, i32 1, !dbg !5227
  %111 = load %struct.ddg_node*, %struct.ddg_node** %dest103, align 8, !dbg !5227
  %aux104 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %111, i32 0, i32 7, !dbg !5227
  %info105 = bitcast %union.anon.1* %aux104 to i8**, !dbg !5227
  %112 = load i8*, i8** %info105, align 8, !dbg !5227
  %113 = bitcast i8* %112 to %struct.node_order_params*, !dbg !5227
  %height106 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %113, i32 0, i32 2, !dbg !5227
  %114 = load i32, i32* %height106, align 4, !dbg !5227
  %115 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5227
  %latency107 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %115, i32 0, i32 4, !dbg !5227
  %116 = load i32, i32* %latency107, align 8, !dbg !5227
  %add108 = add nsw i32 %114, %116, !dbg !5227
  %cmp109 = icmp sgt i32 %109, %add108, !dbg !5227
  br i1 %cmp109, label %cond.true111, label %cond.false115, !dbg !5227

cond.true111:                                     ; preds = %cond.end95
  %117 = load %struct.ddg_node*, %struct.ddg_node** %u_node59, align 8, !dbg !5227
  %aux112 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %117, i32 0, i32 7, !dbg !5227
  %info113 = bitcast %union.anon.1* %aux112 to i8**, !dbg !5227
  %118 = load i8*, i8** %info113, align 8, !dbg !5227
  %119 = bitcast i8* %118 to %struct.node_order_params*, !dbg !5227
  %height114 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %119, i32 0, i32 2, !dbg !5227
  %120 = load i32, i32* %height114, align 4, !dbg !5227
  br label %cond.end122, !dbg !5227

cond.false115:                                    ; preds = %cond.end95
  %121 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5227
  %dest116 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %121, i32 0, i32 1, !dbg !5227
  %122 = load %struct.ddg_node*, %struct.ddg_node** %dest116, align 8, !dbg !5227
  %aux117 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %122, i32 0, i32 7, !dbg !5227
  %info118 = bitcast %union.anon.1* %aux117 to i8**, !dbg !5227
  %123 = load i8*, i8** %info118, align 8, !dbg !5227
  %124 = bitcast i8* %123 to %struct.node_order_params*, !dbg !5227
  %height119 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %124, i32 0, i32 2, !dbg !5227
  %125 = load i32, i32* %height119, align 4, !dbg !5227
  %126 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5227
  %latency120 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %126, i32 0, i32 4, !dbg !5227
  %127 = load i32, i32* %latency120, align 8, !dbg !5227
  %add121 = add nsw i32 %125, %127, !dbg !5227
  br label %cond.end122, !dbg !5227

cond.end122:                                      ; preds = %cond.false115, %cond.true111
  %cond123 = phi i32 [ %120, %cond.true111 ], [ %add121, %cond.false115 ], !dbg !5227
  %128 = load %struct.ddg_node*, %struct.ddg_node** %u_node59, align 8, !dbg !5228
  %aux124 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %128, i32 0, i32 7, !dbg !5228
  %info125 = bitcast %union.anon.1* %aux124 to i8**, !dbg !5228
  %129 = load i8*, i8** %info125, align 8, !dbg !5228
  %130 = bitcast i8* %129 to %struct.node_order_params*, !dbg !5228
  %height126 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %130, i32 0, i32 2, !dbg !5228
  store i32 %cond123, i32* %height126, align 4, !dbg !5229
  br label %if.end127, !dbg !5230

if.end127:                                        ; preds = %cond.end122, %for.body69
  br label %for.inc128, !dbg !5231

for.inc128:                                       ; preds = %if.end127
  %131 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !5232
  %next_out = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %131, i32 0, i32 7, !dbg !5233
  %132 = load %struct.ddg_edge*, %struct.ddg_edge** %next_out, align 8, !dbg !5233
  store %struct.ddg_edge* %132, %struct.ddg_edge** %e, align 8, !dbg !5234
  br label %for.cond67, !dbg !5235, !llvm.loop !5236

for.end129:                                       ; preds = %for.cond67
  br label %for.inc130, !dbg !5238

for.inc130:                                       ; preds = %for.end129
  %133 = load i32, i32* %u, align 4, !dbg !5239
  %dec = add nsw i32 %133, -1, !dbg !5239
  store i32 %dec, i32* %u, align 4, !dbg !5239
  br label %for.cond55, !dbg !5240, !llvm.loop !5241

for.end131:                                       ; preds = %for.cond55
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5243
  %tobool132 = icmp ne %struct._IO_FILE* %134, null, !dbg !5243
  br i1 %tobool132, label %if.then133, label %if.end156, !dbg !5245

if.then133:                                       ; preds = %for.end131
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5246
  %call134 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %135, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.42, i64 0, i64 0)), !dbg !5248
  store i32 0, i32* %u, align 4, !dbg !5249
  br label %for.cond135, !dbg !5251

for.cond135:                                      ; preds = %for.inc153, %if.then133
  %136 = load i32, i32* %u, align 4, !dbg !5252
  %137 = load i32, i32* %num_nodes, align 4, !dbg !5254
  %cmp136 = icmp slt i32 %136, %137, !dbg !5255
  br i1 %cmp136, label %for.body138, label %for.end155, !dbg !5256

for.body138:                                      ; preds = %for.cond135
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node139, metadata !5257, metadata !DIExpression()), !dbg !5259
  %138 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5260
  %nodes140 = getelementptr inbounds %struct.ddg, %struct.ddg* %138, i32 0, i32 5, !dbg !5261
  %139 = load %struct.ddg_node*, %struct.ddg_node** %nodes140, align 8, !dbg !5261
  %140 = load i32, i32* %u, align 4, !dbg !5262
  %idxprom141 = sext i32 %140 to i64, !dbg !5260
  %arrayidx142 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %139, i64 %idxprom141, !dbg !5260
  store %struct.ddg_node* %arrayidx142, %struct.ddg_node** %u_node139, align 8, !dbg !5259
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5263
  %142 = load i32, i32* %u, align 4, !dbg !5264
  %143 = load %struct.ddg_node*, %struct.ddg_node** %u_node139, align 8, !dbg !5265
  %aux143 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %143, i32 0, i32 7, !dbg !5265
  %info144 = bitcast %union.anon.1* %aux143 to i8**, !dbg !5265
  %144 = load i8*, i8** %info144, align 8, !dbg !5265
  %145 = bitcast i8* %144 to %struct.node_order_params*, !dbg !5265
  %asap145 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %145, i32 0, i32 0, !dbg !5265
  %146 = load i32, i32* %asap145, align 4, !dbg !5265
  %147 = load %struct.ddg_node*, %struct.ddg_node** %u_node139, align 8, !dbg !5266
  %aux146 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %147, i32 0, i32 7, !dbg !5266
  %info147 = bitcast %union.anon.1* %aux146 to i8**, !dbg !5266
  %148 = load i8*, i8** %info147, align 8, !dbg !5266
  %149 = bitcast i8* %148 to %struct.node_order_params*, !dbg !5266
  %alap148 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %149, i32 0, i32 1, !dbg !5266
  %150 = load i32, i32* %alap148, align 4, !dbg !5266
  %151 = load %struct.ddg_node*, %struct.ddg_node** %u_node139, align 8, !dbg !5267
  %aux149 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %151, i32 0, i32 7, !dbg !5267
  %info150 = bitcast %union.anon.1* %aux149 to i8**, !dbg !5267
  %152 = load i8*, i8** %info150, align 8, !dbg !5267
  %153 = bitcast i8* %152 to %struct.node_order_params*, !dbg !5267
  %height151 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %153, i32 0, i32 2, !dbg !5267
  %154 = load i32, i32* %height151, align 4, !dbg !5267
  %call152 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %141, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.43, i64 0, i64 0), i32 %142, i32 %146, i32 %150, i32 %154), !dbg !5268
  br label %for.inc153, !dbg !5269

for.inc153:                                       ; preds = %for.body138
  %155 = load i32, i32* %u, align 4, !dbg !5270
  %inc154 = add nsw i32 %155, 1, !dbg !5270
  store i32 %inc154, i32* %u, align 4, !dbg !5270
  br label %for.cond135, !dbg !5271, !llvm.loop !5272

for.end155:                                       ; preds = %for.cond135
  br label %if.end156, !dbg !5274

if.end156:                                        ; preds = %for.end155, %for.end131
  %156 = load i32, i32* %max_asap, align 4, !dbg !5275
  %157 = load i32*, i32** %pmax_asap.addr, align 8, !dbg !5276
  store i32 %156, i32* %157, align 4, !dbg !5277
  %158 = load %struct.node_order_params*, %struct.node_order_params** %node_order_params_arr, align 8, !dbg !5278
  ret %struct.node_order_params* %158, !dbg !5279
}

declare dso_local void @print_sccs(%struct._IO_FILE*, %struct.ddg_all_sccs*, %struct.ddg*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @order_nodes_of_sccs(%struct.ddg_all_sccs* %all_sccs, i32* %node_order) #0 !dbg !5280 {
entry:
  %all_sccs.addr = alloca %struct.ddg_all_sccs*, align 8
  %node_order.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %pos = alloca i32, align 4
  %g = alloca %struct.ddg*, align 8
  %num_nodes = alloca i32, align 4
  %prev_sccs = alloca %struct.simple_bitmap_def*, align 8
  %on_path = alloca %struct.simple_bitmap_def*, align 8
  %tmp = alloca %struct.simple_bitmap_def*, align 8
  %ones = alloca %struct.simple_bitmap_def*, align 8
  %scc = alloca %struct.ddg_scc*, align 8
  store %struct.ddg_all_sccs* %all_sccs, %struct.ddg_all_sccs** %all_sccs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg_all_sccs** %all_sccs.addr, metadata !5283, metadata !DIExpression()), !dbg !5284
  store i32* %node_order, i32** %node_order.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %node_order.addr, metadata !5285, metadata !DIExpression()), !dbg !5286
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5287, metadata !DIExpression()), !dbg !5288
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !5289, metadata !DIExpression()), !dbg !5290
  store i32 0, i32* %pos, align 4, !dbg !5290
  call void @llvm.dbg.declare(metadata %struct.ddg** %g, metadata !5291, metadata !DIExpression()), !dbg !5292
  %0 = load %struct.ddg_all_sccs*, %struct.ddg_all_sccs** %all_sccs.addr, align 8, !dbg !5293
  %ddg = getelementptr inbounds %struct.ddg_all_sccs, %struct.ddg_all_sccs* %0, i32 0, i32 2, !dbg !5294
  %1 = load %struct.ddg*, %struct.ddg** %ddg, align 8, !dbg !5294
  store %struct.ddg* %1, %struct.ddg** %g, align 8, !dbg !5292
  call void @llvm.dbg.declare(metadata i32* %num_nodes, metadata !5295, metadata !DIExpression()), !dbg !5296
  %2 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !5297
  %num_nodes1 = getelementptr inbounds %struct.ddg, %struct.ddg* %2, i32 0, i32 1, !dbg !5298
  %3 = load i32, i32* %num_nodes1, align 8, !dbg !5298
  store i32 %3, i32* %num_nodes, align 4, !dbg !5296
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %prev_sccs, metadata !5299, metadata !DIExpression()), !dbg !5300
  %4 = load i32, i32* %num_nodes, align 4, !dbg !5301
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %4), !dbg !5302
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5300
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %on_path, metadata !5303, metadata !DIExpression()), !dbg !5304
  %5 = load i32, i32* %num_nodes, align 4, !dbg !5305
  %call2 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %5), !dbg !5306
  store %struct.simple_bitmap_def* %call2, %struct.simple_bitmap_def** %on_path, align 8, !dbg !5304
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %tmp, metadata !5307, metadata !DIExpression()), !dbg !5308
  %6 = load i32, i32* %num_nodes, align 4, !dbg !5309
  %call3 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %6), !dbg !5310
  store %struct.simple_bitmap_def* %call3, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5308
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %ones, metadata !5311, metadata !DIExpression()), !dbg !5312
  %7 = load i32, i32* %num_nodes, align 4, !dbg !5313
  %call4 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %7), !dbg !5314
  store %struct.simple_bitmap_def* %call4, %struct.simple_bitmap_def** %ones, align 8, !dbg !5312
  %8 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5315
  call void @sbitmap_zero(%struct.simple_bitmap_def* %8), !dbg !5316
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %ones, align 8, !dbg !5317
  call void @sbitmap_ones(%struct.simple_bitmap_def* %9), !dbg !5318
  store i32 0, i32* %i, align 4, !dbg !5319
  br label %for.cond, !dbg !5321

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4, !dbg !5322
  %11 = load %struct.ddg_all_sccs*, %struct.ddg_all_sccs** %all_sccs.addr, align 8, !dbg !5324
  %num_sccs = getelementptr inbounds %struct.ddg_all_sccs, %struct.ddg_all_sccs* %11, i32 0, i32 1, !dbg !5325
  %12 = load i32, i32* %num_sccs, align 8, !dbg !5325
  %cmp = icmp slt i32 %10, %12, !dbg !5326
  br i1 %cmp, label %for.body, label %for.end, !dbg !5327

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ddg_scc** %scc, metadata !5328, metadata !DIExpression()), !dbg !5330
  %13 = load %struct.ddg_all_sccs*, %struct.ddg_all_sccs** %all_sccs.addr, align 8, !dbg !5331
  %sccs = getelementptr inbounds %struct.ddg_all_sccs, %struct.ddg_all_sccs* %13, i32 0, i32 0, !dbg !5332
  %14 = load %struct.ddg_scc**, %struct.ddg_scc*** %sccs, align 8, !dbg !5332
  %15 = load i32, i32* %i, align 4, !dbg !5333
  %idxprom = sext i32 %15 to i64, !dbg !5331
  %arrayidx = getelementptr inbounds %struct.ddg_scc*, %struct.ddg_scc** %14, i64 %idxprom, !dbg !5331
  %16 = load %struct.ddg_scc*, %struct.ddg_scc** %arrayidx, align 8, !dbg !5331
  store %struct.ddg_scc* %16, %struct.ddg_scc** %scc, align 8, !dbg !5330
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %on_path, align 8, !dbg !5334
  %18 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !5335
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5336
  %20 = load %struct.ddg_scc*, %struct.ddg_scc** %scc, align 8, !dbg !5337
  %nodes = getelementptr inbounds %struct.ddg_scc, %struct.ddg_scc* %20, i32 0, i32 0, !dbg !5338
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes, align 8, !dbg !5338
  %call5 = call i32 @find_nodes_on_paths(%struct.simple_bitmap_def* %17, %struct.ddg* %18, %struct.simple_bitmap_def* %19, %struct.simple_bitmap_def* %21), !dbg !5339
  %22 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5340
  %23 = load %struct.ddg_scc*, %struct.ddg_scc** %scc, align 8, !dbg !5341
  %nodes6 = getelementptr inbounds %struct.ddg_scc, %struct.ddg_scc* %23, i32 0, i32 0, !dbg !5342
  %24 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes6, align 8, !dbg !5342
  %25 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %on_path, align 8, !dbg !5343
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %22, %struct.simple_bitmap_def* %24, %struct.simple_bitmap_def* %25), !dbg !5344
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %on_path, align 8, !dbg !5345
  %27 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !5346
  %28 = load %struct.ddg_scc*, %struct.ddg_scc** %scc, align 8, !dbg !5347
  %nodes7 = getelementptr inbounds %struct.ddg_scc, %struct.ddg_scc* %28, i32 0, i32 0, !dbg !5348
  %29 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes7, align 8, !dbg !5348
  %30 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5349
  %call8 = call i32 @find_nodes_on_paths(%struct.simple_bitmap_def* %26, %struct.ddg* %27, %struct.simple_bitmap_def* %29, %struct.simple_bitmap_def* %30), !dbg !5350
  %31 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5351
  %32 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5352
  %33 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %on_path, align 8, !dbg !5353
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %31, %struct.simple_bitmap_def* %32, %struct.simple_bitmap_def* %33), !dbg !5354
  %34 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5355
  %35 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5356
  %36 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5357
  call void @sbitmap_difference(%struct.simple_bitmap_def* %34, %struct.simple_bitmap_def* %35, %struct.simple_bitmap_def* %36), !dbg !5358
  %37 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !5359
  %38 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5360
  %39 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5361
  %40 = load i32*, i32** %node_order.addr, align 8, !dbg !5362
  %41 = load i32, i32* %pos, align 4, !dbg !5363
  %call9 = call i32 @order_nodes_in_scc(%struct.ddg* %37, %struct.simple_bitmap_def* %38, %struct.simple_bitmap_def* %39, i32* %40, i32 %41), !dbg !5364
  store i32 %call9, i32* %pos, align 4, !dbg !5365
  br label %for.inc, !dbg !5366

for.inc:                                          ; preds = %for.body
  %42 = load i32, i32* %i, align 4, !dbg !5367
  %inc = add nsw i32 %42, 1, !dbg !5367
  store i32 %inc, i32* %i, align 4, !dbg !5367
  br label %for.cond, !dbg !5368, !llvm.loop !5369

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !5371

while.cond:                                       ; preds = %while.body, %for.end
  %43 = load i32, i32* %pos, align 4, !dbg !5372
  %44 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !5373
  %num_nodes10 = getelementptr inbounds %struct.ddg, %struct.ddg* %44, i32 0, i32 1, !dbg !5374
  %45 = load i32, i32* %num_nodes10, align 8, !dbg !5374
  %cmp11 = icmp slt i32 %43, %45, !dbg !5375
  br i1 %cmp11, label %while.body, label %while.end, !dbg !5371

while.body:                                       ; preds = %while.cond
  %46 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5376
  %47 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %ones, align 8, !dbg !5378
  %48 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5379
  call void @sbitmap_difference(%struct.simple_bitmap_def* %46, %struct.simple_bitmap_def* %47, %struct.simple_bitmap_def* %48), !dbg !5380
  %49 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !5381
  %50 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5382
  %51 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5383
  %52 = load i32*, i32** %node_order.addr, align 8, !dbg !5384
  %53 = load i32, i32* %pos, align 4, !dbg !5385
  %call12 = call i32 @order_nodes_in_scc(%struct.ddg* %49, %struct.simple_bitmap_def* %50, %struct.simple_bitmap_def* %51, i32* %52, i32 %53), !dbg !5386
  store i32 %call12, i32* %pos, align 4, !dbg !5387
  br label %while.cond, !dbg !5371, !llvm.loop !5388

while.end:                                        ; preds = %while.cond
  %54 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5390
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %54, i32 0, i32 0, !dbg !5390
  %55 = load i8*, i8** %popcount, align 8, !dbg !5390
  call void @free(i8* %55), !dbg !5390
  %56 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %prev_sccs, align 8, !dbg !5390
  %57 = bitcast %struct.simple_bitmap_def* %56 to i8*, !dbg !5390
  call void @free(i8* %57), !dbg !5390
  %58 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %on_path, align 8, !dbg !5391
  %popcount13 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %58, i32 0, i32 0, !dbg !5391
  %59 = load i8*, i8** %popcount13, align 8, !dbg !5391
  call void @free(i8* %59), !dbg !5391
  %60 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %on_path, align 8, !dbg !5391
  %61 = bitcast %struct.simple_bitmap_def* %60 to i8*, !dbg !5391
  call void @free(i8* %61), !dbg !5391
  %62 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5392
  %popcount14 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %62, i32 0, i32 0, !dbg !5392
  %63 = load i8*, i8** %popcount14, align 8, !dbg !5392
  call void @free(i8* %63), !dbg !5392
  %64 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5392
  %65 = bitcast %struct.simple_bitmap_def* %64 to i8*, !dbg !5392
  call void @free(i8* %65), !dbg !5392
  %66 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %ones, align 8, !dbg !5393
  %popcount15 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %66, i32 0, i32 0, !dbg !5393
  %67 = load i8*, i8** %popcount15, align 8, !dbg !5393
  call void @free(i8* %67), !dbg !5393
  %68 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %ones, align 8, !dbg !5393
  %69 = bitcast %struct.simple_bitmap_def* %68 to i8*, !dbg !5393
  call void @free(i8* %69), !dbg !5393
  ret void, !dbg !5394
}

declare dso_local void @free_ddg_all_sccs(%struct.ddg_all_sccs*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @check_nodes_order(i32* %node_order, i32 %num_nodes) #0 !dbg !5395 {
entry:
  %node_order.addr = alloca i32*, align 8
  %num_nodes.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca %struct.simple_bitmap_def*, align 8
  %u = alloca i32, align 4
  store i32* %node_order, i32** %node_order.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %node_order.addr, metadata !5398, metadata !DIExpression()), !dbg !5399
  store i32 %num_nodes, i32* %num_nodes.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_nodes.addr, metadata !5400, metadata !DIExpression()), !dbg !5401
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5402, metadata !DIExpression()), !dbg !5403
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %tmp, metadata !5404, metadata !DIExpression()), !dbg !5405
  %0 = load i32, i32* %num_nodes.addr, align 4, !dbg !5406
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %0), !dbg !5407
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5405
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5408
  call void @sbitmap_zero(%struct.simple_bitmap_def* %1), !dbg !5409
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5410
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !5410
  br i1 %tobool, label %if.then, label %if.end, !dbg !5412

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5413
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.44, i64 0, i64 0)), !dbg !5414
  br label %if.end, !dbg !5414

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !5415
  br label %for.cond, !dbg !5417

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !5418
  %5 = load i32, i32* %num_nodes.addr, align 4, !dbg !5420
  %cmp = icmp slt i32 %4, %5, !dbg !5421
  br i1 %cmp, label %for.body, label %for.end, !dbg !5422

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %u, metadata !5423, metadata !DIExpression()), !dbg !5425
  %6 = load i32*, i32** %node_order.addr, align 8, !dbg !5426
  %7 = load i32, i32* %i, align 4, !dbg !5427
  %idxprom = sext i32 %7 to i64, !dbg !5426
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !5426
  %8 = load i32, i32* %arrayidx, align 4, !dbg !5426
  store i32 %8, i32* %u, align 4, !dbg !5425
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5428
  %tobool2 = icmp ne %struct._IO_FILE* %9, null, !dbg !5428
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !5430

if.then3:                                         ; preds = %for.body
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5431
  %11 = load i32, i32* %u, align 4, !dbg !5432
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.45, i64 0, i64 0), i32 %11), !dbg !5433
  br label %if.end5, !dbg !5433

if.end5:                                          ; preds = %if.then3, %for.body
  %12 = load i32, i32* %u, align 4, !dbg !5434
  %13 = load i32, i32* %num_nodes.addr, align 4, !dbg !5434
  %cmp6 = icmp slt i32 %12, %13, !dbg !5434
  br i1 %cmp6, label %land.lhs.true, label %cond.true, !dbg !5434

land.lhs.true:                                    ; preds = %if.end5
  %14 = load i32, i32* %u, align 4, !dbg !5434
  %cmp7 = icmp sge i32 %14, 0, !dbg !5434
  br i1 %cmp7, label %land.lhs.true8, label %cond.true, !dbg !5434

land.lhs.true8:                                   ; preds = %land.lhs.true
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5434
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %15, i32 0, i32 3, !dbg !5434
  %16 = load i32, i32* %u, align 4, !dbg !5434
  %div = udiv i32 %16, 64, !dbg !5434
  %idxprom9 = zext i32 %div to i64, !dbg !5434
  %arrayidx10 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom9, !dbg !5434
  %17 = load i64, i64* %arrayidx10, align 8, !dbg !5434
  %18 = load i32, i32* %u, align 4, !dbg !5434
  %rem = urem i32 %18, 64, !dbg !5434
  %sh_prom = zext i32 %rem to i64, !dbg !5434
  %shr = lshr i64 %17, %sh_prom, !dbg !5434
  %and = and i64 %shr, 1, !dbg !5434
  %tobool11 = icmp ne i64 %and, 0, !dbg !5434
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !5434

cond.true:                                        ; preds = %land.lhs.true8, %land.lhs.true, %if.end5
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 2079, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !5434
  br label %cond.end, !dbg !5434

cond.false:                                       ; preds = %land.lhs.true8
  br label %cond.end, !dbg !5434

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5434
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5435
  %20 = load i32, i32* %u, align 4, !dbg !5436
  call void @SET_BIT(%struct.simple_bitmap_def* %19, i32 %20), !dbg !5437
  br label %for.inc, !dbg !5438

for.inc:                                          ; preds = %cond.end
  %21 = load i32, i32* %i, align 4, !dbg !5439
  %inc = add nsw i32 %21, 1, !dbg !5439
  store i32 %inc, i32* %i, align 4, !dbg !5439
  br label %for.cond, !dbg !5440, !llvm.loop !5441

for.end:                                          ; preds = %for.cond
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5443
  %tobool12 = icmp ne %struct._IO_FILE* %22, null, !dbg !5443
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !5445

if.then13:                                        ; preds = %for.end
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5446
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !5447
  br label %if.end15, !dbg !5447

if.end15:                                         ; preds = %if.then13, %for.end
  %24 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5448
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %24, i32 0, i32 0, !dbg !5448
  %25 = load i8*, i8** %popcount, align 8, !dbg !5448
  call void @free(i8* %25), !dbg !5448
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5448
  %27 = bitcast %struct.simple_bitmap_def* %26 to i8*, !dbg !5448
  call void @free(i8* %27), !dbg !5448
  ret void, !dbg !5449
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

declare dso_local void @sbitmap_ones(%struct.simple_bitmap_def*) #2

declare dso_local i32 @find_nodes_on_paths(%struct.simple_bitmap_def*, %struct.ddg*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare dso_local void @sbitmap_a_or_b(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare dso_local void @sbitmap_difference(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @order_nodes_in_scc(%struct.ddg* %g, %struct.simple_bitmap_def* %nodes_ordered, %struct.simple_bitmap_def* %scc, i32* %node_order, i32 %pos) #0 !dbg !5450 {
entry:
  %g.addr = alloca %struct.ddg*, align 8
  %nodes_ordered.addr = alloca %struct.simple_bitmap_def*, align 8
  %scc.addr = alloca %struct.simple_bitmap_def*, align 8
  %node_order.addr = alloca i32*, align 8
  %pos.addr = alloca i32, align 4
  %dir = alloca i32, align 4
  %num_nodes = alloca i32, align 4
  %workset = alloca %struct.simple_bitmap_def*, align 8
  %tmp = alloca %struct.simple_bitmap_def*, align 8
  %zero_bitmap = alloca %struct.simple_bitmap_def*, align 8
  %predecessors = alloca %struct.simple_bitmap_def*, align 8
  %successors = alloca %struct.simple_bitmap_def*, align 8
  %u = alloca i32, align 4
  %v = alloca i32, align 4
  %v_node = alloca %struct.ddg_node*, align 8
  %v_node_preds = alloca %struct.simple_bitmap_def*, align 8
  %v_node_succs = alloca %struct.simple_bitmap_def*, align 8
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !5453, metadata !DIExpression()), !dbg !5454
  store %struct.simple_bitmap_def* %nodes_ordered, %struct.simple_bitmap_def** %nodes_ordered.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %nodes_ordered.addr, metadata !5455, metadata !DIExpression()), !dbg !5456
  store %struct.simple_bitmap_def* %scc, %struct.simple_bitmap_def** %scc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %scc.addr, metadata !5457, metadata !DIExpression()), !dbg !5458
  store i32* %node_order, i32** %node_order.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %node_order.addr, metadata !5459, metadata !DIExpression()), !dbg !5460
  store i32 %pos, i32* %pos.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pos.addr, metadata !5461, metadata !DIExpression()), !dbg !5462
  call void @llvm.dbg.declare(metadata i32* %dir, metadata !5463, metadata !DIExpression()), !dbg !5464
  call void @llvm.dbg.declare(metadata i32* %num_nodes, metadata !5465, metadata !DIExpression()), !dbg !5466
  %0 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5467
  %num_nodes1 = getelementptr inbounds %struct.ddg, %struct.ddg* %0, i32 0, i32 1, !dbg !5468
  %1 = load i32, i32* %num_nodes1, align 8, !dbg !5468
  store i32 %1, i32* %num_nodes, align 4, !dbg !5466
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %workset, metadata !5469, metadata !DIExpression()), !dbg !5470
  %2 = load i32, i32* %num_nodes, align 4, !dbg !5471
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %2), !dbg !5472
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %workset, align 8, !dbg !5470
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %tmp, metadata !5473, metadata !DIExpression()), !dbg !5474
  %3 = load i32, i32* %num_nodes, align 4, !dbg !5475
  %call2 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %3), !dbg !5476
  store %struct.simple_bitmap_def* %call2, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5474
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %zero_bitmap, metadata !5477, metadata !DIExpression()), !dbg !5478
  %4 = load i32, i32* %num_nodes, align 4, !dbg !5479
  %call3 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %4), !dbg !5480
  store %struct.simple_bitmap_def* %call3, %struct.simple_bitmap_def** %zero_bitmap, align 8, !dbg !5478
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %predecessors, metadata !5481, metadata !DIExpression()), !dbg !5482
  %5 = load i32, i32* %num_nodes, align 4, !dbg !5483
  %call4 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %5), !dbg !5484
  store %struct.simple_bitmap_def* %call4, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !5482
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %successors, metadata !5485, metadata !DIExpression()), !dbg !5486
  %6 = load i32, i32* %num_nodes, align 4, !dbg !5487
  %call5 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %6), !dbg !5488
  store %struct.simple_bitmap_def* %call5, %struct.simple_bitmap_def** %successors, align 8, !dbg !5486
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !5489
  call void @sbitmap_zero(%struct.simple_bitmap_def* %7), !dbg !5490
  %8 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !5491
  %9 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5492
  %10 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes_ordered.addr, align 8, !dbg !5493
  call void @find_predecessors(%struct.simple_bitmap_def* %8, %struct.ddg* %9, %struct.simple_bitmap_def* %10), !dbg !5494
  %11 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors, align 8, !dbg !5495
  call void @sbitmap_zero(%struct.simple_bitmap_def* %11), !dbg !5496
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors, align 8, !dbg !5497
  %13 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5498
  %14 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes_ordered.addr, align 8, !dbg !5499
  call void @find_successors(%struct.simple_bitmap_def* %12, %struct.ddg* %13, %struct.simple_bitmap_def* %14), !dbg !5500
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5501
  call void @sbitmap_zero(%struct.simple_bitmap_def* %15), !dbg !5502
  %16 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5503
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !5505
  %18 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %scc.addr, align 8, !dbg !5506
  %call6 = call zeroext i8 @sbitmap_a_and_b_cg(%struct.simple_bitmap_def* %16, %struct.simple_bitmap_def* %17, %struct.simple_bitmap_def* %18), !dbg !5507
  %tobool = icmp ne i8 %call6, 0, !dbg !5507
  br i1 %tobool, label %if.then, label %if.else, !dbg !5508

if.then:                                          ; preds = %entry
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5509
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5511
  call void @sbitmap_copy(%struct.simple_bitmap_def* %19, %struct.simple_bitmap_def* %20), !dbg !5512
  store i32 0, i32* %dir, align 4, !dbg !5513
  br label %if.end14, !dbg !5514

if.else:                                          ; preds = %entry
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5515
  %22 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors, align 8, !dbg !5517
  %23 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %scc.addr, align 8, !dbg !5518
  %call7 = call zeroext i8 @sbitmap_a_and_b_cg(%struct.simple_bitmap_def* %21, %struct.simple_bitmap_def* %22, %struct.simple_bitmap_def* %23), !dbg !5519
  %tobool8 = icmp ne i8 %call7, 0, !dbg !5519
  br i1 %tobool8, label %if.then9, label %if.else10, !dbg !5520

if.then9:                                         ; preds = %if.else
  %24 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5521
  %25 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5523
  call void @sbitmap_copy(%struct.simple_bitmap_def* %24, %struct.simple_bitmap_def* %25), !dbg !5524
  store i32 1, i32* %dir, align 4, !dbg !5525
  br label %if.end13, !dbg !5526

if.else10:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %u, metadata !5527, metadata !DIExpression()), !dbg !5529
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5530
  call void @sbitmap_zero(%struct.simple_bitmap_def* %26), !dbg !5531
  %27 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5532
  %28 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %scc.addr, align 8, !dbg !5534
  %call11 = call i32 @find_max_asap(%struct.ddg* %27, %struct.simple_bitmap_def* %28), !dbg !5535
  store i32 %call11, i32* %u, align 4, !dbg !5536
  %cmp = icmp sge i32 %call11, 0, !dbg !5537
  br i1 %cmp, label %if.then12, label %if.end, !dbg !5538

if.then12:                                        ; preds = %if.else10
  %29 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5539
  %30 = load i32, i32* %u, align 4, !dbg !5540
  call void @SET_BIT(%struct.simple_bitmap_def* %29, i32 %30), !dbg !5541
  br label %if.end, !dbg !5541

if.end:                                           ; preds = %if.then12, %if.else10
  store i32 0, i32* %dir, align 4, !dbg !5542
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then
  %31 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %zero_bitmap, align 8, !dbg !5543
  call void @sbitmap_zero(%struct.simple_bitmap_def* %31), !dbg !5544
  br label %while.cond, !dbg !5545

while.cond:                                       ; preds = %if.end43, %if.end14
  %32 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5546
  %33 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %zero_bitmap, align 8, !dbg !5547
  %call15 = call i32 @sbitmap_equal(%struct.simple_bitmap_def* %32, %struct.simple_bitmap_def* %33), !dbg !5548
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5549
  %lnot = xor i1 %tobool16, true, !dbg !5549
  br i1 %lnot, label %while.body, label %while.end44, !dbg !5545

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %v, metadata !5550, metadata !DIExpression()), !dbg !5552
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %v_node, metadata !5553, metadata !DIExpression()), !dbg !5554
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %v_node_preds, metadata !5555, metadata !DIExpression()), !dbg !5556
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %v_node_succs, metadata !5557, metadata !DIExpression()), !dbg !5558
  %34 = load i32, i32* %dir, align 4, !dbg !5559
  %cmp17 = icmp eq i32 %34, 1, !dbg !5561
  br i1 %cmp17, label %if.then18, label %if.else28, !dbg !5562

if.then18:                                        ; preds = %while.body
  br label %while.cond19, !dbg !5563

while.cond19:                                     ; preds = %while.body23, %if.then18
  %35 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5565
  %36 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %zero_bitmap, align 8, !dbg !5566
  %call20 = call i32 @sbitmap_equal(%struct.simple_bitmap_def* %35, %struct.simple_bitmap_def* %36), !dbg !5567
  %tobool21 = icmp ne i32 %call20, 0, !dbg !5568
  %lnot22 = xor i1 %tobool21, true, !dbg !5568
  br i1 %lnot22, label %while.body23, label %while.end, !dbg !5563

while.body23:                                     ; preds = %while.cond19
  %37 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5569
  %38 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5571
  %call24 = call i32 @find_max_hv_min_mob(%struct.ddg* %37, %struct.simple_bitmap_def* %38), !dbg !5572
  store i32 %call24, i32* %v, align 4, !dbg !5573
  %39 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5574
  %nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %39, i32 0, i32 5, !dbg !5575
  %40 = load %struct.ddg_node*, %struct.ddg_node** %nodes, align 8, !dbg !5575
  %41 = load i32, i32* %v, align 4, !dbg !5576
  %idxprom = sext i32 %41 to i64, !dbg !5574
  %arrayidx = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %40, i64 %idxprom, !dbg !5574
  store %struct.ddg_node* %arrayidx, %struct.ddg_node** %v_node, align 8, !dbg !5577
  %42 = load i32, i32* %v, align 4, !dbg !5578
  %43 = load i32*, i32** %node_order.addr, align 8, !dbg !5579
  %44 = load i32, i32* %pos.addr, align 4, !dbg !5580
  %inc = add nsw i32 %44, 1, !dbg !5580
  store i32 %inc, i32* %pos.addr, align 4, !dbg !5580
  %idxprom25 = sext i32 %44 to i64, !dbg !5579
  %arrayidx26 = getelementptr inbounds i32, i32* %43, i64 %idxprom25, !dbg !5579
  store i32 %42, i32* %arrayidx26, align 4, !dbg !5581
  %45 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !5582
  %successors27 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %45, i32 0, i32 5, !dbg !5582
  %46 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors27, align 8, !dbg !5582
  store %struct.simple_bitmap_def* %46, %struct.simple_bitmap_def** %v_node_succs, align 8, !dbg !5583
  %47 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5584
  %48 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %v_node_succs, align 8, !dbg !5585
  %49 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %scc.addr, align 8, !dbg !5586
  call void @sbitmap_a_and_b(%struct.simple_bitmap_def* %47, %struct.simple_bitmap_def* %48, %struct.simple_bitmap_def* %49), !dbg !5587
  %50 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5588
  %51 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5589
  %52 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes_ordered.addr, align 8, !dbg !5590
  call void @sbitmap_difference(%struct.simple_bitmap_def* %50, %struct.simple_bitmap_def* %51, %struct.simple_bitmap_def* %52), !dbg !5591
  %53 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5592
  %54 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5593
  %55 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5594
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %53, %struct.simple_bitmap_def* %54, %struct.simple_bitmap_def* %55), !dbg !5595
  %56 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5596
  %57 = load i32, i32* %v, align 4, !dbg !5597
  call void @RESET_BIT(%struct.simple_bitmap_def* %56, i32 %57), !dbg !5598
  %58 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes_ordered.addr, align 8, !dbg !5599
  %59 = load i32, i32* %v, align 4, !dbg !5600
  call void @SET_BIT(%struct.simple_bitmap_def* %58, i32 %59), !dbg !5601
  br label %while.cond19, !dbg !5563, !llvm.loop !5602

while.end:                                        ; preds = %while.cond19
  store i32 0, i32* %dir, align 4, !dbg !5604
  %60 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !5605
  call void @sbitmap_zero(%struct.simple_bitmap_def* %60), !dbg !5606
  %61 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !5607
  %62 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5608
  %63 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes_ordered.addr, align 8, !dbg !5609
  call void @find_predecessors(%struct.simple_bitmap_def* %61, %struct.ddg* %62, %struct.simple_bitmap_def* %63), !dbg !5610
  %64 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5611
  %65 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !5612
  %66 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %scc.addr, align 8, !dbg !5613
  call void @sbitmap_a_and_b(%struct.simple_bitmap_def* %64, %struct.simple_bitmap_def* %65, %struct.simple_bitmap_def* %66), !dbg !5614
  br label %if.end43, !dbg !5615

if.else28:                                        ; preds = %while.body
  br label %while.cond29, !dbg !5616

while.cond29:                                     ; preds = %while.body33, %if.else28
  %67 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5618
  %68 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %zero_bitmap, align 8, !dbg !5619
  %call30 = call i32 @sbitmap_equal(%struct.simple_bitmap_def* %67, %struct.simple_bitmap_def* %68), !dbg !5620
  %tobool31 = icmp ne i32 %call30, 0, !dbg !5621
  %lnot32 = xor i1 %tobool31, true, !dbg !5621
  br i1 %lnot32, label %while.body33, label %while.end42, !dbg !5616

while.body33:                                     ; preds = %while.cond29
  %69 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5622
  %70 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5624
  %call34 = call i32 @find_max_dv_min_mob(%struct.ddg* %69, %struct.simple_bitmap_def* %70), !dbg !5625
  store i32 %call34, i32* %v, align 4, !dbg !5626
  %71 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5627
  %nodes35 = getelementptr inbounds %struct.ddg, %struct.ddg* %71, i32 0, i32 5, !dbg !5628
  %72 = load %struct.ddg_node*, %struct.ddg_node** %nodes35, align 8, !dbg !5628
  %73 = load i32, i32* %v, align 4, !dbg !5629
  %idxprom36 = sext i32 %73 to i64, !dbg !5627
  %arrayidx37 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %72, i64 %idxprom36, !dbg !5627
  store %struct.ddg_node* %arrayidx37, %struct.ddg_node** %v_node, align 8, !dbg !5630
  %74 = load i32, i32* %v, align 4, !dbg !5631
  %75 = load i32*, i32** %node_order.addr, align 8, !dbg !5632
  %76 = load i32, i32* %pos.addr, align 4, !dbg !5633
  %inc38 = add nsw i32 %76, 1, !dbg !5633
  store i32 %inc38, i32* %pos.addr, align 4, !dbg !5633
  %idxprom39 = sext i32 %76 to i64, !dbg !5632
  %arrayidx40 = getelementptr inbounds i32, i32* %75, i64 %idxprom39, !dbg !5632
  store i32 %74, i32* %arrayidx40, align 4, !dbg !5634
  %77 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !5635
  %predecessors41 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %77, i32 0, i32 6, !dbg !5635
  %78 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors41, align 8, !dbg !5635
  store %struct.simple_bitmap_def* %78, %struct.simple_bitmap_def** %v_node_preds, align 8, !dbg !5636
  %79 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5637
  %80 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %v_node_preds, align 8, !dbg !5638
  %81 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %scc.addr, align 8, !dbg !5639
  call void @sbitmap_a_and_b(%struct.simple_bitmap_def* %79, %struct.simple_bitmap_def* %80, %struct.simple_bitmap_def* %81), !dbg !5640
  %82 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5641
  %83 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5642
  %84 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes_ordered.addr, align 8, !dbg !5643
  call void @sbitmap_difference(%struct.simple_bitmap_def* %82, %struct.simple_bitmap_def* %83, %struct.simple_bitmap_def* %84), !dbg !5644
  %85 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5645
  %86 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5646
  %87 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5647
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %85, %struct.simple_bitmap_def* %86, %struct.simple_bitmap_def* %87), !dbg !5648
  %88 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5649
  %89 = load i32, i32* %v, align 4, !dbg !5650
  call void @RESET_BIT(%struct.simple_bitmap_def* %88, i32 %89), !dbg !5651
  %90 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes_ordered.addr, align 8, !dbg !5652
  %91 = load i32, i32* %v, align 4, !dbg !5653
  call void @SET_BIT(%struct.simple_bitmap_def* %90, i32 %91), !dbg !5654
  br label %while.cond29, !dbg !5616, !llvm.loop !5655

while.end42:                                      ; preds = %while.cond29
  store i32 1, i32* %dir, align 4, !dbg !5657
  %92 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors, align 8, !dbg !5658
  call void @sbitmap_zero(%struct.simple_bitmap_def* %92), !dbg !5659
  %93 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors, align 8, !dbg !5660
  %94 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5661
  %95 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes_ordered.addr, align 8, !dbg !5662
  call void @find_successors(%struct.simple_bitmap_def* %93, %struct.ddg* %94, %struct.simple_bitmap_def* %95), !dbg !5663
  %96 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5664
  %97 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors, align 8, !dbg !5665
  %98 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %scc.addr, align 8, !dbg !5666
  call void @sbitmap_a_and_b(%struct.simple_bitmap_def* %96, %struct.simple_bitmap_def* %97, %struct.simple_bitmap_def* %98), !dbg !5667
  br label %if.end43

if.end43:                                         ; preds = %while.end42, %while.end
  br label %while.cond, !dbg !5545, !llvm.loop !5668

while.end44:                                      ; preds = %while.cond
  %99 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5670
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %99, i32 0, i32 0, !dbg !5670
  %100 = load i8*, i8** %popcount, align 8, !dbg !5670
  call void @free(i8* %100), !dbg !5670
  %101 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !5670
  %102 = bitcast %struct.simple_bitmap_def* %101 to i8*, !dbg !5670
  call void @free(i8* %102), !dbg !5670
  %103 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5671
  %popcount45 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %103, i32 0, i32 0, !dbg !5671
  %104 = load i8*, i8** %popcount45, align 8, !dbg !5671
  call void @free(i8* %104), !dbg !5671
  %105 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %workset, align 8, !dbg !5671
  %106 = bitcast %struct.simple_bitmap_def* %105 to i8*, !dbg !5671
  call void @free(i8* %106), !dbg !5671
  %107 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %zero_bitmap, align 8, !dbg !5672
  %popcount46 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %107, i32 0, i32 0, !dbg !5672
  %108 = load i8*, i8** %popcount46, align 8, !dbg !5672
  call void @free(i8* %108), !dbg !5672
  %109 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %zero_bitmap, align 8, !dbg !5672
  %110 = bitcast %struct.simple_bitmap_def* %109 to i8*, !dbg !5672
  call void @free(i8* %110), !dbg !5672
  %111 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !5673
  %popcount47 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %111, i32 0, i32 0, !dbg !5673
  %112 = load i8*, i8** %popcount47, align 8, !dbg !5673
  call void @free(i8* %112), !dbg !5673
  %113 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !5673
  %114 = bitcast %struct.simple_bitmap_def* %113 to i8*, !dbg !5673
  call void @free(i8* %114), !dbg !5673
  %115 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors, align 8, !dbg !5674
  %popcount48 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %115, i32 0, i32 0, !dbg !5674
  %116 = load i8*, i8** %popcount48, align 8, !dbg !5674
  call void @free(i8* %116), !dbg !5674
  %117 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors, align 8, !dbg !5674
  %118 = bitcast %struct.simple_bitmap_def* %117 to i8*, !dbg !5674
  call void @free(i8* %118), !dbg !5674
  %119 = load i32, i32* %pos.addr, align 4, !dbg !5675
  ret i32 %119, !dbg !5676
}

declare dso_local void @find_predecessors(%struct.simple_bitmap_def*, %struct.ddg*, %struct.simple_bitmap_def*) #2

declare dso_local void @find_successors(%struct.simple_bitmap_def*, %struct.ddg*, %struct.simple_bitmap_def*) #2

declare dso_local zeroext i8 @sbitmap_a_and_b_cg(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

declare dso_local void @sbitmap_copy(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_max_asap(%struct.ddg* %g, %struct.simple_bitmap_def* %nodes) #0 !dbg !5677 {
entry:
  %g.addr = alloca %struct.ddg*, align 8
  %nodes.addr = alloca %struct.simple_bitmap_def*, align 8
  %u = alloca i32, align 4
  %max_asap = alloca i32, align 4
  %result = alloca i32, align 4
  %sbi = alloca %struct.sbitmap_iterator, align 8
  %u_node = alloca %struct.ddg_node*, align 8
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !5680, metadata !DIExpression()), !dbg !5681
  store %struct.simple_bitmap_def* %nodes, %struct.simple_bitmap_def** %nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %nodes.addr, metadata !5682, metadata !DIExpression()), !dbg !5683
  call void @llvm.dbg.declare(metadata i32* %u, metadata !5684, metadata !DIExpression()), !dbg !5685
  store i32 0, i32* %u, align 4, !dbg !5685
  call void @llvm.dbg.declare(metadata i32* %max_asap, metadata !5686, metadata !DIExpression()), !dbg !5687
  store i32 -1, i32* %max_asap, align 4, !dbg !5687
  call void @llvm.dbg.declare(metadata i32* %result, metadata !5688, metadata !DIExpression()), !dbg !5689
  store i32 -1, i32* %result, align 4, !dbg !5689
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !5690, metadata !DIExpression()), !dbg !5691
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes.addr, align 8, !dbg !5692
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %0, i32 0), !dbg !5692
  br label %for.cond, !dbg !5692

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %u), !dbg !5694
  %tobool = icmp ne i8 %call, 0, !dbg !5692
  br i1 %tobool, label %for.body, label %for.end, !dbg !5692

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node, metadata !5696, metadata !DIExpression()), !dbg !5698
  %1 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5699
  %nodes1 = getelementptr inbounds %struct.ddg, %struct.ddg* %1, i32 0, i32 5, !dbg !5700
  %2 = load %struct.ddg_node*, %struct.ddg_node** %nodes1, align 8, !dbg !5700
  %3 = load i32, i32* %u, align 4, !dbg !5701
  %idxprom = zext i32 %3 to i64, !dbg !5699
  %arrayidx = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %2, i64 %idxprom, !dbg !5699
  store %struct.ddg_node* %arrayidx, %struct.ddg_node** %u_node, align 8, !dbg !5698
  %4 = load i32, i32* %max_asap, align 4, !dbg !5702
  %5 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5704
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %5, i32 0, i32 7, !dbg !5704
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !5704
  %6 = load i8*, i8** %info, align 8, !dbg !5704
  %7 = bitcast i8* %6 to %struct.node_order_params*, !dbg !5704
  %asap = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %7, i32 0, i32 0, !dbg !5704
  %8 = load i32, i32* %asap, align 4, !dbg !5704
  %cmp = icmp slt i32 %4, %8, !dbg !5705
  br i1 %cmp, label %if.then, label %if.end, !dbg !5706

if.then:                                          ; preds = %for.body
  %9 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5707
  %aux2 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %9, i32 0, i32 7, !dbg !5707
  %info3 = bitcast %union.anon.1* %aux2 to i8**, !dbg !5707
  %10 = load i8*, i8** %info3, align 8, !dbg !5707
  %11 = bitcast i8* %10 to %struct.node_order_params*, !dbg !5707
  %asap4 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %11, i32 0, i32 0, !dbg !5707
  %12 = load i32, i32* %asap4, align 4, !dbg !5707
  store i32 %12, i32* %max_asap, align 4, !dbg !5709
  %13 = load i32, i32* %u, align 4, !dbg !5710
  store i32 %13, i32* %result, align 4, !dbg !5711
  br label %if.end, !dbg !5712

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5713

for.inc:                                          ; preds = %if.end
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !5694
  br label %for.cond, !dbg !5694, !llvm.loop !5714

for.end:                                          ; preds = %for.cond
  %14 = load i32, i32* %result, align 4, !dbg !5716
  ret i32 %14, !dbg !5717
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !5718 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !5721, metadata !DIExpression()), !dbg !5722
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !5723, metadata !DIExpression()), !dbg !5724
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5725
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !5727
  %1 = load i8*, i8** %popcount, align 8, !dbg !5727
  %tobool = icmp ne i8* %1, null, !dbg !5725
  br i1 %tobool, label %if.then, label %if.end7, !dbg !5728

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !5729, metadata !DIExpression()), !dbg !5731
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5732
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !5732
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !5732
  %div = udiv i32 %3, 64, !dbg !5732
  %idxprom = zext i32 %div to i64, !dbg !5732
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !5732
  %4 = load i64, i64* %arrayidx, align 8, !dbg !5732
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !5732
  %rem = urem i32 %5, 64, !dbg !5732
  %sh_prom = zext i32 %rem to i64, !dbg !5732
  %shr = lshr i64 %4, %sh_prom, !dbg !5732
  %and = and i64 %shr, 1, !dbg !5732
  %conv = trunc i64 %and to i8, !dbg !5732
  store i8 %conv, i8* %oldbit, align 1, !dbg !5733
  %6 = load i8, i8* %oldbit, align 1, !dbg !5734
  %tobool1 = icmp ne i8 %6, 0, !dbg !5734
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !5736

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5737
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !5738
  %8 = load i8*, i8** %popcount3, align 8, !dbg !5738
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !5739
  %div4 = udiv i32 %9, 64, !dbg !5740
  %idxprom5 = zext i32 %div4 to i64, !dbg !5737
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !5737
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !5741
  %inc = add i8 %10, 1, !dbg !5741
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !5741
  br label %if.end, !dbg !5737

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !5742

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !5743
  %rem8 = urem i32 %11, 64, !dbg !5744
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !5745
  %shl = shl i64 1, %sh_prom9, !dbg !5745
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5746
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !5747
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !5748
  %div11 = udiv i32 %13, 64, !dbg !5749
  %idxprom12 = zext i32 %div11 to i64, !dbg !5746
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !5746
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !5750
  %or = or i64 %14, %shl, !dbg !5750
  store i64 %or, i64* %arrayidx13, align 8, !dbg !5750
  ret void, !dbg !5751
}

declare dso_local i32 @sbitmap_equal(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_max_hv_min_mob(%struct.ddg* %g, %struct.simple_bitmap_def* %nodes) #0 !dbg !5752 {
entry:
  %g.addr = alloca %struct.ddg*, align 8
  %nodes.addr = alloca %struct.simple_bitmap_def*, align 8
  %u = alloca i32, align 4
  %max_hv = alloca i32, align 4
  %min_mob = alloca i32, align 4
  %result = alloca i32, align 4
  %sbi = alloca %struct.sbitmap_iterator, align 8
  %u_node = alloca %struct.ddg_node*, align 8
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !5753, metadata !DIExpression()), !dbg !5754
  store %struct.simple_bitmap_def* %nodes, %struct.simple_bitmap_def** %nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %nodes.addr, metadata !5755, metadata !DIExpression()), !dbg !5756
  call void @llvm.dbg.declare(metadata i32* %u, metadata !5757, metadata !DIExpression()), !dbg !5758
  store i32 0, i32* %u, align 4, !dbg !5758
  call void @llvm.dbg.declare(metadata i32* %max_hv, metadata !5759, metadata !DIExpression()), !dbg !5760
  store i32 -1, i32* %max_hv, align 4, !dbg !5760
  call void @llvm.dbg.declare(metadata i32* %min_mob, metadata !5761, metadata !DIExpression()), !dbg !5762
  store i32 2147483647, i32* %min_mob, align 4, !dbg !5762
  call void @llvm.dbg.declare(metadata i32* %result, metadata !5763, metadata !DIExpression()), !dbg !5764
  store i32 -1, i32* %result, align 4, !dbg !5764
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !5765, metadata !DIExpression()), !dbg !5766
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes.addr, align 8, !dbg !5767
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %0, i32 0), !dbg !5767
  br label %for.cond, !dbg !5767

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %u), !dbg !5769
  %tobool = icmp ne i8 %call, 0, !dbg !5767
  br i1 %tobool, label %for.body, label %for.end, !dbg !5767

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node, metadata !5771, metadata !DIExpression()), !dbg !5773
  %1 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5774
  %nodes1 = getelementptr inbounds %struct.ddg, %struct.ddg* %1, i32 0, i32 5, !dbg !5775
  %2 = load %struct.ddg_node*, %struct.ddg_node** %nodes1, align 8, !dbg !5775
  %3 = load i32, i32* %u, align 4, !dbg !5776
  %idxprom = zext i32 %3 to i64, !dbg !5774
  %arrayidx = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %2, i64 %idxprom, !dbg !5774
  store %struct.ddg_node* %arrayidx, %struct.ddg_node** %u_node, align 8, !dbg !5773
  %4 = load i32, i32* %max_hv, align 4, !dbg !5777
  %5 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5779
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %5, i32 0, i32 7, !dbg !5779
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !5779
  %6 = load i8*, i8** %info, align 8, !dbg !5779
  %7 = bitcast i8* %6 to %struct.node_order_params*, !dbg !5779
  %height = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %7, i32 0, i32 2, !dbg !5779
  %8 = load i32, i32* %height, align 4, !dbg !5779
  %cmp = icmp slt i32 %4, %8, !dbg !5780
  br i1 %cmp, label %if.then, label %if.else, !dbg !5781

if.then:                                          ; preds = %for.body
  %9 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5782
  %aux2 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %9, i32 0, i32 7, !dbg !5782
  %info3 = bitcast %union.anon.1* %aux2 to i8**, !dbg !5782
  %10 = load i8*, i8** %info3, align 8, !dbg !5782
  %11 = bitcast i8* %10 to %struct.node_order_params*, !dbg !5782
  %height4 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %11, i32 0, i32 2, !dbg !5782
  %12 = load i32, i32* %height4, align 4, !dbg !5782
  store i32 %12, i32* %max_hv, align 4, !dbg !5784
  %13 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5785
  %aux5 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %13, i32 0, i32 7, !dbg !5785
  %info6 = bitcast %union.anon.1* %aux5 to i8**, !dbg !5785
  %14 = load i8*, i8** %info6, align 8, !dbg !5785
  %15 = bitcast i8* %14 to %struct.node_order_params*, !dbg !5785
  %alap = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %15, i32 0, i32 1, !dbg !5785
  %16 = load i32, i32* %alap, align 4, !dbg !5785
  %17 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5785
  %aux7 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %17, i32 0, i32 7, !dbg !5785
  %info8 = bitcast %union.anon.1* %aux7 to i8**, !dbg !5785
  %18 = load i8*, i8** %info8, align 8, !dbg !5785
  %19 = bitcast i8* %18 to %struct.node_order_params*, !dbg !5785
  %asap = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %19, i32 0, i32 0, !dbg !5785
  %20 = load i32, i32* %asap, align 4, !dbg !5785
  %sub = sub nsw i32 %16, %20, !dbg !5785
  store i32 %sub, i32* %min_mob, align 4, !dbg !5786
  %21 = load i32, i32* %u, align 4, !dbg !5787
  store i32 %21, i32* %result, align 4, !dbg !5788
  br label %if.end29, !dbg !5789

if.else:                                          ; preds = %for.body
  %22 = load i32, i32* %max_hv, align 4, !dbg !5790
  %23 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5792
  %aux9 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %23, i32 0, i32 7, !dbg !5792
  %info10 = bitcast %union.anon.1* %aux9 to i8**, !dbg !5792
  %24 = load i8*, i8** %info10, align 8, !dbg !5792
  %25 = bitcast i8* %24 to %struct.node_order_params*, !dbg !5792
  %height11 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %25, i32 0, i32 2, !dbg !5792
  %26 = load i32, i32* %height11, align 4, !dbg !5792
  %cmp12 = icmp eq i32 %22, %26, !dbg !5793
  br i1 %cmp12, label %land.lhs.true, label %if.end, !dbg !5794

land.lhs.true:                                    ; preds = %if.else
  %27 = load i32, i32* %min_mob, align 4, !dbg !5795
  %28 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5796
  %aux13 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %28, i32 0, i32 7, !dbg !5796
  %info14 = bitcast %union.anon.1* %aux13 to i8**, !dbg !5796
  %29 = load i8*, i8** %info14, align 8, !dbg !5796
  %30 = bitcast i8* %29 to %struct.node_order_params*, !dbg !5796
  %alap15 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %30, i32 0, i32 1, !dbg !5796
  %31 = load i32, i32* %alap15, align 4, !dbg !5796
  %32 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5796
  %aux16 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %32, i32 0, i32 7, !dbg !5796
  %info17 = bitcast %union.anon.1* %aux16 to i8**, !dbg !5796
  %33 = load i8*, i8** %info17, align 8, !dbg !5796
  %34 = bitcast i8* %33 to %struct.node_order_params*, !dbg !5796
  %asap18 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %34, i32 0, i32 0, !dbg !5796
  %35 = load i32, i32* %asap18, align 4, !dbg !5796
  %sub19 = sub nsw i32 %31, %35, !dbg !5796
  %cmp20 = icmp sgt i32 %27, %sub19, !dbg !5797
  br i1 %cmp20, label %if.then21, label %if.end, !dbg !5798

if.then21:                                        ; preds = %land.lhs.true
  %36 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5799
  %aux22 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %36, i32 0, i32 7, !dbg !5799
  %info23 = bitcast %union.anon.1* %aux22 to i8**, !dbg !5799
  %37 = load i8*, i8** %info23, align 8, !dbg !5799
  %38 = bitcast i8* %37 to %struct.node_order_params*, !dbg !5799
  %alap24 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %38, i32 0, i32 1, !dbg !5799
  %39 = load i32, i32* %alap24, align 4, !dbg !5799
  %40 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5799
  %aux25 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %40, i32 0, i32 7, !dbg !5799
  %info26 = bitcast %union.anon.1* %aux25 to i8**, !dbg !5799
  %41 = load i8*, i8** %info26, align 8, !dbg !5799
  %42 = bitcast i8* %41 to %struct.node_order_params*, !dbg !5799
  %asap27 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %42, i32 0, i32 0, !dbg !5799
  %43 = load i32, i32* %asap27, align 4, !dbg !5799
  %sub28 = sub nsw i32 %39, %43, !dbg !5799
  store i32 %sub28, i32* %min_mob, align 4, !dbg !5801
  %44 = load i32, i32* %u, align 4, !dbg !5802
  store i32 %44, i32* %result, align 4, !dbg !5803
  br label %if.end, !dbg !5804

if.end:                                           ; preds = %if.then21, %land.lhs.true, %if.else
  br label %if.end29

if.end29:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !5805

for.inc:                                          ; preds = %if.end29
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !5769
  br label %for.cond, !dbg !5769, !llvm.loop !5806

for.end:                                          ; preds = %for.cond
  %45 = load i32, i32* %result, align 4, !dbg !5808
  ret i32 %45, !dbg !5809
}

declare dso_local void @sbitmap_a_and_b(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !5810 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !5811, metadata !DIExpression()), !dbg !5812
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !5813, metadata !DIExpression()), !dbg !5814
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5815
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !5817
  %1 = load i8*, i8** %popcount, align 8, !dbg !5817
  %tobool = icmp ne i8* %1, null, !dbg !5815
  br i1 %tobool, label %if.then, label %if.end7, !dbg !5818

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !5819, metadata !DIExpression()), !dbg !5821
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5822
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !5822
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !5822
  %div = udiv i32 %3, 64, !dbg !5822
  %idxprom = zext i32 %div to i64, !dbg !5822
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !5822
  %4 = load i64, i64* %arrayidx, align 8, !dbg !5822
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !5822
  %rem = urem i32 %5, 64, !dbg !5822
  %sh_prom = zext i32 %rem to i64, !dbg !5822
  %shr = lshr i64 %4, %sh_prom, !dbg !5822
  %and = and i64 %shr, 1, !dbg !5822
  %conv = trunc i64 %and to i8, !dbg !5822
  store i8 %conv, i8* %oldbit, align 1, !dbg !5823
  %6 = load i8, i8* %oldbit, align 1, !dbg !5824
  %tobool1 = icmp ne i8 %6, 0, !dbg !5824
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !5826

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5827
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !5828
  %8 = load i8*, i8** %popcount3, align 8, !dbg !5828
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !5829
  %div4 = udiv i32 %9, 64, !dbg !5830
  %idxprom5 = zext i32 %div4 to i64, !dbg !5827
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !5827
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !5831
  %dec = add i8 %10, -1, !dbg !5831
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !5831
  br label %if.end, !dbg !5827

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !5832

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !5833
  %rem8 = urem i32 %11, 64, !dbg !5834
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !5835
  %shl = shl i64 1, %sh_prom9, !dbg !5835
  %neg = xor i64 %shl, -1, !dbg !5836
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5837
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !5838
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !5839
  %div11 = udiv i32 %13, 64, !dbg !5840
  %idxprom12 = zext i32 %div11 to i64, !dbg !5837
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !5837
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !5841
  %and14 = and i64 %14, %neg, !dbg !5841
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !5841
  ret void, !dbg !5842
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_max_dv_min_mob(%struct.ddg* %g, %struct.simple_bitmap_def* %nodes) #0 !dbg !5843 {
entry:
  %g.addr = alloca %struct.ddg*, align 8
  %nodes.addr = alloca %struct.simple_bitmap_def*, align 8
  %u = alloca i32, align 4
  %max_dv = alloca i32, align 4
  %min_mob = alloca i32, align 4
  %result = alloca i32, align 4
  %sbi = alloca %struct.sbitmap_iterator, align 8
  %u_node = alloca %struct.ddg_node*, align 8
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !5844, metadata !DIExpression()), !dbg !5845
  store %struct.simple_bitmap_def* %nodes, %struct.simple_bitmap_def** %nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %nodes.addr, metadata !5846, metadata !DIExpression()), !dbg !5847
  call void @llvm.dbg.declare(metadata i32* %u, metadata !5848, metadata !DIExpression()), !dbg !5849
  store i32 0, i32* %u, align 4, !dbg !5849
  call void @llvm.dbg.declare(metadata i32* %max_dv, metadata !5850, metadata !DIExpression()), !dbg !5851
  store i32 -1, i32* %max_dv, align 4, !dbg !5851
  call void @llvm.dbg.declare(metadata i32* %min_mob, metadata !5852, metadata !DIExpression()), !dbg !5853
  store i32 2147483647, i32* %min_mob, align 4, !dbg !5853
  call void @llvm.dbg.declare(metadata i32* %result, metadata !5854, metadata !DIExpression()), !dbg !5855
  store i32 -1, i32* %result, align 4, !dbg !5855
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !5856, metadata !DIExpression()), !dbg !5857
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %nodes.addr, align 8, !dbg !5858
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %0, i32 0), !dbg !5858
  br label %for.cond, !dbg !5858

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %u), !dbg !5860
  %tobool = icmp ne i8 %call, 0, !dbg !5858
  br i1 %tobool, label %for.body, label %for.end, !dbg !5858

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node, metadata !5862, metadata !DIExpression()), !dbg !5864
  %1 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !5865
  %nodes1 = getelementptr inbounds %struct.ddg, %struct.ddg* %1, i32 0, i32 5, !dbg !5866
  %2 = load %struct.ddg_node*, %struct.ddg_node** %nodes1, align 8, !dbg !5866
  %3 = load i32, i32* %u, align 4, !dbg !5867
  %idxprom = zext i32 %3 to i64, !dbg !5865
  %arrayidx = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %2, i64 %idxprom, !dbg !5865
  store %struct.ddg_node* %arrayidx, %struct.ddg_node** %u_node, align 8, !dbg !5864
  %4 = load i32, i32* %max_dv, align 4, !dbg !5868
  %5 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5870
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %5, i32 0, i32 7, !dbg !5870
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !5870
  %6 = load i8*, i8** %info, align 8, !dbg !5870
  %7 = bitcast i8* %6 to %struct.node_order_params*, !dbg !5870
  %asap = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %7, i32 0, i32 0, !dbg !5870
  %8 = load i32, i32* %asap, align 4, !dbg !5870
  %cmp = icmp slt i32 %4, %8, !dbg !5871
  br i1 %cmp, label %if.then, label %if.else, !dbg !5872

if.then:                                          ; preds = %for.body
  %9 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5873
  %aux2 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %9, i32 0, i32 7, !dbg !5873
  %info3 = bitcast %union.anon.1* %aux2 to i8**, !dbg !5873
  %10 = load i8*, i8** %info3, align 8, !dbg !5873
  %11 = bitcast i8* %10 to %struct.node_order_params*, !dbg !5873
  %asap4 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %11, i32 0, i32 0, !dbg !5873
  %12 = load i32, i32* %asap4, align 4, !dbg !5873
  store i32 %12, i32* %max_dv, align 4, !dbg !5875
  %13 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5876
  %aux5 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %13, i32 0, i32 7, !dbg !5876
  %info6 = bitcast %union.anon.1* %aux5 to i8**, !dbg !5876
  %14 = load i8*, i8** %info6, align 8, !dbg !5876
  %15 = bitcast i8* %14 to %struct.node_order_params*, !dbg !5876
  %alap = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %15, i32 0, i32 1, !dbg !5876
  %16 = load i32, i32* %alap, align 4, !dbg !5876
  %17 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5876
  %aux7 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %17, i32 0, i32 7, !dbg !5876
  %info8 = bitcast %union.anon.1* %aux7 to i8**, !dbg !5876
  %18 = load i8*, i8** %info8, align 8, !dbg !5876
  %19 = bitcast i8* %18 to %struct.node_order_params*, !dbg !5876
  %asap9 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %19, i32 0, i32 0, !dbg !5876
  %20 = load i32, i32* %asap9, align 4, !dbg !5876
  %sub = sub nsw i32 %16, %20, !dbg !5876
  store i32 %sub, i32* %min_mob, align 4, !dbg !5877
  %21 = load i32, i32* %u, align 4, !dbg !5878
  store i32 %21, i32* %result, align 4, !dbg !5879
  br label %if.end30, !dbg !5880

if.else:                                          ; preds = %for.body
  %22 = load i32, i32* %max_dv, align 4, !dbg !5881
  %23 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5883
  %aux10 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %23, i32 0, i32 7, !dbg !5883
  %info11 = bitcast %union.anon.1* %aux10 to i8**, !dbg !5883
  %24 = load i8*, i8** %info11, align 8, !dbg !5883
  %25 = bitcast i8* %24 to %struct.node_order_params*, !dbg !5883
  %asap12 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %25, i32 0, i32 0, !dbg !5883
  %26 = load i32, i32* %asap12, align 4, !dbg !5883
  %cmp13 = icmp eq i32 %22, %26, !dbg !5884
  br i1 %cmp13, label %land.lhs.true, label %if.end, !dbg !5885

land.lhs.true:                                    ; preds = %if.else
  %27 = load i32, i32* %min_mob, align 4, !dbg !5886
  %28 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5887
  %aux14 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %28, i32 0, i32 7, !dbg !5887
  %info15 = bitcast %union.anon.1* %aux14 to i8**, !dbg !5887
  %29 = load i8*, i8** %info15, align 8, !dbg !5887
  %30 = bitcast i8* %29 to %struct.node_order_params*, !dbg !5887
  %alap16 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %30, i32 0, i32 1, !dbg !5887
  %31 = load i32, i32* %alap16, align 4, !dbg !5887
  %32 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5887
  %aux17 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %32, i32 0, i32 7, !dbg !5887
  %info18 = bitcast %union.anon.1* %aux17 to i8**, !dbg !5887
  %33 = load i8*, i8** %info18, align 8, !dbg !5887
  %34 = bitcast i8* %33 to %struct.node_order_params*, !dbg !5887
  %asap19 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %34, i32 0, i32 0, !dbg !5887
  %35 = load i32, i32* %asap19, align 4, !dbg !5887
  %sub20 = sub nsw i32 %31, %35, !dbg !5887
  %cmp21 = icmp sgt i32 %27, %sub20, !dbg !5888
  br i1 %cmp21, label %if.then22, label %if.end, !dbg !5889

if.then22:                                        ; preds = %land.lhs.true
  %36 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5890
  %aux23 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %36, i32 0, i32 7, !dbg !5890
  %info24 = bitcast %union.anon.1* %aux23 to i8**, !dbg !5890
  %37 = load i8*, i8** %info24, align 8, !dbg !5890
  %38 = bitcast i8* %37 to %struct.node_order_params*, !dbg !5890
  %alap25 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %38, i32 0, i32 1, !dbg !5890
  %39 = load i32, i32* %alap25, align 4, !dbg !5890
  %40 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !5890
  %aux26 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %40, i32 0, i32 7, !dbg !5890
  %info27 = bitcast %union.anon.1* %aux26 to i8**, !dbg !5890
  %41 = load i8*, i8** %info27, align 8, !dbg !5890
  %42 = bitcast i8* %41 to %struct.node_order_params*, !dbg !5890
  %asap28 = getelementptr inbounds %struct.node_order_params, %struct.node_order_params* %42, i32 0, i32 0, !dbg !5890
  %43 = load i32, i32* %asap28, align 4, !dbg !5890
  %sub29 = sub nsw i32 %39, %43, !dbg !5890
  store i32 %sub29, i32* %min_mob, align 4, !dbg !5892
  %44 = load i32, i32* %u, align 4, !dbg !5893
  store i32 %44, i32* %result, align 4, !dbg !5894
  br label %if.end, !dbg !5895

if.end:                                           ; preds = %if.then22, %land.lhs.true, %if.else
  br label %if.end30

if.end30:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !5896

for.inc:                                          ; preds = %if.end30
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !5860
  br label %for.cond, !dbg !5860, !llvm.loop !5897

for.end:                                          ; preds = %for.cond
  %45 = load i32, i32* %result, align 4, !dbg !5899
  ret i32 %45, !dbg !5900
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbitmap_iter_init(%struct.sbitmap_iterator* %i, %struct.simple_bitmap_def* %bmp, i32 %min) #0 !dbg !5901 {
entry:
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  %bmp.addr = alloca %struct.simple_bitmap_def*, align 8
  %min.addr = alloca i32, align 4
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !5908, metadata !DIExpression()), !dbg !5909
  store %struct.simple_bitmap_def* %bmp, %struct.simple_bitmap_def** %bmp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %bmp.addr, metadata !5910, metadata !DIExpression()), !dbg !5911
  store i32 %min, i32* %min.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %min.addr, metadata !5912, metadata !DIExpression()), !dbg !5913
  %0 = load i32, i32* %min.addr, align 4, !dbg !5914
  %div = udiv i32 %0, 64, !dbg !5915
  %1 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5916
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %1, i32 0, i32 2, !dbg !5917
  store i32 %div, i32* %word_num, align 4, !dbg !5918
  %2 = load i32, i32* %min.addr, align 4, !dbg !5919
  %3 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5920
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %3, i32 0, i32 3, !dbg !5921
  store i32 %2, i32* %bit_num, align 8, !dbg !5922
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %bmp.addr, align 8, !dbg !5923
  %size = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %4, i32 0, i32 2, !dbg !5924
  %5 = load i32, i32* %size, align 4, !dbg !5924
  %6 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5925
  %size1 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %6, i32 0, i32 1, !dbg !5926
  store i32 %5, i32* %size1, align 8, !dbg !5927
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %bmp.addr, align 8, !dbg !5928
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 3, !dbg !5929
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 0, !dbg !5928
  %8 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5930
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %8, i32 0, i32 0, !dbg !5931
  store i64* %arraydecay, i64** %ptr, align 8, !dbg !5932
  %9 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5933
  %word_num2 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %9, i32 0, i32 2, !dbg !5935
  %10 = load i32, i32* %word_num2, align 4, !dbg !5935
  %11 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5936
  %size3 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %11, i32 0, i32 1, !dbg !5937
  %12 = load i32, i32* %size3, align 8, !dbg !5937
  %cmp = icmp uge i32 %10, %12, !dbg !5938
  br i1 %cmp, label %if.then, label %if.else, !dbg !5939

if.then:                                          ; preds = %entry
  %13 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5940
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %13, i32 0, i32 4, !dbg !5941
  store i64 0, i64* %word, align 8, !dbg !5942
  br label %if.end, !dbg !5940

if.else:                                          ; preds = %entry
  %14 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5943
  %ptr4 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %14, i32 0, i32 0, !dbg !5944
  %15 = load i64*, i64** %ptr4, align 8, !dbg !5944
  %16 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5945
  %word_num5 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %16, i32 0, i32 2, !dbg !5946
  %17 = load i32, i32* %word_num5, align 4, !dbg !5946
  %idxprom = zext i32 %17 to i64, !dbg !5943
  %arrayidx = getelementptr inbounds i64, i64* %15, i64 %idxprom, !dbg !5943
  %18 = load i64, i64* %arrayidx, align 8, !dbg !5943
  %19 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5947
  %bit_num6 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %19, i32 0, i32 3, !dbg !5948
  %20 = load i32, i32* %bit_num6, align 8, !dbg !5948
  %rem = urem i32 %20, 64, !dbg !5949
  %sh_prom = zext i32 %rem to i64, !dbg !5950
  %shr = lshr i64 %18, %sh_prom, !dbg !5950
  %21 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5951
  %word7 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %21, i32 0, i32 4, !dbg !5952
  store i64 %shr, i64* %word7, align 8, !dbg !5953
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5954
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %i, i32* %n) #0 !dbg !5955 {
entry:
  %retval = alloca i8, align 1
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  %n.addr = alloca i32*, align 8
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !5959, metadata !DIExpression()), !dbg !5960
  store i32* %n, i32** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !5961, metadata !DIExpression()), !dbg !5962
  br label %for.cond, !dbg !5963

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5964
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %0, i32 0, i32 4, !dbg !5967
  %1 = load i64, i64* %word, align 8, !dbg !5967
  %cmp = icmp eq i64 %1, 0, !dbg !5968
  br i1 %cmp, label %for.body, label %for.end, !dbg !5969

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5970
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %2, i32 0, i32 2, !dbg !5972
  %3 = load i32, i32* %word_num, align 4, !dbg !5973
  %inc = add i32 %3, 1, !dbg !5973
  store i32 %inc, i32* %word_num, align 4, !dbg !5973
  %4 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5974
  %word_num1 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %4, i32 0, i32 2, !dbg !5976
  %5 = load i32, i32* %word_num1, align 4, !dbg !5976
  %6 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5977
  %size = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %6, i32 0, i32 1, !dbg !5978
  %7 = load i32, i32* %size, align 8, !dbg !5978
  %cmp2 = icmp uge i32 %5, %7, !dbg !5979
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5980

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !5981
  br label %return, !dbg !5981

if.end:                                           ; preds = %for.body
  %8 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5982
  %word_num3 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %8, i32 0, i32 2, !dbg !5983
  %9 = load i32, i32* %word_num3, align 4, !dbg !5983
  %mul = mul i32 %9, 64, !dbg !5984
  %10 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5985
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %10, i32 0, i32 3, !dbg !5986
  store i32 %mul, i32* %bit_num, align 8, !dbg !5987
  br label %for.inc, !dbg !5988

for.inc:                                          ; preds = %if.end
  %11 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5989
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %11, i32 0, i32 0, !dbg !5990
  %12 = load i64*, i64** %ptr, align 8, !dbg !5990
  %13 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5991
  %word_num4 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %13, i32 0, i32 2, !dbg !5992
  %14 = load i32, i32* %word_num4, align 4, !dbg !5992
  %idxprom = zext i32 %14 to i64, !dbg !5989
  %arrayidx = getelementptr inbounds i64, i64* %12, i64 %idxprom, !dbg !5989
  %15 = load i64, i64* %arrayidx, align 8, !dbg !5989
  %16 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !5993
  %word5 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %16, i32 0, i32 4, !dbg !5994
  store i64 %15, i64* %word5, align 8, !dbg !5995
  br label %for.cond, !dbg !5996, !llvm.loop !5997

for.end:                                          ; preds = %for.cond
  br label %for.cond6, !dbg !5999

for.cond6:                                        ; preds = %for.inc12, %for.end
  %17 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6000
  %word7 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %17, i32 0, i32 4, !dbg !6003
  %18 = load i64, i64* %word7, align 8, !dbg !6003
  %and = and i64 %18, 1, !dbg !6004
  %cmp8 = icmp eq i64 %and, 0, !dbg !6005
  br i1 %cmp8, label %for.body9, label %for.end14, !dbg !6006

for.body9:                                        ; preds = %for.cond6
  %19 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6007
  %bit_num10 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %19, i32 0, i32 3, !dbg !6008
  %20 = load i32, i32* %bit_num10, align 8, !dbg !6009
  %inc11 = add i32 %20, 1, !dbg !6009
  store i32 %inc11, i32* %bit_num10, align 8, !dbg !6009
  br label %for.inc12, !dbg !6007

for.inc12:                                        ; preds = %for.body9
  %21 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6010
  %word13 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %21, i32 0, i32 4, !dbg !6011
  %22 = load i64, i64* %word13, align 8, !dbg !6012
  %shr = lshr i64 %22, 1, !dbg !6012
  store i64 %shr, i64* %word13, align 8, !dbg !6012
  br label %for.cond6, !dbg !6013, !llvm.loop !6014

for.end14:                                        ; preds = %for.cond6
  %23 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6016
  %bit_num15 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %23, i32 0, i32 3, !dbg !6017
  %24 = load i32, i32* %bit_num15, align 8, !dbg !6017
  %25 = load i32*, i32** %n.addr, align 8, !dbg !6018
  store i32 %24, i32* %25, align 4, !dbg !6019
  store i8 1, i8* %retval, align 1, !dbg !6020
  br label %return, !dbg !6020

return:                                           ; preds = %for.end14, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !6021
  ret i8 %26, !dbg !6021
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbitmap_iter_next(%struct.sbitmap_iterator* %i) #0 !dbg !6022 {
entry:
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !6025, metadata !DIExpression()), !dbg !6026
  %0 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6027
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %0, i32 0, i32 4, !dbg !6028
  %1 = load i64, i64* %word, align 8, !dbg !6029
  %shr = lshr i64 %1, 1, !dbg !6029
  store i64 %shr, i64* %word, align 8, !dbg !6029
  %2 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6030
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %2, i32 0, i32 3, !dbg !6031
  %3 = load i32, i32* %bit_num, align 8, !dbg !6032
  %inc = add i32 %3, 1, !dbg !6032
  store i32 %inc, i32* %bit_num, align 8, !dbg !6032
  ret void, !dbg !6033
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.partial_schedule* @create_partial_schedule(i32 %ii, %struct.ddg* %g, i32 %history) #0 !dbg !6034 {
entry:
  %ii.addr = alloca i32, align 4
  %g.addr = alloca %struct.ddg*, align 8
  %history.addr = alloca i32, align 4
  %ps = alloca %struct.partial_schedule*, align 8
  store i32 %ii, i32* %ii.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ii.addr, metadata !6037, metadata !DIExpression()), !dbg !6038
  store %struct.ddg* %g, %struct.ddg** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg** %g.addr, metadata !6039, metadata !DIExpression()), !dbg !6040
  store i32 %history, i32* %history.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %history.addr, metadata !6041, metadata !DIExpression()), !dbg !6042
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps, metadata !6043, metadata !DIExpression()), !dbg !6044
  %call = call i8* @xmalloc(i64 32), !dbg !6045
  %0 = bitcast i8* %call to %struct.partial_schedule*, !dbg !6045
  store %struct.partial_schedule* %0, %struct.partial_schedule** %ps, align 8, !dbg !6044
  %1 = load i32, i32* %ii.addr, align 4, !dbg !6046
  %conv = sext i32 %1 to i64, !dbg !6046
  %call1 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !6047
  %2 = bitcast i8* %call1 to %struct.ps_insn**, !dbg !6048
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !6049
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %3, i32 0, i32 2, !dbg !6050
  store %struct.ps_insn** %2, %struct.ps_insn*** %rows, align 8, !dbg !6051
  %4 = load i32, i32* %ii.addr, align 4, !dbg !6052
  %5 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !6053
  %ii2 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %5, i32 0, i32 0, !dbg !6054
  store i32 %4, i32* %ii2, align 8, !dbg !6055
  %6 = load i32, i32* %history.addr, align 4, !dbg !6056
  %7 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !6057
  %history3 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %7, i32 0, i32 1, !dbg !6058
  store i32 %6, i32* %history3, align 4, !dbg !6059
  %8 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !6060
  %min_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %8, i32 0, i32 3, !dbg !6061
  store i32 2147483647, i32* %min_cycle, align 8, !dbg !6062
  %9 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !6063
  %max_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %9, i32 0, i32 4, !dbg !6064
  store i32 -2147483648, i32* %max_cycle, align 4, !dbg !6065
  %10 = load %struct.ddg*, %struct.ddg** %g.addr, align 8, !dbg !6066
  %11 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !6067
  %g4 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %11, i32 0, i32 5, !dbg !6068
  store %struct.ddg* %10, %struct.ddg** %g4, align 8, !dbg !6069
  %12 = load %struct.partial_schedule*, %struct.partial_schedule** %ps, align 8, !dbg !6070
  ret %struct.partial_schedule* %12, !dbg !6071
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_sched_window(%struct.partial_schedule* %ps, i32* %nodes_order, i32 %i, %struct.simple_bitmap_def* %sched_nodes, i32 %ii, i32* %start_p, i32* %step_p, i32* %end_p) #0 !dbg !6072 {
entry:
  %retval = alloca i32, align 4
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %nodes_order.addr = alloca i32*, align 8
  %i.addr = alloca i32, align 4
  %sched_nodes.addr = alloca %struct.simple_bitmap_def*, align 8
  %ii.addr = alloca i32, align 4
  %start_p.addr = alloca i32*, align 8
  %step_p.addr = alloca i32*, align 8
  %end_p.addr = alloca i32*, align 8
  %start = alloca i32, align 4
  %step = alloca i32, align 4
  %end = alloca i32, align 4
  %e = alloca %struct.ddg_edge*, align 8
  %u = alloca i32, align 4
  %u_node = alloca %struct.ddg_node*, align 8
  %psp = alloca %struct.simple_bitmap_def*, align 8
  %pss = alloca %struct.simple_bitmap_def*, align 8
  %u_node_preds = alloca %struct.simple_bitmap_def*, align 8
  %u_node_succs = alloca %struct.simple_bitmap_def*, align 8
  %psp_not_empty = alloca i32, align 4
  %pss_not_empty = alloca i32, align 4
  %early_start = alloca i32, align 4
  %v_node = alloca %struct.ddg_node*, align 8
  %p_st = alloca i32, align 4
  %late_start = alloca i32, align 4
  %v_node94 = alloca %struct.ddg_node*, align 8
  %s_st = alloca i32, align 4
  %early_start204 = alloca i32, align 4
  %late_start205 = alloca i32, align 4
  %count_preds = alloca i32, align 4
  %count_succs = alloca i32, align 4
  %v_node211 = alloca %struct.ddg_node*, align 8
  %p_st242 = alloca i32, align 4
  %v_node310 = alloca %struct.ddg_node*, align 8
  %s_st341 = alloca i32, align 4
  %old_start = alloca i32, align 4
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !6075, metadata !DIExpression()), !dbg !6076
  store i32* %nodes_order, i32** %nodes_order.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %nodes_order.addr, metadata !6077, metadata !DIExpression()), !dbg !6078
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6079, metadata !DIExpression()), !dbg !6080
  store %struct.simple_bitmap_def* %sched_nodes, %struct.simple_bitmap_def** %sched_nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %sched_nodes.addr, metadata !6081, metadata !DIExpression()), !dbg !6082
  store i32 %ii, i32* %ii.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ii.addr, metadata !6083, metadata !DIExpression()), !dbg !6084
  store i32* %start_p, i32** %start_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %start_p.addr, metadata !6085, metadata !DIExpression()), !dbg !6086
  store i32* %step_p, i32** %step_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %step_p.addr, metadata !6087, metadata !DIExpression()), !dbg !6088
  store i32* %end_p, i32** %end_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %end_p.addr, metadata !6089, metadata !DIExpression()), !dbg !6090
  call void @llvm.dbg.declare(metadata i32* %start, metadata !6091, metadata !DIExpression()), !dbg !6092
  call void @llvm.dbg.declare(metadata i32* %step, metadata !6093, metadata !DIExpression()), !dbg !6094
  call void @llvm.dbg.declare(metadata i32* %end, metadata !6095, metadata !DIExpression()), !dbg !6096
  call void @llvm.dbg.declare(metadata %struct.ddg_edge** %e, metadata !6097, metadata !DIExpression()), !dbg !6098
  call void @llvm.dbg.declare(metadata i32* %u, metadata !6099, metadata !DIExpression()), !dbg !6100
  %0 = load i32*, i32** %nodes_order.addr, align 8, !dbg !6101
  %1 = load i32, i32* %i.addr, align 4, !dbg !6102
  %idxprom = sext i32 %1 to i64, !dbg !6101
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !6101
  %2 = load i32, i32* %arrayidx, align 4, !dbg !6101
  store i32 %2, i32* %u, align 4, !dbg !6100
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node, metadata !6103, metadata !DIExpression()), !dbg !6104
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6105
  %g = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %3, i32 0, i32 5, !dbg !6106
  %4 = load %struct.ddg*, %struct.ddg** %g, align 8, !dbg !6106
  %nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %4, i32 0, i32 5, !dbg !6107
  %5 = load %struct.ddg_node*, %struct.ddg_node** %nodes, align 8, !dbg !6107
  %6 = load i32, i32* %u, align 4, !dbg !6108
  %idxprom1 = sext i32 %6 to i64, !dbg !6105
  %arrayidx2 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %5, i64 %idxprom1, !dbg !6105
  store %struct.ddg_node* %arrayidx2, %struct.ddg_node** %u_node, align 8, !dbg !6104
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %psp, metadata !6109, metadata !DIExpression()), !dbg !6110
  %7 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6111
  %g3 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %7, i32 0, i32 5, !dbg !6112
  %8 = load %struct.ddg*, %struct.ddg** %g3, align 8, !dbg !6112
  %num_nodes = getelementptr inbounds %struct.ddg, %struct.ddg* %8, i32 0, i32 1, !dbg !6113
  %9 = load i32, i32* %num_nodes, align 8, !dbg !6113
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %9), !dbg !6114
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %psp, align 8, !dbg !6110
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %pss, metadata !6115, metadata !DIExpression()), !dbg !6116
  %10 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6117
  %g4 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %10, i32 0, i32 5, !dbg !6118
  %11 = load %struct.ddg*, %struct.ddg** %g4, align 8, !dbg !6118
  %num_nodes5 = getelementptr inbounds %struct.ddg, %struct.ddg* %11, i32 0, i32 1, !dbg !6119
  %12 = load i32, i32* %num_nodes5, align 8, !dbg !6119
  %call6 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %12), !dbg !6120
  store %struct.simple_bitmap_def* %call6, %struct.simple_bitmap_def** %pss, align 8, !dbg !6116
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %u_node_preds, metadata !6121, metadata !DIExpression()), !dbg !6122
  %13 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6123
  %predecessors = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %13, i32 0, i32 6, !dbg !6123
  %14 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %predecessors, align 8, !dbg !6123
  store %struct.simple_bitmap_def* %14, %struct.simple_bitmap_def** %u_node_preds, align 8, !dbg !6122
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %u_node_succs, metadata !6124, metadata !DIExpression()), !dbg !6125
  %15 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6126
  %successors = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %15, i32 0, i32 5, !dbg !6126
  %16 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %successors, align 8, !dbg !6126
  store %struct.simple_bitmap_def* %16, %struct.simple_bitmap_def** %u_node_succs, align 8, !dbg !6125
  call void @llvm.dbg.declare(metadata i32* %psp_not_empty, metadata !6127, metadata !DIExpression()), !dbg !6128
  call void @llvm.dbg.declare(metadata i32* %pss_not_empty, metadata !6129, metadata !DIExpression()), !dbg !6130
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %psp, align 8, !dbg !6131
  call void @sbitmap_zero(%struct.simple_bitmap_def* %17), !dbg !6132
  %18 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %pss, align 8, !dbg !6133
  call void @sbitmap_zero(%struct.simple_bitmap_def* %18), !dbg !6134
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %psp, align 8, !dbg !6135
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %u_node_preds, align 8, !dbg !6136
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6137
  %call7 = call zeroext i8 @sbitmap_a_and_b_cg(%struct.simple_bitmap_def* %19, %struct.simple_bitmap_def* %20, %struct.simple_bitmap_def* %21), !dbg !6138
  %conv = zext i8 %call7 to i32, !dbg !6138
  store i32 %conv, i32* %psp_not_empty, align 4, !dbg !6139
  %22 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %pss, align 8, !dbg !6140
  %23 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %u_node_succs, align 8, !dbg !6141
  %24 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6142
  %call8 = call zeroext i8 @sbitmap_a_and_b_cg(%struct.simple_bitmap_def* %22, %struct.simple_bitmap_def* %23, %struct.simple_bitmap_def* %24), !dbg !6143
  %conv9 = zext i8 %call8 to i32, !dbg !6143
  store i32 %conv9, i32* %pss_not_empty, align 4, !dbg !6144
  %25 = load i32, i32* %psp_not_empty, align 4, !dbg !6145
  %tobool = icmp ne i32 %25, 0, !dbg !6145
  br i1 %tobool, label %land.lhs.true, label %if.else85, !dbg !6147

land.lhs.true:                                    ; preds = %entry
  %26 = load i32, i32* %pss_not_empty, align 4, !dbg !6148
  %tobool10 = icmp ne i32 %26, 0, !dbg !6148
  br i1 %tobool10, label %if.else85, label %if.then, !dbg !6149

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %early_start, metadata !6150, metadata !DIExpression()), !dbg !6152
  store i32 -2147483648, i32* %early_start, align 4, !dbg !6152
  store i32 2147483647, i32* %end, align 4, !dbg !6153
  %27 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6154
  %in = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %27, i32 0, i32 3, !dbg !6156
  %28 = load %struct.ddg_edge*, %struct.ddg_edge** %in, align 8, !dbg !6156
  store %struct.ddg_edge* %28, %struct.ddg_edge** %e, align 8, !dbg !6157
  br label %for.cond, !dbg !6158

for.cond:                                         ; preds = %for.inc, %if.then
  %29 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6159
  %cmp = icmp ne %struct.ddg_edge* %29, null, !dbg !6161
  br i1 %cmp, label %for.body, label %for.end, !dbg !6162

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %v_node, metadata !6163, metadata !DIExpression()), !dbg !6165
  %30 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6166
  %src = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %30, i32 0, i32 0, !dbg !6167
  %31 = load %struct.ddg_node*, %struct.ddg_node** %src, align 8, !dbg !6167
  store %struct.ddg_node* %31, %struct.ddg_node** %v_node, align 8, !dbg !6165
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6168
  %tobool12 = icmp ne %struct._IO_FILE* %32, null, !dbg !6168
  br i1 %tobool12, label %if.then13, label %if.end, !dbg !6170

if.then13:                                        ; preds = %for.body
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6171
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.49, i64 0, i64 0)), !dbg !6173
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6174
  %35 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6175
  call void @print_ddg_edge(%struct._IO_FILE* %34, %struct.ddg_edge* %35), !dbg !6176
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6177
  %37 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6178
  %cuid = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %37, i32 0, i32 0, !dbg !6179
  %38 = load i32, i32* %cuid, align 8, !dbg !6179
  %39 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6180
  %insn = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %39, i32 0, i32 1, !dbg !6180
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6180
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !6180
  %fld = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !6180
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6180
  %rt_int = bitcast %union.rtunion_def* %arrayidx16 to i32*, !dbg !6180
  %41 = load i32, i32* %rt_int, align 8, !dbg !6180
  %42 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6181
  %cuid17 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %42, i32 0, i32 0, !dbg !6182
  %43 = load i32, i32* %cuid17, align 8, !dbg !6182
  %44 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6183
  %insn18 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %44, i32 0, i32 1, !dbg !6183
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn18, align 8, !dbg !6183
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !6183
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !6183
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !6183
  %rt_int22 = bitcast %union.rtunion_def* %arrayidx21 to i32*, !dbg !6183
  %46 = load i32, i32* %rt_int22, align 8, !dbg !6183
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.50, i64 0, i64 0), i32 %38, i32 %41, i32 %43, i32 %46), !dbg !6184
  br label %if.end, !dbg !6185

if.end:                                           ; preds = %if.then13, %for.body
  %47 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6186
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %47, i32 0, i32 3, !dbg !6186
  %48 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6186
  %cuid24 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %48, i32 0, i32 0, !dbg !6186
  %49 = load i32, i32* %cuid24, align 8, !dbg !6186
  %div = udiv i32 %49, 64, !dbg !6186
  %idxprom25 = zext i32 %div to i64, !dbg !6186
  %arrayidx26 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom25, !dbg !6186
  %50 = load i64, i64* %arrayidx26, align 8, !dbg !6186
  %51 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6186
  %cuid27 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %51, i32 0, i32 0, !dbg !6186
  %52 = load i32, i32* %cuid27, align 8, !dbg !6186
  %rem = urem i32 %52, 64, !dbg !6186
  %sh_prom = zext i32 %rem to i64, !dbg !6186
  %shr = lshr i64 %50, %sh_prom, !dbg !6186
  %and = and i64 %shr, 1, !dbg !6186
  %tobool28 = icmp ne i64 %and, 0, !dbg !6186
  br i1 %tobool28, label %if.then29, label %if.else, !dbg !6188

if.then29:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %p_st, metadata !6189, metadata !DIExpression()), !dbg !6191
  %53 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6192
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %53, i32 0, i32 7, !dbg !6192
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !6192
  %54 = load i8*, i8** %info, align 8, !dbg !6192
  %55 = bitcast i8* %54 to %struct.node_sched_params*, !dbg !6192
  %time = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %55, i32 0, i32 1, !dbg !6192
  %56 = load i32, i32* %time, align 4, !dbg !6192
  store i32 %56, i32* %p_st, align 4, !dbg !6191
  %57 = load i32, i32* %early_start, align 4, !dbg !6193
  %58 = load i32, i32* %p_st, align 4, !dbg !6193
  %59 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6193
  %latency = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %59, i32 0, i32 4, !dbg !6193
  %60 = load i32, i32* %latency, align 8, !dbg !6193
  %add = add nsw i32 %58, %60, !dbg !6193
  %61 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6193
  %distance = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %61, i32 0, i32 5, !dbg !6193
  %62 = load i32, i32* %distance, align 4, !dbg !6193
  %63 = load i32, i32* %ii.addr, align 4, !dbg !6193
  %mul = mul nsw i32 %62, %63, !dbg !6193
  %sub = sub nsw i32 %add, %mul, !dbg !6193
  %cmp30 = icmp sgt i32 %57, %sub, !dbg !6193
  br i1 %cmp30, label %cond.true, label %cond.false, !dbg !6193

cond.true:                                        ; preds = %if.then29
  %64 = load i32, i32* %early_start, align 4, !dbg !6193
  br label %cond.end, !dbg !6193

cond.false:                                       ; preds = %if.then29
  %65 = load i32, i32* %p_st, align 4, !dbg !6193
  %66 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6193
  %latency32 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %66, i32 0, i32 4, !dbg !6193
  %67 = load i32, i32* %latency32, align 8, !dbg !6193
  %add33 = add nsw i32 %65, %67, !dbg !6193
  %68 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6193
  %distance34 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %68, i32 0, i32 5, !dbg !6193
  %69 = load i32, i32* %distance34, align 4, !dbg !6193
  %70 = load i32, i32* %ii.addr, align 4, !dbg !6193
  %mul35 = mul nsw i32 %69, %70, !dbg !6193
  %sub36 = sub nsw i32 %add33, %mul35, !dbg !6193
  br label %cond.end, !dbg !6193

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %64, %cond.true ], [ %sub36, %cond.false ], !dbg !6193
  store i32 %cond, i32* %early_start, align 4, !dbg !6194
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6195
  %tobool37 = icmp ne %struct._IO_FILE* %71, null, !dbg !6195
  br i1 %tobool37, label %if.then38, label %if.end41, !dbg !6197

if.then38:                                        ; preds = %cond.end
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6198
  %73 = load i32, i32* %p_st, align 4, !dbg !6199
  %74 = load i32, i32* %early_start, align 4, !dbg !6200
  %75 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6201
  %latency39 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %75, i32 0, i32 4, !dbg !6202
  %76 = load i32, i32* %latency39, align 8, !dbg !6202
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.51, i64 0, i64 0), i32 %73, i32 %74, i32 %76), !dbg !6203
  br label %if.end41, !dbg !6203

if.end41:                                         ; preds = %if.then38, %cond.end
  %77 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6204
  %data_type = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %77, i32 0, i32 3, !dbg !6206
  %78 = load i32, i32* %data_type, align 4, !dbg !6206
  %cmp42 = icmp eq i32 %78, 2, !dbg !6207
  br i1 %cmp42, label %if.then44, label %if.end61, !dbg !6208

if.then44:                                        ; preds = %if.end41
  %79 = load i32, i32* %end, align 4, !dbg !6209
  %80 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6209
  %aux45 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %80, i32 0, i32 7, !dbg !6209
  %info46 = bitcast %union.anon.1* %aux45 to i8**, !dbg !6209
  %81 = load i8*, i8** %info46, align 8, !dbg !6209
  %82 = bitcast i8* %81 to %struct.node_sched_params*, !dbg !6209
  %time47 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %82, i32 0, i32 1, !dbg !6209
  %83 = load i32, i32* %time47, align 4, !dbg !6209
  %84 = load i32, i32* %ii.addr, align 4, !dbg !6209
  %add48 = add nsw i32 %83, %84, !dbg !6209
  %sub49 = sub nsw i32 %add48, 1, !dbg !6209
  %cmp50 = icmp slt i32 %79, %sub49, !dbg !6209
  br i1 %cmp50, label %cond.true52, label %cond.false53, !dbg !6209

cond.true52:                                      ; preds = %if.then44
  %85 = load i32, i32* %end, align 4, !dbg !6209
  br label %cond.end59, !dbg !6209

cond.false53:                                     ; preds = %if.then44
  %86 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6209
  %aux54 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %86, i32 0, i32 7, !dbg !6209
  %info55 = bitcast %union.anon.1* %aux54 to i8**, !dbg !6209
  %87 = load i8*, i8** %info55, align 8, !dbg !6209
  %88 = bitcast i8* %87 to %struct.node_sched_params*, !dbg !6209
  %time56 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %88, i32 0, i32 1, !dbg !6209
  %89 = load i32, i32* %time56, align 4, !dbg !6209
  %90 = load i32, i32* %ii.addr, align 4, !dbg !6209
  %add57 = add nsw i32 %89, %90, !dbg !6209
  %sub58 = sub nsw i32 %add57, 1, !dbg !6209
  br label %cond.end59, !dbg !6209

cond.end59:                                       ; preds = %cond.false53, %cond.true52
  %cond60 = phi i32 [ %85, %cond.true52 ], [ %sub58, %cond.false53 ], !dbg !6209
  store i32 %cond60, i32* %end, align 4, !dbg !6210
  br label %if.end61, !dbg !6211

if.end61:                                         ; preds = %cond.end59, %if.end41
  br label %if.end66, !dbg !6212

if.else:                                          ; preds = %if.end
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6213
  %tobool62 = icmp ne %struct._IO_FILE* %91, null, !dbg !6213
  br i1 %tobool62, label %if.then63, label %if.end65, !dbg !6215

if.then63:                                        ; preds = %if.else
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6216
  %call64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %92, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.52, i64 0, i64 0)), !dbg !6217
  br label %if.end65, !dbg !6217

if.end65:                                         ; preds = %if.then63, %if.else
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.end61
  br label %for.inc, !dbg !6218

for.inc:                                          ; preds = %if.end66
  %93 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6219
  %next_in = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %93, i32 0, i32 6, !dbg !6220
  %94 = load %struct.ddg_edge*, %struct.ddg_edge** %next_in, align 8, !dbg !6220
  store %struct.ddg_edge* %94, %struct.ddg_edge** %e, align 8, !dbg !6221
  br label %for.cond, !dbg !6222, !llvm.loop !6223

for.end:                                          ; preds = %for.cond
  %95 = load i32, i32* %early_start, align 4, !dbg !6225
  store i32 %95, i32* %start, align 4, !dbg !6226
  %96 = load i32, i32* %end, align 4, !dbg !6227
  %97 = load i32, i32* %early_start, align 4, !dbg !6227
  %98 = load i32, i32* %ii.addr, align 4, !dbg !6227
  %add67 = add nsw i32 %97, %98, !dbg !6227
  %cmp68 = icmp slt i32 %96, %add67, !dbg !6227
  br i1 %cmp68, label %cond.true70, label %cond.false71, !dbg !6227

cond.true70:                                      ; preds = %for.end
  %99 = load i32, i32* %end, align 4, !dbg !6227
  br label %cond.end73, !dbg !6227

cond.false71:                                     ; preds = %for.end
  %100 = load i32, i32* %early_start, align 4, !dbg !6227
  %101 = load i32, i32* %ii.addr, align 4, !dbg !6227
  %add72 = add nsw i32 %100, %101, !dbg !6227
  br label %cond.end73, !dbg !6227

cond.end73:                                       ; preds = %cond.false71, %cond.true70
  %cond74 = phi i32 [ %99, %cond.true70 ], [ %add72, %cond.false71 ], !dbg !6227
  store i32 %cond74, i32* %end, align 4, !dbg !6228
  store i32 1, i32* %step, align 4, !dbg !6229
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6230
  %tobool75 = icmp ne %struct._IO_FILE* %102, null, !dbg !6230
  br i1 %tobool75, label %if.then76, label %if.end84, !dbg !6232

if.then76:                                        ; preds = %cond.end73
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6233
  %104 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6234
  %cuid77 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %104, i32 0, i32 0, !dbg !6235
  %105 = load i32, i32* %cuid77, align 8, !dbg !6235
  %106 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6236
  %insn78 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %106, i32 0, i32 1, !dbg !6236
  %107 = load %struct.rtx_def*, %struct.rtx_def** %insn78, align 8, !dbg !6236
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1, !dbg !6236
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !6236
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 0, !dbg !6236
  %rt_int82 = bitcast %union.rtunion_def* %arrayidx81 to i32*, !dbg !6236
  %108 = load i32, i32* %rt_int82, align 8, !dbg !6236
  %109 = load i32, i32* %start, align 4, !dbg !6237
  %110 = load i32, i32* %end, align 4, !dbg !6238
  %111 = load i32, i32* %step, align 4, !dbg !6239
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %103, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.53, i64 0, i64 0), i32 %105, i32 %108, i32 %109, i32 %110, i32 %111), !dbg !6240
  br label %if.end84, !dbg !6240

if.end84:                                         ; preds = %if.then76, %cond.end73
  br label %if.end450, !dbg !6241

if.else85:                                        ; preds = %land.lhs.true, %entry
  %112 = load i32, i32* %psp_not_empty, align 4, !dbg !6242
  %tobool86 = icmp ne i32 %112, 0, !dbg !6242
  br i1 %tobool86, label %if.else199, label %land.lhs.true87, !dbg !6244

land.lhs.true87:                                  ; preds = %if.else85
  %113 = load i32, i32* %pss_not_empty, align 4, !dbg !6245
  %tobool88 = icmp ne i32 %113, 0, !dbg !6245
  br i1 %tobool88, label %if.then89, label %if.else199, !dbg !6246

if.then89:                                        ; preds = %land.lhs.true87
  call void @llvm.dbg.declare(metadata i32* %late_start, metadata !6247, metadata !DIExpression()), !dbg !6249
  store i32 2147483647, i32* %late_start, align 4, !dbg !6249
  store i32 -2147483648, i32* %end, align 4, !dbg !6250
  %114 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6251
  %out = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %114, i32 0, i32 4, !dbg !6253
  %115 = load %struct.ddg_edge*, %struct.ddg_edge** %out, align 8, !dbg !6253
  store %struct.ddg_edge* %115, %struct.ddg_edge** %e, align 8, !dbg !6254
  br label %for.cond90, !dbg !6255

for.cond90:                                       ; preds = %for.inc179, %if.then89
  %116 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6256
  %cmp91 = icmp ne %struct.ddg_edge* %116, null, !dbg !6258
  br i1 %cmp91, label %for.body93, label %for.end180, !dbg !6259

for.body93:                                       ; preds = %for.cond90
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %v_node94, metadata !6260, metadata !DIExpression()), !dbg !6262
  %117 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6263
  %dest = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %117, i32 0, i32 1, !dbg !6264
  %118 = load %struct.ddg_node*, %struct.ddg_node** %dest, align 8, !dbg !6264
  store %struct.ddg_node* %118, %struct.ddg_node** %v_node94, align 8, !dbg !6262
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6265
  %tobool95 = icmp ne %struct._IO_FILE* %119, null, !dbg !6265
  br i1 %tobool95, label %if.then96, label %if.end111, !dbg !6267

if.then96:                                        ; preds = %for.body93
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6268
  %call97 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %120, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i64 0, i64 0)), !dbg !6270
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6271
  %122 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6272
  call void @print_ddg_edge(%struct._IO_FILE* %121, %struct.ddg_edge* %122), !dbg !6273
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6274
  %124 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6275
  %cuid98 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %124, i32 0, i32 0, !dbg !6276
  %125 = load i32, i32* %cuid98, align 8, !dbg !6276
  %126 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6277
  %insn99 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %126, i32 0, i32 1, !dbg !6277
  %127 = load %struct.rtx_def*, %struct.rtx_def** %insn99, align 8, !dbg !6277
  %u100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1, !dbg !6277
  %fld101 = bitcast %union.u* %u100 to [1 x %union.rtunion_def]*, !dbg !6277
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i64 0, i64 0, !dbg !6277
  %rt_int103 = bitcast %union.rtunion_def* %arrayidx102 to i32*, !dbg !6277
  %128 = load i32, i32* %rt_int103, align 8, !dbg !6277
  %129 = load %struct.ddg_node*, %struct.ddg_node** %v_node94, align 8, !dbg !6278
  %cuid104 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %129, i32 0, i32 0, !dbg !6279
  %130 = load i32, i32* %cuid104, align 8, !dbg !6279
  %131 = load %struct.ddg_node*, %struct.ddg_node** %v_node94, align 8, !dbg !6280
  %insn105 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %131, i32 0, i32 1, !dbg !6280
  %132 = load %struct.rtx_def*, %struct.rtx_def** %insn105, align 8, !dbg !6280
  %u106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %132, i32 0, i32 1, !dbg !6280
  %fld107 = bitcast %union.u* %u106 to [1 x %union.rtunion_def]*, !dbg !6280
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i64 0, i64 0, !dbg !6280
  %rt_int109 = bitcast %union.rtunion_def* %arrayidx108 to i32*, !dbg !6280
  %133 = load i32, i32* %rt_int109, align 8, !dbg !6280
  %call110 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %123, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.55, i64 0, i64 0), i32 %125, i32 %128, i32 %130, i32 %133), !dbg !6281
  br label %if.end111, !dbg !6282

if.end111:                                        ; preds = %if.then96, %for.body93
  %134 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6283
  %elms112 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %134, i32 0, i32 3, !dbg !6283
  %135 = load %struct.ddg_node*, %struct.ddg_node** %v_node94, align 8, !dbg !6283
  %cuid113 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %135, i32 0, i32 0, !dbg !6283
  %136 = load i32, i32* %cuid113, align 8, !dbg !6283
  %div114 = udiv i32 %136, 64, !dbg !6283
  %idxprom115 = zext i32 %div114 to i64, !dbg !6283
  %arrayidx116 = getelementptr inbounds [1 x i64], [1 x i64]* %elms112, i64 0, i64 %idxprom115, !dbg !6283
  %137 = load i64, i64* %arrayidx116, align 8, !dbg !6283
  %138 = load %struct.ddg_node*, %struct.ddg_node** %v_node94, align 8, !dbg !6283
  %cuid117 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %138, i32 0, i32 0, !dbg !6283
  %139 = load i32, i32* %cuid117, align 8, !dbg !6283
  %rem118 = urem i32 %139, 64, !dbg !6283
  %sh_prom119 = zext i32 %rem118 to i64, !dbg !6283
  %shr120 = lshr i64 %137, %sh_prom119, !dbg !6283
  %and121 = and i64 %shr120, 1, !dbg !6283
  %tobool122 = icmp ne i64 %and121, 0, !dbg !6283
  br i1 %tobool122, label %if.then123, label %if.else173, !dbg !6285

if.then123:                                       ; preds = %if.end111
  call void @llvm.dbg.declare(metadata i32* %s_st, metadata !6286, metadata !DIExpression()), !dbg !6288
  %140 = load %struct.ddg_node*, %struct.ddg_node** %v_node94, align 8, !dbg !6289
  %aux124 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %140, i32 0, i32 7, !dbg !6289
  %info125 = bitcast %union.anon.1* %aux124 to i8**, !dbg !6289
  %141 = load i8*, i8** %info125, align 8, !dbg !6289
  %142 = bitcast i8* %141 to %struct.node_sched_params*, !dbg !6289
  %time126 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %142, i32 0, i32 1, !dbg !6289
  %143 = load i32, i32* %time126, align 4, !dbg !6289
  store i32 %143, i32* %s_st, align 4, !dbg !6288
  %144 = load i32, i32* %late_start, align 4, !dbg !6290
  %145 = load i32, i32* %s_st, align 4, !dbg !6290
  %146 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6290
  %latency127 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %146, i32 0, i32 4, !dbg !6290
  %147 = load i32, i32* %latency127, align 8, !dbg !6290
  %sub128 = sub nsw i32 %145, %147, !dbg !6290
  %148 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6290
  %distance129 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %148, i32 0, i32 5, !dbg !6290
  %149 = load i32, i32* %distance129, align 4, !dbg !6290
  %150 = load i32, i32* %ii.addr, align 4, !dbg !6290
  %mul130 = mul nsw i32 %149, %150, !dbg !6290
  %add131 = add nsw i32 %sub128, %mul130, !dbg !6290
  %cmp132 = icmp slt i32 %144, %add131, !dbg !6290
  br i1 %cmp132, label %cond.true134, label %cond.false135, !dbg !6290

cond.true134:                                     ; preds = %if.then123
  %151 = load i32, i32* %late_start, align 4, !dbg !6290
  br label %cond.end141, !dbg !6290

cond.false135:                                    ; preds = %if.then123
  %152 = load i32, i32* %s_st, align 4, !dbg !6290
  %153 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6290
  %latency136 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %153, i32 0, i32 4, !dbg !6290
  %154 = load i32, i32* %latency136, align 8, !dbg !6290
  %sub137 = sub nsw i32 %152, %154, !dbg !6290
  %155 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6290
  %distance138 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %155, i32 0, i32 5, !dbg !6290
  %156 = load i32, i32* %distance138, align 4, !dbg !6290
  %157 = load i32, i32* %ii.addr, align 4, !dbg !6290
  %mul139 = mul nsw i32 %156, %157, !dbg !6290
  %add140 = add nsw i32 %sub137, %mul139, !dbg !6290
  br label %cond.end141, !dbg !6290

cond.end141:                                      ; preds = %cond.false135, %cond.true134
  %cond142 = phi i32 [ %151, %cond.true134 ], [ %add140, %cond.false135 ], !dbg !6290
  store i32 %cond142, i32* %late_start, align 4, !dbg !6291
  %158 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6292
  %tobool143 = icmp ne %struct._IO_FILE* %158, null, !dbg !6292
  br i1 %tobool143, label %if.then144, label %if.end147, !dbg !6294

if.then144:                                       ; preds = %cond.end141
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6295
  %160 = load i32, i32* %s_st, align 4, !dbg !6296
  %161 = load i32, i32* %late_start, align 4, !dbg !6297
  %162 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6298
  %latency145 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %162, i32 0, i32 4, !dbg !6299
  %163 = load i32, i32* %latency145, align 8, !dbg !6299
  %call146 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %159, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.56, i64 0, i64 0), i32 %160, i32 %161, i32 %163), !dbg !6300
  br label %if.end147, !dbg !6300

if.end147:                                        ; preds = %if.then144, %cond.end141
  %164 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6301
  %data_type148 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %164, i32 0, i32 3, !dbg !6303
  %165 = load i32, i32* %data_type148, align 4, !dbg !6303
  %cmp149 = icmp eq i32 %165, 2, !dbg !6304
  br i1 %cmp149, label %if.then151, label %if.end168, !dbg !6305

if.then151:                                       ; preds = %if.end147
  %166 = load i32, i32* %end, align 4, !dbg !6306
  %167 = load %struct.ddg_node*, %struct.ddg_node** %v_node94, align 8, !dbg !6306
  %aux152 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %167, i32 0, i32 7, !dbg !6306
  %info153 = bitcast %union.anon.1* %aux152 to i8**, !dbg !6306
  %168 = load i8*, i8** %info153, align 8, !dbg !6306
  %169 = bitcast i8* %168 to %struct.node_sched_params*, !dbg !6306
  %time154 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %169, i32 0, i32 1, !dbg !6306
  %170 = load i32, i32* %time154, align 4, !dbg !6306
  %171 = load i32, i32* %ii.addr, align 4, !dbg !6306
  %sub155 = sub nsw i32 %170, %171, !dbg !6306
  %add156 = add nsw i32 %sub155, 1, !dbg !6306
  %cmp157 = icmp sgt i32 %166, %add156, !dbg !6306
  br i1 %cmp157, label %cond.true159, label %cond.false160, !dbg !6306

cond.true159:                                     ; preds = %if.then151
  %172 = load i32, i32* %end, align 4, !dbg !6306
  br label %cond.end166, !dbg !6306

cond.false160:                                    ; preds = %if.then151
  %173 = load %struct.ddg_node*, %struct.ddg_node** %v_node94, align 8, !dbg !6306
  %aux161 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %173, i32 0, i32 7, !dbg !6306
  %info162 = bitcast %union.anon.1* %aux161 to i8**, !dbg !6306
  %174 = load i8*, i8** %info162, align 8, !dbg !6306
  %175 = bitcast i8* %174 to %struct.node_sched_params*, !dbg !6306
  %time163 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %175, i32 0, i32 1, !dbg !6306
  %176 = load i32, i32* %time163, align 4, !dbg !6306
  %177 = load i32, i32* %ii.addr, align 4, !dbg !6306
  %sub164 = sub nsw i32 %176, %177, !dbg !6306
  %add165 = add nsw i32 %sub164, 1, !dbg !6306
  br label %cond.end166, !dbg !6306

cond.end166:                                      ; preds = %cond.false160, %cond.true159
  %cond167 = phi i32 [ %172, %cond.true159 ], [ %add165, %cond.false160 ], !dbg !6306
  store i32 %cond167, i32* %end, align 4, !dbg !6307
  br label %if.end168, !dbg !6308

if.end168:                                        ; preds = %cond.end166, %if.end147
  %178 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6309
  %tobool169 = icmp ne %struct._IO_FILE* %178, null, !dbg !6309
  br i1 %tobool169, label %if.then170, label %if.end172, !dbg !6311

if.then170:                                       ; preds = %if.end168
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6312
  %180 = load i32, i32* %end, align 4, !dbg !6313
  %call171 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %179, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i64 0, i64 0), i32 %180), !dbg !6314
  br label %if.end172, !dbg !6314

if.end172:                                        ; preds = %if.then170, %if.end168
  br label %if.end178, !dbg !6315

if.else173:                                       ; preds = %if.end111
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6316
  %tobool174 = icmp ne %struct._IO_FILE* %181, null, !dbg !6316
  br i1 %tobool174, label %if.then175, label %if.end177, !dbg !6318

if.then175:                                       ; preds = %if.else173
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6319
  %call176 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %182, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.52, i64 0, i64 0)), !dbg !6320
  br label %if.end177, !dbg !6320

if.end177:                                        ; preds = %if.then175, %if.else173
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %if.end172
  br label %for.inc179, !dbg !6321

for.inc179:                                       ; preds = %if.end178
  %183 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6322
  %next_out = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %183, i32 0, i32 7, !dbg !6323
  %184 = load %struct.ddg_edge*, %struct.ddg_edge** %next_out, align 8, !dbg !6323
  store %struct.ddg_edge* %184, %struct.ddg_edge** %e, align 8, !dbg !6324
  br label %for.cond90, !dbg !6325, !llvm.loop !6326

for.end180:                                       ; preds = %for.cond90
  %185 = load i32, i32* %late_start, align 4, !dbg !6328
  store i32 %185, i32* %start, align 4, !dbg !6329
  %186 = load i32, i32* %end, align 4, !dbg !6330
  %187 = load i32, i32* %late_start, align 4, !dbg !6330
  %188 = load i32, i32* %ii.addr, align 4, !dbg !6330
  %sub181 = sub nsw i32 %187, %188, !dbg !6330
  %cmp182 = icmp sgt i32 %186, %sub181, !dbg !6330
  br i1 %cmp182, label %cond.true184, label %cond.false185, !dbg !6330

cond.true184:                                     ; preds = %for.end180
  %189 = load i32, i32* %end, align 4, !dbg !6330
  br label %cond.end187, !dbg !6330

cond.false185:                                    ; preds = %for.end180
  %190 = load i32, i32* %late_start, align 4, !dbg !6330
  %191 = load i32, i32* %ii.addr, align 4, !dbg !6330
  %sub186 = sub nsw i32 %190, %191, !dbg !6330
  br label %cond.end187, !dbg !6330

cond.end187:                                      ; preds = %cond.false185, %cond.true184
  %cond188 = phi i32 [ %189, %cond.true184 ], [ %sub186, %cond.false185 ], !dbg !6330
  store i32 %cond188, i32* %end, align 4, !dbg !6331
  store i32 -1, i32* %step, align 4, !dbg !6332
  %192 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6333
  %tobool189 = icmp ne %struct._IO_FILE* %192, null, !dbg !6333
  br i1 %tobool189, label %if.then190, label %if.end198, !dbg !6335

if.then190:                                       ; preds = %cond.end187
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6336
  %194 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6337
  %cuid191 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %194, i32 0, i32 0, !dbg !6338
  %195 = load i32, i32* %cuid191, align 8, !dbg !6338
  %196 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6339
  %insn192 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %196, i32 0, i32 1, !dbg !6339
  %197 = load %struct.rtx_def*, %struct.rtx_def** %insn192, align 8, !dbg !6339
  %u193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %197, i32 0, i32 1, !dbg !6339
  %fld194 = bitcast %union.u* %u193 to [1 x %union.rtunion_def]*, !dbg !6339
  %arrayidx195 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld194, i64 0, i64 0, !dbg !6339
  %rt_int196 = bitcast %union.rtunion_def* %arrayidx195 to i32*, !dbg !6339
  %198 = load i32, i32* %rt_int196, align 8, !dbg !6339
  %199 = load i32, i32* %start, align 4, !dbg !6340
  %200 = load i32, i32* %end, align 4, !dbg !6341
  %201 = load i32, i32* %step, align 4, !dbg !6342
  %call197 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %193, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.53, i64 0, i64 0), i32 %195, i32 %198, i32 %199, i32 %200, i32 %201), !dbg !6343
  br label %if.end198, !dbg !6343

if.end198:                                        ; preds = %if.then190, %cond.end187
  br label %if.end449, !dbg !6344

if.else199:                                       ; preds = %land.lhs.true87, %if.else85
  %202 = load i32, i32* %psp_not_empty, align 4, !dbg !6345
  %tobool200 = icmp ne i32 %202, 0, !dbg !6345
  br i1 %tobool200, label %land.lhs.true201, label %if.else444, !dbg !6347

land.lhs.true201:                                 ; preds = %if.else199
  %203 = load i32, i32* %pss_not_empty, align 4, !dbg !6348
  %tobool202 = icmp ne i32 %203, 0, !dbg !6348
  br i1 %tobool202, label %if.then203, label %if.else444, !dbg !6349

if.then203:                                       ; preds = %land.lhs.true201
  call void @llvm.dbg.declare(metadata i32* %early_start204, metadata !6350, metadata !DIExpression()), !dbg !6352
  store i32 -2147483648, i32* %early_start204, align 4, !dbg !6352
  call void @llvm.dbg.declare(metadata i32* %late_start205, metadata !6353, metadata !DIExpression()), !dbg !6354
  store i32 2147483647, i32* %late_start205, align 4, !dbg !6354
  call void @llvm.dbg.declare(metadata i32* %count_preds, metadata !6355, metadata !DIExpression()), !dbg !6356
  store i32 0, i32* %count_preds, align 4, !dbg !6356
  call void @llvm.dbg.declare(metadata i32* %count_succs, metadata !6357, metadata !DIExpression()), !dbg !6358
  store i32 0, i32* %count_succs, align 4, !dbg !6358
  store i32 -2147483648, i32* %start, align 4, !dbg !6359
  store i32 2147483647, i32* %end, align 4, !dbg !6360
  %204 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6361
  %in206 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %204, i32 0, i32 3, !dbg !6363
  %205 = load %struct.ddg_edge*, %struct.ddg_edge** %in206, align 8, !dbg !6363
  store %struct.ddg_edge* %205, %struct.ddg_edge** %e, align 8, !dbg !6364
  br label %for.cond207, !dbg !6365

for.cond207:                                      ; preds = %for.inc302, %if.then203
  %206 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6366
  %cmp208 = icmp ne %struct.ddg_edge* %206, null, !dbg !6368
  br i1 %cmp208, label %for.body210, label %for.end304, !dbg !6369

for.body210:                                      ; preds = %for.cond207
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %v_node211, metadata !6370, metadata !DIExpression()), !dbg !6372
  %207 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6373
  %src212 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %207, i32 0, i32 0, !dbg !6374
  %208 = load %struct.ddg_node*, %struct.ddg_node** %src212, align 8, !dbg !6374
  store %struct.ddg_node* %208, %struct.ddg_node** %v_node211, align 8, !dbg !6372
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6375
  %tobool213 = icmp ne %struct._IO_FILE* %209, null, !dbg !6375
  br i1 %tobool213, label %if.then214, label %if.end229, !dbg !6377

if.then214:                                       ; preds = %for.body210
  %210 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6378
  %call215 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %210, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i64 0, i64 0)), !dbg !6380
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6381
  %212 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6382
  call void @print_ddg_edge(%struct._IO_FILE* %211, %struct.ddg_edge* %212), !dbg !6383
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6384
  %214 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6385
  %cuid216 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %214, i32 0, i32 0, !dbg !6386
  %215 = load i32, i32* %cuid216, align 8, !dbg !6386
  %216 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6387
  %insn217 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %216, i32 0, i32 1, !dbg !6387
  %217 = load %struct.rtx_def*, %struct.rtx_def** %insn217, align 8, !dbg !6387
  %u218 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %217, i32 0, i32 1, !dbg !6387
  %fld219 = bitcast %union.u* %u218 to [1 x %union.rtunion_def]*, !dbg !6387
  %arrayidx220 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld219, i64 0, i64 0, !dbg !6387
  %rt_int221 = bitcast %union.rtunion_def* %arrayidx220 to i32*, !dbg !6387
  %218 = load i32, i32* %rt_int221, align 8, !dbg !6387
  %219 = load %struct.ddg_node*, %struct.ddg_node** %v_node211, align 8, !dbg !6388
  %cuid222 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %219, i32 0, i32 0, !dbg !6389
  %220 = load i32, i32* %cuid222, align 8, !dbg !6389
  %221 = load %struct.ddg_node*, %struct.ddg_node** %v_node211, align 8, !dbg !6390
  %insn223 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %221, i32 0, i32 1, !dbg !6390
  %222 = load %struct.rtx_def*, %struct.rtx_def** %insn223, align 8, !dbg !6390
  %u224 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %222, i32 0, i32 1, !dbg !6390
  %fld225 = bitcast %union.u* %u224 to [1 x %union.rtunion_def]*, !dbg !6390
  %arrayidx226 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld225, i64 0, i64 0, !dbg !6390
  %rt_int227 = bitcast %union.rtunion_def* %arrayidx226 to i32*, !dbg !6390
  %223 = load i32, i32* %rt_int227, align 8, !dbg !6390
  %call228 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %213, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.58, i64 0, i64 0), i32 %215, i32 %218, i32 %220, i32 %223), !dbg !6391
  br label %if.end229, !dbg !6392

if.end229:                                        ; preds = %if.then214, %for.body210
  %224 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6393
  %elms230 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %224, i32 0, i32 3, !dbg !6393
  %225 = load %struct.ddg_node*, %struct.ddg_node** %v_node211, align 8, !dbg !6393
  %cuid231 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %225, i32 0, i32 0, !dbg !6393
  %226 = load i32, i32* %cuid231, align 8, !dbg !6393
  %div232 = udiv i32 %226, 64, !dbg !6393
  %idxprom233 = zext i32 %div232 to i64, !dbg !6393
  %arrayidx234 = getelementptr inbounds [1 x i64], [1 x i64]* %elms230, i64 0, i64 %idxprom233, !dbg !6393
  %227 = load i64, i64* %arrayidx234, align 8, !dbg !6393
  %228 = load %struct.ddg_node*, %struct.ddg_node** %v_node211, align 8, !dbg !6393
  %cuid235 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %228, i32 0, i32 0, !dbg !6393
  %229 = load i32, i32* %cuid235, align 8, !dbg !6393
  %rem236 = urem i32 %229, 64, !dbg !6393
  %sh_prom237 = zext i32 %rem236 to i64, !dbg !6393
  %shr238 = lshr i64 %227, %sh_prom237, !dbg !6393
  %and239 = and i64 %shr238, 1, !dbg !6393
  %tobool240 = icmp ne i64 %and239, 0, !dbg !6393
  br i1 %tobool240, label %if.then241, label %if.else296, !dbg !6395

if.then241:                                       ; preds = %if.end229
  call void @llvm.dbg.declare(metadata i32* %p_st242, metadata !6396, metadata !DIExpression()), !dbg !6398
  %230 = load %struct.ddg_node*, %struct.ddg_node** %v_node211, align 8, !dbg !6399
  %aux243 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %230, i32 0, i32 7, !dbg !6399
  %info244 = bitcast %union.anon.1* %aux243 to i8**, !dbg !6399
  %231 = load i8*, i8** %info244, align 8, !dbg !6399
  %232 = bitcast i8* %231 to %struct.node_sched_params*, !dbg !6399
  %time245 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %232, i32 0, i32 1, !dbg !6399
  %233 = load i32, i32* %time245, align 4, !dbg !6399
  store i32 %233, i32* %p_st242, align 4, !dbg !6398
  %234 = load i32, i32* %early_start204, align 4, !dbg !6400
  %235 = load i32, i32* %p_st242, align 4, !dbg !6400
  %236 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6400
  %latency246 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %236, i32 0, i32 4, !dbg !6400
  %237 = load i32, i32* %latency246, align 8, !dbg !6400
  %add247 = add nsw i32 %235, %237, !dbg !6400
  %238 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6400
  %distance248 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %238, i32 0, i32 5, !dbg !6400
  %239 = load i32, i32* %distance248, align 4, !dbg !6400
  %240 = load i32, i32* %ii.addr, align 4, !dbg !6400
  %mul249 = mul nsw i32 %239, %240, !dbg !6400
  %sub250 = sub nsw i32 %add247, %mul249, !dbg !6400
  %cmp251 = icmp sgt i32 %234, %sub250, !dbg !6400
  br i1 %cmp251, label %cond.true253, label %cond.false254, !dbg !6400

cond.true253:                                     ; preds = %if.then241
  %241 = load i32, i32* %early_start204, align 4, !dbg !6400
  br label %cond.end260, !dbg !6400

cond.false254:                                    ; preds = %if.then241
  %242 = load i32, i32* %p_st242, align 4, !dbg !6400
  %243 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6400
  %latency255 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %243, i32 0, i32 4, !dbg !6400
  %244 = load i32, i32* %latency255, align 8, !dbg !6400
  %add256 = add nsw i32 %242, %244, !dbg !6400
  %245 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6400
  %distance257 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %245, i32 0, i32 5, !dbg !6400
  %246 = load i32, i32* %distance257, align 4, !dbg !6400
  %247 = load i32, i32* %ii.addr, align 4, !dbg !6400
  %mul258 = mul nsw i32 %246, %247, !dbg !6400
  %sub259 = sub nsw i32 %add256, %mul258, !dbg !6400
  br label %cond.end260, !dbg !6400

cond.end260:                                      ; preds = %cond.false254, %cond.true253
  %cond261 = phi i32 [ %241, %cond.true253 ], [ %sub259, %cond.false254 ], !dbg !6400
  store i32 %cond261, i32* %early_start204, align 4, !dbg !6401
  %248 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6402
  %tobool262 = icmp ne %struct._IO_FILE* %248, null, !dbg !6402
  br i1 %tobool262, label %if.then263, label %if.end266, !dbg !6404

if.then263:                                       ; preds = %cond.end260
  %249 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6405
  %250 = load i32, i32* %p_st242, align 4, !dbg !6406
  %251 = load i32, i32* %early_start204, align 4, !dbg !6407
  %252 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6408
  %latency264 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %252, i32 0, i32 4, !dbg !6409
  %253 = load i32, i32* %latency264, align 8, !dbg !6409
  %call265 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %249, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.59, i64 0, i64 0), i32 %250, i32 %251, i32 %253), !dbg !6410
  br label %if.end266, !dbg !6410

if.end266:                                        ; preds = %if.then263, %cond.end260
  %254 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6411
  %type = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %254, i32 0, i32 2, !dbg !6413
  %255 = load i32, i32* %type, align 8, !dbg !6413
  %cmp267 = icmp eq i32 %255, 0, !dbg !6414
  br i1 %cmp267, label %land.lhs.true269, label %if.end274, !dbg !6415

land.lhs.true269:                                 ; preds = %if.end266
  %256 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6416
  %data_type270 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %256, i32 0, i32 3, !dbg !6417
  %257 = load i32, i32* %data_type270, align 4, !dbg !6417
  %cmp271 = icmp eq i32 %257, 1, !dbg !6418
  br i1 %cmp271, label %if.then273, label %if.end274, !dbg !6419

if.then273:                                       ; preds = %land.lhs.true269
  %258 = load i32, i32* %count_preds, align 4, !dbg !6420
  %inc = add nsw i32 %258, 1, !dbg !6420
  store i32 %inc, i32* %count_preds, align 4, !dbg !6420
  br label %if.end274, !dbg !6421

if.end274:                                        ; preds = %if.then273, %land.lhs.true269, %if.end266
  %259 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6422
  %data_type275 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %259, i32 0, i32 3, !dbg !6424
  %260 = load i32, i32* %data_type275, align 4, !dbg !6424
  %cmp276 = icmp eq i32 %260, 2, !dbg !6425
  br i1 %cmp276, label %if.then278, label %if.end295, !dbg !6426

if.then278:                                       ; preds = %if.end274
  %261 = load i32, i32* %end, align 4, !dbg !6427
  %262 = load %struct.ddg_node*, %struct.ddg_node** %v_node211, align 8, !dbg !6427
  %aux279 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %262, i32 0, i32 7, !dbg !6427
  %info280 = bitcast %union.anon.1* %aux279 to i8**, !dbg !6427
  %263 = load i8*, i8** %info280, align 8, !dbg !6427
  %264 = bitcast i8* %263 to %struct.node_sched_params*, !dbg !6427
  %time281 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %264, i32 0, i32 1, !dbg !6427
  %265 = load i32, i32* %time281, align 4, !dbg !6427
  %266 = load i32, i32* %ii.addr, align 4, !dbg !6427
  %add282 = add nsw i32 %265, %266, !dbg !6427
  %sub283 = sub nsw i32 %add282, 1, !dbg !6427
  %cmp284 = icmp slt i32 %261, %sub283, !dbg !6427
  br i1 %cmp284, label %cond.true286, label %cond.false287, !dbg !6427

cond.true286:                                     ; preds = %if.then278
  %267 = load i32, i32* %end, align 4, !dbg !6427
  br label %cond.end293, !dbg !6427

cond.false287:                                    ; preds = %if.then278
  %268 = load %struct.ddg_node*, %struct.ddg_node** %v_node211, align 8, !dbg !6427
  %aux288 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %268, i32 0, i32 7, !dbg !6427
  %info289 = bitcast %union.anon.1* %aux288 to i8**, !dbg !6427
  %269 = load i8*, i8** %info289, align 8, !dbg !6427
  %270 = bitcast i8* %269 to %struct.node_sched_params*, !dbg !6427
  %time290 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %270, i32 0, i32 1, !dbg !6427
  %271 = load i32, i32* %time290, align 4, !dbg !6427
  %272 = load i32, i32* %ii.addr, align 4, !dbg !6427
  %add291 = add nsw i32 %271, %272, !dbg !6427
  %sub292 = sub nsw i32 %add291, 1, !dbg !6427
  br label %cond.end293, !dbg !6427

cond.end293:                                      ; preds = %cond.false287, %cond.true286
  %cond294 = phi i32 [ %267, %cond.true286 ], [ %sub292, %cond.false287 ], !dbg !6427
  store i32 %cond294, i32* %end, align 4, !dbg !6428
  br label %if.end295, !dbg !6429

if.end295:                                        ; preds = %cond.end293, %if.end274
  br label %if.end301, !dbg !6430

if.else296:                                       ; preds = %if.end229
  %273 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6431
  %tobool297 = icmp ne %struct._IO_FILE* %273, null, !dbg !6431
  br i1 %tobool297, label %if.then298, label %if.end300, !dbg !6433

if.then298:                                       ; preds = %if.else296
  %274 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6434
  %call299 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %274, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.52, i64 0, i64 0)), !dbg !6435
  br label %if.end300, !dbg !6435

if.end300:                                        ; preds = %if.then298, %if.else296
  br label %if.end301

if.end301:                                        ; preds = %if.end300, %if.end295
  br label %for.inc302, !dbg !6436

for.inc302:                                       ; preds = %if.end301
  %275 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6437
  %next_in303 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %275, i32 0, i32 6, !dbg !6438
  %276 = load %struct.ddg_edge*, %struct.ddg_edge** %next_in303, align 8, !dbg !6438
  store %struct.ddg_edge* %276, %struct.ddg_edge** %e, align 8, !dbg !6439
  br label %for.cond207, !dbg !6440, !llvm.loop !6441

for.end304:                                       ; preds = %for.cond207
  %277 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6443
  %out305 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %277, i32 0, i32 4, !dbg !6445
  %278 = load %struct.ddg_edge*, %struct.ddg_edge** %out305, align 8, !dbg !6445
  store %struct.ddg_edge* %278, %struct.ddg_edge** %e, align 8, !dbg !6446
  br label %for.cond306, !dbg !6447

for.cond306:                                      ; preds = %for.inc403, %for.end304
  %279 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6448
  %cmp307 = icmp ne %struct.ddg_edge* %279, null, !dbg !6450
  br i1 %cmp307, label %for.body309, label %for.end405, !dbg !6451

for.body309:                                      ; preds = %for.cond306
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %v_node310, metadata !6452, metadata !DIExpression()), !dbg !6454
  %280 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6455
  %dest311 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %280, i32 0, i32 1, !dbg !6456
  %281 = load %struct.ddg_node*, %struct.ddg_node** %dest311, align 8, !dbg !6456
  store %struct.ddg_node* %281, %struct.ddg_node** %v_node310, align 8, !dbg !6454
  %282 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6457
  %tobool312 = icmp ne %struct._IO_FILE* %282, null, !dbg !6457
  br i1 %tobool312, label %if.then313, label %if.end328, !dbg !6459

if.then313:                                       ; preds = %for.body309
  %283 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6460
  %call314 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %283, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i64 0, i64 0)), !dbg !6462
  %284 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6463
  %285 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6464
  call void @print_ddg_edge(%struct._IO_FILE* %284, %struct.ddg_edge* %285), !dbg !6465
  %286 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6466
  %287 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6467
  %cuid315 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %287, i32 0, i32 0, !dbg !6468
  %288 = load i32, i32* %cuid315, align 8, !dbg !6468
  %289 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6469
  %insn316 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %289, i32 0, i32 1, !dbg !6469
  %290 = load %struct.rtx_def*, %struct.rtx_def** %insn316, align 8, !dbg !6469
  %u317 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %290, i32 0, i32 1, !dbg !6469
  %fld318 = bitcast %union.u* %u317 to [1 x %union.rtunion_def]*, !dbg !6469
  %arrayidx319 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld318, i64 0, i64 0, !dbg !6469
  %rt_int320 = bitcast %union.rtunion_def* %arrayidx319 to i32*, !dbg !6469
  %291 = load i32, i32* %rt_int320, align 8, !dbg !6469
  %292 = load %struct.ddg_node*, %struct.ddg_node** %v_node310, align 8, !dbg !6470
  %cuid321 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %292, i32 0, i32 0, !dbg !6471
  %293 = load i32, i32* %cuid321, align 8, !dbg !6471
  %294 = load %struct.ddg_node*, %struct.ddg_node** %v_node310, align 8, !dbg !6472
  %insn322 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %294, i32 0, i32 1, !dbg !6472
  %295 = load %struct.rtx_def*, %struct.rtx_def** %insn322, align 8, !dbg !6472
  %u323 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %295, i32 0, i32 1, !dbg !6472
  %fld324 = bitcast %union.u* %u323 to [1 x %union.rtunion_def]*, !dbg !6472
  %arrayidx325 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld324, i64 0, i64 0, !dbg !6472
  %rt_int326 = bitcast %union.rtunion_def* %arrayidx325 to i32*, !dbg !6472
  %296 = load i32, i32* %rt_int326, align 8, !dbg !6472
  %call327 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %286, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.60, i64 0, i64 0), i32 %288, i32 %291, i32 %293, i32 %296), !dbg !6473
  br label %if.end328, !dbg !6474

if.end328:                                        ; preds = %if.then313, %for.body309
  %297 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6475
  %elms329 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %297, i32 0, i32 3, !dbg !6475
  %298 = load %struct.ddg_node*, %struct.ddg_node** %v_node310, align 8, !dbg !6475
  %cuid330 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %298, i32 0, i32 0, !dbg !6475
  %299 = load i32, i32* %cuid330, align 8, !dbg !6475
  %div331 = udiv i32 %299, 64, !dbg !6475
  %idxprom332 = zext i32 %div331 to i64, !dbg !6475
  %arrayidx333 = getelementptr inbounds [1 x i64], [1 x i64]* %elms329, i64 0, i64 %idxprom332, !dbg !6475
  %300 = load i64, i64* %arrayidx333, align 8, !dbg !6475
  %301 = load %struct.ddg_node*, %struct.ddg_node** %v_node310, align 8, !dbg !6475
  %cuid334 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %301, i32 0, i32 0, !dbg !6475
  %302 = load i32, i32* %cuid334, align 8, !dbg !6475
  %rem335 = urem i32 %302, 64, !dbg !6475
  %sh_prom336 = zext i32 %rem335 to i64, !dbg !6475
  %shr337 = lshr i64 %300, %sh_prom336, !dbg !6475
  %and338 = and i64 %shr337, 1, !dbg !6475
  %tobool339 = icmp ne i64 %and338, 0, !dbg !6475
  br i1 %tobool339, label %if.then340, label %if.else397, !dbg !6477

if.then340:                                       ; preds = %if.end328
  call void @llvm.dbg.declare(metadata i32* %s_st341, metadata !6478, metadata !DIExpression()), !dbg !6480
  %303 = load %struct.ddg_node*, %struct.ddg_node** %v_node310, align 8, !dbg !6481
  %aux342 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %303, i32 0, i32 7, !dbg !6481
  %info343 = bitcast %union.anon.1* %aux342 to i8**, !dbg !6481
  %304 = load i8*, i8** %info343, align 8, !dbg !6481
  %305 = bitcast i8* %304 to %struct.node_sched_params*, !dbg !6481
  %time344 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %305, i32 0, i32 1, !dbg !6481
  %306 = load i32, i32* %time344, align 4, !dbg !6481
  store i32 %306, i32* %s_st341, align 4, !dbg !6480
  %307 = load i32, i32* %late_start205, align 4, !dbg !6482
  %308 = load i32, i32* %s_st341, align 4, !dbg !6482
  %309 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6482
  %latency345 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %309, i32 0, i32 4, !dbg !6482
  %310 = load i32, i32* %latency345, align 8, !dbg !6482
  %sub346 = sub nsw i32 %308, %310, !dbg !6482
  %311 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6482
  %distance347 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %311, i32 0, i32 5, !dbg !6482
  %312 = load i32, i32* %distance347, align 4, !dbg !6482
  %313 = load i32, i32* %ii.addr, align 4, !dbg !6482
  %mul348 = mul nsw i32 %312, %313, !dbg !6482
  %add349 = add nsw i32 %sub346, %mul348, !dbg !6482
  %cmp350 = icmp slt i32 %307, %add349, !dbg !6482
  br i1 %cmp350, label %cond.true352, label %cond.false353, !dbg !6482

cond.true352:                                     ; preds = %if.then340
  %314 = load i32, i32* %late_start205, align 4, !dbg !6482
  br label %cond.end359, !dbg !6482

cond.false353:                                    ; preds = %if.then340
  %315 = load i32, i32* %s_st341, align 4, !dbg !6482
  %316 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6482
  %latency354 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %316, i32 0, i32 4, !dbg !6482
  %317 = load i32, i32* %latency354, align 8, !dbg !6482
  %sub355 = sub nsw i32 %315, %317, !dbg !6482
  %318 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6482
  %distance356 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %318, i32 0, i32 5, !dbg !6482
  %319 = load i32, i32* %distance356, align 4, !dbg !6482
  %320 = load i32, i32* %ii.addr, align 4, !dbg !6482
  %mul357 = mul nsw i32 %319, %320, !dbg !6482
  %add358 = add nsw i32 %sub355, %mul357, !dbg !6482
  br label %cond.end359, !dbg !6482

cond.end359:                                      ; preds = %cond.false353, %cond.true352
  %cond360 = phi i32 [ %314, %cond.true352 ], [ %add358, %cond.false353 ], !dbg !6482
  store i32 %cond360, i32* %late_start205, align 4, !dbg !6483
  %321 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6484
  %tobool361 = icmp ne %struct._IO_FILE* %321, null, !dbg !6484
  br i1 %tobool361, label %if.then362, label %if.end365, !dbg !6486

if.then362:                                       ; preds = %cond.end359
  %322 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6487
  %323 = load i32, i32* %s_st341, align 4, !dbg !6488
  %324 = load i32, i32* %late_start205, align 4, !dbg !6489
  %325 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6490
  %latency363 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %325, i32 0, i32 4, !dbg !6491
  %326 = load i32, i32* %latency363, align 8, !dbg !6491
  %call364 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %322, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.56, i64 0, i64 0), i32 %323, i32 %324, i32 %326), !dbg !6492
  br label %if.end365, !dbg !6492

if.end365:                                        ; preds = %if.then362, %cond.end359
  %327 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6493
  %type366 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %327, i32 0, i32 2, !dbg !6495
  %328 = load i32, i32* %type366, align 8, !dbg !6495
  %cmp367 = icmp eq i32 %328, 0, !dbg !6496
  br i1 %cmp367, label %land.lhs.true369, label %if.end375, !dbg !6497

land.lhs.true369:                                 ; preds = %if.end365
  %329 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6498
  %data_type370 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %329, i32 0, i32 3, !dbg !6499
  %330 = load i32, i32* %data_type370, align 4, !dbg !6499
  %cmp371 = icmp eq i32 %330, 1, !dbg !6500
  br i1 %cmp371, label %if.then373, label %if.end375, !dbg !6501

if.then373:                                       ; preds = %land.lhs.true369
  %331 = load i32, i32* %count_succs, align 4, !dbg !6502
  %inc374 = add nsw i32 %331, 1, !dbg !6502
  store i32 %inc374, i32* %count_succs, align 4, !dbg !6502
  br label %if.end375, !dbg !6503

if.end375:                                        ; preds = %if.then373, %land.lhs.true369, %if.end365
  %332 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6504
  %data_type376 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %332, i32 0, i32 3, !dbg !6506
  %333 = load i32, i32* %data_type376, align 4, !dbg !6506
  %cmp377 = icmp eq i32 %333, 2, !dbg !6507
  br i1 %cmp377, label %if.then379, label %if.end396, !dbg !6508

if.then379:                                       ; preds = %if.end375
  %334 = load i32, i32* %start, align 4, !dbg !6509
  %335 = load %struct.ddg_node*, %struct.ddg_node** %v_node310, align 8, !dbg !6509
  %aux380 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %335, i32 0, i32 7, !dbg !6509
  %info381 = bitcast %union.anon.1* %aux380 to i8**, !dbg !6509
  %336 = load i8*, i8** %info381, align 8, !dbg !6509
  %337 = bitcast i8* %336 to %struct.node_sched_params*, !dbg !6509
  %time382 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %337, i32 0, i32 1, !dbg !6509
  %338 = load i32, i32* %time382, align 4, !dbg !6509
  %339 = load i32, i32* %ii.addr, align 4, !dbg !6509
  %sub383 = sub nsw i32 %338, %339, !dbg !6509
  %add384 = add nsw i32 %sub383, 1, !dbg !6509
  %cmp385 = icmp sgt i32 %334, %add384, !dbg !6509
  br i1 %cmp385, label %cond.true387, label %cond.false388, !dbg !6509

cond.true387:                                     ; preds = %if.then379
  %340 = load i32, i32* %start, align 4, !dbg !6509
  br label %cond.end394, !dbg !6509

cond.false388:                                    ; preds = %if.then379
  %341 = load %struct.ddg_node*, %struct.ddg_node** %v_node310, align 8, !dbg !6509
  %aux389 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %341, i32 0, i32 7, !dbg !6509
  %info390 = bitcast %union.anon.1* %aux389 to i8**, !dbg !6509
  %342 = load i8*, i8** %info390, align 8, !dbg !6509
  %343 = bitcast i8* %342 to %struct.node_sched_params*, !dbg !6509
  %time391 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %343, i32 0, i32 1, !dbg !6509
  %344 = load i32, i32* %time391, align 4, !dbg !6509
  %345 = load i32, i32* %ii.addr, align 4, !dbg !6509
  %sub392 = sub nsw i32 %344, %345, !dbg !6509
  %add393 = add nsw i32 %sub392, 1, !dbg !6509
  br label %cond.end394, !dbg !6509

cond.end394:                                      ; preds = %cond.false388, %cond.true387
  %cond395 = phi i32 [ %340, %cond.true387 ], [ %add393, %cond.false388 ], !dbg !6509
  store i32 %cond395, i32* %start, align 4, !dbg !6510
  br label %if.end396, !dbg !6511

if.end396:                                        ; preds = %cond.end394, %if.end375
  br label %if.end402, !dbg !6512

if.else397:                                       ; preds = %if.end328
  %346 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6513
  %tobool398 = icmp ne %struct._IO_FILE* %346, null, !dbg !6513
  br i1 %tobool398, label %if.then399, label %if.end401, !dbg !6515

if.then399:                                       ; preds = %if.else397
  %347 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6516
  %call400 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %347, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.52, i64 0, i64 0)), !dbg !6517
  br label %if.end401, !dbg !6517

if.end401:                                        ; preds = %if.then399, %if.else397
  br label %if.end402

if.end402:                                        ; preds = %if.end401, %if.end396
  br label %for.inc403, !dbg !6518

for.inc403:                                       ; preds = %if.end402
  %348 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6519
  %next_out404 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %348, i32 0, i32 7, !dbg !6520
  %349 = load %struct.ddg_edge*, %struct.ddg_edge** %next_out404, align 8, !dbg !6520
  store %struct.ddg_edge* %349, %struct.ddg_edge** %e, align 8, !dbg !6521
  br label %for.cond306, !dbg !6522, !llvm.loop !6523

for.end405:                                       ; preds = %for.cond306
  %350 = load i32, i32* %start, align 4, !dbg !6525
  %351 = load i32, i32* %early_start204, align 4, !dbg !6525
  %cmp406 = icmp sgt i32 %350, %351, !dbg !6525
  br i1 %cmp406, label %cond.true408, label %cond.false409, !dbg !6525

cond.true408:                                     ; preds = %for.end405
  %352 = load i32, i32* %start, align 4, !dbg !6525
  br label %cond.end410, !dbg !6525

cond.false409:                                    ; preds = %for.end405
  %353 = load i32, i32* %early_start204, align 4, !dbg !6525
  br label %cond.end410, !dbg !6525

cond.end410:                                      ; preds = %cond.false409, %cond.true408
  %cond411 = phi i32 [ %352, %cond.true408 ], [ %353, %cond.false409 ], !dbg !6525
  store i32 %cond411, i32* %start, align 4, !dbg !6526
  %354 = load i32, i32* %end, align 4, !dbg !6527
  %355 = load i32, i32* %early_start204, align 4, !dbg !6527
  %356 = load i32, i32* %ii.addr, align 4, !dbg !6527
  %add412 = add nsw i32 %355, %356, !dbg !6527
  %357 = load i32, i32* %late_start205, align 4, !dbg !6527
  %add413 = add nsw i32 %357, 1, !dbg !6527
  %cmp414 = icmp slt i32 %add412, %add413, !dbg !6527
  br i1 %cmp414, label %cond.true416, label %cond.false418, !dbg !6527

cond.true416:                                     ; preds = %cond.end410
  %358 = load i32, i32* %early_start204, align 4, !dbg !6527
  %359 = load i32, i32* %ii.addr, align 4, !dbg !6527
  %add417 = add nsw i32 %358, %359, !dbg !6527
  br label %cond.end420, !dbg !6527

cond.false418:                                    ; preds = %cond.end410
  %360 = load i32, i32* %late_start205, align 4, !dbg !6527
  %add419 = add nsw i32 %360, 1, !dbg !6527
  br label %cond.end420, !dbg !6527

cond.end420:                                      ; preds = %cond.false418, %cond.true416
  %cond421 = phi i32 [ %add417, %cond.true416 ], [ %add419, %cond.false418 ], !dbg !6527
  %cmp422 = icmp slt i32 %354, %cond421, !dbg !6527
  br i1 %cmp422, label %cond.true424, label %cond.false425, !dbg !6527

cond.true424:                                     ; preds = %cond.end420
  %361 = load i32, i32* %end, align 4, !dbg !6527
  br label %cond.end436, !dbg !6527

cond.false425:                                    ; preds = %cond.end420
  %362 = load i32, i32* %early_start204, align 4, !dbg !6527
  %363 = load i32, i32* %ii.addr, align 4, !dbg !6527
  %add426 = add nsw i32 %362, %363, !dbg !6527
  %364 = load i32, i32* %late_start205, align 4, !dbg !6527
  %add427 = add nsw i32 %364, 1, !dbg !6527
  %cmp428 = icmp slt i32 %add426, %add427, !dbg !6527
  br i1 %cmp428, label %cond.true430, label %cond.false432, !dbg !6527

cond.true430:                                     ; preds = %cond.false425
  %365 = load i32, i32* %early_start204, align 4, !dbg !6527
  %366 = load i32, i32* %ii.addr, align 4, !dbg !6527
  %add431 = add nsw i32 %365, %366, !dbg !6527
  br label %cond.end434, !dbg !6527

cond.false432:                                    ; preds = %cond.false425
  %367 = load i32, i32* %late_start205, align 4, !dbg !6527
  %add433 = add nsw i32 %367, 1, !dbg !6527
  br label %cond.end434, !dbg !6527

cond.end434:                                      ; preds = %cond.false432, %cond.true430
  %cond435 = phi i32 [ %add431, %cond.true430 ], [ %add433, %cond.false432 ], !dbg !6527
  br label %cond.end436, !dbg !6527

cond.end436:                                      ; preds = %cond.end434, %cond.true424
  %cond437 = phi i32 [ %361, %cond.true424 ], [ %cond435, %cond.end434 ], !dbg !6527
  store i32 %cond437, i32* %end, align 4, !dbg !6528
  store i32 1, i32* %step, align 4, !dbg !6529
  %368 = load i32, i32* %count_succs, align 4, !dbg !6530
  %369 = load i32, i32* %count_preds, align 4, !dbg !6532
  %cmp438 = icmp sge i32 %368, %369, !dbg !6533
  br i1 %cmp438, label %if.then440, label %if.end443, !dbg !6534

if.then440:                                       ; preds = %cond.end436
  call void @llvm.dbg.declare(metadata i32* %old_start, metadata !6535, metadata !DIExpression()), !dbg !6537
  %370 = load i32, i32* %start, align 4, !dbg !6538
  store i32 %370, i32* %old_start, align 4, !dbg !6537
  %371 = load i32, i32* %end, align 4, !dbg !6539
  %sub441 = sub nsw i32 %371, 1, !dbg !6540
  store i32 %sub441, i32* %start, align 4, !dbg !6541
  %372 = load i32, i32* %old_start, align 4, !dbg !6542
  %sub442 = sub nsw i32 %372, 1, !dbg !6543
  store i32 %sub442, i32* %end, align 4, !dbg !6544
  store i32 -1, i32* %step, align 4, !dbg !6545
  br label %if.end443, !dbg !6546

if.end443:                                        ; preds = %if.then440, %cond.end436
  br label %if.end448, !dbg !6547

if.else444:                                       ; preds = %land.lhs.true201, %if.else199
  %373 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !6548
  %aux445 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %373, i32 0, i32 7, !dbg !6548
  %info446 = bitcast %union.anon.1* %aux445 to i8**, !dbg !6548
  %374 = load i8*, i8** %info446, align 8, !dbg !6548
  %375 = bitcast i8* %374 to %struct.node_sched_params*, !dbg !6548
  %asap = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %375, i32 0, i32 0, !dbg !6548
  %376 = load i32, i32* %asap, align 8, !dbg !6548
  store i32 %376, i32* %start, align 4, !dbg !6550
  %377 = load i32, i32* %start, align 4, !dbg !6551
  %378 = load i32, i32* %ii.addr, align 4, !dbg !6552
  %add447 = add nsw i32 %377, %378, !dbg !6553
  store i32 %add447, i32* %end, align 4, !dbg !6554
  store i32 1, i32* %step, align 4, !dbg !6555
  br label %if.end448

if.end448:                                        ; preds = %if.else444, %if.end443
  br label %if.end449

if.end449:                                        ; preds = %if.end448, %if.end198
  br label %if.end450

if.end450:                                        ; preds = %if.end449, %if.end84
  %379 = load i32, i32* %start, align 4, !dbg !6556
  %380 = load i32*, i32** %start_p.addr, align 8, !dbg !6557
  store i32 %379, i32* %380, align 4, !dbg !6558
  %381 = load i32, i32* %step, align 4, !dbg !6559
  %382 = load i32*, i32** %step_p.addr, align 8, !dbg !6560
  store i32 %381, i32* %382, align 4, !dbg !6561
  %383 = load i32, i32* %end, align 4, !dbg !6562
  %384 = load i32*, i32** %end_p.addr, align 8, !dbg !6563
  store i32 %383, i32* %384, align 4, !dbg !6564
  %385 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %psp, align 8, !dbg !6565
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %385, i32 0, i32 0, !dbg !6565
  %386 = load i8*, i8** %popcount, align 8, !dbg !6565
  call void @free(i8* %386), !dbg !6565
  %387 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %psp, align 8, !dbg !6565
  %388 = bitcast %struct.simple_bitmap_def* %387 to i8*, !dbg !6565
  call void @free(i8* %388), !dbg !6565
  %389 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %pss, align 8, !dbg !6566
  %popcount451 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %389, i32 0, i32 0, !dbg !6566
  %390 = load i8*, i8** %popcount451, align 8, !dbg !6566
  call void @free(i8* %390), !dbg !6566
  %391 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %pss, align 8, !dbg !6566
  %392 = bitcast %struct.simple_bitmap_def* %391 to i8*, !dbg !6566
  call void @free(i8* %392), !dbg !6566
  %393 = load i32, i32* %start, align 4, !dbg !6567
  %394 = load i32, i32* %end, align 4, !dbg !6569
  %cmp452 = icmp sge i32 %393, %394, !dbg !6570
  br i1 %cmp452, label %land.lhs.true454, label %lor.lhs.false, !dbg !6571

land.lhs.true454:                                 ; preds = %if.end450
  %395 = load i32, i32* %step, align 4, !dbg !6572
  %cmp455 = icmp eq i32 %395, 1, !dbg !6573
  br i1 %cmp455, label %if.then462, label %lor.lhs.false, !dbg !6574

lor.lhs.false:                                    ; preds = %land.lhs.true454, %if.end450
  %396 = load i32, i32* %start, align 4, !dbg !6575
  %397 = load i32, i32* %end, align 4, !dbg !6576
  %cmp457 = icmp sle i32 %396, %397, !dbg !6577
  br i1 %cmp457, label %land.lhs.true459, label %if.end467, !dbg !6578

land.lhs.true459:                                 ; preds = %lor.lhs.false
  %398 = load i32, i32* %step, align 4, !dbg !6579
  %cmp460 = icmp eq i32 %398, -1, !dbg !6580
  br i1 %cmp460, label %if.then462, label %if.end467, !dbg !6581

if.then462:                                       ; preds = %land.lhs.true459, %land.lhs.true454
  %399 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6582
  %tobool463 = icmp ne %struct._IO_FILE* %399, null, !dbg !6582
  br i1 %tobool463, label %if.then464, label %if.end466, !dbg !6585

if.then464:                                       ; preds = %if.then462
  %400 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6586
  %401 = load i32, i32* %start, align 4, !dbg !6587
  %402 = load i32, i32* %end, align 4, !dbg !6588
  %403 = load i32, i32* %step, align 4, !dbg !6589
  %call465 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %400, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.61, i64 0, i64 0), i32 %401, i32 %402, i32 %403), !dbg !6590
  br label %if.end466, !dbg !6590

if.end466:                                        ; preds = %if.then464, %if.then462
  store i32 -1, i32* %retval, align 4, !dbg !6591
  br label %return, !dbg !6591

if.end467:                                        ; preds = %land.lhs.true459, %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !6592
  br label %return, !dbg !6592

return:                                           ; preds = %if.end467, %if.end466
  %404 = load i32, i32* %retval, align 4, !dbg !6593
  ret i32 %404, !dbg !6593
}

; Function Attrs: noinline nounwind uwtable
define internal void @calculate_must_precede_follow(%struct.ddg_node* %u_node, i32 %start, i32 %end, i32 %step, i32 %ii, %struct.simple_bitmap_def* %sched_nodes, %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def* %must_follow) #0 !dbg !6594 {
entry:
  %u_node.addr = alloca %struct.ddg_node*, align 8
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %ii.addr = alloca i32, align 4
  %sched_nodes.addr = alloca %struct.simple_bitmap_def*, align 8
  %must_precede.addr = alloca %struct.simple_bitmap_def*, align 8
  %must_follow.addr = alloca %struct.simple_bitmap_def*, align 8
  %e = alloca %struct.ddg_edge*, align 8
  %first_cycle_in_window = alloca i32, align 4
  %last_cycle_in_window = alloca i32, align 4
  store %struct.ddg_node* %u_node, %struct.ddg_node** %u_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node.addr, metadata !6597, metadata !DIExpression()), !dbg !6598
  store i32 %start, i32* %start.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start.addr, metadata !6599, metadata !DIExpression()), !dbg !6600
  store i32 %end, i32* %end.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %end.addr, metadata !6601, metadata !DIExpression()), !dbg !6602
  store i32 %step, i32* %step.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %step.addr, metadata !6603, metadata !DIExpression()), !dbg !6604
  store i32 %ii, i32* %ii.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ii.addr, metadata !6605, metadata !DIExpression()), !dbg !6606
  store %struct.simple_bitmap_def* %sched_nodes, %struct.simple_bitmap_def** %sched_nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %sched_nodes.addr, metadata !6607, metadata !DIExpression()), !dbg !6608
  store %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def** %must_precede.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_precede.addr, metadata !6609, metadata !DIExpression()), !dbg !6610
  store %struct.simple_bitmap_def* %must_follow, %struct.simple_bitmap_def** %must_follow.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_follow.addr, metadata !6611, metadata !DIExpression()), !dbg !6612
  call void @llvm.dbg.declare(metadata %struct.ddg_edge** %e, metadata !6613, metadata !DIExpression()), !dbg !6614
  call void @llvm.dbg.declare(metadata i32* %first_cycle_in_window, metadata !6615, metadata !DIExpression()), !dbg !6616
  call void @llvm.dbg.declare(metadata i32* %last_cycle_in_window, metadata !6617, metadata !DIExpression()), !dbg !6618
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede.addr, align 8, !dbg !6619
  %tobool = icmp ne %struct.simple_bitmap_def* %0, null, !dbg !6619
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6619

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !6619
  %tobool1 = icmp ne %struct.simple_bitmap_def* %1, null, !dbg !6619
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !6619

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 1618, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6619
  br label %cond.end, !dbg !6619

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6619

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6619
  %2 = load i32, i32* %step.addr, align 4, !dbg !6620
  %cmp = icmp eq i32 %2, 1, !dbg !6621
  br i1 %cmp, label %cond.true2, label %cond.false3, !dbg !6622

cond.true2:                                       ; preds = %cond.end
  %3 = load i32, i32* %start.addr, align 4, !dbg !6623
  br label %cond.end4, !dbg !6622

cond.false3:                                      ; preds = %cond.end
  %4 = load i32, i32* %end.addr, align 4, !dbg !6624
  %5 = load i32, i32* %step.addr, align 4, !dbg !6625
  %sub = sub nsw i32 %4, %5, !dbg !6626
  br label %cond.end4, !dbg !6622

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ %3, %cond.true2 ], [ %sub, %cond.false3 ], !dbg !6622
  store i32 %cond5, i32* %first_cycle_in_window, align 4, !dbg !6627
  %6 = load i32, i32* %step.addr, align 4, !dbg !6628
  %cmp6 = icmp eq i32 %6, 1, !dbg !6629
  br i1 %cmp6, label %cond.true7, label %cond.false9, !dbg !6630

cond.true7:                                       ; preds = %cond.end4
  %7 = load i32, i32* %end.addr, align 4, !dbg !6631
  %8 = load i32, i32* %step.addr, align 4, !dbg !6632
  %sub8 = sub nsw i32 %7, %8, !dbg !6633
  br label %cond.end10, !dbg !6630

cond.false9:                                      ; preds = %cond.end4
  %9 = load i32, i32* %start.addr, align 4, !dbg !6634
  br label %cond.end10, !dbg !6630

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi i32 [ %sub8, %cond.true7 ], [ %9, %cond.false9 ], !dbg !6630
  store i32 %cond11, i32* %last_cycle_in_window, align 4, !dbg !6635
  %10 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede.addr, align 8, !dbg !6636
  call void @sbitmap_zero(%struct.simple_bitmap_def* %10), !dbg !6637
  %11 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !6638
  call void @sbitmap_zero(%struct.simple_bitmap_def* %11), !dbg !6639
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6640
  %tobool12 = icmp ne %struct._IO_FILE* %12, null, !dbg !6640
  br i1 %tobool12, label %if.then, label %if.end, !dbg !6642

if.then:                                          ; preds = %cond.end10
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6643
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)), !dbg !6644
  br label %if.end, !dbg !6644

if.end:                                           ; preds = %if.then, %cond.end10
  %14 = load %struct.ddg_node*, %struct.ddg_node** %u_node.addr, align 8, !dbg !6645
  %in = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %14, i32 0, i32 3, !dbg !6647
  %15 = load %struct.ddg_edge*, %struct.ddg_edge** %in, align 8, !dbg !6647
  store %struct.ddg_edge* %15, %struct.ddg_edge** %e, align 8, !dbg !6648
  br label %for.cond, !dbg !6649

for.cond:                                         ; preds = %for.inc, %if.end
  %16 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6650
  %cmp13 = icmp ne %struct.ddg_edge* %16, null, !dbg !6652
  br i1 %cmp13, label %for.body, label %for.end, !dbg !6653

for.body:                                         ; preds = %for.cond
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6654
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %17, i32 0, i32 3, !dbg !6654
  %18 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6654
  %src = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %18, i32 0, i32 0, !dbg !6654
  %19 = load %struct.ddg_node*, %struct.ddg_node** %src, align 8, !dbg !6654
  %cuid = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %19, i32 0, i32 0, !dbg !6654
  %20 = load i32, i32* %cuid, align 8, !dbg !6654
  %div = udiv i32 %20, 64, !dbg !6654
  %idxprom = zext i32 %div to i64, !dbg !6654
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6654
  %21 = load i64, i64* %arrayidx, align 8, !dbg !6654
  %22 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6654
  %src14 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %22, i32 0, i32 0, !dbg !6654
  %23 = load %struct.ddg_node*, %struct.ddg_node** %src14, align 8, !dbg !6654
  %cuid15 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %23, i32 0, i32 0, !dbg !6654
  %24 = load i32, i32* %cuid15, align 8, !dbg !6654
  %rem = urem i32 %24, 64, !dbg !6654
  %sh_prom = zext i32 %rem to i64, !dbg !6654
  %shr = lshr i64 %21, %sh_prom, !dbg !6654
  %and = and i64 %shr, 1, !dbg !6654
  %tobool16 = icmp ne i64 %and, 0, !dbg !6654
  br i1 %tobool16, label %land.lhs.true17, label %if.end30, !dbg !6656

land.lhs.true17:                                  ; preds = %for.body
  %25 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6657
  %src18 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %25, i32 0, i32 0, !dbg !6657
  %26 = load %struct.ddg_node*, %struct.ddg_node** %src18, align 8, !dbg !6657
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %26, i32 0, i32 7, !dbg !6657
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !6657
  %27 = load i8*, i8** %info, align 8, !dbg !6657
  %28 = bitcast i8* %27 to %struct.node_sched_params*, !dbg !6657
  %time = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %28, i32 0, i32 1, !dbg !6657
  %29 = load i32, i32* %time, align 4, !dbg !6657
  %30 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6658
  %distance = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %30, i32 0, i32 5, !dbg !6659
  %31 = load i32, i32* %distance, align 4, !dbg !6659
  %32 = load i32, i32* %ii.addr, align 4, !dbg !6660
  %mul = mul nsw i32 %31, %32, !dbg !6661
  %sub19 = sub nsw i32 %29, %mul, !dbg !6662
  %33 = load i32, i32* %first_cycle_in_window, align 4, !dbg !6663
  %cmp20 = icmp eq i32 %sub19, %33, !dbg !6664
  br i1 %cmp20, label %if.then21, label %if.end30, !dbg !6665

if.then21:                                        ; preds = %land.lhs.true17
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6666
  %tobool22 = icmp ne %struct._IO_FILE* %34, null, !dbg !6666
  br i1 %tobool22, label %if.then23, label %if.end27, !dbg !6669

if.then23:                                        ; preds = %if.then21
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6670
  %36 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6671
  %src24 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %36, i32 0, i32 0, !dbg !6672
  %37 = load %struct.ddg_node*, %struct.ddg_node** %src24, align 8, !dbg !6672
  %cuid25 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %37, i32 0, i32 0, !dbg !6673
  %38 = load i32, i32* %cuid25, align 8, !dbg !6673
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.45, i64 0, i64 0), i32 %38), !dbg !6674
  br label %if.end27, !dbg !6674

if.end27:                                         ; preds = %if.then23, %if.then21
  %39 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede.addr, align 8, !dbg !6675
  %40 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6676
  %src28 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %40, i32 0, i32 0, !dbg !6677
  %41 = load %struct.ddg_node*, %struct.ddg_node** %src28, align 8, !dbg !6677
  %cuid29 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %41, i32 0, i32 0, !dbg !6678
  %42 = load i32, i32* %cuid29, align 8, !dbg !6678
  call void @SET_BIT(%struct.simple_bitmap_def* %39, i32 %42), !dbg !6679
  br label %if.end30, !dbg !6680

if.end30:                                         ; preds = %if.end27, %land.lhs.true17, %for.body
  br label %for.inc, !dbg !6681

for.inc:                                          ; preds = %if.end30
  %43 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6682
  %next_in = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %43, i32 0, i32 6, !dbg !6683
  %44 = load %struct.ddg_edge*, %struct.ddg_edge** %next_in, align 8, !dbg !6683
  store %struct.ddg_edge* %44, %struct.ddg_edge** %e, align 8, !dbg !6684
  br label %for.cond, !dbg !6685, !llvm.loop !6686

for.end:                                          ; preds = %for.cond
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6688
  %tobool31 = icmp ne %struct._IO_FILE* %45, null, !dbg !6688
  br i1 %tobool31, label %if.then32, label %if.end34, !dbg !6690

if.then32:                                        ; preds = %for.end
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6691
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.63, i64 0, i64 0)), !dbg !6692
  br label %if.end34, !dbg !6692

if.end34:                                         ; preds = %if.then32, %for.end
  %47 = load %struct.ddg_node*, %struct.ddg_node** %u_node.addr, align 8, !dbg !6693
  %out = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %47, i32 0, i32 4, !dbg !6695
  %48 = load %struct.ddg_edge*, %struct.ddg_edge** %out, align 8, !dbg !6695
  store %struct.ddg_edge* %48, %struct.ddg_edge** %e, align 8, !dbg !6696
  br label %for.cond35, !dbg !6697

for.cond35:                                       ; preds = %for.inc68, %if.end34
  %49 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6698
  %cmp36 = icmp ne %struct.ddg_edge* %49, null, !dbg !6700
  br i1 %cmp36, label %for.body37, label %for.end69, !dbg !6701

for.body37:                                       ; preds = %for.cond35
  %50 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6702
  %elms38 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %50, i32 0, i32 3, !dbg !6702
  %51 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6702
  %dest = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %51, i32 0, i32 1, !dbg !6702
  %52 = load %struct.ddg_node*, %struct.ddg_node** %dest, align 8, !dbg !6702
  %cuid39 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %52, i32 0, i32 0, !dbg !6702
  %53 = load i32, i32* %cuid39, align 8, !dbg !6702
  %div40 = udiv i32 %53, 64, !dbg !6702
  %idxprom41 = zext i32 %div40 to i64, !dbg !6702
  %arrayidx42 = getelementptr inbounds [1 x i64], [1 x i64]* %elms38, i64 0, i64 %idxprom41, !dbg !6702
  %54 = load i64, i64* %arrayidx42, align 8, !dbg !6702
  %55 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6702
  %dest43 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %55, i32 0, i32 1, !dbg !6702
  %56 = load %struct.ddg_node*, %struct.ddg_node** %dest43, align 8, !dbg !6702
  %cuid44 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %56, i32 0, i32 0, !dbg !6702
  %57 = load i32, i32* %cuid44, align 8, !dbg !6702
  %rem45 = urem i32 %57, 64, !dbg !6702
  %sh_prom46 = zext i32 %rem45 to i64, !dbg !6702
  %shr47 = lshr i64 %54, %sh_prom46, !dbg !6702
  %and48 = and i64 %shr47, 1, !dbg !6702
  %tobool49 = icmp ne i64 %and48, 0, !dbg !6702
  br i1 %tobool49, label %land.lhs.true50, label %if.end67, !dbg !6704

land.lhs.true50:                                  ; preds = %for.body37
  %58 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6705
  %dest51 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %58, i32 0, i32 1, !dbg !6705
  %59 = load %struct.ddg_node*, %struct.ddg_node** %dest51, align 8, !dbg !6705
  %aux52 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %59, i32 0, i32 7, !dbg !6705
  %info53 = bitcast %union.anon.1* %aux52 to i8**, !dbg !6705
  %60 = load i8*, i8** %info53, align 8, !dbg !6705
  %61 = bitcast i8* %60 to %struct.node_sched_params*, !dbg !6705
  %time54 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %61, i32 0, i32 1, !dbg !6705
  %62 = load i32, i32* %time54, align 4, !dbg !6705
  %63 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6706
  %distance55 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %63, i32 0, i32 5, !dbg !6707
  %64 = load i32, i32* %distance55, align 4, !dbg !6707
  %65 = load i32, i32* %ii.addr, align 4, !dbg !6708
  %mul56 = mul nsw i32 %64, %65, !dbg !6709
  %add = add nsw i32 %62, %mul56, !dbg !6710
  %66 = load i32, i32* %last_cycle_in_window, align 4, !dbg !6711
  %cmp57 = icmp eq i32 %add, %66, !dbg !6712
  br i1 %cmp57, label %if.then58, label %if.end67, !dbg !6713

if.then58:                                        ; preds = %land.lhs.true50
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6714
  %tobool59 = icmp ne %struct._IO_FILE* %67, null, !dbg !6714
  br i1 %tobool59, label %if.then60, label %if.end64, !dbg !6717

if.then60:                                        ; preds = %if.then58
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6718
  %69 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6719
  %dest61 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %69, i32 0, i32 1, !dbg !6720
  %70 = load %struct.ddg_node*, %struct.ddg_node** %dest61, align 8, !dbg !6720
  %cuid62 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %70, i32 0, i32 0, !dbg !6721
  %71 = load i32, i32* %cuid62, align 8, !dbg !6721
  %call63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.45, i64 0, i64 0), i32 %71), !dbg !6722
  br label %if.end64, !dbg !6722

if.end64:                                         ; preds = %if.then60, %if.then58
  %72 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !6723
  %73 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6724
  %dest65 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %73, i32 0, i32 1, !dbg !6725
  %74 = load %struct.ddg_node*, %struct.ddg_node** %dest65, align 8, !dbg !6725
  %cuid66 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %74, i32 0, i32 0, !dbg !6726
  %75 = load i32, i32* %cuid66, align 8, !dbg !6726
  call void @SET_BIT(%struct.simple_bitmap_def* %72, i32 %75), !dbg !6727
  br label %if.end67, !dbg !6728

if.end67:                                         ; preds = %if.end64, %land.lhs.true50, %for.body37
  br label %for.inc68, !dbg !6729

for.inc68:                                        ; preds = %if.end67
  %76 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6730
  %next_out = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %76, i32 0, i32 7, !dbg !6731
  %77 = load %struct.ddg_edge*, %struct.ddg_edge** %next_out, align 8, !dbg !6731
  store %struct.ddg_edge* %77, %struct.ddg_edge** %e, align 8, !dbg !6732
  br label %for.cond35, !dbg !6733, !llvm.loop !6734

for.end69:                                        ; preds = %for.cond35
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6736
  %tobool70 = icmp ne %struct._IO_FILE* %78, null, !dbg !6736
  br i1 %tobool70, label %if.then71, label %if.end73, !dbg !6738

if.then71:                                        ; preds = %for.end69
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6739
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !6740
  br label %if.end73, !dbg !6740

if.end73:                                         ; preds = %if.then71, %for.end69
  ret void, !dbg !6741
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_scheduling_node_in_cycle(%struct.partial_schedule* %ps, %struct.ddg_node* %u_node, i32 %u, i32 %cycle, %struct.simple_bitmap_def* %sched_nodes, i32* %num_splits, %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def* %must_follow) #0 !dbg !6742 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %u_node.addr = alloca %struct.ddg_node*, align 8
  %u.addr = alloca i32, align 4
  %cycle.addr = alloca i32, align 4
  %sched_nodes.addr = alloca %struct.simple_bitmap_def*, align 8
  %num_splits.addr = alloca i32*, align 8
  %must_precede.addr = alloca %struct.simple_bitmap_def*, align 8
  %must_follow.addr = alloca %struct.simple_bitmap_def*, align 8
  %psi = alloca %struct.ps_insn*, align 8
  %success = alloca i8, align 1
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !6745, metadata !DIExpression()), !dbg !6746
  store %struct.ddg_node* %u_node, %struct.ddg_node** %u_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node.addr, metadata !6747, metadata !DIExpression()), !dbg !6748
  store i32 %u, i32* %u.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %u.addr, metadata !6749, metadata !DIExpression()), !dbg !6750
  store i32 %cycle, i32* %cycle.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cycle.addr, metadata !6751, metadata !DIExpression()), !dbg !6752
  store %struct.simple_bitmap_def* %sched_nodes, %struct.simple_bitmap_def** %sched_nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %sched_nodes.addr, metadata !6753, metadata !DIExpression()), !dbg !6754
  store i32* %num_splits, i32** %num_splits.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num_splits.addr, metadata !6755, metadata !DIExpression()), !dbg !6756
  store %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def** %must_precede.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_precede.addr, metadata !6757, metadata !DIExpression()), !dbg !6758
  store %struct.simple_bitmap_def* %must_follow, %struct.simple_bitmap_def** %must_follow.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_follow.addr, metadata !6759, metadata !DIExpression()), !dbg !6760
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %psi, metadata !6761, metadata !DIExpression()), !dbg !6762
  call void @llvm.dbg.declare(metadata i8* %success, metadata !6763, metadata !DIExpression()), !dbg !6764
  store i8 0, i8* %success, align 1, !dbg !6764
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6765
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6766
  call void @verify_partial_schedule(%struct.partial_schedule* %0, %struct.simple_bitmap_def* %1), !dbg !6767
  %2 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6768
  %3 = load %struct.ddg_node*, %struct.ddg_node** %u_node.addr, align 8, !dbg !6769
  %4 = load i32, i32* %cycle.addr, align 4, !dbg !6770
  %5 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede.addr, align 8, !dbg !6771
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !6772
  %call = call %struct.ps_insn* @ps_add_node_check_conflicts(%struct.partial_schedule* %2, %struct.ddg_node* %3, i32 %4, %struct.simple_bitmap_def* %5, %struct.simple_bitmap_def* %6), !dbg !6773
  store %struct.ps_insn* %call, %struct.ps_insn** %psi, align 8, !dbg !6774
  %7 = load %struct.ps_insn*, %struct.ps_insn** %psi, align 8, !dbg !6775
  %tobool = icmp ne %struct.ps_insn* %7, null, !dbg !6775
  br i1 %tobool, label %if.then, label %if.end4, !dbg !6777

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %cycle.addr, align 4, !dbg !6778
  %9 = load %struct.ddg_node*, %struct.ddg_node** %u_node.addr, align 8, !dbg !6780
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %9, i32 0, i32 7, !dbg !6780
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !6780
  %10 = load i8*, i8** %info, align 8, !dbg !6780
  %11 = bitcast i8* %10 to %struct.node_sched_params*, !dbg !6780
  %time = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %11, i32 0, i32 1, !dbg !6780
  store i32 %8, i32* %time, align 4, !dbg !6781
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6782
  %13 = load i32, i32* %u.addr, align 4, !dbg !6783
  call void @SET_BIT(%struct.simple_bitmap_def* %12, i32 %13), !dbg !6784
  store i8 1, i8* %success, align 1, !dbg !6785
  %14 = load i32*, i32** %num_splits.addr, align 8, !dbg !6786
  store i32 0, i32* %14, align 4, !dbg !6787
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6788
  %tobool1 = icmp ne %struct._IO_FILE* %15, null, !dbg !6788
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !6790

if.then2:                                         ; preds = %if.then
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6791
  %17 = load i32, i32* %cycle.addr, align 4, !dbg !6792
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0), i32 %17), !dbg !6793
  br label %if.end, !dbg !6793

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end4, !dbg !6794

if.end4:                                          ; preds = %if.end, %entry
  %18 = load i8, i8* %success, align 1, !dbg !6795
  ret i8 %18, !dbg !6796
}

; Function Attrs: noinline nounwind uwtable
define internal void @verify_partial_schedule(%struct.partial_schedule* %ps, %struct.simple_bitmap_def* %sched_nodes) #0 !dbg !6797 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %sched_nodes.addr = alloca %struct.simple_bitmap_def*, align 8
  %row = alloca i32, align 4
  %crr_insn = alloca %struct.ps_insn*, align 8
  %u = alloca %struct.ddg_node*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !6800, metadata !DIExpression()), !dbg !6801
  store %struct.simple_bitmap_def* %sched_nodes, %struct.simple_bitmap_def** %sched_nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %sched_nodes.addr, metadata !6802, metadata !DIExpression()), !dbg !6803
  call void @llvm.dbg.declare(metadata i32* %row, metadata !6804, metadata !DIExpression()), !dbg !6805
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %crr_insn, metadata !6806, metadata !DIExpression()), !dbg !6807
  store i32 0, i32* %row, align 4, !dbg !6808
  br label %for.cond, !dbg !6810

for.cond:                                         ; preds = %for.inc20, %entry
  %0 = load i32, i32* %row, align 4, !dbg !6811
  %1 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6813
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %1, i32 0, i32 0, !dbg !6814
  %2 = load i32, i32* %ii, align 8, !dbg !6814
  %cmp = icmp slt i32 %0, %2, !dbg !6815
  br i1 %cmp, label %for.body, label %for.end21, !dbg !6816

for.body:                                         ; preds = %for.cond
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6817
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %3, i32 0, i32 2, !dbg !6819
  %4 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !6819
  %5 = load i32, i32* %row, align 4, !dbg !6820
  %idxprom = sext i32 %5 to i64, !dbg !6817
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %4, i64 %idxprom, !dbg !6817
  %6 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !6817
  store %struct.ps_insn* %6, %struct.ps_insn** %crr_insn, align 8, !dbg !6821
  br label %for.cond1, !dbg !6822

for.cond1:                                        ; preds = %for.inc, %for.body
  %7 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !6823
  %tobool = icmp ne %struct.ps_insn* %7, null, !dbg !6825
  br i1 %tobool, label %for.body2, label %for.end, !dbg !6825

for.body2:                                        ; preds = %for.cond1
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u, metadata !6826, metadata !DIExpression()), !dbg !6828
  %8 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !6829
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %8, i32 0, i32 0, !dbg !6830
  %9 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !6830
  store %struct.ddg_node* %9, %struct.ddg_node** %u, align 8, !dbg !6828
  %10 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6831
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %10, i32 0, i32 3, !dbg !6831
  %11 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !6831
  %cuid = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %11, i32 0, i32 0, !dbg !6831
  %12 = load i32, i32* %cuid, align 8, !dbg !6831
  %div = udiv i32 %12, 64, !dbg !6831
  %idxprom3 = zext i32 %div to i64, !dbg !6831
  %arrayidx4 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom3, !dbg !6831
  %13 = load i64, i64* %arrayidx4, align 8, !dbg !6831
  %14 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !6831
  %cuid5 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %14, i32 0, i32 0, !dbg !6831
  %15 = load i32, i32* %cuid5, align 8, !dbg !6831
  %rem = urem i32 %15, 64, !dbg !6831
  %sh_prom = zext i32 %rem to i64, !dbg !6831
  %shr = lshr i64 %13, %sh_prom, !dbg !6831
  %and = and i64 %shr, 1, !dbg !6831
  %tobool6 = icmp ne i64 %and, 0, !dbg !6831
  br i1 %tobool6, label %cond.false, label %cond.true, !dbg !6831

cond.true:                                        ; preds = %for.body2
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 2023, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6831
  br label %cond.end, !dbg !6831

cond.false:                                       ; preds = %for.body2
  br label %cond.end, !dbg !6831

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6831
  %16 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !6832
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %16, i32 0, i32 7, !dbg !6832
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !6832
  %17 = load i8*, i8** %info, align 8, !dbg !6832
  %18 = bitcast i8* %17 to %struct.node_sched_params*, !dbg !6832
  %time = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %18, i32 0, i32 1, !dbg !6832
  %19 = load i32, i32* %time, align 4, !dbg !6832
  %20 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6832
  %min_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %20, i32 0, i32 3, !dbg !6832
  %21 = load i32, i32* %min_cycle, align 8, !dbg !6832
  %cmp7 = icmp sge i32 %19, %21, !dbg !6832
  br i1 %cmp7, label %cond.false9, label %cond.true8, !dbg !6832

cond.true8:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 2026, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6832
  br label %cond.end10, !dbg !6832

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10, !dbg !6832

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !6832
  %22 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !6833
  %aux12 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %22, i32 0, i32 7, !dbg !6833
  %info13 = bitcast %union.anon.1* %aux12 to i8**, !dbg !6833
  %23 = load i8*, i8** %info13, align 8, !dbg !6833
  %24 = bitcast i8* %23 to %struct.node_sched_params*, !dbg !6833
  %time14 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %24, i32 0, i32 1, !dbg !6833
  %25 = load i32, i32* %time14, align 4, !dbg !6833
  %26 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6833
  %max_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %26, i32 0, i32 4, !dbg !6833
  %27 = load i32, i32* %max_cycle, align 4, !dbg !6833
  %cmp15 = icmp sle i32 %25, %27, !dbg !6833
  br i1 %cmp15, label %cond.false17, label %cond.true16, !dbg !6833

cond.true16:                                      ; preds = %cond.end10
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 2027, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6833
  br label %cond.end18, !dbg !6833

cond.false17:                                     ; preds = %cond.end10
  br label %cond.end18, !dbg !6833

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !6833
  br label %for.inc, !dbg !6834

for.inc:                                          ; preds = %cond.end18
  %28 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !6835
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %28, i32 0, i32 2, !dbg !6836
  %29 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !6836
  store %struct.ps_insn* %29, %struct.ps_insn** %crr_insn, align 8, !dbg !6837
  br label %for.cond1, !dbg !6838, !llvm.loop !6839

for.end:                                          ; preds = %for.cond1
  br label %for.inc20, !dbg !6840

for.inc20:                                        ; preds = %for.end
  %30 = load i32, i32* %row, align 4, !dbg !6841
  %inc = add nsw i32 %30, 1, !dbg !6841
  store i32 %inc, i32* %row, align 4, !dbg !6841
  br label %for.cond, !dbg !6842, !llvm.loop !6843

for.end21:                                        ; preds = %for.cond
  ret void, !dbg !6845
}

; Function Attrs: noinline nounwind uwtable
define internal void @reset_partial_schedule(%struct.partial_schedule* %ps, i32 %new_ii) #0 !dbg !6846 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %new_ii.addr = alloca i32, align 4
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !6847, metadata !DIExpression()), !dbg !6848
  store i32 %new_ii, i32* %new_ii.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %new_ii.addr, metadata !6849, metadata !DIExpression()), !dbg !6850
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6851
  %tobool = icmp ne %struct.partial_schedule* %0, null, !dbg !6851
  br i1 %tobool, label %if.end, label %if.then, !dbg !6853

if.then:                                          ; preds = %entry
  br label %return, !dbg !6854

if.end:                                           ; preds = %entry
  %1 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6855
  call void @free_ps_insns(%struct.partial_schedule* %1), !dbg !6856
  %2 = load i32, i32* %new_ii.addr, align 4, !dbg !6857
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6859
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %3, i32 0, i32 0, !dbg !6860
  %4 = load i32, i32* %ii, align 8, !dbg !6860
  %cmp = icmp eq i32 %2, %4, !dbg !6861
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !6862

if.then1:                                         ; preds = %if.end
  br label %return, !dbg !6863

if.end2:                                          ; preds = %if.end
  %5 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6864
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %5, i32 0, i32 2, !dbg !6865
  %6 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !6865
  %7 = bitcast %struct.ps_insn** %6 to i8*, !dbg !6864
  %8 = load i32, i32* %new_ii.addr, align 4, !dbg !6866
  %conv = sext i32 %8 to i64, !dbg !6866
  %mul = mul i64 %conv, 8, !dbg !6867
  %call = call i8* @xrealloc(i8* %7, i64 %mul), !dbg !6868
  %9 = bitcast i8* %call to %struct.ps_insn**, !dbg !6869
  %10 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6870
  %rows3 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %10, i32 0, i32 2, !dbg !6871
  store %struct.ps_insn** %9, %struct.ps_insn*** %rows3, align 8, !dbg !6872
  %11 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6873
  %rows4 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %11, i32 0, i32 2, !dbg !6874
  %12 = load %struct.ps_insn**, %struct.ps_insn*** %rows4, align 8, !dbg !6874
  %13 = bitcast %struct.ps_insn** %12 to i8*, !dbg !6875
  %14 = load i32, i32* %new_ii.addr, align 4, !dbg !6876
  %conv5 = sext i32 %14 to i64, !dbg !6876
  %mul6 = mul i64 %conv5, 8, !dbg !6877
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 %mul6, i1 false), !dbg !6875
  %15 = load i32, i32* %new_ii.addr, align 4, !dbg !6878
  %16 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6879
  %ii7 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %16, i32 0, i32 0, !dbg !6880
  store i32 %15, i32* %ii7, align 8, !dbg !6881
  %17 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6882
  %min_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %17, i32 0, i32 3, !dbg !6883
  store i32 2147483647, i32* %min_cycle, align 8, !dbg !6884
  %18 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !6885
  %max_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %18, i32 0, i32 4, !dbg !6886
  store i32 -2147483648, i32* %max_cycle, align 4, !dbg !6887
  br label %return, !dbg !6888

return:                                           ; preds = %if.end2, %if.then1, %if.then
  ret void, !dbg !6888
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compute_split_row(%struct.simple_bitmap_def* %sched_nodes, i32 %low, i32 %up, i32 %ii, %struct.ddg_node* %u_node) #0 !dbg !6889 {
entry:
  %retval = alloca i32, align 4
  %sched_nodes.addr = alloca %struct.simple_bitmap_def*, align 8
  %low.addr = alloca i32, align 4
  %up.addr = alloca i32, align 4
  %ii.addr = alloca i32, align 4
  %u_node.addr = alloca %struct.ddg_node*, align 8
  %e = alloca %struct.ddg_edge*, align 8
  %lower = alloca i32, align 4
  %upper = alloca i32, align 4
  %crit_pred = alloca %struct.ddg_node*, align 8
  %crit_succ = alloca %struct.ddg_node*, align 8
  %crit_cycle = alloca i32, align 4
  %v_node = alloca %struct.ddg_node*, align 8
  %v_node27 = alloca %struct.ddg_node*, align 8
  store %struct.simple_bitmap_def* %sched_nodes, %struct.simple_bitmap_def** %sched_nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %sched_nodes.addr, metadata !6892, metadata !DIExpression()), !dbg !6893
  store i32 %low, i32* %low.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %low.addr, metadata !6894, metadata !DIExpression()), !dbg !6895
  store i32 %up, i32* %up.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %up.addr, metadata !6896, metadata !DIExpression()), !dbg !6897
  store i32 %ii, i32* %ii.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ii.addr, metadata !6898, metadata !DIExpression()), !dbg !6899
  store %struct.ddg_node* %u_node, %struct.ddg_node** %u_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node.addr, metadata !6900, metadata !DIExpression()), !dbg !6901
  call void @llvm.dbg.declare(metadata %struct.ddg_edge** %e, metadata !6902, metadata !DIExpression()), !dbg !6903
  call void @llvm.dbg.declare(metadata i32* %lower, metadata !6904, metadata !DIExpression()), !dbg !6905
  store i32 -2147483648, i32* %lower, align 4, !dbg !6905
  call void @llvm.dbg.declare(metadata i32* %upper, metadata !6906, metadata !DIExpression()), !dbg !6907
  store i32 2147483647, i32* %upper, align 4, !dbg !6907
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %crit_pred, metadata !6908, metadata !DIExpression()), !dbg !6909
  store %struct.ddg_node* null, %struct.ddg_node** %crit_pred, align 8, !dbg !6909
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %crit_succ, metadata !6910, metadata !DIExpression()), !dbg !6911
  store %struct.ddg_node* null, %struct.ddg_node** %crit_succ, align 8, !dbg !6911
  call void @llvm.dbg.declare(metadata i32* %crit_cycle, metadata !6912, metadata !DIExpression()), !dbg !6913
  %0 = load %struct.ddg_node*, %struct.ddg_node** %u_node.addr, align 8, !dbg !6914
  %in = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %0, i32 0, i32 3, !dbg !6916
  %1 = load %struct.ddg_edge*, %struct.ddg_edge** %in, align 8, !dbg !6916
  store %struct.ddg_edge* %1, %struct.ddg_edge** %e, align 8, !dbg !6917
  br label %for.cond, !dbg !6918

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6919
  %cmp = icmp ne %struct.ddg_edge* %2, null, !dbg !6921
  br i1 %cmp, label %for.body, label %for.end, !dbg !6922

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %v_node, metadata !6923, metadata !DIExpression()), !dbg !6925
  %3 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6926
  %src = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %3, i32 0, i32 0, !dbg !6927
  %4 = load %struct.ddg_node*, %struct.ddg_node** %src, align 8, !dbg !6927
  store %struct.ddg_node* %4, %struct.ddg_node** %v_node, align 8, !dbg !6925
  %5 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6928
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %5, i32 0, i32 3, !dbg !6928
  %6 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6928
  %cuid = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %6, i32 0, i32 0, !dbg !6928
  %7 = load i32, i32* %cuid, align 8, !dbg !6928
  %div = udiv i32 %7, 64, !dbg !6928
  %idxprom = zext i32 %div to i64, !dbg !6928
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6928
  %8 = load i64, i64* %arrayidx, align 8, !dbg !6928
  %9 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6928
  %cuid1 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %9, i32 0, i32 0, !dbg !6928
  %10 = load i32, i32* %cuid1, align 8, !dbg !6928
  %rem = urem i32 %10, 64, !dbg !6928
  %sh_prom = zext i32 %rem to i64, !dbg !6928
  %shr = lshr i64 %8, %sh_prom, !dbg !6928
  %and = and i64 %shr, 1, !dbg !6928
  %tobool = icmp ne i64 %and, 0, !dbg !6928
  br i1 %tobool, label %land.lhs.true, label %if.end11, !dbg !6930

land.lhs.true:                                    ; preds = %for.body
  %11 = load i32, i32* %low.addr, align 4, !dbg !6931
  %12 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6932
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %12, i32 0, i32 7, !dbg !6932
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !6932
  %13 = load i8*, i8** %info, align 8, !dbg !6932
  %14 = bitcast i8* %13 to %struct.node_sched_params*, !dbg !6932
  %time = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %14, i32 0, i32 1, !dbg !6932
  %15 = load i32, i32* %time, align 4, !dbg !6932
  %16 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6933
  %latency = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %16, i32 0, i32 4, !dbg !6934
  %17 = load i32, i32* %latency, align 8, !dbg !6934
  %add = add nsw i32 %15, %17, !dbg !6935
  %18 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6936
  %distance = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %18, i32 0, i32 5, !dbg !6937
  %19 = load i32, i32* %distance, align 4, !dbg !6937
  %20 = load i32, i32* %ii.addr, align 4, !dbg !6938
  %mul = mul nsw i32 %19, %20, !dbg !6939
  %sub = sub nsw i32 %add, %mul, !dbg !6940
  %cmp2 = icmp eq i32 %11, %sub, !dbg !6941
  br i1 %cmp2, label %if.then, label %if.end11, !dbg !6942

if.then:                                          ; preds = %land.lhs.true
  %21 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6943
  %aux3 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %21, i32 0, i32 7, !dbg !6943
  %info4 = bitcast %union.anon.1* %aux3 to i8**, !dbg !6943
  %22 = load i8*, i8** %info4, align 8, !dbg !6943
  %23 = bitcast i8* %22 to %struct.node_sched_params*, !dbg !6943
  %time5 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %23, i32 0, i32 1, !dbg !6943
  %24 = load i32, i32* %time5, align 4, !dbg !6943
  %25 = load i32, i32* %lower, align 4, !dbg !6945
  %cmp6 = icmp sgt i32 %24, %25, !dbg !6946
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !6947

if.then7:                                         ; preds = %if.then
  %26 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6948
  store %struct.ddg_node* %26, %struct.ddg_node** %crit_pred, align 8, !dbg !6950
  %27 = load %struct.ddg_node*, %struct.ddg_node** %v_node, align 8, !dbg !6951
  %aux8 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %27, i32 0, i32 7, !dbg !6951
  %info9 = bitcast %union.anon.1* %aux8 to i8**, !dbg !6951
  %28 = load i8*, i8** %info9, align 8, !dbg !6951
  %29 = bitcast i8* %28 to %struct.node_sched_params*, !dbg !6951
  %time10 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %29, i32 0, i32 1, !dbg !6951
  %30 = load i32, i32* %time10, align 4, !dbg !6951
  store i32 %30, i32* %lower, align 4, !dbg !6952
  br label %if.end, !dbg !6953

if.end:                                           ; preds = %if.then7, %if.then
  br label %if.end11, !dbg !6945

if.end11:                                         ; preds = %if.end, %land.lhs.true, %for.body
  br label %for.inc, !dbg !6954

for.inc:                                          ; preds = %if.end11
  %31 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6955
  %next_in = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %31, i32 0, i32 6, !dbg !6956
  %32 = load %struct.ddg_edge*, %struct.ddg_edge** %next_in, align 8, !dbg !6956
  store %struct.ddg_edge* %32, %struct.ddg_edge** %e, align 8, !dbg !6957
  br label %for.cond, !dbg !6958, !llvm.loop !6959

for.end:                                          ; preds = %for.cond
  %33 = load %struct.ddg_node*, %struct.ddg_node** %crit_pred, align 8, !dbg !6961
  %cmp12 = icmp ne %struct.ddg_node* %33, null, !dbg !6963
  br i1 %cmp12, label %if.then13, label %if.end23, !dbg !6964

if.then13:                                        ; preds = %for.end
  %34 = load %struct.ddg_node*, %struct.ddg_node** %crit_pred, align 8, !dbg !6965
  %aux14 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %34, i32 0, i32 7, !dbg !6965
  %info15 = bitcast %union.anon.1* %aux14 to i8**, !dbg !6965
  %35 = load i8*, i8** %info15, align 8, !dbg !6965
  %36 = bitcast i8* %35 to %struct.node_sched_params*, !dbg !6965
  %time16 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %36, i32 0, i32 1, !dbg !6965
  %37 = load i32, i32* %time16, align 4, !dbg !6965
  %add17 = add nsw i32 %37, 1, !dbg !6967
  store i32 %add17, i32* %crit_cycle, align 4, !dbg !6968
  %38 = load i32, i32* %crit_cycle, align 4, !dbg !6969
  %39 = load i32, i32* %ii.addr, align 4, !dbg !6969
  %rem18 = srem i32 %38, %39, !dbg !6969
  %cmp19 = icmp slt i32 %rem18, 0, !dbg !6969
  br i1 %cmp19, label %cond.true, label %cond.false, !dbg !6969

cond.true:                                        ; preds = %if.then13
  %40 = load i32, i32* %crit_cycle, align 4, !dbg !6969
  %41 = load i32, i32* %ii.addr, align 4, !dbg !6969
  %rem20 = srem i32 %40, %41, !dbg !6969
  %42 = load i32, i32* %ii.addr, align 4, !dbg !6969
  %add21 = add nsw i32 %rem20, %42, !dbg !6969
  br label %cond.end, !dbg !6969

cond.false:                                       ; preds = %if.then13
  %43 = load i32, i32* %crit_cycle, align 4, !dbg !6969
  %44 = load i32, i32* %ii.addr, align 4, !dbg !6969
  %rem22 = srem i32 %43, %44, !dbg !6969
  br label %cond.end, !dbg !6969

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add21, %cond.true ], [ %rem22, %cond.false ], !dbg !6969
  store i32 %cond, i32* %retval, align 4, !dbg !6970
  br label %return, !dbg !6970

if.end23:                                         ; preds = %for.end
  %45 = load %struct.ddg_node*, %struct.ddg_node** %u_node.addr, align 8, !dbg !6971
  %out = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %45, i32 0, i32 4, !dbg !6973
  %46 = load %struct.ddg_edge*, %struct.ddg_edge** %out, align 8, !dbg !6973
  store %struct.ddg_edge* %46, %struct.ddg_edge** %e, align 8, !dbg !6974
  br label %for.cond24, !dbg !6975

for.cond24:                                       ; preds = %for.inc60, %if.end23
  %47 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6976
  %cmp25 = icmp ne %struct.ddg_edge* %47, null, !dbg !6978
  br i1 %cmp25, label %for.body26, label %for.end61, !dbg !6979

for.body26:                                       ; preds = %for.cond24
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %v_node27, metadata !6980, metadata !DIExpression()), !dbg !6982
  %48 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6983
  %dest = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %48, i32 0, i32 1, !dbg !6984
  %49 = load %struct.ddg_node*, %struct.ddg_node** %dest, align 8, !dbg !6984
  store %struct.ddg_node* %49, %struct.ddg_node** %v_node27, align 8, !dbg !6982
  %50 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !6985
  %elms28 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %50, i32 0, i32 3, !dbg !6985
  %51 = load %struct.ddg_node*, %struct.ddg_node** %v_node27, align 8, !dbg !6985
  %cuid29 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %51, i32 0, i32 0, !dbg !6985
  %52 = load i32, i32* %cuid29, align 8, !dbg !6985
  %div30 = udiv i32 %52, 64, !dbg !6985
  %idxprom31 = zext i32 %div30 to i64, !dbg !6985
  %arrayidx32 = getelementptr inbounds [1 x i64], [1 x i64]* %elms28, i64 0, i64 %idxprom31, !dbg !6985
  %53 = load i64, i64* %arrayidx32, align 8, !dbg !6985
  %54 = load %struct.ddg_node*, %struct.ddg_node** %v_node27, align 8, !dbg !6985
  %cuid33 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %54, i32 0, i32 0, !dbg !6985
  %55 = load i32, i32* %cuid33, align 8, !dbg !6985
  %rem34 = urem i32 %55, 64, !dbg !6985
  %sh_prom35 = zext i32 %rem34 to i64, !dbg !6985
  %shr36 = lshr i64 %53, %sh_prom35, !dbg !6985
  %and37 = and i64 %shr36, 1, !dbg !6985
  %tobool38 = icmp ne i64 %and37, 0, !dbg !6985
  br i1 %tobool38, label %land.lhs.true39, label %if.end59, !dbg !6987

land.lhs.true39:                                  ; preds = %for.body26
  %56 = load i32, i32* %up.addr, align 4, !dbg !6988
  %57 = load %struct.ddg_node*, %struct.ddg_node** %v_node27, align 8, !dbg !6989
  %aux40 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %57, i32 0, i32 7, !dbg !6989
  %info41 = bitcast %union.anon.1* %aux40 to i8**, !dbg !6989
  %58 = load i8*, i8** %info41, align 8, !dbg !6989
  %59 = bitcast i8* %58 to %struct.node_sched_params*, !dbg !6989
  %time42 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %59, i32 0, i32 1, !dbg !6989
  %60 = load i32, i32* %time42, align 4, !dbg !6989
  %61 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6990
  %latency43 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %61, i32 0, i32 4, !dbg !6991
  %62 = load i32, i32* %latency43, align 8, !dbg !6991
  %sub44 = sub nsw i32 %60, %62, !dbg !6992
  %63 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !6993
  %distance45 = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %63, i32 0, i32 5, !dbg !6994
  %64 = load i32, i32* %distance45, align 4, !dbg !6994
  %65 = load i32, i32* %ii.addr, align 4, !dbg !6995
  %mul46 = mul nsw i32 %64, %65, !dbg !6996
  %add47 = add nsw i32 %sub44, %mul46, !dbg !6997
  %cmp48 = icmp eq i32 %56, %add47, !dbg !6998
  br i1 %cmp48, label %if.then49, label %if.end59, !dbg !6999

if.then49:                                        ; preds = %land.lhs.true39
  %66 = load %struct.ddg_node*, %struct.ddg_node** %v_node27, align 8, !dbg !7000
  %aux50 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %66, i32 0, i32 7, !dbg !7000
  %info51 = bitcast %union.anon.1* %aux50 to i8**, !dbg !7000
  %67 = load i8*, i8** %info51, align 8, !dbg !7000
  %68 = bitcast i8* %67 to %struct.node_sched_params*, !dbg !7000
  %time52 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %68, i32 0, i32 1, !dbg !7000
  %69 = load i32, i32* %time52, align 4, !dbg !7000
  %70 = load i32, i32* %upper, align 4, !dbg !7002
  %cmp53 = icmp slt i32 %69, %70, !dbg !7003
  br i1 %cmp53, label %if.then54, label %if.end58, !dbg !7004

if.then54:                                        ; preds = %if.then49
  %71 = load %struct.ddg_node*, %struct.ddg_node** %v_node27, align 8, !dbg !7005
  store %struct.ddg_node* %71, %struct.ddg_node** %crit_succ, align 8, !dbg !7007
  %72 = load %struct.ddg_node*, %struct.ddg_node** %v_node27, align 8, !dbg !7008
  %aux55 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %72, i32 0, i32 7, !dbg !7008
  %info56 = bitcast %union.anon.1* %aux55 to i8**, !dbg !7008
  %73 = load i8*, i8** %info56, align 8, !dbg !7008
  %74 = bitcast i8* %73 to %struct.node_sched_params*, !dbg !7008
  %time57 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %74, i32 0, i32 1, !dbg !7008
  %75 = load i32, i32* %time57, align 4, !dbg !7008
  store i32 %75, i32* %upper, align 4, !dbg !7009
  br label %if.end58, !dbg !7010

if.end58:                                         ; preds = %if.then54, %if.then49
  br label %if.end59, !dbg !7002

if.end59:                                         ; preds = %if.end58, %land.lhs.true39, %for.body26
  br label %for.inc60, !dbg !7011

for.inc60:                                        ; preds = %if.end59
  %76 = load %struct.ddg_edge*, %struct.ddg_edge** %e, align 8, !dbg !7012
  %next_out = getelementptr inbounds %struct.ddg_edge, %struct.ddg_edge* %76, i32 0, i32 7, !dbg !7013
  %77 = load %struct.ddg_edge*, %struct.ddg_edge** %next_out, align 8, !dbg !7013
  store %struct.ddg_edge* %77, %struct.ddg_edge** %e, align 8, !dbg !7014
  br label %for.cond24, !dbg !7015, !llvm.loop !7016

for.end61:                                        ; preds = %for.cond24
  %78 = load %struct.ddg_node*, %struct.ddg_node** %crit_succ, align 8, !dbg !7018
  %cmp62 = icmp ne %struct.ddg_node* %78, null, !dbg !7020
  br i1 %cmp62, label %if.then63, label %if.end76, !dbg !7021

if.then63:                                        ; preds = %for.end61
  %79 = load %struct.ddg_node*, %struct.ddg_node** %crit_succ, align 8, !dbg !7022
  %aux64 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %79, i32 0, i32 7, !dbg !7022
  %info65 = bitcast %union.anon.1* %aux64 to i8**, !dbg !7022
  %80 = load i8*, i8** %info65, align 8, !dbg !7022
  %81 = bitcast i8* %80 to %struct.node_sched_params*, !dbg !7022
  %time66 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %81, i32 0, i32 1, !dbg !7022
  %82 = load i32, i32* %time66, align 4, !dbg !7022
  store i32 %82, i32* %crit_cycle, align 4, !dbg !7024
  %83 = load i32, i32* %crit_cycle, align 4, !dbg !7025
  %84 = load i32, i32* %ii.addr, align 4, !dbg !7025
  %rem67 = srem i32 %83, %84, !dbg !7025
  %cmp68 = icmp slt i32 %rem67, 0, !dbg !7025
  br i1 %cmp68, label %cond.true69, label %cond.false72, !dbg !7025

cond.true69:                                      ; preds = %if.then63
  %85 = load i32, i32* %crit_cycle, align 4, !dbg !7025
  %86 = load i32, i32* %ii.addr, align 4, !dbg !7025
  %rem70 = srem i32 %85, %86, !dbg !7025
  %87 = load i32, i32* %ii.addr, align 4, !dbg !7025
  %add71 = add nsw i32 %rem70, %87, !dbg !7025
  br label %cond.end74, !dbg !7025

cond.false72:                                     ; preds = %if.then63
  %88 = load i32, i32* %crit_cycle, align 4, !dbg !7025
  %89 = load i32, i32* %ii.addr, align 4, !dbg !7025
  %rem73 = srem i32 %88, %89, !dbg !7025
  br label %cond.end74, !dbg !7025

cond.end74:                                       ; preds = %cond.false72, %cond.true69
  %cond75 = phi i32 [ %add71, %cond.true69 ], [ %rem73, %cond.false72 ], !dbg !7025
  store i32 %cond75, i32* %retval, align 4, !dbg !7026
  br label %return, !dbg !7026

if.end76:                                         ; preds = %for.end61
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7027
  %tobool77 = icmp ne %struct._IO_FILE* %90, null, !dbg !7027
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !7029

if.then78:                                        ; preds = %if.end76
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7030
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.65, i64 0, i64 0)), !dbg !7031
  br label %if.end79, !dbg !7031

if.end79:                                         ; preds = %if.then78, %if.end76
  %92 = load i32, i32* %low.addr, align 4, !dbg !7032
  %93 = load i32, i32* %up.addr, align 4, !dbg !7032
  %add80 = add nsw i32 %92, %93, !dbg !7032
  %add81 = add nsw i32 %add80, 1, !dbg !7032
  %div82 = sdiv i32 %add81, 2, !dbg !7032
  %94 = load i32, i32* %ii.addr, align 4, !dbg !7032
  %rem83 = srem i32 %div82, %94, !dbg !7032
  %cmp84 = icmp slt i32 %rem83, 0, !dbg !7032
  br i1 %cmp84, label %cond.true85, label %cond.false91, !dbg !7032

cond.true85:                                      ; preds = %if.end79
  %95 = load i32, i32* %low.addr, align 4, !dbg !7032
  %96 = load i32, i32* %up.addr, align 4, !dbg !7032
  %add86 = add nsw i32 %95, %96, !dbg !7032
  %add87 = add nsw i32 %add86, 1, !dbg !7032
  %div88 = sdiv i32 %add87, 2, !dbg !7032
  %97 = load i32, i32* %ii.addr, align 4, !dbg !7032
  %rem89 = srem i32 %div88, %97, !dbg !7032
  %98 = load i32, i32* %ii.addr, align 4, !dbg !7032
  %add90 = add nsw i32 %rem89, %98, !dbg !7032
  br label %cond.end96, !dbg !7032

cond.false91:                                     ; preds = %if.end79
  %99 = load i32, i32* %low.addr, align 4, !dbg !7032
  %100 = load i32, i32* %up.addr, align 4, !dbg !7032
  %add92 = add nsw i32 %99, %100, !dbg !7032
  %add93 = add nsw i32 %add92, 1, !dbg !7032
  %div94 = sdiv i32 %add93, 2, !dbg !7032
  %101 = load i32, i32* %ii.addr, align 4, !dbg !7032
  %rem95 = srem i32 %div94, %101, !dbg !7032
  br label %cond.end96, !dbg !7032

cond.end96:                                       ; preds = %cond.false91, %cond.true85
  %cond97 = phi i32 [ %add90, %cond.true85 ], [ %rem95, %cond.false91 ], !dbg !7032
  store i32 %cond97, i32* %retval, align 4, !dbg !7033
  br label %return, !dbg !7033

return:                                           ; preds = %cond.end96, %cond.end74, %cond.end
  %102 = load i32, i32* %retval, align 4, !dbg !7034
  ret i32 %102, !dbg !7034
}

; Function Attrs: noinline nounwind uwtable
define internal void @ps_insert_empty_row(%struct.partial_schedule* %ps, i32 %split_row, %struct.simple_bitmap_def* %sched_nodes) #0 !dbg !7035 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %split_row.addr = alloca i32, align 4
  %sched_nodes.addr = alloca %struct.simple_bitmap_def*, align 8
  %crr_insn = alloca %struct.ps_insn*, align 8
  %rows_new = alloca %struct.ps_insn**, align 8
  %ii = alloca i32, align 4
  %new_ii = alloca i32, align 4
  %row = alloca i32, align 4
  %u = alloca %struct.ddg_node*, align 8
  %new_time = alloca i32, align 4
  %u56 = alloca %struct.ddg_node*, align 8
  %new_time58 = alloca i32, align 4
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !7038, metadata !DIExpression()), !dbg !7039
  store i32 %split_row, i32* %split_row.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %split_row.addr, metadata !7040, metadata !DIExpression()), !dbg !7041
  store %struct.simple_bitmap_def* %sched_nodes, %struct.simple_bitmap_def** %sched_nodes.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %sched_nodes.addr, metadata !7042, metadata !DIExpression()), !dbg !7043
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %crr_insn, metadata !7044, metadata !DIExpression()), !dbg !7045
  call void @llvm.dbg.declare(metadata %struct.ps_insn*** %rows_new, metadata !7046, metadata !DIExpression()), !dbg !7047
  call void @llvm.dbg.declare(metadata i32* %ii, metadata !7048, metadata !DIExpression()), !dbg !7049
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7050
  %ii1 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %0, i32 0, i32 0, !dbg !7051
  %1 = load i32, i32* %ii1, align 8, !dbg !7051
  store i32 %1, i32* %ii, align 4, !dbg !7049
  call void @llvm.dbg.declare(metadata i32* %new_ii, metadata !7052, metadata !DIExpression()), !dbg !7053
  %2 = load i32, i32* %ii, align 4, !dbg !7054
  %add = add nsw i32 %2, 1, !dbg !7055
  store i32 %add, i32* %new_ii, align 4, !dbg !7053
  call void @llvm.dbg.declare(metadata i32* %row, metadata !7056, metadata !DIExpression()), !dbg !7057
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7058
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !7059
  call void @verify_partial_schedule(%struct.partial_schedule* %3, %struct.simple_bitmap_def* %4), !dbg !7060
  %5 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7061
  %min_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %5, i32 0, i32 3, !dbg !7062
  %6 = load i32, i32* %min_cycle, align 8, !dbg !7062
  %7 = load i32, i32* %split_row.addr, align 4, !dbg !7063
  %sub = sub nsw i32 %7, %6, !dbg !7063
  store i32 %sub, i32* %split_row.addr, align 4, !dbg !7063
  %8 = load i32, i32* %split_row.addr, align 4, !dbg !7064
  %9 = load i32, i32* %ii, align 4, !dbg !7064
  %rem = srem i32 %8, %9, !dbg !7064
  %cmp = icmp slt i32 %rem, 0, !dbg !7064
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7064

cond.true:                                        ; preds = %entry
  %10 = load i32, i32* %split_row.addr, align 4, !dbg !7064
  %11 = load i32, i32* %ii, align 4, !dbg !7064
  %rem2 = srem i32 %10, %11, !dbg !7064
  %12 = load i32, i32* %ii, align 4, !dbg !7064
  %add3 = add nsw i32 %rem2, %12, !dbg !7064
  br label %cond.end, !dbg !7064

cond.false:                                       ; preds = %entry
  %13 = load i32, i32* %split_row.addr, align 4, !dbg !7064
  %14 = load i32, i32* %ii, align 4, !dbg !7064
  %rem4 = srem i32 %13, %14, !dbg !7064
  br label %cond.end, !dbg !7064

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add3, %cond.true ], [ %rem4, %cond.false ], !dbg !7064
  store i32 %cond, i32* %split_row.addr, align 4, !dbg !7065
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7066
  %tobool = icmp ne %struct._IO_FILE* %15, null, !dbg !7066
  br i1 %tobool, label %if.then, label %if.end, !dbg !7068

if.then:                                          ; preds = %cond.end
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7069
  %17 = load i32, i32* %split_row.addr, align 4, !dbg !7070
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.66, i64 0, i64 0), i32 %17), !dbg !7071
  br label %if.end, !dbg !7071

if.end:                                           ; preds = %if.then, %cond.end
  %18 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7072
  call void @normalize_sched_times(%struct.partial_schedule* %18), !dbg !7073
  %19 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7074
  %20 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7075
  %min_cycle5 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %20, i32 0, i32 3, !dbg !7076
  %21 = load i32, i32* %min_cycle5, align 8, !dbg !7076
  call void @rotate_partial_schedule(%struct.partial_schedule* %19, i32 %21), !dbg !7077
  %22 = load i32, i32* %new_ii, align 4, !dbg !7078
  %conv = sext i32 %22 to i64, !dbg !7078
  %call6 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !7079
  %23 = bitcast i8* %call6 to %struct.ps_insn**, !dbg !7080
  store %struct.ps_insn** %23, %struct.ps_insn*** %rows_new, align 8, !dbg !7081
  store i32 0, i32* %row, align 4, !dbg !7082
  br label %for.cond, !dbg !7084

for.cond:                                         ; preds = %for.inc33, %if.end
  %24 = load i32, i32* %row, align 4, !dbg !7085
  %25 = load i32, i32* %split_row.addr, align 4, !dbg !7087
  %cmp7 = icmp slt i32 %24, %25, !dbg !7088
  br i1 %cmp7, label %for.body, label %for.end34, !dbg !7089

for.body:                                         ; preds = %for.cond
  %26 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7090
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %26, i32 0, i32 2, !dbg !7092
  %27 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !7092
  %28 = load i32, i32* %row, align 4, !dbg !7093
  %idxprom = sext i32 %28 to i64, !dbg !7090
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %27, i64 %idxprom, !dbg !7090
  %29 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !7090
  %30 = load %struct.ps_insn**, %struct.ps_insn*** %rows_new, align 8, !dbg !7094
  %31 = load i32, i32* %row, align 4, !dbg !7095
  %idxprom9 = sext i32 %31 to i64, !dbg !7094
  %arrayidx10 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %30, i64 %idxprom9, !dbg !7094
  store %struct.ps_insn* %29, %struct.ps_insn** %arrayidx10, align 8, !dbg !7096
  %32 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7097
  %rows11 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %32, i32 0, i32 2, !dbg !7098
  %33 = load %struct.ps_insn**, %struct.ps_insn*** %rows11, align 8, !dbg !7098
  %34 = load i32, i32* %row, align 4, !dbg !7099
  %idxprom12 = sext i32 %34 to i64, !dbg !7097
  %arrayidx13 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %33, i64 %idxprom12, !dbg !7097
  store %struct.ps_insn* null, %struct.ps_insn** %arrayidx13, align 8, !dbg !7100
  %35 = load %struct.ps_insn**, %struct.ps_insn*** %rows_new, align 8, !dbg !7101
  %36 = load i32, i32* %row, align 4, !dbg !7103
  %idxprom14 = sext i32 %36 to i64, !dbg !7101
  %arrayidx15 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %35, i64 %idxprom14, !dbg !7101
  %37 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx15, align 8, !dbg !7101
  store %struct.ps_insn* %37, %struct.ps_insn** %crr_insn, align 8, !dbg !7104
  br label %for.cond16, !dbg !7105

for.cond16:                                       ; preds = %for.inc, %for.body
  %38 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7106
  %tobool17 = icmp ne %struct.ps_insn* %38, null, !dbg !7108
  br i1 %tobool17, label %for.body18, label %for.end, !dbg !7108

for.body18:                                       ; preds = %for.cond16
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u, metadata !7109, metadata !DIExpression()), !dbg !7111
  %39 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7112
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %39, i32 0, i32 0, !dbg !7113
  %40 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !7113
  store %struct.ddg_node* %40, %struct.ddg_node** %u, align 8, !dbg !7111
  call void @llvm.dbg.declare(metadata i32* %new_time, metadata !7114, metadata !DIExpression()), !dbg !7115
  %41 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !7116
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %41, i32 0, i32 7, !dbg !7116
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !7116
  %42 = load i8*, i8** %info, align 8, !dbg !7116
  %43 = bitcast i8* %42 to %struct.node_sched_params*, !dbg !7116
  %time = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %43, i32 0, i32 1, !dbg !7116
  %44 = load i32, i32* %time, align 4, !dbg !7116
  %45 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !7117
  %aux19 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %45, i32 0, i32 7, !dbg !7117
  %info20 = bitcast %union.anon.1* %aux19 to i8**, !dbg !7117
  %46 = load i8*, i8** %info20, align 8, !dbg !7117
  %47 = bitcast i8* %46 to %struct.node_sched_params*, !dbg !7117
  %time21 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %47, i32 0, i32 1, !dbg !7117
  %48 = load i32, i32* %time21, align 4, !dbg !7117
  %49 = load i32, i32* %ii, align 4, !dbg !7118
  %div = sdiv i32 %48, %49, !dbg !7119
  %add22 = add nsw i32 %44, %div, !dbg !7120
  store i32 %add22, i32* %new_time, align 4, !dbg !7115
  %50 = load i32, i32* %new_time, align 4, !dbg !7121
  %51 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !7122
  %aux23 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %51, i32 0, i32 7, !dbg !7122
  %info24 = bitcast %union.anon.1* %aux23 to i8**, !dbg !7122
  %52 = load i8*, i8** %info24, align 8, !dbg !7122
  %53 = bitcast i8* %52 to %struct.node_sched_params*, !dbg !7122
  %time25 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %53, i32 0, i32 1, !dbg !7122
  store i32 %50, i32* %time25, align 4, !dbg !7123
  %54 = load i32, i32* %new_time, align 4, !dbg !7124
  %55 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7125
  %cycle = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %55, i32 0, i32 1, !dbg !7126
  store i32 %54, i32* %cycle, align 8, !dbg !7127
  %56 = load i32, i32* %new_time, align 4, !dbg !7128
  %57 = load i32, i32* %new_ii, align 4, !dbg !7129
  %rem26 = srem i32 %56, %57, !dbg !7130
  %58 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !7131
  %aux27 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %58, i32 0, i32 7, !dbg !7131
  %info28 = bitcast %union.anon.1* %aux27 to i8**, !dbg !7131
  %59 = load i8*, i8** %info28, align 8, !dbg !7131
  %60 = bitcast i8* %59 to %struct.node_sched_params*, !dbg !7131
  %row29 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %60, i32 0, i32 4, !dbg !7131
  store i32 %rem26, i32* %row29, align 4, !dbg !7132
  %61 = load i32, i32* %new_time, align 4, !dbg !7133
  %62 = load i32, i32* %new_ii, align 4, !dbg !7134
  %div30 = sdiv i32 %61, %62, !dbg !7135
  %63 = load %struct.ddg_node*, %struct.ddg_node** %u, align 8, !dbg !7136
  %aux31 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %63, i32 0, i32 7, !dbg !7136
  %info32 = bitcast %union.anon.1* %aux31 to i8**, !dbg !7136
  %64 = load i8*, i8** %info32, align 8, !dbg !7136
  %65 = bitcast i8* %64 to %struct.node_sched_params*, !dbg !7136
  %stage = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %65, i32 0, i32 5, !dbg !7136
  store i32 %div30, i32* %stage, align 8, !dbg !7137
  br label %for.inc, !dbg !7138

for.inc:                                          ; preds = %for.body18
  %66 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7139
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %66, i32 0, i32 2, !dbg !7140
  %67 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !7140
  store %struct.ps_insn* %67, %struct.ps_insn** %crr_insn, align 8, !dbg !7141
  br label %for.cond16, !dbg !7142, !llvm.loop !7143

for.end:                                          ; preds = %for.cond16
  br label %for.inc33, !dbg !7145

for.inc33:                                        ; preds = %for.end
  %68 = load i32, i32* %row, align 4, !dbg !7146
  %inc = add nsw i32 %68, 1, !dbg !7146
  store i32 %inc, i32* %row, align 4, !dbg !7146
  br label %for.cond, !dbg !7147, !llvm.loop !7148

for.end34:                                        ; preds = %for.cond
  %69 = load %struct.ps_insn**, %struct.ps_insn*** %rows_new, align 8, !dbg !7150
  %70 = load i32, i32* %split_row.addr, align 4, !dbg !7151
  %idxprom35 = sext i32 %70 to i64, !dbg !7150
  %arrayidx36 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %69, i64 %idxprom35, !dbg !7150
  store %struct.ps_insn* null, %struct.ps_insn** %arrayidx36, align 8, !dbg !7152
  %71 = load i32, i32* %split_row.addr, align 4, !dbg !7153
  store i32 %71, i32* %row, align 4, !dbg !7155
  br label %for.cond37, !dbg !7156

for.cond37:                                       ; preds = %for.inc83, %for.end34
  %72 = load i32, i32* %row, align 4, !dbg !7157
  %73 = load i32, i32* %ii, align 4, !dbg !7159
  %cmp38 = icmp slt i32 %72, %73, !dbg !7160
  br i1 %cmp38, label %for.body40, label %for.end85, !dbg !7161

for.body40:                                       ; preds = %for.cond37
  %74 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7162
  %rows41 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %74, i32 0, i32 2, !dbg !7164
  %75 = load %struct.ps_insn**, %struct.ps_insn*** %rows41, align 8, !dbg !7164
  %76 = load i32, i32* %row, align 4, !dbg !7165
  %idxprom42 = sext i32 %76 to i64, !dbg !7162
  %arrayidx43 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %75, i64 %idxprom42, !dbg !7162
  %77 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx43, align 8, !dbg !7162
  %78 = load %struct.ps_insn**, %struct.ps_insn*** %rows_new, align 8, !dbg !7166
  %79 = load i32, i32* %row, align 4, !dbg !7167
  %add44 = add nsw i32 %79, 1, !dbg !7168
  %idxprom45 = sext i32 %add44 to i64, !dbg !7166
  %arrayidx46 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %78, i64 %idxprom45, !dbg !7166
  store %struct.ps_insn* %77, %struct.ps_insn** %arrayidx46, align 8, !dbg !7169
  %80 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7170
  %rows47 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %80, i32 0, i32 2, !dbg !7171
  %81 = load %struct.ps_insn**, %struct.ps_insn*** %rows47, align 8, !dbg !7171
  %82 = load i32, i32* %row, align 4, !dbg !7172
  %idxprom48 = sext i32 %82 to i64, !dbg !7170
  %arrayidx49 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %81, i64 %idxprom48, !dbg !7170
  store %struct.ps_insn* null, %struct.ps_insn** %arrayidx49, align 8, !dbg !7173
  %83 = load %struct.ps_insn**, %struct.ps_insn*** %rows_new, align 8, !dbg !7174
  %84 = load i32, i32* %row, align 4, !dbg !7176
  %add50 = add nsw i32 %84, 1, !dbg !7177
  %idxprom51 = sext i32 %add50 to i64, !dbg !7174
  %arrayidx52 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %83, i64 %idxprom51, !dbg !7174
  %85 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx52, align 8, !dbg !7174
  store %struct.ps_insn* %85, %struct.ps_insn** %crr_insn, align 8, !dbg !7178
  br label %for.cond53, !dbg !7179

for.cond53:                                       ; preds = %for.inc80, %for.body40
  %86 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7180
  %tobool54 = icmp ne %struct.ps_insn* %86, null, !dbg !7182
  br i1 %tobool54, label %for.body55, label %for.end82, !dbg !7182

for.body55:                                       ; preds = %for.cond53
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u56, metadata !7183, metadata !DIExpression()), !dbg !7185
  %87 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7186
  %node57 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %87, i32 0, i32 0, !dbg !7187
  %88 = load %struct.ddg_node*, %struct.ddg_node** %node57, align 8, !dbg !7187
  store %struct.ddg_node* %88, %struct.ddg_node** %u56, align 8, !dbg !7185
  call void @llvm.dbg.declare(metadata i32* %new_time58, metadata !7188, metadata !DIExpression()), !dbg !7189
  %89 = load %struct.ddg_node*, %struct.ddg_node** %u56, align 8, !dbg !7190
  %aux59 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %89, i32 0, i32 7, !dbg !7190
  %info60 = bitcast %union.anon.1* %aux59 to i8**, !dbg !7190
  %90 = load i8*, i8** %info60, align 8, !dbg !7190
  %91 = bitcast i8* %90 to %struct.node_sched_params*, !dbg !7190
  %time61 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %91, i32 0, i32 1, !dbg !7190
  %92 = load i32, i32* %time61, align 4, !dbg !7190
  %93 = load %struct.ddg_node*, %struct.ddg_node** %u56, align 8, !dbg !7191
  %aux62 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %93, i32 0, i32 7, !dbg !7191
  %info63 = bitcast %union.anon.1* %aux62 to i8**, !dbg !7191
  %94 = load i8*, i8** %info63, align 8, !dbg !7191
  %95 = bitcast i8* %94 to %struct.node_sched_params*, !dbg !7191
  %time64 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %95, i32 0, i32 1, !dbg !7191
  %96 = load i32, i32* %time64, align 4, !dbg !7191
  %97 = load i32, i32* %ii, align 4, !dbg !7192
  %div65 = sdiv i32 %96, %97, !dbg !7193
  %add66 = add nsw i32 %92, %div65, !dbg !7194
  %add67 = add nsw i32 %add66, 1, !dbg !7195
  store i32 %add67, i32* %new_time58, align 4, !dbg !7189
  %98 = load i32, i32* %new_time58, align 4, !dbg !7196
  %99 = load %struct.ddg_node*, %struct.ddg_node** %u56, align 8, !dbg !7197
  %aux68 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %99, i32 0, i32 7, !dbg !7197
  %info69 = bitcast %union.anon.1* %aux68 to i8**, !dbg !7197
  %100 = load i8*, i8** %info69, align 8, !dbg !7197
  %101 = bitcast i8* %100 to %struct.node_sched_params*, !dbg !7197
  %time70 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %101, i32 0, i32 1, !dbg !7197
  store i32 %98, i32* %time70, align 4, !dbg !7198
  %102 = load i32, i32* %new_time58, align 4, !dbg !7199
  %103 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7200
  %cycle71 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %103, i32 0, i32 1, !dbg !7201
  store i32 %102, i32* %cycle71, align 8, !dbg !7202
  %104 = load i32, i32* %new_time58, align 4, !dbg !7203
  %105 = load i32, i32* %new_ii, align 4, !dbg !7204
  %rem72 = srem i32 %104, %105, !dbg !7205
  %106 = load %struct.ddg_node*, %struct.ddg_node** %u56, align 8, !dbg !7206
  %aux73 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %106, i32 0, i32 7, !dbg !7206
  %info74 = bitcast %union.anon.1* %aux73 to i8**, !dbg !7206
  %107 = load i8*, i8** %info74, align 8, !dbg !7206
  %108 = bitcast i8* %107 to %struct.node_sched_params*, !dbg !7206
  %row75 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %108, i32 0, i32 4, !dbg !7206
  store i32 %rem72, i32* %row75, align 4, !dbg !7207
  %109 = load i32, i32* %new_time58, align 4, !dbg !7208
  %110 = load i32, i32* %new_ii, align 4, !dbg !7209
  %div76 = sdiv i32 %109, %110, !dbg !7210
  %111 = load %struct.ddg_node*, %struct.ddg_node** %u56, align 8, !dbg !7211
  %aux77 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %111, i32 0, i32 7, !dbg !7211
  %info78 = bitcast %union.anon.1* %aux77 to i8**, !dbg !7211
  %112 = load i8*, i8** %info78, align 8, !dbg !7211
  %113 = bitcast i8* %112 to %struct.node_sched_params*, !dbg !7211
  %stage79 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %113, i32 0, i32 5, !dbg !7211
  store i32 %div76, i32* %stage79, align 8, !dbg !7212
  br label %for.inc80, !dbg !7213

for.inc80:                                        ; preds = %for.body55
  %114 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7214
  %next_in_row81 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %114, i32 0, i32 2, !dbg !7215
  %115 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row81, align 8, !dbg !7215
  store %struct.ps_insn* %115, %struct.ps_insn** %crr_insn, align 8, !dbg !7216
  br label %for.cond53, !dbg !7217, !llvm.loop !7218

for.end82:                                        ; preds = %for.cond53
  br label %for.inc83, !dbg !7220

for.inc83:                                        ; preds = %for.end82
  %116 = load i32, i32* %row, align 4, !dbg !7221
  %inc84 = add nsw i32 %116, 1, !dbg !7221
  store i32 %inc84, i32* %row, align 4, !dbg !7221
  br label %for.cond37, !dbg !7222, !llvm.loop !7223

for.end85:                                        ; preds = %for.cond37
  %117 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7225
  %min_cycle86 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %117, i32 0, i32 3, !dbg !7226
  %118 = load i32, i32* %min_cycle86, align 8, !dbg !7226
  %119 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7227
  %min_cycle87 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %119, i32 0, i32 3, !dbg !7228
  %120 = load i32, i32* %min_cycle87, align 8, !dbg !7228
  %121 = load i32, i32* %ii, align 4, !dbg !7229
  %div88 = sdiv i32 %120, %121, !dbg !7230
  %add89 = add nsw i32 %118, %div88, !dbg !7231
  %122 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7232
  %min_cycle90 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %122, i32 0, i32 3, !dbg !7232
  %123 = load i32, i32* %min_cycle90, align 8, !dbg !7232
  %124 = load i32, i32* %ii, align 4, !dbg !7232
  %rem91 = srem i32 %123, %124, !dbg !7232
  %cmp92 = icmp slt i32 %rem91, 0, !dbg !7232
  br i1 %cmp92, label %cond.true94, label %cond.false98, !dbg !7232

cond.true94:                                      ; preds = %for.end85
  %125 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7232
  %min_cycle95 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %125, i32 0, i32 3, !dbg !7232
  %126 = load i32, i32* %min_cycle95, align 8, !dbg !7232
  %127 = load i32, i32* %ii, align 4, !dbg !7232
  %rem96 = srem i32 %126, %127, !dbg !7232
  %128 = load i32, i32* %ii, align 4, !dbg !7232
  %add97 = add nsw i32 %rem96, %128, !dbg !7232
  br label %cond.end101, !dbg !7232

cond.false98:                                     ; preds = %for.end85
  %129 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7232
  %min_cycle99 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %129, i32 0, i32 3, !dbg !7232
  %130 = load i32, i32* %min_cycle99, align 8, !dbg !7232
  %131 = load i32, i32* %ii, align 4, !dbg !7232
  %rem100 = srem i32 %130, %131, !dbg !7232
  br label %cond.end101, !dbg !7232

cond.end101:                                      ; preds = %cond.false98, %cond.true94
  %cond102 = phi i32 [ %add97, %cond.true94 ], [ %rem100, %cond.false98 ], !dbg !7232
  %132 = load i32, i32* %split_row.addr, align 4, !dbg !7233
  %cmp103 = icmp sge i32 %cond102, %132, !dbg !7234
  %133 = zext i1 %cmp103 to i64, !dbg !7232
  %cond105 = select i1 %cmp103, i32 1, i32 0, !dbg !7232
  %add106 = add nsw i32 %add89, %cond105, !dbg !7235
  %134 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7236
  %min_cycle107 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %134, i32 0, i32 3, !dbg !7237
  store i32 %add106, i32* %min_cycle107, align 8, !dbg !7238
  %135 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7239
  %max_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %135, i32 0, i32 4, !dbg !7240
  %136 = load i32, i32* %max_cycle, align 4, !dbg !7240
  %137 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7241
  %max_cycle108 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %137, i32 0, i32 4, !dbg !7242
  %138 = load i32, i32* %max_cycle108, align 4, !dbg !7242
  %139 = load i32, i32* %ii, align 4, !dbg !7243
  %div109 = sdiv i32 %138, %139, !dbg !7244
  %add110 = add nsw i32 %136, %div109, !dbg !7245
  %140 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7246
  %max_cycle111 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %140, i32 0, i32 4, !dbg !7246
  %141 = load i32, i32* %max_cycle111, align 4, !dbg !7246
  %142 = load i32, i32* %ii, align 4, !dbg !7246
  %rem112 = srem i32 %141, %142, !dbg !7246
  %cmp113 = icmp slt i32 %rem112, 0, !dbg !7246
  br i1 %cmp113, label %cond.true115, label %cond.false119, !dbg !7246

cond.true115:                                     ; preds = %cond.end101
  %143 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7246
  %max_cycle116 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %143, i32 0, i32 4, !dbg !7246
  %144 = load i32, i32* %max_cycle116, align 4, !dbg !7246
  %145 = load i32, i32* %ii, align 4, !dbg !7246
  %rem117 = srem i32 %144, %145, !dbg !7246
  %146 = load i32, i32* %ii, align 4, !dbg !7246
  %add118 = add nsw i32 %rem117, %146, !dbg !7246
  br label %cond.end122, !dbg !7246

cond.false119:                                    ; preds = %cond.end101
  %147 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7246
  %max_cycle120 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %147, i32 0, i32 4, !dbg !7246
  %148 = load i32, i32* %max_cycle120, align 4, !dbg !7246
  %149 = load i32, i32* %ii, align 4, !dbg !7246
  %rem121 = srem i32 %148, %149, !dbg !7246
  br label %cond.end122, !dbg !7246

cond.end122:                                      ; preds = %cond.false119, %cond.true115
  %cond123 = phi i32 [ %add118, %cond.true115 ], [ %rem121, %cond.false119 ], !dbg !7246
  %150 = load i32, i32* %split_row.addr, align 4, !dbg !7247
  %cmp124 = icmp sge i32 %cond123, %150, !dbg !7248
  %151 = zext i1 %cmp124 to i64, !dbg !7246
  %cond126 = select i1 %cmp124, i32 1, i32 0, !dbg !7246
  %add127 = add nsw i32 %add110, %cond126, !dbg !7249
  %152 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7250
  %max_cycle128 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %152, i32 0, i32 4, !dbg !7251
  store i32 %add127, i32* %max_cycle128, align 4, !dbg !7252
  %153 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7253
  %rows129 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %153, i32 0, i32 2, !dbg !7254
  %154 = load %struct.ps_insn**, %struct.ps_insn*** %rows129, align 8, !dbg !7254
  %155 = bitcast %struct.ps_insn** %154 to i8*, !dbg !7253
  call void @free(i8* %155), !dbg !7255
  %156 = load %struct.ps_insn**, %struct.ps_insn*** %rows_new, align 8, !dbg !7256
  %157 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7257
  %rows130 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %157, i32 0, i32 2, !dbg !7258
  store %struct.ps_insn** %156, %struct.ps_insn*** %rows130, align 8, !dbg !7259
  %158 = load i32, i32* %new_ii, align 4, !dbg !7260
  %159 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7261
  %ii131 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %159, i32 0, i32 0, !dbg !7262
  store i32 %158, i32* %ii131, align 8, !dbg !7263
  %160 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7264
  %min_cycle132 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %160, i32 0, i32 3, !dbg !7264
  %161 = load i32, i32* %min_cycle132, align 8, !dbg !7264
  %cmp133 = icmp sge i32 %161, 0, !dbg !7264
  br i1 %cmp133, label %cond.false136, label %cond.true135, !dbg !7264

cond.true135:                                     ; preds = %cond.end122
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 1945, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !7264
  br label %cond.end137, !dbg !7264

cond.false136:                                    ; preds = %cond.end122
  br label %cond.end137, !dbg !7264

cond.end137:                                      ; preds = %cond.false136, %cond.true135
  %cond138 = phi i32 [ 0, %cond.true135 ], [ 0, %cond.false136 ], !dbg !7264
  %162 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7265
  %163 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %sched_nodes.addr, align 8, !dbg !7266
  call void @verify_partial_schedule(%struct.partial_schedule* %162, %struct.simple_bitmap_def* %163), !dbg !7267
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7268
  %tobool139 = icmp ne %struct._IO_FILE* %164, null, !dbg !7268
  br i1 %tobool139, label %if.then140, label %if.end144, !dbg !7270

if.then140:                                       ; preds = %cond.end137
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7271
  %166 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7272
  %min_cycle141 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %166, i32 0, i32 3, !dbg !7273
  %167 = load i32, i32* %min_cycle141, align 8, !dbg !7273
  %168 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7274
  %max_cycle142 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %168, i32 0, i32 4, !dbg !7275
  %169 = load i32, i32* %max_cycle142, align 4, !dbg !7275
  %call143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %165, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.67, i64 0, i64 0), i32 %167, i32 %169), !dbg !7276
  br label %if.end144, !dbg !7276

if.end144:                                        ; preds = %if.then140, %cond.end137
  ret void, !dbg !7277
}

declare dso_local void @print_ddg_edge(%struct._IO_FILE*, %struct.ddg_edge*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ps_insn* @ps_add_node_check_conflicts(%struct.partial_schedule* %ps, %struct.ddg_node* %n, i32 %c, %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def* %must_follow) #0 !dbg !7278 {
entry:
  %retval = alloca %struct.ps_insn*, align 8
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %n.addr = alloca %struct.ddg_node*, align 8
  %c.addr = alloca i32, align 4
  %must_precede.addr = alloca %struct.simple_bitmap_def*, align 8
  %must_follow.addr = alloca %struct.simple_bitmap_def*, align 8
  %has_conflicts = alloca i32, align 4
  %ps_i = alloca %struct.ps_insn*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !7281, metadata !DIExpression()), !dbg !7282
  store %struct.ddg_node* %n, %struct.ddg_node** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %n.addr, metadata !7283, metadata !DIExpression()), !dbg !7284
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !7285, metadata !DIExpression()), !dbg !7286
  store %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def** %must_precede.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_precede.addr, metadata !7287, metadata !DIExpression()), !dbg !7288
  store %struct.simple_bitmap_def* %must_follow, %struct.simple_bitmap_def** %must_follow.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_follow.addr, metadata !7289, metadata !DIExpression()), !dbg !7290
  call void @llvm.dbg.declare(metadata i32* %has_conflicts, metadata !7291, metadata !DIExpression()), !dbg !7292
  store i32 0, i32* %has_conflicts, align 4, !dbg !7292
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_i, metadata !7293, metadata !DIExpression()), !dbg !7294
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7295
  %1 = load %struct.ddg_node*, %struct.ddg_node** %n.addr, align 8, !dbg !7297
  %2 = load i32, i32* %c.addr, align 4, !dbg !7298
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede.addr, align 8, !dbg !7299
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !7300
  %call = call %struct.ps_insn* @add_node_to_ps(%struct.partial_schedule* %0, %struct.ddg_node* %1, i32 %2, %struct.simple_bitmap_def* %3, %struct.simple_bitmap_def* %4), !dbg !7301
  store %struct.ps_insn* %call, %struct.ps_insn** %ps_i, align 8, !dbg !7302
  %tobool = icmp ne %struct.ps_insn* %call, null, !dbg !7302
  br i1 %tobool, label %if.end, label %if.then, !dbg !7303

if.then:                                          ; preds = %entry
  store %struct.ps_insn* null, %struct.ps_insn** %retval, align 8, !dbg !7304
  br label %return, !dbg !7304

if.end:                                           ; preds = %entry
  %5 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7305
  %6 = load i32, i32* %c.addr, align 4, !dbg !7306
  %7 = load i32, i32* %c.addr, align 4, !dbg !7307
  %call1 = call i32 @ps_has_conflicts(%struct.partial_schedule* %5, i32 %6, i32 %7), !dbg !7308
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7308
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !7309

lor.rhs:                                          ; preds = %if.end
  %8 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7310
  %history = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %8, i32 0, i32 1, !dbg !7311
  %9 = load i32, i32* %history, align 4, !dbg !7311
  %cmp = icmp sgt i32 %9, 0, !dbg !7312
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7313

land.rhs:                                         ; preds = %lor.rhs
  %10 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7314
  %11 = load i32, i32* %c.addr, align 4, !dbg !7315
  %12 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7316
  %history3 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %12, i32 0, i32 1, !dbg !7317
  %13 = load i32, i32* %history3, align 4, !dbg !7317
  %sub = sub nsw i32 %11, %13, !dbg !7318
  %14 = load i32, i32* %c.addr, align 4, !dbg !7319
  %15 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7320
  %history4 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %15, i32 0, i32 1, !dbg !7321
  %16 = load i32, i32* %history4, align 4, !dbg !7321
  %add = add nsw i32 %14, %16, !dbg !7322
  %call5 = call i32 @ps_has_conflicts(%struct.partial_schedule* %10, i32 %sub, i32 %add), !dbg !7323
  %tobool6 = icmp ne i32 %call5, 0, !dbg !7313
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %17 = phi i1 [ false, %lor.rhs ], [ %tobool6, %land.rhs ], !dbg !7324
  br label %lor.end, !dbg !7309

lor.end:                                          ; preds = %land.end, %if.end
  %18 = phi i1 [ true, %if.end ], [ %17, %land.end ]
  %lor.ext = zext i1 %18 to i32, !dbg !7309
  store i32 %lor.ext, i32* %has_conflicts, align 4, !dbg !7325
  br label %while.cond, !dbg !7326

while.cond:                                       ; preds = %lor.end25, %lor.end
  %19 = load i32, i32* %has_conflicts, align 4, !dbg !7327
  %tobool7 = icmp ne i32 %19, 0, !dbg !7326
  br i1 %tobool7, label %while.body, label %while.end, !dbg !7326

while.body:                                       ; preds = %while.cond
  %20 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7328
  %21 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7331
  %22 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !7332
  %call8 = call i32 @ps_insn_advance_column(%struct.partial_schedule* %20, %struct.ps_insn* %21, %struct.simple_bitmap_def* %22), !dbg !7333
  %tobool9 = icmp ne i32 %call8, 0, !dbg !7333
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !7334

if.then10:                                        ; preds = %while.body
  br label %while.end, !dbg !7335

if.end11:                                         ; preds = %while.body
  %23 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7336
  %24 = load i32, i32* %c.addr, align 4, !dbg !7337
  %25 = load i32, i32* %c.addr, align 4, !dbg !7338
  %call12 = call i32 @ps_has_conflicts(%struct.partial_schedule* %23, i32 %24, i32 %25), !dbg !7339
  %tobool13 = icmp ne i32 %call12, 0, !dbg !7339
  br i1 %tobool13, label %lor.end25, label %lor.rhs14, !dbg !7340

lor.rhs14:                                        ; preds = %if.end11
  %26 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7341
  %history15 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %26, i32 0, i32 1, !dbg !7342
  %27 = load i32, i32* %history15, align 4, !dbg !7342
  %cmp16 = icmp sgt i32 %27, 0, !dbg !7343
  br i1 %cmp16, label %land.rhs17, label %land.end24, !dbg !7344

land.rhs17:                                       ; preds = %lor.rhs14
  %28 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7345
  %29 = load i32, i32* %c.addr, align 4, !dbg !7346
  %30 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7347
  %history18 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %30, i32 0, i32 1, !dbg !7348
  %31 = load i32, i32* %history18, align 4, !dbg !7348
  %sub19 = sub nsw i32 %29, %31, !dbg !7349
  %32 = load i32, i32* %c.addr, align 4, !dbg !7350
  %33 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7351
  %history20 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %33, i32 0, i32 1, !dbg !7352
  %34 = load i32, i32* %history20, align 4, !dbg !7352
  %add21 = add nsw i32 %32, %34, !dbg !7353
  %call22 = call i32 @ps_has_conflicts(%struct.partial_schedule* %28, i32 %sub19, i32 %add21), !dbg !7354
  %tobool23 = icmp ne i32 %call22, 0, !dbg !7344
  br label %land.end24

land.end24:                                       ; preds = %land.rhs17, %lor.rhs14
  %35 = phi i1 [ false, %lor.rhs14 ], [ %tobool23, %land.rhs17 ], !dbg !7355
  br label %lor.end25, !dbg !7340

lor.end25:                                        ; preds = %land.end24, %if.end11
  %36 = phi i1 [ true, %if.end11 ], [ %35, %land.end24 ]
  %lor.ext26 = zext i1 %36 to i32, !dbg !7340
  store i32 %lor.ext26, i32* %has_conflicts, align 4, !dbg !7356
  br label %while.cond, !dbg !7326, !llvm.loop !7357

while.end:                                        ; preds = %if.then10, %while.cond
  %37 = load i32, i32* %has_conflicts, align 4, !dbg !7359
  %tobool27 = icmp ne i32 %37, 0, !dbg !7359
  br i1 %tobool27, label %if.then28, label %if.end30, !dbg !7361

if.then28:                                        ; preds = %while.end
  %38 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7362
  %39 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7364
  %call29 = call zeroext i8 @remove_node_from_ps(%struct.partial_schedule* %38, %struct.ps_insn* %39), !dbg !7365
  store %struct.ps_insn* null, %struct.ps_insn** %retval, align 8, !dbg !7366
  br label %return, !dbg !7366

if.end30:                                         ; preds = %while.end
  %40 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7367
  %min_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %40, i32 0, i32 3, !dbg !7367
  %41 = load i32, i32* %min_cycle, align 8, !dbg !7367
  %42 = load i32, i32* %c.addr, align 4, !dbg !7367
  %cmp31 = icmp slt i32 %41, %42, !dbg !7367
  br i1 %cmp31, label %cond.true, label %cond.false, !dbg !7367

cond.true:                                        ; preds = %if.end30
  %43 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7367
  %min_cycle32 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %43, i32 0, i32 3, !dbg !7367
  %44 = load i32, i32* %min_cycle32, align 8, !dbg !7367
  br label %cond.end, !dbg !7367

cond.false:                                       ; preds = %if.end30
  %45 = load i32, i32* %c.addr, align 4, !dbg !7367
  br label %cond.end, !dbg !7367

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %44, %cond.true ], [ %45, %cond.false ], !dbg !7367
  %46 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7368
  %min_cycle33 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %46, i32 0, i32 3, !dbg !7369
  store i32 %cond, i32* %min_cycle33, align 8, !dbg !7370
  %47 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7371
  %max_cycle = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %47, i32 0, i32 4, !dbg !7371
  %48 = load i32, i32* %max_cycle, align 4, !dbg !7371
  %49 = load i32, i32* %c.addr, align 4, !dbg !7371
  %cmp34 = icmp sgt i32 %48, %49, !dbg !7371
  br i1 %cmp34, label %cond.true35, label %cond.false37, !dbg !7371

cond.true35:                                      ; preds = %cond.end
  %50 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7371
  %max_cycle36 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %50, i32 0, i32 4, !dbg !7371
  %51 = load i32, i32* %max_cycle36, align 4, !dbg !7371
  br label %cond.end38, !dbg !7371

cond.false37:                                     ; preds = %cond.end
  %52 = load i32, i32* %c.addr, align 4, !dbg !7371
  br label %cond.end38, !dbg !7371

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi i32 [ %51, %cond.true35 ], [ %52, %cond.false37 ], !dbg !7371
  %53 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7372
  %max_cycle40 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %53, i32 0, i32 4, !dbg !7373
  store i32 %cond39, i32* %max_cycle40, align 4, !dbg !7374
  %54 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7375
  store %struct.ps_insn* %54, %struct.ps_insn** %retval, align 8, !dbg !7376
  br label %return, !dbg !7376

return:                                           ; preds = %cond.end38, %if.then28, %if.then
  %55 = load %struct.ps_insn*, %struct.ps_insn** %retval, align 8, !dbg !7377
  ret %struct.ps_insn* %55, !dbg !7377
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ps_insn* @add_node_to_ps(%struct.partial_schedule* %ps, %struct.ddg_node* %node, i32 %cycle, %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def* %must_follow) #0 !dbg !7378 {
entry:
  %retval = alloca %struct.ps_insn*, align 8
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %node.addr = alloca %struct.ddg_node*, align 8
  %cycle.addr = alloca i32, align 4
  %must_precede.addr = alloca %struct.simple_bitmap_def*, align 8
  %must_follow.addr = alloca %struct.simple_bitmap_def*, align 8
  %ps_i = alloca %struct.ps_insn*, align 8
  %rest_count = alloca i32, align 4
  %row = alloca i32, align 4
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !7379, metadata !DIExpression()), !dbg !7380
  store %struct.ddg_node* %node, %struct.ddg_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %node.addr, metadata !7381, metadata !DIExpression()), !dbg !7382
  store i32 %cycle, i32* %cycle.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cycle.addr, metadata !7383, metadata !DIExpression()), !dbg !7384
  store %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def** %must_precede.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_precede.addr, metadata !7385, metadata !DIExpression()), !dbg !7386
  store %struct.simple_bitmap_def* %must_follow, %struct.simple_bitmap_def** %must_follow.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_follow.addr, metadata !7387, metadata !DIExpression()), !dbg !7388
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_i, metadata !7389, metadata !DIExpression()), !dbg !7390
  call void @llvm.dbg.declare(metadata i32* %rest_count, metadata !7391, metadata !DIExpression()), !dbg !7392
  store i32 1, i32* %rest_count, align 4, !dbg !7392
  call void @llvm.dbg.declare(metadata i32* %row, metadata !7393, metadata !DIExpression()), !dbg !7394
  %0 = load i32, i32* %cycle.addr, align 4, !dbg !7395
  %1 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7395
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %1, i32 0, i32 0, !dbg !7395
  %2 = load i32, i32* %ii, align 8, !dbg !7395
  %rem = srem i32 %0, %2, !dbg !7395
  %cmp = icmp slt i32 %rem, 0, !dbg !7395
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7395

cond.true:                                        ; preds = %entry
  %3 = load i32, i32* %cycle.addr, align 4, !dbg !7395
  %4 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7395
  %ii1 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %4, i32 0, i32 0, !dbg !7395
  %5 = load i32, i32* %ii1, align 8, !dbg !7395
  %rem2 = srem i32 %3, %5, !dbg !7395
  %6 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7395
  %ii3 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %6, i32 0, i32 0, !dbg !7395
  %7 = load i32, i32* %ii3, align 8, !dbg !7395
  %add = add nsw i32 %rem2, %7, !dbg !7395
  br label %cond.end, !dbg !7395

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* %cycle.addr, align 4, !dbg !7395
  %9 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7395
  %ii4 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %9, i32 0, i32 0, !dbg !7395
  %10 = load i32, i32* %ii4, align 8, !dbg !7395
  %rem5 = srem i32 %8, %10, !dbg !7395
  br label %cond.end, !dbg !7395

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %rem5, %cond.false ], !dbg !7395
  store i32 %cond, i32* %row, align 4, !dbg !7394
  %11 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7396
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %11, i32 0, i32 2, !dbg !7398
  %12 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !7398
  %13 = load i32, i32* %row, align 4, !dbg !7399
  %idxprom = sext i32 %13 to i64, !dbg !7396
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %12, i64 %idxprom, !dbg !7396
  %14 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !7396
  %tobool = icmp ne %struct.ps_insn* %14, null, !dbg !7396
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7400

land.lhs.true:                                    ; preds = %cond.end
  %15 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7401
  %rows6 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %15, i32 0, i32 2, !dbg !7402
  %16 = load %struct.ps_insn**, %struct.ps_insn*** %rows6, align 8, !dbg !7402
  %17 = load i32, i32* %row, align 4, !dbg !7403
  %idxprom7 = sext i32 %17 to i64, !dbg !7401
  %arrayidx8 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %16, i64 %idxprom7, !dbg !7401
  %18 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx8, align 8, !dbg !7401
  %row_rest_count = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %18, i32 0, i32 4, !dbg !7404
  %19 = load i32, i32* %row_rest_count, align 8, !dbg !7404
  %20 = load i32, i32* @issue_rate, align 4, !dbg !7405
  %cmp9 = icmp sge i32 %19, %20, !dbg !7406
  br i1 %cmp9, label %if.then, label %if.end, !dbg !7407

if.then:                                          ; preds = %land.lhs.true
  store %struct.ps_insn* null, %struct.ps_insn** %retval, align 8, !dbg !7408
  br label %return, !dbg !7408

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %21 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7409
  %rows10 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %21, i32 0, i32 2, !dbg !7411
  %22 = load %struct.ps_insn**, %struct.ps_insn*** %rows10, align 8, !dbg !7411
  %23 = load i32, i32* %row, align 4, !dbg !7412
  %idxprom11 = sext i32 %23 to i64, !dbg !7409
  %arrayidx12 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %22, i64 %idxprom11, !dbg !7409
  %24 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx12, align 8, !dbg !7409
  %tobool13 = icmp ne %struct.ps_insn* %24, null, !dbg !7409
  br i1 %tobool13, label %if.then14, label %if.end20, !dbg !7413

if.then14:                                        ; preds = %if.end
  %25 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7414
  %rows15 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %25, i32 0, i32 2, !dbg !7415
  %26 = load %struct.ps_insn**, %struct.ps_insn*** %rows15, align 8, !dbg !7415
  %27 = load i32, i32* %row, align 4, !dbg !7416
  %idxprom16 = sext i32 %27 to i64, !dbg !7414
  %arrayidx17 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %26, i64 %idxprom16, !dbg !7414
  %28 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx17, align 8, !dbg !7414
  %row_rest_count18 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %28, i32 0, i32 4, !dbg !7417
  %29 = load i32, i32* %row_rest_count18, align 8, !dbg !7417
  %30 = load i32, i32* %rest_count, align 4, !dbg !7418
  %add19 = add nsw i32 %30, %29, !dbg !7418
  store i32 %add19, i32* %rest_count, align 4, !dbg !7418
  br label %if.end20, !dbg !7419

if.end20:                                         ; preds = %if.then14, %if.end
  %31 = load %struct.ddg_node*, %struct.ddg_node** %node.addr, align 8, !dbg !7420
  %32 = load i32, i32* %rest_count, align 4, !dbg !7421
  %33 = load i32, i32* %cycle.addr, align 4, !dbg !7422
  %call = call %struct.ps_insn* @create_ps_insn(%struct.ddg_node* %31, i32 %32, i32 %33), !dbg !7423
  store %struct.ps_insn* %call, %struct.ps_insn** %ps_i, align 8, !dbg !7424
  %34 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7425
  %35 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7427
  %36 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede.addr, align 8, !dbg !7428
  %37 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !7429
  %call21 = call zeroext i8 @ps_insn_find_column(%struct.partial_schedule* %34, %struct.ps_insn* %35, %struct.simple_bitmap_def* %36, %struct.simple_bitmap_def* %37), !dbg !7430
  %tobool22 = icmp ne i8 %call21, 0, !dbg !7430
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !7431

if.then23:                                        ; preds = %if.end20
  %38 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7432
  %39 = bitcast %struct.ps_insn* %38 to i8*, !dbg !7432
  call void @free(i8* %39), !dbg !7434
  store %struct.ps_insn* null, %struct.ps_insn** %retval, align 8, !dbg !7435
  br label %return, !dbg !7435

if.end24:                                         ; preds = %if.end20
  %40 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7436
  store %struct.ps_insn* %40, %struct.ps_insn** %retval, align 8, !dbg !7437
  br label %return, !dbg !7437

return:                                           ; preds = %if.end24, %if.then23, %if.then
  %41 = load %struct.ps_insn*, %struct.ps_insn** %retval, align 8, !dbg !7438
  ret %struct.ps_insn* %41, !dbg !7438
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ps_has_conflicts(%struct.partial_schedule* %ps, i32 %from, i32 %to) #0 !dbg !7439 {
entry:
  %retval = alloca i32, align 4
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %cycle = alloca i32, align 4
  %crr_insn = alloca %struct.ps_insn*, align 8
  %can_issue_more = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !7442, metadata !DIExpression()), !dbg !7443
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !7444, metadata !DIExpression()), !dbg !7445
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !7446, metadata !DIExpression()), !dbg !7447
  call void @llvm.dbg.declare(metadata i32* %cycle, metadata !7448, metadata !DIExpression()), !dbg !7449
  %0 = load i8*, i8** @curr_state, align 8, !dbg !7450
  call void @state_reset(i8* %0), !dbg !7451
  %1 = load i32, i32* %from.addr, align 4, !dbg !7452
  store i32 %1, i32* %cycle, align 4, !dbg !7454
  br label %for.cond, !dbg !7455

for.cond:                                         ; preds = %for.inc52, %entry
  %2 = load i32, i32* %cycle, align 4, !dbg !7456
  %3 = load i32, i32* %to.addr, align 4, !dbg !7458
  %cmp = icmp sle i32 %2, %3, !dbg !7459
  br i1 %cmp, label %for.body, label %for.end53, !dbg !7460

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %crr_insn, metadata !7461, metadata !DIExpression()), !dbg !7463
  call void @llvm.dbg.declare(metadata i32* %can_issue_more, metadata !7464, metadata !DIExpression()), !dbg !7465
  %4 = load i32, i32* @issue_rate, align 4, !dbg !7466
  store i32 %4, i32* %can_issue_more, align 4, !dbg !7465
  %5 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7467
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %5, i32 0, i32 2, !dbg !7469
  %6 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !7469
  %7 = load i32, i32* %cycle, align 4, !dbg !7470
  %8 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7470
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %8, i32 0, i32 0, !dbg !7470
  %9 = load i32, i32* %ii, align 8, !dbg !7470
  %rem = srem i32 %7, %9, !dbg !7470
  %cmp1 = icmp slt i32 %rem, 0, !dbg !7470
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !7470

cond.true:                                        ; preds = %for.body
  %10 = load i32, i32* %cycle, align 4, !dbg !7470
  %11 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7470
  %ii2 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %11, i32 0, i32 0, !dbg !7470
  %12 = load i32, i32* %ii2, align 8, !dbg !7470
  %rem3 = srem i32 %10, %12, !dbg !7470
  %13 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7470
  %ii4 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %13, i32 0, i32 0, !dbg !7470
  %14 = load i32, i32* %ii4, align 8, !dbg !7470
  %add = add nsw i32 %rem3, %14, !dbg !7470
  br label %cond.end, !dbg !7470

cond.false:                                       ; preds = %for.body
  %15 = load i32, i32* %cycle, align 4, !dbg !7470
  %16 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7470
  %ii5 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %16, i32 0, i32 0, !dbg !7470
  %17 = load i32, i32* %ii5, align 8, !dbg !7470
  %rem6 = srem i32 %15, %17, !dbg !7470
  br label %cond.end, !dbg !7470

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %rem6, %cond.false ], !dbg !7470
  %idxprom = sext i32 %cond to i64, !dbg !7467
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %6, i64 %idxprom, !dbg !7467
  %18 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !7467
  store %struct.ps_insn* %18, %struct.ps_insn** %crr_insn, align 8, !dbg !7471
  br label %for.cond7, !dbg !7472

for.cond7:                                        ; preds = %for.inc, %cond.end
  %19 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7473
  %tobool = icmp ne %struct.ps_insn* %19, null, !dbg !7475
  br i1 %tobool, label %for.body8, label %for.end, !dbg !7475

for.body8:                                        ; preds = %for.cond7
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7476, metadata !DIExpression()), !dbg !7478
  %20 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7479
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %20, i32 0, i32 0, !dbg !7480
  %21 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !7480
  %insn9 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %21, i32 0, i32 1, !dbg !7481
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn9, align 8, !dbg !7481
  store %struct.rtx_def* %22, %struct.rtx_def** %insn, align 8, !dbg !7478
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7482
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !7482
  %bf.load = load i32, i32* %24, align 8, !dbg !7482
  %bf.clear = and i32 %bf.load, 65535, !dbg !7482
  %cmp10 = icmp eq i32 %bf.clear, 8, !dbg !7482
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false, !dbg !7482

lor.lhs.false:                                    ; preds = %for.body8
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7482
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !7482
  %bf.load11 = load i32, i32* %26, align 8, !dbg !7482
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !7482
  %cmp13 = icmp eq i32 %bf.clear12, 7, !dbg !7482
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false14, !dbg !7482

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7482
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !7482
  %bf.load15 = load i32, i32* %28, align 8, !dbg !7482
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !7482
  %cmp17 = icmp eq i32 %bf.clear16, 9, !dbg !7482
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false18, !dbg !7482

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7482
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !7482
  %bf.load19 = load i32, i32* %30, align 8, !dbg !7482
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !7482
  %cmp21 = icmp eq i32 %bf.clear20, 10, !dbg !7482
  br i1 %cmp21, label %land.lhs.true, label %if.then, !dbg !7482

land.lhs.true:                                    ; preds = %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false, %for.body8
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7482
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !7482
  %bf.load22 = load i32, i32* %32, align 8, !dbg !7482
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !7482
  %cmp24 = icmp eq i32 %bf.clear23, 7, !dbg !7482
  br i1 %cmp24, label %if.then, label %if.end, !dbg !7484

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false18
  br label %for.inc, !dbg !7485

if.end:                                           ; preds = %land.lhs.true
  %33 = load i32, i32* %can_issue_more, align 4, !dbg !7486
  %tobool25 = icmp ne i32 %33, 0, !dbg !7486
  br i1 %tobool25, label %lor.lhs.false26, label %if.then28, !dbg !7488

lor.lhs.false26:                                  ; preds = %if.end
  %34 = load i8*, i8** @curr_state, align 8, !dbg !7489
  %call = call i32 @state_dead_lock_p(i8* %34), !dbg !7490
  %tobool27 = icmp ne i32 %call, 0, !dbg !7490
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !7491

if.then28:                                        ; preds = %lor.lhs.false26, %if.end
  store i32 1, i32* %retval, align 4, !dbg !7492
  br label %return, !dbg !7492

if.end29:                                         ; preds = %lor.lhs.false26
  %35 = load i8*, i8** @curr_state, align 8, !dbg !7493
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7495
  %call30 = call i32 @state_transition(i8* %35, %struct.rtx_def* %36), !dbg !7496
  %cmp31 = icmp sge i32 %call30, 0, !dbg !7497
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !7498

if.then32:                                        ; preds = %if.end29
  store i32 1, i32* %retval, align 4, !dbg !7499
  br label %return, !dbg !7499

if.end33:                                         ; preds = %if.end29
  %37 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 3), align 8, !dbg !7500
  %tobool34 = icmp ne i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)* %37, null, !dbg !7502
  br i1 %tobool34, label %if.then35, label %if.else, !dbg !7503

if.then35:                                        ; preds = %if.end33
  %38 = load i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 3), align 8, !dbg !7504
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @sched_dump, align 8, !dbg !7505
  %40 = load i32, i32* @sched_verbose, align 4, !dbg !7506
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7507
  %42 = load i32, i32* %can_issue_more, align 4, !dbg !7508
  %call36 = call i32 %38(%struct._IO_FILE* %39, i32 %40, %struct.rtx_def* %41, i32 %42), !dbg !7509
  store i32 %call36, i32* %can_issue_more, align 4, !dbg !7510
  br label %if.end51, !dbg !7511

if.else:                                          ; preds = %if.end33
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7512
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !7512
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7512
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7512
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !7512
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7512
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !7512
  %bf.load38 = load i32, i32* %45, align 8, !dbg !7512
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !7512
  %cmp40 = icmp ne i32 %bf.clear39, 24, !dbg !7514
  br i1 %cmp40, label %land.lhs.true41, label %if.end50, !dbg !7515

land.lhs.true41:                                  ; preds = %if.else
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7516
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !7516
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !7516
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 5, !dbg !7516
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !7516
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !7516
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !7516
  %bf.load46 = load i32, i32* %48, align 8, !dbg !7516
  %bf.clear47 = and i32 %bf.load46, 65535, !dbg !7516
  %cmp48 = icmp ne i32 %bf.clear47, 25, !dbg !7517
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !7518

if.then49:                                        ; preds = %land.lhs.true41
  %49 = load i32, i32* %can_issue_more, align 4, !dbg !7519
  %dec = add nsw i32 %49, -1, !dbg !7519
  store i32 %dec, i32* %can_issue_more, align 4, !dbg !7519
  br label %if.end50, !dbg !7520

if.end50:                                         ; preds = %if.then49, %land.lhs.true41, %if.else
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then35
  br label %for.inc, !dbg !7521

for.inc:                                          ; preds = %if.end51, %if.then
  %50 = load %struct.ps_insn*, %struct.ps_insn** %crr_insn, align 8, !dbg !7522
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %50, i32 0, i32 2, !dbg !7523
  %51 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !7523
  store %struct.ps_insn* %51, %struct.ps_insn** %crr_insn, align 8, !dbg !7524
  br label %for.cond7, !dbg !7525, !llvm.loop !7526

for.end:                                          ; preds = %for.cond7
  call void @advance_one_cycle(), !dbg !7528
  br label %for.inc52, !dbg !7529

for.inc52:                                        ; preds = %for.end
  %52 = load i32, i32* %cycle, align 4, !dbg !7530
  %inc = add nsw i32 %52, 1, !dbg !7530
  store i32 %inc, i32* %cycle, align 4, !dbg !7530
  br label %for.cond, !dbg !7531, !llvm.loop !7532

for.end53:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7534
  br label %return, !dbg !7534

return:                                           ; preds = %for.end53, %if.then32, %if.then28
  %53 = load i32, i32* %retval, align 4, !dbg !7535
  ret i32 %53, !dbg !7535
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ps_insn_advance_column(%struct.partial_schedule* %ps, %struct.ps_insn* %ps_i, %struct.simple_bitmap_def* %must_follow) #0 !dbg !7536 {
entry:
  %retval = alloca i32, align 4
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %ps_i.addr = alloca %struct.ps_insn*, align 8
  %must_follow.addr = alloca %struct.simple_bitmap_def*, align 8
  %prev = alloca %struct.ps_insn*, align 8
  %next = alloca %struct.ps_insn*, align 8
  %row = alloca i32, align 4
  %next_node = alloca %struct.ddg_node*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !7539, metadata !DIExpression()), !dbg !7540
  store %struct.ps_insn* %ps_i, %struct.ps_insn** %ps_i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_i.addr, metadata !7541, metadata !DIExpression()), !dbg !7542
  store %struct.simple_bitmap_def* %must_follow, %struct.simple_bitmap_def** %must_follow.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_follow.addr, metadata !7543, metadata !DIExpression()), !dbg !7544
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %prev, metadata !7545, metadata !DIExpression()), !dbg !7546
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %next, metadata !7547, metadata !DIExpression()), !dbg !7548
  call void @llvm.dbg.declare(metadata i32* %row, metadata !7549, metadata !DIExpression()), !dbg !7550
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %next_node, metadata !7551, metadata !DIExpression()), !dbg !7552
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7553
  %tobool = icmp ne %struct.partial_schedule* %0, null, !dbg !7553
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7555

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7556
  %tobool1 = icmp ne %struct.ps_insn* %1, null, !dbg !7556
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7557

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !7558
  br label %return, !dbg !7558

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7559
  %cycle = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %2, i32 0, i32 1, !dbg !7559
  %3 = load i32, i32* %cycle, align 8, !dbg !7559
  %4 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7559
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %4, i32 0, i32 0, !dbg !7559
  %5 = load i32, i32* %ii, align 8, !dbg !7559
  %rem = srem i32 %3, %5, !dbg !7559
  %cmp = icmp slt i32 %rem, 0, !dbg !7559
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7559

cond.true:                                        ; preds = %if.end
  %6 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7559
  %cycle2 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %6, i32 0, i32 1, !dbg !7559
  %7 = load i32, i32* %cycle2, align 8, !dbg !7559
  %8 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7559
  %ii3 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %8, i32 0, i32 0, !dbg !7559
  %9 = load i32, i32* %ii3, align 8, !dbg !7559
  %rem4 = srem i32 %7, %9, !dbg !7559
  %10 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7559
  %ii5 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %10, i32 0, i32 0, !dbg !7559
  %11 = load i32, i32* %ii5, align 8, !dbg !7559
  %add = add nsw i32 %rem4, %11, !dbg !7559
  br label %cond.end, !dbg !7559

cond.false:                                       ; preds = %if.end
  %12 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7559
  %cycle6 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %12, i32 0, i32 1, !dbg !7559
  %13 = load i32, i32* %cycle6, align 8, !dbg !7559
  %14 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7559
  %ii7 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %14, i32 0, i32 0, !dbg !7559
  %15 = load i32, i32* %ii7, align 8, !dbg !7559
  %rem8 = srem i32 %13, %15, !dbg !7559
  br label %cond.end, !dbg !7559

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %rem8, %cond.false ], !dbg !7559
  store i32 %cond, i32* %row, align 4, !dbg !7560
  %16 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7561
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %16, i32 0, i32 2, !dbg !7563
  %17 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !7563
  %tobool9 = icmp ne %struct.ps_insn* %17, null, !dbg !7561
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !7564

if.then10:                                        ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !7565
  br label %return, !dbg !7565

if.end11:                                         ; preds = %cond.end
  %18 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7566
  %next_in_row12 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %18, i32 0, i32 2, !dbg !7567
  %19 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row12, align 8, !dbg !7567
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %19, i32 0, i32 0, !dbg !7568
  %20 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !7568
  store %struct.ddg_node* %20, %struct.ddg_node** %next_node, align 8, !dbg !7569
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !7570
  %tobool13 = icmp ne %struct.simple_bitmap_def* %21, null, !dbg !7570
  br i1 %tobool13, label %land.lhs.true, label %if.end18, !dbg !7572

land.lhs.true:                                    ; preds = %if.end11
  %22 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !7573
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %22, i32 0, i32 3, !dbg !7573
  %23 = load %struct.ddg_node*, %struct.ddg_node** %next_node, align 8, !dbg !7573
  %cuid = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %23, i32 0, i32 0, !dbg !7573
  %24 = load i32, i32* %cuid, align 8, !dbg !7573
  %div = udiv i32 %24, 64, !dbg !7573
  %idxprom = zext i32 %div to i64, !dbg !7573
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7573
  %25 = load i64, i64* %arrayidx, align 8, !dbg !7573
  %26 = load %struct.ddg_node*, %struct.ddg_node** %next_node, align 8, !dbg !7573
  %cuid14 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %26, i32 0, i32 0, !dbg !7573
  %27 = load i32, i32* %cuid14, align 8, !dbg !7573
  %rem15 = urem i32 %27, 64, !dbg !7573
  %sh_prom = zext i32 %rem15 to i64, !dbg !7573
  %shr = lshr i64 %25, %sh_prom, !dbg !7573
  %and = and i64 %shr, 1, !dbg !7573
  %tobool16 = icmp ne i64 %and, 0, !dbg !7573
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !7574

if.then17:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !7575
  br label %return, !dbg !7575

if.end18:                                         ; preds = %land.lhs.true, %if.end11
  %28 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7576
  %prev_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %28, i32 0, i32 3, !dbg !7577
  %29 = load %struct.ps_insn*, %struct.ps_insn** %prev_in_row, align 8, !dbg !7577
  store %struct.ps_insn* %29, %struct.ps_insn** %prev, align 8, !dbg !7578
  %30 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7579
  %next_in_row19 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %30, i32 0, i32 2, !dbg !7580
  %31 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row19, align 8, !dbg !7580
  store %struct.ps_insn* %31, %struct.ps_insn** %next, align 8, !dbg !7581
  %32 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7582
  %33 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7584
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %33, i32 0, i32 2, !dbg !7585
  %34 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !7585
  %35 = load i32, i32* %row, align 4, !dbg !7586
  %idxprom20 = sext i32 %35 to i64, !dbg !7584
  %arrayidx21 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %34, i64 %idxprom20, !dbg !7584
  %36 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx21, align 8, !dbg !7584
  %cmp22 = icmp eq %struct.ps_insn* %32, %36, !dbg !7587
  br i1 %cmp22, label %if.then23, label %if.end27, !dbg !7588

if.then23:                                        ; preds = %if.end18
  %37 = load %struct.ps_insn*, %struct.ps_insn** %next, align 8, !dbg !7589
  %38 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7590
  %rows24 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %38, i32 0, i32 2, !dbg !7591
  %39 = load %struct.ps_insn**, %struct.ps_insn*** %rows24, align 8, !dbg !7591
  %40 = load i32, i32* %row, align 4, !dbg !7592
  %idxprom25 = sext i32 %40 to i64, !dbg !7590
  %arrayidx26 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %39, i64 %idxprom25, !dbg !7590
  store %struct.ps_insn* %37, %struct.ps_insn** %arrayidx26, align 8, !dbg !7593
  br label %if.end27, !dbg !7590

if.end27:                                         ; preds = %if.then23, %if.end18
  %41 = load %struct.ps_insn*, %struct.ps_insn** %next, align 8, !dbg !7594
  %next_in_row28 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %41, i32 0, i32 2, !dbg !7595
  %42 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row28, align 8, !dbg !7595
  %43 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7596
  %next_in_row29 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %43, i32 0, i32 2, !dbg !7597
  store %struct.ps_insn* %42, %struct.ps_insn** %next_in_row29, align 8, !dbg !7598
  %44 = load %struct.ps_insn*, %struct.ps_insn** %next, align 8, !dbg !7599
  %next_in_row30 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %44, i32 0, i32 2, !dbg !7601
  %45 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row30, align 8, !dbg !7601
  %tobool31 = icmp ne %struct.ps_insn* %45, null, !dbg !7599
  br i1 %tobool31, label %if.then32, label %if.end35, !dbg !7602

if.then32:                                        ; preds = %if.end27
  %46 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7603
  %47 = load %struct.ps_insn*, %struct.ps_insn** %next, align 8, !dbg !7604
  %next_in_row33 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %47, i32 0, i32 2, !dbg !7605
  %48 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row33, align 8, !dbg !7605
  %prev_in_row34 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %48, i32 0, i32 3, !dbg !7606
  store %struct.ps_insn* %46, %struct.ps_insn** %prev_in_row34, align 8, !dbg !7607
  br label %if.end35, !dbg !7604

if.end35:                                         ; preds = %if.then32, %if.end27
  %49 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7608
  %50 = load %struct.ps_insn*, %struct.ps_insn** %next, align 8, !dbg !7609
  %next_in_row36 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %50, i32 0, i32 2, !dbg !7610
  store %struct.ps_insn* %49, %struct.ps_insn** %next_in_row36, align 8, !dbg !7611
  %51 = load %struct.ps_insn*, %struct.ps_insn** %next, align 8, !dbg !7612
  %52 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7613
  %prev_in_row37 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %52, i32 0, i32 3, !dbg !7614
  store %struct.ps_insn* %51, %struct.ps_insn** %prev_in_row37, align 8, !dbg !7615
  %53 = load %struct.ps_insn*, %struct.ps_insn** %prev, align 8, !dbg !7616
  %54 = load %struct.ps_insn*, %struct.ps_insn** %next, align 8, !dbg !7617
  %prev_in_row38 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %54, i32 0, i32 3, !dbg !7618
  store %struct.ps_insn* %53, %struct.ps_insn** %prev_in_row38, align 8, !dbg !7619
  %55 = load %struct.ps_insn*, %struct.ps_insn** %prev, align 8, !dbg !7620
  %tobool39 = icmp ne %struct.ps_insn* %55, null, !dbg !7620
  br i1 %tobool39, label %if.then40, label %if.end42, !dbg !7622

if.then40:                                        ; preds = %if.end35
  %56 = load %struct.ps_insn*, %struct.ps_insn** %next, align 8, !dbg !7623
  %57 = load %struct.ps_insn*, %struct.ps_insn** %prev, align 8, !dbg !7624
  %next_in_row41 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %57, i32 0, i32 2, !dbg !7625
  store %struct.ps_insn* %56, %struct.ps_insn** %next_in_row41, align 8, !dbg !7626
  br label %if.end42, !dbg !7624

if.end42:                                         ; preds = %if.then40, %if.end35
  store i32 1, i32* %retval, align 4, !dbg !7627
  br label %return, !dbg !7627

return:                                           ; preds = %if.end42, %if.then17, %if.then10, %if.then
  %58 = load i32, i32* %retval, align 4, !dbg !7628
  ret i32 %58, !dbg !7628
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @remove_node_from_ps(%struct.partial_schedule* %ps, %struct.ps_insn* %ps_i) #0 !dbg !7629 {
entry:
  %retval = alloca i8, align 1
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %ps_i.addr = alloca %struct.ps_insn*, align 8
  %row = alloca i32, align 4
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !7632, metadata !DIExpression()), !dbg !7633
  store %struct.ps_insn* %ps_i, %struct.ps_insn** %ps_i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_i.addr, metadata !7634, metadata !DIExpression()), !dbg !7635
  call void @llvm.dbg.declare(metadata i32* %row, metadata !7636, metadata !DIExpression()), !dbg !7637
  %0 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7638
  %tobool = icmp ne %struct.partial_schedule* %0, null, !dbg !7638
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7640

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7641
  %tobool1 = icmp ne %struct.ps_insn* %1, null, !dbg !7641
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7642

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !7643
  br label %return, !dbg !7643

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7644
  %cycle = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %2, i32 0, i32 1, !dbg !7644
  %3 = load i32, i32* %cycle, align 8, !dbg !7644
  %4 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7644
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %4, i32 0, i32 0, !dbg !7644
  %5 = load i32, i32* %ii, align 8, !dbg !7644
  %rem = srem i32 %3, %5, !dbg !7644
  %cmp = icmp slt i32 %rem, 0, !dbg !7644
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7644

cond.true:                                        ; preds = %if.end
  %6 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7644
  %cycle2 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %6, i32 0, i32 1, !dbg !7644
  %7 = load i32, i32* %cycle2, align 8, !dbg !7644
  %8 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7644
  %ii3 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %8, i32 0, i32 0, !dbg !7644
  %9 = load i32, i32* %ii3, align 8, !dbg !7644
  %rem4 = srem i32 %7, %9, !dbg !7644
  %10 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7644
  %ii5 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %10, i32 0, i32 0, !dbg !7644
  %11 = load i32, i32* %ii5, align 8, !dbg !7644
  %add = add nsw i32 %rem4, %11, !dbg !7644
  br label %cond.end, !dbg !7644

cond.false:                                       ; preds = %if.end
  %12 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7644
  %cycle6 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %12, i32 0, i32 1, !dbg !7644
  %13 = load i32, i32* %cycle6, align 8, !dbg !7644
  %14 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7644
  %ii7 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %14, i32 0, i32 0, !dbg !7644
  %15 = load i32, i32* %ii7, align 8, !dbg !7644
  %rem8 = srem i32 %13, %15, !dbg !7644
  br label %cond.end, !dbg !7644

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %rem8, %cond.false ], !dbg !7644
  store i32 %cond, i32* %row, align 4, !dbg !7645
  %16 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7646
  %prev_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %16, i32 0, i32 3, !dbg !7648
  %17 = load %struct.ps_insn*, %struct.ps_insn** %prev_in_row, align 8, !dbg !7648
  %tobool9 = icmp ne %struct.ps_insn* %17, null, !dbg !7646
  br i1 %tobool9, label %if.else, label %if.then10, !dbg !7649

if.then10:                                        ; preds = %cond.end
  %18 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7650
  %19 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7653
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %19, i32 0, i32 2, !dbg !7654
  %20 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !7654
  %21 = load i32, i32* %row, align 4, !dbg !7655
  %idxprom = sext i32 %21 to i64, !dbg !7653
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %20, i64 %idxprom, !dbg !7653
  %22 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !7653
  %cmp11 = icmp ne %struct.ps_insn* %18, %22, !dbg !7656
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !7657

if.then12:                                        ; preds = %if.then10
  store i8 0, i8* %retval, align 1, !dbg !7658
  br label %return, !dbg !7658

if.end13:                                         ; preds = %if.then10
  %23 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7659
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %23, i32 0, i32 2, !dbg !7660
  %24 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !7660
  %25 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7661
  %rows14 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %25, i32 0, i32 2, !dbg !7662
  %26 = load %struct.ps_insn**, %struct.ps_insn*** %rows14, align 8, !dbg !7662
  %27 = load i32, i32* %row, align 4, !dbg !7663
  %idxprom15 = sext i32 %27 to i64, !dbg !7661
  %arrayidx16 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %26, i64 %idxprom15, !dbg !7661
  store %struct.ps_insn* %24, %struct.ps_insn** %arrayidx16, align 8, !dbg !7664
  %28 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7665
  %rows17 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %28, i32 0, i32 2, !dbg !7667
  %29 = load %struct.ps_insn**, %struct.ps_insn*** %rows17, align 8, !dbg !7667
  %30 = load i32, i32* %row, align 4, !dbg !7668
  %idxprom18 = sext i32 %30 to i64, !dbg !7665
  %arrayidx19 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %29, i64 %idxprom18, !dbg !7665
  %31 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx19, align 8, !dbg !7665
  %tobool20 = icmp ne %struct.ps_insn* %31, null, !dbg !7665
  br i1 %tobool20, label %if.then21, label %if.end26, !dbg !7669

if.then21:                                        ; preds = %if.end13
  %32 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7670
  %rows22 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %32, i32 0, i32 2, !dbg !7671
  %33 = load %struct.ps_insn**, %struct.ps_insn*** %rows22, align 8, !dbg !7671
  %34 = load i32, i32* %row, align 4, !dbg !7672
  %idxprom23 = sext i32 %34 to i64, !dbg !7670
  %arrayidx24 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %33, i64 %idxprom23, !dbg !7670
  %35 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx24, align 8, !dbg !7670
  %prev_in_row25 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %35, i32 0, i32 3, !dbg !7673
  store %struct.ps_insn* null, %struct.ps_insn** %prev_in_row25, align 8, !dbg !7674
  br label %if.end26, !dbg !7670

if.end26:                                         ; preds = %if.then21, %if.end13
  br label %if.end37, !dbg !7675

if.else:                                          ; preds = %cond.end
  %36 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7676
  %next_in_row27 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %36, i32 0, i32 2, !dbg !7678
  %37 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row27, align 8, !dbg !7678
  %38 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7679
  %prev_in_row28 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %38, i32 0, i32 3, !dbg !7680
  %39 = load %struct.ps_insn*, %struct.ps_insn** %prev_in_row28, align 8, !dbg !7680
  %next_in_row29 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %39, i32 0, i32 2, !dbg !7681
  store %struct.ps_insn* %37, %struct.ps_insn** %next_in_row29, align 8, !dbg !7682
  %40 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7683
  %next_in_row30 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %40, i32 0, i32 2, !dbg !7685
  %41 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row30, align 8, !dbg !7685
  %tobool31 = icmp ne %struct.ps_insn* %41, null, !dbg !7683
  br i1 %tobool31, label %if.then32, label %if.end36, !dbg !7686

if.then32:                                        ; preds = %if.else
  %42 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7687
  %prev_in_row33 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %42, i32 0, i32 3, !dbg !7688
  %43 = load %struct.ps_insn*, %struct.ps_insn** %prev_in_row33, align 8, !dbg !7688
  %44 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7689
  %next_in_row34 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %44, i32 0, i32 2, !dbg !7690
  %45 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row34, align 8, !dbg !7690
  %prev_in_row35 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %45, i32 0, i32 3, !dbg !7691
  store %struct.ps_insn* %43, %struct.ps_insn** %prev_in_row35, align 8, !dbg !7692
  br label %if.end36, !dbg !7689

if.end36:                                         ; preds = %if.then32, %if.else
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.end26
  %46 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7693
  %47 = bitcast %struct.ps_insn* %46 to i8*, !dbg !7693
  call void @free(i8* %47), !dbg !7694
  store i8 1, i8* %retval, align 1, !dbg !7695
  br label %return, !dbg !7695

return:                                           ; preds = %if.end37, %if.then12, %if.then
  %48 = load i8, i8* %retval, align 1, !dbg !7696
  ret i8 %48, !dbg !7696
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ps_insn* @create_ps_insn(%struct.ddg_node* %node, i32 %rest_count, i32 %cycle) #0 !dbg !7697 {
entry:
  %node.addr = alloca %struct.ddg_node*, align 8
  %rest_count.addr = alloca i32, align 4
  %cycle.addr = alloca i32, align 4
  %ps_i = alloca %struct.ps_insn*, align 8
  store %struct.ddg_node* %node, %struct.ddg_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %node.addr, metadata !7700, metadata !DIExpression()), !dbg !7701
  store i32 %rest_count, i32* %rest_count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rest_count.addr, metadata !7702, metadata !DIExpression()), !dbg !7703
  store i32 %cycle, i32* %cycle.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cycle.addr, metadata !7704, metadata !DIExpression()), !dbg !7705
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_i, metadata !7706, metadata !DIExpression()), !dbg !7707
  %call = call i8* @xmalloc(i64 40), !dbg !7708
  %0 = bitcast i8* %call to %struct.ps_insn*, !dbg !7708
  store %struct.ps_insn* %0, %struct.ps_insn** %ps_i, align 8, !dbg !7707
  %1 = load %struct.ddg_node*, %struct.ddg_node** %node.addr, align 8, !dbg !7709
  %2 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7710
  %node1 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %2, i32 0, i32 0, !dbg !7711
  store %struct.ddg_node* %1, %struct.ddg_node** %node1, align 8, !dbg !7712
  %3 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7713
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %3, i32 0, i32 2, !dbg !7714
  store %struct.ps_insn* null, %struct.ps_insn** %next_in_row, align 8, !dbg !7715
  %4 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7716
  %prev_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %4, i32 0, i32 3, !dbg !7717
  store %struct.ps_insn* null, %struct.ps_insn** %prev_in_row, align 8, !dbg !7718
  %5 = load i32, i32* %rest_count.addr, align 4, !dbg !7719
  %6 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7720
  %row_rest_count = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %6, i32 0, i32 4, !dbg !7721
  store i32 %5, i32* %row_rest_count, align 8, !dbg !7722
  %7 = load i32, i32* %cycle.addr, align 4, !dbg !7723
  %8 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7724
  %cycle2 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %8, i32 0, i32 1, !dbg !7725
  store i32 %7, i32* %cycle2, align 8, !dbg !7726
  %9 = load %struct.ps_insn*, %struct.ps_insn** %ps_i, align 8, !dbg !7727
  ret %struct.ps_insn* %9, !dbg !7728
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ps_insn_find_column(%struct.partial_schedule* %ps, %struct.ps_insn* %ps_i, %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def* %must_follow) #0 !dbg !7729 {
entry:
  %retval = alloca i8, align 1
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %ps_i.addr = alloca %struct.ps_insn*, align 8
  %must_precede.addr = alloca %struct.simple_bitmap_def*, align 8
  %must_follow.addr = alloca %struct.simple_bitmap_def*, align 8
  %next_ps_i = alloca %struct.ps_insn*, align 8
  %first_must_follow = alloca %struct.ps_insn*, align 8
  %last_must_precede = alloca %struct.ps_insn*, align 8
  %row = alloca i32, align 4
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !7732, metadata !DIExpression()), !dbg !7733
  store %struct.ps_insn* %ps_i, %struct.ps_insn** %ps_i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_i.addr, metadata !7734, metadata !DIExpression()), !dbg !7735
  store %struct.simple_bitmap_def* %must_precede, %struct.simple_bitmap_def** %must_precede.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_precede.addr, metadata !7736, metadata !DIExpression()), !dbg !7737
  store %struct.simple_bitmap_def* %must_follow, %struct.simple_bitmap_def** %must_follow.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %must_follow.addr, metadata !7738, metadata !DIExpression()), !dbg !7739
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %next_ps_i, metadata !7740, metadata !DIExpression()), !dbg !7741
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %first_must_follow, metadata !7742, metadata !DIExpression()), !dbg !7743
  store %struct.ps_insn* null, %struct.ps_insn** %first_must_follow, align 8, !dbg !7743
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %last_must_precede, metadata !7744, metadata !DIExpression()), !dbg !7745
  store %struct.ps_insn* null, %struct.ps_insn** %last_must_precede, align 8, !dbg !7745
  call void @llvm.dbg.declare(metadata i32* %row, metadata !7746, metadata !DIExpression()), !dbg !7747
  %0 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7748
  %tobool = icmp ne %struct.ps_insn* %0, null, !dbg !7748
  br i1 %tobool, label %if.end, label %if.then, !dbg !7750

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7751
  br label %return, !dbg !7751

if.end:                                           ; preds = %entry
  %1 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7752
  %cycle = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %1, i32 0, i32 1, !dbg !7752
  %2 = load i32, i32* %cycle, align 8, !dbg !7752
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7752
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %3, i32 0, i32 0, !dbg !7752
  %4 = load i32, i32* %ii, align 8, !dbg !7752
  %rem = srem i32 %2, %4, !dbg !7752
  %cmp = icmp slt i32 %rem, 0, !dbg !7752
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7752

cond.true:                                        ; preds = %if.end
  %5 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7752
  %cycle1 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %5, i32 0, i32 1, !dbg !7752
  %6 = load i32, i32* %cycle1, align 8, !dbg !7752
  %7 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7752
  %ii2 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %7, i32 0, i32 0, !dbg !7752
  %8 = load i32, i32* %ii2, align 8, !dbg !7752
  %rem3 = srem i32 %6, %8, !dbg !7752
  %9 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7752
  %ii4 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %9, i32 0, i32 0, !dbg !7752
  %10 = load i32, i32* %ii4, align 8, !dbg !7752
  %add = add nsw i32 %rem3, %10, !dbg !7752
  br label %cond.end, !dbg !7752

cond.false:                                       ; preds = %if.end
  %11 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7752
  %cycle5 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %11, i32 0, i32 1, !dbg !7752
  %12 = load i32, i32* %cycle5, align 8, !dbg !7752
  %13 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7752
  %ii6 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %13, i32 0, i32 0, !dbg !7752
  %14 = load i32, i32* %ii6, align 8, !dbg !7752
  %rem7 = srem i32 %12, %14, !dbg !7752
  br label %cond.end, !dbg !7752

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %rem7, %cond.false ], !dbg !7752
  store i32 %cond, i32* %row, align 4, !dbg !7753
  %15 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7754
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %15, i32 0, i32 2, !dbg !7756
  %16 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !7756
  %17 = load i32, i32* %row, align 4, !dbg !7757
  %idxprom = sext i32 %17 to i64, !dbg !7754
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %16, i64 %idxprom, !dbg !7754
  %18 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !7754
  store %struct.ps_insn* %18, %struct.ps_insn** %next_ps_i, align 8, !dbg !7758
  br label %for.cond, !dbg !7759

for.cond:                                         ; preds = %for.inc, %cond.end
  %19 = load %struct.ps_insn*, %struct.ps_insn** %next_ps_i, align 8, !dbg !7760
  %tobool8 = icmp ne %struct.ps_insn* %19, null, !dbg !7762
  br i1 %tobool8, label %for.body, label %for.end, !dbg !7762

for.body:                                         ; preds = %for.cond
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !7763
  %tobool9 = icmp ne %struct.simple_bitmap_def* %20, null, !dbg !7763
  br i1 %tobool9, label %land.lhs.true, label %if.end19, !dbg !7766

land.lhs.true:                                    ; preds = %for.body
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_follow.addr, align 8, !dbg !7767
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %21, i32 0, i32 3, !dbg !7767
  %22 = load %struct.ps_insn*, %struct.ps_insn** %next_ps_i, align 8, !dbg !7767
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %22, i32 0, i32 0, !dbg !7767
  %23 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !7767
  %cuid = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %23, i32 0, i32 0, !dbg !7767
  %24 = load i32, i32* %cuid, align 8, !dbg !7767
  %div = udiv i32 %24, 64, !dbg !7767
  %idxprom10 = zext i32 %div to i64, !dbg !7767
  %arrayidx11 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom10, !dbg !7767
  %25 = load i64, i64* %arrayidx11, align 8, !dbg !7767
  %26 = load %struct.ps_insn*, %struct.ps_insn** %next_ps_i, align 8, !dbg !7767
  %node12 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %26, i32 0, i32 0, !dbg !7767
  %27 = load %struct.ddg_node*, %struct.ddg_node** %node12, align 8, !dbg !7767
  %cuid13 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %27, i32 0, i32 0, !dbg !7767
  %28 = load i32, i32* %cuid13, align 8, !dbg !7767
  %rem14 = urem i32 %28, 64, !dbg !7767
  %sh_prom = zext i32 %rem14 to i64, !dbg !7767
  %shr = lshr i64 %25, %sh_prom, !dbg !7767
  %and = and i64 %shr, 1, !dbg !7767
  %tobool15 = icmp ne i64 %and, 0, !dbg !7767
  br i1 %tobool15, label %land.lhs.true16, label %if.end19, !dbg !7768

land.lhs.true16:                                  ; preds = %land.lhs.true
  %29 = load %struct.ps_insn*, %struct.ps_insn** %first_must_follow, align 8, !dbg !7769
  %tobool17 = icmp ne %struct.ps_insn* %29, null, !dbg !7769
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !7770

if.then18:                                        ; preds = %land.lhs.true16
  %30 = load %struct.ps_insn*, %struct.ps_insn** %next_ps_i, align 8, !dbg !7771
  store %struct.ps_insn* %30, %struct.ps_insn** %first_must_follow, align 8, !dbg !7772
  br label %if.end19, !dbg !7773

if.end19:                                         ; preds = %if.then18, %land.lhs.true16, %land.lhs.true, %for.body
  %31 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede.addr, align 8, !dbg !7774
  %tobool20 = icmp ne %struct.simple_bitmap_def* %31, null, !dbg !7774
  br i1 %tobool20, label %land.lhs.true21, label %if.end39, !dbg !7776

land.lhs.true21:                                  ; preds = %if.end19
  %32 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %must_precede.addr, align 8, !dbg !7777
  %elms22 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %32, i32 0, i32 3, !dbg !7777
  %33 = load %struct.ps_insn*, %struct.ps_insn** %next_ps_i, align 8, !dbg !7777
  %node23 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %33, i32 0, i32 0, !dbg !7777
  %34 = load %struct.ddg_node*, %struct.ddg_node** %node23, align 8, !dbg !7777
  %cuid24 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %34, i32 0, i32 0, !dbg !7777
  %35 = load i32, i32* %cuid24, align 8, !dbg !7777
  %div25 = udiv i32 %35, 64, !dbg !7777
  %idxprom26 = zext i32 %div25 to i64, !dbg !7777
  %arrayidx27 = getelementptr inbounds [1 x i64], [1 x i64]* %elms22, i64 0, i64 %idxprom26, !dbg !7777
  %36 = load i64, i64* %arrayidx27, align 8, !dbg !7777
  %37 = load %struct.ps_insn*, %struct.ps_insn** %next_ps_i, align 8, !dbg !7777
  %node28 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %37, i32 0, i32 0, !dbg !7777
  %38 = load %struct.ddg_node*, %struct.ddg_node** %node28, align 8, !dbg !7777
  %cuid29 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %38, i32 0, i32 0, !dbg !7777
  %39 = load i32, i32* %cuid29, align 8, !dbg !7777
  %rem30 = urem i32 %39, 64, !dbg !7777
  %sh_prom31 = zext i32 %rem30 to i64, !dbg !7777
  %shr32 = lshr i64 %36, %sh_prom31, !dbg !7777
  %and33 = and i64 %shr32, 1, !dbg !7777
  %tobool34 = icmp ne i64 %and33, 0, !dbg !7777
  br i1 %tobool34, label %if.then35, label %if.end39, !dbg !7778

if.then35:                                        ; preds = %land.lhs.true21
  %40 = load %struct.ps_insn*, %struct.ps_insn** %first_must_follow, align 8, !dbg !7779
  %tobool36 = icmp ne %struct.ps_insn* %40, null, !dbg !7779
  br i1 %tobool36, label %if.then37, label %if.else, !dbg !7782

if.then37:                                        ; preds = %if.then35
  store i8 0, i8* %retval, align 1, !dbg !7783
  br label %return, !dbg !7783

if.else:                                          ; preds = %if.then35
  %41 = load %struct.ps_insn*, %struct.ps_insn** %next_ps_i, align 8, !dbg !7784
  store %struct.ps_insn* %41, %struct.ps_insn** %last_must_precede, align 8, !dbg !7785
  br label %if.end38

if.end38:                                         ; preds = %if.else
  br label %if.end39, !dbg !7786

if.end39:                                         ; preds = %if.end38, %land.lhs.true21, %if.end19
  br label %for.inc, !dbg !7787

for.inc:                                          ; preds = %if.end39
  %42 = load %struct.ps_insn*, %struct.ps_insn** %next_ps_i, align 8, !dbg !7788
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %42, i32 0, i32 2, !dbg !7789
  %43 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !7789
  store %struct.ps_insn* %43, %struct.ps_insn** %next_ps_i, align 8, !dbg !7790
  br label %for.cond, !dbg !7791, !llvm.loop !7792

for.end:                                          ; preds = %for.cond
  %44 = load %struct.ps_insn*, %struct.ps_insn** %last_must_precede, align 8, !dbg !7794
  %tobool40 = icmp ne %struct.ps_insn* %44, null, !dbg !7794
  br i1 %tobool40, label %if.else55, label %if.then41, !dbg !7796

if.then41:                                        ; preds = %for.end
  %45 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7797
  %rows42 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %45, i32 0, i32 2, !dbg !7799
  %46 = load %struct.ps_insn**, %struct.ps_insn*** %rows42, align 8, !dbg !7799
  %47 = load i32, i32* %row, align 4, !dbg !7800
  %idxprom43 = sext i32 %47 to i64, !dbg !7797
  %arrayidx44 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %46, i64 %idxprom43, !dbg !7797
  %48 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx44, align 8, !dbg !7797
  %49 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7801
  %next_in_row45 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %49, i32 0, i32 2, !dbg !7802
  store %struct.ps_insn* %48, %struct.ps_insn** %next_in_row45, align 8, !dbg !7803
  %50 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7804
  %prev_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %50, i32 0, i32 3, !dbg !7805
  store %struct.ps_insn* null, %struct.ps_insn** %prev_in_row, align 8, !dbg !7806
  %51 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7807
  %next_in_row46 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %51, i32 0, i32 2, !dbg !7809
  %52 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row46, align 8, !dbg !7809
  %tobool47 = icmp ne %struct.ps_insn* %52, null, !dbg !7807
  br i1 %tobool47, label %if.then48, label %if.end51, !dbg !7810

if.then48:                                        ; preds = %if.then41
  %53 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7811
  %54 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7812
  %next_in_row49 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %54, i32 0, i32 2, !dbg !7813
  %55 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row49, align 8, !dbg !7813
  %prev_in_row50 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %55, i32 0, i32 3, !dbg !7814
  store %struct.ps_insn* %53, %struct.ps_insn** %prev_in_row50, align 8, !dbg !7815
  br label %if.end51, !dbg !7812

if.end51:                                         ; preds = %if.then48, %if.then41
  %56 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7816
  %57 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7817
  %rows52 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %57, i32 0, i32 2, !dbg !7818
  %58 = load %struct.ps_insn**, %struct.ps_insn*** %rows52, align 8, !dbg !7818
  %59 = load i32, i32* %row, align 4, !dbg !7819
  %idxprom53 = sext i32 %59 to i64, !dbg !7817
  %arrayidx54 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %58, i64 %idxprom53, !dbg !7817
  store %struct.ps_insn* %56, %struct.ps_insn** %arrayidx54, align 8, !dbg !7820
  br label %if.end66, !dbg !7821

if.else55:                                        ; preds = %for.end
  %60 = load %struct.ps_insn*, %struct.ps_insn** %last_must_precede, align 8, !dbg !7822
  %next_in_row56 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %60, i32 0, i32 2, !dbg !7824
  %61 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row56, align 8, !dbg !7824
  %62 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7825
  %next_in_row57 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %62, i32 0, i32 2, !dbg !7826
  store %struct.ps_insn* %61, %struct.ps_insn** %next_in_row57, align 8, !dbg !7827
  %63 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7828
  %64 = load %struct.ps_insn*, %struct.ps_insn** %last_must_precede, align 8, !dbg !7829
  %next_in_row58 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %64, i32 0, i32 2, !dbg !7830
  store %struct.ps_insn* %63, %struct.ps_insn** %next_in_row58, align 8, !dbg !7831
  %65 = load %struct.ps_insn*, %struct.ps_insn** %last_must_precede, align 8, !dbg !7832
  %66 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7833
  %prev_in_row59 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %66, i32 0, i32 3, !dbg !7834
  store %struct.ps_insn* %65, %struct.ps_insn** %prev_in_row59, align 8, !dbg !7835
  %67 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7836
  %next_in_row60 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %67, i32 0, i32 2, !dbg !7838
  %68 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row60, align 8, !dbg !7838
  %tobool61 = icmp ne %struct.ps_insn* %68, null, !dbg !7836
  br i1 %tobool61, label %if.then62, label %if.end65, !dbg !7839

if.then62:                                        ; preds = %if.else55
  %69 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7840
  %70 = load %struct.ps_insn*, %struct.ps_insn** %ps_i.addr, align 8, !dbg !7841
  %next_in_row63 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %70, i32 0, i32 2, !dbg !7842
  %71 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row63, align 8, !dbg !7842
  %prev_in_row64 = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %71, i32 0, i32 3, !dbg !7843
  store %struct.ps_insn* %69, %struct.ps_insn** %prev_in_row64, align 8, !dbg !7844
  br label %if.end65, !dbg !7841

if.end65:                                         ; preds = %if.then62, %if.else55
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.end51
  store i8 1, i8* %retval, align 1, !dbg !7845
  br label %return, !dbg !7845

return:                                           ; preds = %if.end66, %if.then37, %if.then
  %72 = load i8, i8* %retval, align 1, !dbg !7846
  ret i8 %72, !dbg !7846
}

declare dso_local void @state_reset(i8*) #2

declare dso_local i32 @state_dead_lock_p(i8*) #2

declare dso_local i32 @state_transition(i8*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @advance_one_cycle() #0 !dbg !7847 {
entry:
  %0 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 12), align 8, !dbg !7848
  %tobool = icmp ne %struct.rtx_def* ()* %0, null, !dbg !7850
  br i1 %tobool, label %if.then, label %if.end, !dbg !7851

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** @curr_state, align 8, !dbg !7852
  %2 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 12), align 8, !dbg !7853
  %call = call %struct.rtx_def* %2(), !dbg !7854
  %call1 = call i32 @state_transition(i8* %1, %struct.rtx_def* %call), !dbg !7855
  br label %if.end, !dbg !7855

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** @curr_state, align 8, !dbg !7856
  %call2 = call i32 @state_transition(i8* %3, %struct.rtx_def* null), !dbg !7857
  %4 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 14), align 8, !dbg !7858
  %tobool3 = icmp ne %struct.rtx_def* ()* %4, null, !dbg !7860
  br i1 %tobool3, label %if.then4, label %if.end7, !dbg !7861

if.then4:                                         ; preds = %if.end
  %5 = load i8*, i8** @curr_state, align 8, !dbg !7862
  %6 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 14), align 8, !dbg !7863
  %call5 = call %struct.rtx_def* %6(), !dbg !7864
  %call6 = call i32 @state_transition(i8* %5, %struct.rtx_def* %call5), !dbg !7865
  br label %if.end7, !dbg !7865

if.end7:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !7866
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_ps_insns(%struct.partial_schedule* %ps) #0 !dbg !7867 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %i = alloca i32, align 4
  %ps_insn = alloca %struct.ps_insn*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !7868, metadata !DIExpression()), !dbg !7869
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7870, metadata !DIExpression()), !dbg !7871
  store i32 0, i32* %i, align 4, !dbg !7872
  br label %for.cond, !dbg !7874

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7875
  %1 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7877
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %1, i32 0, i32 0, !dbg !7878
  %2 = load i32, i32* %ii, align 8, !dbg !7878
  %cmp = icmp slt i32 %0, %2, !dbg !7879
  br i1 %cmp, label %for.body, label %for.end, !dbg !7880

for.body:                                         ; preds = %for.cond
  br label %while.cond, !dbg !7881

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7883
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %3, i32 0, i32 2, !dbg !7884
  %4 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !7884
  %5 = load i32, i32* %i, align 4, !dbg !7885
  %idxprom = sext i32 %5 to i64, !dbg !7883
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %4, i64 %idxprom, !dbg !7883
  %6 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !7883
  %tobool = icmp ne %struct.ps_insn* %6, null, !dbg !7881
  br i1 %tobool, label %while.body, label %while.end, !dbg !7881

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_insn, metadata !7886, metadata !DIExpression()), !dbg !7888
  %7 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7889
  %rows1 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %7, i32 0, i32 2, !dbg !7890
  %8 = load %struct.ps_insn**, %struct.ps_insn*** %rows1, align 8, !dbg !7890
  %9 = load i32, i32* %i, align 4, !dbg !7891
  %idxprom2 = sext i32 %9 to i64, !dbg !7889
  %arrayidx3 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %8, i64 %idxprom2, !dbg !7889
  %10 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx3, align 8, !dbg !7889
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %10, i32 0, i32 2, !dbg !7892
  %11 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !7892
  store %struct.ps_insn* %11, %struct.ps_insn** %ps_insn, align 8, !dbg !7888
  %12 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7893
  %rows4 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %12, i32 0, i32 2, !dbg !7894
  %13 = load %struct.ps_insn**, %struct.ps_insn*** %rows4, align 8, !dbg !7894
  %14 = load i32, i32* %i, align 4, !dbg !7895
  %idxprom5 = sext i32 %14 to i64, !dbg !7893
  %arrayidx6 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %13, i64 %idxprom5, !dbg !7893
  %15 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx6, align 8, !dbg !7893
  %16 = bitcast %struct.ps_insn* %15 to i8*, !dbg !7893
  call void @free(i8* %16), !dbg !7896
  %17 = load %struct.ps_insn*, %struct.ps_insn** %ps_insn, align 8, !dbg !7897
  %18 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7898
  %rows7 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %18, i32 0, i32 2, !dbg !7899
  %19 = load %struct.ps_insn**, %struct.ps_insn*** %rows7, align 8, !dbg !7899
  %20 = load i32, i32* %i, align 4, !dbg !7900
  %idxprom8 = sext i32 %20 to i64, !dbg !7898
  %arrayidx9 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %19, i64 %idxprom8, !dbg !7898
  store %struct.ps_insn* %17, %struct.ps_insn** %arrayidx9, align 8, !dbg !7901
  br label %while.cond, !dbg !7881, !llvm.loop !7902

while.end:                                        ; preds = %while.cond
  %21 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !7904
  %rows10 = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %21, i32 0, i32 2, !dbg !7905
  %22 = load %struct.ps_insn**, %struct.ps_insn*** %rows10, align 8, !dbg !7905
  %23 = load i32, i32* %i, align 4, !dbg !7906
  %idxprom11 = sext i32 %23 to i64, !dbg !7904
  %arrayidx12 = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %22, i64 %idxprom11, !dbg !7904
  store %struct.ps_insn* null, %struct.ps_insn** %arrayidx12, align 8, !dbg !7907
  br label %for.inc, !dbg !7908

for.inc:                                          ; preds = %while.end
  %24 = load i32, i32* %i, align 4, !dbg !7909
  %inc = add nsw i32 %24, 1, !dbg !7909
  store i32 %inc, i32* %i, align 4, !dbg !7909
  br label %for.cond, !dbg !7910, !llvm.loop !7911

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7913
}

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !7914 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !7917, metadata !DIExpression()), !dbg !7918
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !7919, metadata !DIExpression()), !dbg !7920
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !7921
  store i32 0, i32* %index, align 8, !dbg !7922
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !7923
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !7924
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !7925
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !7926
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !7926
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !7926
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !7927 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7931, metadata !DIExpression()), !dbg !7932
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !7933, metadata !DIExpression()), !dbg !7934
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7935
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7935
  %5 = load i32, i32* %4, align 8, !dbg !7935
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7935
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7935
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7935
  %tobool = icmp ne i8 %call, 0, !dbg !7935
  br i1 %tobool, label %if.else, label %if.then, !dbg !7937

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7938
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7938
  %10 = load i32, i32* %9, align 8, !dbg !7938
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7938
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7938
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7938
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !7940
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !7941
  store i8 1, i8* %retval, align 1, !dbg !7942
  br label %return, !dbg !7942

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !7943
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !7945
  store i8 0, i8* %retval, align 1, !dbg !7946
  br label %return, !dbg !7946

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !7947
  ret i8 %15, !dbg !7947
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !7948 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !7952, metadata !DIExpression()), !dbg !7953
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !7954
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !7954
  %1 = load i32, i32* %index, align 8, !dbg !7954
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !7954
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !7954
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7954
  %5 = load i32, i32* %4, align 8, !dbg !7954
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7954
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7954
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7954
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7954
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7954

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !7954
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !7954
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !7954
  %11 = load i32, i32* %10, align 8, !dbg !7954
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !7954
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !7954
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !7954
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7954
  br label %cond.end, !dbg !7954

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7954

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7954
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7954
  %cmp = icmp ult i32 %1, %call2, !dbg !7954
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !7954

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.69, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !7954
  br label %cond.end5, !dbg !7954

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7954

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !7954
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !7955
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !7956
  %15 = load i32, i32* %index7, align 8, !dbg !7957
  %inc = add i32 %15, 1, !dbg !7957
  store i32 %inc, i32* %index7, align 8, !dbg !7957
  ret void, !dbg !7958
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7959 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7962, metadata !DIExpression()), !dbg !7963
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7964
  %3 = load i32, i32* %index, align 8, !dbg !7964
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7965
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !7965
  %6 = load i32, i32* %5, align 8, !dbg !7965
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !7965
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !7965
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !7965
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7965
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7965

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7965
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !7965
  %11 = load i32, i32* %10, align 8, !dbg !7965
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !7965
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !7965
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !7965
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7965
  br label %cond.end, !dbg !7965

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7965

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7965
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7965
  %cmp = icmp eq i32 %3, %call2, !dbg !7966
  %conv = zext i1 %cmp to i32, !dbg !7966
  %conv3 = trunc i32 %conv to i8, !dbg !7967
  ret i8 %conv3, !dbg !7968
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7969 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7972, metadata !DIExpression()), !dbg !7973
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7974
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7974
  %5 = load i32, i32* %4, align 8, !dbg !7974
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7974
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7974
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7974
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7974
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7974

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7974
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7974
  %10 = load i32, i32* %9, align 8, !dbg !7974
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7974
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7974
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7974
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7974
  br label %cond.end, !dbg !7974

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7974

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7974
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7974
  %13 = load i32, i32* %index, align 8, !dbg !7974
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !7974
  ret %struct.edge_def* %call2, !dbg !7975
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7976 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7979, metadata !DIExpression()), !dbg !7980
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7981
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !7981
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !7981
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7981

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.69, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !7981
  br label %cond.end, !dbg !7981

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7981

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7981
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7982
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !7982
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !7983
  ret %struct.VEC_edge_gc* %5, !dbg !7984
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !7985 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7988, metadata !DIExpression()), !dbg !7989
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7990, metadata !DIExpression()), !dbg !7989
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7989
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7989
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7989

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7989
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7989
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !7989
  %3 = load i32, i32* %num, align 8, !dbg !7989
  %cmp = icmp ult i32 %1, %3, !dbg !7989
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7991
  %land.ext = zext i1 %4 to i32, !dbg !7989
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7989
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !7989
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7989
  %idxprom = zext i32 %6 to i64, !dbg !7989
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7989
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7989
  ret %struct.edge_def* %7, !dbg !7989
}

declare dso_local void @reorder_insns_nobb(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.simple_bitmap_def** @sbitmap_vector_alloc(i32, i32) #2

declare dso_local void @sbitmap_vector_zero(%struct.simple_bitmap_def**, i32) #2

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_reg_rtx(i32) #2

declare dso_local %struct.rtx_def* @gen_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @add_insn_before(%struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @df_insn_rescan(%struct.rtx_def*) #2

declare dso_local void @start_sequence() #2

declare dso_local %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !7992 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7995, metadata !DIExpression()), !dbg !7996
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7997
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7997
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7997
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7997
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7997
  %1 = load i32, i32* %rt_uint, align 8, !dbg !7997
  ret i32 %1, !dbg !7998
}

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @duplicate_insns_of_cycles(%struct.partial_schedule* %ps, i32 %from_stage, i32 %to_stage, i32 %for_prolog, %struct.rtx_def* %count_reg) #0 !dbg !7999 {
entry:
  %ps.addr = alloca %struct.partial_schedule*, align 8
  %from_stage.addr = alloca i32, align 4
  %to_stage.addr = alloca i32, align 4
  %for_prolog.addr = alloca i32, align 4
  %count_reg.addr = alloca %struct.rtx_def*, align 8
  %row = alloca i32, align 4
  %ps_ij = alloca %struct.ps_insn*, align 8
  %u_node = alloca %struct.ddg_node*, align 8
  %j = alloca i32, align 4
  %i_reg_moves = alloca i32, align 4
  %reg_move = alloca %struct.rtx_def*, align 8
  store %struct.partial_schedule* %ps, %struct.partial_schedule** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.partial_schedule** %ps.addr, metadata !8002, metadata !DIExpression()), !dbg !8003
  store i32 %from_stage, i32* %from_stage.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from_stage.addr, metadata !8004, metadata !DIExpression()), !dbg !8005
  store i32 %to_stage, i32* %to_stage.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to_stage.addr, metadata !8006, metadata !DIExpression()), !dbg !8007
  store i32 %for_prolog, i32* %for_prolog.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %for_prolog.addr, metadata !8008, metadata !DIExpression()), !dbg !8009
  store %struct.rtx_def* %count_reg, %struct.rtx_def** %count_reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %count_reg.addr, metadata !8010, metadata !DIExpression()), !dbg !8011
  call void @llvm.dbg.declare(metadata i32* %row, metadata !8012, metadata !DIExpression()), !dbg !8013
  call void @llvm.dbg.declare(metadata %struct.ps_insn** %ps_ij, metadata !8014, metadata !DIExpression()), !dbg !8015
  store i32 0, i32* %row, align 4, !dbg !8016
  br label %for.cond, !dbg !8018

for.cond:                                         ; preds = %for.inc101, %entry
  %0 = load i32, i32* %row, align 4, !dbg !8019
  %1 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !8021
  %ii = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %1, i32 0, i32 0, !dbg !8022
  %2 = load i32, i32* %ii, align 8, !dbg !8022
  %cmp = icmp slt i32 %0, %2, !dbg !8023
  br i1 %cmp, label %for.body, label %for.end103, !dbg !8024

for.body:                                         ; preds = %for.cond
  %3 = load %struct.partial_schedule*, %struct.partial_schedule** %ps.addr, align 8, !dbg !8025
  %rows = getelementptr inbounds %struct.partial_schedule, %struct.partial_schedule* %3, i32 0, i32 2, !dbg !8027
  %4 = load %struct.ps_insn**, %struct.ps_insn*** %rows, align 8, !dbg !8027
  %5 = load i32, i32* %row, align 4, !dbg !8028
  %idxprom = sext i32 %5 to i64, !dbg !8025
  %arrayidx = getelementptr inbounds %struct.ps_insn*, %struct.ps_insn** %4, i64 %idxprom, !dbg !8025
  %6 = load %struct.ps_insn*, %struct.ps_insn** %arrayidx, align 8, !dbg !8025
  store %struct.ps_insn* %6, %struct.ps_insn** %ps_ij, align 8, !dbg !8029
  br label %for.cond1, !dbg !8030

for.cond1:                                        ; preds = %for.inc99, %for.body
  %7 = load %struct.ps_insn*, %struct.ps_insn** %ps_ij, align 8, !dbg !8031
  %tobool = icmp ne %struct.ps_insn* %7, null, !dbg !8033
  br i1 %tobool, label %for.body2, label %for.end100, !dbg !8033

for.body2:                                        ; preds = %for.cond1
  call void @llvm.dbg.declare(metadata %struct.ddg_node** %u_node, metadata !8034, metadata !DIExpression()), !dbg !8036
  %8 = load %struct.ps_insn*, %struct.ps_insn** %ps_ij, align 8, !dbg !8037
  %node = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %8, i32 0, i32 0, !dbg !8038
  %9 = load %struct.ddg_node*, %struct.ddg_node** %node, align 8, !dbg !8038
  store %struct.ddg_node* %9, %struct.ddg_node** %u_node, align 8, !dbg !8036
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8039, metadata !DIExpression()), !dbg !8040
  call void @llvm.dbg.declare(metadata i32* %i_reg_moves, metadata !8041, metadata !DIExpression()), !dbg !8042
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg_move, metadata !8043, metadata !DIExpression()), !dbg !8044
  store %struct.rtx_def* null, %struct.rtx_def** %reg_move, align 8, !dbg !8044
  %10 = load %struct.rtx_def*, %struct.rtx_def** %count_reg.addr, align 8, !dbg !8045
  %11 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8047
  %insn = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %11, i32 0, i32 1, !dbg !8048
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8048
  %call = call i32 @reg_mentioned_p(%struct.rtx_def* %10, %struct.rtx_def* %12), !dbg !8049
  %tobool3 = icmp ne i32 %call, 0, !dbg !8049
  br i1 %tobool3, label %if.then, label %if.end, !dbg !8050

if.then:                                          ; preds = %for.body2
  br label %for.inc99, !dbg !8051

if.end:                                           ; preds = %for.body2
  %13 = load i32, i32* %for_prolog.addr, align 4, !dbg !8052
  %tobool4 = icmp ne i32 %13, 0, !dbg !8052
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !8054

if.then5:                                         ; preds = %if.end
  %14 = load i32, i32* %to_stage.addr, align 4, !dbg !8055
  %15 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8057
  %aux = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %15, i32 0, i32 7, !dbg !8057
  %info = bitcast %union.anon.1* %aux to i8**, !dbg !8057
  %16 = load i8*, i8** %info, align 8, !dbg !8057
  %17 = bitcast i8* %16 to %struct.node_sched_params*, !dbg !8057
  %stage = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %17, i32 0, i32 5, !dbg !8057
  %18 = load i32, i32* %stage, align 8, !dbg !8057
  %sub = sub nsw i32 %14, %18, !dbg !8058
  %add = add nsw i32 %sub, 1, !dbg !8059
  store i32 %add, i32* %i_reg_moves, align 4, !dbg !8060
  %19 = load i32, i32* %i_reg_moves, align 4, !dbg !8061
  %cmp6 = icmp sgt i32 %19, 0, !dbg !8061
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !8061

cond.true:                                        ; preds = %if.then5
  %20 = load i32, i32* %i_reg_moves, align 4, !dbg !8061
  br label %cond.end, !dbg !8061

cond.false:                                       ; preds = %if.then5
  br label %cond.end, !dbg !8061

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %20, %cond.true ], [ 0, %cond.false ], !dbg !8061
  store i32 %cond, i32* %i_reg_moves, align 4, !dbg !8062
  %21 = load i32, i32* %i_reg_moves, align 4, !dbg !8063
  %22 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8063
  %aux7 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %22, i32 0, i32 7, !dbg !8063
  %info8 = bitcast %union.anon.1* %aux7 to i8**, !dbg !8063
  %23 = load i8*, i8** %info8, align 8, !dbg !8063
  %24 = bitcast i8* %23 to %struct.node_sched_params*, !dbg !8063
  %nreg_moves = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %24, i32 0, i32 3, !dbg !8063
  %25 = load i32, i32* %nreg_moves, align 8, !dbg !8063
  %cmp9 = icmp slt i32 %21, %25, !dbg !8063
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !8063

cond.true10:                                      ; preds = %cond.end
  %26 = load i32, i32* %i_reg_moves, align 4, !dbg !8063
  br label %cond.end15, !dbg !8063

cond.false11:                                     ; preds = %cond.end
  %27 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8063
  %aux12 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %27, i32 0, i32 7, !dbg !8063
  %info13 = bitcast %union.anon.1* %aux12 to i8**, !dbg !8063
  %28 = load i8*, i8** %info13, align 8, !dbg !8063
  %29 = bitcast i8* %28 to %struct.node_sched_params*, !dbg !8063
  %nreg_moves14 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %29, i32 0, i32 3, !dbg !8063
  %30 = load i32, i32* %nreg_moves14, align 8, !dbg !8063
  br label %cond.end15, !dbg !8063

cond.end15:                                       ; preds = %cond.false11, %cond.true10
  %cond16 = phi i32 [ %26, %cond.true10 ], [ %30, %cond.false11 ], !dbg !8063
  store i32 %cond16, i32* %i_reg_moves, align 4, !dbg !8064
  %31 = load i32, i32* %i_reg_moves, align 4, !dbg !8065
  %tobool17 = icmp ne i32 %31, 0, !dbg !8065
  br i1 %tobool17, label %if.then18, label %if.end25, !dbg !8067

if.then18:                                        ; preds = %cond.end15
  %32 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8068
  %aux19 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %32, i32 0, i32 7, !dbg !8068
  %info20 = bitcast %union.anon.1* %aux19 to i8**, !dbg !8068
  %33 = load i8*, i8** %info20, align 8, !dbg !8068
  %34 = bitcast i8* %33 to %struct.node_sched_params*, !dbg !8068
  %first_reg_move = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %34, i32 0, i32 2, !dbg !8068
  %35 = load %struct.rtx_def*, %struct.rtx_def** %first_reg_move, align 8, !dbg !8068
  store %struct.rtx_def* %35, %struct.rtx_def** %reg_move, align 8, !dbg !8070
  store i32 1, i32* %j, align 4, !dbg !8071
  br label %for.cond21, !dbg !8073

for.cond21:                                       ; preds = %for.inc, %if.then18
  %36 = load i32, i32* %j, align 4, !dbg !8074
  %37 = load i32, i32* %i_reg_moves, align 4, !dbg !8076
  %cmp22 = icmp slt i32 %36, %37, !dbg !8077
  br i1 %cmp22, label %for.body23, label %for.end, !dbg !8078

for.body23:                                       ; preds = %for.cond21
  %38 = load %struct.rtx_def*, %struct.rtx_def** %reg_move, align 8, !dbg !8079
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !8079
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8079
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8079
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !8079
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8079
  store %struct.rtx_def* %39, %struct.rtx_def** %reg_move, align 8, !dbg !8080
  br label %for.inc, !dbg !8081

for.inc:                                          ; preds = %for.body23
  %40 = load i32, i32* %j, align 4, !dbg !8082
  %inc = add nsw i32 %40, 1, !dbg !8082
  store i32 %inc, i32* %j, align 4, !dbg !8082
  br label %for.cond21, !dbg !8083, !llvm.loop !8084

for.end:                                          ; preds = %for.cond21
  br label %if.end25, !dbg !8086

if.end25:                                         ; preds = %for.end, %cond.end15
  br label %if.end70, !dbg !8087

if.else:                                          ; preds = %if.end
  %41 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8088
  %aux26 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %41, i32 0, i32 7, !dbg !8088
  %info27 = bitcast %union.anon.1* %aux26 to i8**, !dbg !8088
  %42 = load i8*, i8** %info27, align 8, !dbg !8088
  %43 = bitcast i8* %42 to %struct.node_sched_params*, !dbg !8088
  %nreg_moves28 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %43, i32 0, i32 3, !dbg !8088
  %44 = load i32, i32* %nreg_moves28, align 8, !dbg !8088
  %45 = load i32, i32* %from_stage.addr, align 4, !dbg !8090
  %46 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8091
  %aux29 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %46, i32 0, i32 7, !dbg !8091
  %info30 = bitcast %union.anon.1* %aux29 to i8**, !dbg !8091
  %47 = load i8*, i8** %info30, align 8, !dbg !8091
  %48 = bitcast i8* %47 to %struct.node_sched_params*, !dbg !8091
  %stage31 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %48, i32 0, i32 5, !dbg !8091
  %49 = load i32, i32* %stage31, align 8, !dbg !8091
  %sub32 = sub nsw i32 %45, %49, !dbg !8092
  %sub33 = sub nsw i32 %sub32, 1, !dbg !8093
  %sub34 = sub nsw i32 %44, %sub33, !dbg !8094
  store i32 %sub34, i32* %i_reg_moves, align 4, !dbg !8095
  %50 = load i32, i32* %i_reg_moves, align 4, !dbg !8096
  %cmp35 = icmp sgt i32 %50, 0, !dbg !8096
  br i1 %cmp35, label %cond.true36, label %cond.false37, !dbg !8096

cond.true36:                                      ; preds = %if.else
  %51 = load i32, i32* %i_reg_moves, align 4, !dbg !8096
  br label %cond.end38, !dbg !8096

cond.false37:                                     ; preds = %if.else
  br label %cond.end38, !dbg !8096

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i32 [ %51, %cond.true36 ], [ 0, %cond.false37 ], !dbg !8096
  store i32 %cond39, i32* %i_reg_moves, align 4, !dbg !8097
  %52 = load i32, i32* %i_reg_moves, align 4, !dbg !8098
  %53 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8098
  %aux40 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %53, i32 0, i32 7, !dbg !8098
  %info41 = bitcast %union.anon.1* %aux40 to i8**, !dbg !8098
  %54 = load i8*, i8** %info41, align 8, !dbg !8098
  %55 = bitcast i8* %54 to %struct.node_sched_params*, !dbg !8098
  %nreg_moves42 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %55, i32 0, i32 3, !dbg !8098
  %56 = load i32, i32* %nreg_moves42, align 8, !dbg !8098
  %cmp43 = icmp slt i32 %52, %56, !dbg !8098
  br i1 %cmp43, label %cond.true44, label %cond.false45, !dbg !8098

cond.true44:                                      ; preds = %cond.end38
  %57 = load i32, i32* %i_reg_moves, align 4, !dbg !8098
  br label %cond.end49, !dbg !8098

cond.false45:                                     ; preds = %cond.end38
  %58 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8098
  %aux46 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %58, i32 0, i32 7, !dbg !8098
  %info47 = bitcast %union.anon.1* %aux46 to i8**, !dbg !8098
  %59 = load i8*, i8** %info47, align 8, !dbg !8098
  %60 = bitcast i8* %59 to %struct.node_sched_params*, !dbg !8098
  %nreg_moves48 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %60, i32 0, i32 3, !dbg !8098
  %61 = load i32, i32* %nreg_moves48, align 8, !dbg !8098
  br label %cond.end49, !dbg !8098

cond.end49:                                       ; preds = %cond.false45, %cond.true44
  %cond50 = phi i32 [ %57, %cond.true44 ], [ %61, %cond.false45 ], !dbg !8098
  store i32 %cond50, i32* %i_reg_moves, align 4, !dbg !8099
  %62 = load i32, i32* %i_reg_moves, align 4, !dbg !8100
  %tobool51 = icmp ne i32 %62, 0, !dbg !8100
  br i1 %tobool51, label %if.then52, label %if.end69, !dbg !8102

if.then52:                                        ; preds = %cond.end49
  %63 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8103
  %aux53 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %63, i32 0, i32 7, !dbg !8103
  %info54 = bitcast %union.anon.1* %aux53 to i8**, !dbg !8103
  %64 = load i8*, i8** %info54, align 8, !dbg !8103
  %65 = bitcast i8* %64 to %struct.node_sched_params*, !dbg !8103
  %first_reg_move55 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %65, i32 0, i32 2, !dbg !8103
  %66 = load %struct.rtx_def*, %struct.rtx_def** %first_reg_move55, align 8, !dbg !8103
  store %struct.rtx_def* %66, %struct.rtx_def** %reg_move, align 8, !dbg !8105
  store i32 1, i32* %j, align 4, !dbg !8106
  br label %for.cond56, !dbg !8108

for.cond56:                                       ; preds = %for.inc66, %if.then52
  %67 = load i32, i32* %j, align 4, !dbg !8109
  %68 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8111
  %aux57 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %68, i32 0, i32 7, !dbg !8111
  %info58 = bitcast %union.anon.1* %aux57 to i8**, !dbg !8111
  %69 = load i8*, i8** %info58, align 8, !dbg !8111
  %70 = bitcast i8* %69 to %struct.node_sched_params*, !dbg !8111
  %nreg_moves59 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %70, i32 0, i32 3, !dbg !8111
  %71 = load i32, i32* %nreg_moves59, align 8, !dbg !8111
  %cmp60 = icmp slt i32 %67, %71, !dbg !8112
  br i1 %cmp60, label %for.body61, label %for.end68, !dbg !8113

for.body61:                                       ; preds = %for.cond56
  %72 = load %struct.rtx_def*, %struct.rtx_def** %reg_move, align 8, !dbg !8114
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !8114
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !8114
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 1, !dbg !8114
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !8114
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !8114
  store %struct.rtx_def* %73, %struct.rtx_def** %reg_move, align 8, !dbg !8115
  br label %for.inc66, !dbg !8116

for.inc66:                                        ; preds = %for.body61
  %74 = load i32, i32* %j, align 4, !dbg !8117
  %inc67 = add nsw i32 %74, 1, !dbg !8117
  store i32 %inc67, i32* %j, align 4, !dbg !8117
  br label %for.cond56, !dbg !8118, !llvm.loop !8119

for.end68:                                        ; preds = %for.cond56
  br label %if.end69, !dbg !8121

if.end69:                                         ; preds = %for.end68, %cond.end49
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.end25
  store i32 0, i32* %j, align 4, !dbg !8122
  br label %for.cond71, !dbg !8124

for.cond71:                                       ; preds = %for.inc80, %if.end70
  %75 = load i32, i32* %j, align 4, !dbg !8125
  %76 = load i32, i32* %i_reg_moves, align 4, !dbg !8127
  %cmp72 = icmp slt i32 %75, %76, !dbg !8128
  br i1 %cmp72, label %for.body73, label %for.end86, !dbg !8129

for.body73:                                       ; preds = %for.cond71
  %77 = load %struct.rtx_def*, %struct.rtx_def** %reg_move, align 8, !dbg !8130
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !8130
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !8130
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 5, !dbg !8130
  %rt_rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**, !dbg !8130
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx77, align 8, !dbg !8130
  %call78 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %78), !dbg !8131
  %call79 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call78), !dbg !8132
  br label %for.inc80, !dbg !8132

for.inc80:                                        ; preds = %for.body73
  %79 = load i32, i32* %j, align 4, !dbg !8133
  %inc81 = add nsw i32 %79, 1, !dbg !8133
  store i32 %inc81, i32* %j, align 4, !dbg !8133
  %80 = load %struct.rtx_def*, %struct.rtx_def** %reg_move, align 8, !dbg !8134
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !8134
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !8134
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 2, !dbg !8134
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !8134
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx85, align 8, !dbg !8134
  store %struct.rtx_def* %81, %struct.rtx_def** %reg_move, align 8, !dbg !8135
  br label %for.cond71, !dbg !8136, !llvm.loop !8137

for.end86:                                        ; preds = %for.cond71
  %82 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8139
  %aux87 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %82, i32 0, i32 7, !dbg !8139
  %info88 = bitcast %union.anon.1* %aux87 to i8**, !dbg !8139
  %83 = load i8*, i8** %info88, align 8, !dbg !8139
  %84 = bitcast i8* %83 to %struct.node_sched_params*, !dbg !8139
  %stage89 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %84, i32 0, i32 5, !dbg !8139
  %85 = load i32, i32* %stage89, align 8, !dbg !8139
  %86 = load i32, i32* %from_stage.addr, align 4, !dbg !8141
  %cmp90 = icmp sge i32 %85, %86, !dbg !8142
  br i1 %cmp90, label %land.lhs.true, label %if.end98, !dbg !8143

land.lhs.true:                                    ; preds = %for.end86
  %87 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8144
  %aux91 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %87, i32 0, i32 7, !dbg !8144
  %info92 = bitcast %union.anon.1* %aux91 to i8**, !dbg !8144
  %88 = load i8*, i8** %info92, align 8, !dbg !8144
  %89 = bitcast i8* %88 to %struct.node_sched_params*, !dbg !8144
  %stage93 = getelementptr inbounds %struct.node_sched_params, %struct.node_sched_params* %89, i32 0, i32 5, !dbg !8144
  %90 = load i32, i32* %stage93, align 8, !dbg !8144
  %91 = load i32, i32* %to_stage.addr, align 4, !dbg !8145
  %cmp94 = icmp sle i32 %90, %91, !dbg !8146
  br i1 %cmp94, label %if.then95, label %if.end98, !dbg !8147

if.then95:                                        ; preds = %land.lhs.true
  %92 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8148
  %first_note = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %92, i32 0, i32 2, !dbg !8149
  %93 = load %struct.rtx_def*, %struct.rtx_def** %first_note, align 8, !dbg !8149
  %94 = load %struct.ddg_node*, %struct.ddg_node** %u_node, align 8, !dbg !8150
  %insn96 = getelementptr inbounds %struct.ddg_node, %struct.ddg_node* %94, i32 0, i32 1, !dbg !8151
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn96, align 8, !dbg !8151
  %call97 = call %struct.rtx_def* @duplicate_insn_chain(%struct.rtx_def* %93, %struct.rtx_def* %95), !dbg !8152
  br label %if.end98, !dbg !8152

if.end98:                                         ; preds = %if.then95, %land.lhs.true, %for.end86
  br label %for.inc99, !dbg !8153

for.inc99:                                        ; preds = %if.end98, %if.then
  %96 = load %struct.ps_insn*, %struct.ps_insn** %ps_ij, align 8, !dbg !8154
  %next_in_row = getelementptr inbounds %struct.ps_insn, %struct.ps_insn* %96, i32 0, i32 2, !dbg !8155
  %97 = load %struct.ps_insn*, %struct.ps_insn** %next_in_row, align 8, !dbg !8155
  store %struct.ps_insn* %97, %struct.ps_insn** %ps_ij, align 8, !dbg !8156
  br label %for.cond1, !dbg !8157, !llvm.loop !8158

for.end100:                                       ; preds = %for.cond1
  br label %for.inc101, !dbg !8159

for.inc101:                                       ; preds = %for.end100
  %98 = load i32, i32* %row, align 4, !dbg !8160
  %inc102 = add nsw i32 %98, 1, !dbg !8160
  store i32 %inc102, i32* %row, align 4, !dbg !8160
  br label %for.cond, !dbg !8161, !llvm.loop !8162

for.end103:                                       ; preds = %for.cond
  ret void, !dbg !8164
}

declare dso_local %struct.basic_block_def* @split_edge_and_insert(%struct.edge_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local void @end_sequence() #2

declare dso_local i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @duplicate_insn_chain(%struct.rtx_def*, %struct.rtx_def*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2421, !2422, !2423}
!llvm.ident = !{!2424}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_sms", scope: !2, file: !3, line: 2885, type: !2395, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !953, globals: !2275, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "modulo-sched.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !150, !154, !160, !165, !170, !189, !196, !203, !397, !403, !409, !416, !592, !596, !606, !648, !771, !914, !928, !936, !941, !945}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !142, line: 31, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146, !147, !148, !149}
!144 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!147 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!148 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !142, line: 91, baseType: !7, size: 32, elements: !151)
!151 = !{!152, !153}
!152 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!153 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !155, line: 363, baseType: !7, size: 32, elements: !156)
!155 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!156 = !{!157, !158, !159}
!157 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!158 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!159 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!160 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !155, line: 355, baseType: !7, size: 32, elements: !161)
!161 = !{!162, !163, !164}
!162 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!163 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!164 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!165 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !166, line: 474, baseType: !7, size: 32, elements: !167)
!166 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!167 = !{!168, !169}
!168 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!169 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!170 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !171, line: 280, baseType: !7, size: 32, elements: !172)
!171 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!172 = !{!173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!173 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!183 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!184 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !171, line: 1817, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !171, line: 1805, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202}
!198 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!203 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !171, line: 39, baseType: !7, size: 32, elements: !204)
!204 = !{!205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396}
!205 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!206 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!207 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!208 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!209 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!210 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!211 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!212 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!213 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!214 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!215 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!216 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!217 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!220 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!221 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!222 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!223 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!224 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!225 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!226 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!227 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!228 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!229 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!230 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!231 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!232 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!233 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!234 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!235 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!236 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!237 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!238 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!239 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!240 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!241 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!242 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!243 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!244 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!245 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!246 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!247 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!248 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!249 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!250 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!251 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!252 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!253 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!254 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!255 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!256 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!257 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!258 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!259 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!260 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!261 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!262 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!263 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!264 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!265 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!266 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!267 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!268 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!269 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!270 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!271 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!272 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!273 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!274 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!275 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!277 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!278 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!279 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!280 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!281 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!282 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!283 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!284 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!285 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!286 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!287 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!288 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!289 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!290 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!291 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!292 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!293 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!294 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!295 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!296 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!297 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!298 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!299 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!300 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!301 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!302 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!303 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!304 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!305 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!306 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!307 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!308 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!309 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!310 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!311 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!312 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!313 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!314 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!315 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!316 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!317 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!318 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!320 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!321 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!322 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!323 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!324 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!325 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!326 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!327 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!328 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!329 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!330 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!331 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!332 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!333 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!334 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!335 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!336 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!337 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!338 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!339 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!340 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!341 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!342 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!343 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!344 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!345 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!346 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!347 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!348 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!349 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!350 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!351 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!352 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!353 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!354 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!355 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!356 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!357 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!369 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!370 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!371 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!372 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!373 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!374 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!383 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!384 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!385 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!386 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!387 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!388 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!389 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!390 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!391 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!392 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!393 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!394 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!395 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!396 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !398, line: 37, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./ddg.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402}
!400 = !DIEnumerator(name: "TRUE_DEP", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "OUTPUT_DEP", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "ANTI_DEP", value: 2, isUnsigned: true)
!403 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !398, line: 38, baseType: !7, size: 32, elements: !404)
!404 = !{!405, !406, !407, !408}
!405 = !DIEnumerator(name: "REG_OR_MEM_DEP", value: 0, isUnsigned: true)
!406 = !DIEnumerator(name: "REG_DEP", value: 1, isUnsigned: true)
!407 = !DIEnumerator(name: "MEM_DEP", value: 2, isUnsigned: true)
!408 = !DIEnumerator(name: "REG_AND_MEM_DEP", value: 3, isUnsigned: true)
!409 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !410, line: 104, baseType: !7, size: 32, elements: !411)
!410 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!411 = !{!412, !413, !414, !415}
!412 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!413 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!414 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!415 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!416 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !417, line: 74, baseType: !7, size: 32, elements: !418)
!417 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!418 = !{!419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591}
!419 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!591 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!592 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !155, line: 912, baseType: !7, size: 32, elements: !593)
!593 = !{!594, !595}
!594 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!595 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!596 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !142, line: 170, baseType: !7, size: 32, elements: !597)
!597 = !{!598, !599, !600, !601, !602, !603, !604, !605}
!598 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!599 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!600 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!601 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!602 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!603 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!604 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!605 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!606 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_counter", file: !607, line: 27, baseType: !7, size: 32, elements: !608)
!607 = !DIFile(filename: "./dbgcnt.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!608 = !{!609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647}
!609 = !DIEnumerator(name: "auto_inc_dec", value: 0, isUnsigned: true)
!610 = !DIEnumerator(name: "ccp", value: 1, isUnsigned: true)
!611 = !DIEnumerator(name: "cfg_cleanup", value: 2, isUnsigned: true)
!612 = !DIEnumerator(name: "cse2_move2add", value: 3, isUnsigned: true)
!613 = !DIEnumerator(name: "cprop", value: 4, isUnsigned: true)
!614 = !DIEnumerator(name: "dce", value: 5, isUnsigned: true)
!615 = !DIEnumerator(name: "dce_fast", value: 6, isUnsigned: true)
!616 = !DIEnumerator(name: "dce_ud", value: 7, isUnsigned: true)
!617 = !DIEnumerator(name: "delete_trivial_dead", value: 8, isUnsigned: true)
!618 = !DIEnumerator(name: "df_byte_scan", value: 9, isUnsigned: true)
!619 = !DIEnumerator(name: "dse", value: 10, isUnsigned: true)
!620 = !DIEnumerator(name: "dse1", value: 11, isUnsigned: true)
!621 = !DIEnumerator(name: "dse2", value: 12, isUnsigned: true)
!622 = !DIEnumerator(name: "gcse2_delete", value: 13, isUnsigned: true)
!623 = !DIEnumerator(name: "global_alloc_at_func", value: 14, isUnsigned: true)
!624 = !DIEnumerator(name: "global_alloc_at_reg", value: 15, isUnsigned: true)
!625 = !DIEnumerator(name: "hoist", value: 16, isUnsigned: true)
!626 = !DIEnumerator(name: "ia64_sched2", value: 17, isUnsigned: true)
!627 = !DIEnumerator(name: "if_conversion", value: 18, isUnsigned: true)
!628 = !DIEnumerator(name: "if_after_combine", value: 19, isUnsigned: true)
!629 = !DIEnumerator(name: "if_after_reload", value: 20, isUnsigned: true)
!630 = !DIEnumerator(name: "local_alloc_for_sched", value: 21, isUnsigned: true)
!631 = !DIEnumerator(name: "postreload_cse", value: 22, isUnsigned: true)
!632 = !DIEnumerator(name: "pre", value: 23, isUnsigned: true)
!633 = !DIEnumerator(name: "pre_insn", value: 24, isUnsigned: true)
!634 = !DIEnumerator(name: "treepre_insert", value: 25, isUnsigned: true)
!635 = !DIEnumerator(name: "sched2_func", value: 26, isUnsigned: true)
!636 = !DIEnumerator(name: "sched_block", value: 27, isUnsigned: true)
!637 = !DIEnumerator(name: "sched_func", value: 28, isUnsigned: true)
!638 = !DIEnumerator(name: "sched_insn", value: 29, isUnsigned: true)
!639 = !DIEnumerator(name: "sched_region", value: 30, isUnsigned: true)
!640 = !DIEnumerator(name: "sel_sched_cnt", value: 31, isUnsigned: true)
!641 = !DIEnumerator(name: "sel_sched_region_cnt", value: 32, isUnsigned: true)
!642 = !DIEnumerator(name: "sel_sched_insn_cnt", value: 33, isUnsigned: true)
!643 = !DIEnumerator(name: "sms_sched_loop", value: 34, isUnsigned: true)
!644 = !DIEnumerator(name: "store_motion", value: 35, isUnsigned: true)
!645 = !DIEnumerator(name: "split_for_sched2", value: 36, isUnsigned: true)
!646 = !DIEnumerator(name: "tail_call", value: 37, isUnsigned: true)
!647 = !DIEnumerator(name: "debug_counter_number_of_counters", value: 38, isUnsigned: true)
!648 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !649, line: 82, baseType: !7, size: 32, elements: !650)
!649 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!650 = !{!651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770}
!651 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!652 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!653 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!654 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!655 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!656 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!657 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!658 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!659 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!660 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!661 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!675 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!676 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!683 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!684 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!688 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!689 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!690 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!691 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!692 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!693 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!694 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!695 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!696 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!697 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!698 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!699 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!700 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!701 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!702 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!703 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!704 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!705 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!706 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!707 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!708 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!709 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!710 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!711 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!712 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!713 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!714 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!715 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!716 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!717 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!718 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!719 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!720 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!721 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!722 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!723 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!724 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!725 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!726 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!727 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!728 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!729 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!730 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!731 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!732 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!733 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!734 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!735 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!736 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!737 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!738 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!739 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!740 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!741 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!742 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!743 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!744 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!745 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!746 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!747 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!748 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!749 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!750 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!751 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!752 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!753 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!754 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!755 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!756 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!757 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!758 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!759 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!760 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!761 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!762 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!763 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!764 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!765 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!766 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!767 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!768 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!769 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!770 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!771 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !772, line: 45, baseType: !7, size: 32, elements: !773)
!772 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!773 = !{!774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913}
!774 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!775 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!776 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!777 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!778 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!779 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!780 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!781 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!782 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!783 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!784 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!785 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!786 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!787 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!788 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!789 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!790 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!791 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!792 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!793 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!794 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!795 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!796 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!797 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!798 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!799 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!800 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!801 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!802 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!803 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!804 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!805 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!806 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!807 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!808 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!809 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!810 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!811 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!812 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!813 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!814 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!815 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!816 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!817 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!818 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!819 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!820 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!821 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!822 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!823 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!824 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!825 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!826 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!827 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!828 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!829 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!830 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!831 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!832 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!833 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!834 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!835 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!836 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!837 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!838 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!839 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!840 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!841 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!842 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!843 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!844 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!845 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!846 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!847 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!848 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!849 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!850 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!851 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!852 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!853 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!854 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!855 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!856 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!857 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!858 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!859 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!860 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!861 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!862 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!863 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!864 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!865 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!866 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!867 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!868 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!869 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!870 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!871 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!872 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!873 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!874 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!875 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!876 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!877 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!878 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!879 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!880 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!881 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!882 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!883 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!884 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!885 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!886 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!887 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!888 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!889 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!890 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!891 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!892 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!893 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!894 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!895 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!896 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!897 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!898 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!899 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!900 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!901 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!902 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!903 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!904 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!905 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!906 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!907 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!908 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!909 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!910 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!911 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!912 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!913 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!914 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !155, line: 295, baseType: !7, size: 32, elements: !915)
!915 = !{!916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927}
!916 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!917 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!918 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!919 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!920 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!921 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!922 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!923 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!924 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!925 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!926 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!927 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!928 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "sched_pass_id_t", file: !929, line: 37, baseType: !7, size: 32, elements: !930)
!929 = !DIFile(filename: "./sched-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!930 = !{!931, !932, !933, !934, !935}
!931 = !DIEnumerator(name: "SCHED_PASS_UNKNOWN", value: 0, isUnsigned: true)
!932 = !DIEnumerator(name: "SCHED_RGN_PASS", value: 1, isUnsigned: true)
!933 = !DIEnumerator(name: "SCHED_EBB_PASS", value: 2, isUnsigned: true)
!934 = !DIEnumerator(name: "SCHED_SMS_PASS", value: 3, isUnsigned: true)
!935 = !DIEnumerator(name: "SCHED_SEL_PASS", value: 4, isUnsigned: true)
!936 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !142, line: 498, baseType: !7, size: 32, elements: !937)
!937 = !{!938, !939, !940}
!938 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!939 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!940 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!941 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "sms_direction", file: !3, line: 2052, baseType: !7, size: 32, elements: !942)
!942 = !{!943, !944}
!943 = !DIEnumerator(name: "BOTTOMUP", value: 0, isUnsigned: true)
!944 = !DIEnumerator(name: "TOPDOWN", value: 1, isUnsigned: true)
!945 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_methods", file: !946, line: 291, baseType: !7, size: 32, elements: !947)
!946 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!947 = !{!948, !949, !950, !951, !952}
!948 = !DIEnumerator(name: "OPTAB_DIRECT", value: 0, isUnsigned: true)
!949 = !DIEnumerator(name: "OPTAB_LIB", value: 1, isUnsigned: true)
!950 = !DIEnumerator(name: "OPTAB_WIDEN", value: 2, isUnsigned: true)
!951 = !DIEnumerator(name: "OPTAB_LIB_WIDEN", value: 3, isUnsigned: true)
!952 = !DIEnumerator(name: "OPTAB_MUST_WIDEN", value: 4, isUnsigned: true)
!953 = !{!954, !1015, !1082, !771, !992, !2217, !2218, !1103, !2238, !1579, !2250, !2256, !7, !1065, !2257, !2219, !2225, !2227, !5, !2268}
!954 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !955, size: 64)
!955 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddg_ptr", file: !398, line: 33, baseType: !956)
!956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !957, size: 64)
!957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ddg", file: !398, line: 112, size: 448, elements: !958)
!958 = !{!959, !2161, !2162, !2163, !2164, !2165, !2212, !2213, !2214, !2215}
!959 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !957, file: !398, line: 115, baseType: !960, size: 64)
!960 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !961, line: 111, baseType: !962)
!961 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !963, size: 64)
!963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !155, line: 217, size: 832, elements: !964)
!964 = !{!965, !2128, !2129, !2130, !2131, !2135, !2136, !2137, !2155, !2156, !2157, !2158, !2159, !2160}
!965 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !963, file: !155, line: 219, baseType: !966, size: 64)
!966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !967, size: 64)
!967 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !155, line: 151, baseType: !968)
!968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !155, line: 151, size: 128, elements: !969)
!969 = !{!970}
!970 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !968, file: !155, line: 151, baseType: !971, size: 128)
!971 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !155, line: 150, baseType: !972)
!972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !155, line: 150, size: 128, elements: !973)
!973 = !{!974, !975, !976}
!974 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !972, file: !155, line: 150, baseType: !7, size: 32)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !972, file: !155, line: 150, baseType: !7, size: 32, offset: 32)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !972, file: !155, line: 150, baseType: !977, size: 64, offset: 64)
!977 = !DICompositeType(tag: DW_TAG_array_type, baseType: !978, size: 64, elements: !1030)
!978 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !961, line: 108, baseType: !979)
!979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !980, size: 64)
!980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !155, line: 122, size: 512, elements: !981)
!981 = !{!982, !983, !984, !2120, !2121, !2122, !2123, !2124, !2125, !2126}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !980, file: !155, line: 124, baseType: !962, size: 64)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !980, file: !155, line: 125, baseType: !962, size: 64, offset: 64)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !980, file: !155, line: 131, baseType: !985, size: 64, offset: 128)
!985 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !155, line: 128, size: 64, elements: !986)
!986 = !{!987, !991}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !985, file: !155, line: 129, baseType: !988, size: 64)
!988 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !961, line: 66, baseType: !989)
!989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !990, size: 64)
!990 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !961, line: 65, flags: DIFlagFwdDecl)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !985, file: !155, line: 130, baseType: !992, size: 64)
!992 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !961, line: 50, baseType: !993)
!993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !994, size: 64)
!994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !772, line: 240, size: 384, elements: !995)
!995 = !{!996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006}
!996 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !994, file: !772, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !994, file: !772, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !994, file: !772, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !994, file: !772, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !994, file: !772, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !994, file: !772, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !994, file: !772, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !994, file: !772, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !994, file: !772, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !994, file: !772, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !994, file: !772, line: 321, baseType: !1007, size: 320, offset: 64)
!1007 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !772, line: 315, size: 320, elements: !1008)
!1008 = !{!1009, !2087, !2089, !2118, !2119}
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1007, file: !772, line: 316, baseType: !1010, size: 64)
!1010 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1011, size: 64, elements: !1030)
!1011 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !772, line: 183, baseType: !1012)
!1012 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !772, line: 166, size: 64, elements: !1013)
!1013 = !{!1014, !1016, !1017, !1021, !1022, !1032, !1033, !1045, !1048, !1112, !2065, !2066, !2077, !2084}
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1012, file: !772, line: 168, baseType: !1015, size: 32)
!1015 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1012, file: !772, line: 169, baseType: !7, size: 32)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1012, file: !772, line: 170, baseType: !1018, size: 64)
!1018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1019, size: 64)
!1019 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1020)
!1020 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1012, file: !772, line: 171, baseType: !992, size: 64)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1012, file: !772, line: 172, baseType: !1023, size: 64)
!1023 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !961, line: 53, baseType: !1024)
!1024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1025, size: 64)
!1025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !772, line: 359, size: 128, elements: !1026)
!1026 = !{!1027, !1028}
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1025, file: !772, line: 360, baseType: !1015, size: 32)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1025, file: !772, line: 361, baseType: !1029, size: 64, offset: 64)
!1029 = !DICompositeType(tag: DW_TAG_array_type, baseType: !992, size: 64, elements: !1030)
!1030 = !{!1031}
!1031 = !DISubrange(count: 1)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1012, file: !772, line: 173, baseType: !5, size: 32)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1012, file: !772, line: 174, baseType: !1034, size: 32)
!1034 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !772, line: 133, baseType: !1035)
!1035 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !772, line: 115, size: 32, elements: !1036)
!1036 = !{!1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044}
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1035, file: !772, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1035, file: !772, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1035, file: !772, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1035, file: !772, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1035, file: !772, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1035, file: !772, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1035, file: !772, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1035, file: !772, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1012, file: !772, line: 175, baseType: !1046, size: 64)
!1046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1047, size: 64)
!1047 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !772, line: 175, flags: DIFlagFwdDecl)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1012, file: !772, line: 176, baseType: !1049, size: 64)
!1049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1050, size: 64)
!1050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1051, line: 75, size: 256, elements: !1052)
!1051 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1052 = !{!1053, !1068, !1069, !1070}
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1050, file: !1051, line: 76, baseType: !1054, size: 64)
!1054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1055, size: 64)
!1055 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1051, line: 68, baseType: !1056)
!1056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1051, line: 63, size: 320, elements: !1057)
!1057 = !{!1058, !1060, !1061, !1062}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1056, file: !1051, line: 64, baseType: !1059, size: 64)
!1059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1056, size: 64)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1056, file: !1051, line: 65, baseType: !1059, size: 64, offset: 64)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1056, file: !1051, line: 66, baseType: !7, size: 32, offset: 128)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1056, file: !1051, line: 67, baseType: !1063, size: 128, offset: 192)
!1063 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1064, size: 128, elements: !1066)
!1064 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1051, line: 29, baseType: !1065)
!1065 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1066 = !{!1067}
!1067 = !DISubrange(count: 2)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1050, file: !1051, line: 77, baseType: !1054, size: 64, offset: 64)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1050, file: !1051, line: 78, baseType: !7, size: 32, offset: 128)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1050, file: !1051, line: 79, baseType: !1071, size: 64, offset: 192)
!1071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1072, size: 64)
!1072 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1051, line: 49, baseType: !1073)
!1073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1051, line: 45, size: 832, elements: !1074)
!1074 = !{!1075, !1076, !1077}
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1073, file: !1051, line: 46, baseType: !1059, size: 64)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1073, file: !1051, line: 47, baseType: !1049, size: 64, offset: 64)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1073, file: !1051, line: 48, baseType: !1078, size: 704, offset: 128)
!1078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1079, line: 164, size: 704, elements: !1080)
!1079 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1080 = !{!1081, !1083, !1094, !1095, !1096, !1097, !1098, !1099, !1104, !1108, !1109, !1110, !1111}
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1078, file: !1079, line: 166, baseType: !1082, size: 64)
!1082 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1078, file: !1079, line: 167, baseType: !1084, size: 64, offset: 64)
!1084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1085, size: 64)
!1085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1079, line: 157, size: 192, elements: !1086)
!1086 = !{!1087, !1089, !1090}
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1085, file: !1079, line: 159, baseType: !1088, size: 64)
!1088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1020, size: 64)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1085, file: !1079, line: 160, baseType: !1084, size: 64, offset: 64)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1085, file: !1079, line: 161, baseType: !1091, size: 32, offset: 128)
!1091 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1020, size: 32, elements: !1092)
!1092 = !{!1093}
!1093 = !DISubrange(count: 4)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1078, file: !1079, line: 168, baseType: !1088, size: 64, offset: 128)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1078, file: !1079, line: 169, baseType: !1088, size: 64, offset: 192)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1078, file: !1079, line: 170, baseType: !1088, size: 64, offset: 256)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1078, file: !1079, line: 171, baseType: !1082, size: 64, offset: 320)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1078, file: !1079, line: 172, baseType: !1015, size: 32, offset: 384)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1078, file: !1079, line: 176, baseType: !1100, size: 64, offset: 448)
!1100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1101, size: 64)
!1101 = !DISubroutineType(types: !1102)
!1102 = !{!1084, !1103, !1082}
!1103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1078, file: !1079, line: 177, baseType: !1105, size: 64, offset: 512)
!1105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1106, size: 64)
!1106 = !DISubroutineType(types: !1107)
!1107 = !{null, !1103, !1084}
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1078, file: !1079, line: 178, baseType: !1103, size: 64, offset: 576)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1078, file: !1079, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1078, file: !1079, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1078, file: !1079, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1012, file: !772, line: 177, baseType: !1113, size: 64)
!1113 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !961, line: 56, baseType: !1114)
!1114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1115, size: 64)
!1115 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !171, line: 3371, size: 1792, elements: !1116)
!1116 = !{!1117, !1150, !1156, !1167, !1186, !1197, !1202, !1209, !1215, !1229, !1241, !1279, !1284, !1312, !1320, !1321, !1326, !1335, !1341, !1346, !1350, !1354, !1704, !1753, !1759, !1765, !1772, !1795, !1809, !1826, !1838, !1860, !1875, !2047}
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1115, file: !171, line: 3372, baseType: !1118, size: 64)
!1118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !171, line: 360, size: 64, elements: !1119)
!1119 = !{!1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149}
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1118, file: !171, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1118, file: !171, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1118, file: !171, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1118, file: !171, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1118, file: !171, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1118, file: !171, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1118, file: !171, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1118, file: !171, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1118, file: !171, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1118, file: !171, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1118, file: !171, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1118, file: !171, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1118, file: !171, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1118, file: !171, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1118, file: !171, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1118, file: !171, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1118, file: !171, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1118, file: !171, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1118, file: !171, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1118, file: !171, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1118, file: !171, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1118, file: !171, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1118, file: !171, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1118, file: !171, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1118, file: !171, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1118, file: !171, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1118, file: !171, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1118, file: !171, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1118, file: !171, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1118, file: !171, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1115, file: !171, line: 3373, baseType: !1151, size: 192)
!1151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !171, line: 402, size: 192, elements: !1152)
!1152 = !{!1153, !1154, !1155}
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1151, file: !171, line: 403, baseType: !1118, size: 64)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1151, file: !171, line: 404, baseType: !1113, size: 64, offset: 64)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1151, file: !171, line: 405, baseType: !1113, size: 64, offset: 128)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1115, file: !171, line: 3374, baseType: !1157, size: 320)
!1157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !171, line: 1384, size: 320, elements: !1158)
!1158 = !{!1159, !1160}
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1157, file: !171, line: 1385, baseType: !1151, size: 192)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1157, file: !171, line: 1386, baseType: !1161, size: 128, offset: 192)
!1161 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1162, line: 58, baseType: !1163)
!1162 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1163 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1162, line: 54, size: 128, elements: !1164)
!1164 = !{!1165, !1166}
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1163, file: !1162, line: 56, baseType: !1065, size: 64)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1163, file: !1162, line: 57, baseType: !1082, size: 64, offset: 64)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1115, file: !171, line: 3375, baseType: !1168, size: 256)
!1168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !171, line: 1397, size: 256, elements: !1169)
!1169 = !{!1170, !1171}
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1168, file: !171, line: 1398, baseType: !1151, size: 192)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1168, file: !171, line: 1399, baseType: !1172, size: 64, offset: 192)
!1172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1173, size: 64)
!1173 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1174, line: 52, size: 256, elements: !1175)
!1174 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1175 = !{!1176, !1177, !1178, !1179, !1180, !1181, !1182}
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1173, file: !1174, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1173, file: !1174, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1173, file: !1174, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1173, file: !1174, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1173, file: !1174, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1173, file: !1174, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1173, file: !1174, line: 62, baseType: !1183, size: 192, offset: 64)
!1183 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1065, size: 192, elements: !1184)
!1184 = !{!1185}
!1185 = !DISubrange(count: 3)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1115, file: !171, line: 3376, baseType: !1187, size: 256)
!1187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !171, line: 1408, size: 256, elements: !1188)
!1188 = !{!1189, !1190}
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1187, file: !171, line: 1409, baseType: !1151, size: 192)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1187, file: !171, line: 1410, baseType: !1191, size: 64, offset: 192)
!1191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1192, size: 64)
!1192 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1193, line: 27, size: 192, elements: !1194)
!1193 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1194 = !{!1195, !1196}
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1192, file: !1193, line: 29, baseType: !1161, size: 128)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1192, file: !1193, line: 30, baseType: !5, size: 32, offset: 128)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1115, file: !171, line: 3377, baseType: !1198, size: 256)
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !171, line: 1437, size: 256, elements: !1199)
!1199 = !{!1200, !1201}
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1198, file: !171, line: 1438, baseType: !1151, size: 192)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1198, file: !171, line: 1439, baseType: !1113, size: 64, offset: 192)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1115, file: !171, line: 3378, baseType: !1203, size: 256)
!1203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !171, line: 1418, size: 256, elements: !1204)
!1204 = !{!1205, !1206, !1207}
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1203, file: !171, line: 1419, baseType: !1151, size: 192)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1203, file: !171, line: 1420, baseType: !1015, size: 32, offset: 192)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1203, file: !171, line: 1421, baseType: !1208, size: 8, offset: 224)
!1208 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1020, size: 8, elements: !1030)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1115, file: !171, line: 3379, baseType: !1210, size: 320)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !171, line: 1428, size: 320, elements: !1211)
!1211 = !{!1212, !1213, !1214}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1210, file: !171, line: 1429, baseType: !1151, size: 192)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1210, file: !171, line: 1430, baseType: !1113, size: 64, offset: 192)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1210, file: !171, line: 1431, baseType: !1113, size: 64, offset: 256)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1115, file: !171, line: 3380, baseType: !1216, size: 320)
!1216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !171, line: 1460, size: 320, elements: !1217)
!1217 = !{!1218, !1219}
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1216, file: !171, line: 1461, baseType: !1151, size: 192)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1216, file: !171, line: 1462, baseType: !1220, size: 128, offset: 192)
!1220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1221, line: 31, size: 128, elements: !1222)
!1221 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1222 = !{!1223, !1227, !1228}
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1220, file: !1221, line: 32, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1225, size: 64)
!1225 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1226)
!1226 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1220, file: !1221, line: 33, baseType: !7, size: 32, offset: 64)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1220, file: !1221, line: 34, baseType: !7, size: 32, offset: 96)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1115, file: !171, line: 3381, baseType: !1230, size: 384)
!1230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !171, line: 2507, size: 384, elements: !1231)
!1231 = !{!1232, !1233, !1238, !1239, !1240}
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1230, file: !171, line: 2508, baseType: !1151, size: 192)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1230, file: !171, line: 2509, baseType: !1234, size: 32, offset: 192)
!1234 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1235, line: 58, baseType: !1236)
!1235 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1236 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1237, line: 44, baseType: !7)
!1237 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1230, file: !171, line: 2510, baseType: !7, size: 32, offset: 224)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1230, file: !171, line: 2511, baseType: !1113, size: 64, offset: 256)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1230, file: !171, line: 2512, baseType: !1113, size: 64, offset: 320)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1115, file: !171, line: 3382, baseType: !1242, size: 896)
!1242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !171, line: 2652, size: 896, elements: !1243)
!1243 = !{!1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276}
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1242, file: !171, line: 2653, baseType: !1230, size: 384)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1242, file: !171, line: 2654, baseType: !1113, size: 64, offset: 384)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1242, file: !171, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1242, file: !171, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1242, file: !171, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1242, file: !171, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1242, file: !171, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1242, file: !171, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1242, file: !171, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1242, file: !171, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1242, file: !171, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1242, file: !171, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1242, file: !171, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1242, file: !171, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1242, file: !171, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1242, file: !171, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1242, file: !171, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1242, file: !171, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1242, file: !171, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1242, file: !171, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1242, file: !171, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1242, file: !171, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1242, file: !171, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1242, file: !171, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1242, file: !171, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1242, file: !171, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1242, file: !171, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1242, file: !171, line: 2703, baseType: !7, size: 32, offset: 512)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1242, file: !171, line: 2705, baseType: !1113, size: 64, offset: 576)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1242, file: !171, line: 2706, baseType: !1113, size: 64, offset: 640)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1242, file: !171, line: 2707, baseType: !1113, size: 64, offset: 704)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1242, file: !171, line: 2708, baseType: !1113, size: 64, offset: 768)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1242, file: !171, line: 2711, baseType: !1277, size: 64, offset: 832)
!1277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1278, size: 64)
!1278 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !171, line: 2711, flags: DIFlagFwdDecl)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1115, file: !171, line: 3383, baseType: !1280, size: 960)
!1280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !171, line: 2756, size: 960, elements: !1281)
!1281 = !{!1282, !1283}
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1280, file: !171, line: 2757, baseType: !1242, size: 896)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1280, file: !171, line: 2758, baseType: !992, size: 64, offset: 896)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1115, file: !171, line: 3384, baseType: !1285, size: 1472)
!1285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !171, line: 3114, size: 1472, elements: !1286)
!1286 = !{!1287, !1308, !1309, !1310, !1311}
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1285, file: !171, line: 3115, baseType: !1288, size: 1216)
!1288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !171, line: 2984, size: 1216, elements: !1289)
!1289 = !{!1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307}
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1288, file: !171, line: 2985, baseType: !1280, size: 960)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1288, file: !171, line: 2986, baseType: !1113, size: 64, offset: 960)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1288, file: !171, line: 2987, baseType: !1113, size: 64, offset: 1024)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1288, file: !171, line: 2988, baseType: !1113, size: 64, offset: 1088)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1288, file: !171, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1288, file: !171, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1288, file: !171, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1288, file: !171, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1288, file: !171, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1288, file: !171, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1288, file: !171, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1288, file: !171, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1288, file: !171, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1288, file: !171, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1288, file: !171, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1288, file: !171, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1288, file: !171, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1288, file: !171, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1285, file: !171, line: 3117, baseType: !1113, size: 64, offset: 1216)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1285, file: !171, line: 3119, baseType: !1113, size: 64, offset: 1280)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1285, file: !171, line: 3121, baseType: !1113, size: 64, offset: 1344)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1285, file: !171, line: 3123, baseType: !1113, size: 64, offset: 1408)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1115, file: !171, line: 3385, baseType: !1313, size: 1088)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !171, line: 2874, size: 1088, elements: !1314)
!1314 = !{!1315, !1316, !1317}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1313, file: !171, line: 2875, baseType: !1280, size: 960)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1313, file: !171, line: 2876, baseType: !992, size: 64, offset: 960)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1313, file: !171, line: 2877, baseType: !1318, size: 64, offset: 1024)
!1318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1319, size: 64)
!1319 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !171, line: 2856, flags: DIFlagFwdDecl)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1115, file: !171, line: 3386, baseType: !1288, size: 1216)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1115, file: !171, line: 3387, baseType: !1322, size: 1280)
!1322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !171, line: 3093, size: 1280, elements: !1323)
!1323 = !{!1324, !1325}
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1322, file: !171, line: 3094, baseType: !1288, size: 1216)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1322, file: !171, line: 3095, baseType: !1318, size: 64, offset: 1216)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1115, file: !171, line: 3388, baseType: !1327, size: 1216)
!1327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !171, line: 2824, size: 1216, elements: !1328)
!1328 = !{!1329, !1330, !1331, !1332, !1333, !1334}
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1327, file: !171, line: 2825, baseType: !1242, size: 896)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1327, file: !171, line: 2827, baseType: !1113, size: 64, offset: 896)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1327, file: !171, line: 2828, baseType: !1113, size: 64, offset: 960)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1327, file: !171, line: 2829, baseType: !1113, size: 64, offset: 1024)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1327, file: !171, line: 2830, baseType: !1113, size: 64, offset: 1088)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1327, file: !171, line: 2831, baseType: !1113, size: 64, offset: 1152)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1115, file: !171, line: 3389, baseType: !1336, size: 1024)
!1336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !171, line: 2850, size: 1024, elements: !1337)
!1337 = !{!1338, !1339, !1340}
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1336, file: !171, line: 2851, baseType: !1280, size: 960)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1336, file: !171, line: 2852, baseType: !1015, size: 32, offset: 960)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1336, file: !171, line: 2853, baseType: !1015, size: 32, offset: 992)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1115, file: !171, line: 3390, baseType: !1342, size: 1024)
!1342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !171, line: 2857, size: 1024, elements: !1343)
!1343 = !{!1344, !1345}
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1342, file: !171, line: 2858, baseType: !1280, size: 960)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1342, file: !171, line: 2859, baseType: !1318, size: 64, offset: 960)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1115, file: !171, line: 3391, baseType: !1347, size: 960)
!1347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !171, line: 2862, size: 960, elements: !1348)
!1348 = !{!1349}
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1347, file: !171, line: 2863, baseType: !1280, size: 960)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1115, file: !171, line: 3392, baseType: !1351, size: 1472)
!1351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !171, line: 3304, size: 1472, elements: !1352)
!1352 = !{!1353}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1351, file: !171, line: 3305, baseType: !1285, size: 1472)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1115, file: !171, line: 3393, baseType: !1355, size: 1792)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !171, line: 3248, size: 1792, elements: !1356)
!1356 = !{!1357, !1358, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1355, file: !171, line: 3249, baseType: !1285, size: 1472)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1355, file: !171, line: 3251, baseType: !1359, size: 64, offset: 1472)
!1359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1360, size: 64)
!1360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1361, line: 463, size: 1152, elements: !1362)
!1361 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1362 = !{!1363, !1527, !1557, !1558, !1561, !1627, !1628, !1629, !1630, !1631, !1632, !1656, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682}
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1360, file: !1361, line: 464, baseType: !1364, size: 64)
!1364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1365, size: 64)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !1366)
!1366 = !{!1367, !1416, !1429, !1443, !1495, !1508}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1365, file: !135, line: 197, baseType: !1368, size: 64)
!1368 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !1369)
!1369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1370, size: 64)
!1370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !1371)
!1371 = !{!1372, !1373, !1374, !1375, !1376, !1377, !1404, !1413, !1414, !1415}
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1370, file: !135, line: 119, baseType: !1369, size: 64)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1370, file: !135, line: 122, baseType: !1369, size: 64, offset: 64)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1370, file: !135, line: 123, baseType: !1369, size: 64, offset: 128)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1370, file: !135, line: 126, baseType: !1015, size: 32, offset: 192)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1370, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1370, file: !135, line: 165, baseType: !1378, size: 192, offset: 256)
!1378 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !1379)
!1379 = !{!1380, !1393, !1399}
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1378, file: !135, line: 137, baseType: !1381, size: 128)
!1381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !1382)
!1382 = !{!1383, !1392}
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1381, file: !135, line: 135, baseType: !1384, size: 64)
!1384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1385, size: 64)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !1386)
!1386 = !{!1387, !1388, !1389, !1390, !1391}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1385, file: !135, line: 96, baseType: !1384, size: 64)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1385, file: !135, line: 97, baseType: !1384, size: 64, offset: 64)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1385, file: !135, line: 101, baseType: !1113, size: 64, offset: 128)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1385, file: !135, line: 106, baseType: !1113, size: 64, offset: 192)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1385, file: !135, line: 111, baseType: !1113, size: 64, offset: 256)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1381, file: !135, line: 136, baseType: !1384, size: 64, offset: 64)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1378, file: !135, line: 151, baseType: !1394, size: 192)
!1394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !1395)
!1395 = !{!1396, !1397, !1398}
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1394, file: !135, line: 141, baseType: !1113, size: 64)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1394, file: !135, line: 145, baseType: !1113, size: 64, offset: 64)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1394, file: !135, line: 150, baseType: !1015, size: 32, offset: 128)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1378, file: !135, line: 164, baseType: !1400, size: 128)
!1400 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !1401)
!1401 = !{!1402, !1403}
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1400, file: !135, line: 161, baseType: !1113, size: 64)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1400, file: !135, line: 163, baseType: !1234, size: 32, offset: 64)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1370, file: !135, line: 168, baseType: !1405, size: 64, offset: 448)
!1405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1406, size: 64)
!1406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !1407)
!1407 = !{!1408, !1409, !1410, !1411, !1412}
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1406, file: !135, line: 70, baseType: !1405, size: 64)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1406, file: !135, line: 73, baseType: !1369, size: 64, offset: 64)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1406, file: !135, line: 78, baseType: !1113, size: 64, offset: 128)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1406, file: !135, line: 85, baseType: !992, size: 64, offset: 192)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1406, file: !135, line: 88, baseType: !1015, size: 32, offset: 256)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1370, file: !135, line: 173, baseType: !992, size: 64, offset: 512)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1370, file: !135, line: 173, baseType: !992, size: 64, offset: 576)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1370, file: !135, line: 177, baseType: !1226, size: 8, offset: 640)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1365, file: !135, line: 200, baseType: !1417, size: 64, offset: 64)
!1417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1418, size: 64)
!1418 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !1419)
!1419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !1420)
!1420 = !{!1421}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1419, file: !135, line: 185, baseType: !1422, size: 128)
!1422 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !1423)
!1423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !1424)
!1424 = !{!1425, !1426, !1427}
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1423, file: !135, line: 184, baseType: !7, size: 32)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1423, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1423, file: !135, line: 184, baseType: !1428, size: 64, offset: 64)
!1428 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1368, size: 64, elements: !1030)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1365, file: !135, line: 203, baseType: !1430, size: 64, offset: 128)
!1430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1431, size: 64)
!1431 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !1432)
!1432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !1433)
!1433 = !{!1434}
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1432, file: !135, line: 189, baseType: !1435, size: 128)
!1435 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !1436)
!1436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !1437)
!1437 = !{!1438, !1439, !1440}
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1436, file: !135, line: 188, baseType: !7, size: 32)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1436, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1436, file: !135, line: 188, baseType: !1441, size: 64, offset: 64)
!1441 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1442, size: 64, elements: !1030)
!1442 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !1405)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1365, file: !135, line: 207, baseType: !1444, size: 64, offset: 192)
!1444 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1445, line: 144, baseType: !1446)
!1445 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1447, size: 64)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1445, line: 100, size: 896, elements: !1448)
!1448 = !{!1449, !1457, !1462, !1467, !1469, !1472, !1473, !1474, !1475, !1476, !1481, !1483, !1484, !1489, !1494}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1447, file: !1445, line: 102, baseType: !1450, size: 64)
!1450 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1445, line: 52, baseType: !1451)
!1451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1452, size: 64)
!1452 = !DISubroutineType(types: !1453)
!1453 = !{!1454, !1455}
!1454 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1445, line: 47, baseType: !7)
!1455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1456, size: 64)
!1456 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1447, file: !1445, line: 105, baseType: !1458, size: 64, offset: 64)
!1458 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1445, line: 59, baseType: !1459)
!1459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1460, size: 64)
!1460 = !DISubroutineType(types: !1461)
!1461 = !{!1015, !1455, !1455}
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1447, file: !1445, line: 108, baseType: !1463, size: 64, offset: 128)
!1463 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1445, line: 63, baseType: !1464)
!1464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1465, size: 64)
!1465 = !DISubroutineType(types: !1466)
!1466 = !{null, !1103}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1447, file: !1445, line: 111, baseType: !1468, size: 64, offset: 192)
!1468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1103, size: 64)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1447, file: !1445, line: 114, baseType: !1470, size: 64, offset: 256)
!1470 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1471, line: 46, baseType: !1065)
!1471 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1447, file: !1445, line: 117, baseType: !1470, size: 64, offset: 320)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1447, file: !1445, line: 120, baseType: !1470, size: 64, offset: 384)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1447, file: !1445, line: 124, baseType: !7, size: 32, offset: 448)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1447, file: !1445, line: 128, baseType: !7, size: 32, offset: 480)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1447, file: !1445, line: 131, baseType: !1477, size: 64, offset: 512)
!1477 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1445, line: 75, baseType: !1478)
!1478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1479, size: 64)
!1479 = !DISubroutineType(types: !1480)
!1480 = !{!1103, !1470, !1470}
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1447, file: !1445, line: 132, baseType: !1482, size: 64, offset: 576)
!1482 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1445, line: 78, baseType: !1464)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1447, file: !1445, line: 135, baseType: !1103, size: 64, offset: 640)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1447, file: !1445, line: 136, baseType: !1485, size: 64, offset: 704)
!1485 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1445, line: 82, baseType: !1486)
!1486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1487, size: 64)
!1487 = !DISubroutineType(types: !1488)
!1488 = !{!1103, !1103, !1470, !1470}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1447, file: !1445, line: 137, baseType: !1490, size: 64, offset: 768)
!1490 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1445, line: 83, baseType: !1491)
!1491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1492, size: 64)
!1492 = !DISubroutineType(types: !1493)
!1493 = !{null, !1103, !1103}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1447, file: !1445, line: 141, baseType: !7, size: 32, offset: 832)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1365, file: !135, line: 211, baseType: !1496, size: 64, offset: 256)
!1496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1497, size: 64)
!1497 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !171, line: 183, baseType: !1498)
!1498 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !171, line: 183, size: 128, elements: !1499)
!1499 = !{!1500}
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1498, file: !171, line: 183, baseType: !1501, size: 128)
!1501 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !171, line: 182, baseType: !1502)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !171, line: 182, size: 128, elements: !1503)
!1503 = !{!1504, !1505, !1506}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1502, file: !171, line: 182, baseType: !7, size: 32)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1502, file: !171, line: 182, baseType: !7, size: 32, offset: 32)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1502, file: !171, line: 182, baseType: !1507, size: 64, offset: 64)
!1507 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1113, size: 64, elements: !1030)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1365, file: !135, line: 220, baseType: !1509, size: 64, offset: 320)
!1509 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !1510)
!1510 = !{!1511, !1512}
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1509, file: !135, line: 218, baseType: !1496, size: 64)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1509, file: !135, line: 219, baseType: !1513, size: 64)
!1513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1514, size: 64)
!1514 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1515, line: 29, baseType: !1516)
!1515 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1515, line: 29, size: 96, elements: !1517)
!1517 = !{!1518}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1516, file: !1515, line: 29, baseType: !1519, size: 96)
!1519 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1515, line: 27, baseType: !1520)
!1520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1515, line: 27, size: 96, elements: !1521)
!1521 = !{!1522, !1523, !1524}
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1520, file: !1515, line: 27, baseType: !7, size: 32)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1520, file: !1515, line: 27, baseType: !7, size: 32, offset: 32)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1520, file: !1515, line: 27, baseType: !1525, size: 8, offset: 64)
!1525 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1526, size: 8, elements: !1030)
!1526 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1515, line: 26, baseType: !1226)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1360, file: !1361, line: 467, baseType: !1528, size: 64, offset: 64)
!1528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1529, size: 64)
!1529 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !155, line: 374, size: 640, elements: !1530)
!1530 = !{!1531, !1532, !1533, !1546, !1547, !1548, !1549, !1550, !1551, !1553, !1555, !1556}
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1529, file: !155, line: 377, baseType: !960, size: 64)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1529, file: !155, line: 378, baseType: !960, size: 64, offset: 64)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1529, file: !155, line: 381, baseType: !1534, size: 64, offset: 128)
!1534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1535, size: 64)
!1535 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !155, line: 282, baseType: !1536)
!1536 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !155, line: 282, size: 128, elements: !1537)
!1537 = !{!1538}
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1536, file: !155, line: 282, baseType: !1539, size: 128)
!1539 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !155, line: 281, baseType: !1540)
!1540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !155, line: 281, size: 128, elements: !1541)
!1541 = !{!1542, !1543, !1544}
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1540, file: !155, line: 281, baseType: !7, size: 32)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1540, file: !155, line: 281, baseType: !7, size: 32, offset: 32)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1540, file: !155, line: 281, baseType: !1545, size: 64, offset: 64)
!1545 = !DICompositeType(tag: DW_TAG_array_type, baseType: !960, size: 64, elements: !1030)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1529, file: !155, line: 384, baseType: !1015, size: 32, offset: 192)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1529, file: !155, line: 387, baseType: !1015, size: 32, offset: 224)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1529, file: !155, line: 390, baseType: !1015, size: 32, offset: 256)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1529, file: !155, line: 394, baseType: !1534, size: 64, offset: 320)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1529, file: !155, line: 396, baseType: !154, size: 32, offset: 384)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1529, file: !155, line: 399, baseType: !1552, size: 64, offset: 416)
!1552 = !DICompositeType(tag: DW_TAG_array_type, baseType: !160, size: 64, elements: !1066)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1529, file: !155, line: 402, baseType: !1554, size: 64, offset: 480)
!1554 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1066)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1529, file: !155, line: 406, baseType: !1015, size: 32, offset: 544)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1529, file: !155, line: 409, baseType: !1015, size: 32, offset: 576)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1360, file: !1361, line: 470, baseType: !989, size: 64, offset: 128)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1360, file: !1361, line: 473, baseType: !1559, size: 64, offset: 192)
!1559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1560, size: 64)
!1560 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1361, line: 166, flags: DIFlagFwdDecl)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1360, file: !1361, line: 476, baseType: !1562, size: 64, offset: 256)
!1562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1563, size: 64)
!1563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !142, line: 187, size: 256, elements: !1564)
!1564 = !{!1565, !1566, !1625, !1626}
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1563, file: !142, line: 189, baseType: !1015, size: 32)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1563, file: !142, line: 192, baseType: !1567, size: 64, offset: 64)
!1567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1568, size: 64)
!1568 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !142, line: 87, baseType: !1569)
!1569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !142, line: 87, size: 128, elements: !1570)
!1570 = !{!1571}
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1569, file: !142, line: 87, baseType: !1572, size: 128)
!1572 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !142, line: 85, baseType: !1573)
!1573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !142, line: 85, size: 128, elements: !1574)
!1574 = !{!1575, !1576, !1577}
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1573, file: !142, line: 85, baseType: !7, size: 32)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1573, file: !142, line: 85, baseType: !7, size: 32, offset: 32)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1573, file: !142, line: 85, baseType: !1578, size: 64, offset: 64)
!1578 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1579, size: 64, elements: !1030)
!1579 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !142, line: 84, baseType: !1580)
!1580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1581, size: 64)
!1581 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !142, line: 100, size: 1216, elements: !1582)
!1582 = !{!1583, !1584, !1585, !1586, !1587, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1615, !1623, !1624}
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1581, file: !142, line: 102, baseType: !1015, size: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1581, file: !142, line: 105, baseType: !7, size: 32, offset: 32)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1581, file: !142, line: 108, baseType: !962, size: 64, offset: 64)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1581, file: !142, line: 111, baseType: !962, size: 64, offset: 128)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1581, file: !142, line: 114, baseType: !1588, size: 64, offset: 192)
!1588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !142, line: 41, size: 64, elements: !1589)
!1589 = !{!1590, !1591}
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1588, file: !142, line: 42, baseType: !141, size: 32)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1588, file: !142, line: 43, baseType: !7, size: 32, offset: 32)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1581, file: !142, line: 117, baseType: !7, size: 32, offset: 256)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1581, file: !142, line: 120, baseType: !7, size: 32, offset: 288)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1581, file: !142, line: 123, baseType: !1567, size: 64, offset: 320)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1581, file: !142, line: 126, baseType: !1580, size: 64, offset: 384)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1581, file: !142, line: 129, baseType: !1580, size: 64, offset: 448)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1581, file: !142, line: 132, baseType: !1103, size: 64, offset: 512)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1581, file: !142, line: 139, baseType: !1113, size: 64, offset: 576)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1581, file: !142, line: 143, baseType: !1161, size: 128, offset: 640)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1581, file: !142, line: 146, baseType: !1161, size: 128, offset: 768)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1581, file: !142, line: 148, baseType: !1226, size: 8, offset: 896)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1581, file: !142, line: 149, baseType: !1226, size: 8, offset: 904)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1581, file: !142, line: 153, baseType: !150, size: 32, offset: 928)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1581, file: !142, line: 156, baseType: !1605, size: 64, offset: 960)
!1605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1606, size: 64)
!1606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !142, line: 48, size: 320, elements: !1607)
!1607 = !{!1608, !1612, !1613, !1614}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1606, file: !142, line: 50, baseType: !1609, size: 64)
!1609 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !961, line: 58, baseType: !1610)
!1610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1611, size: 64)
!1611 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !961, line: 57, flags: DIFlagFwdDecl)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1606, file: !142, line: 59, baseType: !1161, size: 128, offset: 64)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1606, file: !142, line: 64, baseType: !1226, size: 8, offset: 192)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1606, file: !142, line: 67, baseType: !1605, size: 64, offset: 256)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1581, file: !142, line: 159, baseType: !1616, size: 64, offset: 1024)
!1616 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1617, size: 64)
!1617 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !142, line: 72, size: 256, elements: !1618)
!1618 = !{!1619, !1620, !1621, !1622}
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1617, file: !142, line: 74, baseType: !979, size: 64)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1617, file: !142, line: 77, baseType: !1616, size: 64, offset: 64)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1617, file: !142, line: 78, baseType: !1616, size: 64, offset: 128)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1617, file: !142, line: 81, baseType: !1616, size: 64, offset: 192)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1581, file: !142, line: 162, baseType: !1226, size: 8, offset: 1088)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1581, file: !142, line: 166, baseType: !1113, size: 64, offset: 1152)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1563, file: !142, line: 197, baseType: !1444, size: 64, offset: 128)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1563, file: !142, line: 200, baseType: !1580, size: 64, offset: 192)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1360, file: !1361, line: 479, baseType: !1444, size: 64, offset: 320)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1360, file: !1361, line: 484, baseType: !1113, size: 64, offset: 384)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1360, file: !1361, line: 488, baseType: !1113, size: 64, offset: 448)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1360, file: !1361, line: 493, baseType: !1113, size: 64, offset: 512)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1360, file: !1361, line: 496, baseType: !1113, size: 64, offset: 576)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1360, file: !1361, line: 501, baseType: !1633, size: 64, offset: 640)
!1633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1634, size: 64)
!1634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !166, line: 2355, size: 576, elements: !1635)
!1635 = !{!1636, !1639, !1640, !1641, !1642, !1644, !1645, !1650, !1651, !1652, !1653, !1654, !1655}
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1634, file: !166, line: 2356, baseType: !1637, size: 64)
!1637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1638, size: 64)
!1638 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !166, line: 2356, flags: DIFlagFwdDecl)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1634, file: !166, line: 2357, baseType: !1018, size: 64, offset: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1634, file: !166, line: 2358, baseType: !1015, size: 32, offset: 128)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1634, file: !166, line: 2359, baseType: !1015, size: 32, offset: 160)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1634, file: !166, line: 2360, baseType: !1643, size: 128, offset: 192)
!1643 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1015, size: 128, elements: !1092)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1634, file: !166, line: 2364, baseType: !1015, size: 32, offset: 320)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1634, file: !166, line: 2367, baseType: !1646, size: 128, offset: 384)
!1646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !166, line: 2349, size: 128, elements: !1647)
!1647 = !{!1648, !1649}
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1646, file: !166, line: 2351, baseType: !992, size: 64)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1646, file: !166, line: 2352, baseType: !1082, size: 64, offset: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1634, file: !166, line: 2371, baseType: !165, size: 32, offset: 512)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1634, file: !166, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1634, file: !166, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1634, file: !166, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1634, file: !166, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1634, file: !166, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1360, file: !1361, line: 504, baseType: !1657, size: 64, offset: 704)
!1657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!1658 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1361, line: 504, flags: DIFlagFwdDecl)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1360, file: !1361, line: 507, baseType: !1444, size: 64, offset: 768)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1360, file: !1361, line: 510, baseType: !1015, size: 32, offset: 832)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1360, file: !1361, line: 513, baseType: !1015, size: 32, offset: 864)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1360, file: !1361, line: 516, baseType: !1234, size: 32, offset: 896)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1360, file: !1361, line: 519, baseType: !1234, size: 32, offset: 928)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1360, file: !1361, line: 522, baseType: !7, size: 32, offset: 960)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1360, file: !1361, line: 523, baseType: !7, size: 32, offset: 992)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1360, file: !1361, line: 528, baseType: !1018, size: 64, offset: 1024)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1360, file: !1361, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1360, file: !1361, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1360, file: !1361, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1360, file: !1361, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1360, file: !1361, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1360, file: !1361, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1360, file: !1361, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1360, file: !1361, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1360, file: !1361, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1360, file: !1361, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1360, file: !1361, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1360, file: !1361, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1360, file: !1361, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1360, file: !1361, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1360, file: !1361, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1360, file: !1361, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1355, file: !171, line: 3254, baseType: !1113, size: 64, offset: 1536)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1355, file: !171, line: 3257, baseType: !1113, size: 64, offset: 1600)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1355, file: !171, line: 3258, baseType: !1113, size: 64, offset: 1664)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1355, file: !171, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1355, file: !171, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1355, file: !171, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1355, file: !171, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1355, file: !171, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1355, file: !171, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1355, file: !171, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1355, file: !171, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1355, file: !171, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1355, file: !171, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1355, file: !171, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1355, file: !171, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1355, file: !171, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1355, file: !171, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1355, file: !171, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1355, file: !171, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1355, file: !171, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1355, file: !171, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1115, file: !171, line: 3394, baseType: !1705, size: 1344)
!1705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !171, line: 2279, size: 1344, elements: !1706)
!1706 = !{!1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1732, !1733, !1734, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750}
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1705, file: !171, line: 2280, baseType: !1151, size: 192)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1705, file: !171, line: 2281, baseType: !1113, size: 64, offset: 192)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1705, file: !171, line: 2282, baseType: !1113, size: 64, offset: 256)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1705, file: !171, line: 2283, baseType: !1113, size: 64, offset: 320)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1705, file: !171, line: 2284, baseType: !1113, size: 64, offset: 384)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1705, file: !171, line: 2285, baseType: !7, size: 32, offset: 448)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1705, file: !171, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1705, file: !171, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1705, file: !171, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1705, file: !171, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1705, file: !171, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1705, file: !171, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1705, file: !171, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1705, file: !171, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1705, file: !171, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1705, file: !171, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1705, file: !171, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1705, file: !171, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1705, file: !171, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1705, file: !171, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1705, file: !171, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1705, file: !171, line: 2305, baseType: !7, size: 32, offset: 512)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1705, file: !171, line: 2306, baseType: !1730, size: 32, offset: 544)
!1730 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1731, line: 31, baseType: !1015)
!1731 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1705, file: !171, line: 2307, baseType: !1113, size: 64, offset: 576)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1705, file: !171, line: 2308, baseType: !1113, size: 64, offset: 640)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1705, file: !171, line: 2314, baseType: !1735, size: 64, offset: 704)
!1735 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !171, line: 2309, size: 64, elements: !1736)
!1736 = !{!1737, !1738, !1739}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1735, file: !171, line: 2310, baseType: !1015, size: 32)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1735, file: !171, line: 2311, baseType: !1018, size: 64)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1735, file: !171, line: 2312, baseType: !1740, size: 64)
!1740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1741, size: 64)
!1741 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !171, line: 2277, flags: DIFlagFwdDecl)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1705, file: !171, line: 2315, baseType: !1113, size: 64, offset: 768)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1705, file: !171, line: 2316, baseType: !1113, size: 64, offset: 832)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1705, file: !171, line: 2317, baseType: !1113, size: 64, offset: 896)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1705, file: !171, line: 2318, baseType: !1113, size: 64, offset: 960)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1705, file: !171, line: 2319, baseType: !1113, size: 64, offset: 1024)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1705, file: !171, line: 2320, baseType: !1113, size: 64, offset: 1088)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1705, file: !171, line: 2321, baseType: !1113, size: 64, offset: 1152)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1705, file: !171, line: 2322, baseType: !1113, size: 64, offset: 1216)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1705, file: !171, line: 2324, baseType: !1751, size: 64, offset: 1280)
!1751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1752, size: 64)
!1752 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !171, line: 2324, flags: DIFlagFwdDecl)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1115, file: !171, line: 3395, baseType: !1754, size: 320)
!1754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !171, line: 1469, size: 320, elements: !1755)
!1755 = !{!1756, !1757, !1758}
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1754, file: !171, line: 1470, baseType: !1151, size: 192)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1754, file: !171, line: 1471, baseType: !1113, size: 64, offset: 192)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1754, file: !171, line: 1472, baseType: !1113, size: 64, offset: 256)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1115, file: !171, line: 3396, baseType: !1760, size: 320)
!1760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !171, line: 1482, size: 320, elements: !1761)
!1761 = !{!1762, !1763, !1764}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1760, file: !171, line: 1483, baseType: !1151, size: 192)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1760, file: !171, line: 1484, baseType: !1015, size: 32, offset: 192)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1760, file: !171, line: 1485, baseType: !1507, size: 64, offset: 256)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1115, file: !171, line: 3397, baseType: !1766, size: 384)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !171, line: 1829, size: 384, elements: !1767)
!1767 = !{!1768, !1769, !1770, !1771}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1766, file: !171, line: 1830, baseType: !1151, size: 192)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1766, file: !171, line: 1831, baseType: !1234, size: 32, offset: 192)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1766, file: !171, line: 1832, baseType: !1113, size: 64, offset: 256)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1766, file: !171, line: 1835, baseType: !1507, size: 64, offset: 320)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1115, file: !171, line: 3398, baseType: !1773, size: 704)
!1773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !171, line: 1898, size: 704, elements: !1774)
!1774 = !{!1775, !1776, !1777, !1778, !1779, !1782}
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1773, file: !171, line: 1899, baseType: !1151, size: 192)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1773, file: !171, line: 1902, baseType: !1113, size: 64, offset: 192)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1773, file: !171, line: 1905, baseType: !1609, size: 64, offset: 256)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1773, file: !171, line: 1908, baseType: !7, size: 32, offset: 320)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1773, file: !171, line: 1911, baseType: !1780, size: 64, offset: 384)
!1780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1781, size: 64)
!1781 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !171, line: 1876, flags: DIFlagFwdDecl)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1773, file: !171, line: 1914, baseType: !1783, size: 256, offset: 448)
!1783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !171, line: 1883, size: 256, elements: !1784)
!1784 = !{!1785, !1787, !1788, !1793}
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1783, file: !171, line: 1884, baseType: !1786, size: 64)
!1786 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1783, size: 64)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1783, file: !171, line: 1885, baseType: !1786, size: 64, offset: 64)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1783, file: !171, line: 1891, baseType: !1789, size: 64, offset: 128)
!1789 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1783, file: !171, line: 1891, size: 64, elements: !1790)
!1790 = !{!1791, !1792}
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1789, file: !171, line: 1891, baseType: !1609, size: 64)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1789, file: !171, line: 1891, baseType: !1113, size: 64)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1783, file: !171, line: 1892, baseType: !1794, size: 64, offset: 192)
!1794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1113, size: 64)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1115, file: !171, line: 3399, baseType: !1796, size: 704)
!1796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !171, line: 2008, size: 704, elements: !1797)
!1797 = !{!1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808}
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1796, file: !171, line: 2009, baseType: !1151, size: 192)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1796, file: !171, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1796, file: !171, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1796, file: !171, line: 2014, baseType: !1234, size: 32, offset: 224)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1796, file: !171, line: 2016, baseType: !1113, size: 64, offset: 256)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1796, file: !171, line: 2017, baseType: !1496, size: 64, offset: 320)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1796, file: !171, line: 2019, baseType: !1113, size: 64, offset: 384)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1796, file: !171, line: 2020, baseType: !1113, size: 64, offset: 448)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1796, file: !171, line: 2021, baseType: !1113, size: 64, offset: 512)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1796, file: !171, line: 2022, baseType: !1113, size: 64, offset: 576)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1796, file: !171, line: 2023, baseType: !1113, size: 64, offset: 640)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1115, file: !171, line: 3400, baseType: !1810, size: 832)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !171, line: 2430, size: 832, elements: !1811)
!1811 = !{!1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1810, file: !171, line: 2431, baseType: !1151, size: 192)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1810, file: !171, line: 2433, baseType: !1113, size: 64, offset: 192)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1810, file: !171, line: 2434, baseType: !1113, size: 64, offset: 256)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1810, file: !171, line: 2435, baseType: !1113, size: 64, offset: 320)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1810, file: !171, line: 2436, baseType: !1113, size: 64, offset: 384)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1810, file: !171, line: 2437, baseType: !1496, size: 64, offset: 448)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1810, file: !171, line: 2438, baseType: !1113, size: 64, offset: 512)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1810, file: !171, line: 2440, baseType: !1113, size: 64, offset: 576)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1810, file: !171, line: 2441, baseType: !1113, size: 64, offset: 640)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1810, file: !171, line: 2443, baseType: !1822, size: 128, offset: 704)
!1822 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !171, line: 182, baseType: !1823)
!1823 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !171, line: 182, size: 128, elements: !1824)
!1824 = !{!1825}
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1823, file: !171, line: 182, baseType: !1501, size: 128)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1115, file: !171, line: 3401, baseType: !1827, size: 320)
!1827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !171, line: 3327, size: 320, elements: !1828)
!1828 = !{!1829, !1830, !1837}
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1827, file: !171, line: 3329, baseType: !1151, size: 192)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1827, file: !171, line: 3330, baseType: !1831, size: 64, offset: 192)
!1831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1832, size: 64)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !171, line: 3320, size: 192, elements: !1833)
!1833 = !{!1834, !1835, !1836}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1832, file: !171, line: 3322, baseType: !1831, size: 64)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1832, file: !171, line: 3323, baseType: !1831, size: 64, offset: 64)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1832, file: !171, line: 3324, baseType: !1113, size: 64, offset: 128)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1827, file: !171, line: 3331, baseType: !1831, size: 64, offset: 256)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1115, file: !171, line: 3402, baseType: !1839, size: 256)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !171, line: 1540, size: 256, elements: !1840)
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1839, file: !171, line: 1541, baseType: !1151, size: 192)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1839, file: !171, line: 1542, baseType: !1843, size: 64, offset: 192)
!1843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1844, size: 64)
!1844 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !171, line: 1538, baseType: !1845)
!1845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !171, line: 1538, size: 192, elements: !1846)
!1846 = !{!1847}
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1845, file: !171, line: 1538, baseType: !1848, size: 192)
!1848 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !171, line: 1537, baseType: !1849)
!1849 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !171, line: 1537, size: 192, elements: !1850)
!1850 = !{!1851, !1852, !1853}
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1849, file: !171, line: 1537, baseType: !7, size: 32)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1849, file: !171, line: 1537, baseType: !7, size: 32, offset: 32)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1849, file: !171, line: 1537, baseType: !1854, size: 128, offset: 64)
!1854 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1855, size: 128, elements: !1030)
!1855 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !171, line: 1535, baseType: !1856)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !171, line: 1532, size: 128, elements: !1857)
!1857 = !{!1858, !1859}
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1856, file: !171, line: 1533, baseType: !1113, size: 64)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1856, file: !171, line: 1534, baseType: !1113, size: 64, offset: 64)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1115, file: !171, line: 3403, baseType: !1861, size: 512)
!1861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !171, line: 1938, size: 512, elements: !1862)
!1862 = !{!1863, !1864, !1865, !1866, !1872, !1873, !1874}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1861, file: !171, line: 1939, baseType: !1151, size: 192)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1861, file: !171, line: 1940, baseType: !1234, size: 32, offset: 192)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1861, file: !171, line: 1941, baseType: !170, size: 32, offset: 224)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1861, file: !171, line: 1946, baseType: !1867, size: 32, offset: 256)
!1867 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !171, line: 1942, size: 32, elements: !1868)
!1868 = !{!1869, !1870, !1871}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1867, file: !171, line: 1943, baseType: !189, size: 32)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1867, file: !171, line: 1944, baseType: !196, size: 32)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1867, file: !171, line: 1945, baseType: !203, size: 32)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1861, file: !171, line: 1950, baseType: !988, size: 64, offset: 320)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1861, file: !171, line: 1951, baseType: !988, size: 64, offset: 384)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1861, file: !171, line: 1953, baseType: !1507, size: 64, offset: 448)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1115, file: !171, line: 3404, baseType: !1876, size: 1664)
!1876 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !171, line: 3337, size: 1664, elements: !1877)
!1877 = !{!1878, !1879}
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1876, file: !171, line: 3338, baseType: !1151, size: 192)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1876, file: !171, line: 3341, baseType: !1880, size: 1472, offset: 192)
!1880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1881, line: 410, size: 1472, elements: !1882)
!1881 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1882 = !{!1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046}
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1880, file: !1881, line: 412, baseType: !1015, size: 32)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1880, file: !1881, line: 413, baseType: !1015, size: 32, offset: 32)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1880, file: !1881, line: 414, baseType: !1015, size: 32, offset: 64)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1880, file: !1881, line: 415, baseType: !1015, size: 32, offset: 96)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1880, file: !1881, line: 416, baseType: !1015, size: 32, offset: 128)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1880, file: !1881, line: 417, baseType: !1015, size: 32, offset: 160)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1880, file: !1881, line: 418, baseType: !1226, size: 8, offset: 192)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1880, file: !1881, line: 419, baseType: !1226, size: 8, offset: 200)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1880, file: !1881, line: 420, baseType: !1892, size: 8, offset: 208)
!1892 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1880, file: !1881, line: 421, baseType: !1892, size: 8, offset: 216)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1880, file: !1881, line: 422, baseType: !1892, size: 8, offset: 224)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1880, file: !1881, line: 423, baseType: !1892, size: 8, offset: 232)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1880, file: !1881, line: 424, baseType: !1892, size: 8, offset: 240)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1880, file: !1881, line: 425, baseType: !1892, size: 8, offset: 248)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1880, file: !1881, line: 426, baseType: !1892, size: 8, offset: 256)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1880, file: !1881, line: 427, baseType: !1892, size: 8, offset: 264)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1880, file: !1881, line: 428, baseType: !1892, size: 8, offset: 272)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1880, file: !1881, line: 429, baseType: !1892, size: 8, offset: 280)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1880, file: !1881, line: 430, baseType: !1892, size: 8, offset: 288)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1880, file: !1881, line: 431, baseType: !1892, size: 8, offset: 296)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1880, file: !1881, line: 432, baseType: !1892, size: 8, offset: 304)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1880, file: !1881, line: 433, baseType: !1892, size: 8, offset: 312)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1880, file: !1881, line: 434, baseType: !1892, size: 8, offset: 320)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1880, file: !1881, line: 435, baseType: !1892, size: 8, offset: 328)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1880, file: !1881, line: 436, baseType: !1892, size: 8, offset: 336)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1880, file: !1881, line: 437, baseType: !1892, size: 8, offset: 344)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1880, file: !1881, line: 438, baseType: !1892, size: 8, offset: 352)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1880, file: !1881, line: 439, baseType: !1892, size: 8, offset: 360)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1880, file: !1881, line: 440, baseType: !1892, size: 8, offset: 368)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1880, file: !1881, line: 441, baseType: !1892, size: 8, offset: 376)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1880, file: !1881, line: 442, baseType: !1892, size: 8, offset: 384)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1880, file: !1881, line: 443, baseType: !1892, size: 8, offset: 392)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1880, file: !1881, line: 444, baseType: !1892, size: 8, offset: 400)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1880, file: !1881, line: 445, baseType: !1892, size: 8, offset: 408)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1880, file: !1881, line: 446, baseType: !1892, size: 8, offset: 416)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1880, file: !1881, line: 447, baseType: !1892, size: 8, offset: 424)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1880, file: !1881, line: 448, baseType: !1892, size: 8, offset: 432)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1880, file: !1881, line: 449, baseType: !1892, size: 8, offset: 440)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1880, file: !1881, line: 450, baseType: !1892, size: 8, offset: 448)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1880, file: !1881, line: 451, baseType: !1892, size: 8, offset: 456)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1880, file: !1881, line: 452, baseType: !1892, size: 8, offset: 464)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1880, file: !1881, line: 453, baseType: !1892, size: 8, offset: 472)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1880, file: !1881, line: 454, baseType: !1892, size: 8, offset: 480)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1880, file: !1881, line: 455, baseType: !1892, size: 8, offset: 488)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1880, file: !1881, line: 456, baseType: !1892, size: 8, offset: 496)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1880, file: !1881, line: 457, baseType: !1892, size: 8, offset: 504)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1880, file: !1881, line: 458, baseType: !1892, size: 8, offset: 512)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1880, file: !1881, line: 459, baseType: !1892, size: 8, offset: 520)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1880, file: !1881, line: 460, baseType: !1892, size: 8, offset: 528)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1880, file: !1881, line: 461, baseType: !1892, size: 8, offset: 536)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1880, file: !1881, line: 462, baseType: !1892, size: 8, offset: 544)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1880, file: !1881, line: 463, baseType: !1892, size: 8, offset: 552)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1880, file: !1881, line: 464, baseType: !1892, size: 8, offset: 560)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1880, file: !1881, line: 465, baseType: !1892, size: 8, offset: 568)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1880, file: !1881, line: 466, baseType: !1892, size: 8, offset: 576)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1880, file: !1881, line: 467, baseType: !1892, size: 8, offset: 584)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1880, file: !1881, line: 468, baseType: !1892, size: 8, offset: 592)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1880, file: !1881, line: 469, baseType: !1892, size: 8, offset: 600)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1880, file: !1881, line: 470, baseType: !1892, size: 8, offset: 608)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1880, file: !1881, line: 471, baseType: !1892, size: 8, offset: 616)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1880, file: !1881, line: 472, baseType: !1892, size: 8, offset: 624)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1880, file: !1881, line: 473, baseType: !1892, size: 8, offset: 632)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1880, file: !1881, line: 474, baseType: !1892, size: 8, offset: 640)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1880, file: !1881, line: 475, baseType: !1892, size: 8, offset: 648)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1880, file: !1881, line: 476, baseType: !1892, size: 8, offset: 656)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1880, file: !1881, line: 477, baseType: !1892, size: 8, offset: 664)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1880, file: !1881, line: 478, baseType: !1892, size: 8, offset: 672)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1880, file: !1881, line: 479, baseType: !1892, size: 8, offset: 680)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1880, file: !1881, line: 480, baseType: !1892, size: 8, offset: 688)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1880, file: !1881, line: 481, baseType: !1892, size: 8, offset: 696)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1880, file: !1881, line: 482, baseType: !1892, size: 8, offset: 704)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1880, file: !1881, line: 483, baseType: !1892, size: 8, offset: 712)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1880, file: !1881, line: 484, baseType: !1892, size: 8, offset: 720)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1880, file: !1881, line: 485, baseType: !1892, size: 8, offset: 728)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1880, file: !1881, line: 486, baseType: !1892, size: 8, offset: 736)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1880, file: !1881, line: 487, baseType: !1892, size: 8, offset: 744)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1880, file: !1881, line: 488, baseType: !1892, size: 8, offset: 752)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1880, file: !1881, line: 489, baseType: !1892, size: 8, offset: 760)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1880, file: !1881, line: 490, baseType: !1892, size: 8, offset: 768)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1880, file: !1881, line: 491, baseType: !1892, size: 8, offset: 776)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1880, file: !1881, line: 492, baseType: !1892, size: 8, offset: 784)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1880, file: !1881, line: 493, baseType: !1892, size: 8, offset: 792)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1880, file: !1881, line: 494, baseType: !1892, size: 8, offset: 800)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1880, file: !1881, line: 495, baseType: !1892, size: 8, offset: 808)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1880, file: !1881, line: 496, baseType: !1892, size: 8, offset: 816)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1880, file: !1881, line: 497, baseType: !1892, size: 8, offset: 824)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1880, file: !1881, line: 498, baseType: !1892, size: 8, offset: 832)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1880, file: !1881, line: 499, baseType: !1892, size: 8, offset: 840)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1880, file: !1881, line: 500, baseType: !1892, size: 8, offset: 848)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1880, file: !1881, line: 501, baseType: !1892, size: 8, offset: 856)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1880, file: !1881, line: 502, baseType: !1892, size: 8, offset: 864)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1880, file: !1881, line: 503, baseType: !1892, size: 8, offset: 872)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1880, file: !1881, line: 504, baseType: !1892, size: 8, offset: 880)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1880, file: !1881, line: 505, baseType: !1892, size: 8, offset: 888)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1880, file: !1881, line: 506, baseType: !1892, size: 8, offset: 896)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1880, file: !1881, line: 507, baseType: !1892, size: 8, offset: 904)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1880, file: !1881, line: 508, baseType: !1892, size: 8, offset: 912)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1880, file: !1881, line: 509, baseType: !1892, size: 8, offset: 920)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1880, file: !1881, line: 510, baseType: !1892, size: 8, offset: 928)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1880, file: !1881, line: 511, baseType: !1892, size: 8, offset: 936)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1880, file: !1881, line: 512, baseType: !1892, size: 8, offset: 944)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1880, file: !1881, line: 513, baseType: !1892, size: 8, offset: 952)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1880, file: !1881, line: 514, baseType: !1892, size: 8, offset: 960)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1880, file: !1881, line: 515, baseType: !1892, size: 8, offset: 968)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1880, file: !1881, line: 516, baseType: !1892, size: 8, offset: 976)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1880, file: !1881, line: 517, baseType: !1892, size: 8, offset: 984)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1880, file: !1881, line: 518, baseType: !1892, size: 8, offset: 992)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1880, file: !1881, line: 519, baseType: !1892, size: 8, offset: 1000)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1880, file: !1881, line: 520, baseType: !1892, size: 8, offset: 1008)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1880, file: !1881, line: 521, baseType: !1892, size: 8, offset: 1016)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1880, file: !1881, line: 522, baseType: !1892, size: 8, offset: 1024)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1880, file: !1881, line: 523, baseType: !1892, size: 8, offset: 1032)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1880, file: !1881, line: 524, baseType: !1892, size: 8, offset: 1040)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1880, file: !1881, line: 525, baseType: !1892, size: 8, offset: 1048)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1880, file: !1881, line: 526, baseType: !1892, size: 8, offset: 1056)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1880, file: !1881, line: 527, baseType: !1892, size: 8, offset: 1064)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1880, file: !1881, line: 528, baseType: !1892, size: 8, offset: 1072)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1880, file: !1881, line: 529, baseType: !1892, size: 8, offset: 1080)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1880, file: !1881, line: 530, baseType: !1892, size: 8, offset: 1088)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1880, file: !1881, line: 531, baseType: !1892, size: 8, offset: 1096)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1880, file: !1881, line: 532, baseType: !1892, size: 8, offset: 1104)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1880, file: !1881, line: 533, baseType: !1892, size: 8, offset: 1112)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1880, file: !1881, line: 534, baseType: !1892, size: 8, offset: 1120)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1880, file: !1881, line: 535, baseType: !1892, size: 8, offset: 1128)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1880, file: !1881, line: 536, baseType: !1892, size: 8, offset: 1136)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1880, file: !1881, line: 537, baseType: !1892, size: 8, offset: 1144)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1880, file: !1881, line: 538, baseType: !1892, size: 8, offset: 1152)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1880, file: !1881, line: 539, baseType: !1892, size: 8, offset: 1160)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1880, file: !1881, line: 540, baseType: !1892, size: 8, offset: 1168)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1880, file: !1881, line: 541, baseType: !1892, size: 8, offset: 1176)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1880, file: !1881, line: 542, baseType: !1892, size: 8, offset: 1184)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1880, file: !1881, line: 543, baseType: !1892, size: 8, offset: 1192)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1880, file: !1881, line: 544, baseType: !1892, size: 8, offset: 1200)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1880, file: !1881, line: 545, baseType: !1892, size: 8, offset: 1208)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1880, file: !1881, line: 546, baseType: !1892, size: 8, offset: 1216)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1880, file: !1881, line: 547, baseType: !1892, size: 8, offset: 1224)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1880, file: !1881, line: 548, baseType: !1892, size: 8, offset: 1232)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1880, file: !1881, line: 549, baseType: !1892, size: 8, offset: 1240)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1880, file: !1881, line: 550, baseType: !1892, size: 8, offset: 1248)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1880, file: !1881, line: 551, baseType: !1892, size: 8, offset: 1256)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1880, file: !1881, line: 552, baseType: !1892, size: 8, offset: 1264)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1880, file: !1881, line: 553, baseType: !1892, size: 8, offset: 1272)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1880, file: !1881, line: 554, baseType: !1892, size: 8, offset: 1280)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1880, file: !1881, line: 555, baseType: !1892, size: 8, offset: 1288)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1880, file: !1881, line: 556, baseType: !1892, size: 8, offset: 1296)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1880, file: !1881, line: 557, baseType: !1892, size: 8, offset: 1304)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1880, file: !1881, line: 558, baseType: !1892, size: 8, offset: 1312)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1880, file: !1881, line: 559, baseType: !1892, size: 8, offset: 1320)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1880, file: !1881, line: 560, baseType: !1892, size: 8, offset: 1328)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1880, file: !1881, line: 561, baseType: !1892, size: 8, offset: 1336)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1880, file: !1881, line: 562, baseType: !1892, size: 8, offset: 1344)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1880, file: !1881, line: 563, baseType: !1892, size: 8, offset: 1352)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1880, file: !1881, line: 564, baseType: !1892, size: 8, offset: 1360)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1880, file: !1881, line: 565, baseType: !1892, size: 8, offset: 1368)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1880, file: !1881, line: 566, baseType: !1892, size: 8, offset: 1376)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1880, file: !1881, line: 567, baseType: !1892, size: 8, offset: 1384)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1880, file: !1881, line: 568, baseType: !1892, size: 8, offset: 1392)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1880, file: !1881, line: 569, baseType: !1892, size: 8, offset: 1400)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1880, file: !1881, line: 570, baseType: !1892, size: 8, offset: 1408)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1880, file: !1881, line: 571, baseType: !1892, size: 8, offset: 1416)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1880, file: !1881, line: 572, baseType: !1892, size: 8, offset: 1424)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1880, file: !1881, line: 573, baseType: !1892, size: 8, offset: 1432)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1880, file: !1881, line: 574, baseType: !1892, size: 8, offset: 1440)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1115, file: !171, line: 3405, baseType: !2048, size: 384)
!2048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !171, line: 3352, size: 384, elements: !2049)
!2049 = !{!2050, !2051}
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2048, file: !171, line: 3353, baseType: !1151, size: 192)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2048, file: !171, line: 3356, baseType: !2052, size: 192, offset: 192)
!2052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1881, line: 578, size: 192, elements: !2053)
!2053 = !{!2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064}
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2052, file: !1881, line: 580, baseType: !1015, size: 32)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2052, file: !1881, line: 581, baseType: !1015, size: 32, offset: 32)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2052, file: !1881, line: 582, baseType: !1015, size: 32, offset: 64)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2052, file: !1881, line: 583, baseType: !1015, size: 32, offset: 96)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2052, file: !1881, line: 584, baseType: !1226, size: 8, offset: 128)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2052, file: !1881, line: 585, baseType: !1226, size: 8, offset: 136)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2052, file: !1881, line: 586, baseType: !1226, size: 8, offset: 144)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2052, file: !1881, line: 587, baseType: !1226, size: 8, offset: 152)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2052, file: !1881, line: 588, baseType: !1226, size: 8, offset: 160)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2052, file: !1881, line: 589, baseType: !1226, size: 8, offset: 168)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2052, file: !1881, line: 590, baseType: !1226, size: 8, offset: 176)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1012, file: !772, line: 178, baseType: !962, size: 64)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1012, file: !772, line: 179, baseType: !2067, size: 64)
!2067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2068, size: 64)
!2068 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !772, line: 150, baseType: !2069)
!2069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !772, line: 142, size: 320, elements: !2070)
!2070 = !{!2071, !2072, !2073, !2074, !2075, !2076}
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2069, file: !772, line: 144, baseType: !1113, size: 64)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2069, file: !772, line: 145, baseType: !992, size: 64, offset: 64)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2069, file: !772, line: 146, baseType: !992, size: 64, offset: 128)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2069, file: !772, line: 147, baseType: !1730, size: 32, offset: 192)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2069, file: !772, line: 148, baseType: !7, size: 32, offset: 224)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2069, file: !772, line: 149, baseType: !1226, size: 8, offset: 256)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1012, file: !772, line: 180, baseType: !2078, size: 64)
!2078 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2079, size: 64)
!2079 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !772, line: 162, baseType: !2080)
!2080 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !772, line: 159, size: 128, elements: !2081)
!2081 = !{!2082, !2083}
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2080, file: !772, line: 160, baseType: !1113, size: 64)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2080, file: !772, line: 161, baseType: !1082, size: 64, offset: 64)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1012, file: !772, line: 181, baseType: !2085, size: 64)
!2085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2086, size: 64)
!2086 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !772, line: 181, flags: DIFlagFwdDecl)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1007, file: !772, line: 317, baseType: !2088, size: 64)
!2088 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1082, size: 64, elements: !1030)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1007, file: !772, line: 318, baseType: !2090, size: 320)
!2090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !772, line: 188, size: 320, elements: !2091)
!2091 = !{!2092, !2094, !2117}
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2090, file: !772, line: 190, baseType: !2093, size: 192)
!2093 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1011, size: 192, elements: !1184)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2090, file: !772, line: 193, baseType: !2095, size: 64, offset: 192)
!2095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2096, size: 64)
!2096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !772, line: 206, size: 320, elements: !2097)
!2097 = !{!2098, !2102, !2103, !2104, !2116}
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2096, file: !772, line: 208, baseType: !2099, size: 64)
!2099 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2100, size: 64)
!2100 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !961, line: 62, baseType: !2101)
!2101 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !961, line: 61, flags: DIFlagFwdDecl)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2096, file: !772, line: 211, baseType: !7, size: 32, offset: 64)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2096, file: !772, line: 214, baseType: !1082, size: 64, offset: 128)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2096, file: !772, line: 224, baseType: !2105, size: 64, offset: 192)
!2105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2106, size: 64)
!2106 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !772, line: 202, baseType: !2107)
!2107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !772, line: 202, size: 128, elements: !2108)
!2108 = !{!2109}
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2107, file: !772, line: 202, baseType: !2110, size: 128)
!2110 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !772, line: 200, baseType: !2111)
!2111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !772, line: 200, size: 128, elements: !2112)
!2112 = !{!2113, !2114, !2115}
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2111, file: !772, line: 200, baseType: !7, size: 32)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2111, file: !772, line: 200, baseType: !7, size: 32, offset: 32)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2111, file: !772, line: 200, baseType: !1029, size: 64, offset: 64)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2096, file: !772, line: 234, baseType: !2105, size: 64, offset: 256)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2090, file: !772, line: 197, baseType: !1082, size: 64, offset: 256)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1007, file: !772, line: 319, baseType: !1173, size: 256)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1007, file: !772, line: 320, baseType: !1192, size: 192)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !980, file: !155, line: 134, baseType: !1103, size: 64, offset: 192)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !980, file: !155, line: 137, baseType: !1113, size: 64, offset: 256)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !980, file: !155, line: 138, baseType: !1234, size: 32, offset: 320)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !980, file: !155, line: 142, baseType: !7, size: 32, offset: 352)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !980, file: !155, line: 144, baseType: !1015, size: 32, offset: 384)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !980, file: !155, line: 145, baseType: !1015, size: 32, offset: 416)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !980, file: !155, line: 146, baseType: !2127, size: 64, offset: 448)
!2127 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !155, line: 119, baseType: !1082)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !963, file: !155, line: 220, baseType: !966, size: 64, offset: 64)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !963, file: !155, line: 223, baseType: !1103, size: 64, offset: 128)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !963, file: !155, line: 226, baseType: !1580, size: 64, offset: 192)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !963, file: !155, line: 229, baseType: !2132, size: 128, offset: 256)
!2132 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2133, size: 128, elements: !1066)
!2133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2134, size: 64)
!2134 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !155, line: 229, flags: DIFlagFwdDecl)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !963, file: !155, line: 232, baseType: !962, size: 64, offset: 384)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !963, file: !155, line: 233, baseType: !962, size: 64, offset: 448)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !963, file: !155, line: 238, baseType: !2138, size: 64, offset: 512)
!2138 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !155, line: 235, size: 64, elements: !2139)
!2139 = !{!2140, !2146}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2138, file: !155, line: 236, baseType: !2141, size: 64)
!2141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2142, size: 64)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !155, line: 273, size: 128, elements: !2143)
!2143 = !{!2144, !2145}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2142, file: !155, line: 275, baseType: !988, size: 64)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2142, file: !155, line: 278, baseType: !988, size: 64, offset: 64)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2138, file: !155, line: 237, baseType: !2147, size: 64)
!2147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2148, size: 64)
!2148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !155, line: 259, size: 320, elements: !2149)
!2149 = !{!2150, !2151, !2152, !2153, !2154}
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2148, file: !155, line: 261, baseType: !992, size: 64)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2148, file: !155, line: 262, baseType: !992, size: 64, offset: 64)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2148, file: !155, line: 266, baseType: !992, size: 64, offset: 128)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2148, file: !155, line: 267, baseType: !992, size: 64, offset: 192)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2148, file: !155, line: 270, baseType: !1015, size: 32, offset: 256)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !963, file: !155, line: 241, baseType: !2127, size: 64, offset: 576)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !963, file: !155, line: 244, baseType: !1015, size: 32, offset: 640)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !963, file: !155, line: 247, baseType: !1015, size: 32, offset: 672)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !963, file: !155, line: 250, baseType: !1015, size: 32, offset: 704)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !963, file: !155, line: 253, baseType: !1015, size: 32, offset: 736)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !963, file: !155, line: 256, baseType: !1015, size: 32, offset: 768)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !957, file: !398, line: 118, baseType: !1015, size: 32, offset: 64)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "num_loads", scope: !957, file: !398, line: 121, baseType: !1015, size: 32, offset: 96)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "num_stores", scope: !957, file: !398, line: 122, baseType: !1015, size: 32, offset: 128)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "num_debug", scope: !957, file: !398, line: 125, baseType: !1015, size: 32, offset: 160)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !957, file: !398, line: 129, baseType: !2166, size: 64, offset: 192)
!2166 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddg_node_ptr", file: !398, line: 31, baseType: !2167)
!2167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2168, size: 64)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ddg_node", file: !398, line: 48, size: 512, elements: !2169)
!2169 = !{!2170, !2171, !2172, !2173, !2193, !2194, !2206, !2207}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "cuid", scope: !2168, file: !398, line: 53, baseType: !1015, size: 32)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2168, file: !398, line: 56, baseType: !992, size: 64, offset: 64)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "first_note", scope: !2168, file: !398, line: 62, baseType: !992, size: 64, offset: 128)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !2168, file: !398, line: 65, baseType: !2174, size: 64, offset: 192)
!2174 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddg_edge_ptr", file: !398, line: 32, baseType: !2175)
!2175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2176, size: 64)
!2176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ddg_edge", file: !398, line: 81, size: 448, elements: !2177)
!2177 = !{!2178, !2179, !2180, !2182, !2184, !2185, !2186, !2187, !2188}
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2176, file: !398, line: 84, baseType: !2166, size: 64)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2176, file: !398, line: 85, baseType: !2166, size: 64, offset: 64)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2176, file: !398, line: 88, baseType: !2181, size: 32, offset: 128)
!2181 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_type", file: !398, line: 37, baseType: !397)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "data_type", scope: !2176, file: !398, line: 91, baseType: !2183, size: 32, offset: 160)
!2183 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_data_type", file: !398, line: 39, baseType: !403)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "latency", scope: !2176, file: !398, line: 94, baseType: !1015, size: 32, offset: 192)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !2176, file: !398, line: 97, baseType: !1015, size: 32, offset: 224)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "next_in", scope: !2176, file: !398, line: 101, baseType: !2174, size: 64, offset: 256)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "next_out", scope: !2176, file: !398, line: 102, baseType: !2174, size: 64, offset: 320)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2176, file: !398, line: 108, baseType: !2189, size: 64, offset: 384)
!2189 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2176, file: !398, line: 105, size: 64, elements: !2190)
!2190 = !{!2191, !2192}
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2189, file: !398, line: 106, baseType: !1015, size: 32)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2189, file: !398, line: 107, baseType: !1103, size: 64)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !2168, file: !398, line: 66, baseType: !2174, size: 64, offset: 256)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "successors", scope: !2168, file: !398, line: 70, baseType: !2195, size: 64, offset: 320)
!2195 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2196, line: 45, baseType: !2197)
!2196 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2198, size: 64)
!2198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2196, line: 39, size: 192, elements: !2199)
!2199 = !{!2200, !2202, !2203, !2204}
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2198, file: !2196, line: 41, baseType: !2201, size: 64)
!2201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1226, size: 64)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2198, file: !2196, line: 42, baseType: !7, size: 32, offset: 64)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2198, file: !2196, line: 43, baseType: !7, size: 32, offset: 96)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2198, file: !2196, line: 44, baseType: !2205, size: 64, offset: 128)
!2205 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1065, size: 64, elements: !1030)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "predecessors", scope: !2168, file: !398, line: 71, baseType: !2195, size: 64, offset: 384)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2168, file: !398, line: 77, baseType: !2208, size: 64, offset: 448)
!2208 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2168, file: !398, line: 74, size: 64, elements: !2209)
!2209 = !{!2210, !2211}
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2208, file: !398, line: 75, baseType: !1015, size: 32)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2208, file: !398, line: 76, baseType: !1103, size: 64)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "closing_branch", scope: !957, file: !398, line: 132, baseType: !2166, size: 64, offset: 256)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "closing_branch_deps", scope: !957, file: !398, line: 137, baseType: !1015, size: 32, offset: 320)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "num_backarcs", scope: !957, file: !398, line: 140, baseType: !1015, size: 32, offset: 352)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "backarcs", scope: !957, file: !398, line: 141, baseType: !2216, size: 64, offset: 384)
!2216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2174, size: 64)
!2217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1015, size: 64)
!2218 = !DIDerivedType(tag: DW_TAG_typedef, name: "partial_schedule_ptr", file: !3, line: 105, baseType: !2219)
!2219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2220, size: 64)
!2220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "partial_schedule", file: !3, line: 143, size: 256, elements: !2221)
!2221 = !{!2222, !2223, !2224, !2235, !2236, !2237}
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "ii", scope: !2220, file: !3, line: 145, baseType: !1015, size: 32)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "history", scope: !2220, file: !3, line: 146, baseType: !1015, size: 32, offset: 32)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "rows", scope: !2220, file: !3, line: 149, baseType: !2225, size: 64, offset: 64)
!2225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2226, size: 64)
!2226 = !DIDerivedType(tag: DW_TAG_typedef, name: "ps_insn_ptr", file: !3, line: 106, baseType: !2227)
!2227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2228, size: 64)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ps_insn", file: !3, line: 123, size: 320, elements: !2229)
!2229 = !{!2230, !2231, !2232, !2233, !2234}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !2228, file: !3, line: 126, baseType: !2166, size: 64)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "cycle", scope: !2228, file: !3, line: 130, baseType: !1015, size: 32, offset: 64)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "next_in_row", scope: !2228, file: !3, line: 133, baseType: !2226, size: 64, offset: 128)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "prev_in_row", scope: !2228, file: !3, line: 134, baseType: !2226, size: 64, offset: 192)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "row_rest_count", scope: !2228, file: !3, line: 137, baseType: !1015, size: 32, offset: 256)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "min_cycle", scope: !2220, file: !3, line: 152, baseType: !1015, size: 32, offset: 128)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "max_cycle", scope: !2220, file: !3, line: 155, baseType: !1015, size: 32, offset: 160)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2220, file: !3, line: 157, baseType: !955, size: 64, offset: 192)
!2238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2239, size: 64)
!2239 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !1515, line: 32, baseType: !2240)
!2240 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !1515, line: 32, size: 96, elements: !2241)
!2241 = !{!2242}
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2240, file: !1515, line: 32, baseType: !2243, size: 96)
!2243 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !1515, line: 31, baseType: !2244)
!2244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !1515, line: 31, size: 96, elements: !2245)
!2245 = !{!2246, !2247, !2248}
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2244, file: !1515, line: 31, baseType: !7, size: 32)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2244, file: !1515, line: 31, baseType: !7, size: 32, offset: 32)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2244, file: !1515, line: 31, baseType: !2249, size: 32, offset: 64)
!2249 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1015, size: 32, elements: !1030)
!2250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2251, size: 64)
!2251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "node_order_params", file: !3, line: 2054, size: 96, elements: !2252)
!2252 = !{!2253, !2254, !2255}
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "asap", scope: !2251, file: !3, line: 2056, baseType: !1015, size: 32)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "alap", scope: !2251, file: !3, line: 2057, baseType: !1015, size: 32, offset: 32)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !2251, file: !3, line: 2058, baseType: !1015, size: 32, offset: 64)
!2256 = !DIDerivedType(tag: DW_TAG_typedef, name: "nopa", file: !3, line: 2043, baseType: !2250)
!2257 = !DIDerivedType(tag: DW_TAG_typedef, name: "node_sched_params_ptr", file: !3, line: 231, baseType: !2258)
!2258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2259, size: 64)
!2259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "node_sched_params", file: !3, line: 210, size: 256, elements: !2260)
!2260 = !{!2261, !2262, !2263, !2264, !2265, !2266, !2267}
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "asap", scope: !2259, file: !3, line: 212, baseType: !1015, size: 32)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !2259, file: !3, line: 213, baseType: !1015, size: 32, offset: 32)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "first_reg_move", scope: !2259, file: !3, line: 219, baseType: !992, size: 64, offset: 64)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "nreg_moves", scope: !2259, file: !3, line: 223, baseType: !1015, size: 32, offset: 128)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "row", scope: !2259, file: !3, line: 225, baseType: !1015, size: 32, offset: 160)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "stage", scope: !2259, file: !3, line: 226, baseType: !1015, size: 32, offset: 192)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "column", scope: !2259, file: !3, line: 230, baseType: !1015, size: 32, offset: 224)
!2268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2269, size: 64)
!2269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "undo_replace_buff_elem", file: !3, line: 162, size: 256, elements: !2270)
!2270 = !{!2271, !2272, !2273, !2274}
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2269, file: !3, line: 164, baseType: !992, size: 64)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "orig_reg", scope: !2269, file: !3, line: 165, baseType: !992, size: 64, offset: 64)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "new_reg", scope: !2269, file: !3, line: 166, baseType: !992, size: 64, offset: 128)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2269, file: !3, line: 167, baseType: !2268, size: 64, offset: 192)
!2275 = !{!0, !2276, !2297, !2337, !2386, !2393}
!2276 = !DIGlobalVariableExpression(var: !2277, expr: !DIExpression())
!2277 = distinct !DIGlobalVariable(name: "sms_common_sched_info", scope: !2, file: !3, line: 254, type: !2278, isLocal: true, isDefinition: true)
!2278 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "common_sched_info_def", file: !929, line: 81, size: 320, elements: !2279)
!2279 = !{!2280, !2284, !2288, !2292, !2296}
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "fix_recovery_cfg", scope: !2278, file: !929, line: 89, baseType: !2281, size: 64)
!2281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2282, size: 64)
!2282 = !DISubroutineType(types: !2283)
!2283 = !{null, !1015, !1015, !1015}
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "add_block", scope: !2278, file: !929, line: 96, baseType: !2285, size: 64, offset: 64)
!2285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2286, size: 64)
!2286 = !DISubroutineType(types: !2287)
!2287 = !{null, !960, !960}
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_number_of_insns", scope: !2278, file: !929, line: 99, baseType: !2289, size: 64, offset: 128)
!2289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2290, size: 64)
!2290 = !DISubroutineType(types: !2291)
!2291 = !{!1015, !960}
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "luid_for_non_insn", scope: !2278, file: !929, line: 105, baseType: !2293, size: 64, offset: 192)
!2293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2294, size: 64)
!2294 = !DISubroutineType(types: !2295)
!2295 = !{!1015, !992}
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "sched_pass_id", scope: !2278, file: !929, line: 108, baseType: !928, size: 32, offset: 256)
!2297 = !DIGlobalVariableExpression(var: !2298, expr: !DIExpression())
!2298 = distinct !DIGlobalVariable(name: "sms_sched_deps_info", scope: !2, file: !3, line: 256, type: !2299, isLocal: true, isDefinition: true)
!2299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_deps_info_def", file: !929, line: 1149, size: 832, elements: !2300)
!2300 = !{!2301, !2307, !2311, !2315, !2316, !2317, !2318, !2319, !2323, !2324, !2325, !2330, !2334, !2335, !2336}
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "compute_jump_reg_dependencies", scope: !2299, file: !929, line: 1154, baseType: !2302, size: 64)
!2302 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2303, size: 64)
!2303 = !DISubroutineType(types: !2304)
!2304 = !{null, !992, !2305, !2305, !2305}
!2305 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset", file: !155, line: 37, baseType: !2306)
!2306 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !961, line: 47, baseType: !1049)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "start_insn", scope: !2299, file: !929, line: 1157, baseType: !2308, size: 64, offset: 64)
!2308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2309, size: 64)
!2309 = !DISubroutineType(types: !2310)
!2310 = !{null, !992}
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "finish_insn", scope: !2299, file: !929, line: 1160, baseType: !2312, size: 64, offset: 128)
!2312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2313, size: 64)
!2313 = !DISubroutineType(types: !2314)
!2314 = !{null}
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "start_lhs", scope: !2299, file: !929, line: 1163, baseType: !2308, size: 64, offset: 192)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "finish_lhs", scope: !2299, file: !929, line: 1166, baseType: !2312, size: 64, offset: 256)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "start_rhs", scope: !2299, file: !929, line: 1169, baseType: !2308, size: 64, offset: 320)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "finish_rhs", scope: !2299, file: !929, line: 1172, baseType: !2312, size: 64, offset: 384)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "note_reg_set", scope: !2299, file: !929, line: 1175, baseType: !2320, size: 64, offset: 448)
!2320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2321, size: 64)
!2321 = !DISubroutineType(types: !2322)
!2322 = !{null, !1015}
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "note_reg_clobber", scope: !2299, file: !929, line: 1178, baseType: !2320, size: 64, offset: 512)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "note_reg_use", scope: !2299, file: !929, line: 1181, baseType: !2320, size: 64, offset: 576)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "note_mem_dep", scope: !2299, file: !929, line: 1185, baseType: !2326, size: 64, offset: 640)
!2326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2327, size: 64)
!2327 = !DISubroutineType(types: !2328)
!2328 = !{null, !992, !992, !992, !2329}
!2329 = !DIDerivedType(tag: DW_TAG_typedef, name: "ds_t", file: !929, line: 218, baseType: !1015)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "note_dep", scope: !2299, file: !929, line: 1188, baseType: !2331, size: 64, offset: 704)
!2331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2332, size: 64)
!2332 = !DISubroutineType(types: !2333)
!2333 = !{null, !992, !2329}
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "use_cselib", scope: !2299, file: !929, line: 1194, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "use_deps_list", scope: !2299, file: !929, line: 1198, baseType: !7, size: 1, offset: 769, flags: DIFlagBitField, extraData: i64 768)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "generate_spec_deps", scope: !2299, file: !929, line: 1202, baseType: !7, size: 1, offset: 770, flags: DIFlagBitField, extraData: i64 768)
!2337 = !DIGlobalVariableExpression(var: !2338, expr: !DIExpression())
!2338 = distinct !DIGlobalVariable(name: "sms_sched_info", scope: !2, file: !3, line: 264, type: !2339, isLocal: true, isDefinition: true)
!2339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "haifa_sched_info", file: !929, line: 556, size: 1088, elements: !2340)
!2340 = !{!2341, !2342, !2343, !2347, !2351, !2355, !2362, !2363, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2377, !2381, !2385}
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "init_ready_list", scope: !2339, file: !929, line: 560, baseType: !2312, size: 64)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "can_schedule_ready_p", scope: !2339, file: !929, line: 563, baseType: !2293, size: 64, offset: 64)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_more_p", scope: !2339, file: !929, line: 565, baseType: !2344, size: 64, offset: 128)
!2344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2345, size: 64)
!2345 = !DISubroutineType(types: !2346)
!2346 = !{!1015}
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "new_ready", scope: !2339, file: !929, line: 571, baseType: !2348, size: 64, offset: 192)
!2348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2349, size: 64)
!2349 = !DISubroutineType(types: !2350)
!2350 = !{!2329, !992, !2329}
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "rank", scope: !2339, file: !929, line: 575, baseType: !2352, size: 64, offset: 256)
!2352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2353, size: 64)
!2353 = !DISubroutineType(types: !2354)
!2354 = !{!1015, !992, !992}
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "print_insn", scope: !2339, file: !929, line: 580, baseType: !2356, size: 64, offset: 320)
!2356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2357, size: 64)
!2357 = !DISubroutineType(types: !2358)
!2358 = !{!1018, !2359, !1015}
!2359 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !961, line: 51, baseType: !2360)
!2360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2361, size: 64)
!2361 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !994)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "contributes_to_priority", scope: !2339, file: !929, line: 583, baseType: !2352, size: 64, offset: 384)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "insn_finishes_block_p", scope: !2339, file: !929, line: 587, baseType: !2364, size: 64, offset: 448)
!2364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2365, size: 64)
!2365 = !DISubroutineType(types: !2366)
!2366 = !{!1226, !992}
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "prev_head", scope: !2339, file: !929, line: 590, baseType: !992, size: 64, offset: 512)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "next_tail", scope: !2339, file: !929, line: 590, baseType: !992, size: 64, offset: 576)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2339, file: !929, line: 594, baseType: !992, size: 64, offset: 640)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2339, file: !929, line: 594, baseType: !992, size: 64, offset: 704)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "queue_must_finish_empty", scope: !2339, file: !929, line: 597, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "sched_max_insns_priority", scope: !2339, file: !929, line: 600, baseType: !1015, size: 32, offset: 800)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "add_remove_insn", scope: !2339, file: !929, line: 606, baseType: !2374, size: 64, offset: 832)
!2374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2375, size: 64)
!2375 = !DISubroutineType(types: !2376)
!2376 = !{null, !992, !1015}
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "begin_schedule_ready", scope: !2339, file: !929, line: 611, baseType: !2378, size: 64, offset: 896)
!2378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2379, size: 64)
!2379 = !DISubroutineType(types: !2380)
!2380 = !{null, !992, !992}
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "advance_target_bb", scope: !2339, file: !929, line: 617, baseType: !2382, size: 64, offset: 960)
!2382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2383, size: 64)
!2383 = !DISubroutineType(types: !2384)
!2384 = !{!960, !960, !992}
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2339, file: !929, line: 621, baseType: !7, size: 32, offset: 1024)
!2386 = !DIGlobalVariableExpression(var: !2387, expr: !DIExpression())
!2387 = distinct !DIGlobalVariable(name: "tmp", scope: !2388, file: !3, line: 240, type: !2390, isLocal: true, isDefinition: true)
!2388 = distinct !DISubprogram(name: "sms_print_insn", scope: !3, file: !3, line: 238, type: !2357, scopeLine: 239, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!2389 = !{}
!2390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1020, size: 640, elements: !2391)
!2391 = !{!2392}
!2392 = !DISubrange(count: 80)
!2393 = !DIGlobalVariableExpression(var: !2394, expr: !DIExpression())
!2394 = distinct !DIGlobalVariable(name: "node_sched_params", scope: !2, file: !3, line: 383, type: !2257, isLocal: true, isDefinition: true)
!2395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !410, line: 162, size: 640, elements: !2396)
!2396 = !{!2397}
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2395, file: !410, line: 164, baseType: !2398, size: 640)
!2398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !410, line: 114, size: 640, elements: !2399)
!2399 = !{!2400, !2401, !2402, !2406, !2410, !2412, !2413, !2414, !2416, !2417, !2418, !2419, !2420}
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2398, file: !410, line: 117, baseType: !409, size: 32)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2398, file: !410, line: 121, baseType: !1018, size: 64, offset: 64)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2398, file: !410, line: 125, baseType: !2403, size: 64, offset: 128)
!2403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2404, size: 64)
!2404 = !DISubroutineType(types: !2405)
!2405 = !{!1226}
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2398, file: !410, line: 130, baseType: !2407, size: 64, offset: 192)
!2407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2408, size: 64)
!2408 = !DISubroutineType(types: !2409)
!2409 = !{!7}
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2398, file: !410, line: 133, baseType: !2411, size: 64, offset: 256)
!2411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2398, size: 64)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2398, file: !410, line: 136, baseType: !2411, size: 64, offset: 320)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2398, file: !410, line: 139, baseType: !1015, size: 32, offset: 384)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2398, file: !410, line: 143, baseType: !2415, size: 32, offset: 416)
!2415 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !417, line: 80, baseType: !416)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2398, file: !410, line: 146, baseType: !7, size: 32, offset: 448)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2398, file: !410, line: 147, baseType: !7, size: 32, offset: 480)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2398, file: !410, line: 148, baseType: !7, size: 32, offset: 512)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2398, file: !410, line: 151, baseType: !7, size: 32, offset: 544)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2398, file: !410, line: 152, baseType: !7, size: 32, offset: 576)
!2421 = !{i32 7, !"Dwarf Version", i32 4}
!2422 = !{i32 2, !"Debug Info Version", i32 3}
!2423 = !{i32 1, !"wchar_size", i32 4}
!2424 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2425 = distinct !DISubprogram(name: "print_partial_schedule", scope: !3, file: !3, line: 2497, type: !2426, scopeLine: 2498, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!2426 = !DISubroutineType(types: !2427)
!2427 = !{null, !2218, !2428}
!2428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2429, size: 64)
!2429 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2430, line: 7, baseType: !2431)
!2430 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2431 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2432, line: 49, size: 1728, elements: !2433)
!2432 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2433 = !{!2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2449, !2451, !2452, !2453, !2456, !2458, !2459, !2460, !2463, !2465, !2468, !2471, !2472, !2473, !2474, !2475}
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2431, file: !2432, line: 51, baseType: !1015, size: 32)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2431, file: !2432, line: 54, baseType: !1088, size: 64, offset: 64)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2431, file: !2432, line: 55, baseType: !1088, size: 64, offset: 128)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2431, file: !2432, line: 56, baseType: !1088, size: 64, offset: 192)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2431, file: !2432, line: 57, baseType: !1088, size: 64, offset: 256)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2431, file: !2432, line: 58, baseType: !1088, size: 64, offset: 320)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2431, file: !2432, line: 59, baseType: !1088, size: 64, offset: 384)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2431, file: !2432, line: 60, baseType: !1088, size: 64, offset: 448)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2431, file: !2432, line: 61, baseType: !1088, size: 64, offset: 512)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2431, file: !2432, line: 64, baseType: !1088, size: 64, offset: 576)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2431, file: !2432, line: 65, baseType: !1088, size: 64, offset: 640)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2431, file: !2432, line: 66, baseType: !1088, size: 64, offset: 704)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2431, file: !2432, line: 68, baseType: !2447, size: 64, offset: 768)
!2447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2448, size: 64)
!2448 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2432, line: 36, flags: DIFlagFwdDecl)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2431, file: !2432, line: 70, baseType: !2450, size: 64, offset: 832)
!2450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2431, size: 64)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2431, file: !2432, line: 72, baseType: !1015, size: 32, offset: 896)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2431, file: !2432, line: 73, baseType: !1015, size: 32, offset: 928)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2431, file: !2432, line: 74, baseType: !2454, size: 64, offset: 960)
!2454 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2455, line: 152, baseType: !1082)
!2455 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2431, file: !2432, line: 77, baseType: !2457, size: 16, offset: 1024)
!2457 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2431, file: !2432, line: 78, baseType: !1892, size: 8, offset: 1040)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2431, file: !2432, line: 79, baseType: !1208, size: 8, offset: 1048)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2431, file: !2432, line: 81, baseType: !2461, size: 64, offset: 1088)
!2461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2462, size: 64)
!2462 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2432, line: 43, baseType: null)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2431, file: !2432, line: 89, baseType: !2464, size: 64, offset: 1152)
!2464 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2455, line: 153, baseType: !1082)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2431, file: !2432, line: 91, baseType: !2466, size: 64, offset: 1216)
!2466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2467, size: 64)
!2467 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2432, line: 37, flags: DIFlagFwdDecl)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2431, file: !2432, line: 92, baseType: !2469, size: 64, offset: 1280)
!2469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2470, size: 64)
!2470 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2432, line: 38, flags: DIFlagFwdDecl)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2431, file: !2432, line: 93, baseType: !2450, size: 64, offset: 1344)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2431, file: !2432, line: 94, baseType: !1103, size: 64, offset: 1408)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2431, file: !2432, line: 95, baseType: !1470, size: 64, offset: 1472)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2431, file: !2432, line: 96, baseType: !1015, size: 32, offset: 1536)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2431, file: !2432, line: 98, baseType: !2476, size: 160, offset: 1568)
!2476 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1020, size: 160, elements: !2477)
!2477 = !{!2478}
!2478 = !DISubrange(count: 20)
!2479 = !DILocalVariable(name: "ps", arg: 1, scope: !2425, file: !3, line: 2497, type: !2218)
!2480 = !DILocation(line: 2497, column: 46, scope: !2425)
!2481 = !DILocalVariable(name: "dump", arg: 2, scope: !2425, file: !3, line: 2497, type: !2428)
!2482 = !DILocation(line: 2497, column: 56, scope: !2425)
!2483 = !DILocalVariable(name: "i", scope: !2425, file: !3, line: 2499, type: !1015)
!2484 = !DILocation(line: 2499, column: 7, scope: !2425)
!2485 = !DILocation(line: 2501, column: 10, scope: !2486)
!2486 = distinct !DILexicalBlock(scope: !2425, file: !3, line: 2501, column: 3)
!2487 = !DILocation(line: 2501, column: 8, scope: !2486)
!2488 = !DILocation(line: 2501, column: 15, scope: !2489)
!2489 = distinct !DILexicalBlock(scope: !2486, file: !3, line: 2501, column: 3)
!2490 = !DILocation(line: 2501, column: 19, scope: !2489)
!2491 = !DILocation(line: 2501, column: 23, scope: !2489)
!2492 = !DILocation(line: 2501, column: 17, scope: !2489)
!2493 = !DILocation(line: 2501, column: 3, scope: !2486)
!2494 = !DILocalVariable(name: "ps_i", scope: !2495, file: !3, line: 2503, type: !2226)
!2495 = distinct !DILexicalBlock(scope: !2489, file: !3, line: 2502, column: 5)
!2496 = !DILocation(line: 2503, column: 19, scope: !2495)
!2497 = !DILocation(line: 2503, column: 26, scope: !2495)
!2498 = !DILocation(line: 2503, column: 30, scope: !2495)
!2499 = !DILocation(line: 2503, column: 35, scope: !2495)
!2500 = !DILocation(line: 2505, column: 16, scope: !2495)
!2501 = !DILocation(line: 2505, column: 39, scope: !2495)
!2502 = !DILocation(line: 2505, column: 7, scope: !2495)
!2503 = !DILocation(line: 2506, column: 7, scope: !2495)
!2504 = !DILocation(line: 2506, column: 14, scope: !2495)
!2505 = !DILocation(line: 2508, column: 13, scope: !2506)
!2506 = distinct !DILexicalBlock(scope: !2495, file: !3, line: 2507, column: 2)
!2507 = !DILocation(line: 2509, column: 6, scope: !2506)
!2508 = !DILocation(line: 2508, column: 4, scope: !2506)
!2509 = !DILocation(line: 2510, column: 11, scope: !2506)
!2510 = !DILocation(line: 2510, column: 17, scope: !2506)
!2511 = !DILocation(line: 2510, column: 9, scope: !2506)
!2512 = distinct !{!2512, !2503, !2513}
!2513 = !DILocation(line: 2511, column: 2, scope: !2495)
!2514 = !DILocation(line: 2512, column: 5, scope: !2495)
!2515 = !DILocation(line: 2501, column: 28, scope: !2489)
!2516 = !DILocation(line: 2501, column: 3, scope: !2489)
!2517 = distinct !{!2517, !2493, !2518}
!2518 = !DILocation(line: 2512, column: 5, scope: !2486)
!2519 = !DILocation(line: 2513, column: 1, scope: !2425)
!2520 = distinct !DISubprogram(name: "gate_handle_sms", scope: !3, file: !3, line: 2854, type: !2404, scopeLine: 2855, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!2521 = !DILocation(line: 2856, column: 11, scope: !2520)
!2522 = !DILocation(line: 2856, column: 20, scope: !2520)
!2523 = !DILocation(line: 2856, column: 24, scope: !2520)
!2524 = !DILocation(line: 2856, column: 27, scope: !2520)
!2525 = !DILocation(line: 0, scope: !2520)
!2526 = !DILocation(line: 2856, column: 10, scope: !2520)
!2527 = !DILocation(line: 2856, column: 3, scope: !2520)
!2528 = distinct !DISubprogram(name: "rest_of_handle_sms", scope: !3, file: !3, line: 2863, type: !2408, scopeLine: 2864, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!2529 = !DILocalVariable(name: "bb", scope: !2528, file: !3, line: 2866, type: !960)
!2530 = !DILocation(line: 2866, column: 15, scope: !2528)
!2531 = !DILocation(line: 2869, column: 3, scope: !2528)
!2532 = !DILocation(line: 2870, column: 3, scope: !2528)
!2533 = !DILocation(line: 2873, column: 15, scope: !2528)
!2534 = !DILocation(line: 2873, column: 13, scope: !2528)
!2535 = !DILocation(line: 2876, column: 3, scope: !2536)
!2536 = distinct !DILexicalBlock(scope: !2528, file: !3, line: 2876, column: 3)
!2537 = !DILocation(line: 2876, column: 3, scope: !2538)
!2538 = distinct !DILexicalBlock(scope: !2536, file: !3, line: 2876, column: 3)
!2539 = !DILocation(line: 2877, column: 9, scope: !2540)
!2540 = distinct !DILexicalBlock(scope: !2538, file: !3, line: 2877, column: 9)
!2541 = !DILocation(line: 2877, column: 13, scope: !2540)
!2542 = !DILocation(line: 2877, column: 24, scope: !2540)
!2543 = !DILocation(line: 2877, column: 21, scope: !2540)
!2544 = !DILocation(line: 2877, column: 9, scope: !2538)
!2545 = !DILocation(line: 2878, column: 17, scope: !2540)
!2546 = !DILocation(line: 2878, column: 21, scope: !2540)
!2547 = !DILocation(line: 2878, column: 7, scope: !2540)
!2548 = !DILocation(line: 2878, column: 11, scope: !2540)
!2549 = !DILocation(line: 2878, column: 15, scope: !2540)
!2550 = distinct !{!2550, !2535, !2551}
!2551 = !DILocation(line: 2878, column: 21, scope: !2536)
!2552 = !DILocation(line: 2879, column: 3, scope: !2528)
!2553 = !DILocation(line: 2880, column: 3, scope: !2528)
!2554 = !DILocation(line: 2882, column: 3, scope: !2528)
!2555 = distinct !DISubprogram(name: "sms_schedule", scope: !3, file: !3, line: 884, type: !2313, scopeLine: 885, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!2556 = !DILocalVariable(name: "insn", scope: !2555, file: !3, line: 886, type: !992)
!2557 = !DILocation(line: 886, column: 7, scope: !2555)
!2558 = !DILocalVariable(name: "g_arr", scope: !2555, file: !3, line: 887, type: !954)
!2559 = !DILocation(line: 887, column: 12, scope: !2555)
!2560 = !DILocalVariable(name: "g", scope: !2555, file: !3, line: 887, type: !955)
!2561 = !DILocation(line: 887, column: 19, scope: !2555)
!2562 = !DILocalVariable(name: "node_order", scope: !2555, file: !3, line: 888, type: !2217)
!2563 = !DILocation(line: 888, column: 9, scope: !2555)
!2564 = !DILocalVariable(name: "maxii", scope: !2555, file: !3, line: 889, type: !1015)
!2565 = !DILocation(line: 889, column: 7, scope: !2555)
!2566 = !DILocalVariable(name: "max_asap", scope: !2555, file: !3, line: 889, type: !1015)
!2567 = !DILocation(line: 889, column: 14, scope: !2555)
!2568 = !DILocalVariable(name: "li", scope: !2555, file: !3, line: 890, type: !2569)
!2569 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !142, line: 515, baseType: !2570)
!2570 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !142, line: 508, size: 128, elements: !2571)
!2571 = !{!2572, !2573}
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !2570, file: !142, line: 511, baseType: !2238, size: 64)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !2570, file: !142, line: 514, baseType: !7, size: 32, offset: 64)
!2574 = !DILocation(line: 890, column: 17, scope: !2555)
!2575 = !DILocalVariable(name: "ps", scope: !2555, file: !3, line: 891, type: !2218)
!2576 = !DILocation(line: 891, column: 24, scope: !2555)
!2577 = !DILocalVariable(name: "bb", scope: !2555, file: !3, line: 892, type: !960)
!2578 = !DILocation(line: 892, column: 15, scope: !2555)
!2579 = !DILocalVariable(name: "loop", scope: !2555, file: !3, line: 893, type: !1580)
!2580 = !DILocation(line: 893, column: 16, scope: !2555)
!2581 = !DILocalVariable(name: "condition_bb", scope: !2555, file: !3, line: 894, type: !960)
!2582 = !DILocation(line: 894, column: 15, scope: !2555)
!2583 = !DILocalVariable(name: "latch_edge", scope: !2555, file: !3, line: 895, type: !978)
!2584 = !DILocation(line: 895, column: 8, scope: !2555)
!2585 = !DILocalVariable(name: "trip_count", scope: !2555, file: !3, line: 896, type: !2127)
!2586 = !DILocation(line: 896, column: 13, scope: !2555)
!2587 = !DILocation(line: 898, column: 3, scope: !2555)
!2588 = !DILocation(line: 900, column: 7, scope: !2589)
!2589 = distinct !DILexicalBlock(scope: !2555, file: !3, line: 900, column: 7)
!2590 = !DILocation(line: 900, column: 26, scope: !2589)
!2591 = !DILocation(line: 900, column: 7, scope: !2555)
!2592 = !DILocation(line: 902, column: 7, scope: !2593)
!2593 = distinct !DILexicalBlock(scope: !2589, file: !3, line: 901, column: 5)
!2594 = !DILocation(line: 903, column: 7, scope: !2593)
!2595 = !DILocation(line: 907, column: 21, scope: !2596)
!2596 = distinct !DILexicalBlock(scope: !2555, file: !3, line: 907, column: 7)
!2597 = !DILocation(line: 907, column: 7, scope: !2596)
!2598 = !DILocation(line: 907, column: 7, scope: !2555)
!2599 = !DILocalVariable(name: "temp", scope: !2600, file: !3, line: 909, type: !1015)
!2600 = distinct !DILexicalBlock(scope: !2596, file: !3, line: 908, column: 5)
!2601 = !DILocation(line: 909, column: 11, scope: !2600)
!2602 = !DILocation(line: 909, column: 18, scope: !2600)
!2603 = !DILocation(line: 911, column: 24, scope: !2600)
!2604 = !DILocation(line: 912, column: 34, scope: !2600)
!2605 = !DILocation(line: 912, column: 20, scope: !2600)
!2606 = !DILocation(line: 912, column: 18, scope: !2600)
!2607 = !DILocation(line: 913, column: 26, scope: !2600)
!2608 = !DILocation(line: 913, column: 24, scope: !2600)
!2609 = !DILocation(line: 914, column: 5, scope: !2600)
!2610 = !DILocation(line: 916, column: 16, scope: !2596)
!2611 = !DILocation(line: 919, column: 3, scope: !2555)
!2612 = !DILocation(line: 920, column: 3, scope: !2555)
!2613 = !DILocation(line: 924, column: 11, scope: !2555)
!2614 = !DILocation(line: 924, column: 9, scope: !2555)
!2615 = !DILocation(line: 926, column: 7, scope: !2616)
!2616 = distinct !DILexicalBlock(scope: !2555, file: !3, line: 926, column: 7)
!2617 = !DILocation(line: 926, column: 7, scope: !2555)
!2618 = !DILocation(line: 928, column: 14, scope: !2619)
!2619 = distinct !DILexicalBlock(scope: !2616, file: !3, line: 927, column: 3)
!2620 = !DILocation(line: 928, column: 5, scope: !2619)
!2621 = !DILocation(line: 929, column: 14, scope: !2619)
!2622 = !DILocation(line: 929, column: 5, scope: !2619)
!2623 = !DILocation(line: 930, column: 3, scope: !2619)
!2624 = !DILocation(line: 934, column: 3, scope: !2625)
!2625 = distinct !DILexicalBlock(scope: !2555, file: !3, line: 934, column: 3)
!2626 = !DILocation(line: 934, column: 3, scope: !2627)
!2627 = distinct !DILexicalBlock(scope: !2625, file: !3, line: 934, column: 3)
!2628 = !DILocalVariable(name: "head", scope: !2629, file: !3, line: 936, type: !992)
!2629 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 935, column: 5)
!2630 = !DILocation(line: 936, column: 11, scope: !2629)
!2631 = !DILocalVariable(name: "tail", scope: !2629, file: !3, line: 936, type: !992)
!2632 = !DILocation(line: 936, column: 17, scope: !2629)
!2633 = !DILocalVariable(name: "count_reg", scope: !2629, file: !3, line: 937, type: !992)
!2634 = !DILocation(line: 937, column: 11, scope: !2629)
!2635 = !DILocation(line: 940, column: 11, scope: !2636)
!2636 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 940, column: 11)
!2637 = !DILocation(line: 940, column: 36, scope: !2636)
!2638 = !DILocation(line: 940, column: 11, scope: !2629)
!2639 = !DILocation(line: 942, column: 15, scope: !2640)
!2640 = distinct !DILexicalBlock(scope: !2641, file: !3, line: 942, column: 15)
!2641 = distinct !DILexicalBlock(scope: !2636, file: !3, line: 941, column: 9)
!2642 = !DILocation(line: 942, column: 15, scope: !2641)
!2643 = !DILocation(line: 943, column: 22, scope: !2640)
!2644 = !DILocation(line: 943, column: 13, scope: !2640)
!2645 = !DILocation(line: 945, column: 11, scope: !2641)
!2646 = !DILocation(line: 948, column: 11, scope: !2647)
!2647 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 948, column: 11)
!2648 = !DILocation(line: 948, column: 11, scope: !2629)
!2649 = !DILocalVariable(name: "insn", scope: !2650, file: !3, line: 950, type: !992)
!2650 = distinct !DILexicalBlock(scope: !2647, file: !3, line: 949, column: 7)
!2651 = !DILocation(line: 950, column: 14, scope: !2650)
!2652 = !DILocation(line: 950, column: 21, scope: !2650)
!2653 = !DILocation(line: 952, column: 19, scope: !2650)
!2654 = !DILocation(line: 953, column: 19, scope: !2650)
!2655 = !DILocation(line: 953, column: 25, scope: !2650)
!2656 = !DILocation(line: 953, column: 41, scope: !2650)
!2657 = !DILocation(line: 953, column: 30, scope: !2650)
!2658 = !DILocation(line: 953, column: 59, scope: !2650)
!2659 = !DILocation(line: 953, column: 48, scope: !2650)
!2660 = !DILocation(line: 952, column: 10, scope: !2650)
!2661 = !DILocation(line: 955, column: 7, scope: !2650)
!2662 = !DILocation(line: 957, column: 27, scope: !2663)
!2663 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 957, column: 11)
!2664 = !DILocation(line: 957, column: 13, scope: !2663)
!2665 = !DILocation(line: 957, column: 11, scope: !2629)
!2666 = !DILocation(line: 958, column: 9, scope: !2663)
!2667 = !DILocation(line: 960, column: 36, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 960, column: 11)
!2669 = !DILocation(line: 960, column: 13, scope: !2668)
!2670 = !DILocation(line: 960, column: 11, scope: !2629)
!2671 = !DILocation(line: 962, column: 13, scope: !2672)
!2672 = distinct !DILexicalBlock(scope: !2673, file: !3, line: 962, column: 13)
!2673 = distinct !DILexicalBlock(scope: !2668, file: !3, line: 961, column: 7)
!2674 = !DILocation(line: 962, column: 13, scope: !2673)
!2675 = !DILocation(line: 963, column: 20, scope: !2672)
!2676 = !DILocation(line: 963, column: 11, scope: !2672)
!2677 = !DILocation(line: 964, column: 2, scope: !2673)
!2678 = !DILocation(line: 967, column: 12, scope: !2629)
!2679 = !DILocation(line: 967, column: 18, scope: !2629)
!2680 = !DILocation(line: 967, column: 10, scope: !2629)
!2681 = !DILocation(line: 969, column: 26, scope: !2629)
!2682 = !DILocation(line: 969, column: 30, scope: !2629)
!2683 = !DILocation(line: 969, column: 7, scope: !2629)
!2684 = !DILocation(line: 970, column: 37, scope: !2629)
!2685 = !DILocation(line: 970, column: 20, scope: !2629)
!2686 = !DILocation(line: 970, column: 18, scope: !2629)
!2687 = !DILocation(line: 971, column: 7, scope: !2629)
!2688 = !DILocation(line: 972, column: 24, scope: !2689)
!2689 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 972, column: 11)
!2690 = !DILocation(line: 972, column: 11, scope: !2689)
!2691 = !DILocation(line: 972, column: 31, scope: !2689)
!2692 = !DILocation(line: 972, column: 11, scope: !2629)
!2693 = !DILocation(line: 973, column: 15, scope: !2689)
!2694 = !DILocation(line: 973, column: 27, scope: !2689)
!2695 = !DILocation(line: 973, column: 48, scope: !2689)
!2696 = !DILocation(line: 973, column: 35, scope: !2689)
!2697 = !DILocation(line: 973, column: 55, scope: !2689)
!2698 = !DILocation(line: 973, column: 33, scope: !2689)
!2699 = !DILocation(line: 973, column: 13, scope: !2689)
!2700 = !DILocation(line: 973, column: 2, scope: !2689)
!2701 = !DILocation(line: 977, column: 12, scope: !2702)
!2702 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 977, column: 12)
!2703 = !DILocation(line: 977, column: 24, scope: !2702)
!2704 = !DILocation(line: 978, column: 11, scope: !2702)
!2705 = !DILocation(line: 978, column: 15, scope: !2702)
!2706 = !DILocation(line: 978, column: 27, scope: !2702)
!2707 = !DILocation(line: 978, column: 48, scope: !2702)
!2708 = !DILocation(line: 978, column: 35, scope: !2702)
!2709 = !DILocation(line: 978, column: 55, scope: !2702)
!2710 = !DILocation(line: 978, column: 63, scope: !2702)
!2711 = !DILocation(line: 978, column: 61, scope: !2702)
!2712 = !DILocation(line: 978, column: 33, scope: !2702)
!2713 = !DILocation(line: 977, column: 12, scope: !2629)
!2714 = !DILocation(line: 980, column: 8, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2716, file: !3, line: 980, column: 8)
!2716 = distinct !DILexicalBlock(scope: !2702, file: !3, line: 979, column: 2)
!2717 = !DILocation(line: 980, column: 8, scope: !2716)
!2718 = !DILocation(line: 982, column: 17, scope: !2719)
!2719 = distinct !DILexicalBlock(scope: !2715, file: !3, line: 981, column: 6)
!2720 = !DILocation(line: 983, column: 21, scope: !2719)
!2721 = !DILocation(line: 983, column: 10, scope: !2719)
!2722 = !DILocation(line: 983, column: 39, scope: !2719)
!2723 = !DILocation(line: 983, column: 28, scope: !2719)
!2724 = !DILocation(line: 982, column: 8, scope: !2719)
!2725 = !DILocation(line: 984, column: 17, scope: !2719)
!2726 = !DILocation(line: 984, column: 8, scope: !2719)
!2727 = !DILocation(line: 985, column: 12, scope: !2728)
!2728 = distinct !DILexicalBlock(scope: !2719, file: !3, line: 985, column: 12)
!2729 = !DILocation(line: 985, column: 25, scope: !2728)
!2730 = !DILocation(line: 985, column: 28, scope: !2728)
!2731 = !DILocation(line: 985, column: 12, scope: !2719)
!2732 = !DILocation(line: 987, column: 20, scope: !2733)
!2733 = distinct !DILexicalBlock(scope: !2728, file: !3, line: 986, column: 7)
!2734 = !DILocation(line: 987, column: 11, scope: !2733)
!2735 = !DILocation(line: 988, column: 20, scope: !2733)
!2736 = !DILocation(line: 989, column: 37, scope: !2733)
!2737 = !DILocation(line: 989, column: 41, scope: !2733)
!2738 = !DILocation(line: 988, column: 11, scope: !2733)
!2739 = !DILocation(line: 990, column: 20, scope: !2733)
!2740 = !DILocation(line: 990, column: 11, scope: !2733)
!2741 = !DILocation(line: 991, column: 28, scope: !2733)
!2742 = !DILocation(line: 991, column: 19, scope: !2733)
!2743 = !DILocation(line: 992, column: 28, scope: !2733)
!2744 = !DILocation(line: 993, column: 46, scope: !2733)
!2745 = !DILocation(line: 992, column: 19, scope: !2733)
!2746 = !DILocation(line: 994, column: 28, scope: !2733)
!2747 = !DILocation(line: 994, column: 19, scope: !2733)
!2748 = !DILocation(line: 995, column: 20, scope: !2733)
!2749 = !DILocation(line: 995, column: 11, scope: !2733)
!2750 = !DILocation(line: 996, column: 20, scope: !2733)
!2751 = !DILocation(line: 997, column: 34, scope: !2733)
!2752 = !DILocation(line: 997, column: 48, scope: !2733)
!2753 = !DILocation(line: 996, column: 11, scope: !2733)
!2754 = !DILocation(line: 998, column: 20, scope: !2733)
!2755 = !DILocation(line: 998, column: 11, scope: !2733)
!2756 = !DILocation(line: 999, column: 7, scope: !2733)
!2757 = !DILocation(line: 1000, column: 6, scope: !2719)
!2758 = !DILocation(line: 1001, column: 11, scope: !2716)
!2759 = !DILocation(line: 1005, column: 47, scope: !2760)
!2760 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 1005, column: 12)
!2761 = !DILocation(line: 1005, column: 53, scope: !2760)
!2762 = !DILocation(line: 1005, column: 26, scope: !2760)
!2763 = !DILocation(line: 1005, column: 24, scope: !2760)
!2764 = !DILocation(line: 1005, column: 12, scope: !2629)
!2765 = !DILocation(line: 1007, column: 13, scope: !2766)
!2766 = distinct !DILexicalBlock(scope: !2767, file: !3, line: 1007, column: 13)
!2767 = distinct !DILexicalBlock(scope: !2760, file: !3, line: 1006, column: 7)
!2768 = !DILocation(line: 1007, column: 13, scope: !2767)
!2769 = !DILocation(line: 1008, column: 20, scope: !2766)
!2770 = !DILocation(line: 1008, column: 11, scope: !2766)
!2771 = !DILocation(line: 1009, column: 2, scope: !2767)
!2772 = !DILocation(line: 1017, column: 18, scope: !2773)
!2773 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 1017, column: 6)
!2774 = !DILocation(line: 1017, column: 16, scope: !2773)
!2775 = !DILocation(line: 1017, column: 11, scope: !2773)
!2776 = !DILocation(line: 1017, column: 24, scope: !2777)
!2777 = distinct !DILexicalBlock(scope: !2773, file: !3, line: 1017, column: 6)
!2778 = !DILocation(line: 1017, column: 32, scope: !2777)
!2779 = !DILocation(line: 1017, column: 29, scope: !2777)
!2780 = !DILocation(line: 1017, column: 6, scope: !2773)
!2781 = !DILocalVariable(name: "set", scope: !2782, file: !3, line: 1019, type: !992)
!2782 = distinct !DILexicalBlock(scope: !2777, file: !3, line: 1018, column: 7)
!2783 = !DILocation(line: 1019, column: 14, scope: !2782)
!2784 = !DILocation(line: 1021, column: 13, scope: !2785)
!2785 = distinct !DILexicalBlock(scope: !2782, file: !3, line: 1021, column: 13)
!2786 = !DILocation(line: 1022, column: 13, scope: !2785)
!2787 = !DILocation(line: 1022, column: 16, scope: !2785)
!2788 = !DILocation(line: 1023, column: 13, scope: !2785)
!2789 = !DILocation(line: 1023, column: 17, scope: !2785)
!2790 = !DILocation(line: 1023, column: 40, scope: !2785)
!2791 = !DILocation(line: 1023, column: 44, scope: !2785)
!2792 = !DILocation(line: 1024, column: 17, scope: !2785)
!2793 = !DILocation(line: 1024, column: 21, scope: !2785)
!2794 = !DILocation(line: 1024, column: 39, scope: !2785)
!2795 = !DILocation(line: 1024, column: 42, scope: !2785)
!2796 = !DILocation(line: 1024, column: 68, scope: !2785)
!2797 = !DILocation(line: 1026, column: 13, scope: !2785)
!2798 = !DILocation(line: 1026, column: 17, scope: !2785)
!2799 = !DILocation(line: 1026, column: 31, scope: !2785)
!2800 = !DILocation(line: 1026, column: 41, scope: !2785)
!2801 = !DILocation(line: 1026, column: 39, scope: !2785)
!2802 = !DILocation(line: 1027, column: 17, scope: !2785)
!2803 = !DILocation(line: 1027, column: 20, scope: !2785)
!2804 = !DILocation(line: 1027, column: 46, scope: !2785)
!2805 = !DILocation(line: 1021, column: 13, scope: !2782)
!2806 = !DILocation(line: 1028, column: 9, scope: !2785)
!2807 = !DILocation(line: 1029, column: 7, scope: !2782)
!2808 = !DILocation(line: 1017, column: 57, scope: !2777)
!2809 = !DILocation(line: 1017, column: 55, scope: !2777)
!2810 = !DILocation(line: 1017, column: 6, scope: !2777)
!2811 = distinct !{!2811, !2780, !2812}
!2812 = !DILocation(line: 1029, column: 7, scope: !2773)
!2813 = !DILocation(line: 1031, column: 11, scope: !2814)
!2814 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 1031, column: 11)
!2815 = !DILocation(line: 1031, column: 19, scope: !2814)
!2816 = !DILocation(line: 1031, column: 16, scope: !2814)
!2817 = !DILocation(line: 1031, column: 11, scope: !2629)
!2818 = !DILocation(line: 1033, column: 8, scope: !2819)
!2819 = distinct !DILexicalBlock(scope: !2820, file: !3, line: 1033, column: 8)
!2820 = distinct !DILexicalBlock(scope: !2814, file: !3, line: 1032, column: 2)
!2821 = !DILocation(line: 1033, column: 8, scope: !2820)
!2822 = !DILocation(line: 1035, column: 12, scope: !2823)
!2823 = distinct !DILexicalBlock(scope: !2824, file: !3, line: 1035, column: 12)
!2824 = distinct !DILexicalBlock(scope: !2819, file: !3, line: 1034, column: 6)
!2825 = !DILocation(line: 1035, column: 12, scope: !2824)
!2826 = !DILocation(line: 1036, column: 12, scope: !2823)
!2827 = !DILocation(line: 1036, column: 3, scope: !2823)
!2828 = !DILocation(line: 1037, column: 17, scope: !2829)
!2829 = distinct !DILexicalBlock(scope: !2823, file: !3, line: 1037, column: 17)
!2830 = !DILocation(line: 1037, column: 17, scope: !2823)
!2831 = !DILocation(line: 1038, column: 12, scope: !2829)
!2832 = !DILocation(line: 1038, column: 3, scope: !2829)
!2833 = !DILocation(line: 1041, column: 25, scope: !2834)
!2834 = distinct !DILexicalBlock(scope: !2835, file: !3, line: 1041, column: 24)
!2835 = distinct !DILexicalBlock(scope: !2829, file: !3, line: 1039, column: 24)
!2836 = !DILocation(line: 1041, column: 48, scope: !2834)
!2837 = !DILocation(line: 1041, column: 52, scope: !2834)
!2838 = !DILocation(line: 1042, column: 17, scope: !2834)
!2839 = !DILocation(line: 1042, column: 21, scope: !2834)
!2840 = !DILocation(line: 1042, column: 39, scope: !2834)
!2841 = !DILocation(line: 1042, column: 42, scope: !2834)
!2842 = !DILocation(line: 1042, column: 68, scope: !2834)
!2843 = !DILocation(line: 1041, column: 24, scope: !2835)
!2844 = !DILocation(line: 1043, column: 26, scope: !2834)
!2845 = !DILocation(line: 1043, column: 17, scope: !2834)
!2846 = !DILocation(line: 1045, column: 25, scope: !2834)
!2847 = !DILocation(line: 1045, column: 16, scope: !2834)
!2848 = !DILocation(line: 1046, column: 26, scope: !2824)
!2849 = !DILocation(line: 1046, column: 37, scope: !2824)
!2850 = !DILocation(line: 1046, column: 8, scope: !2824)
!2851 = !DILocation(line: 1047, column: 6, scope: !2824)
!2852 = !DILocation(line: 1049, column: 4, scope: !2820)
!2853 = !DILocation(line: 1052, column: 30, scope: !2854)
!2854 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 1052, column: 11)
!2855 = !DILocation(line: 1052, column: 18, scope: !2854)
!2856 = !DILocation(line: 1052, column: 16, scope: !2854)
!2857 = !DILocation(line: 1052, column: 11, scope: !2629)
!2858 = !DILocation(line: 1054, column: 15, scope: !2859)
!2859 = distinct !DILexicalBlock(scope: !2860, file: !3, line: 1054, column: 15)
!2860 = distinct !DILexicalBlock(scope: !2854, file: !3, line: 1053, column: 9)
!2861 = !DILocation(line: 1054, column: 15, scope: !2860)
!2862 = !DILocation(line: 1055, column: 15, scope: !2859)
!2863 = !DILocation(line: 1055, column: 6, scope: !2859)
!2864 = !DILocation(line: 1056, column: 4, scope: !2860)
!2865 = !DILocation(line: 1059, column: 26, scope: !2629)
!2866 = !DILocation(line: 1059, column: 7, scope: !2629)
!2867 = !DILocation(line: 1059, column: 13, scope: !2629)
!2868 = !DILocation(line: 1059, column: 19, scope: !2629)
!2869 = !DILocation(line: 1059, column: 24, scope: !2629)
!2870 = !DILocation(line: 1060, column: 11, scope: !2871)
!2871 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 1060, column: 11)
!2872 = !DILocation(line: 1060, column: 11, scope: !2629)
!2873 = !DILocation(line: 1061, column: 18, scope: !2871)
!2874 = !DILocation(line: 1061, column: 9, scope: !2871)
!2875 = !DILocation(line: 1063, column: 5, scope: !2629)
!2876 = distinct !{!2876, !2624, !2877}
!2877 = !DILocation(line: 1063, column: 5, scope: !2625)
!2878 = !DILocation(line: 1064, column: 7, scope: !2879)
!2879 = distinct !DILexicalBlock(scope: !2555, file: !3, line: 1064, column: 7)
!2880 = !DILocation(line: 1064, column: 7, scope: !2555)
!2881 = !DILocation(line: 1066, column: 14, scope: !2882)
!2882 = distinct !DILexicalBlock(scope: !2879, file: !3, line: 1065, column: 3)
!2883 = !DILocation(line: 1066, column: 5, scope: !2882)
!2884 = !DILocation(line: 1067, column: 14, scope: !2882)
!2885 = !DILocation(line: 1067, column: 5, scope: !2882)
!2886 = !DILocation(line: 1068, column: 3, scope: !2882)
!2887 = !DILocation(line: 1071, column: 3, scope: !2888)
!2888 = distinct !DILexicalBlock(scope: !2555, file: !3, line: 1071, column: 3)
!2889 = !DILocation(line: 1071, column: 3, scope: !2890)
!2890 = distinct !DILexicalBlock(scope: !2888, file: !3, line: 1071, column: 3)
!2891 = !DILocalVariable(name: "head", scope: !2892, file: !3, line: 1073, type: !992)
!2892 = distinct !DILexicalBlock(scope: !2890, file: !3, line: 1072, column: 5)
!2893 = !DILocation(line: 1073, column: 11, scope: !2892)
!2894 = !DILocalVariable(name: "tail", scope: !2892, file: !3, line: 1073, type: !992)
!2895 = !DILocation(line: 1073, column: 17, scope: !2892)
!2896 = !DILocalVariable(name: "count_reg", scope: !2892, file: !3, line: 1074, type: !992)
!2897 = !DILocation(line: 1074, column: 11, scope: !2892)
!2898 = !DILocalVariable(name: "count_init", scope: !2892, file: !3, line: 1074, type: !992)
!2899 = !DILocation(line: 1074, column: 22, scope: !2892)
!2900 = !DILocalVariable(name: "mii", scope: !2892, file: !3, line: 1075, type: !1015)
!2901 = !DILocation(line: 1075, column: 11, scope: !2892)
!2902 = !DILocalVariable(name: "rec_mii", scope: !2892, file: !3, line: 1075, type: !1015)
!2903 = !DILocation(line: 1075, column: 16, scope: !2892)
!2904 = !DILocalVariable(name: "stage_count", scope: !2892, file: !3, line: 1076, type: !7)
!2905 = !DILocation(line: 1076, column: 16, scope: !2892)
!2906 = !DILocalVariable(name: "loop_count", scope: !2892, file: !3, line: 1077, type: !1082)
!2907 = !DILocation(line: 1077, column: 23, scope: !2892)
!2908 = !DILocation(line: 1079, column: 18, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 1079, column: 11)
!2910 = !DILocation(line: 1079, column: 24, scope: !2909)
!2911 = !DILocation(line: 1079, column: 30, scope: !2909)
!2912 = !DILocation(line: 1079, column: 16, scope: !2909)
!2913 = !DILocation(line: 1079, column: 11, scope: !2892)
!2914 = !DILocation(line: 1080, column: 9, scope: !2909)
!2915 = !DILocation(line: 1082, column: 11, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 1082, column: 11)
!2917 = !DILocation(line: 1082, column: 11, scope: !2892)
!2918 = !DILocalVariable(name: "insn", scope: !2919, file: !3, line: 1084, type: !992)
!2919 = distinct !DILexicalBlock(scope: !2916, file: !3, line: 1083, column: 7)
!2920 = !DILocation(line: 1084, column: 14, scope: !2919)
!2921 = !DILocation(line: 1084, column: 21, scope: !2919)
!2922 = !DILocation(line: 1086, column: 19, scope: !2919)
!2923 = !DILocation(line: 1087, column: 19, scope: !2919)
!2924 = !DILocation(line: 1087, column: 25, scope: !2919)
!2925 = !DILocation(line: 1087, column: 41, scope: !2919)
!2926 = !DILocation(line: 1087, column: 30, scope: !2919)
!2927 = !DILocation(line: 1087, column: 59, scope: !2919)
!2928 = !DILocation(line: 1087, column: 48, scope: !2919)
!2929 = !DILocation(line: 1086, column: 10, scope: !2919)
!2930 = !DILocation(line: 1089, column: 21, scope: !2919)
!2931 = !DILocation(line: 1089, column: 32, scope: !2919)
!2932 = !DILocation(line: 1089, column: 10, scope: !2919)
!2933 = !DILocation(line: 1090, column: 7, scope: !2919)
!2934 = !DILocation(line: 1092, column: 26, scope: !2892)
!2935 = !DILocation(line: 1092, column: 32, scope: !2892)
!2936 = !DILocation(line: 1092, column: 40, scope: !2892)
!2937 = !DILocation(line: 1092, column: 46, scope: !2892)
!2938 = !DILocation(line: 1092, column: 7, scope: !2892)
!2939 = !DILocation(line: 1094, column: 37, scope: !2892)
!2940 = !DILocation(line: 1094, column: 20, scope: !2892)
!2941 = !DILocation(line: 1094, column: 18, scope: !2892)
!2942 = !DILocation(line: 1095, column: 7, scope: !2892)
!2943 = !DILocation(line: 1096, column: 24, scope: !2944)
!2944 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 1096, column: 11)
!2945 = !DILocation(line: 1096, column: 11, scope: !2944)
!2946 = !DILocation(line: 1096, column: 31, scope: !2944)
!2947 = !DILocation(line: 1096, column: 11, scope: !2892)
!2948 = !DILocation(line: 1097, column: 15, scope: !2944)
!2949 = !DILocation(line: 1097, column: 27, scope: !2944)
!2950 = !DILocation(line: 1097, column: 48, scope: !2944)
!2951 = !DILocation(line: 1097, column: 35, scope: !2944)
!2952 = !DILocation(line: 1097, column: 55, scope: !2944)
!2953 = !DILocation(line: 1097, column: 33, scope: !2944)
!2954 = !DILocation(line: 1097, column: 13, scope: !2944)
!2955 = !DILocation(line: 1097, column: 2, scope: !2944)
!2956 = !DILocation(line: 1099, column: 11, scope: !2957)
!2957 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 1099, column: 11)
!2958 = !DILocation(line: 1099, column: 11, scope: !2892)
!2959 = !DILocation(line: 1101, column: 13, scope: !2960)
!2960 = distinct !DILexicalBlock(scope: !2957, file: !3, line: 1100, column: 2)
!2961 = !DILocation(line: 1102, column: 17, scope: !2960)
!2962 = !DILocation(line: 1102, column: 6, scope: !2960)
!2963 = !DILocation(line: 1102, column: 35, scope: !2960)
!2964 = !DILocation(line: 1102, column: 24, scope: !2960)
!2965 = !DILocation(line: 1101, column: 4, scope: !2960)
!2966 = !DILocation(line: 1103, column: 13, scope: !2960)
!2967 = !DILocation(line: 1103, column: 4, scope: !2960)
!2968 = !DILocation(line: 1104, column: 8, scope: !2969)
!2969 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 1104, column: 8)
!2970 = !DILocation(line: 1104, column: 21, scope: !2969)
!2971 = !DILocation(line: 1104, column: 24, scope: !2969)
!2972 = !DILocation(line: 1104, column: 8, scope: !2960)
!2973 = !DILocation(line: 1106, column: 17, scope: !2974)
!2974 = distinct !DILexicalBlock(scope: !2969, file: !3, line: 1105, column: 6)
!2975 = !DILocation(line: 1106, column: 8, scope: !2974)
!2976 = !DILocation(line: 1107, column: 17, scope: !2974)
!2977 = !DILocation(line: 1108, column: 35, scope: !2974)
!2978 = !DILocation(line: 1108, column: 39, scope: !2974)
!2979 = !DILocation(line: 1107, column: 8, scope: !2974)
!2980 = !DILocation(line: 1109, column: 17, scope: !2974)
!2981 = !DILocation(line: 1109, column: 8, scope: !2974)
!2982 = !DILocation(line: 1110, column: 17, scope: !2974)
!2983 = !DILocation(line: 1110, column: 8, scope: !2974)
!2984 = !DILocation(line: 1111, column: 17, scope: !2974)
!2985 = !DILocation(line: 1112, column: 35, scope: !2974)
!2986 = !DILocation(line: 1112, column: 49, scope: !2974)
!2987 = !DILocation(line: 1111, column: 8, scope: !2974)
!2988 = !DILocation(line: 1113, column: 17, scope: !2974)
!2989 = !DILocation(line: 1113, column: 8, scope: !2974)
!2990 = !DILocation(line: 1114, column: 6, scope: !2974)
!2991 = !DILocation(line: 1115, column: 13, scope: !2960)
!2992 = !DILocation(line: 1115, column: 4, scope: !2960)
!2993 = !DILocation(line: 1116, column: 13, scope: !2960)
!2994 = !DILocation(line: 1116, column: 46, scope: !2960)
!2995 = !DILocation(line: 1116, column: 49, scope: !2960)
!2996 = !DILocation(line: 1116, column: 4, scope: !2960)
!2997 = !DILocation(line: 1117, column: 20, scope: !2960)
!2998 = !DILocation(line: 1117, column: 53, scope: !2960)
!2999 = !DILocation(line: 1117, column: 56, scope: !2960)
!3000 = !DILocation(line: 1117, column: 11, scope: !2960)
!3001 = !DILocation(line: 1118, column: 20, scope: !2960)
!3002 = !DILocation(line: 1118, column: 54, scope: !2960)
!3003 = !DILocation(line: 1118, column: 57, scope: !2960)
!3004 = !DILocation(line: 1118, column: 11, scope: !2960)
!3005 = !DILocation(line: 1119, column: 2, scope: !2960)
!3006 = !DILocation(line: 1124, column: 18, scope: !2892)
!3007 = !DILocation(line: 1125, column: 45, scope: !3008)
!3008 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 1125, column: 11)
!3009 = !DILocation(line: 1125, column: 51, scope: !3008)
!3010 = !DILocation(line: 1125, column: 24, scope: !3008)
!3011 = !DILocation(line: 1125, column: 22, scope: !3008)
!3012 = !DILocation(line: 1125, column: 11, scope: !2892)
!3013 = !DILocalVariable(name: "pre_header", scope: !3014, file: !3, line: 1127, type: !960)
!3014 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 1126, column: 2)
!3015 = !DILocation(line: 1127, column: 16, scope: !3014)
!3016 = !DILocation(line: 1129, column: 38, scope: !3014)
!3017 = !DILocation(line: 1129, column: 17, scope: !3014)
!3018 = !DILocation(line: 1129, column: 45, scope: !3014)
!3019 = !DILocation(line: 1129, column: 15, scope: !3014)
!3020 = !DILocation(line: 1130, column: 40, scope: !3014)
!3021 = !DILocation(line: 1130, column: 51, scope: !3014)
!3022 = !DILocation(line: 1130, column: 17, scope: !3014)
!3023 = !DILocation(line: 1130, column: 15, scope: !3014)
!3024 = !DILocation(line: 1132, column: 2, scope: !3014)
!3025 = !DILocation(line: 1133, column: 7, scope: !2892)
!3026 = !DILocation(line: 1135, column: 11, scope: !3027)
!3027 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 1135, column: 11)
!3028 = !DILocation(line: 1135, column: 21, scope: !3027)
!3029 = !DILocation(line: 1135, column: 24, scope: !3027)
!3030 = !DILocation(line: 1135, column: 11, scope: !2892)
!3031 = !DILocation(line: 1137, column: 20, scope: !3032)
!3032 = distinct !DILexicalBlock(scope: !3027, file: !3, line: 1136, column: 9)
!3033 = !DILocation(line: 1137, column: 11, scope: !3032)
!3034 = !DILocation(line: 1138, column: 20, scope: !3032)
!3035 = !DILocation(line: 1139, column: 8, scope: !3032)
!3036 = !DILocation(line: 1138, column: 11, scope: !3032)
!3037 = !DILocation(line: 1140, column: 20, scope: !3032)
!3038 = !DILocation(line: 1140, column: 11, scope: !3032)
!3039 = !DILocation(line: 1141, column: 9, scope: !3032)
!3040 = !DILocation(line: 1143, column: 20, scope: !2892)
!3041 = !DILocation(line: 1143, column: 18, scope: !2892)
!3042 = !DILocation(line: 1145, column: 11, scope: !2892)
!3043 = !DILocation(line: 1146, column: 34, scope: !2892)
!3044 = !DILocation(line: 1146, column: 37, scope: !2892)
!3045 = !DILocation(line: 1146, column: 42, scope: !2892)
!3046 = !DILocation(line: 1146, column: 17, scope: !2892)
!3047 = !DILocation(line: 1146, column: 15, scope: !2892)
!3048 = !DILocation(line: 1147, column: 13, scope: !2892)
!3049 = !DILocation(line: 1147, column: 11, scope: !2892)
!3050 = !DILocation(line: 1148, column: 15, scope: !2892)
!3051 = !DILocation(line: 1148, column: 13, scope: !2892)
!3052 = !DILocation(line: 1150, column: 11, scope: !3053)
!3053 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 1150, column: 11)
!3054 = !DILocation(line: 1150, column: 11, scope: !2892)
!3055 = !DILocation(line: 1151, column: 11, scope: !3053)
!3056 = !DILocation(line: 1152, column: 4, scope: !3053)
!3057 = !DILocation(line: 1152, column: 13, scope: !3053)
!3058 = !DILocation(line: 1152, column: 18, scope: !3053)
!3059 = !DILocation(line: 1151, column: 2, scope: !3053)
!3060 = !DILocation(line: 1156, column: 30, scope: !2892)
!3061 = !DILocation(line: 1156, column: 7, scope: !2892)
!3062 = !DILocation(line: 1158, column: 35, scope: !2892)
!3063 = !DILocation(line: 1158, column: 38, scope: !2892)
!3064 = !DILocation(line: 1158, column: 43, scope: !2892)
!3065 = !DILocation(line: 1158, column: 50, scope: !2892)
!3066 = !DILocation(line: 1158, column: 12, scope: !2892)
!3067 = !DILocation(line: 1158, column: 10, scope: !2892)
!3068 = !DILocation(line: 1160, column: 11, scope: !3069)
!3069 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 1160, column: 11)
!3070 = !DILocation(line: 1160, column: 11, scope: !2892)
!3071 = !DILocation(line: 1161, column: 16, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !3069, file: !3, line: 1160, column: 14)
!3073 = !DILocation(line: 1161, column: 14, scope: !3072)
!3074 = !DILocation(line: 1162, column: 9, scope: !3072)
!3075 = !DILocation(line: 1163, column: 7, scope: !3072)
!3076 = !DILocation(line: 1167, column: 11, scope: !3077)
!3077 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 1167, column: 11)
!3078 = !DILocation(line: 1167, column: 23, scope: !3077)
!3079 = !DILocation(line: 1168, column: 4, scope: !3077)
!3080 = !DILocation(line: 1168, column: 8, scope: !3077)
!3081 = !DILocation(line: 1168, column: 19, scope: !3077)
!3082 = !DILocation(line: 1168, column: 23, scope: !3077)
!3083 = !DILocation(line: 1168, column: 37, scope: !3077)
!3084 = !DILocation(line: 1168, column: 34, scope: !3077)
!3085 = !DILocation(line: 1169, column: 4, scope: !3077)
!3086 = !DILocation(line: 1169, column: 8, scope: !3077)
!3087 = !DILocation(line: 1169, column: 34, scope: !3077)
!3088 = !DILocation(line: 1169, column: 38, scope: !3077)
!3089 = !DILocation(line: 1169, column: 52, scope: !3077)
!3090 = !DILocation(line: 1169, column: 49, scope: !3077)
!3091 = !DILocation(line: 1167, column: 11, scope: !2892)
!3092 = !DILocation(line: 1171, column: 8, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3094, file: !3, line: 1171, column: 8)
!3094 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 1170, column: 2)
!3095 = !DILocation(line: 1171, column: 8, scope: !3094)
!3096 = !DILocation(line: 1173, column: 17, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3093, file: !3, line: 1172, column: 6)
!3098 = !DILocation(line: 1173, column: 8, scope: !3097)
!3099 = !DILocation(line: 1174, column: 17, scope: !3097)
!3100 = !DILocation(line: 1174, column: 77, scope: !3097)
!3101 = !DILocation(line: 1174, column: 8, scope: !3097)
!3102 = !DILocation(line: 1175, column: 17, scope: !3097)
!3103 = !DILocation(line: 1175, column: 55, scope: !3097)
!3104 = !DILocation(line: 1175, column: 8, scope: !3097)
!3105 = !DILocation(line: 1176, column: 17, scope: !3097)
!3106 = !DILocation(line: 1176, column: 8, scope: !3097)
!3107 = !DILocation(line: 1177, column: 17, scope: !3097)
!3108 = !DILocation(line: 1177, column: 55, scope: !3097)
!3109 = !DILocation(line: 1177, column: 8, scope: !3097)
!3110 = !DILocation(line: 1178, column: 17, scope: !3097)
!3111 = !DILocation(line: 1178, column: 8, scope: !3097)
!3112 = !DILocation(line: 1179, column: 6, scope: !3097)
!3113 = !DILocation(line: 1180, column: 4, scope: !3094)
!3114 = !DILocalVariable(name: "reg_move_replaces", scope: !3115, file: !3, line: 1184, type: !2268)
!3115 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 1183, column: 2)
!3116 = !DILocation(line: 1184, column: 35, scope: !3115)
!3117 = !DILocation(line: 1186, column: 8, scope: !3118)
!3118 = distinct !DILexicalBlock(scope: !3115, file: !3, line: 1186, column: 8)
!3119 = !DILocation(line: 1186, column: 8, scope: !3115)
!3120 = !DILocation(line: 1188, column: 17, scope: !3121)
!3121 = distinct !DILexicalBlock(scope: !3118, file: !3, line: 1187, column: 6)
!3122 = !DILocation(line: 1189, column: 49, scope: !3121)
!3123 = !DILocation(line: 1189, column: 53, scope: !3121)
!3124 = !DILocation(line: 1190, column: 10, scope: !3121)
!3125 = !DILocation(line: 1188, column: 8, scope: !3121)
!3126 = !DILocation(line: 1191, column: 32, scope: !3121)
!3127 = !DILocation(line: 1191, column: 36, scope: !3121)
!3128 = !DILocation(line: 1191, column: 8, scope: !3121)
!3129 = !DILocation(line: 1192, column: 17, scope: !3121)
!3130 = !DILocation(line: 1194, column: 10, scope: !3121)
!3131 = !DILocation(line: 1194, column: 13, scope: !3121)
!3132 = !DILocation(line: 1194, column: 29, scope: !3121)
!3133 = !DILocation(line: 1194, column: 35, scope: !3121)
!3134 = !DILocation(line: 1194, column: 53, scope: !3121)
!3135 = !DILocation(line: 1192, column: 8, scope: !3121)
!3136 = !DILocation(line: 1195, column: 6, scope: !3121)
!3137 = !DILocation(line: 1205, column: 27, scope: !3115)
!3138 = !DILocation(line: 1205, column: 4, scope: !3115)
!3139 = !DILocation(line: 1206, column: 29, scope: !3115)
!3140 = !DILocation(line: 1206, column: 33, scope: !3115)
!3141 = !DILocation(line: 1206, column: 4, scope: !3115)
!3142 = !DILocation(line: 1207, column: 24, scope: !3115)
!3143 = !DILocation(line: 1207, column: 4, scope: !3115)
!3144 = !DILocation(line: 1209, column: 16, scope: !3115)
!3145 = !DILocation(line: 1209, column: 4, scope: !3115)
!3146 = !DILocation(line: 1212, column: 8, scope: !3147)
!3147 = distinct !DILexicalBlock(scope: !3115, file: !3, line: 1212, column: 8)
!3148 = !DILocation(line: 1212, column: 18, scope: !3147)
!3149 = !DILocation(line: 1212, column: 23, scope: !3147)
!3150 = !DILocation(line: 1212, column: 8, scope: !3115)
!3151 = !DILocalVariable(name: "comp_rtx", scope: !3152, file: !3, line: 1214, type: !992)
!3152 = distinct !DILexicalBlock(scope: !3147, file: !3, line: 1213, column: 13)
!3153 = !DILocation(line: 1214, column: 12, scope: !3152)
!3154 = !DILocation(line: 1214, column: 23, scope: !3152)
!3155 = !DILocalVariable(name: "prob", scope: !3152, file: !3, line: 1216, type: !7)
!3156 = !DILocation(line: 1216, column: 17, scope: !3152)
!3157 = !DILocation(line: 1219, column: 22, scope: !3152)
!3158 = !DILocation(line: 1219, column: 28, scope: !3152)
!3159 = !DILocation(line: 1220, column: 10, scope: !3152)
!3160 = !DILocation(line: 1220, column: 16, scope: !3152)
!3161 = !DILocation(line: 1220, column: 41, scope: !3152)
!3162 = !DILocation(line: 1220, column: 39, scope: !3152)
!3163 = !DILocation(line: 1219, column: 8, scope: !3152)
!3164 = !DILocation(line: 1222, column: 7, scope: !3152)
!3165 = !DILocation(line: 1225, column: 15, scope: !3166)
!3166 = distinct !DILexicalBlock(scope: !3115, file: !3, line: 1225, column: 15)
!3167 = !DILocation(line: 1225, column: 25, scope: !3166)
!3168 = !DILocation(line: 1225, column: 28, scope: !3166)
!3169 = !DILocation(line: 1225, column: 15, scope: !3115)
!3170 = !DILocation(line: 1226, column: 42, scope: !3166)
!3171 = !DILocation(line: 1226, column: 6, scope: !3166)
!3172 = !DILocation(line: 1226, column: 40, scope: !3166)
!3173 = !DILocation(line: 1230, column: 30, scope: !3115)
!3174 = !DILocation(line: 1230, column: 34, scope: !3115)
!3175 = !DILocation(line: 1230, column: 37, scope: !3115)
!3176 = !DILocation(line: 1230, column: 53, scope: !3115)
!3177 = !DILocation(line: 1230, column: 4, scope: !3115)
!3178 = !DILocation(line: 1234, column: 10, scope: !3179)
!3179 = distinct !DILexicalBlock(scope: !3115, file: !3, line: 1234, column: 8)
!3180 = !DILocation(line: 1234, column: 8, scope: !3115)
!3181 = !DILocation(line: 1235, column: 6, scope: !3179)
!3182 = !DILocation(line: 1235, column: 9, scope: !3179)
!3183 = !DILocation(line: 1235, column: 13, scope: !3179)
!3184 = !DILocation(line: 1235, column: 19, scope: !3179)
!3185 = !DILocation(line: 1237, column: 21, scope: !3115)
!3186 = !DILocation(line: 1237, column: 24, scope: !3115)
!3187 = !DILocation(line: 1237, column: 4, scope: !3115)
!3188 = !DILocation(line: 1239, column: 44, scope: !3115)
!3189 = !DILocation(line: 1239, column: 24, scope: !3115)
!3190 = !DILocation(line: 1239, column: 22, scope: !3115)
!3191 = !DILocation(line: 1240, column: 8, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3115, file: !3, line: 1240, column: 8)
!3193 = !DILocation(line: 1240, column: 8, scope: !3115)
!3194 = !DILocation(line: 1241, column: 31, scope: !3192)
!3195 = !DILocation(line: 1241, column: 42, scope: !3192)
!3196 = !DILocation(line: 1241, column: 45, scope: !3192)
!3197 = !DILocation(line: 1241, column: 56, scope: !3192)
!3198 = !DILocation(line: 1241, column: 6, scope: !3192)
!3199 = !DILocation(line: 1243, column: 35, scope: !3115)
!3200 = !DILocation(line: 1243, column: 39, scope: !3115)
!3201 = !DILocation(line: 1243, column: 45, scope: !3115)
!3202 = !DILocation(line: 1243, column: 56, scope: !3115)
!3203 = !DILocation(line: 1243, column: 11, scope: !3115)
!3204 = !DILocation(line: 1245, column: 28, scope: !3115)
!3205 = !DILocation(line: 1245, column: 4, scope: !3115)
!3206 = !DILocation(line: 1248, column: 30, scope: !2892)
!3207 = !DILocation(line: 1248, column: 7, scope: !2892)
!3208 = !DILocation(line: 1249, column: 13, scope: !2892)
!3209 = !DILocation(line: 1249, column: 7, scope: !2892)
!3210 = !DILocation(line: 1250, column: 13, scope: !2892)
!3211 = !DILocation(line: 1250, column: 7, scope: !2892)
!3212 = !DILocation(line: 1251, column: 17, scope: !2892)
!3213 = !DILocation(line: 1251, column: 7, scope: !2892)
!3214 = !DILocation(line: 1252, column: 5, scope: !2892)
!3215 = distinct !{!3215, !2887, !3216}
!3216 = !DILocation(line: 1252, column: 5, scope: !2888)
!3217 = !DILocation(line: 1254, column: 9, scope: !2555)
!3218 = !DILocation(line: 1254, column: 3, scope: !2555)
!3219 = !DILocation(line: 1257, column: 3, scope: !2555)
!3220 = !DILocation(line: 1258, column: 3, scope: !2555)
!3221 = !DILocation(line: 1259, column: 1, scope: !2555)
!3222 = distinct !DISubprogram(name: "number_of_loops", scope: !142, file: !142, line: 459, type: !2408, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3223 = !DILocation(line: 461, column: 8, scope: !3224)
!3224 = distinct !DILexicalBlock(scope: !3222, file: !142, line: 461, column: 7)
!3225 = !DILocation(line: 461, column: 7, scope: !3222)
!3226 = !DILocation(line: 462, column: 5, scope: !3224)
!3227 = !DILocation(line: 464, column: 10, scope: !3222)
!3228 = !DILocation(line: 464, column: 3, scope: !3222)
!3229 = !DILocation(line: 465, column: 1, scope: !3222)
!3230 = distinct !DISubprogram(name: "setup_sched_infos", scope: !3, file: !3, line: 863, type: !2313, scopeLine: 864, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3231 = !DILocation(line: 865, column: 3, scope: !3230)
!3232 = !DILocation(line: 867, column: 39, scope: !3230)
!3233 = !DILocation(line: 868, column: 21, scope: !3230)
!3234 = !DILocation(line: 870, column: 19, scope: !3230)
!3235 = !DILocation(line: 871, column: 22, scope: !3230)
!3236 = !DILocation(line: 872, column: 1, scope: !3230)
!3237 = distinct !DISubprogram(name: "fel_init", scope: !142, file: !142, line: 535, type: !3238, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3238 = !DISubroutineType(types: !3239)
!3239 = !{null, !3240, !3241, !7}
!3240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2569, size: 64)
!3241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1579, size: 64)
!3242 = !DILocalVariable(name: "li", arg: 1, scope: !3237, file: !142, line: 535, type: !3240)
!3243 = !DILocation(line: 535, column: 26, scope: !3237)
!3244 = !DILocalVariable(name: "loop", arg: 2, scope: !3237, file: !142, line: 535, type: !3241)
!3245 = !DILocation(line: 535, column: 38, scope: !3237)
!3246 = !DILocalVariable(name: "flags", arg: 3, scope: !3237, file: !142, line: 535, type: !7)
!3247 = !DILocation(line: 535, column: 53, scope: !3237)
!3248 = !DILocalVariable(name: "aloop", scope: !3237, file: !142, line: 537, type: !1580)
!3249 = !DILocation(line: 537, column: 16, scope: !3237)
!3250 = !DILocalVariable(name: "i", scope: !3237, file: !142, line: 538, type: !7)
!3251 = !DILocation(line: 538, column: 12, scope: !3237)
!3252 = !DILocalVariable(name: "mn", scope: !3237, file: !142, line: 539, type: !1015)
!3253 = !DILocation(line: 539, column: 7, scope: !3237)
!3254 = !DILocation(line: 541, column: 3, scope: !3237)
!3255 = !DILocation(line: 541, column: 7, scope: !3237)
!3256 = !DILocation(line: 541, column: 11, scope: !3237)
!3257 = !DILocation(line: 542, column: 8, scope: !3258)
!3258 = distinct !DILexicalBlock(scope: !3237, file: !142, line: 542, column: 7)
!3259 = !DILocation(line: 542, column: 7, scope: !3237)
!3260 = !DILocation(line: 544, column: 7, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3258, file: !142, line: 543, column: 5)
!3262 = !DILocation(line: 544, column: 11, scope: !3261)
!3263 = !DILocation(line: 544, column: 20, scope: !3261)
!3264 = !DILocation(line: 545, column: 8, scope: !3261)
!3265 = !DILocation(line: 545, column: 13, scope: !3261)
!3266 = !DILocation(line: 546, column: 7, scope: !3261)
!3267 = !DILocation(line: 549, column: 18, scope: !3237)
!3268 = !DILocation(line: 549, column: 3, scope: !3237)
!3269 = !DILocation(line: 549, column: 7, scope: !3237)
!3270 = !DILocation(line: 549, column: 16, scope: !3237)
!3271 = !DILocation(line: 550, column: 9, scope: !3237)
!3272 = !DILocation(line: 550, column: 15, scope: !3237)
!3273 = !DILocation(line: 550, column: 8, scope: !3237)
!3274 = !DILocation(line: 550, column: 6, scope: !3237)
!3275 = !DILocation(line: 552, column: 7, scope: !3276)
!3276 = distinct !DILexicalBlock(scope: !3237, file: !142, line: 552, column: 7)
!3277 = !DILocation(line: 552, column: 13, scope: !3276)
!3278 = !DILocation(line: 552, column: 7, scope: !3237)
!3279 = !DILocation(line: 554, column: 14, scope: !3280)
!3280 = distinct !DILexicalBlock(scope: !3281, file: !142, line: 554, column: 7)
!3281 = distinct !DILexicalBlock(scope: !3276, file: !142, line: 553, column: 5)
!3282 = !DILocation(line: 554, column: 12, scope: !3280)
!3283 = !DILocation(line: 554, column: 19, scope: !3284)
!3284 = distinct !DILexicalBlock(scope: !3280, file: !142, line: 554, column: 7)
!3285 = !DILocation(line: 554, column: 7, scope: !3280)
!3286 = !DILocation(line: 555, column: 6, scope: !3287)
!3287 = distinct !DILexicalBlock(scope: !3284, file: !142, line: 555, column: 6)
!3288 = !DILocation(line: 555, column: 12, scope: !3287)
!3289 = !DILocation(line: 556, column: 6, scope: !3287)
!3290 = !DILocation(line: 556, column: 9, scope: !3287)
!3291 = !DILocation(line: 556, column: 16, scope: !3287)
!3292 = !DILocation(line: 556, column: 22, scope: !3287)
!3293 = !DILocation(line: 557, column: 6, scope: !3287)
!3294 = !DILocation(line: 557, column: 9, scope: !3287)
!3295 = !DILocation(line: 557, column: 16, scope: !3287)
!3296 = !DILocation(line: 557, column: 23, scope: !3287)
!3297 = !DILocation(line: 557, column: 20, scope: !3287)
!3298 = !DILocation(line: 555, column: 6, scope: !3284)
!3299 = !DILocation(line: 558, column: 4, scope: !3287)
!3300 = !DILocation(line: 554, column: 75, scope: !3284)
!3301 = !DILocation(line: 554, column: 7, scope: !3284)
!3302 = distinct !{!3302, !3285, !3303}
!3303 = !DILocation(line: 558, column: 4, scope: !3280)
!3304 = !DILocation(line: 559, column: 5, scope: !3281)
!3305 = !DILocation(line: 560, column: 12, scope: !3306)
!3306 = distinct !DILexicalBlock(scope: !3276, file: !142, line: 560, column: 12)
!3307 = !DILocation(line: 560, column: 18, scope: !3306)
!3308 = !DILocation(line: 560, column: 12, scope: !3276)
!3309 = !DILocation(line: 563, column: 20, scope: !3310)
!3310 = distinct !DILexicalBlock(scope: !3311, file: !142, line: 563, column: 7)
!3311 = distinct !DILexicalBlock(scope: !3306, file: !142, line: 561, column: 5)
!3312 = !DILocation(line: 563, column: 35, scope: !3310)
!3313 = !DILocation(line: 563, column: 18, scope: !3310)
!3314 = !DILocation(line: 563, column: 12, scope: !3310)
!3315 = !DILocation(line: 564, column: 5, scope: !3316)
!3316 = distinct !DILexicalBlock(scope: !3310, file: !142, line: 563, column: 7)
!3317 = !DILocation(line: 564, column: 12, scope: !3316)
!3318 = !DILocation(line: 564, column: 18, scope: !3316)
!3319 = !DILocation(line: 563, column: 7, scope: !3310)
!3320 = !DILocation(line: 566, column: 2, scope: !3316)
!3321 = !DILocation(line: 565, column: 13, scope: !3316)
!3322 = !DILocation(line: 565, column: 20, scope: !3316)
!3323 = !DILocation(line: 565, column: 11, scope: !3316)
!3324 = !DILocation(line: 563, column: 7, scope: !3316)
!3325 = distinct !{!3325, !3319, !3326}
!3326 = !DILocation(line: 566, column: 2, scope: !3310)
!3327 = !DILocation(line: 568, column: 7, scope: !3311)
!3328 = !DILocation(line: 570, column: 8, scope: !3329)
!3329 = distinct !DILexicalBlock(scope: !3330, file: !142, line: 570, column: 8)
!3330 = distinct !DILexicalBlock(scope: !3311, file: !142, line: 569, column: 2)
!3331 = !DILocation(line: 570, column: 15, scope: !3329)
!3332 = !DILocation(line: 570, column: 22, scope: !3329)
!3333 = !DILocation(line: 570, column: 19, scope: !3329)
!3334 = !DILocation(line: 570, column: 8, scope: !3330)
!3335 = !DILocation(line: 571, column: 6, scope: !3329)
!3336 = !DILocation(line: 573, column: 8, scope: !3337)
!3337 = distinct !DILexicalBlock(scope: !3330, file: !142, line: 573, column: 8)
!3338 = !DILocation(line: 573, column: 15, scope: !3337)
!3339 = !DILocation(line: 573, column: 8, scope: !3330)
!3340 = !DILocation(line: 575, column: 21, scope: !3341)
!3341 = distinct !DILexicalBlock(scope: !3342, file: !142, line: 575, column: 8)
!3342 = distinct !DILexicalBlock(scope: !3337, file: !142, line: 574, column: 6)
!3343 = !DILocation(line: 575, column: 28, scope: !3341)
!3344 = !DILocation(line: 575, column: 19, scope: !3341)
!3345 = !DILocation(line: 575, column: 13, scope: !3341)
!3346 = !DILocation(line: 576, column: 6, scope: !3347)
!3347 = distinct !DILexicalBlock(scope: !3341, file: !142, line: 575, column: 8)
!3348 = !DILocation(line: 576, column: 13, scope: !3347)
!3349 = !DILocation(line: 576, column: 19, scope: !3347)
!3350 = !DILocation(line: 575, column: 8, scope: !3341)
!3351 = !DILocation(line: 578, column: 3, scope: !3347)
!3352 = !DILocation(line: 577, column: 14, scope: !3347)
!3353 = !DILocation(line: 577, column: 21, scope: !3347)
!3354 = !DILocation(line: 577, column: 12, scope: !3347)
!3355 = !DILocation(line: 575, column: 8, scope: !3347)
!3356 = distinct !{!3356, !3350, !3357}
!3357 = !DILocation(line: 578, column: 3, scope: !3341)
!3358 = !DILocation(line: 579, column: 6, scope: !3342)
!3359 = !DILocation(line: 580, column: 26, scope: !3360)
!3360 = distinct !DILexicalBlock(scope: !3337, file: !142, line: 580, column: 13)
!3361 = !DILocation(line: 580, column: 14, scope: !3360)
!3362 = !DILocation(line: 580, column: 13, scope: !3337)
!3363 = !DILocation(line: 581, column: 6, scope: !3360)
!3364 = !DILocation(line: 583, column: 26, scope: !3360)
!3365 = !DILocation(line: 583, column: 14, scope: !3360)
!3366 = !DILocation(line: 583, column: 12, scope: !3360)
!3367 = distinct !{!3367, !3327, !3368}
!3368 = !DILocation(line: 584, column: 2, scope: !3311)
!3369 = !DILocation(line: 585, column: 5, scope: !3311)
!3370 = !DILocation(line: 589, column: 15, scope: !3371)
!3371 = distinct !DILexicalBlock(scope: !3306, file: !142, line: 587, column: 5)
!3372 = !DILocation(line: 589, column: 30, scope: !3371)
!3373 = !DILocation(line: 589, column: 13, scope: !3371)
!3374 = !DILocation(line: 590, column: 7, scope: !3371)
!3375 = !DILocation(line: 592, column: 8, scope: !3376)
!3376 = distinct !DILexicalBlock(scope: !3377, file: !142, line: 592, column: 8)
!3377 = distinct !DILexicalBlock(scope: !3371, file: !142, line: 591, column: 2)
!3378 = !DILocation(line: 592, column: 15, scope: !3376)
!3379 = !DILocation(line: 592, column: 22, scope: !3376)
!3380 = !DILocation(line: 592, column: 19, scope: !3376)
!3381 = !DILocation(line: 592, column: 8, scope: !3377)
!3382 = !DILocation(line: 593, column: 6, scope: !3376)
!3383 = !DILocation(line: 595, column: 8, scope: !3384)
!3384 = distinct !DILexicalBlock(scope: !3377, file: !142, line: 595, column: 8)
!3385 = !DILocation(line: 595, column: 15, scope: !3384)
!3386 = !DILocation(line: 595, column: 21, scope: !3384)
!3387 = !DILocation(line: 595, column: 8, scope: !3377)
!3388 = !DILocation(line: 596, column: 14, scope: !3384)
!3389 = !DILocation(line: 596, column: 21, scope: !3384)
!3390 = !DILocation(line: 596, column: 12, scope: !3384)
!3391 = !DILocation(line: 596, column: 6, scope: !3384)
!3392 = !DILocation(line: 599, column: 8, scope: !3393)
!3393 = distinct !DILexicalBlock(scope: !3384, file: !142, line: 598, column: 6)
!3394 = !DILocation(line: 599, column: 15, scope: !3393)
!3395 = !DILocation(line: 599, column: 21, scope: !3393)
!3396 = !DILocation(line: 599, column: 29, scope: !3393)
!3397 = !DILocation(line: 599, column: 32, scope: !3393)
!3398 = !DILocation(line: 599, column: 39, scope: !3393)
!3399 = !DILocation(line: 599, column: 44, scope: !3393)
!3400 = !DILocation(line: 0, scope: !3393)
!3401 = !DILocation(line: 600, column: 23, scope: !3393)
!3402 = !DILocation(line: 600, column: 11, scope: !3393)
!3403 = !DILocation(line: 600, column: 9, scope: !3393)
!3404 = distinct !{!3404, !3392, !3405}
!3405 = !DILocation(line: 600, column: 28, scope: !3393)
!3406 = !DILocation(line: 601, column: 12, scope: !3407)
!3407 = distinct !DILexicalBlock(scope: !3393, file: !142, line: 601, column: 12)
!3408 = !DILocation(line: 601, column: 18, scope: !3407)
!3409 = !DILocation(line: 601, column: 12, scope: !3393)
!3410 = !DILocation(line: 602, column: 3, scope: !3407)
!3411 = !DILocation(line: 603, column: 16, scope: !3393)
!3412 = !DILocation(line: 603, column: 23, scope: !3393)
!3413 = !DILocation(line: 603, column: 14, scope: !3393)
!3414 = distinct !{!3414, !3374, !3415}
!3415 = !DILocation(line: 605, column: 2, scope: !3371)
!3416 = !DILocation(line: 608, column: 13, scope: !3237)
!3417 = !DILocation(line: 608, column: 17, scope: !3237)
!3418 = !DILocation(line: 608, column: 3, scope: !3237)
!3419 = !DILocation(line: 609, column: 1, scope: !3237)
!3420 = distinct !DISubprogram(name: "loop_canon_p", scope: !3, file: !3, line: 797, type: !3421, scopeLine: 798, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3421 = !DISubroutineType(types: !3422)
!3422 = !{!1226, !1580}
!3423 = !DILocalVariable(name: "loop", arg: 1, scope: !3420, file: !3, line: 797, type: !1580)
!3424 = !DILocation(line: 797, column: 28, scope: !3420)
!3425 = !DILocation(line: 800, column: 7, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3420, file: !3, line: 800, column: 7)
!3427 = !DILocation(line: 800, column: 13, scope: !3426)
!3428 = !DILocation(line: 800, column: 19, scope: !3426)
!3429 = !DILocation(line: 800, column: 35, scope: !3426)
!3430 = !DILocation(line: 800, column: 23, scope: !3426)
!3431 = !DILocation(line: 800, column: 7, scope: !3420)
!3432 = !DILocation(line: 802, column: 9, scope: !3433)
!3433 = distinct !DILexicalBlock(scope: !3434, file: !3, line: 802, column: 9)
!3434 = distinct !DILexicalBlock(scope: !3426, file: !3, line: 801, column: 3)
!3435 = !DILocation(line: 802, column: 9, scope: !3434)
!3436 = !DILocation(line: 803, column: 16, scope: !3433)
!3437 = !DILocation(line: 803, column: 7, scope: !3433)
!3438 = !DILocation(line: 804, column: 5, scope: !3434)
!3439 = !DILocation(line: 807, column: 21, scope: !3440)
!3440 = distinct !DILexicalBlock(scope: !3420, file: !3, line: 807, column: 7)
!3441 = !DILocation(line: 807, column: 8, scope: !3440)
!3442 = !DILocation(line: 807, column: 7, scope: !3420)
!3443 = !DILocation(line: 809, column: 11, scope: !3444)
!3444 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 809, column: 11)
!3445 = distinct !DILexicalBlock(scope: !3440, file: !3, line: 808, column: 5)
!3446 = !DILocation(line: 809, column: 11, scope: !3445)
!3447 = !DILocalVariable(name: "insn", scope: !3448, file: !3, line: 811, type: !992)
!3448 = distinct !DILexicalBlock(scope: !3444, file: !3, line: 810, column: 2)
!3449 = !DILocation(line: 811, column: 8, scope: !3448)
!3450 = !DILocation(line: 811, column: 15, scope: !3448)
!3451 = !DILocation(line: 813, column: 13, scope: !3448)
!3452 = !DILocation(line: 813, column: 4, scope: !3448)
!3453 = !DILocation(line: 814, column: 16, scope: !3448)
!3454 = !DILocation(line: 815, column: 18, scope: !3448)
!3455 = !DILocation(line: 815, column: 7, scope: !3448)
!3456 = !DILocation(line: 815, column: 36, scope: !3448)
!3457 = !DILocation(line: 815, column: 25, scope: !3448)
!3458 = !DILocation(line: 814, column: 7, scope: !3448)
!3459 = !DILocation(line: 816, column: 2, scope: !3448)
!3460 = !DILocation(line: 817, column: 7, scope: !3445)
!3461 = !DILocation(line: 820, column: 9, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3420, file: !3, line: 820, column: 7)
!3463 = !DILocation(line: 820, column: 34, scope: !3462)
!3464 = !DILocation(line: 820, column: 62, scope: !3462)
!3465 = !DILocation(line: 820, column: 39, scope: !3462)
!3466 = !DILocation(line: 820, column: 7, scope: !3420)
!3467 = !DILocation(line: 822, column: 11, scope: !3468)
!3468 = distinct !DILexicalBlock(scope: !3469, file: !3, line: 822, column: 11)
!3469 = distinct !DILexicalBlock(scope: !3462, file: !3, line: 821, column: 5)
!3470 = !DILocation(line: 822, column: 11, scope: !3469)
!3471 = !DILocalVariable(name: "insn", scope: !3472, file: !3, line: 824, type: !992)
!3472 = distinct !DILexicalBlock(scope: !3468, file: !3, line: 823, column: 2)
!3473 = !DILocation(line: 824, column: 8, scope: !3472)
!3474 = !DILocation(line: 824, column: 15, scope: !3472)
!3475 = !DILocation(line: 826, column: 13, scope: !3472)
!3476 = !DILocation(line: 826, column: 4, scope: !3472)
!3477 = !DILocation(line: 827, column: 13, scope: !3472)
!3478 = !DILocation(line: 828, column: 17, scope: !3472)
!3479 = !DILocation(line: 828, column: 6, scope: !3472)
!3480 = !DILocation(line: 828, column: 35, scope: !3472)
!3481 = !DILocation(line: 828, column: 24, scope: !3472)
!3482 = !DILocation(line: 827, column: 4, scope: !3472)
!3483 = !DILocation(line: 829, column: 2, scope: !3472)
!3484 = !DILocation(line: 830, column: 7, scope: !3469)
!3485 = !DILocation(line: 833, column: 5, scope: !3420)
!3486 = !DILocation(line: 834, column: 1, scope: !3420)
!3487 = distinct !DISubprogram(name: "loop_single_full_bb_p", scope: !3, file: !3, line: 753, type: !3421, scopeLine: 754, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3488 = !DILocalVariable(name: "loop", arg: 1, scope: !3487, file: !3, line: 753, type: !1580)
!3489 = !DILocation(line: 753, column: 37, scope: !3487)
!3490 = !DILocalVariable(name: "i", scope: !3487, file: !3, line: 755, type: !7)
!3491 = !DILocation(line: 755, column: 12, scope: !3487)
!3492 = !DILocalVariable(name: "bbs", scope: !3487, file: !3, line: 756, type: !3493)
!3493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !960, size: 64)
!3494 = !DILocation(line: 756, column: 16, scope: !3487)
!3495 = !DILocation(line: 756, column: 37, scope: !3487)
!3496 = !DILocation(line: 756, column: 22, scope: !3487)
!3497 = !DILocation(line: 758, column: 10, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 758, column: 3)
!3499 = !DILocation(line: 758, column: 8, scope: !3498)
!3500 = !DILocation(line: 758, column: 15, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3498, file: !3, line: 758, column: 3)
!3502 = !DILocation(line: 758, column: 19, scope: !3501)
!3503 = !DILocation(line: 758, column: 25, scope: !3501)
!3504 = !DILocation(line: 758, column: 17, scope: !3501)
!3505 = !DILocation(line: 758, column: 3, scope: !3498)
!3506 = !DILocalVariable(name: "head", scope: !3507, file: !3, line: 760, type: !992)
!3507 = distinct !DILexicalBlock(scope: !3501, file: !3, line: 759, column: 5)
!3508 = !DILocation(line: 760, column: 11, scope: !3507)
!3509 = !DILocalVariable(name: "tail", scope: !3507, file: !3, line: 760, type: !992)
!3510 = !DILocation(line: 760, column: 17, scope: !3507)
!3511 = !DILocalVariable(name: "empty_bb", scope: !3507, file: !3, line: 761, type: !1226)
!3512 = !DILocation(line: 761, column: 12, scope: !3507)
!3513 = !DILocation(line: 763, column: 11, scope: !3514)
!3514 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 763, column: 11)
!3515 = !DILocation(line: 763, column: 15, scope: !3514)
!3516 = !DILocation(line: 763, column: 21, scope: !3514)
!3517 = !DILocation(line: 763, column: 27, scope: !3514)
!3518 = !DILocation(line: 763, column: 18, scope: !3514)
!3519 = !DILocation(line: 763, column: 11, scope: !3507)
!3520 = !DILocation(line: 764, column: 9, scope: !3514)
!3521 = !DILocation(line: 768, column: 26, scope: !3507)
!3522 = !DILocation(line: 768, column: 30, scope: !3507)
!3523 = !DILocation(line: 768, column: 34, scope: !3507)
!3524 = !DILocation(line: 768, column: 38, scope: !3507)
!3525 = !DILocation(line: 768, column: 7, scope: !3507)
!3526 = !DILocation(line: 769, column: 7, scope: !3507)
!3527 = !DILocation(line: 769, column: 14, scope: !3528)
!3528 = distinct !DILexicalBlock(scope: !3529, file: !3, line: 769, column: 7)
!3529 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 769, column: 7)
!3530 = !DILocation(line: 769, column: 22, scope: !3528)
!3531 = !DILocation(line: 769, column: 19, scope: !3528)
!3532 = !DILocation(line: 769, column: 7, scope: !3529)
!3533 = !DILocation(line: 771, column: 15, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !3535, file: !3, line: 771, column: 15)
!3535 = distinct !DILexicalBlock(scope: !3528, file: !3, line: 770, column: 9)
!3536 = !DILocation(line: 771, column: 29, scope: !3534)
!3537 = !DILocation(line: 771, column: 32, scope: !3534)
!3538 = !DILocation(line: 772, column: 9, scope: !3534)
!3539 = !DILocation(line: 772, column: 13, scope: !3534)
!3540 = !DILocation(line: 772, column: 27, scope: !3534)
!3541 = !DILocation(line: 772, column: 31, scope: !3534)
!3542 = !DILocation(line: 772, column: 51, scope: !3534)
!3543 = !DILocation(line: 772, column: 54, scope: !3534)
!3544 = !DILocation(line: 771, column: 15, scope: !3535)
!3545 = !DILocation(line: 773, column: 7, scope: !3534)
!3546 = !DILocation(line: 774, column: 14, scope: !3535)
!3547 = !DILocation(line: 775, column: 5, scope: !3535)
!3548 = !DILocation(line: 769, column: 47, scope: !3528)
!3549 = !DILocation(line: 769, column: 45, scope: !3528)
!3550 = !DILocation(line: 769, column: 7, scope: !3528)
!3551 = distinct !{!3551, !3532, !3552}
!3552 = !DILocation(line: 776, column: 9, scope: !3529)
!3553 = !DILocation(line: 778, column: 13, scope: !3554)
!3554 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 778, column: 11)
!3555 = !DILocation(line: 778, column: 11, scope: !3507)
!3556 = !DILocation(line: 780, column: 17, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3554, file: !3, line: 779, column: 9)
!3558 = !DILocation(line: 780, column: 11, scope: !3557)
!3559 = !DILocation(line: 781, column: 11, scope: !3557)
!3560 = !DILocation(line: 783, column: 5, scope: !3507)
!3561 = !DILocation(line: 758, column: 38, scope: !3501)
!3562 = !DILocation(line: 758, column: 3, scope: !3501)
!3563 = distinct !{!3563, !3505, !3564}
!3564 = !DILocation(line: 783, column: 5, scope: !3498)
!3565 = !DILocation(line: 784, column: 9, scope: !3487)
!3566 = !DILocation(line: 784, column: 3, scope: !3487)
!3567 = !DILocation(line: 785, column: 3, scope: !3487)
!3568 = !DILocation(line: 786, column: 1, scope: !3487)
!3569 = distinct !DISubprogram(name: "doloop_register_get", scope: !3, file: !3, line: 287, type: !3570, scopeLine: 288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3570 = !DISubroutineType(types: !3571)
!3571 = !{!992, !992, !992}
!3572 = !DILocalVariable(name: "head", arg: 1, scope: !3569, file: !3, line: 287, type: !992)
!3573 = !DILocation(line: 287, column: 26, scope: !3569)
!3574 = !DILocalVariable(name: "tail", arg: 2, scope: !3569, file: !3, line: 287, type: !992)
!3575 = !DILocation(line: 287, column: 53, scope: !3569)
!3576 = !DILocation(line: 331, column: 3, scope: !3569)
!3577 = distinct !DISubprogram(name: "fel_next", scope: !142, file: !142, line: 518, type: !3578, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3578 = !DISubroutineType(types: !3579)
!3579 = !{null, !3240, !3241}
!3580 = !DILocalVariable(name: "li", arg: 1, scope: !3577, file: !142, line: 518, type: !3240)
!3581 = !DILocation(line: 518, column: 26, scope: !3577)
!3582 = !DILocalVariable(name: "loop", arg: 2, scope: !3577, file: !142, line: 518, type: !3241)
!3583 = !DILocation(line: 518, column: 38, scope: !3577)
!3584 = !DILocalVariable(name: "anum", scope: !3577, file: !142, line: 520, type: !1015)
!3585 = !DILocation(line: 520, column: 7, scope: !3577)
!3586 = !DILocation(line: 522, column: 3, scope: !3577)
!3587 = !DILocation(line: 522, column: 10, scope: !3577)
!3588 = !DILocation(line: 524, column: 7, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3577, file: !142, line: 523, column: 5)
!3590 = !DILocation(line: 524, column: 11, scope: !3589)
!3591 = !DILocation(line: 524, column: 14, scope: !3589)
!3592 = !DILocation(line: 525, column: 25, scope: !3589)
!3593 = !DILocation(line: 525, column: 15, scope: !3589)
!3594 = !DILocation(line: 525, column: 8, scope: !3589)
!3595 = !DILocation(line: 525, column: 13, scope: !3589)
!3596 = !DILocation(line: 526, column: 12, scope: !3597)
!3597 = distinct !DILexicalBlock(scope: !3589, file: !142, line: 526, column: 11)
!3598 = !DILocation(line: 526, column: 11, scope: !3597)
!3599 = !DILocation(line: 526, column: 11, scope: !3589)
!3600 = !DILocation(line: 527, column: 2, scope: !3597)
!3601 = distinct !{!3601, !3586, !3602}
!3602 = !DILocation(line: 528, column: 5, scope: !3577)
!3603 = !DILocation(line: 530, column: 3, scope: !3577)
!3604 = !DILocation(line: 531, column: 4, scope: !3577)
!3605 = !DILocation(line: 531, column: 9, scope: !3577)
!3606 = !DILocation(line: 532, column: 1, scope: !3577)
!3607 = distinct !DISubprogram(name: "const_iteration_count", scope: !3, file: !3, line: 340, type: !3608, scopeLine: 342, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3608 = !DISubroutineType(types: !3609)
!3609 = !{!992, !992, !960, !3610}
!3610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1082, size: 64)
!3611 = !DILocalVariable(name: "count_reg", arg: 1, scope: !3607, file: !3, line: 340, type: !992)
!3612 = !DILocation(line: 340, column: 28, scope: !3607)
!3613 = !DILocalVariable(name: "pre_header", arg: 2, scope: !3607, file: !3, line: 340, type: !960)
!3614 = !DILocation(line: 340, column: 51, scope: !3607)
!3615 = !DILocalVariable(name: "count", arg: 3, scope: !3607, file: !3, line: 341, type: !3610)
!3616 = !DILocation(line: 341, column: 28, scope: !3607)
!3617 = !DILocalVariable(name: "insn", scope: !3607, file: !3, line: 343, type: !992)
!3618 = !DILocation(line: 343, column: 7, scope: !3607)
!3619 = !DILocalVariable(name: "head", scope: !3607, file: !3, line: 344, type: !992)
!3620 = !DILocation(line: 344, column: 7, scope: !3607)
!3621 = !DILocalVariable(name: "tail", scope: !3607, file: !3, line: 344, type: !992)
!3622 = !DILocation(line: 344, column: 13, scope: !3607)
!3623 = !DILocation(line: 346, column: 9, scope: !3624)
!3624 = distinct !DILexicalBlock(scope: !3607, file: !3, line: 346, column: 7)
!3625 = !DILocation(line: 346, column: 7, scope: !3607)
!3626 = !DILocation(line: 347, column: 5, scope: !3624)
!3627 = !DILocation(line: 349, column: 22, scope: !3607)
!3628 = !DILocation(line: 349, column: 34, scope: !3607)
!3629 = !DILocation(line: 349, column: 3, scope: !3607)
!3630 = !DILocation(line: 351, column: 15, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3607, file: !3, line: 351, column: 3)
!3632 = !DILocation(line: 351, column: 13, scope: !3631)
!3633 = !DILocation(line: 351, column: 8, scope: !3631)
!3634 = !DILocation(line: 351, column: 21, scope: !3635)
!3635 = distinct !DILexicalBlock(scope: !3631, file: !3, line: 351, column: 3)
!3636 = !DILocation(line: 351, column: 29, scope: !3635)
!3637 = !DILocation(line: 351, column: 26, scope: !3635)
!3638 = !DILocation(line: 351, column: 3, scope: !3631)
!3639 = !DILocation(line: 352, column: 9, scope: !3640)
!3640 = distinct !DILexicalBlock(scope: !3635, file: !3, line: 352, column: 9)
!3641 = !DILocation(line: 352, column: 32, scope: !3640)
!3642 = !DILocation(line: 352, column: 35, scope: !3640)
!3643 = !DILocation(line: 352, column: 53, scope: !3640)
!3644 = !DILocation(line: 353, column: 15, scope: !3640)
!3645 = !DILocation(line: 353, column: 26, scope: !3640)
!3646 = !DILocation(line: 353, column: 2, scope: !3640)
!3647 = !DILocation(line: 352, column: 9, scope: !3635)
!3648 = !DILocalVariable(name: "pat", scope: !3649, file: !3, line: 355, type: !992)
!3649 = distinct !DILexicalBlock(scope: !3640, file: !3, line: 354, column: 7)
!3650 = !DILocation(line: 355, column: 6, scope: !3649)
!3651 = !DILocation(line: 355, column: 12, scope: !3649)
!3652 = !DILocation(line: 357, column: 6, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3649, file: !3, line: 357, column: 6)
!3654 = !DILocation(line: 357, column: 6, scope: !3649)
!3655 = !DILocation(line: 359, column: 15, scope: !3656)
!3656 = distinct !DILexicalBlock(scope: !3653, file: !3, line: 358, column: 4)
!3657 = !DILocation(line: 359, column: 7, scope: !3656)
!3658 = !DILocation(line: 359, column: 13, scope: !3656)
!3659 = !DILocation(line: 360, column: 13, scope: !3656)
!3660 = !DILocation(line: 360, column: 6, scope: !3656)
!3661 = !DILocation(line: 363, column: 2, scope: !3649)
!3662 = !DILocation(line: 353, column: 54, scope: !3640)
!3663 = !DILocation(line: 351, column: 54, scope: !3635)
!3664 = !DILocation(line: 351, column: 52, scope: !3635)
!3665 = !DILocation(line: 351, column: 3, scope: !3635)
!3666 = distinct !{!3666, !3638, !3667}
!3667 = !DILocation(line: 364, column: 7, scope: !3631)
!3668 = !DILocation(line: 366, column: 3, scope: !3607)
!3669 = !DILocation(line: 367, column: 1, scope: !3607)
!3670 = distinct !DISubprogram(name: "sms_order_nodes", scope: !3, file: !3, line: 2094, type: !3671, scopeLine: 2095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3671 = !DISubroutineType(types: !3672)
!3672 = !{!1015, !955, !1015, !2217, !2217}
!3673 = !DILocalVariable(name: "g", arg: 1, scope: !3670, file: !3, line: 2094, type: !955)
!3674 = !DILocation(line: 2094, column: 26, scope: !3670)
!3675 = !DILocalVariable(name: "mii", arg: 2, scope: !3670, file: !3, line: 2094, type: !1015)
!3676 = !DILocation(line: 2094, column: 33, scope: !3670)
!3677 = !DILocalVariable(name: "node_order", arg: 3, scope: !3670, file: !3, line: 2094, type: !2217)
!3678 = !DILocation(line: 2094, column: 44, scope: !3670)
!3679 = !DILocalVariable(name: "pmax_asap", arg: 4, scope: !3670, file: !3, line: 2094, type: !2217)
!3680 = !DILocation(line: 2094, column: 61, scope: !3670)
!3681 = !DILocalVariable(name: "i", scope: !3670, file: !3, line: 2096, type: !1015)
!3682 = !DILocation(line: 2096, column: 7, scope: !3670)
!3683 = !DILocalVariable(name: "rec_mii", scope: !3670, file: !3, line: 2097, type: !1015)
!3684 = !DILocation(line: 2097, column: 7, scope: !3670)
!3685 = !DILocalVariable(name: "sccs", scope: !3670, file: !3, line: 2098, type: !3686)
!3686 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddg_all_sccs_ptr", file: !398, line: 35, baseType: !3687)
!3687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3688, size: 64)
!3688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ddg_all_sccs", file: !398, line: 160, size: 192, elements: !3689)
!3689 = !{!3690, !3700, !3701}
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "sccs", scope: !3688, file: !398, line: 163, baseType: !3691, size: 64)
!3691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3692, size: 64)
!3692 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddg_scc_ptr", file: !398, line: 34, baseType: !3693)
!3693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3694, size: 64)
!3694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ddg_scc", file: !398, line: 146, size: 192, elements: !3695)
!3695 = !{!3696, !3697, !3698, !3699}
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3694, file: !398, line: 149, baseType: !2195, size: 64)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "backarcs", scope: !3694, file: !398, line: 152, baseType: !2216, size: 64, offset: 64)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "num_backarcs", scope: !3694, file: !398, line: 153, baseType: !1015, size: 32, offset: 128)
!3699 = !DIDerivedType(tag: DW_TAG_member, name: "recurrence_length", scope: !3694, file: !398, line: 156, baseType: !1015, size: 32, offset: 160)
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "num_sccs", scope: !3688, file: !398, line: 164, baseType: !1015, size: 32, offset: 64)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "ddg", scope: !3688, file: !398, line: 166, baseType: !955, size: 64, offset: 128)
!3702 = !DILocation(line: 2098, column: 20, scope: !3670)
!3703 = !DILocation(line: 2098, column: 48, scope: !3670)
!3704 = !DILocation(line: 2098, column: 27, scope: !3670)
!3705 = !DILocalVariable(name: "nops", scope: !3670, file: !3, line: 2100, type: !2256)
!3706 = !DILocation(line: 2100, column: 8, scope: !3670)
!3707 = !DILocation(line: 2100, column: 39, scope: !3670)
!3708 = !DILocation(line: 2100, column: 42, scope: !3670)
!3709 = !DILocation(line: 2100, column: 47, scope: !3670)
!3710 = !DILocation(line: 2100, column: 15, scope: !3670)
!3711 = !DILocation(line: 2102, column: 7, scope: !3712)
!3712 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 2102, column: 7)
!3713 = !DILocation(line: 2102, column: 7, scope: !3670)
!3714 = !DILocation(line: 2103, column: 17, scope: !3712)
!3715 = !DILocation(line: 2103, column: 28, scope: !3712)
!3716 = !DILocation(line: 2103, column: 34, scope: !3712)
!3717 = !DILocation(line: 2103, column: 5, scope: !3712)
!3718 = !DILocation(line: 2105, column: 24, scope: !3670)
!3719 = !DILocation(line: 2105, column: 30, scope: !3670)
!3720 = !DILocation(line: 2105, column: 3, scope: !3670)
!3721 = !DILocation(line: 2107, column: 7, scope: !3722)
!3722 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 2107, column: 7)
!3723 = !DILocation(line: 2107, column: 13, scope: !3722)
!3724 = !DILocation(line: 2107, column: 22, scope: !3722)
!3725 = !DILocation(line: 2107, column: 7, scope: !3670)
!3726 = !DILocation(line: 2109, column: 15, scope: !3722)
!3727 = !DILocation(line: 2109, column: 21, scope: !3722)
!3728 = !DILocation(line: 2109, column: 30, scope: !3722)
!3729 = !DILocation(line: 2109, column: 13, scope: !3722)
!3730 = !DILocation(line: 2109, column: 5, scope: !3722)
!3731 = !DILocation(line: 2112, column: 10, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 2112, column: 3)
!3733 = !DILocation(line: 2112, column: 8, scope: !3732)
!3734 = !DILocation(line: 2112, column: 15, scope: !3735)
!3735 = distinct !DILexicalBlock(scope: !3732, file: !3, line: 2112, column: 3)
!3736 = !DILocation(line: 2112, column: 19, scope: !3735)
!3737 = !DILocation(line: 2112, column: 22, scope: !3735)
!3738 = !DILocation(line: 2112, column: 17, scope: !3735)
!3739 = !DILocation(line: 2112, column: 3, scope: !3732)
!3740 = !DILocalVariable(name: "v", scope: !3741, file: !3, line: 2114, type: !2166)
!3741 = distinct !DILexicalBlock(scope: !3735, file: !3, line: 2113, column: 5)
!3742 = !DILocation(line: 2114, column: 20, scope: !3741)
!3743 = !DILocation(line: 2114, column: 25, scope: !3741)
!3744 = !DILocation(line: 2114, column: 28, scope: !3741)
!3745 = !DILocation(line: 2114, column: 34, scope: !3741)
!3746 = !DILocation(line: 2115, column: 22, scope: !3741)
!3747 = !DILocation(line: 2115, column: 7, scope: !3741)
!3748 = !DILocation(line: 2115, column: 10, scope: !3741)
!3749 = !DILocation(line: 2115, column: 14, scope: !3741)
!3750 = !DILocation(line: 2115, column: 20, scope: !3741)
!3751 = !DILocation(line: 2116, column: 5, scope: !3741)
!3752 = !DILocation(line: 2112, column: 34, scope: !3735)
!3753 = !DILocation(line: 2112, column: 3, scope: !3735)
!3754 = distinct !{!3754, !3739, !3755}
!3755 = !DILocation(line: 2116, column: 5, scope: !3732)
!3756 = !DILocation(line: 2118, column: 9, scope: !3670)
!3757 = !DILocation(line: 2118, column: 3, scope: !3670)
!3758 = !DILocation(line: 2119, column: 22, scope: !3670)
!3759 = !DILocation(line: 2119, column: 3, scope: !3670)
!3760 = !DILocation(line: 2120, column: 22, scope: !3670)
!3761 = !DILocation(line: 2120, column: 34, scope: !3670)
!3762 = !DILocation(line: 2120, column: 37, scope: !3670)
!3763 = !DILocation(line: 2120, column: 3, scope: !3670)
!3764 = !DILocation(line: 2122, column: 10, scope: !3670)
!3765 = !DILocation(line: 2122, column: 3, scope: !3670)
!3766 = distinct !DISubprogram(name: "res_MII", scope: !3, file: !3, line: 373, type: !3767, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3767 = !DISubroutineType(types: !3768)
!3768 = !{!1015, !955}
!3769 = !DILocalVariable(name: "g", arg: 1, scope: !3766, file: !3, line: 373, type: !955)
!3770 = !DILocation(line: 373, column: 18, scope: !3766)
!3771 = !DILocation(line: 375, column: 21, scope: !3772)
!3772 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 375, column: 7)
!3773 = !DILocation(line: 375, column: 7, scope: !3772)
!3774 = !DILocation(line: 375, column: 7, scope: !3766)
!3775 = !DILocation(line: 376, column: 26, scope: !3772)
!3776 = !DILocation(line: 376, column: 39, scope: !3772)
!3777 = !DILocation(line: 376, column: 12, scope: !3772)
!3778 = !DILocation(line: 376, column: 5, scope: !3772)
!3779 = !DILocation(line: 378, column: 12, scope: !3766)
!3780 = !DILocation(line: 378, column: 15, scope: !3766)
!3781 = !DILocation(line: 378, column: 27, scope: !3766)
!3782 = !DILocation(line: 378, column: 30, scope: !3766)
!3783 = !DILocation(line: 378, column: 25, scope: !3766)
!3784 = !DILocation(line: 378, column: 43, scope: !3766)
!3785 = !DILocation(line: 378, column: 41, scope: !3766)
!3786 = !DILocation(line: 378, column: 3, scope: !3766)
!3787 = !DILocation(line: 379, column: 1, scope: !3766)
!3788 = distinct !DISubprogram(name: "set_node_sched_params", scope: !3, file: !3, line: 389, type: !3789, scopeLine: 390, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3789 = !DISubroutineType(types: !3790)
!3790 = !{null, !955}
!3791 = !DILocalVariable(name: "g", arg: 1, scope: !3788, file: !3, line: 389, type: !955)
!3792 = !DILocation(line: 389, column: 32, scope: !3788)
!3793 = !DILocalVariable(name: "i", scope: !3788, file: !3, line: 391, type: !1015)
!3794 = !DILocation(line: 391, column: 7, scope: !3788)
!3795 = !DILocation(line: 396, column: 19, scope: !3788)
!3796 = !DILocation(line: 396, column: 22, scope: !3788)
!3797 = !DILocation(line: 396, column: 10, scope: !3788)
!3798 = !DILocation(line: 395, column: 23, scope: !3788)
!3799 = !DILocation(line: 395, column: 21, scope: !3788)
!3800 = !DILocation(line: 401, column: 10, scope: !3801)
!3801 = distinct !DILexicalBlock(scope: !3788, file: !3, line: 401, column: 3)
!3802 = !DILocation(line: 401, column: 8, scope: !3801)
!3803 = !DILocation(line: 401, column: 15, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3801, file: !3, line: 401, column: 3)
!3805 = !DILocation(line: 401, column: 19, scope: !3804)
!3806 = !DILocation(line: 401, column: 22, scope: !3804)
!3807 = !DILocation(line: 401, column: 17, scope: !3804)
!3808 = !DILocation(line: 401, column: 3, scope: !3801)
!3809 = !DILocation(line: 404, column: 35, scope: !3810)
!3810 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 402, column: 5)
!3811 = !DILocation(line: 404, column: 38, scope: !3810)
!3812 = !DILocation(line: 404, column: 44, scope: !3810)
!3813 = !DILocation(line: 404, column: 47, scope: !3810)
!3814 = !DILocation(line: 404, column: 51, scope: !3810)
!3815 = !DILocation(line: 404, column: 7, scope: !3810)
!3816 = !DILocation(line: 404, column: 25, scope: !3810)
!3817 = !DILocation(line: 404, column: 28, scope: !3810)
!3818 = !DILocation(line: 404, column: 33, scope: !3810)
!3819 = !DILocation(line: 405, column: 31, scope: !3810)
!3820 = !DILocation(line: 405, column: 49, scope: !3810)
!3821 = !DILocation(line: 405, column: 30, scope: !3810)
!3822 = !DILocation(line: 405, column: 7, scope: !3810)
!3823 = !DILocation(line: 405, column: 10, scope: !3810)
!3824 = !DILocation(line: 405, column: 16, scope: !3810)
!3825 = !DILocation(line: 405, column: 19, scope: !3810)
!3826 = !DILocation(line: 405, column: 23, scope: !3810)
!3827 = !DILocation(line: 405, column: 28, scope: !3810)
!3828 = !DILocation(line: 406, column: 5, scope: !3810)
!3829 = !DILocation(line: 401, column: 34, scope: !3804)
!3830 = !DILocation(line: 401, column: 3, scope: !3804)
!3831 = distinct !{!3831, !3808, !3832}
!3832 = !DILocation(line: 406, column: 5, scope: !3801)
!3833 = !DILocation(line: 407, column: 1, scope: !3788)
!3834 = distinct !DISubprogram(name: "sms_schedule_by_order", scope: !3, file: !3, line: 1726, type: !3835, scopeLine: 1727, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!3835 = !DISubroutineType(types: !3836)
!3836 = !{!2218, !955, !1015, !1015, !2217}
!3837 = !DILocalVariable(name: "g", arg: 1, scope: !3834, file: !3, line: 1726, type: !955)
!3838 = !DILocation(line: 1726, column: 32, scope: !3834)
!3839 = !DILocalVariable(name: "mii", arg: 2, scope: !3834, file: !3, line: 1726, type: !1015)
!3840 = !DILocation(line: 1726, column: 39, scope: !3834)
!3841 = !DILocalVariable(name: "maxii", arg: 3, scope: !3834, file: !3, line: 1726, type: !1015)
!3842 = !DILocation(line: 1726, column: 48, scope: !3834)
!3843 = !DILocalVariable(name: "nodes_order", arg: 4, scope: !3834, file: !3, line: 1726, type: !2217)
!3844 = !DILocation(line: 1726, column: 60, scope: !3834)
!3845 = !DILocalVariable(name: "ii", scope: !3834, file: !3, line: 1728, type: !1015)
!3846 = !DILocation(line: 1728, column: 7, scope: !3834)
!3847 = !DILocation(line: 1728, column: 12, scope: !3834)
!3848 = !DILocalVariable(name: "i", scope: !3834, file: !3, line: 1729, type: !1015)
!3849 = !DILocation(line: 1729, column: 7, scope: !3834)
!3850 = !DILocalVariable(name: "c", scope: !3834, file: !3, line: 1729, type: !1015)
!3851 = !DILocation(line: 1729, column: 10, scope: !3834)
!3852 = !DILocalVariable(name: "success", scope: !3834, file: !3, line: 1729, type: !1015)
!3853 = !DILocation(line: 1729, column: 13, scope: !3834)
!3854 = !DILocalVariable(name: "num_splits", scope: !3834, file: !3, line: 1729, type: !1015)
!3855 = !DILocation(line: 1729, column: 22, scope: !3834)
!3856 = !DILocalVariable(name: "flush_and_start_over", scope: !3834, file: !3, line: 1730, type: !1015)
!3857 = !DILocation(line: 1730, column: 7, scope: !3834)
!3858 = !DILocalVariable(name: "num_nodes", scope: !3834, file: !3, line: 1731, type: !1015)
!3859 = !DILocation(line: 1731, column: 7, scope: !3834)
!3860 = !DILocation(line: 1731, column: 19, scope: !3834)
!3861 = !DILocation(line: 1731, column: 22, scope: !3834)
!3862 = !DILocalVariable(name: "start", scope: !3834, file: !3, line: 1732, type: !1015)
!3863 = !DILocation(line: 1732, column: 7, scope: !3834)
!3864 = !DILocalVariable(name: "end", scope: !3834, file: !3, line: 1732, type: !1015)
!3865 = !DILocation(line: 1732, column: 14, scope: !3834)
!3866 = !DILocalVariable(name: "step", scope: !3834, file: !3, line: 1732, type: !1015)
!3867 = !DILocation(line: 1732, column: 19, scope: !3834)
!3868 = !DILocalVariable(name: "sched_nodes", scope: !3834, file: !3, line: 1733, type: !2195)
!3869 = !DILocation(line: 1733, column: 11, scope: !3834)
!3870 = !DILocation(line: 1733, column: 40, scope: !3834)
!3871 = !DILocation(line: 1733, column: 25, scope: !3834)
!3872 = !DILocalVariable(name: "must_precede", scope: !3834, file: !3, line: 1734, type: !2195)
!3873 = !DILocation(line: 1734, column: 11, scope: !3834)
!3874 = !DILocation(line: 1734, column: 41, scope: !3834)
!3875 = !DILocation(line: 1734, column: 26, scope: !3834)
!3876 = !DILocalVariable(name: "must_follow", scope: !3834, file: !3, line: 1735, type: !2195)
!3877 = !DILocation(line: 1735, column: 11, scope: !3834)
!3878 = !DILocation(line: 1735, column: 40, scope: !3834)
!3879 = !DILocation(line: 1735, column: 25, scope: !3834)
!3880 = !DILocalVariable(name: "tobe_scheduled", scope: !3834, file: !3, line: 1736, type: !2195)
!3881 = !DILocation(line: 1736, column: 11, scope: !3834)
!3882 = !DILocation(line: 1736, column: 43, scope: !3834)
!3883 = !DILocation(line: 1736, column: 28, scope: !3834)
!3884 = !DILocalVariable(name: "ps", scope: !3834, file: !3, line: 1738, type: !2218)
!3885 = !DILocation(line: 1738, column: 24, scope: !3834)
!3886 = !DILocation(line: 1738, column: 54, scope: !3834)
!3887 = !DILocation(line: 1738, column: 58, scope: !3834)
!3888 = !DILocation(line: 1738, column: 61, scope: !3834)
!3889 = !DILocation(line: 1738, column: 29, scope: !3834)
!3890 = !DILocation(line: 1740, column: 17, scope: !3834)
!3891 = !DILocation(line: 1740, column: 3, scope: !3834)
!3892 = !DILocation(line: 1741, column: 17, scope: !3834)
!3893 = !DILocation(line: 1741, column: 3, scope: !3834)
!3894 = !DILocation(line: 1743, column: 3, scope: !3834)
!3895 = !DILocation(line: 1743, column: 10, scope: !3834)
!3896 = !DILocation(line: 1743, column: 31, scope: !3834)
!3897 = !DILocation(line: 1743, column: 35, scope: !3834)
!3898 = !DILocation(line: 1743, column: 40, scope: !3834)
!3899 = !DILocation(line: 1743, column: 38, scope: !3834)
!3900 = !DILocation(line: 0, scope: !3834)
!3901 = !DILocation(line: 1746, column: 11, scope: !3902)
!3902 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 1746, column: 11)
!3903 = distinct !DILexicalBlock(scope: !3834, file: !3, line: 1744, column: 5)
!3904 = !DILocation(line: 1746, column: 11, scope: !3903)
!3905 = !DILocation(line: 1747, column: 11, scope: !3902)
!3906 = !DILocation(line: 1747, column: 47, scope: !3902)
!3907 = !DILocation(line: 1747, column: 2, scope: !3902)
!3908 = !DILocation(line: 1748, column: 28, scope: !3903)
!3909 = !DILocation(line: 1749, column: 21, scope: !3903)
!3910 = !DILocation(line: 1749, column: 7, scope: !3903)
!3911 = !DILocation(line: 1751, column: 14, scope: !3912)
!3912 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 1751, column: 7)
!3913 = !DILocation(line: 1751, column: 12, scope: !3912)
!3914 = !DILocation(line: 1751, column: 19, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 1751, column: 7)
!3916 = !DILocation(line: 1751, column: 23, scope: !3915)
!3917 = !DILocation(line: 1751, column: 21, scope: !3915)
!3918 = !DILocation(line: 1751, column: 7, scope: !3912)
!3919 = !DILocalVariable(name: "u", scope: !3920, file: !3, line: 1753, type: !1015)
!3920 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 1752, column: 2)
!3921 = !DILocation(line: 1753, column: 8, scope: !3920)
!3922 = !DILocation(line: 1753, column: 12, scope: !3920)
!3923 = !DILocation(line: 1753, column: 24, scope: !3920)
!3924 = !DILocalVariable(name: "u_node", scope: !3920, file: !3, line: 1754, type: !2166)
!3925 = !DILocation(line: 1754, column: 19, scope: !3920)
!3926 = !DILocation(line: 1754, column: 29, scope: !3920)
!3927 = !DILocation(line: 1754, column: 33, scope: !3920)
!3928 = !DILocation(line: 1754, column: 36, scope: !3920)
!3929 = !DILocation(line: 1754, column: 42, scope: !3920)
!3930 = !DILocalVariable(name: "insn", scope: !3920, file: !3, line: 1755, type: !992)
!3931 = !DILocation(line: 1755, column: 8, scope: !3920)
!3932 = !DILocation(line: 1755, column: 15, scope: !3920)
!3933 = !DILocation(line: 1755, column: 23, scope: !3920)
!3934 = !DILocation(line: 1757, column: 9, scope: !3935)
!3935 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 1757, column: 8)
!3936 = !DILocation(line: 1757, column: 8, scope: !3920)
!3937 = !DILocation(line: 1759, column: 19, scope: !3938)
!3938 = distinct !DILexicalBlock(scope: !3935, file: !3, line: 1758, column: 6)
!3939 = !DILocation(line: 1759, column: 35, scope: !3938)
!3940 = !DILocation(line: 1759, column: 8, scope: !3938)
!3941 = !DILocation(line: 1760, column: 8, scope: !3938)
!3942 = !DILocation(line: 1763, column: 8, scope: !3943)
!3943 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 1763, column: 8)
!3944 = !DILocation(line: 1763, column: 8, scope: !3920)
!3945 = !DILocation(line: 1765, column: 19, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3943, file: !3, line: 1764, column: 6)
!3947 = !DILocation(line: 1765, column: 35, scope: !3946)
!3948 = !DILocation(line: 1765, column: 8, scope: !3946)
!3949 = !DILocation(line: 1766, column: 8, scope: !3946)
!3950 = !DILocation(line: 1769, column: 8, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 1769, column: 8)
!3952 = !DILocation(line: 1769, column: 8, scope: !3920)
!3953 = !DILocation(line: 1770, column: 6, scope: !3951)
!3954 = !DILocation(line: 1773, column: 11, scope: !3920)
!3955 = !DILocation(line: 1774, column: 32, scope: !3956)
!3956 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 1774, column: 14)
!3957 = !DILocation(line: 1774, column: 36, scope: !3956)
!3958 = !DILocation(line: 1774, column: 49, scope: !3956)
!3959 = !DILocation(line: 1774, column: 52, scope: !3956)
!3960 = !DILocation(line: 1774, column: 65, scope: !3956)
!3961 = !DILocation(line: 1774, column: 14, scope: !3956)
!3962 = !DILocation(line: 1775, column: 46, scope: !3956)
!3963 = !DILocation(line: 1774, column: 14, scope: !3920)
!3964 = !DILocation(line: 1777, column: 19, scope: !3965)
!3965 = distinct !DILexicalBlock(scope: !3966, file: !3, line: 1777, column: 19)
!3966 = distinct !DILexicalBlock(scope: !3956, file: !3, line: 1776, column: 13)
!3967 = !DILocation(line: 1777, column: 19, scope: !3966)
!3968 = !DILocation(line: 1778, column: 26, scope: !3965)
!3969 = !DILocation(line: 1779, column: 62, scope: !3965)
!3970 = !DILocation(line: 1779, column: 66, scope: !3965)
!3971 = !DILocation(line: 1780, column: 46, scope: !3965)
!3972 = !DILocation(line: 1780, column: 53, scope: !3965)
!3973 = !DILocation(line: 1780, column: 58, scope: !3965)
!3974 = !DILocation(line: 1778, column: 17, scope: !3965)
!3975 = !DILocation(line: 1782, column: 15, scope: !3966)
!3976 = !DILocation(line: 1785, column: 46, scope: !3966)
!3977 = !DILocation(line: 1785, column: 54, scope: !3966)
!3978 = !DILocation(line: 1785, column: 61, scope: !3966)
!3979 = !DILocation(line: 1785, column: 66, scope: !3966)
!3980 = !DILocation(line: 1785, column: 72, scope: !3966)
!3981 = !DILocation(line: 1786, column: 46, scope: !3966)
!3982 = !DILocation(line: 1786, column: 59, scope: !3966)
!3983 = !DILocation(line: 1787, column: 46, scope: !3966)
!3984 = !DILocation(line: 1785, column: 15, scope: !3966)
!3985 = !DILocation(line: 1789, column: 24, scope: !3986)
!3986 = distinct !DILexicalBlock(scope: !3966, file: !3, line: 1789, column: 15)
!3987 = !DILocation(line: 1789, column: 22, scope: !3986)
!3988 = !DILocation(line: 1789, column: 20, scope: !3986)
!3989 = !DILocation(line: 1789, column: 31, scope: !3990)
!3990 = distinct !DILexicalBlock(scope: !3986, file: !3, line: 1789, column: 15)
!3991 = !DILocation(line: 1789, column: 36, scope: !3990)
!3992 = !DILocation(line: 1789, column: 33, scope: !3990)
!3993 = !DILocation(line: 1789, column: 15, scope: !3986)
!3994 = !DILocalVariable(name: "tmp_precede", scope: !3995, file: !3, line: 1791, type: !2195)
!3995 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 1790, column: 17)
!3996 = !DILocation(line: 1791, column: 27, scope: !3995)
!3997 = !DILocalVariable(name: "tmp_follow", scope: !3995, file: !3, line: 1792, type: !2195)
!3998 = !DILocation(line: 1792, column: 27, scope: !3995)
!3999 = !DILocation(line: 1794, column: 23, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 1794, column: 23)
!4001 = !DILocation(line: 1794, column: 28, scope: !4000)
!4002 = !DILocation(line: 1794, column: 25, scope: !4000)
!4003 = !DILocation(line: 1794, column: 23, scope: !3995)
!4004 = !DILocation(line: 1796, column: 27, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !4006, file: !3, line: 1796, column: 27)
!4006 = distinct !DILexicalBlock(scope: !4000, file: !3, line: 1795, column: 21)
!4007 = !DILocation(line: 1796, column: 32, scope: !4005)
!4008 = !DILocation(line: 1796, column: 27, scope: !4006)
!4009 = !DILocation(line: 1797, column: 39, scope: !4005)
!4010 = !DILocation(line: 1797, column: 37, scope: !4005)
!4011 = !DILocation(line: 1797, column: 25, scope: !4005)
!4012 = !DILocation(line: 1799, column: 38, scope: !4005)
!4013 = !DILocation(line: 1799, column: 36, scope: !4005)
!4014 = !DILocation(line: 1800, column: 21, scope: !4006)
!4015 = !DILocation(line: 1801, column: 23, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 1801, column: 23)
!4017 = !DILocation(line: 1801, column: 28, scope: !4016)
!4018 = !DILocation(line: 1801, column: 34, scope: !4016)
!4019 = !DILocation(line: 1801, column: 32, scope: !4016)
!4020 = !DILocation(line: 1801, column: 25, scope: !4016)
!4021 = !DILocation(line: 1801, column: 23, scope: !3995)
!4022 = !DILocation(line: 1803, column: 27, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !4024, file: !3, line: 1803, column: 27)
!4024 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 1802, column: 21)
!4025 = !DILocation(line: 1803, column: 32, scope: !4023)
!4026 = !DILocation(line: 1803, column: 27, scope: !4024)
!4027 = !DILocation(line: 1804, column: 38, scope: !4023)
!4028 = !DILocation(line: 1804, column: 36, scope: !4023)
!4029 = !DILocation(line: 1804, column: 25, scope: !4023)
!4030 = !DILocation(line: 1806, column: 39, scope: !4023)
!4031 = !DILocation(line: 1806, column: 37, scope: !4023)
!4032 = !DILocation(line: 1807, column: 21, scope: !4024)
!4033 = !DILocation(line: 1810, column: 51, scope: !3995)
!4034 = !DILocation(line: 1810, column: 55, scope: !3995)
!4035 = !DILocation(line: 1810, column: 63, scope: !3995)
!4036 = !DILocation(line: 1810, column: 66, scope: !3995)
!4037 = !DILocation(line: 1811, column: 51, scope: !3995)
!4038 = !DILocation(line: 1812, column: 64, scope: !3995)
!4039 = !DILocation(line: 1813, column: 51, scope: !3995)
!4040 = !DILocation(line: 1810, column: 21, scope: !3995)
!4041 = !DILocation(line: 1809, column: 27, scope: !3995)
!4042 = !DILocation(line: 1814, column: 23, scope: !4043)
!4043 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 1814, column: 23)
!4044 = !DILocation(line: 1814, column: 23, scope: !3995)
!4045 = !DILocation(line: 1815, column: 21, scope: !4043)
!4046 = !DILocation(line: 1816, column: 17, scope: !3995)
!4047 = !DILocation(line: 1789, column: 46, scope: !3990)
!4048 = !DILocation(line: 1789, column: 43, scope: !3990)
!4049 = !DILocation(line: 1789, column: 15, scope: !3990)
!4050 = distinct !{!4050, !3993, !4051}
!4051 = !DILocation(line: 1816, column: 17, scope: !3986)
!4052 = !DILocation(line: 1818, column: 40, scope: !3966)
!4053 = !DILocation(line: 1818, column: 44, scope: !3966)
!4054 = !DILocation(line: 1818, column: 15, scope: !3966)
!4055 = !DILocation(line: 1819, column: 13, scope: !3966)
!4056 = !DILocation(line: 1820, column: 18, scope: !4057)
!4057 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 1820, column: 17)
!4058 = !DILocation(line: 1820, column: 17, scope: !3920)
!4059 = !DILocalVariable(name: "split_row", scope: !4060, file: !3, line: 1822, type: !1015)
!4060 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 1821, column: 13)
!4061 = !DILocation(line: 1822, column: 19, scope: !4060)
!4062 = !DILocation(line: 1824, column: 21, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1824, column: 19)
!4064 = !DILocation(line: 1824, column: 27, scope: !4063)
!4065 = !DILocation(line: 1824, column: 24, scope: !4063)
!4066 = !DILocation(line: 1824, column: 19, scope: !4060)
!4067 = !DILocation(line: 1825, column: 17, scope: !4063)
!4068 = !DILocation(line: 1827, column: 19, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1827, column: 19)
!4070 = !DILocation(line: 1827, column: 30, scope: !4069)
!4071 = !DILocation(line: 1827, column: 19, scope: !4060)
!4072 = !DILocation(line: 1829, column: 30, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4069, file: !3, line: 1828, column: 17)
!4074 = !DILocation(line: 1830, column: 40, scope: !4073)
!4075 = !DILocation(line: 1831, column: 44, scope: !4073)
!4076 = !DILocation(line: 1831, column: 48, scope: !4073)
!4077 = !DILocation(line: 1831, column: 19, scope: !4073)
!4078 = !DILocation(line: 1832, column: 43, scope: !4073)
!4079 = !DILocation(line: 1832, column: 47, scope: !4073)
!4080 = !DILocation(line: 1832, column: 19, scope: !4073)
!4081 = !DILocation(line: 1833, column: 44, scope: !4073)
!4082 = !DILocation(line: 1833, column: 48, scope: !4073)
!4083 = !DILocation(line: 1833, column: 19, scope: !4073)
!4084 = !DILocation(line: 1834, column: 19, scope: !4073)
!4085 = !DILocation(line: 1837, column: 25, scope: !4060)
!4086 = !DILocation(line: 1841, column: 19, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1841, column: 19)
!4088 = !DILocation(line: 1841, column: 24, scope: !4087)
!4089 = !DILocation(line: 1841, column: 19, scope: !4060)
!4090 = !DILocation(line: 1842, column: 48, scope: !4087)
!4091 = !DILocation(line: 1842, column: 61, scope: !4087)
!4092 = !DILocation(line: 1842, column: 68, scope: !4087)
!4093 = !DILocation(line: 1842, column: 72, scope: !4087)
!4094 = !DILocation(line: 1843, column: 48, scope: !4087)
!4095 = !DILocation(line: 1843, column: 52, scope: !4087)
!4096 = !DILocation(line: 1843, column: 56, scope: !4087)
!4097 = !DILocation(line: 1842, column: 29, scope: !4087)
!4098 = !DILocation(line: 1842, column: 27, scope: !4087)
!4099 = !DILocation(line: 1842, column: 17, scope: !4087)
!4100 = !DILocation(line: 1845, column: 48, scope: !4087)
!4101 = !DILocation(line: 1845, column: 61, scope: !4087)
!4102 = !DILocation(line: 1845, column: 65, scope: !4087)
!4103 = !DILocation(line: 1845, column: 70, scope: !4087)
!4104 = !DILocation(line: 1846, column: 48, scope: !4087)
!4105 = !DILocation(line: 1846, column: 52, scope: !4087)
!4106 = !DILocation(line: 1846, column: 56, scope: !4087)
!4107 = !DILocation(line: 1845, column: 29, scope: !4087)
!4108 = !DILocation(line: 1845, column: 27, scope: !4087)
!4109 = !DILocation(line: 1848, column: 36, scope: !4060)
!4110 = !DILocation(line: 1848, column: 40, scope: !4060)
!4111 = !DILocation(line: 1848, column: 51, scope: !4060)
!4112 = !DILocation(line: 1848, column: 15, scope: !4060)
!4113 = !DILocation(line: 1849, column: 16, scope: !4060)
!4114 = !DILocation(line: 1851, column: 19, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1851, column: 19)
!4116 = !DILocation(line: 1851, column: 19, scope: !4060)
!4117 = !DILocation(line: 1852, column: 26, scope: !4115)
!4118 = !DILocation(line: 1852, column: 56, scope: !4115)
!4119 = !DILocation(line: 1852, column: 17, scope: !4115)
!4120 = !DILocation(line: 1853, column: 13, scope: !4060)
!4121 = !DILocation(line: 1856, column: 9, scope: !3920)
!4122 = !DILocation(line: 1751, column: 35, scope: !3915)
!4123 = !DILocation(line: 1751, column: 7, scope: !3915)
!4124 = distinct !{!4124, !3918, !4125}
!4125 = !DILocation(line: 1856, column: 9, scope: !3912)
!4126 = distinct !{!4126, !3894, !4127}
!4127 = !DILocation(line: 1857, column: 5, scope: !3834)
!4128 = !DILocation(line: 1858, column: 7, scope: !4129)
!4129 = distinct !DILexicalBlock(scope: !3834, file: !3, line: 1858, column: 7)
!4130 = !DILocation(line: 1858, column: 13, scope: !4129)
!4131 = !DILocation(line: 1858, column: 10, scope: !4129)
!4132 = !DILocation(line: 1858, column: 7, scope: !3834)
!4133 = !DILocation(line: 1860, column: 30, scope: !4134)
!4134 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 1859, column: 5)
!4135 = !DILocation(line: 1860, column: 7, scope: !4134)
!4136 = !DILocation(line: 1861, column: 10, scope: !4134)
!4137 = !DILocation(line: 1862, column: 5, scope: !4134)
!4138 = !DILocation(line: 1864, column: 5, scope: !4129)
!4139 = !DILocation(line: 1866, column: 3, scope: !3834)
!4140 = !DILocation(line: 1867, column: 3, scope: !3834)
!4141 = !DILocation(line: 1868, column: 3, scope: !3834)
!4142 = !DILocation(line: 1869, column: 3, scope: !3834)
!4143 = !DILocation(line: 1871, column: 10, scope: !3834)
!4144 = !DILocation(line: 1871, column: 3, scope: !3834)
!4145 = distinct !DISubprogram(name: "normalize_sched_times", scope: !3, file: !3, line: 575, type: !4146, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4146 = !DISubroutineType(types: !4147)
!4147 = !{null, !2218}
!4148 = !DILocalVariable(name: "ps", arg: 1, scope: !4145, file: !3, line: 575, type: !2218)
!4149 = !DILocation(line: 575, column: 45, scope: !4145)
!4150 = !DILocalVariable(name: "row", scope: !4145, file: !3, line: 577, type: !1015)
!4151 = !DILocation(line: 577, column: 7, scope: !4145)
!4152 = !DILocalVariable(name: "amount", scope: !4145, file: !3, line: 578, type: !1015)
!4153 = !DILocation(line: 578, column: 7, scope: !4145)
!4154 = !DILocation(line: 578, column: 16, scope: !4145)
!4155 = !DILocalVariable(name: "ii", scope: !4145, file: !3, line: 579, type: !1015)
!4156 = !DILocation(line: 579, column: 7, scope: !4145)
!4157 = !DILocation(line: 579, column: 12, scope: !4145)
!4158 = !DILocation(line: 579, column: 16, scope: !4145)
!4159 = !DILocalVariable(name: "crr_insn", scope: !4145, file: !3, line: 580, type: !2226)
!4160 = !DILocation(line: 580, column: 15, scope: !4145)
!4161 = !DILocation(line: 582, column: 12, scope: !4162)
!4162 = distinct !DILexicalBlock(scope: !4145, file: !3, line: 582, column: 3)
!4163 = !DILocation(line: 582, column: 8, scope: !4162)
!4164 = !DILocation(line: 582, column: 17, scope: !4165)
!4165 = distinct !DILexicalBlock(scope: !4162, file: !3, line: 582, column: 3)
!4166 = !DILocation(line: 582, column: 23, scope: !4165)
!4167 = !DILocation(line: 582, column: 21, scope: !4165)
!4168 = !DILocation(line: 582, column: 3, scope: !4162)
!4169 = !DILocation(line: 583, column: 21, scope: !4170)
!4170 = distinct !DILexicalBlock(scope: !4165, file: !3, line: 583, column: 5)
!4171 = !DILocation(line: 583, column: 25, scope: !4170)
!4172 = !DILocation(line: 583, column: 30, scope: !4170)
!4173 = !DILocation(line: 583, column: 19, scope: !4170)
!4174 = !DILocation(line: 583, column: 10, scope: !4170)
!4175 = !DILocation(line: 583, column: 36, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4170, file: !3, line: 583, column: 5)
!4177 = !DILocation(line: 583, column: 5, scope: !4170)
!4178 = !DILocalVariable(name: "u", scope: !4179, file: !3, line: 585, type: !2166)
!4179 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 584, column: 7)
!4180 = !DILocation(line: 585, column: 15, scope: !4179)
!4181 = !DILocation(line: 585, column: 19, scope: !4179)
!4182 = !DILocation(line: 585, column: 29, scope: !4179)
!4183 = !DILocalVariable(name: "normalized_time", scope: !4179, file: !3, line: 586, type: !1015)
!4184 = !DILocation(line: 586, column: 6, scope: !4179)
!4185 = !DILocation(line: 586, column: 24, scope: !4179)
!4186 = !DILocation(line: 586, column: 41, scope: !4179)
!4187 = !DILocation(line: 586, column: 39, scope: !4179)
!4188 = !DILocation(line: 588, column: 6, scope: !4189)
!4189 = distinct !DILexicalBlock(scope: !4179, file: !3, line: 588, column: 6)
!4190 = !DILocation(line: 588, column: 6, scope: !4179)
!4191 = !DILocation(line: 589, column: 13, scope: !4189)
!4192 = !DILocation(line: 590, column: 23, scope: !4189)
!4193 = !DILocation(line: 590, column: 33, scope: !4189)
!4194 = !DILocation(line: 590, column: 39, scope: !4189)
!4195 = !DILocation(line: 590, column: 45, scope: !4189)
!4196 = !DILocation(line: 591, column: 11, scope: !4189)
!4197 = !DILocation(line: 591, column: 15, scope: !4189)
!4198 = !DILocation(line: 589, column: 4, scope: !4189)
!4199 = !DILocation(line: 592, column: 2, scope: !4179)
!4200 = !DILocation(line: 593, column: 2, scope: !4179)
!4201 = !DILocation(line: 594, column: 19, scope: !4179)
!4202 = !DILocation(line: 594, column: 2, scope: !4179)
!4203 = !DILocation(line: 594, column: 17, scope: !4179)
!4204 = !DILocation(line: 595, column: 18, scope: !4179)
!4205 = !DILocation(line: 595, column: 36, scope: !4179)
!4206 = !DILocation(line: 595, column: 34, scope: !4179)
!4207 = !DILocation(line: 595, column: 2, scope: !4179)
!4208 = !DILocation(line: 595, column: 16, scope: !4179)
!4209 = !DILocation(line: 596, column: 20, scope: !4179)
!4210 = !DILocation(line: 596, column: 38, scope: !4179)
!4211 = !DILocation(line: 596, column: 36, scope: !4179)
!4212 = !DILocation(line: 596, column: 2, scope: !4179)
!4213 = !DILocation(line: 596, column: 18, scope: !4179)
!4214 = !DILocation(line: 597, column: 7, scope: !4179)
!4215 = !DILocation(line: 583, column: 57, scope: !4176)
!4216 = !DILocation(line: 583, column: 67, scope: !4176)
!4217 = !DILocation(line: 583, column: 55, scope: !4176)
!4218 = !DILocation(line: 583, column: 5, scope: !4176)
!4219 = distinct !{!4219, !4177, !4220}
!4220 = !DILocation(line: 597, column: 7, scope: !4170)
!4221 = !DILocation(line: 582, column: 30, scope: !4165)
!4222 = !DILocation(line: 582, column: 3, scope: !4165)
!4223 = distinct !{!4223, !4168, !4224}
!4224 = !DILocation(line: 597, column: 7, scope: !4162)
!4225 = !DILocation(line: 598, column: 1, scope: !4145)
!4226 = distinct !DISubprogram(name: "rotate_partial_schedule", scope: !3, file: !3, line: 2826, type: !4227, scopeLine: 2827, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4227 = !DISubroutineType(types: !4228)
!4228 = !{null, !2218, !1015}
!4229 = !DILocalVariable(name: "ps", arg: 1, scope: !4226, file: !3, line: 2826, type: !2218)
!4230 = !DILocation(line: 2826, column: 47, scope: !4226)
!4231 = !DILocalVariable(name: "start_cycle", arg: 2, scope: !4226, file: !3, line: 2826, type: !1015)
!4232 = !DILocation(line: 2826, column: 55, scope: !4226)
!4233 = !DILocalVariable(name: "i", scope: !4226, file: !3, line: 2828, type: !1015)
!4234 = !DILocation(line: 2828, column: 7, scope: !4226)
!4235 = !DILocalVariable(name: "row", scope: !4226, file: !3, line: 2828, type: !1015)
!4236 = !DILocation(line: 2828, column: 10, scope: !4226)
!4237 = !DILocalVariable(name: "backward_rotates", scope: !4226, file: !3, line: 2828, type: !1015)
!4238 = !DILocation(line: 2828, column: 15, scope: !4226)
!4239 = !DILocalVariable(name: "last_row", scope: !4226, file: !3, line: 2829, type: !1015)
!4240 = !DILocation(line: 2829, column: 7, scope: !4226)
!4241 = !DILocation(line: 2829, column: 18, scope: !4226)
!4242 = !DILocation(line: 2829, column: 22, scope: !4226)
!4243 = !DILocation(line: 2829, column: 25, scope: !4226)
!4244 = !DILocation(line: 2831, column: 7, scope: !4245)
!4245 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 2831, column: 7)
!4246 = !DILocation(line: 2831, column: 19, scope: !4245)
!4247 = !DILocation(line: 2831, column: 7, scope: !4226)
!4248 = !DILocation(line: 2832, column: 5, scope: !4245)
!4249 = !DILocation(line: 2834, column: 22, scope: !4226)
!4250 = !DILocation(line: 2834, column: 20, scope: !4226)
!4251 = !DILocation(line: 2837, column: 10, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 2837, column: 3)
!4253 = !DILocation(line: 2837, column: 8, scope: !4252)
!4254 = !DILocation(line: 2837, column: 15, scope: !4255)
!4255 = distinct !DILexicalBlock(scope: !4252, file: !3, line: 2837, column: 3)
!4256 = !DILocation(line: 2837, column: 19, scope: !4255)
!4257 = !DILocation(line: 2837, column: 17, scope: !4255)
!4258 = !DILocation(line: 2837, column: 3, scope: !4252)
!4259 = !DILocalVariable(name: "first_row", scope: !4260, file: !3, line: 2839, type: !2226)
!4260 = distinct !DILexicalBlock(scope: !4255, file: !3, line: 2838, column: 5)
!4261 = !DILocation(line: 2839, column: 19, scope: !4260)
!4262 = !DILocation(line: 2839, column: 31, scope: !4260)
!4263 = !DILocation(line: 2839, column: 35, scope: !4260)
!4264 = !DILocation(line: 2841, column: 16, scope: !4265)
!4265 = distinct !DILexicalBlock(scope: !4260, file: !3, line: 2841, column: 7)
!4266 = !DILocation(line: 2841, column: 12, scope: !4265)
!4267 = !DILocation(line: 2841, column: 21, scope: !4268)
!4268 = distinct !DILexicalBlock(scope: !4265, file: !3, line: 2841, column: 7)
!4269 = !DILocation(line: 2841, column: 27, scope: !4268)
!4270 = !DILocation(line: 2841, column: 25, scope: !4268)
!4271 = !DILocation(line: 2841, column: 7, scope: !4265)
!4272 = !DILocation(line: 2842, column: 18, scope: !4268)
!4273 = !DILocation(line: 2842, column: 22, scope: !4268)
!4274 = !DILocation(line: 2842, column: 27, scope: !4268)
!4275 = !DILocation(line: 2842, column: 30, scope: !4268)
!4276 = !DILocation(line: 2842, column: 2, scope: !4268)
!4277 = !DILocation(line: 2842, column: 6, scope: !4268)
!4278 = !DILocation(line: 2842, column: 11, scope: !4268)
!4279 = !DILocation(line: 2842, column: 16, scope: !4268)
!4280 = !DILocation(line: 2841, column: 40, scope: !4268)
!4281 = !DILocation(line: 2841, column: 7, scope: !4268)
!4282 = distinct !{!4282, !4271, !4283}
!4283 = !DILocation(line: 2842, column: 32, scope: !4265)
!4284 = !DILocation(line: 2844, column: 28, scope: !4260)
!4285 = !DILocation(line: 2844, column: 7, scope: !4260)
!4286 = !DILocation(line: 2844, column: 11, scope: !4260)
!4287 = !DILocation(line: 2844, column: 16, scope: !4260)
!4288 = !DILocation(line: 2844, column: 26, scope: !4260)
!4289 = !DILocation(line: 2845, column: 5, scope: !4260)
!4290 = !DILocation(line: 2837, column: 38, scope: !4255)
!4291 = !DILocation(line: 2837, column: 3, scope: !4255)
!4292 = distinct !{!4292, !4258, !4293}
!4293 = !DILocation(line: 2845, column: 5, scope: !4252)
!4294 = !DILocation(line: 2847, column: 20, scope: !4226)
!4295 = !DILocation(line: 2847, column: 3, scope: !4226)
!4296 = !DILocation(line: 2847, column: 7, scope: !4226)
!4297 = !DILocation(line: 2847, column: 17, scope: !4226)
!4298 = !DILocation(line: 2848, column: 20, scope: !4226)
!4299 = !DILocation(line: 2848, column: 3, scope: !4226)
!4300 = !DILocation(line: 2848, column: 7, scope: !4226)
!4301 = !DILocation(line: 2848, column: 17, scope: !4226)
!4302 = !DILocation(line: 2849, column: 1, scope: !4226)
!4303 = distinct !DISubprogram(name: "set_columns_for_ps", scope: !3, file: !3, line: 602, type: !4146, scopeLine: 603, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4304 = !DILocalVariable(name: "ps", arg: 1, scope: !4303, file: !3, line: 602, type: !2218)
!4305 = !DILocation(line: 602, column: 42, scope: !4303)
!4306 = !DILocalVariable(name: "row", scope: !4303, file: !3, line: 604, type: !1015)
!4307 = !DILocation(line: 604, column: 7, scope: !4303)
!4308 = !DILocation(line: 606, column: 12, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 606, column: 3)
!4310 = !DILocation(line: 606, column: 8, scope: !4309)
!4311 = !DILocation(line: 606, column: 17, scope: !4312)
!4312 = distinct !DILexicalBlock(scope: !4309, file: !3, line: 606, column: 3)
!4313 = !DILocation(line: 606, column: 23, scope: !4312)
!4314 = !DILocation(line: 606, column: 27, scope: !4312)
!4315 = !DILocation(line: 606, column: 21, scope: !4312)
!4316 = !DILocation(line: 606, column: 3, scope: !4309)
!4317 = !DILocalVariable(name: "cur_insn", scope: !4318, file: !3, line: 608, type: !2226)
!4318 = distinct !DILexicalBlock(scope: !4312, file: !3, line: 607, column: 5)
!4319 = !DILocation(line: 608, column: 19, scope: !4318)
!4320 = !DILocation(line: 608, column: 30, scope: !4318)
!4321 = !DILocation(line: 608, column: 34, scope: !4318)
!4322 = !DILocation(line: 608, column: 39, scope: !4318)
!4323 = !DILocalVariable(name: "column", scope: !4318, file: !3, line: 609, type: !1015)
!4324 = !DILocation(line: 609, column: 11, scope: !4318)
!4325 = !DILocation(line: 611, column: 7, scope: !4318)
!4326 = !DILocation(line: 611, column: 14, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !4328, file: !3, line: 611, column: 7)
!4328 = distinct !DILexicalBlock(scope: !4318, file: !3, line: 611, column: 7)
!4329 = !DILocation(line: 611, column: 7, scope: !4328)
!4330 = !DILocation(line: 612, column: 40, scope: !4327)
!4331 = !DILocation(line: 612, column: 2, scope: !4327)
!4332 = !DILocation(line: 612, column: 32, scope: !4327)
!4333 = !DILocation(line: 611, column: 35, scope: !4327)
!4334 = !DILocation(line: 611, column: 45, scope: !4327)
!4335 = !DILocation(line: 611, column: 33, scope: !4327)
!4336 = !DILocation(line: 611, column: 7, scope: !4327)
!4337 = distinct !{!4337, !4329, !4338}
!4338 = !DILocation(line: 612, column: 40, scope: !4328)
!4339 = !DILocation(line: 613, column: 5, scope: !4318)
!4340 = !DILocation(line: 606, column: 34, scope: !4312)
!4341 = !DILocation(line: 606, column: 3, scope: !4312)
!4342 = distinct !{!4342, !4316, !4343}
!4343 = !DILocation(line: 613, column: 5, scope: !4309)
!4344 = !DILocation(line: 614, column: 1, scope: !4303)
!4345 = distinct !DISubprogram(name: "canon_loop", scope: !3, file: !3, line: 840, type: !4346, scopeLine: 841, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4346 = !DISubroutineType(types: !4347)
!4347 = !{null, !1580}
!4348 = !DILocalVariable(name: "loop", arg: 1, scope: !4345, file: !3, line: 840, type: !1580)
!4349 = !DILocation(line: 840, column: 26, scope: !4345)
!4350 = !DILocalVariable(name: "e", scope: !4345, file: !3, line: 842, type: !978)
!4351 = !DILocation(line: 842, column: 8, scope: !4345)
!4352 = !DILocalVariable(name: "i", scope: !4345, file: !3, line: 843, type: !4353)
!4353 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !155, line: 682, baseType: !4354)
!4354 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !155, line: 679, size: 128, elements: !4355)
!4355 = !{!4356, !4357}
!4356 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4354, file: !155, line: 680, baseType: !7, size: 32)
!4357 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4354, file: !155, line: 681, baseType: !4358, size: 64, offset: 64)
!4358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !966, size: 64)
!4359 = !DILocation(line: 843, column: 17, scope: !4345)
!4360 = !DILocation(line: 847, column: 3, scope: !4361)
!4361 = distinct !DILexicalBlock(scope: !4345, file: !3, line: 847, column: 3)
!4362 = !DILocation(line: 847, column: 3, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 847, column: 3)
!4364 = !DILocation(line: 848, column: 10, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4363, file: !3, line: 848, column: 9)
!4366 = !DILocation(line: 848, column: 13, scope: !4365)
!4367 = !DILocation(line: 848, column: 19, scope: !4365)
!4368 = !DILocation(line: 848, column: 36, scope: !4365)
!4369 = !DILocation(line: 848, column: 40, scope: !4365)
!4370 = !DILocation(line: 848, column: 67, scope: !4365)
!4371 = !DILocation(line: 848, column: 9, scope: !4363)
!4372 = !DILocation(line: 849, column: 19, scope: !4365)
!4373 = !DILocation(line: 849, column: 7, scope: !4365)
!4374 = !DILocation(line: 848, column: 70, scope: !4365)
!4375 = distinct !{!4375, !4360, !4376}
!4376 = !DILocation(line: 849, column: 20, scope: !4361)
!4377 = !DILocation(line: 851, column: 7, scope: !4378)
!4378 = distinct !DILexicalBlock(scope: !4345, file: !3, line: 851, column: 7)
!4379 = !DILocation(line: 851, column: 13, scope: !4378)
!4380 = !DILocation(line: 851, column: 22, scope: !4378)
!4381 = !DILocation(line: 851, column: 28, scope: !4378)
!4382 = !DILocation(line: 851, column: 19, scope: !4378)
!4383 = !DILocation(line: 852, column: 7, scope: !4378)
!4384 = !DILocation(line: 852, column: 10, scope: !4378)
!4385 = !DILocation(line: 852, column: 42, scope: !4378)
!4386 = !DILocation(line: 851, column: 7, scope: !4345)
!4387 = !DILocation(line: 854, column: 7, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 854, column: 7)
!4389 = distinct !DILexicalBlock(scope: !4378, file: !3, line: 853, column: 5)
!4390 = !DILocation(line: 854, column: 7, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4388, file: !3, line: 854, column: 7)
!4392 = !DILocation(line: 855, column: 13, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4391, file: !3, line: 855, column: 13)
!4394 = !DILocation(line: 855, column: 16, scope: !4393)
!4395 = !DILocation(line: 855, column: 23, scope: !4393)
!4396 = !DILocation(line: 855, column: 29, scope: !4393)
!4397 = !DILocation(line: 855, column: 20, scope: !4393)
!4398 = !DILocation(line: 855, column: 13, scope: !4391)
!4399 = !DILocation(line: 856, column: 11, scope: !4393)
!4400 = distinct !{!4400, !4387, !4401}
!4401 = !DILocation(line: 856, column: 11, scope: !4388)
!4402 = !DILocation(line: 857, column: 19, scope: !4389)
!4403 = !DILocation(line: 857, column: 7, scope: !4389)
!4404 = !DILocation(line: 858, column: 5, scope: !4389)
!4405 = !DILocation(line: 859, column: 1, scope: !4345)
!4406 = distinct !DISubprogram(name: "permute_partial_schedule", scope: !3, file: !3, line: 620, type: !4407, scopeLine: 621, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4407 = !DISubroutineType(types: !4408)
!4408 = !{null, !2218, !992}
!4409 = !DILocalVariable(name: "ps", arg: 1, scope: !4406, file: !3, line: 620, type: !2218)
!4410 = !DILocation(line: 620, column: 48, scope: !4406)
!4411 = !DILocalVariable(name: "last", arg: 2, scope: !4406, file: !3, line: 620, type: !992)
!4412 = !DILocation(line: 620, column: 56, scope: !4406)
!4413 = !DILocalVariable(name: "ii", scope: !4406, file: !3, line: 622, type: !1015)
!4414 = !DILocation(line: 622, column: 7, scope: !4406)
!4415 = !DILocation(line: 622, column: 12, scope: !4406)
!4416 = !DILocation(line: 622, column: 16, scope: !4406)
!4417 = !DILocalVariable(name: "row", scope: !4406, file: !3, line: 623, type: !1015)
!4418 = !DILocation(line: 623, column: 7, scope: !4406)
!4419 = !DILocalVariable(name: "ps_ij", scope: !4406, file: !3, line: 624, type: !2226)
!4420 = !DILocation(line: 624, column: 15, scope: !4406)
!4421 = !DILocation(line: 626, column: 12, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !4406, file: !3, line: 626, column: 3)
!4423 = !DILocation(line: 626, column: 8, scope: !4422)
!4424 = !DILocation(line: 626, column: 17, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4422, file: !3, line: 626, column: 3)
!4426 = !DILocation(line: 626, column: 23, scope: !4425)
!4427 = !DILocation(line: 626, column: 21, scope: !4425)
!4428 = !DILocation(line: 626, column: 3, scope: !4422)
!4429 = !DILocation(line: 627, column: 18, scope: !4430)
!4430 = distinct !DILexicalBlock(scope: !4425, file: !3, line: 627, column: 5)
!4431 = !DILocation(line: 627, column: 22, scope: !4430)
!4432 = !DILocation(line: 627, column: 27, scope: !4430)
!4433 = !DILocation(line: 627, column: 16, scope: !4430)
!4434 = !DILocation(line: 627, column: 10, scope: !4430)
!4435 = !DILocation(line: 627, column: 33, scope: !4436)
!4436 = distinct !DILexicalBlock(scope: !4430, file: !3, line: 627, column: 5)
!4437 = !DILocation(line: 627, column: 5, scope: !4430)
!4438 = !DILocation(line: 628, column: 11, scope: !4439)
!4439 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 628, column: 11)
!4440 = !DILocation(line: 628, column: 31, scope: !4439)
!4441 = !DILocation(line: 628, column: 38, scope: !4439)
!4442 = !DILocation(line: 628, column: 44, scope: !4439)
!4443 = !DILocation(line: 628, column: 28, scope: !4439)
!4444 = !DILocation(line: 628, column: 11, scope: !4436)
!4445 = !DILocation(line: 629, column: 28, scope: !4439)
!4446 = !DILocation(line: 629, column: 35, scope: !4439)
!4447 = !DILocation(line: 629, column: 41, scope: !4439)
!4448 = !DILocation(line: 629, column: 53, scope: !4439)
!4449 = !DILocation(line: 629, column: 60, scope: !4439)
!4450 = !DILocation(line: 629, column: 66, scope: !4439)
!4451 = !DILocation(line: 630, column: 8, scope: !4439)
!4452 = !DILocation(line: 629, column: 8, scope: !4439)
!4453 = !DILocation(line: 627, column: 48, scope: !4436)
!4454 = !DILocation(line: 627, column: 55, scope: !4436)
!4455 = !DILocation(line: 627, column: 46, scope: !4436)
!4456 = !DILocation(line: 627, column: 5, scope: !4436)
!4457 = distinct !{!4457, !4437, !4458}
!4458 = !DILocation(line: 630, column: 24, scope: !4430)
!4459 = !DILocation(line: 626, column: 31, scope: !4425)
!4460 = !DILocation(line: 626, column: 3, scope: !4425)
!4461 = distinct !{!4461, !4428, !4462}
!4462 = !DILocation(line: 630, column: 24, scope: !4422)
!4463 = !DILocation(line: 631, column: 1, scope: !4406)
!4464 = distinct !DISubprogram(name: "generate_reg_moves", scope: !3, file: !3, line: 448, type: !4465, scopeLine: 449, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4465 = !DISubroutineType(types: !4466)
!4466 = !{!2268, !2218, !1226}
!4467 = !DILocalVariable(name: "ps", arg: 1, scope: !4464, file: !3, line: 448, type: !2218)
!4468 = !DILocation(line: 448, column: 42, scope: !4464)
!4469 = !DILocalVariable(name: "rescan", arg: 2, scope: !4464, file: !3, line: 448, type: !1226)
!4470 = !DILocation(line: 448, column: 51, scope: !4464)
!4471 = !DILocalVariable(name: "g", scope: !4464, file: !3, line: 450, type: !955)
!4472 = !DILocation(line: 450, column: 11, scope: !4464)
!4473 = !DILocation(line: 450, column: 15, scope: !4464)
!4474 = !DILocation(line: 450, column: 19, scope: !4464)
!4475 = !DILocalVariable(name: "ii", scope: !4464, file: !3, line: 451, type: !1015)
!4476 = !DILocation(line: 451, column: 7, scope: !4464)
!4477 = !DILocation(line: 451, column: 12, scope: !4464)
!4478 = !DILocation(line: 451, column: 16, scope: !4464)
!4479 = !DILocalVariable(name: "i", scope: !4464, file: !3, line: 452, type: !1015)
!4480 = !DILocation(line: 452, column: 7, scope: !4464)
!4481 = !DILocalVariable(name: "reg_move_replaces", scope: !4464, file: !3, line: 453, type: !2268)
!4482 = !DILocation(line: 453, column: 34, scope: !4464)
!4483 = !DILocation(line: 455, column: 10, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4464, file: !3, line: 455, column: 3)
!4485 = !DILocation(line: 455, column: 8, scope: !4484)
!4486 = !DILocation(line: 455, column: 15, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4484, file: !3, line: 455, column: 3)
!4488 = !DILocation(line: 455, column: 19, scope: !4487)
!4489 = !DILocation(line: 455, column: 22, scope: !4487)
!4490 = !DILocation(line: 455, column: 17, scope: !4487)
!4491 = !DILocation(line: 455, column: 3, scope: !4484)
!4492 = !DILocalVariable(name: "u", scope: !4493, file: !3, line: 457, type: !2166)
!4493 = distinct !DILexicalBlock(scope: !4487, file: !3, line: 456, column: 5)
!4494 = !DILocation(line: 457, column: 20, scope: !4493)
!4495 = !DILocation(line: 457, column: 25, scope: !4493)
!4496 = !DILocation(line: 457, column: 28, scope: !4493)
!4497 = !DILocation(line: 457, column: 34, scope: !4493)
!4498 = !DILocalVariable(name: "e", scope: !4493, file: !3, line: 458, type: !2174)
!4499 = !DILocation(line: 458, column: 20, scope: !4493)
!4500 = !DILocalVariable(name: "nreg_moves", scope: !4493, file: !3, line: 459, type: !1015)
!4501 = !DILocation(line: 459, column: 11, scope: !4493)
!4502 = !DILocalVariable(name: "i_reg_move", scope: !4493, file: !3, line: 459, type: !1015)
!4503 = !DILocation(line: 459, column: 27, scope: !4493)
!4504 = !DILocalVariable(name: "uses_of_defs", scope: !4493, file: !3, line: 460, type: !4505)
!4505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2195, size: 64)
!4506 = !DILocation(line: 460, column: 16, scope: !4493)
!4507 = !DILocalVariable(name: "last_reg_move", scope: !4493, file: !3, line: 461, type: !992)
!4508 = !DILocation(line: 461, column: 11, scope: !4493)
!4509 = !DILocalVariable(name: "prev_reg", scope: !4493, file: !3, line: 462, type: !992)
!4510 = !DILocation(line: 462, column: 11, scope: !4493)
!4511 = !DILocalVariable(name: "old_reg", scope: !4493, file: !3, line: 462, type: !992)
!4512 = !DILocation(line: 462, column: 21, scope: !4493)
!4513 = !DILocation(line: 466, column: 16, scope: !4514)
!4514 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 466, column: 7)
!4515 = !DILocation(line: 466, column: 19, scope: !4514)
!4516 = !DILocation(line: 466, column: 14, scope: !4514)
!4517 = !DILocation(line: 466, column: 12, scope: !4514)
!4518 = !DILocation(line: 466, column: 24, scope: !4519)
!4519 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 466, column: 7)
!4520 = !DILocation(line: 466, column: 7, scope: !4514)
!4521 = !DILocation(line: 467, column: 6, scope: !4522)
!4522 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 467, column: 6)
!4523 = !DILocation(line: 467, column: 9, scope: !4522)
!4524 = !DILocation(line: 467, column: 14, scope: !4522)
!4525 = !DILocation(line: 467, column: 26, scope: !4522)
!4526 = !DILocation(line: 467, column: 29, scope: !4522)
!4527 = !DILocation(line: 467, column: 32, scope: !4522)
!4528 = !DILocation(line: 467, column: 40, scope: !4522)
!4529 = !DILocation(line: 467, column: 43, scope: !4522)
!4530 = !DILocation(line: 467, column: 37, scope: !4522)
!4531 = !DILocation(line: 467, column: 6, scope: !4519)
!4532 = !DILocalVariable(name: "nreg_moves4e", scope: !4533, file: !3, line: 469, type: !1015)
!4533 = distinct !DILexicalBlock(scope: !4522, file: !3, line: 468, column: 4)
!4534 = !DILocation(line: 469, column: 10, scope: !4533)
!4535 = !DILocation(line: 469, column: 26, scope: !4533)
!4536 = !DILocation(line: 469, column: 49, scope: !4533)
!4537 = !DILocation(line: 469, column: 47, scope: !4533)
!4538 = !DILocation(line: 469, column: 72, scope: !4533)
!4539 = !DILocation(line: 469, column: 70, scope: !4533)
!4540 = !DILocation(line: 471, column: 17, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4533, file: !3, line: 471, column: 17)
!4542 = !DILocation(line: 471, column: 20, scope: !4541)
!4543 = !DILocation(line: 471, column: 29, scope: !4541)
!4544 = !DILocation(line: 471, column: 17, scope: !4533)
!4545 = !DILocation(line: 472, column: 31, scope: !4541)
!4546 = !DILocation(line: 472, column: 54, scope: !4541)
!4547 = !DILocation(line: 472, column: 52, scope: !4541)
!4548 = !DILocation(line: 472, column: 76, scope: !4541)
!4549 = !DILocation(line: 472, column: 74, scope: !4541)
!4550 = !DILocation(line: 472, column: 82, scope: !4541)
!4551 = !DILocation(line: 472, column: 80, scope: !4541)
!4552 = !DILocation(line: 472, column: 28, scope: !4541)
!4553 = !DILocation(line: 472, column: 15, scope: !4541)
!4554 = !DILocation(line: 476, column: 10, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4533, file: !3, line: 476, column: 10)
!4556 = !DILocation(line: 476, column: 33, scope: !4555)
!4557 = !DILocation(line: 476, column: 30, scope: !4555)
!4558 = !DILocation(line: 477, column: 3, scope: !4555)
!4559 = !DILocation(line: 477, column: 6, scope: !4555)
!4560 = !DILocation(line: 477, column: 31, scope: !4555)
!4561 = !DILocation(line: 477, column: 29, scope: !4555)
!4562 = !DILocation(line: 476, column: 10, scope: !4533)
!4563 = !DILocation(line: 478, column: 20, scope: !4555)
!4564 = !DILocation(line: 478, column: 8, scope: !4555)
!4565 = !DILocation(line: 480, column: 19, scope: !4533)
!4566 = !DILocation(line: 480, column: 17, scope: !4533)
!4567 = !DILocation(line: 481, column: 4, scope: !4533)
!4568 = !DILocation(line: 466, column: 31, scope: !4519)
!4569 = !DILocation(line: 466, column: 34, scope: !4519)
!4570 = !DILocation(line: 466, column: 29, scope: !4519)
!4571 = !DILocation(line: 466, column: 7, scope: !4519)
!4572 = distinct !{!4572, !4520, !4573}
!4573 = !DILocation(line: 481, column: 4, scope: !4514)
!4574 = !DILocation(line: 483, column: 11, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 483, column: 11)
!4576 = !DILocation(line: 483, column: 22, scope: !4575)
!4577 = !DILocation(line: 483, column: 11, scope: !4493)
!4578 = !DILocation(line: 484, column: 2, scope: !4575)
!4579 = !DILocation(line: 490, column: 44, scope: !4493)
!4580 = !DILocation(line: 490, column: 56, scope: !4493)
!4581 = !DILocation(line: 490, column: 59, scope: !4493)
!4582 = !DILocation(line: 490, column: 22, scope: !4493)
!4583 = !DILocation(line: 490, column: 20, scope: !4493)
!4584 = !DILocation(line: 491, column: 28, scope: !4493)
!4585 = !DILocation(line: 491, column: 42, scope: !4493)
!4586 = !DILocation(line: 491, column: 7, scope: !4493)
!4587 = !DILocation(line: 492, column: 16, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 492, column: 7)
!4589 = !DILocation(line: 492, column: 19, scope: !4588)
!4590 = !DILocation(line: 492, column: 14, scope: !4588)
!4591 = !DILocation(line: 492, column: 12, scope: !4588)
!4592 = !DILocation(line: 492, column: 24, scope: !4593)
!4593 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 492, column: 7)
!4594 = !DILocation(line: 492, column: 7, scope: !4588)
!4595 = !DILocation(line: 493, column: 6, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4593, file: !3, line: 493, column: 6)
!4597 = !DILocation(line: 493, column: 9, scope: !4596)
!4598 = !DILocation(line: 493, column: 14, scope: !4596)
!4599 = !DILocation(line: 493, column: 26, scope: !4596)
!4600 = !DILocation(line: 493, column: 29, scope: !4596)
!4601 = !DILocation(line: 493, column: 32, scope: !4596)
!4602 = !DILocation(line: 493, column: 40, scope: !4596)
!4603 = !DILocation(line: 493, column: 43, scope: !4596)
!4604 = !DILocation(line: 493, column: 37, scope: !4596)
!4605 = !DILocation(line: 493, column: 6, scope: !4593)
!4606 = !DILocalVariable(name: "dest_copy", scope: !4607, file: !3, line: 495, type: !1015)
!4607 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 494, column: 4)
!4608 = !DILocation(line: 495, column: 10, scope: !4607)
!4609 = !DILocation(line: 495, column: 23, scope: !4607)
!4610 = !DILocation(line: 495, column: 46, scope: !4607)
!4611 = !DILocation(line: 495, column: 44, scope: !4607)
!4612 = !DILocation(line: 495, column: 69, scope: !4607)
!4613 = !DILocation(line: 495, column: 67, scope: !4607)
!4614 = !DILocation(line: 497, column: 10, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 497, column: 10)
!4616 = !DILocation(line: 497, column: 13, scope: !4615)
!4617 = !DILocation(line: 497, column: 22, scope: !4615)
!4618 = !DILocation(line: 497, column: 10, scope: !4607)
!4619 = !DILocation(line: 498, column: 21, scope: !4615)
!4620 = !DILocation(line: 498, column: 44, scope: !4615)
!4621 = !DILocation(line: 498, column: 42, scope: !4615)
!4622 = !DILocation(line: 498, column: 66, scope: !4615)
!4623 = !DILocation(line: 498, column: 64, scope: !4615)
!4624 = !DILocation(line: 498, column: 72, scope: !4615)
!4625 = !DILocation(line: 498, column: 70, scope: !4615)
!4626 = !DILocation(line: 498, column: 18, scope: !4615)
!4627 = !DILocation(line: 498, column: 8, scope: !4615)
!4628 = !DILocation(line: 500, column: 10, scope: !4629)
!4629 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 500, column: 10)
!4630 = !DILocation(line: 500, column: 33, scope: !4629)
!4631 = !DILocation(line: 500, column: 30, scope: !4629)
!4632 = !DILocation(line: 501, column: 3, scope: !4629)
!4633 = !DILocation(line: 501, column: 6, scope: !4629)
!4634 = !DILocation(line: 501, column: 31, scope: !4629)
!4635 = !DILocation(line: 501, column: 29, scope: !4629)
!4636 = !DILocation(line: 500, column: 10, scope: !4607)
!4637 = !DILocation(line: 502, column: 17, scope: !4629)
!4638 = !DILocation(line: 502, column: 8, scope: !4629)
!4639 = !DILocation(line: 504, column: 10, scope: !4640)
!4640 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 504, column: 10)
!4641 = !DILocation(line: 504, column: 10, scope: !4607)
!4642 = !DILocation(line: 505, column: 17, scope: !4640)
!4643 = !DILocation(line: 505, column: 30, scope: !4640)
!4644 = !DILocation(line: 505, column: 40, scope: !4640)
!4645 = !DILocation(line: 505, column: 46, scope: !4640)
!4646 = !DILocation(line: 505, column: 49, scope: !4640)
!4647 = !DILocation(line: 505, column: 55, scope: !4640)
!4648 = !DILocation(line: 505, column: 8, scope: !4640)
!4649 = !DILocation(line: 506, column: 4, scope: !4607)
!4650 = !DILocation(line: 492, column: 31, scope: !4593)
!4651 = !DILocation(line: 492, column: 34, scope: !4593)
!4652 = !DILocation(line: 492, column: 29, scope: !4593)
!4653 = !DILocation(line: 492, column: 7, scope: !4593)
!4654 = distinct !{!4654, !4594, !4655}
!4655 = !DILocation(line: 506, column: 4, scope: !4588)
!4656 = !DILocation(line: 509, column: 30, scope: !4493)
!4657 = !DILocation(line: 509, column: 7, scope: !4493)
!4658 = !DILocation(line: 509, column: 28, scope: !4493)
!4659 = !DILocation(line: 510, column: 38, scope: !4493)
!4660 = !DILocation(line: 510, column: 28, scope: !4493)
!4661 = !DILocation(line: 510, column: 26, scope: !4493)
!4662 = !DILocation(line: 510, column: 15, scope: !4493)
!4663 = !DILocation(line: 513, column: 23, scope: !4493)
!4664 = !DILocation(line: 513, column: 26, scope: !4493)
!4665 = !DILocation(line: 513, column: 21, scope: !4493)
!4666 = !DILocation(line: 515, column: 23, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 515, column: 7)
!4668 = !DILocation(line: 515, column: 12, scope: !4667)
!4669 = !DILocation(line: 515, column: 28, scope: !4670)
!4670 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 515, column: 7)
!4671 = !DILocation(line: 515, column: 41, scope: !4670)
!4672 = !DILocation(line: 515, column: 39, scope: !4670)
!4673 = !DILocation(line: 515, column: 7, scope: !4667)
!4674 = !DILocalVariable(name: "i_use", scope: !4675, file: !3, line: 517, type: !7)
!4675 = distinct !DILexicalBlock(scope: !4670, file: !3, line: 516, column: 2)
!4676 = !DILocation(line: 517, column: 17, scope: !4675)
!4677 = !DILocalVariable(name: "new_reg", scope: !4675, file: !3, line: 518, type: !992)
!4678 = !DILocation(line: 518, column: 8, scope: !4675)
!4679 = !DILocation(line: 518, column: 31, scope: !4675)
!4680 = !DILocation(line: 518, column: 18, scope: !4675)
!4681 = !DILocalVariable(name: "reg_move", scope: !4675, file: !3, line: 519, type: !992)
!4682 = !DILocation(line: 519, column: 8, scope: !4675)
!4683 = !DILocation(line: 519, column: 34, scope: !4675)
!4684 = !DILocation(line: 519, column: 43, scope: !4675)
!4685 = !DILocation(line: 519, column: 19, scope: !4675)
!4686 = !DILocalVariable(name: "sbi", scope: !4675, file: !3, line: 520, type: !4687)
!4687 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap_iterator", file: !2196, line: 111, baseType: !4688)
!4688 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2196, line: 96, size: 256, elements: !4689)
!4689 = !{!4690, !4693, !4694, !4695, !4696}
!4690 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4688, file: !2196, line: 98, baseType: !4691, size: 64)
!4691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4692, size: 64)
!4692 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1065)
!4693 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4688, file: !2196, line: 101, baseType: !7, size: 32, offset: 64)
!4694 = !DIDerivedType(tag: DW_TAG_member, name: "word_num", scope: !4688, file: !2196, line: 104, baseType: !7, size: 32, offset: 96)
!4695 = !DIDerivedType(tag: DW_TAG_member, name: "bit_num", scope: !4688, file: !2196, line: 107, baseType: !7, size: 32, offset: 128)
!4696 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !4688, file: !2196, line: 110, baseType: !1065, size: 64, offset: 192)
!4697 = !DILocation(line: 520, column: 21, scope: !4675)
!4698 = !DILocation(line: 522, column: 21, scope: !4675)
!4699 = !DILocation(line: 522, column: 31, scope: !4675)
!4700 = !DILocation(line: 522, column: 4, scope: !4675)
!4701 = !DILocation(line: 523, column: 20, scope: !4675)
!4702 = !DILocation(line: 523, column: 18, scope: !4675)
!4703 = !DILocation(line: 525, column: 9, scope: !4704)
!4704 = distinct !DILexicalBlock(scope: !4675, file: !3, line: 525, column: 8)
!4705 = !DILocation(line: 525, column: 8, scope: !4675)
!4706 = !DILocation(line: 526, column: 33, scope: !4704)
!4707 = !DILocation(line: 526, column: 6, scope: !4704)
!4708 = !DILocation(line: 526, column: 31, scope: !4704)
!4709 = !DILocation(line: 528, column: 4, scope: !4710)
!4710 = distinct !DILexicalBlock(scope: !4675, file: !3, line: 528, column: 4)
!4711 = !DILocation(line: 528, column: 4, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !4710, file: !3, line: 528, column: 4)
!4713 = !DILocalVariable(name: "rep", scope: !4714, file: !3, line: 530, type: !2268)
!4714 = distinct !DILexicalBlock(scope: !4712, file: !3, line: 529, column: 6)
!4715 = !DILocation(line: 530, column: 39, scope: !4714)
!4716 = !DILocation(line: 533, column: 7, scope: !4714)
!4717 = !DILocation(line: 532, column: 14, scope: !4714)
!4718 = !DILocation(line: 532, column: 12, scope: !4714)
!4719 = !DILocation(line: 534, column: 20, scope: !4714)
!4720 = !DILocation(line: 534, column: 23, scope: !4714)
!4721 = !DILocation(line: 534, column: 29, scope: !4714)
!4722 = !DILocation(line: 534, column: 36, scope: !4714)
!4723 = !DILocation(line: 534, column: 8, scope: !4714)
!4724 = !DILocation(line: 534, column: 13, scope: !4714)
!4725 = !DILocation(line: 534, column: 18, scope: !4714)
!4726 = !DILocation(line: 535, column: 24, scope: !4714)
!4727 = !DILocation(line: 535, column: 8, scope: !4714)
!4728 = !DILocation(line: 535, column: 13, scope: !4714)
!4729 = !DILocation(line: 535, column: 22, scope: !4714)
!4730 = !DILocation(line: 536, column: 23, scope: !4714)
!4731 = !DILocation(line: 536, column: 8, scope: !4714)
!4732 = !DILocation(line: 536, column: 13, scope: !4714)
!4733 = !DILocation(line: 536, column: 21, scope: !4714)
!4734 = !DILocation(line: 538, column: 14, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !4714, file: !3, line: 538, column: 12)
!4736 = !DILocation(line: 538, column: 12, scope: !4714)
!4737 = !DILocation(line: 539, column: 23, scope: !4735)
!4738 = !DILocation(line: 539, column: 21, scope: !4735)
!4739 = !DILocation(line: 539, column: 3, scope: !4735)
!4740 = !DILocation(line: 542, column: 17, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4735, file: !3, line: 541, column: 3)
!4742 = !DILocation(line: 542, column: 5, scope: !4741)
!4743 = !DILocation(line: 542, column: 10, scope: !4741)
!4744 = !DILocation(line: 542, column: 15, scope: !4741)
!4745 = !DILocation(line: 543, column: 25, scope: !4741)
!4746 = !DILocation(line: 543, column: 23, scope: !4741)
!4747 = !DILocation(line: 546, column: 21, scope: !4714)
!4748 = !DILocation(line: 546, column: 24, scope: !4714)
!4749 = !DILocation(line: 546, column: 30, scope: !4714)
!4750 = !DILocation(line: 546, column: 37, scope: !4714)
!4751 = !DILocation(line: 546, column: 43, scope: !4714)
!4752 = !DILocation(line: 546, column: 52, scope: !4714)
!4753 = !DILocation(line: 546, column: 8, scope: !4714)
!4754 = !DILocation(line: 547, column: 12, scope: !4755)
!4755 = distinct !DILexicalBlock(scope: !4714, file: !3, line: 547, column: 12)
!4756 = !DILocation(line: 547, column: 12, scope: !4714)
!4757 = !DILocation(line: 548, column: 19, scope: !4755)
!4758 = !DILocation(line: 548, column: 22, scope: !4755)
!4759 = !DILocation(line: 548, column: 28, scope: !4755)
!4760 = !DILocation(line: 548, column: 35, scope: !4755)
!4761 = !DILocation(line: 548, column: 3, scope: !4755)
!4762 = !DILocation(line: 549, column: 6, scope: !4714)
!4763 = distinct !{!4763, !4709, !4764}
!4764 = !DILocation(line: 549, column: 6, scope: !4710)
!4765 = !DILocation(line: 551, column: 15, scope: !4675)
!4766 = !DILocation(line: 551, column: 13, scope: !4675)
!4767 = !DILocation(line: 552, column: 2, scope: !4675)
!4768 = !DILocation(line: 515, column: 63, scope: !4670)
!4769 = !DILocation(line: 515, column: 7, scope: !4670)
!4770 = distinct !{!4770, !4673, !4771}
!4771 = !DILocation(line: 552, column: 2, scope: !4667)
!4772 = !DILocation(line: 553, column: 7, scope: !4493)
!4773 = !DILocation(line: 554, column: 5, scope: !4493)
!4774 = !DILocation(line: 455, column: 34, scope: !4487)
!4775 = !DILocation(line: 455, column: 3, scope: !4487)
!4776 = distinct !{!4776, !4491, !4777}
!4777 = !DILocation(line: 554, column: 5, scope: !4484)
!4778 = !DILocation(line: 555, column: 10, scope: !4464)
!4779 = !DILocation(line: 555, column: 3, scope: !4464)
!4780 = distinct !DISubprogram(name: "print_node_sched_params", scope: !3, file: !3, line: 410, type: !4781, scopeLine: 411, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4781 = !DISubroutineType(types: !4782)
!4782 = !{null, !2428, !1015, !955}
!4783 = !DILocalVariable(name: "file", arg: 1, scope: !4780, file: !3, line: 410, type: !2428)
!4784 = !DILocation(line: 410, column: 32, scope: !4780)
!4785 = !DILocalVariable(name: "num_nodes", arg: 2, scope: !4780, file: !3, line: 410, type: !1015)
!4786 = !DILocation(line: 410, column: 42, scope: !4780)
!4787 = !DILocalVariable(name: "g", arg: 3, scope: !4780, file: !3, line: 410, type: !955)
!4788 = !DILocation(line: 410, column: 61, scope: !4780)
!4789 = !DILocalVariable(name: "i", scope: !4780, file: !3, line: 412, type: !1015)
!4790 = !DILocation(line: 412, column: 7, scope: !4780)
!4791 = !DILocation(line: 414, column: 9, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 414, column: 7)
!4793 = !DILocation(line: 414, column: 7, scope: !4780)
!4794 = !DILocation(line: 415, column: 5, scope: !4792)
!4795 = !DILocation(line: 416, column: 10, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 416, column: 3)
!4797 = !DILocation(line: 416, column: 8, scope: !4796)
!4798 = !DILocation(line: 416, column: 15, scope: !4799)
!4799 = distinct !DILexicalBlock(scope: !4796, file: !3, line: 416, column: 3)
!4800 = !DILocation(line: 416, column: 19, scope: !4799)
!4801 = !DILocation(line: 416, column: 17, scope: !4799)
!4802 = !DILocation(line: 416, column: 3, scope: !4796)
!4803 = !DILocalVariable(name: "nsp", scope: !4804, file: !3, line: 418, type: !2257)
!4804 = distinct !DILexicalBlock(scope: !4799, file: !3, line: 417, column: 5)
!4805 = !DILocation(line: 418, column: 29, scope: !4804)
!4806 = !DILocation(line: 418, column: 36, scope: !4804)
!4807 = !DILocation(line: 418, column: 54, scope: !4804)
!4808 = !DILocalVariable(name: "reg_move", scope: !4804, file: !3, line: 419, type: !992)
!4809 = !DILocation(line: 419, column: 11, scope: !4804)
!4810 = !DILocation(line: 419, column: 22, scope: !4804)
!4811 = !DILocation(line: 419, column: 27, scope: !4804)
!4812 = !DILocalVariable(name: "j", scope: !4804, file: !3, line: 420, type: !1015)
!4813 = !DILocation(line: 420, column: 11, scope: !4804)
!4814 = !DILocation(line: 422, column: 16, scope: !4804)
!4815 = !DILocation(line: 422, column: 48, scope: !4804)
!4816 = !DILocation(line: 423, column: 10, scope: !4804)
!4817 = !DILocation(line: 422, column: 7, scope: !4804)
!4818 = !DILocation(line: 424, column: 16, scope: !4804)
!4819 = !DILocation(line: 424, column: 39, scope: !4804)
!4820 = !DILocation(line: 424, column: 44, scope: !4804)
!4821 = !DILocation(line: 424, column: 7, scope: !4804)
!4822 = !DILocation(line: 425, column: 16, scope: !4804)
!4823 = !DILocation(line: 425, column: 39, scope: !4804)
!4824 = !DILocation(line: 425, column: 44, scope: !4804)
!4825 = !DILocation(line: 425, column: 7, scope: !4804)
!4826 = !DILocation(line: 426, column: 16, scope: !4804)
!4827 = !DILocation(line: 426, column: 45, scope: !4804)
!4828 = !DILocation(line: 426, column: 50, scope: !4804)
!4829 = !DILocation(line: 426, column: 7, scope: !4804)
!4830 = !DILocation(line: 427, column: 14, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4804, file: !3, line: 427, column: 7)
!4832 = !DILocation(line: 427, column: 12, scope: !4831)
!4833 = !DILocation(line: 427, column: 19, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4831, file: !3, line: 427, column: 7)
!4835 = !DILocation(line: 427, column: 23, scope: !4834)
!4836 = !DILocation(line: 427, column: 28, scope: !4834)
!4837 = !DILocation(line: 427, column: 21, scope: !4834)
!4838 = !DILocation(line: 427, column: 7, scope: !4831)
!4839 = !DILocation(line: 429, column: 13, scope: !4840)
!4840 = distinct !DILexicalBlock(scope: !4834, file: !3, line: 428, column: 2)
!4841 = !DILocation(line: 429, column: 4, scope: !4840)
!4842 = !DILocation(line: 430, column: 22, scope: !4840)
!4843 = !DILocation(line: 430, column: 28, scope: !4840)
!4844 = !DILocation(line: 430, column: 4, scope: !4840)
!4845 = !DILocation(line: 431, column: 15, scope: !4840)
!4846 = !DILocation(line: 431, column: 13, scope: !4840)
!4847 = !DILocation(line: 432, column: 2, scope: !4840)
!4848 = !DILocation(line: 427, column: 41, scope: !4834)
!4849 = !DILocation(line: 427, column: 7, scope: !4834)
!4850 = distinct !{!4850, !4838, !4851}
!4851 = !DILocation(line: 432, column: 2, scope: !4831)
!4852 = !DILocation(line: 433, column: 5, scope: !4804)
!4853 = !DILocation(line: 416, column: 31, scope: !4799)
!4854 = !DILocation(line: 416, column: 3, scope: !4799)
!4855 = distinct !{!4855, !4802, !4856}
!4856 = !DILocation(line: 433, column: 5, scope: !4796)
!4857 = !DILocation(line: 434, column: 1, scope: !4780)
!4858 = distinct !DISubprogram(name: "generate_prolog_epilog", scope: !3, file: !3, line: 702, type: !4859, scopeLine: 704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4859 = !DISubroutineType(types: !4860)
!4860 = !{null, !2218, !1580, !992, !992}
!4861 = !DILocalVariable(name: "ps", arg: 1, scope: !4858, file: !3, line: 702, type: !2218)
!4862 = !DILocation(line: 702, column: 46, scope: !4858)
!4863 = !DILocalVariable(name: "loop", arg: 2, scope: !4858, file: !3, line: 702, type: !1580)
!4864 = !DILocation(line: 702, column: 63, scope: !4858)
!4865 = !DILocalVariable(name: "count_reg", arg: 3, scope: !4858, file: !3, line: 703, type: !992)
!4866 = !DILocation(line: 703, column: 29, scope: !4858)
!4867 = !DILocalVariable(name: "count_init", arg: 4, scope: !4858, file: !3, line: 703, type: !992)
!4868 = !DILocation(line: 703, column: 44, scope: !4858)
!4869 = !DILocalVariable(name: "i", scope: !4858, file: !3, line: 705, type: !1015)
!4870 = !DILocation(line: 705, column: 7, scope: !4858)
!4871 = !DILocalVariable(name: "last_stage", scope: !4858, file: !3, line: 706, type: !1015)
!4872 = !DILocation(line: 706, column: 7, scope: !4858)
!4873 = !DILocation(line: 706, column: 20, scope: !4858)
!4874 = !DILocation(line: 706, column: 40, scope: !4858)
!4875 = !DILocalVariable(name: "e", scope: !4858, file: !3, line: 707, type: !978)
!4876 = !DILocation(line: 707, column: 8, scope: !4858)
!4877 = !DILocation(line: 710, column: 3, scope: !4858)
!4878 = !DILocation(line: 712, column: 8, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 712, column: 7)
!4880 = !DILocation(line: 712, column: 7, scope: !4858)
!4881 = !DILocalVariable(name: "sub_reg", scope: !4882, file: !3, line: 718, type: !992)
!4882 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 713, column: 5)
!4883 = !DILocation(line: 718, column: 11, scope: !4882)
!4884 = !DILocation(line: 720, column: 38, scope: !4882)
!4885 = !DILocation(line: 721, column: 38, scope: !4882)
!4886 = !DILocation(line: 721, column: 49, scope: !4882)
!4887 = !DILocation(line: 722, column: 38, scope: !4882)
!4888 = !DILocation(line: 720, column: 17, scope: !4882)
!4889 = !DILocation(line: 720, column: 15, scope: !4882)
!4890 = !DILocation(line: 723, column: 7, scope: !4882)
!4891 = !DILocation(line: 724, column: 11, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4882, file: !3, line: 724, column: 11)
!4893 = !DILocation(line: 724, column: 30, scope: !4892)
!4894 = !DILocation(line: 724, column: 27, scope: !4892)
!4895 = !DILocation(line: 724, column: 11, scope: !4882)
!4896 = !DILocation(line: 725, column: 25, scope: !4892)
!4897 = !DILocation(line: 725, column: 36, scope: !4892)
!4898 = !DILocation(line: 725, column: 9, scope: !4892)
!4899 = !DILocation(line: 726, column: 5, scope: !4882)
!4900 = !DILocation(line: 728, column: 10, scope: !4901)
!4901 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 728, column: 3)
!4902 = !DILocation(line: 728, column: 8, scope: !4901)
!4903 = !DILocation(line: 728, column: 15, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4901, file: !3, line: 728, column: 3)
!4905 = !DILocation(line: 728, column: 19, scope: !4904)
!4906 = !DILocation(line: 728, column: 17, scope: !4904)
!4907 = !DILocation(line: 728, column: 3, scope: !4901)
!4908 = !DILocation(line: 729, column: 32, scope: !4904)
!4909 = !DILocation(line: 729, column: 39, scope: !4904)
!4910 = !DILocation(line: 729, column: 45, scope: !4904)
!4911 = !DILocation(line: 729, column: 5, scope: !4904)
!4912 = !DILocation(line: 728, column: 32, scope: !4904)
!4913 = !DILocation(line: 728, column: 3, scope: !4904)
!4914 = distinct !{!4914, !4907, !4915}
!4915 = !DILocation(line: 729, column: 54, scope: !4901)
!4916 = !DILocation(line: 732, column: 28, scope: !4858)
!4917 = !DILocation(line: 732, column: 7, scope: !4858)
!4918 = !DILocation(line: 732, column: 5, scope: !4858)
!4919 = !DILocation(line: 733, column: 26, scope: !4858)
!4920 = !DILocation(line: 733, column: 29, scope: !4858)
!4921 = !DILocation(line: 733, column: 3, scope: !4858)
!4922 = !DILocation(line: 735, column: 3, scope: !4858)
!4923 = !DILocation(line: 738, column: 3, scope: !4858)
!4924 = !DILocation(line: 740, column: 10, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 740, column: 3)
!4926 = !DILocation(line: 740, column: 8, scope: !4925)
!4927 = !DILocation(line: 740, column: 15, scope: !4928)
!4928 = distinct !DILexicalBlock(scope: !4925, file: !3, line: 740, column: 3)
!4929 = !DILocation(line: 740, column: 19, scope: !4928)
!4930 = !DILocation(line: 740, column: 17, scope: !4928)
!4931 = !DILocation(line: 740, column: 3, scope: !4925)
!4932 = !DILocation(line: 741, column: 32, scope: !4928)
!4933 = !DILocation(line: 741, column: 36, scope: !4928)
!4934 = !DILocation(line: 741, column: 38, scope: !4928)
!4935 = !DILocation(line: 741, column: 43, scope: !4928)
!4936 = !DILocation(line: 741, column: 58, scope: !4928)
!4937 = !DILocation(line: 741, column: 5, scope: !4928)
!4938 = !DILocation(line: 740, column: 32, scope: !4928)
!4939 = !DILocation(line: 740, column: 3, scope: !4928)
!4940 = distinct !{!4940, !4931, !4941}
!4941 = !DILocation(line: 741, column: 67, scope: !4925)
!4942 = !DILocation(line: 744, column: 3, scope: !4858)
!4943 = !DILocation(line: 745, column: 20, scope: !4858)
!4944 = !DILocation(line: 745, column: 7, scope: !4858)
!4945 = !DILocation(line: 745, column: 5, scope: !4858)
!4946 = !DILocation(line: 746, column: 26, scope: !4858)
!4947 = !DILocation(line: 746, column: 29, scope: !4858)
!4948 = !DILocation(line: 746, column: 3, scope: !4858)
!4949 = !DILocation(line: 747, column: 3, scope: !4858)
!4950 = !DILocation(line: 748, column: 1, scope: !4858)
!4951 = distinct !DISubprogram(name: "free_undo_replace_buff", scope: !3, file: !3, line: 560, type: !4952, scopeLine: 561, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4952 = !DISubroutineType(types: !4953)
!4953 = !{null, !2268}
!4954 = !DILocalVariable(name: "reg_move_replaces", arg: 1, scope: !4951, file: !3, line: 560, type: !2268)
!4955 = !DILocation(line: 560, column: 56, scope: !4951)
!4956 = !DILocation(line: 563, column: 3, scope: !4951)
!4957 = !DILocation(line: 563, column: 10, scope: !4951)
!4958 = !DILocalVariable(name: "rep", scope: !4959, file: !3, line: 565, type: !2268)
!4959 = distinct !DILexicalBlock(scope: !4951, file: !3, line: 564, column: 5)
!4960 = !DILocation(line: 565, column: 38, scope: !4959)
!4961 = !DILocation(line: 565, column: 44, scope: !4959)
!4962 = !DILocation(line: 567, column: 27, scope: !4959)
!4963 = !DILocation(line: 567, column: 46, scope: !4959)
!4964 = !DILocation(line: 567, column: 25, scope: !4959)
!4965 = !DILocation(line: 568, column: 13, scope: !4959)
!4966 = !DILocation(line: 568, column: 7, scope: !4959)
!4967 = distinct !{!4967, !4956, !4968}
!4968 = !DILocation(line: 569, column: 5, scope: !4951)
!4969 = !DILocation(line: 570, column: 1, scope: !4951)
!4970 = distinct !DISubprogram(name: "free_partial_schedule", scope: !3, file: !3, line: 2466, type: !4146, scopeLine: 2467, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4971 = !DILocalVariable(name: "ps", arg: 1, scope: !4970, file: !3, line: 2466, type: !2218)
!4972 = !DILocation(line: 2466, column: 45, scope: !4970)
!4973 = !DILocation(line: 2468, column: 8, scope: !4974)
!4974 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 2468, column: 7)
!4975 = !DILocation(line: 2468, column: 7, scope: !4970)
!4976 = !DILocation(line: 2469, column: 5, scope: !4974)
!4977 = !DILocation(line: 2470, column: 18, scope: !4970)
!4978 = !DILocation(line: 2470, column: 3, scope: !4970)
!4979 = !DILocation(line: 2471, column: 9, scope: !4970)
!4980 = !DILocation(line: 2471, column: 13, scope: !4970)
!4981 = !DILocation(line: 2471, column: 3, scope: !4970)
!4982 = !DILocation(line: 2472, column: 9, scope: !4970)
!4983 = !DILocation(line: 2472, column: 3, scope: !4970)
!4984 = !DILocation(line: 2473, column: 1, scope: !4970)
!4985 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !142, file: !142, line: 85, type: !4986, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4986 = !DISubroutineType(types: !4987)
!4987 = !{!7, !4988}
!4988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4989, size: 64)
!4989 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1572)
!4990 = !DILocalVariable(name: "vec_", arg: 1, scope: !4985, file: !142, line: 85, type: !4988)
!4991 = !DILocation(line: 85, column: 1, scope: !4985)
!4992 = distinct !DISubprogram(name: "compute_jump_reg_dependencies", scope: !3, file: !3, line: 247, type: !2303, scopeLine: 251, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!4993 = !DILocalVariable(name: "insn", arg: 1, scope: !4992, file: !3, line: 247, type: !992)
!4994 = !DILocation(line: 247, column: 36, scope: !4992)
!4995 = !DILocalVariable(name: "cond_exec", arg: 2, scope: !4992, file: !3, line: 248, type: !2305)
!4996 = !DILocation(line: 248, column: 18, scope: !4992)
!4997 = !DILocalVariable(name: "used", arg: 3, scope: !4992, file: !3, line: 249, type: !2305)
!4998 = !DILocation(line: 249, column: 18, scope: !4992)
!4999 = !DILocalVariable(name: "set", arg: 4, scope: !4992, file: !3, line: 250, type: !2305)
!5000 = !DILocation(line: 250, column: 18, scope: !4992)
!5001 = !DILocation(line: 252, column: 1, scope: !4992)
!5002 = !DILocalVariable(name: "insn", arg: 1, scope: !2388, file: !3, line: 238, type: !2359)
!5003 = !DILocation(line: 238, column: 27, scope: !2388)
!5004 = !DILocalVariable(name: "aligned", arg: 2, scope: !2388, file: !3, line: 238, type: !1015)
!5005 = !DILocation(line: 238, column: 37, scope: !2388)
!5006 = !DILocation(line: 242, column: 25, scope: !2388)
!5007 = !DILocation(line: 242, column: 3, scope: !2388)
!5008 = !DILocation(line: 243, column: 3, scope: !2388)
!5009 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !1515, file: !1515, line: 32, type: !5010, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5010 = !DISubroutineType(types: !5011)
!5011 = !{!2238, !1015}
!5012 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5009, file: !1515, line: 32, type: !1015)
!5013 = !DILocation(line: 32, column: 1, scope: !5009)
!5014 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !142, file: !142, line: 85, type: !5015, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5015 = !DISubroutineType(types: !5016)
!5016 = !{!1015, !4988, !7, !3241}
!5017 = !DILocalVariable(name: "vec_", arg: 1, scope: !5014, file: !142, line: 85, type: !4988)
!5018 = !DILocation(line: 85, column: 1, scope: !5014)
!5019 = !DILocalVariable(name: "ix_", arg: 2, scope: !5014, file: !142, line: 85, type: !7)
!5020 = !DILocalVariable(name: "ptr", arg: 3, scope: !5014, file: !142, line: 85, type: !3241)
!5021 = !DILocation(line: 85, column: 1, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !5014, file: !142, line: 85, column: 1)
!5023 = !DILocation(line: 85, column: 1, scope: !5024)
!5024 = distinct !DILexicalBlock(scope: !5022, file: !142, line: 85, column: 1)
!5025 = !DILocation(line: 85, column: 1, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5022, file: !142, line: 85, column: 1)
!5027 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !1515, file: !1515, line: 31, type: !5028, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5028 = !DISubroutineType(types: !5029)
!5029 = !{!2217, !5030, !1015}
!5030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2243, size: 64)
!5031 = !DILocalVariable(name: "vec_", arg: 1, scope: !5027, file: !1515, line: 31, type: !5030)
!5032 = !DILocation(line: 31, column: 1, scope: !5027)
!5033 = !DILocalVariable(name: "obj_", arg: 2, scope: !5027, file: !1515, line: 31, type: !1015)
!5034 = !DILocalVariable(name: "slot_", scope: !5027, file: !1515, line: 31, type: !2217)
!5035 = distinct !DISubprogram(name: "loop_outer", scope: !142, file: !142, line: 434, type: !5036, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5036 = !DISubroutineType(types: !5037)
!5037 = !{!1580, !5038}
!5038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5039, size: 64)
!5039 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1581)
!5040 = !DILocalVariable(name: "loop", arg: 1, scope: !5035, file: !142, line: 434, type: !5038)
!5041 = !DILocation(line: 434, column: 32, scope: !5035)
!5042 = !DILocalVariable(name: "n", scope: !5035, file: !142, line: 436, type: !7)
!5043 = !DILocation(line: 436, column: 12, scope: !5035)
!5044 = !DILocation(line: 436, column: 16, scope: !5035)
!5045 = !DILocation(line: 438, column: 7, scope: !5046)
!5046 = distinct !DILexicalBlock(scope: !5035, file: !142, line: 438, column: 7)
!5047 = !DILocation(line: 438, column: 9, scope: !5046)
!5048 = !DILocation(line: 438, column: 7, scope: !5035)
!5049 = !DILocation(line: 439, column: 5, scope: !5046)
!5050 = !DILocation(line: 441, column: 10, scope: !5035)
!5051 = !DILocation(line: 441, column: 3, scope: !5035)
!5052 = !DILocation(line: 442, column: 1, scope: !5035)
!5053 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !142, file: !142, line: 85, type: !5054, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5054 = !DISubroutineType(types: !5055)
!5055 = !{!1579, !4988, !7}
!5056 = !DILocalVariable(name: "vec_", arg: 1, scope: !5053, file: !142, line: 85, type: !4988)
!5057 = !DILocation(line: 85, column: 1, scope: !5053)
!5058 = !DILocalVariable(name: "ix_", arg: 2, scope: !5053, file: !142, line: 85, type: !7)
!5059 = !DILocation(line: 0, scope: !5053)
!5060 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !155, file: !155, line: 150, type: !5061, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5061 = !DISubroutineType(types: !5062)
!5062 = !{!7, !5063}
!5063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5064, size: 64)
!5064 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !971)
!5065 = !DILocalVariable(name: "vec_", arg: 1, scope: !5060, file: !155, line: 150, type: !5063)
!5066 = !DILocation(line: 150, column: 1, scope: !5060)
!5067 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !1515, file: !1515, line: 31, type: !5068, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5068 = !DISubroutineType(types: !5069)
!5069 = !{!1015, !5070, !7, !2217}
!5070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5071, size: 64)
!5071 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2243)
!5072 = !DILocalVariable(name: "vec_", arg: 1, scope: !5067, file: !1515, line: 31, type: !5070)
!5073 = !DILocation(line: 31, column: 1, scope: !5067)
!5074 = !DILocalVariable(name: "ix_", arg: 2, scope: !5067, file: !1515, line: 31, type: !7)
!5075 = !DILocalVariable(name: "ptr", arg: 3, scope: !5067, file: !1515, line: 31, type: !2217)
!5076 = !DILocation(line: 31, column: 1, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !5067, file: !1515, line: 31, column: 1)
!5078 = !DILocation(line: 31, column: 1, scope: !5079)
!5079 = distinct !DILexicalBlock(scope: !5077, file: !1515, line: 31, column: 1)
!5080 = !DILocation(line: 31, column: 1, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !5077, file: !1515, line: 31, column: 1)
!5082 = distinct !DISubprogram(name: "get_loop", scope: !142, file: !142, line: 417, type: !5083, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5083 = !DISubroutineType(types: !5084)
!5084 = !{!1580, !7}
!5085 = !DILocalVariable(name: "num", arg: 1, scope: !5082, file: !142, line: 417, type: !7)
!5086 = !DILocation(line: 417, column: 20, scope: !5082)
!5087 = !DILocation(line: 419, column: 10, scope: !5082)
!5088 = !DILocation(line: 419, column: 3, scope: !5082)
!5089 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !1515, file: !1515, line: 32, type: !5090, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5090 = !DISubroutineType(types: !5091)
!5091 = !{null, !5092}
!5092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2238, size: 64)
!5093 = !DILocalVariable(name: "vec_", arg: 1, scope: !5089, file: !1515, line: 32, type: !5092)
!5094 = !DILocation(line: 32, column: 1, scope: !5089)
!5095 = !DILocation(line: 32, column: 1, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5089, file: !1515, line: 32, column: 1)
!5097 = distinct !DISubprogram(name: "calculate_order_params", scope: !3, file: !3, line: 2175, type: !5098, scopeLine: 2176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5098 = !DISubroutineType(types: !5099)
!5099 = !{!2256, !955, !1015, !2217}
!5100 = !DILocalVariable(name: "g", arg: 1, scope: !5097, file: !3, line: 2175, type: !955)
!5101 = !DILocation(line: 2175, column: 33, scope: !5097)
!5102 = !DILocalVariable(name: "mii", arg: 2, scope: !5097, file: !3, line: 2175, type: !1015)
!5103 = !DILocation(line: 2175, column: 40, scope: !5097)
!5104 = !DILocalVariable(name: "pmax_asap", arg: 3, scope: !5097, file: !3, line: 2175, type: !2217)
!5105 = !DILocation(line: 2175, column: 67, scope: !5097)
!5106 = !DILocalVariable(name: "u", scope: !5097, file: !3, line: 2177, type: !1015)
!5107 = !DILocation(line: 2177, column: 7, scope: !5097)
!5108 = !DILocalVariable(name: "max_asap", scope: !5097, file: !3, line: 2178, type: !1015)
!5109 = !DILocation(line: 2178, column: 7, scope: !5097)
!5110 = !DILocalVariable(name: "num_nodes", scope: !5097, file: !3, line: 2179, type: !1015)
!5111 = !DILocation(line: 2179, column: 7, scope: !5097)
!5112 = !DILocation(line: 2179, column: 19, scope: !5097)
!5113 = !DILocation(line: 2179, column: 22, scope: !5097)
!5114 = !DILocalVariable(name: "e", scope: !5097, file: !3, line: 2180, type: !2174)
!5115 = !DILocation(line: 2180, column: 16, scope: !5097)
!5116 = !DILocalVariable(name: "node_order_params_arr", scope: !5097, file: !3, line: 2182, type: !2256)
!5117 = !DILocation(line: 2182, column: 8, scope: !5097)
!5118 = !DILocation(line: 2185, column: 43, scope: !5097)
!5119 = !DILocation(line: 2185, column: 34, scope: !5097)
!5120 = !DILocation(line: 2185, column: 27, scope: !5097)
!5121 = !DILocation(line: 2185, column: 25, scope: !5097)
!5122 = !DILocation(line: 2189, column: 10, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5097, file: !3, line: 2189, column: 3)
!5124 = !DILocation(line: 2189, column: 8, scope: !5123)
!5125 = !DILocation(line: 2189, column: 15, scope: !5126)
!5126 = distinct !DILexicalBlock(scope: !5123, file: !3, line: 2189, column: 3)
!5127 = !DILocation(line: 2189, column: 19, scope: !5126)
!5128 = !DILocation(line: 2189, column: 17, scope: !5126)
!5129 = !DILocation(line: 2189, column: 3, scope: !5123)
!5130 = !DILocation(line: 2190, column: 29, scope: !5126)
!5131 = !DILocation(line: 2190, column: 51, scope: !5126)
!5132 = !DILocation(line: 2190, column: 28, scope: !5126)
!5133 = !DILocation(line: 2190, column: 5, scope: !5126)
!5134 = !DILocation(line: 2190, column: 8, scope: !5126)
!5135 = !DILocation(line: 2190, column: 14, scope: !5126)
!5136 = !DILocation(line: 2190, column: 17, scope: !5126)
!5137 = !DILocation(line: 2190, column: 21, scope: !5126)
!5138 = !DILocation(line: 2190, column: 26, scope: !5126)
!5139 = !DILocation(line: 2189, column: 31, scope: !5126)
!5140 = !DILocation(line: 2189, column: 3, scope: !5126)
!5141 = distinct !{!5141, !5129, !5142}
!5142 = !DILocation(line: 2190, column: 52, scope: !5123)
!5143 = !DILocation(line: 2198, column: 12, scope: !5097)
!5144 = !DILocation(line: 2199, column: 10, scope: !5145)
!5145 = distinct !DILexicalBlock(scope: !5097, file: !3, line: 2199, column: 3)
!5146 = !DILocation(line: 2199, column: 8, scope: !5145)
!5147 = !DILocation(line: 2199, column: 15, scope: !5148)
!5148 = distinct !DILexicalBlock(scope: !5145, file: !3, line: 2199, column: 3)
!5149 = !DILocation(line: 2199, column: 19, scope: !5148)
!5150 = !DILocation(line: 2199, column: 17, scope: !5148)
!5151 = !DILocation(line: 2199, column: 3, scope: !5145)
!5152 = !DILocalVariable(name: "u_node", scope: !5153, file: !3, line: 2201, type: !2166)
!5153 = distinct !DILexicalBlock(scope: !5148, file: !3, line: 2200, column: 5)
!5154 = !DILocation(line: 2201, column: 20, scope: !5153)
!5155 = !DILocation(line: 2201, column: 30, scope: !5153)
!5156 = !DILocation(line: 2201, column: 33, scope: !5153)
!5157 = !DILocation(line: 2201, column: 39, scope: !5153)
!5158 = !DILocation(line: 2203, column: 7, scope: !5153)
!5159 = !DILocation(line: 2203, column: 21, scope: !5153)
!5160 = !DILocation(line: 2204, column: 16, scope: !5161)
!5161 = distinct !DILexicalBlock(scope: !5153, file: !3, line: 2204, column: 7)
!5162 = !DILocation(line: 2204, column: 24, scope: !5161)
!5163 = !DILocation(line: 2204, column: 14, scope: !5161)
!5164 = !DILocation(line: 2204, column: 12, scope: !5161)
!5165 = !DILocation(line: 2204, column: 28, scope: !5166)
!5166 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 2204, column: 7)
!5167 = !DILocation(line: 2204, column: 7, scope: !5161)
!5168 = !DILocation(line: 2205, column: 6, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5166, file: !3, line: 2205, column: 6)
!5170 = !DILocation(line: 2205, column: 9, scope: !5169)
!5171 = !DILocation(line: 2205, column: 18, scope: !5169)
!5172 = !DILocation(line: 2205, column: 6, scope: !5166)
!5173 = !DILocation(line: 2206, column: 20, scope: !5169)
!5174 = !DILocation(line: 2206, column: 4, scope: !5169)
!5175 = !DILocation(line: 2206, column: 18, scope: !5169)
!5176 = !DILocation(line: 2205, column: 21, scope: !5169)
!5177 = !DILocation(line: 2204, column: 35, scope: !5166)
!5178 = !DILocation(line: 2204, column: 38, scope: !5166)
!5179 = !DILocation(line: 2204, column: 33, scope: !5166)
!5180 = !DILocation(line: 2204, column: 7, scope: !5166)
!5181 = distinct !{!5181, !5167, !5182}
!5182 = !DILocation(line: 2206, column: 20, scope: !5161)
!5183 = !DILocation(line: 2208, column: 18, scope: !5153)
!5184 = !DILocation(line: 2208, column: 16, scope: !5153)
!5185 = !DILocation(line: 2209, column: 5, scope: !5153)
!5186 = !DILocation(line: 2199, column: 31, scope: !5148)
!5187 = !DILocation(line: 2199, column: 3, scope: !5148)
!5188 = distinct !{!5188, !5151, !5189}
!5189 = !DILocation(line: 2209, column: 5, scope: !5145)
!5190 = !DILocation(line: 2211, column: 12, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !5097, file: !3, line: 2211, column: 3)
!5192 = !DILocation(line: 2211, column: 22, scope: !5191)
!5193 = !DILocation(line: 2211, column: 10, scope: !5191)
!5194 = !DILocation(line: 2211, column: 8, scope: !5191)
!5195 = !DILocation(line: 2211, column: 27, scope: !5196)
!5196 = distinct !DILexicalBlock(scope: !5191, file: !3, line: 2211, column: 3)
!5197 = !DILocation(line: 2211, column: 29, scope: !5196)
!5198 = !DILocation(line: 2211, column: 3, scope: !5191)
!5199 = !DILocalVariable(name: "u_node", scope: !5200, file: !3, line: 2213, type: !2166)
!5200 = distinct !DILexicalBlock(scope: !5196, file: !3, line: 2212, column: 5)
!5201 = !DILocation(line: 2213, column: 20, scope: !5200)
!5202 = !DILocation(line: 2213, column: 30, scope: !5200)
!5203 = !DILocation(line: 2213, column: 33, scope: !5200)
!5204 = !DILocation(line: 2213, column: 39, scope: !5200)
!5205 = !DILocation(line: 2215, column: 23, scope: !5200)
!5206 = !DILocation(line: 2215, column: 7, scope: !5200)
!5207 = !DILocation(line: 2215, column: 21, scope: !5200)
!5208 = !DILocation(line: 2216, column: 7, scope: !5200)
!5209 = !DILocation(line: 2216, column: 23, scope: !5200)
!5210 = !DILocation(line: 2217, column: 16, scope: !5211)
!5211 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 2217, column: 7)
!5212 = !DILocation(line: 2217, column: 24, scope: !5211)
!5213 = !DILocation(line: 2217, column: 14, scope: !5211)
!5214 = !DILocation(line: 2217, column: 12, scope: !5211)
!5215 = !DILocation(line: 2217, column: 29, scope: !5216)
!5216 = distinct !DILexicalBlock(scope: !5211, file: !3, line: 2217, column: 7)
!5217 = !DILocation(line: 2217, column: 7, scope: !5211)
!5218 = !DILocation(line: 2218, column: 6, scope: !5219)
!5219 = distinct !DILexicalBlock(scope: !5216, file: !3, line: 2218, column: 6)
!5220 = !DILocation(line: 2218, column: 9, scope: !5219)
!5221 = !DILocation(line: 2218, column: 18, scope: !5219)
!5222 = !DILocation(line: 2218, column: 6, scope: !5216)
!5223 = !DILocation(line: 2220, column: 22, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5219, file: !3, line: 2219, column: 4)
!5225 = !DILocation(line: 2220, column: 6, scope: !5224)
!5226 = !DILocation(line: 2220, column: 20, scope: !5224)
!5227 = !DILocation(line: 2222, column: 24, scope: !5224)
!5228 = !DILocation(line: 2222, column: 6, scope: !5224)
!5229 = !DILocation(line: 2222, column: 22, scope: !5224)
!5230 = !DILocation(line: 2224, column: 4, scope: !5224)
!5231 = !DILocation(line: 2218, column: 21, scope: !5219)
!5232 = !DILocation(line: 2217, column: 36, scope: !5216)
!5233 = !DILocation(line: 2217, column: 39, scope: !5216)
!5234 = !DILocation(line: 2217, column: 34, scope: !5216)
!5235 = !DILocation(line: 2217, column: 7, scope: !5216)
!5236 = distinct !{!5236, !5217, !5237}
!5237 = !DILocation(line: 2224, column: 4, scope: !5211)
!5238 = !DILocation(line: 2225, column: 5, scope: !5200)
!5239 = !DILocation(line: 2211, column: 36, scope: !5196)
!5240 = !DILocation(line: 2211, column: 3, scope: !5196)
!5241 = distinct !{!5241, !5198, !5242}
!5242 = !DILocation(line: 2225, column: 5, scope: !5191)
!5243 = !DILocation(line: 2226, column: 7, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5097, file: !3, line: 2226, column: 7)
!5245 = !DILocation(line: 2226, column: 7, scope: !5097)
!5246 = !DILocation(line: 2228, column: 14, scope: !5247)
!5247 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 2227, column: 3)
!5248 = !DILocation(line: 2228, column: 5, scope: !5247)
!5249 = !DILocation(line: 2229, column: 12, scope: !5250)
!5250 = distinct !DILexicalBlock(scope: !5247, file: !3, line: 2229, column: 5)
!5251 = !DILocation(line: 2229, column: 10, scope: !5250)
!5252 = !DILocation(line: 2229, column: 17, scope: !5253)
!5253 = distinct !DILexicalBlock(scope: !5250, file: !3, line: 2229, column: 5)
!5254 = !DILocation(line: 2229, column: 21, scope: !5253)
!5255 = !DILocation(line: 2229, column: 19, scope: !5253)
!5256 = !DILocation(line: 2229, column: 5, scope: !5250)
!5257 = !DILocalVariable(name: "u_node", scope: !5258, file: !3, line: 2231, type: !2166)
!5258 = distinct !DILexicalBlock(scope: !5253, file: !3, line: 2230, column: 7)
!5259 = !DILocation(line: 2231, column: 22, scope: !5258)
!5260 = !DILocation(line: 2231, column: 32, scope: !5258)
!5261 = !DILocation(line: 2231, column: 35, scope: !5258)
!5262 = !DILocation(line: 2231, column: 41, scope: !5258)
!5263 = !DILocation(line: 2233, column: 18, scope: !5258)
!5264 = !DILocation(line: 2233, column: 74, scope: !5258)
!5265 = !DILocation(line: 2234, column: 18, scope: !5258)
!5266 = !DILocation(line: 2234, column: 33, scope: !5258)
!5267 = !DILocation(line: 2234, column: 48, scope: !5258)
!5268 = !DILocation(line: 2233, column: 9, scope: !5258)
!5269 = !DILocation(line: 2235, column: 7, scope: !5258)
!5270 = !DILocation(line: 2229, column: 33, scope: !5253)
!5271 = !DILocation(line: 2229, column: 5, scope: !5253)
!5272 = distinct !{!5272, !5256, !5273}
!5273 = !DILocation(line: 2235, column: 7, scope: !5250)
!5274 = !DILocation(line: 2236, column: 3, scope: !5247)
!5275 = !DILocation(line: 2238, column: 16, scope: !5097)
!5276 = !DILocation(line: 2238, column: 4, scope: !5097)
!5277 = !DILocation(line: 2238, column: 14, scope: !5097)
!5278 = !DILocation(line: 2239, column: 10, scope: !5097)
!5279 = !DILocation(line: 2239, column: 3, scope: !5097)
!5280 = distinct !DISubprogram(name: "order_nodes_of_sccs", scope: !3, file: !3, line: 2126, type: !5281, scopeLine: 2127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5281 = !DISubroutineType(types: !5282)
!5282 = !{null, !3686, !2217}
!5283 = !DILocalVariable(name: "all_sccs", arg: 1, scope: !5280, file: !3, line: 2126, type: !3686)
!5284 = !DILocation(line: 2126, column: 39, scope: !5280)
!5285 = !DILocalVariable(name: "node_order", arg: 2, scope: !5280, file: !3, line: 2126, type: !2217)
!5286 = !DILocation(line: 2126, column: 55, scope: !5280)
!5287 = !DILocalVariable(name: "i", scope: !5280, file: !3, line: 2128, type: !1015)
!5288 = !DILocation(line: 2128, column: 7, scope: !5280)
!5289 = !DILocalVariable(name: "pos", scope: !5280, file: !3, line: 2128, type: !1015)
!5290 = !DILocation(line: 2128, column: 10, scope: !5280)
!5291 = !DILocalVariable(name: "g", scope: !5280, file: !3, line: 2129, type: !955)
!5292 = !DILocation(line: 2129, column: 11, scope: !5280)
!5293 = !DILocation(line: 2129, column: 15, scope: !5280)
!5294 = !DILocation(line: 2129, column: 25, scope: !5280)
!5295 = !DILocalVariable(name: "num_nodes", scope: !5280, file: !3, line: 2130, type: !1015)
!5296 = !DILocation(line: 2130, column: 7, scope: !5280)
!5297 = !DILocation(line: 2130, column: 19, scope: !5280)
!5298 = !DILocation(line: 2130, column: 22, scope: !5280)
!5299 = !DILocalVariable(name: "prev_sccs", scope: !5280, file: !3, line: 2131, type: !2195)
!5300 = !DILocation(line: 2131, column: 11, scope: !5280)
!5301 = !DILocation(line: 2131, column: 38, scope: !5280)
!5302 = !DILocation(line: 2131, column: 23, scope: !5280)
!5303 = !DILocalVariable(name: "on_path", scope: !5280, file: !3, line: 2132, type: !2195)
!5304 = !DILocation(line: 2132, column: 11, scope: !5280)
!5305 = !DILocation(line: 2132, column: 36, scope: !5280)
!5306 = !DILocation(line: 2132, column: 21, scope: !5280)
!5307 = !DILocalVariable(name: "tmp", scope: !5280, file: !3, line: 2133, type: !2195)
!5308 = !DILocation(line: 2133, column: 11, scope: !5280)
!5309 = !DILocation(line: 2133, column: 32, scope: !5280)
!5310 = !DILocation(line: 2133, column: 17, scope: !5280)
!5311 = !DILocalVariable(name: "ones", scope: !5280, file: !3, line: 2134, type: !2195)
!5312 = !DILocation(line: 2134, column: 11, scope: !5280)
!5313 = !DILocation(line: 2134, column: 33, scope: !5280)
!5314 = !DILocation(line: 2134, column: 18, scope: !5280)
!5315 = !DILocation(line: 2136, column: 17, scope: !5280)
!5316 = !DILocation(line: 2136, column: 3, scope: !5280)
!5317 = !DILocation(line: 2137, column: 17, scope: !5280)
!5318 = !DILocation(line: 2137, column: 3, scope: !5280)
!5319 = !DILocation(line: 2141, column: 10, scope: !5320)
!5320 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 2141, column: 3)
!5321 = !DILocation(line: 2141, column: 8, scope: !5320)
!5322 = !DILocation(line: 2141, column: 15, scope: !5323)
!5323 = distinct !DILexicalBlock(scope: !5320, file: !3, line: 2141, column: 3)
!5324 = !DILocation(line: 2141, column: 19, scope: !5323)
!5325 = !DILocation(line: 2141, column: 29, scope: !5323)
!5326 = !DILocation(line: 2141, column: 17, scope: !5323)
!5327 = !DILocation(line: 2141, column: 3, scope: !5320)
!5328 = !DILocalVariable(name: "scc", scope: !5329, file: !3, line: 2143, type: !3692)
!5329 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 2142, column: 5)
!5330 = !DILocation(line: 2143, column: 19, scope: !5329)
!5331 = !DILocation(line: 2143, column: 25, scope: !5329)
!5332 = !DILocation(line: 2143, column: 35, scope: !5329)
!5333 = !DILocation(line: 2143, column: 40, scope: !5329)
!5334 = !DILocation(line: 2146, column: 28, scope: !5329)
!5335 = !DILocation(line: 2146, column: 37, scope: !5329)
!5336 = !DILocation(line: 2146, column: 40, scope: !5329)
!5337 = !DILocation(line: 2146, column: 51, scope: !5329)
!5338 = !DILocation(line: 2146, column: 56, scope: !5329)
!5339 = !DILocation(line: 2146, column: 7, scope: !5329)
!5340 = !DILocation(line: 2147, column: 23, scope: !5329)
!5341 = !DILocation(line: 2147, column: 28, scope: !5329)
!5342 = !DILocation(line: 2147, column: 33, scope: !5329)
!5343 = !DILocation(line: 2147, column: 40, scope: !5329)
!5344 = !DILocation(line: 2147, column: 7, scope: !5329)
!5345 = !DILocation(line: 2150, column: 28, scope: !5329)
!5346 = !DILocation(line: 2150, column: 37, scope: !5329)
!5347 = !DILocation(line: 2150, column: 40, scope: !5329)
!5348 = !DILocation(line: 2150, column: 45, scope: !5329)
!5349 = !DILocation(line: 2150, column: 52, scope: !5329)
!5350 = !DILocation(line: 2150, column: 7, scope: !5329)
!5351 = !DILocation(line: 2151, column: 23, scope: !5329)
!5352 = !DILocation(line: 2151, column: 28, scope: !5329)
!5353 = !DILocation(line: 2151, column: 33, scope: !5329)
!5354 = !DILocation(line: 2151, column: 7, scope: !5329)
!5355 = !DILocation(line: 2154, column: 27, scope: !5329)
!5356 = !DILocation(line: 2154, column: 32, scope: !5329)
!5357 = !DILocation(line: 2154, column: 37, scope: !5329)
!5358 = !DILocation(line: 2154, column: 7, scope: !5329)
!5359 = !DILocation(line: 2156, column: 33, scope: !5329)
!5360 = !DILocation(line: 2156, column: 36, scope: !5329)
!5361 = !DILocation(line: 2156, column: 47, scope: !5329)
!5362 = !DILocation(line: 2156, column: 52, scope: !5329)
!5363 = !DILocation(line: 2156, column: 64, scope: !5329)
!5364 = !DILocation(line: 2156, column: 13, scope: !5329)
!5365 = !DILocation(line: 2156, column: 11, scope: !5329)
!5366 = !DILocation(line: 2158, column: 5, scope: !5329)
!5367 = !DILocation(line: 2141, column: 40, scope: !5323)
!5368 = !DILocation(line: 2141, column: 3, scope: !5323)
!5369 = distinct !{!5369, !5327, !5370}
!5370 = !DILocation(line: 2158, column: 5, scope: !5320)
!5371 = !DILocation(line: 2162, column: 3, scope: !5280)
!5372 = !DILocation(line: 2162, column: 10, scope: !5280)
!5373 = !DILocation(line: 2162, column: 16, scope: !5280)
!5374 = !DILocation(line: 2162, column: 19, scope: !5280)
!5375 = !DILocation(line: 2162, column: 14, scope: !5280)
!5376 = !DILocation(line: 2164, column: 27, scope: !5377)
!5377 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 2163, column: 5)
!5378 = !DILocation(line: 2164, column: 32, scope: !5377)
!5379 = !DILocation(line: 2164, column: 38, scope: !5377)
!5380 = !DILocation(line: 2164, column: 7, scope: !5377)
!5381 = !DILocation(line: 2165, column: 33, scope: !5377)
!5382 = !DILocation(line: 2165, column: 36, scope: !5377)
!5383 = !DILocation(line: 2165, column: 47, scope: !5377)
!5384 = !DILocation(line: 2165, column: 52, scope: !5377)
!5385 = !DILocation(line: 2165, column: 64, scope: !5377)
!5386 = !DILocation(line: 2165, column: 13, scope: !5377)
!5387 = !DILocation(line: 2165, column: 11, scope: !5377)
!5388 = distinct !{!5388, !5371, !5389}
!5389 = !DILocation(line: 2166, column: 5, scope: !5280)
!5390 = !DILocation(line: 2167, column: 3, scope: !5280)
!5391 = !DILocation(line: 2168, column: 3, scope: !5280)
!5392 = !DILocation(line: 2169, column: 3, scope: !5280)
!5393 = !DILocation(line: 2170, column: 3, scope: !5280)
!5394 = !DILocation(line: 2171, column: 1, scope: !5280)
!5395 = distinct !DISubprogram(name: "check_nodes_order", scope: !3, file: !3, line: 2063, type: !5396, scopeLine: 2064, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5396 = !DISubroutineType(types: !5397)
!5397 = !{null, !2217, !1015}
!5398 = !DILocalVariable(name: "node_order", arg: 1, scope: !5395, file: !3, line: 2063, type: !2217)
!5399 = !DILocation(line: 2063, column: 25, scope: !5395)
!5400 = !DILocalVariable(name: "num_nodes", arg: 2, scope: !5395, file: !3, line: 2063, type: !1015)
!5401 = !DILocation(line: 2063, column: 41, scope: !5395)
!5402 = !DILocalVariable(name: "i", scope: !5395, file: !3, line: 2065, type: !1015)
!5403 = !DILocation(line: 2065, column: 7, scope: !5395)
!5404 = !DILocalVariable(name: "tmp", scope: !5395, file: !3, line: 2066, type: !2195)
!5405 = !DILocation(line: 2066, column: 11, scope: !5395)
!5406 = !DILocation(line: 2066, column: 32, scope: !5395)
!5407 = !DILocation(line: 2066, column: 17, scope: !5395)
!5408 = !DILocation(line: 2068, column: 17, scope: !5395)
!5409 = !DILocation(line: 2068, column: 3, scope: !5395)
!5410 = !DILocation(line: 2070, column: 7, scope: !5411)
!5411 = distinct !DILexicalBlock(scope: !5395, file: !3, line: 2070, column: 7)
!5412 = !DILocation(line: 2070, column: 7, scope: !5395)
!5413 = !DILocation(line: 2071, column: 14, scope: !5411)
!5414 = !DILocation(line: 2071, column: 5, scope: !5411)
!5415 = !DILocation(line: 2073, column: 10, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5395, file: !3, line: 2073, column: 3)
!5417 = !DILocation(line: 2073, column: 8, scope: !5416)
!5418 = !DILocation(line: 2073, column: 15, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5416, file: !3, line: 2073, column: 3)
!5420 = !DILocation(line: 2073, column: 19, scope: !5419)
!5421 = !DILocation(line: 2073, column: 17, scope: !5419)
!5422 = !DILocation(line: 2073, column: 3, scope: !5416)
!5423 = !DILocalVariable(name: "u", scope: !5424, file: !3, line: 2075, type: !1015)
!5424 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 2074, column: 5)
!5425 = !DILocation(line: 2075, column: 11, scope: !5424)
!5426 = !DILocation(line: 2075, column: 15, scope: !5424)
!5427 = !DILocation(line: 2075, column: 26, scope: !5424)
!5428 = !DILocation(line: 2077, column: 11, scope: !5429)
!5429 = distinct !DILexicalBlock(scope: !5424, file: !3, line: 2077, column: 11)
!5430 = !DILocation(line: 2077, column: 11, scope: !5424)
!5431 = !DILocation(line: 2078, column: 18, scope: !5429)
!5432 = !DILocation(line: 2078, column: 36, scope: !5429)
!5433 = !DILocation(line: 2078, column: 9, scope: !5429)
!5434 = !DILocation(line: 2079, column: 7, scope: !5424)
!5435 = !DILocation(line: 2081, column: 16, scope: !5424)
!5436 = !DILocation(line: 2081, column: 21, scope: !5424)
!5437 = !DILocation(line: 2081, column: 7, scope: !5424)
!5438 = !DILocation(line: 2082, column: 5, scope: !5424)
!5439 = !DILocation(line: 2073, column: 31, scope: !5419)
!5440 = !DILocation(line: 2073, column: 3, scope: !5419)
!5441 = distinct !{!5441, !5422, !5442}
!5442 = !DILocation(line: 2082, column: 5, scope: !5416)
!5443 = !DILocation(line: 2084, column: 7, scope: !5444)
!5444 = distinct !DILexicalBlock(scope: !5395, file: !3, line: 2084, column: 7)
!5445 = !DILocation(line: 2084, column: 7, scope: !5395)
!5446 = !DILocation(line: 2085, column: 14, scope: !5444)
!5447 = !DILocation(line: 2085, column: 5, scope: !5444)
!5448 = !DILocation(line: 2087, column: 3, scope: !5395)
!5449 = !DILocation(line: 2088, column: 1, scope: !5395)
!5450 = distinct !DISubprogram(name: "order_nodes_in_scc", scope: !3, file: !3, line: 2326, type: !5451, scopeLine: 2328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5451 = !DISubroutineType(types: !5452)
!5452 = !{!1015, !955, !2195, !2195, !2217, !1015}
!5453 = !DILocalVariable(name: "g", arg: 1, scope: !5450, file: !3, line: 2326, type: !955)
!5454 = !DILocation(line: 2326, column: 29, scope: !5450)
!5455 = !DILocalVariable(name: "nodes_ordered", arg: 2, scope: !5450, file: !3, line: 2326, type: !2195)
!5456 = !DILocation(line: 2326, column: 40, scope: !5450)
!5457 = !DILocalVariable(name: "scc", arg: 3, scope: !5450, file: !3, line: 2326, type: !2195)
!5458 = !DILocation(line: 2326, column: 63, scope: !5450)
!5459 = !DILocalVariable(name: "node_order", arg: 4, scope: !5450, file: !3, line: 2327, type: !2217)
!5460 = !DILocation(line: 2327, column: 13, scope: !5450)
!5461 = !DILocalVariable(name: "pos", arg: 5, scope: !5450, file: !3, line: 2327, type: !1015)
!5462 = !DILocation(line: 2327, column: 29, scope: !5450)
!5463 = !DILocalVariable(name: "dir", scope: !5450, file: !3, line: 2329, type: !941)
!5464 = !DILocation(line: 2329, column: 22, scope: !5450)
!5465 = !DILocalVariable(name: "num_nodes", scope: !5450, file: !3, line: 2330, type: !1015)
!5466 = !DILocation(line: 2330, column: 7, scope: !5450)
!5467 = !DILocation(line: 2330, column: 19, scope: !5450)
!5468 = !DILocation(line: 2330, column: 22, scope: !5450)
!5469 = !DILocalVariable(name: "workset", scope: !5450, file: !3, line: 2331, type: !2195)
!5470 = !DILocation(line: 2331, column: 11, scope: !5450)
!5471 = !DILocation(line: 2331, column: 36, scope: !5450)
!5472 = !DILocation(line: 2331, column: 21, scope: !5450)
!5473 = !DILocalVariable(name: "tmp", scope: !5450, file: !3, line: 2332, type: !2195)
!5474 = !DILocation(line: 2332, column: 11, scope: !5450)
!5475 = !DILocation(line: 2332, column: 32, scope: !5450)
!5476 = !DILocation(line: 2332, column: 17, scope: !5450)
!5477 = !DILocalVariable(name: "zero_bitmap", scope: !5450, file: !3, line: 2333, type: !2195)
!5478 = !DILocation(line: 2333, column: 11, scope: !5450)
!5479 = !DILocation(line: 2333, column: 40, scope: !5450)
!5480 = !DILocation(line: 2333, column: 25, scope: !5450)
!5481 = !DILocalVariable(name: "predecessors", scope: !5450, file: !3, line: 2334, type: !2195)
!5482 = !DILocation(line: 2334, column: 11, scope: !5450)
!5483 = !DILocation(line: 2334, column: 41, scope: !5450)
!5484 = !DILocation(line: 2334, column: 26, scope: !5450)
!5485 = !DILocalVariable(name: "successors", scope: !5450, file: !3, line: 2335, type: !2195)
!5486 = !DILocation(line: 2335, column: 11, scope: !5450)
!5487 = !DILocation(line: 2335, column: 39, scope: !5450)
!5488 = !DILocation(line: 2335, column: 24, scope: !5450)
!5489 = !DILocation(line: 2337, column: 17, scope: !5450)
!5490 = !DILocation(line: 2337, column: 3, scope: !5450)
!5491 = !DILocation(line: 2338, column: 22, scope: !5450)
!5492 = !DILocation(line: 2338, column: 36, scope: !5450)
!5493 = !DILocation(line: 2338, column: 39, scope: !5450)
!5494 = !DILocation(line: 2338, column: 3, scope: !5450)
!5495 = !DILocation(line: 2340, column: 17, scope: !5450)
!5496 = !DILocation(line: 2340, column: 3, scope: !5450)
!5497 = !DILocation(line: 2341, column: 20, scope: !5450)
!5498 = !DILocation(line: 2341, column: 32, scope: !5450)
!5499 = !DILocation(line: 2341, column: 35, scope: !5450)
!5500 = !DILocation(line: 2341, column: 3, scope: !5450)
!5501 = !DILocation(line: 2343, column: 17, scope: !5450)
!5502 = !DILocation(line: 2343, column: 3, scope: !5450)
!5503 = !DILocation(line: 2344, column: 27, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 2344, column: 7)
!5505 = !DILocation(line: 2344, column: 32, scope: !5504)
!5506 = !DILocation(line: 2344, column: 46, scope: !5504)
!5507 = !DILocation(line: 2344, column: 7, scope: !5504)
!5508 = !DILocation(line: 2344, column: 7, scope: !5450)
!5509 = !DILocation(line: 2346, column: 21, scope: !5510)
!5510 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 2345, column: 5)
!5511 = !DILocation(line: 2346, column: 30, scope: !5510)
!5512 = !DILocation(line: 2346, column: 7, scope: !5510)
!5513 = !DILocation(line: 2347, column: 11, scope: !5510)
!5514 = !DILocation(line: 2348, column: 5, scope: !5510)
!5515 = !DILocation(line: 2349, column: 32, scope: !5516)
!5516 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 2349, column: 12)
!5517 = !DILocation(line: 2349, column: 37, scope: !5516)
!5518 = !DILocation(line: 2349, column: 49, scope: !5516)
!5519 = !DILocation(line: 2349, column: 12, scope: !5516)
!5520 = !DILocation(line: 2349, column: 12, scope: !5504)
!5521 = !DILocation(line: 2351, column: 21, scope: !5522)
!5522 = distinct !DILexicalBlock(scope: !5516, file: !3, line: 2350, column: 5)
!5523 = !DILocation(line: 2351, column: 30, scope: !5522)
!5524 = !DILocation(line: 2351, column: 7, scope: !5522)
!5525 = !DILocation(line: 2352, column: 11, scope: !5522)
!5526 = !DILocation(line: 2353, column: 5, scope: !5522)
!5527 = !DILocalVariable(name: "u", scope: !5528, file: !3, line: 2356, type: !1015)
!5528 = distinct !DILexicalBlock(scope: !5516, file: !3, line: 2355, column: 5)
!5529 = !DILocation(line: 2356, column: 11, scope: !5528)
!5530 = !DILocation(line: 2358, column: 21, scope: !5528)
!5531 = !DILocation(line: 2358, column: 7, scope: !5528)
!5532 = !DILocation(line: 2359, column: 31, scope: !5533)
!5533 = distinct !DILexicalBlock(scope: !5528, file: !3, line: 2359, column: 11)
!5534 = !DILocation(line: 2359, column: 34, scope: !5533)
!5535 = !DILocation(line: 2359, column: 16, scope: !5533)
!5536 = !DILocation(line: 2359, column: 14, scope: !5533)
!5537 = !DILocation(line: 2359, column: 40, scope: !5533)
!5538 = !DILocation(line: 2359, column: 11, scope: !5528)
!5539 = !DILocation(line: 2360, column: 11, scope: !5533)
!5540 = !DILocation(line: 2360, column: 20, scope: !5533)
!5541 = !DILocation(line: 2360, column: 2, scope: !5533)
!5542 = !DILocation(line: 2361, column: 11, scope: !5528)
!5543 = !DILocation(line: 2364, column: 17, scope: !5450)
!5544 = !DILocation(line: 2364, column: 3, scope: !5450)
!5545 = !DILocation(line: 2365, column: 3, scope: !5450)
!5546 = !DILocation(line: 2365, column: 26, scope: !5450)
!5547 = !DILocation(line: 2365, column: 35, scope: !5450)
!5548 = !DILocation(line: 2365, column: 11, scope: !5450)
!5549 = !DILocation(line: 2365, column: 10, scope: !5450)
!5550 = !DILocalVariable(name: "v", scope: !5551, file: !3, line: 2367, type: !1015)
!5551 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 2366, column: 5)
!5552 = !DILocation(line: 2367, column: 11, scope: !5551)
!5553 = !DILocalVariable(name: "v_node", scope: !5551, file: !3, line: 2368, type: !2166)
!5554 = !DILocation(line: 2368, column: 20, scope: !5551)
!5555 = !DILocalVariable(name: "v_node_preds", scope: !5551, file: !3, line: 2369, type: !2195)
!5556 = !DILocation(line: 2369, column: 15, scope: !5551)
!5557 = !DILocalVariable(name: "v_node_succs", scope: !5551, file: !3, line: 2370, type: !2195)
!5558 = !DILocation(line: 2370, column: 15, scope: !5551)
!5559 = !DILocation(line: 2372, column: 11, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5551, file: !3, line: 2372, column: 11)
!5561 = !DILocation(line: 2372, column: 15, scope: !5560)
!5562 = !DILocation(line: 2372, column: 11, scope: !5551)
!5563 = !DILocation(line: 2374, column: 4, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 2373, column: 2)
!5565 = !DILocation(line: 2374, column: 27, scope: !5564)
!5566 = !DILocation(line: 2374, column: 36, scope: !5564)
!5567 = !DILocation(line: 2374, column: 12, scope: !5564)
!5568 = !DILocation(line: 2374, column: 11, scope: !5564)
!5569 = !DILocation(line: 2376, column: 33, scope: !5570)
!5570 = distinct !DILexicalBlock(scope: !5564, file: !3, line: 2375, column: 6)
!5571 = !DILocation(line: 2376, column: 36, scope: !5570)
!5572 = !DILocation(line: 2376, column: 12, scope: !5570)
!5573 = !DILocation(line: 2376, column: 10, scope: !5570)
!5574 = !DILocation(line: 2377, column: 18, scope: !5570)
!5575 = !DILocation(line: 2377, column: 21, scope: !5570)
!5576 = !DILocation(line: 2377, column: 27, scope: !5570)
!5577 = !DILocation(line: 2377, column: 15, scope: !5570)
!5578 = !DILocation(line: 2378, column: 28, scope: !5570)
!5579 = !DILocation(line: 2378, column: 8, scope: !5570)
!5580 = !DILocation(line: 2378, column: 22, scope: !5570)
!5581 = !DILocation(line: 2378, column: 26, scope: !5570)
!5582 = !DILocation(line: 2379, column: 23, scope: !5570)
!5583 = !DILocation(line: 2379, column: 21, scope: !5570)
!5584 = !DILocation(line: 2380, column: 25, scope: !5570)
!5585 = !DILocation(line: 2380, column: 30, scope: !5570)
!5586 = !DILocation(line: 2380, column: 44, scope: !5570)
!5587 = !DILocation(line: 2380, column: 8, scope: !5570)
!5588 = !DILocation(line: 2383, column: 28, scope: !5570)
!5589 = !DILocation(line: 2383, column: 33, scope: !5570)
!5590 = !DILocation(line: 2383, column: 38, scope: !5570)
!5591 = !DILocation(line: 2383, column: 8, scope: !5570)
!5592 = !DILocation(line: 2384, column: 24, scope: !5570)
!5593 = !DILocation(line: 2384, column: 33, scope: !5570)
!5594 = !DILocation(line: 2384, column: 42, scope: !5570)
!5595 = !DILocation(line: 2384, column: 8, scope: !5570)
!5596 = !DILocation(line: 2385, column: 19, scope: !5570)
!5597 = !DILocation(line: 2385, column: 28, scope: !5570)
!5598 = !DILocation(line: 2385, column: 8, scope: !5570)
!5599 = !DILocation(line: 2386, column: 17, scope: !5570)
!5600 = !DILocation(line: 2386, column: 32, scope: !5570)
!5601 = !DILocation(line: 2386, column: 8, scope: !5570)
!5602 = distinct !{!5602, !5563, !5603}
!5603 = !DILocation(line: 2387, column: 6, scope: !5564)
!5604 = !DILocation(line: 2388, column: 8, scope: !5564)
!5605 = !DILocation(line: 2389, column: 18, scope: !5564)
!5606 = !DILocation(line: 2389, column: 4, scope: !5564)
!5607 = !DILocation(line: 2390, column: 23, scope: !5564)
!5608 = !DILocation(line: 2390, column: 37, scope: !5564)
!5609 = !DILocation(line: 2390, column: 40, scope: !5564)
!5610 = !DILocation(line: 2390, column: 4, scope: !5564)
!5611 = !DILocation(line: 2391, column: 21, scope: !5564)
!5612 = !DILocation(line: 2391, column: 30, scope: !5564)
!5613 = !DILocation(line: 2391, column: 44, scope: !5564)
!5614 = !DILocation(line: 2391, column: 4, scope: !5564)
!5615 = !DILocation(line: 2392, column: 2, scope: !5564)
!5616 = !DILocation(line: 2395, column: 4, scope: !5617)
!5617 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 2394, column: 2)
!5618 = !DILocation(line: 2395, column: 27, scope: !5617)
!5619 = !DILocation(line: 2395, column: 36, scope: !5617)
!5620 = !DILocation(line: 2395, column: 12, scope: !5617)
!5621 = !DILocation(line: 2395, column: 11, scope: !5617)
!5622 = !DILocation(line: 2397, column: 33, scope: !5623)
!5623 = distinct !DILexicalBlock(scope: !5617, file: !3, line: 2396, column: 6)
!5624 = !DILocation(line: 2397, column: 36, scope: !5623)
!5625 = !DILocation(line: 2397, column: 12, scope: !5623)
!5626 = !DILocation(line: 2397, column: 10, scope: !5623)
!5627 = !DILocation(line: 2398, column: 18, scope: !5623)
!5628 = !DILocation(line: 2398, column: 21, scope: !5623)
!5629 = !DILocation(line: 2398, column: 27, scope: !5623)
!5630 = !DILocation(line: 2398, column: 15, scope: !5623)
!5631 = !DILocation(line: 2399, column: 28, scope: !5623)
!5632 = !DILocation(line: 2399, column: 8, scope: !5623)
!5633 = !DILocation(line: 2399, column: 22, scope: !5623)
!5634 = !DILocation(line: 2399, column: 26, scope: !5623)
!5635 = !DILocation(line: 2400, column: 23, scope: !5623)
!5636 = !DILocation(line: 2400, column: 21, scope: !5623)
!5637 = !DILocation(line: 2401, column: 25, scope: !5623)
!5638 = !DILocation(line: 2401, column: 30, scope: !5623)
!5639 = !DILocation(line: 2401, column: 44, scope: !5623)
!5640 = !DILocation(line: 2401, column: 8, scope: !5623)
!5641 = !DILocation(line: 2404, column: 28, scope: !5623)
!5642 = !DILocation(line: 2404, column: 33, scope: !5623)
!5643 = !DILocation(line: 2404, column: 38, scope: !5623)
!5644 = !DILocation(line: 2404, column: 8, scope: !5623)
!5645 = !DILocation(line: 2405, column: 24, scope: !5623)
!5646 = !DILocation(line: 2405, column: 33, scope: !5623)
!5647 = !DILocation(line: 2405, column: 42, scope: !5623)
!5648 = !DILocation(line: 2405, column: 8, scope: !5623)
!5649 = !DILocation(line: 2406, column: 19, scope: !5623)
!5650 = !DILocation(line: 2406, column: 28, scope: !5623)
!5651 = !DILocation(line: 2406, column: 8, scope: !5623)
!5652 = !DILocation(line: 2407, column: 17, scope: !5623)
!5653 = !DILocation(line: 2407, column: 32, scope: !5623)
!5654 = !DILocation(line: 2407, column: 8, scope: !5623)
!5655 = distinct !{!5655, !5616, !5656}
!5656 = !DILocation(line: 2408, column: 6, scope: !5617)
!5657 = !DILocation(line: 2409, column: 8, scope: !5617)
!5658 = !DILocation(line: 2410, column: 18, scope: !5617)
!5659 = !DILocation(line: 2410, column: 4, scope: !5617)
!5660 = !DILocation(line: 2411, column: 21, scope: !5617)
!5661 = !DILocation(line: 2411, column: 33, scope: !5617)
!5662 = !DILocation(line: 2411, column: 36, scope: !5617)
!5663 = !DILocation(line: 2411, column: 4, scope: !5617)
!5664 = !DILocation(line: 2412, column: 21, scope: !5617)
!5665 = !DILocation(line: 2412, column: 30, scope: !5617)
!5666 = !DILocation(line: 2412, column: 42, scope: !5617)
!5667 = !DILocation(line: 2412, column: 4, scope: !5617)
!5668 = distinct !{!5668, !5545, !5669}
!5669 = !DILocation(line: 2414, column: 5, scope: !5450)
!5670 = !DILocation(line: 2415, column: 3, scope: !5450)
!5671 = !DILocation(line: 2416, column: 3, scope: !5450)
!5672 = !DILocation(line: 2417, column: 3, scope: !5450)
!5673 = !DILocation(line: 2418, column: 3, scope: !5450)
!5674 = !DILocation(line: 2419, column: 3, scope: !5450)
!5675 = !DILocation(line: 2420, column: 10, scope: !5450)
!5676 = !DILocation(line: 2420, column: 3, scope: !5450)
!5677 = distinct !DISubprogram(name: "find_max_asap", scope: !3, file: !3, line: 2243, type: !5678, scopeLine: 2244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5678 = !DISubroutineType(types: !5679)
!5679 = !{!1015, !955, !2195}
!5680 = !DILocalVariable(name: "g", arg: 1, scope: !5677, file: !3, line: 2243, type: !955)
!5681 = !DILocation(line: 2243, column: 24, scope: !5677)
!5682 = !DILocalVariable(name: "nodes", arg: 2, scope: !5677, file: !3, line: 2243, type: !2195)
!5683 = !DILocation(line: 2243, column: 35, scope: !5677)
!5684 = !DILocalVariable(name: "u", scope: !5677, file: !3, line: 2245, type: !7)
!5685 = !DILocation(line: 2245, column: 16, scope: !5677)
!5686 = !DILocalVariable(name: "max_asap", scope: !5677, file: !3, line: 2246, type: !1015)
!5687 = !DILocation(line: 2246, column: 7, scope: !5677)
!5688 = !DILocalVariable(name: "result", scope: !5677, file: !3, line: 2247, type: !1015)
!5689 = !DILocation(line: 2247, column: 7, scope: !5677)
!5690 = !DILocalVariable(name: "sbi", scope: !5677, file: !3, line: 2248, type: !4687)
!5691 = !DILocation(line: 2248, column: 20, scope: !5677)
!5692 = !DILocation(line: 2250, column: 3, scope: !5693)
!5693 = distinct !DILexicalBlock(scope: !5677, file: !3, line: 2250, column: 3)
!5694 = !DILocation(line: 2250, column: 3, scope: !5695)
!5695 = distinct !DILexicalBlock(scope: !5693, file: !3, line: 2250, column: 3)
!5696 = !DILocalVariable(name: "u_node", scope: !5697, file: !3, line: 2252, type: !2166)
!5697 = distinct !DILexicalBlock(scope: !5695, file: !3, line: 2251, column: 5)
!5698 = !DILocation(line: 2252, column: 20, scope: !5697)
!5699 = !DILocation(line: 2252, column: 30, scope: !5697)
!5700 = !DILocation(line: 2252, column: 33, scope: !5697)
!5701 = !DILocation(line: 2252, column: 39, scope: !5697)
!5702 = !DILocation(line: 2254, column: 11, scope: !5703)
!5703 = distinct !DILexicalBlock(scope: !5697, file: !3, line: 2254, column: 11)
!5704 = !DILocation(line: 2254, column: 22, scope: !5703)
!5705 = !DILocation(line: 2254, column: 20, scope: !5703)
!5706 = !DILocation(line: 2254, column: 11, scope: !5697)
!5707 = !DILocation(line: 2256, column: 15, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5703, file: !3, line: 2255, column: 2)
!5709 = !DILocation(line: 2256, column: 13, scope: !5708)
!5710 = !DILocation(line: 2257, column: 13, scope: !5708)
!5711 = !DILocation(line: 2257, column: 11, scope: !5708)
!5712 = !DILocation(line: 2258, column: 2, scope: !5708)
!5713 = !DILocation(line: 2259, column: 5, scope: !5697)
!5714 = distinct !{!5714, !5692, !5715}
!5715 = !DILocation(line: 2259, column: 5, scope: !5693)
!5716 = !DILocation(line: 2260, column: 10, scope: !5677)
!5717 = !DILocation(line: 2260, column: 3, scope: !5677)
!5718 = distinct !DISubprogram(name: "SET_BIT", scope: !2196, file: !2196, line: 63, type: !5719, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5719 = !DISubroutineType(types: !5720)
!5720 = !{null, !2195, !7}
!5721 = !DILocalVariable(name: "map", arg: 1, scope: !5718, file: !2196, line: 63, type: !2195)
!5722 = !DILocation(line: 63, column: 18, scope: !5718)
!5723 = !DILocalVariable(name: "bitno", arg: 2, scope: !5718, file: !2196, line: 63, type: !7)
!5724 = !DILocation(line: 63, column: 36, scope: !5718)
!5725 = !DILocation(line: 65, column: 7, scope: !5726)
!5726 = distinct !DILexicalBlock(scope: !5718, file: !2196, line: 65, column: 7)
!5727 = !DILocation(line: 65, column: 12, scope: !5726)
!5728 = !DILocation(line: 65, column: 7, scope: !5718)
!5729 = !DILocalVariable(name: "oldbit", scope: !5730, file: !2196, line: 67, type: !1226)
!5730 = distinct !DILexicalBlock(scope: !5726, file: !2196, line: 66, column: 5)
!5731 = !DILocation(line: 67, column: 12, scope: !5730)
!5732 = !DILocation(line: 68, column: 16, scope: !5730)
!5733 = !DILocation(line: 68, column: 14, scope: !5730)
!5734 = !DILocation(line: 69, column: 12, scope: !5735)
!5735 = distinct !DILexicalBlock(scope: !5730, file: !2196, line: 69, column: 11)
!5736 = !DILocation(line: 69, column: 11, scope: !5730)
!5737 = !DILocation(line: 70, column: 2, scope: !5735)
!5738 = !DILocation(line: 70, column: 7, scope: !5735)
!5739 = !DILocation(line: 70, column: 16, scope: !5735)
!5740 = !DILocation(line: 70, column: 22, scope: !5735)
!5741 = !DILocation(line: 70, column: 41, scope: !5735)
!5742 = !DILocation(line: 71, column: 5, scope: !5730)
!5743 = !DILocation(line: 73, column: 33, scope: !5718)
!5744 = !DILocation(line: 73, column: 40, scope: !5718)
!5745 = !DILocation(line: 73, column: 29, scope: !5718)
!5746 = !DILocation(line: 72, column: 3, scope: !5718)
!5747 = !DILocation(line: 72, column: 8, scope: !5718)
!5748 = !DILocation(line: 72, column: 13, scope: !5718)
!5749 = !DILocation(line: 72, column: 19, scope: !5718)
!5750 = !DILocation(line: 73, column: 5, scope: !5718)
!5751 = !DILocation(line: 74, column: 1, scope: !5718)
!5752 = distinct !DISubprogram(name: "find_max_hv_min_mob", scope: !3, file: !3, line: 2264, type: !5678, scopeLine: 2265, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5753 = !DILocalVariable(name: "g", arg: 1, scope: !5752, file: !3, line: 2264, type: !955)
!5754 = !DILocation(line: 2264, column: 30, scope: !5752)
!5755 = !DILocalVariable(name: "nodes", arg: 2, scope: !5752, file: !3, line: 2264, type: !2195)
!5756 = !DILocation(line: 2264, column: 41, scope: !5752)
!5757 = !DILocalVariable(name: "u", scope: !5752, file: !3, line: 2266, type: !7)
!5758 = !DILocation(line: 2266, column: 16, scope: !5752)
!5759 = !DILocalVariable(name: "max_hv", scope: !5752, file: !3, line: 2267, type: !1015)
!5760 = !DILocation(line: 2267, column: 7, scope: !5752)
!5761 = !DILocalVariable(name: "min_mob", scope: !5752, file: !3, line: 2268, type: !1015)
!5762 = !DILocation(line: 2268, column: 7, scope: !5752)
!5763 = !DILocalVariable(name: "result", scope: !5752, file: !3, line: 2269, type: !1015)
!5764 = !DILocation(line: 2269, column: 7, scope: !5752)
!5765 = !DILocalVariable(name: "sbi", scope: !5752, file: !3, line: 2270, type: !4687)
!5766 = !DILocation(line: 2270, column: 20, scope: !5752)
!5767 = !DILocation(line: 2272, column: 3, scope: !5768)
!5768 = distinct !DILexicalBlock(scope: !5752, file: !3, line: 2272, column: 3)
!5769 = !DILocation(line: 2272, column: 3, scope: !5770)
!5770 = distinct !DILexicalBlock(scope: !5768, file: !3, line: 2272, column: 3)
!5771 = !DILocalVariable(name: "u_node", scope: !5772, file: !3, line: 2274, type: !2166)
!5772 = distinct !DILexicalBlock(scope: !5770, file: !3, line: 2273, column: 5)
!5773 = !DILocation(line: 2274, column: 20, scope: !5772)
!5774 = !DILocation(line: 2274, column: 30, scope: !5772)
!5775 = !DILocation(line: 2274, column: 33, scope: !5772)
!5776 = !DILocation(line: 2274, column: 39, scope: !5772)
!5777 = !DILocation(line: 2276, column: 11, scope: !5778)
!5778 = distinct !DILexicalBlock(scope: !5772, file: !3, line: 2276, column: 11)
!5779 = !DILocation(line: 2276, column: 20, scope: !5778)
!5780 = !DILocation(line: 2276, column: 18, scope: !5778)
!5781 = !DILocation(line: 2276, column: 11, scope: !5772)
!5782 = !DILocation(line: 2278, column: 13, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 2277, column: 2)
!5784 = !DILocation(line: 2278, column: 11, scope: !5783)
!5785 = !DILocation(line: 2279, column: 14, scope: !5783)
!5786 = !DILocation(line: 2279, column: 12, scope: !5783)
!5787 = !DILocation(line: 2280, column: 13, scope: !5783)
!5788 = !DILocation(line: 2280, column: 11, scope: !5783)
!5789 = !DILocation(line: 2281, column: 2, scope: !5783)
!5790 = !DILocation(line: 2282, column: 17, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 2282, column: 16)
!5792 = !DILocation(line: 2282, column: 27, scope: !5791)
!5793 = !DILocation(line: 2282, column: 24, scope: !5791)
!5794 = !DILocation(line: 2283, column: 9, scope: !5791)
!5795 = !DILocation(line: 2283, column: 13, scope: !5791)
!5796 = !DILocation(line: 2283, column: 23, scope: !5791)
!5797 = !DILocation(line: 2283, column: 21, scope: !5791)
!5798 = !DILocation(line: 2282, column: 16, scope: !5778)
!5799 = !DILocation(line: 2285, column: 14, scope: !5800)
!5800 = distinct !DILexicalBlock(scope: !5791, file: !3, line: 2284, column: 2)
!5801 = !DILocation(line: 2285, column: 12, scope: !5800)
!5802 = !DILocation(line: 2286, column: 13, scope: !5800)
!5803 = !DILocation(line: 2286, column: 11, scope: !5800)
!5804 = !DILocation(line: 2287, column: 2, scope: !5800)
!5805 = !DILocation(line: 2288, column: 5, scope: !5772)
!5806 = distinct !{!5806, !5767, !5807}
!5807 = !DILocation(line: 2288, column: 5, scope: !5768)
!5808 = !DILocation(line: 2289, column: 10, scope: !5752)
!5809 = !DILocation(line: 2289, column: 3, scope: !5752)
!5810 = distinct !DISubprogram(name: "RESET_BIT", scope: !2196, file: !2196, line: 82, type: !5719, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5811 = !DILocalVariable(name: "map", arg: 1, scope: !5810, file: !2196, line: 82, type: !2195)
!5812 = !DILocation(line: 82, column: 20, scope: !5810)
!5813 = !DILocalVariable(name: "bitno", arg: 2, scope: !5810, file: !2196, line: 82, type: !7)
!5814 = !DILocation(line: 82, column: 39, scope: !5810)
!5815 = !DILocation(line: 84, column: 7, scope: !5816)
!5816 = distinct !DILexicalBlock(scope: !5810, file: !2196, line: 84, column: 7)
!5817 = !DILocation(line: 84, column: 12, scope: !5816)
!5818 = !DILocation(line: 84, column: 7, scope: !5810)
!5819 = !DILocalVariable(name: "oldbit", scope: !5820, file: !2196, line: 86, type: !1226)
!5820 = distinct !DILexicalBlock(scope: !5816, file: !2196, line: 85, column: 5)
!5821 = !DILocation(line: 86, column: 12, scope: !5820)
!5822 = !DILocation(line: 87, column: 16, scope: !5820)
!5823 = !DILocation(line: 87, column: 14, scope: !5820)
!5824 = !DILocation(line: 88, column: 11, scope: !5825)
!5825 = distinct !DILexicalBlock(scope: !5820, file: !2196, line: 88, column: 11)
!5826 = !DILocation(line: 88, column: 11, scope: !5820)
!5827 = !DILocation(line: 89, column: 2, scope: !5825)
!5828 = !DILocation(line: 89, column: 7, scope: !5825)
!5829 = !DILocation(line: 89, column: 16, scope: !5825)
!5830 = !DILocation(line: 89, column: 22, scope: !5825)
!5831 = !DILocation(line: 89, column: 41, scope: !5825)
!5832 = !DILocation(line: 90, column: 5, scope: !5820)
!5833 = !DILocation(line: 92, column: 35, scope: !5810)
!5834 = !DILocation(line: 92, column: 42, scope: !5810)
!5835 = !DILocation(line: 92, column: 31, scope: !5810)
!5836 = !DILocation(line: 92, column: 8, scope: !5810)
!5837 = !DILocation(line: 91, column: 3, scope: !5810)
!5838 = !DILocation(line: 91, column: 8, scope: !5810)
!5839 = !DILocation(line: 91, column: 13, scope: !5810)
!5840 = !DILocation(line: 91, column: 19, scope: !5810)
!5841 = !DILocation(line: 92, column: 5, scope: !5810)
!5842 = !DILocation(line: 93, column: 1, scope: !5810)
!5843 = distinct !DISubprogram(name: "find_max_dv_min_mob", scope: !3, file: !3, line: 2293, type: !5678, scopeLine: 2294, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5844 = !DILocalVariable(name: "g", arg: 1, scope: !5843, file: !3, line: 2293, type: !955)
!5845 = !DILocation(line: 2293, column: 30, scope: !5843)
!5846 = !DILocalVariable(name: "nodes", arg: 2, scope: !5843, file: !3, line: 2293, type: !2195)
!5847 = !DILocation(line: 2293, column: 41, scope: !5843)
!5848 = !DILocalVariable(name: "u", scope: !5843, file: !3, line: 2295, type: !7)
!5849 = !DILocation(line: 2295, column: 16, scope: !5843)
!5850 = !DILocalVariable(name: "max_dv", scope: !5843, file: !3, line: 2296, type: !1015)
!5851 = !DILocation(line: 2296, column: 7, scope: !5843)
!5852 = !DILocalVariable(name: "min_mob", scope: !5843, file: !3, line: 2297, type: !1015)
!5853 = !DILocation(line: 2297, column: 7, scope: !5843)
!5854 = !DILocalVariable(name: "result", scope: !5843, file: !3, line: 2298, type: !1015)
!5855 = !DILocation(line: 2298, column: 7, scope: !5843)
!5856 = !DILocalVariable(name: "sbi", scope: !5843, file: !3, line: 2299, type: !4687)
!5857 = !DILocation(line: 2299, column: 20, scope: !5843)
!5858 = !DILocation(line: 2301, column: 3, scope: !5859)
!5859 = distinct !DILexicalBlock(scope: !5843, file: !3, line: 2301, column: 3)
!5860 = !DILocation(line: 2301, column: 3, scope: !5861)
!5861 = distinct !DILexicalBlock(scope: !5859, file: !3, line: 2301, column: 3)
!5862 = !DILocalVariable(name: "u_node", scope: !5863, file: !3, line: 2303, type: !2166)
!5863 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 2302, column: 5)
!5864 = !DILocation(line: 2303, column: 20, scope: !5863)
!5865 = !DILocation(line: 2303, column: 30, scope: !5863)
!5866 = !DILocation(line: 2303, column: 33, scope: !5863)
!5867 = !DILocation(line: 2303, column: 39, scope: !5863)
!5868 = !DILocation(line: 2305, column: 11, scope: !5869)
!5869 = distinct !DILexicalBlock(scope: !5863, file: !3, line: 2305, column: 11)
!5870 = !DILocation(line: 2305, column: 20, scope: !5869)
!5871 = !DILocation(line: 2305, column: 18, scope: !5869)
!5872 = !DILocation(line: 2305, column: 11, scope: !5863)
!5873 = !DILocation(line: 2307, column: 13, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5869, file: !3, line: 2306, column: 2)
!5875 = !DILocation(line: 2307, column: 11, scope: !5874)
!5876 = !DILocation(line: 2308, column: 14, scope: !5874)
!5877 = !DILocation(line: 2308, column: 12, scope: !5874)
!5878 = !DILocation(line: 2309, column: 13, scope: !5874)
!5879 = !DILocation(line: 2309, column: 11, scope: !5874)
!5880 = !DILocation(line: 2310, column: 2, scope: !5874)
!5881 = !DILocation(line: 2311, column: 17, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5869, file: !3, line: 2311, column: 16)
!5883 = !DILocation(line: 2311, column: 27, scope: !5882)
!5884 = !DILocation(line: 2311, column: 24, scope: !5882)
!5885 = !DILocation(line: 2312, column: 9, scope: !5882)
!5886 = !DILocation(line: 2312, column: 13, scope: !5882)
!5887 = !DILocation(line: 2312, column: 23, scope: !5882)
!5888 = !DILocation(line: 2312, column: 21, scope: !5882)
!5889 = !DILocation(line: 2311, column: 16, scope: !5869)
!5890 = !DILocation(line: 2314, column: 14, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5882, file: !3, line: 2313, column: 2)
!5892 = !DILocation(line: 2314, column: 12, scope: !5891)
!5893 = !DILocation(line: 2315, column: 13, scope: !5891)
!5894 = !DILocation(line: 2315, column: 11, scope: !5891)
!5895 = !DILocation(line: 2316, column: 2, scope: !5891)
!5896 = !DILocation(line: 2317, column: 5, scope: !5863)
!5897 = distinct !{!5897, !5858, !5898}
!5898 = !DILocation(line: 2317, column: 5, scope: !5859)
!5899 = !DILocation(line: 2318, column: 10, scope: !5843)
!5900 = !DILocation(line: 2318, column: 3, scope: !5843)
!5901 = distinct !DISubprogram(name: "sbitmap_iter_init", scope: !2196, file: !2196, line: 117, type: !5902, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5902 = !DISubroutineType(types: !5903)
!5903 = !{null, !5904, !5905, !7}
!5904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4687, size: 64)
!5905 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_sbitmap", file: !2196, line: 46, baseType: !5906)
!5906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5907, size: 64)
!5907 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2198)
!5908 = !DILocalVariable(name: "i", arg: 1, scope: !5901, file: !2196, line: 117, type: !5904)
!5909 = !DILocation(line: 117, column: 38, scope: !5901)
!5910 = !DILocalVariable(name: "bmp", arg: 2, scope: !5901, file: !2196, line: 117, type: !5905)
!5911 = !DILocation(line: 117, column: 55, scope: !5901)
!5912 = !DILocalVariable(name: "min", arg: 3, scope: !5901, file: !2196, line: 117, type: !7)
!5913 = !DILocation(line: 117, column: 73, scope: !5901)
!5914 = !DILocation(line: 119, column: 17, scope: !5901)
!5915 = !DILocation(line: 119, column: 21, scope: !5901)
!5916 = !DILocation(line: 119, column: 3, scope: !5901)
!5917 = !DILocation(line: 119, column: 6, scope: !5901)
!5918 = !DILocation(line: 119, column: 15, scope: !5901)
!5919 = !DILocation(line: 120, column: 16, scope: !5901)
!5920 = !DILocation(line: 120, column: 3, scope: !5901)
!5921 = !DILocation(line: 120, column: 6, scope: !5901)
!5922 = !DILocation(line: 120, column: 14, scope: !5901)
!5923 = !DILocation(line: 121, column: 13, scope: !5901)
!5924 = !DILocation(line: 121, column: 18, scope: !5901)
!5925 = !DILocation(line: 121, column: 3, scope: !5901)
!5926 = !DILocation(line: 121, column: 6, scope: !5901)
!5927 = !DILocation(line: 121, column: 11, scope: !5901)
!5928 = !DILocation(line: 122, column: 12, scope: !5901)
!5929 = !DILocation(line: 122, column: 17, scope: !5901)
!5930 = !DILocation(line: 122, column: 3, scope: !5901)
!5931 = !DILocation(line: 122, column: 6, scope: !5901)
!5932 = !DILocation(line: 122, column: 10, scope: !5901)
!5933 = !DILocation(line: 124, column: 7, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5901, file: !2196, line: 124, column: 7)
!5935 = !DILocation(line: 124, column: 10, scope: !5934)
!5936 = !DILocation(line: 124, column: 22, scope: !5934)
!5937 = !DILocation(line: 124, column: 25, scope: !5934)
!5938 = !DILocation(line: 124, column: 19, scope: !5934)
!5939 = !DILocation(line: 124, column: 7, scope: !5901)
!5940 = !DILocation(line: 125, column: 5, scope: !5934)
!5941 = !DILocation(line: 125, column: 8, scope: !5934)
!5942 = !DILocation(line: 125, column: 13, scope: !5934)
!5943 = !DILocation(line: 127, column: 16, scope: !5934)
!5944 = !DILocation(line: 127, column: 19, scope: !5934)
!5945 = !DILocation(line: 127, column: 23, scope: !5934)
!5946 = !DILocation(line: 127, column: 26, scope: !5934)
!5947 = !DILocation(line: 128, column: 13, scope: !5934)
!5948 = !DILocation(line: 128, column: 16, scope: !5934)
!5949 = !DILocation(line: 128, column: 24, scope: !5934)
!5950 = !DILocation(line: 128, column: 9, scope: !5934)
!5951 = !DILocation(line: 127, column: 5, scope: !5934)
!5952 = !DILocation(line: 127, column: 8, scope: !5934)
!5953 = !DILocation(line: 127, column: 13, scope: !5934)
!5954 = !DILocation(line: 129, column: 1, scope: !5901)
!5955 = distinct !DISubprogram(name: "sbitmap_iter_cond", scope: !2196, file: !2196, line: 136, type: !5956, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!5956 = !DISubroutineType(types: !5957)
!5957 = !{!1226, !5904, !5958}
!5958 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!5959 = !DILocalVariable(name: "i", arg: 1, scope: !5955, file: !2196, line: 136, type: !5904)
!5960 = !DILocation(line: 136, column: 38, scope: !5955)
!5961 = !DILocalVariable(name: "n", arg: 2, scope: !5955, file: !2196, line: 136, type: !5958)
!5962 = !DILocation(line: 136, column: 55, scope: !5955)
!5963 = !DILocation(line: 139, column: 3, scope: !5955)
!5964 = !DILocation(line: 139, column: 10, scope: !5965)
!5965 = distinct !DILexicalBlock(scope: !5966, file: !2196, line: 139, column: 3)
!5966 = distinct !DILexicalBlock(scope: !5955, file: !2196, line: 139, column: 3)
!5967 = !DILocation(line: 139, column: 13, scope: !5965)
!5968 = !DILocation(line: 139, column: 18, scope: !5965)
!5969 = !DILocation(line: 139, column: 3, scope: !5966)
!5970 = !DILocation(line: 141, column: 7, scope: !5971)
!5971 = distinct !DILexicalBlock(scope: !5965, file: !2196, line: 140, column: 5)
!5972 = !DILocation(line: 141, column: 10, scope: !5971)
!5973 = !DILocation(line: 141, column: 18, scope: !5971)
!5974 = !DILocation(line: 144, column: 11, scope: !5975)
!5975 = distinct !DILexicalBlock(scope: !5971, file: !2196, line: 144, column: 11)
!5976 = !DILocation(line: 144, column: 14, scope: !5975)
!5977 = !DILocation(line: 144, column: 26, scope: !5975)
!5978 = !DILocation(line: 144, column: 29, scope: !5975)
!5979 = !DILocation(line: 144, column: 23, scope: !5975)
!5980 = !DILocation(line: 144, column: 11, scope: !5971)
!5981 = !DILocation(line: 145, column: 2, scope: !5975)
!5982 = !DILocation(line: 147, column: 20, scope: !5971)
!5983 = !DILocation(line: 147, column: 23, scope: !5971)
!5984 = !DILocation(line: 147, column: 32, scope: !5971)
!5985 = !DILocation(line: 147, column: 7, scope: !5971)
!5986 = !DILocation(line: 147, column: 10, scope: !5971)
!5987 = !DILocation(line: 147, column: 18, scope: !5971)
!5988 = !DILocation(line: 148, column: 5, scope: !5971)
!5989 = !DILocation(line: 139, column: 34, scope: !5965)
!5990 = !DILocation(line: 139, column: 37, scope: !5965)
!5991 = !DILocation(line: 139, column: 41, scope: !5965)
!5992 = !DILocation(line: 139, column: 44, scope: !5965)
!5993 = !DILocation(line: 139, column: 24, scope: !5965)
!5994 = !DILocation(line: 139, column: 27, scope: !5965)
!5995 = !DILocation(line: 139, column: 32, scope: !5965)
!5996 = !DILocation(line: 139, column: 3, scope: !5965)
!5997 = distinct !{!5997, !5969, !5998}
!5998 = !DILocation(line: 148, column: 5, scope: !5966)
!5999 = !DILocation(line: 151, column: 3, scope: !5955)
!6000 = !DILocation(line: 151, column: 11, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !6002, file: !2196, line: 151, column: 3)
!6002 = distinct !DILexicalBlock(scope: !5955, file: !2196, line: 151, column: 3)
!6003 = !DILocation(line: 151, column: 14, scope: !6001)
!6004 = !DILocation(line: 151, column: 19, scope: !6001)
!6005 = !DILocation(line: 151, column: 24, scope: !6001)
!6006 = !DILocation(line: 151, column: 3, scope: !6002)
!6007 = !DILocation(line: 152, column: 5, scope: !6001)
!6008 = !DILocation(line: 152, column: 8, scope: !6001)
!6009 = !DILocation(line: 152, column: 15, scope: !6001)
!6010 = !DILocation(line: 151, column: 30, scope: !6001)
!6011 = !DILocation(line: 151, column: 33, scope: !6001)
!6012 = !DILocation(line: 151, column: 38, scope: !6001)
!6013 = !DILocation(line: 151, column: 3, scope: !6001)
!6014 = distinct !{!6014, !6006, !6015}
!6015 = !DILocation(line: 152, column: 15, scope: !6002)
!6016 = !DILocation(line: 154, column: 8, scope: !5955)
!6017 = !DILocation(line: 154, column: 11, scope: !5955)
!6018 = !DILocation(line: 154, column: 4, scope: !5955)
!6019 = !DILocation(line: 154, column: 6, scope: !5955)
!6020 = !DILocation(line: 156, column: 3, scope: !5955)
!6021 = !DILocation(line: 157, column: 1, scope: !5955)
!6022 = distinct !DISubprogram(name: "sbitmap_iter_next", scope: !2196, file: !2196, line: 162, type: !6023, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!6023 = !DISubroutineType(types: !6024)
!6024 = !{null, !5904}
!6025 = !DILocalVariable(name: "i", arg: 1, scope: !6022, file: !2196, line: 162, type: !5904)
!6026 = !DILocation(line: 162, column: 38, scope: !6022)
!6027 = !DILocation(line: 164, column: 3, scope: !6022)
!6028 = !DILocation(line: 164, column: 6, scope: !6022)
!6029 = !DILocation(line: 164, column: 11, scope: !6022)
!6030 = !DILocation(line: 165, column: 3, scope: !6022)
!6031 = !DILocation(line: 165, column: 6, scope: !6022)
!6032 = !DILocation(line: 165, column: 13, scope: !6022)
!6033 = !DILocation(line: 166, column: 1, scope: !6022)
!6034 = distinct !DISubprogram(name: "create_partial_schedule", scope: !3, file: !3, line: 2430, type: !6035, scopeLine: 2431, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!6035 = !DISubroutineType(types: !6036)
!6036 = !{!2218, !1015, !955, !1015}
!6037 = !DILocalVariable(name: "ii", arg: 1, scope: !6034, file: !3, line: 2430, type: !1015)
!6038 = !DILocation(line: 2430, column: 30, scope: !6034)
!6039 = !DILocalVariable(name: "g", arg: 2, scope: !6034, file: !3, line: 2430, type: !955)
!6040 = !DILocation(line: 2430, column: 42, scope: !6034)
!6041 = !DILocalVariable(name: "history", arg: 3, scope: !6034, file: !3, line: 2430, type: !1015)
!6042 = !DILocation(line: 2430, column: 49, scope: !6034)
!6043 = !DILocalVariable(name: "ps", scope: !6034, file: !3, line: 2432, type: !2218)
!6044 = !DILocation(line: 2432, column: 24, scope: !6034)
!6045 = !DILocation(line: 2432, column: 29, scope: !6034)
!6046 = !DILocation(line: 2433, column: 39, scope: !6034)
!6047 = !DILocation(line: 2433, column: 30, scope: !6034)
!6048 = !DILocation(line: 2433, column: 14, scope: !6034)
!6049 = !DILocation(line: 2433, column: 3, scope: !6034)
!6050 = !DILocation(line: 2433, column: 7, scope: !6034)
!6051 = !DILocation(line: 2433, column: 12, scope: !6034)
!6052 = !DILocation(line: 2434, column: 12, scope: !6034)
!6053 = !DILocation(line: 2434, column: 3, scope: !6034)
!6054 = !DILocation(line: 2434, column: 7, scope: !6034)
!6055 = !DILocation(line: 2434, column: 10, scope: !6034)
!6056 = !DILocation(line: 2435, column: 17, scope: !6034)
!6057 = !DILocation(line: 2435, column: 3, scope: !6034)
!6058 = !DILocation(line: 2435, column: 7, scope: !6034)
!6059 = !DILocation(line: 2435, column: 15, scope: !6034)
!6060 = !DILocation(line: 2436, column: 3, scope: !6034)
!6061 = !DILocation(line: 2436, column: 7, scope: !6034)
!6062 = !DILocation(line: 2436, column: 17, scope: !6034)
!6063 = !DILocation(line: 2437, column: 3, scope: !6034)
!6064 = !DILocation(line: 2437, column: 7, scope: !6034)
!6065 = !DILocation(line: 2437, column: 17, scope: !6034)
!6066 = !DILocation(line: 2438, column: 11, scope: !6034)
!6067 = !DILocation(line: 2438, column: 3, scope: !6034)
!6068 = !DILocation(line: 2438, column: 7, scope: !6034)
!6069 = !DILocation(line: 2438, column: 9, scope: !6034)
!6070 = !DILocation(line: 2440, column: 10, scope: !6034)
!6071 = !DILocation(line: 2440, column: 3, scope: !6034)
!6072 = distinct !DISubprogram(name: "get_sched_window", scope: !3, file: !3, line: 1350, type: !6073, scopeLine: 1352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!6073 = !DISubroutineType(types: !6074)
!6074 = !{!1015, !2218, !2217, !1015, !2195, !1015, !2217, !2217, !2217}
!6075 = !DILocalVariable(name: "ps", arg: 1, scope: !6072, file: !3, line: 1350, type: !2218)
!6076 = !DILocation(line: 1350, column: 40, scope: !6072)
!6077 = !DILocalVariable(name: "nodes_order", arg: 2, scope: !6072, file: !3, line: 1350, type: !2217)
!6078 = !DILocation(line: 1350, column: 49, scope: !6072)
!6079 = !DILocalVariable(name: "i", arg: 3, scope: !6072, file: !3, line: 1350, type: !1015)
!6080 = !DILocation(line: 1350, column: 66, scope: !6072)
!6081 = !DILocalVariable(name: "sched_nodes", arg: 4, scope: !6072, file: !3, line: 1351, type: !2195)
!6082 = !DILocation(line: 1351, column: 13, scope: !6072)
!6083 = !DILocalVariable(name: "ii", arg: 5, scope: !6072, file: !3, line: 1351, type: !1015)
!6084 = !DILocation(line: 1351, column: 30, scope: !6072)
!6085 = !DILocalVariable(name: "start_p", arg: 6, scope: !6072, file: !3, line: 1351, type: !2217)
!6086 = !DILocation(line: 1351, column: 39, scope: !6072)
!6087 = !DILocalVariable(name: "step_p", arg: 7, scope: !6072, file: !3, line: 1351, type: !2217)
!6088 = !DILocation(line: 1351, column: 53, scope: !6072)
!6089 = !DILocalVariable(name: "end_p", arg: 8, scope: !6072, file: !3, line: 1351, type: !2217)
!6090 = !DILocation(line: 1351, column: 66, scope: !6072)
!6091 = !DILocalVariable(name: "start", scope: !6072, file: !3, line: 1353, type: !1015)
!6092 = !DILocation(line: 1353, column: 7, scope: !6072)
!6093 = !DILocalVariable(name: "step", scope: !6072, file: !3, line: 1353, type: !1015)
!6094 = !DILocation(line: 1353, column: 14, scope: !6072)
!6095 = !DILocalVariable(name: "end", scope: !6072, file: !3, line: 1353, type: !1015)
!6096 = !DILocation(line: 1353, column: 20, scope: !6072)
!6097 = !DILocalVariable(name: "e", scope: !6072, file: !3, line: 1354, type: !2174)
!6098 = !DILocation(line: 1354, column: 16, scope: !6072)
!6099 = !DILocalVariable(name: "u", scope: !6072, file: !3, line: 1355, type: !1015)
!6100 = !DILocation(line: 1355, column: 7, scope: !6072)
!6101 = !DILocation(line: 1355, column: 11, scope: !6072)
!6102 = !DILocation(line: 1355, column: 24, scope: !6072)
!6103 = !DILocalVariable(name: "u_node", scope: !6072, file: !3, line: 1356, type: !2166)
!6104 = !DILocation(line: 1356, column: 16, scope: !6072)
!6105 = !DILocation(line: 1356, column: 26, scope: !6072)
!6106 = !DILocation(line: 1356, column: 30, scope: !6072)
!6107 = !DILocation(line: 1356, column: 33, scope: !6072)
!6108 = !DILocation(line: 1356, column: 39, scope: !6072)
!6109 = !DILocalVariable(name: "psp", scope: !6072, file: !3, line: 1357, type: !2195)
!6110 = !DILocation(line: 1357, column: 11, scope: !6072)
!6111 = !DILocation(line: 1357, column: 32, scope: !6072)
!6112 = !DILocation(line: 1357, column: 36, scope: !6072)
!6113 = !DILocation(line: 1357, column: 39, scope: !6072)
!6114 = !DILocation(line: 1357, column: 17, scope: !6072)
!6115 = !DILocalVariable(name: "pss", scope: !6072, file: !3, line: 1358, type: !2195)
!6116 = !DILocation(line: 1358, column: 11, scope: !6072)
!6117 = !DILocation(line: 1358, column: 32, scope: !6072)
!6118 = !DILocation(line: 1358, column: 36, scope: !6072)
!6119 = !DILocation(line: 1358, column: 39, scope: !6072)
!6120 = !DILocation(line: 1358, column: 17, scope: !6072)
!6121 = !DILocalVariable(name: "u_node_preds", scope: !6072, file: !3, line: 1359, type: !2195)
!6122 = !DILocation(line: 1359, column: 11, scope: !6072)
!6123 = !DILocation(line: 1359, column: 26, scope: !6072)
!6124 = !DILocalVariable(name: "u_node_succs", scope: !6072, file: !3, line: 1360, type: !2195)
!6125 = !DILocation(line: 1360, column: 11, scope: !6072)
!6126 = !DILocation(line: 1360, column: 26, scope: !6072)
!6127 = !DILocalVariable(name: "psp_not_empty", scope: !6072, file: !3, line: 1361, type: !1015)
!6128 = !DILocation(line: 1361, column: 7, scope: !6072)
!6129 = !DILocalVariable(name: "pss_not_empty", scope: !6072, file: !3, line: 1362, type: !1015)
!6130 = !DILocation(line: 1362, column: 7, scope: !6072)
!6131 = !DILocation(line: 1365, column: 17, scope: !6072)
!6132 = !DILocation(line: 1365, column: 3, scope: !6072)
!6133 = !DILocation(line: 1366, column: 17, scope: !6072)
!6134 = !DILocation(line: 1366, column: 3, scope: !6072)
!6135 = !DILocation(line: 1367, column: 39, scope: !6072)
!6136 = !DILocation(line: 1367, column: 44, scope: !6072)
!6137 = !DILocation(line: 1367, column: 58, scope: !6072)
!6138 = !DILocation(line: 1367, column: 19, scope: !6072)
!6139 = !DILocation(line: 1367, column: 17, scope: !6072)
!6140 = !DILocation(line: 1368, column: 39, scope: !6072)
!6141 = !DILocation(line: 1368, column: 44, scope: !6072)
!6142 = !DILocation(line: 1368, column: 58, scope: !6072)
!6143 = !DILocation(line: 1368, column: 19, scope: !6072)
!6144 = !DILocation(line: 1368, column: 17, scope: !6072)
!6145 = !DILocation(line: 1370, column: 7, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 1370, column: 7)
!6147 = !DILocation(line: 1370, column: 21, scope: !6146)
!6148 = !DILocation(line: 1370, column: 25, scope: !6146)
!6149 = !DILocation(line: 1370, column: 7, scope: !6072)
!6150 = !DILocalVariable(name: "early_start", scope: !6151, file: !3, line: 1372, type: !1015)
!6151 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1371, column: 5)
!6152 = !DILocation(line: 1372, column: 11, scope: !6151)
!6153 = !DILocation(line: 1374, column: 11, scope: !6151)
!6154 = !DILocation(line: 1375, column: 16, scope: !6155)
!6155 = distinct !DILexicalBlock(scope: !6151, file: !3, line: 1375, column: 7)
!6156 = !DILocation(line: 1375, column: 24, scope: !6155)
!6157 = !DILocation(line: 1375, column: 14, scope: !6155)
!6158 = !DILocation(line: 1375, column: 12, scope: !6155)
!6159 = !DILocation(line: 1375, column: 28, scope: !6160)
!6160 = distinct !DILexicalBlock(scope: !6155, file: !3, line: 1375, column: 7)
!6161 = !DILocation(line: 1375, column: 30, scope: !6160)
!6162 = !DILocation(line: 1375, column: 7, scope: !6155)
!6163 = !DILocalVariable(name: "v_node", scope: !6164, file: !3, line: 1377, type: !2166)
!6164 = distinct !DILexicalBlock(scope: !6160, file: !3, line: 1376, column: 2)
!6165 = !DILocation(line: 1377, column: 17, scope: !6164)
!6166 = !DILocation(line: 1377, column: 26, scope: !6164)
!6167 = !DILocation(line: 1377, column: 29, scope: !6164)
!6168 = !DILocation(line: 1379, column: 15, scope: !6169)
!6169 = distinct !DILexicalBlock(scope: !6164, file: !3, line: 1379, column: 15)
!6170 = !DILocation(line: 1379, column: 15, scope: !6164)
!6171 = !DILocation(line: 1381, column: 17, scope: !6172)
!6172 = distinct !DILexicalBlock(scope: !6169, file: !3, line: 1380, column: 13)
!6173 = !DILocation(line: 1381, column: 8, scope: !6172)
!6174 = !DILocation(line: 1382, column: 31, scope: !6172)
!6175 = !DILocation(line: 1382, column: 42, scope: !6172)
!6176 = !DILocation(line: 1382, column: 15, scope: !6172)
!6177 = !DILocation(line: 1383, column: 17, scope: !6172)
!6178 = !DILocation(line: 1385, column: 35, scope: !6172)
!6179 = !DILocation(line: 1385, column: 43, scope: !6172)
!6180 = !DILocation(line: 1386, column: 10, scope: !6172)
!6181 = !DILocation(line: 1386, column: 35, scope: !6172)
!6182 = !DILocation(line: 1386, column: 43, scope: !6172)
!6183 = !DILocation(line: 1386, column: 49, scope: !6172)
!6184 = !DILocation(line: 1383, column: 8, scope: !6172)
!6185 = !DILocation(line: 1388, column: 13, scope: !6172)
!6186 = !DILocation(line: 1390, column: 8, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6164, file: !3, line: 1390, column: 8)
!6188 = !DILocation(line: 1390, column: 8, scope: !6164)
!6189 = !DILocalVariable(name: "p_st", scope: !6190, file: !3, line: 1392, type: !1015)
!6190 = distinct !DILexicalBlock(scope: !6187, file: !3, line: 1391, column: 6)
!6191 = !DILocation(line: 1392, column: 19, scope: !6190)
!6192 = !DILocation(line: 1392, column: 26, scope: !6190)
!6193 = !DILocation(line: 1395, column: 17, scope: !6190)
!6194 = !DILocation(line: 1394, column: 27, scope: !6190)
!6195 = !DILocation(line: 1397, column: 19, scope: !6196)
!6196 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 1397, column: 19)
!6197 = !DILocation(line: 1397, column: 19, scope: !6190)
!6198 = !DILocation(line: 1398, column: 26, scope: !6196)
!6199 = !DILocation(line: 1400, column: 26, scope: !6196)
!6200 = !DILocation(line: 1400, column: 32, scope: !6196)
!6201 = !DILocation(line: 1400, column: 45, scope: !6196)
!6202 = !DILocation(line: 1400, column: 48, scope: !6196)
!6203 = !DILocation(line: 1398, column: 17, scope: !6196)
!6204 = !DILocation(line: 1402, column: 12, scope: !6205)
!6205 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 1402, column: 12)
!6206 = !DILocation(line: 1402, column: 15, scope: !6205)
!6207 = !DILocation(line: 1402, column: 25, scope: !6205)
!6208 = !DILocation(line: 1402, column: 12, scope: !6190)
!6209 = !DILocation(line: 1403, column: 9, scope: !6205)
!6210 = !DILocation(line: 1403, column: 7, scope: !6205)
!6211 = !DILocation(line: 1403, column: 3, scope: !6205)
!6212 = !DILocation(line: 1404, column: 6, scope: !6190)
!6213 = !DILocation(line: 1405, column: 19, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6187, file: !3, line: 1405, column: 19)
!6215 = !DILocation(line: 1405, column: 19, scope: !6187)
!6216 = !DILocation(line: 1406, column: 22, scope: !6214)
!6217 = !DILocation(line: 1406, column: 13, scope: !6214)
!6218 = !DILocation(line: 1407, column: 2, scope: !6164)
!6219 = !DILocation(line: 1375, column: 40, scope: !6160)
!6220 = !DILocation(line: 1375, column: 43, scope: !6160)
!6221 = !DILocation(line: 1375, column: 38, scope: !6160)
!6222 = !DILocation(line: 1375, column: 7, scope: !6160)
!6223 = distinct !{!6223, !6162, !6224}
!6224 = !DILocation(line: 1407, column: 2, scope: !6155)
!6225 = !DILocation(line: 1408, column: 15, scope: !6151)
!6226 = !DILocation(line: 1408, column: 13, scope: !6151)
!6227 = !DILocation(line: 1409, column: 13, scope: !6151)
!6228 = !DILocation(line: 1409, column: 11, scope: !6151)
!6229 = !DILocation(line: 1411, column: 12, scope: !6151)
!6230 = !DILocation(line: 1413, column: 11, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6151, file: !3, line: 1413, column: 11)
!6232 = !DILocation(line: 1413, column: 11, scope: !6151)
!6233 = !DILocation(line: 1414, column: 18, scope: !6231)
!6234 = !DILocation(line: 1416, column: 4, scope: !6231)
!6235 = !DILocation(line: 1416, column: 12, scope: !6231)
!6236 = !DILocation(line: 1416, column: 18, scope: !6231)
!6237 = !DILocation(line: 1416, column: 43, scope: !6231)
!6238 = !DILocation(line: 1416, column: 50, scope: !6231)
!6239 = !DILocation(line: 1416, column: 55, scope: !6231)
!6240 = !DILocation(line: 1414, column: 9, scope: !6231)
!6241 = !DILocation(line: 1417, column: 5, scope: !6151)
!6242 = !DILocation(line: 1419, column: 13, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1419, column: 12)
!6244 = !DILocation(line: 1419, column: 27, scope: !6243)
!6245 = !DILocation(line: 1419, column: 30, scope: !6243)
!6246 = !DILocation(line: 1419, column: 12, scope: !6146)
!6247 = !DILocalVariable(name: "late_start", scope: !6248, file: !3, line: 1421, type: !1015)
!6248 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 1420, column: 5)
!6249 = !DILocation(line: 1421, column: 11, scope: !6248)
!6250 = !DILocation(line: 1423, column: 11, scope: !6248)
!6251 = !DILocation(line: 1424, column: 16, scope: !6252)
!6252 = distinct !DILexicalBlock(scope: !6248, file: !3, line: 1424, column: 7)
!6253 = !DILocation(line: 1424, column: 24, scope: !6252)
!6254 = !DILocation(line: 1424, column: 14, scope: !6252)
!6255 = !DILocation(line: 1424, column: 12, scope: !6252)
!6256 = !DILocation(line: 1424, column: 29, scope: !6257)
!6257 = distinct !DILexicalBlock(scope: !6252, file: !3, line: 1424, column: 7)
!6258 = !DILocation(line: 1424, column: 31, scope: !6257)
!6259 = !DILocation(line: 1424, column: 7, scope: !6252)
!6260 = !DILocalVariable(name: "v_node", scope: !6261, file: !3, line: 1426, type: !2166)
!6261 = distinct !DILexicalBlock(scope: !6257, file: !3, line: 1425, column: 2)
!6262 = !DILocation(line: 1426, column: 17, scope: !6261)
!6263 = !DILocation(line: 1426, column: 26, scope: !6261)
!6264 = !DILocation(line: 1426, column: 29, scope: !6261)
!6265 = !DILocation(line: 1428, column: 15, scope: !6266)
!6266 = distinct !DILexicalBlock(scope: !6261, file: !3, line: 1428, column: 15)
!6267 = !DILocation(line: 1428, column: 15, scope: !6261)
!6268 = !DILocation(line: 1430, column: 24, scope: !6269)
!6269 = distinct !DILexicalBlock(scope: !6266, file: !3, line: 1429, column: 13)
!6270 = !DILocation(line: 1430, column: 15, scope: !6269)
!6271 = !DILocation(line: 1431, column: 31, scope: !6269)
!6272 = !DILocation(line: 1431, column: 42, scope: !6269)
!6273 = !DILocation(line: 1431, column: 15, scope: !6269)
!6274 = !DILocation(line: 1432, column: 24, scope: !6269)
!6275 = !DILocation(line: 1434, column: 49, scope: !6269)
!6276 = !DILocation(line: 1434, column: 57, scope: !6269)
!6277 = !DILocation(line: 1435, column: 24, scope: !6269)
!6278 = !DILocation(line: 1435, column: 49, scope: !6269)
!6279 = !DILocation(line: 1435, column: 57, scope: !6269)
!6280 = !DILocation(line: 1435, column: 63, scope: !6269)
!6281 = !DILocation(line: 1432, column: 15, scope: !6269)
!6282 = !DILocation(line: 1437, column: 13, scope: !6269)
!6283 = !DILocation(line: 1439, column: 8, scope: !6284)
!6284 = distinct !DILexicalBlock(scope: !6261, file: !3, line: 1439, column: 8)
!6285 = !DILocation(line: 1439, column: 8, scope: !6261)
!6286 = !DILocalVariable(name: "s_st", scope: !6287, file: !3, line: 1441, type: !1015)
!6287 = distinct !DILexicalBlock(scope: !6284, file: !3, line: 1440, column: 6)
!6288 = !DILocation(line: 1441, column: 19, scope: !6287)
!6289 = !DILocation(line: 1441, column: 26, scope: !6287)
!6290 = !DILocation(line: 1443, column: 28, scope: !6287)
!6291 = !DILocation(line: 1443, column: 26, scope: !6287)
!6292 = !DILocation(line: 1446, column: 19, scope: !6293)
!6293 = distinct !DILexicalBlock(scope: !6287, file: !3, line: 1446, column: 19)
!6294 = !DILocation(line: 1446, column: 19, scope: !6287)
!6295 = !DILocation(line: 1447, column: 26, scope: !6293)
!6296 = !DILocation(line: 1449, column: 26, scope: !6293)
!6297 = !DILocation(line: 1449, column: 32, scope: !6293)
!6298 = !DILocation(line: 1449, column: 44, scope: !6293)
!6299 = !DILocation(line: 1449, column: 47, scope: !6293)
!6300 = !DILocation(line: 1447, column: 17, scope: !6293)
!6301 = !DILocation(line: 1451, column: 12, scope: !6302)
!6302 = distinct !DILexicalBlock(scope: !6287, file: !3, line: 1451, column: 12)
!6303 = !DILocation(line: 1451, column: 15, scope: !6302)
!6304 = !DILocation(line: 1451, column: 25, scope: !6302)
!6305 = !DILocation(line: 1451, column: 12, scope: !6287)
!6306 = !DILocation(line: 1452, column: 9, scope: !6302)
!6307 = !DILocation(line: 1452, column: 7, scope: !6302)
!6308 = !DILocation(line: 1452, column: 3, scope: !6302)
!6309 = !DILocation(line: 1453, column: 18, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6287, file: !3, line: 1453, column: 18)
!6311 = !DILocation(line: 1453, column: 18, scope: !6287)
!6312 = !DILocation(line: 1454, column: 27, scope: !6310)
!6313 = !DILocation(line: 1454, column: 52, scope: !6310)
!6314 = !DILocation(line: 1454, column: 18, scope: !6310)
!6315 = !DILocation(line: 1456, column: 6, scope: !6287)
!6316 = !DILocation(line: 1457, column: 20, scope: !6317)
!6317 = distinct !DILexicalBlock(scope: !6284, file: !3, line: 1457, column: 20)
!6318 = !DILocation(line: 1457, column: 20, scope: !6284)
!6319 = !DILocation(line: 1458, column: 22, scope: !6317)
!6320 = !DILocation(line: 1458, column: 13, scope: !6317)
!6321 = !DILocation(line: 1460, column: 2, scope: !6261)
!6322 = !DILocation(line: 1424, column: 41, scope: !6257)
!6323 = !DILocation(line: 1424, column: 44, scope: !6257)
!6324 = !DILocation(line: 1424, column: 39, scope: !6257)
!6325 = !DILocation(line: 1424, column: 7, scope: !6257)
!6326 = distinct !{!6326, !6259, !6327}
!6327 = !DILocation(line: 1460, column: 2, scope: !6252)
!6328 = !DILocation(line: 1461, column: 15, scope: !6248)
!6329 = !DILocation(line: 1461, column: 13, scope: !6248)
!6330 = !DILocation(line: 1462, column: 13, scope: !6248)
!6331 = !DILocation(line: 1462, column: 11, scope: !6248)
!6332 = !DILocation(line: 1464, column: 12, scope: !6248)
!6333 = !DILocation(line: 1466, column: 11, scope: !6334)
!6334 = distinct !DILexicalBlock(scope: !6248, file: !3, line: 1466, column: 11)
!6335 = !DILocation(line: 1466, column: 11, scope: !6248)
!6336 = !DILocation(line: 1467, column: 18, scope: !6334)
!6337 = !DILocation(line: 1469, column: 18, scope: !6334)
!6338 = !DILocation(line: 1469, column: 26, scope: !6334)
!6339 = !DILocation(line: 1469, column: 32, scope: !6334)
!6340 = !DILocation(line: 1469, column: 57, scope: !6334)
!6341 = !DILocation(line: 1469, column: 64, scope: !6334)
!6342 = !DILocation(line: 1469, column: 69, scope: !6334)
!6343 = !DILocation(line: 1467, column: 9, scope: !6334)
!6344 = !DILocation(line: 1471, column: 5, scope: !6248)
!6345 = !DILocation(line: 1473, column: 12, scope: !6346)
!6346 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 1473, column: 12)
!6347 = !DILocation(line: 1473, column: 26, scope: !6346)
!6348 = !DILocation(line: 1473, column: 29, scope: !6346)
!6349 = !DILocation(line: 1473, column: 12, scope: !6243)
!6350 = !DILocalVariable(name: "early_start", scope: !6351, file: !3, line: 1475, type: !1015)
!6351 = distinct !DILexicalBlock(scope: !6346, file: !3, line: 1474, column: 5)
!6352 = !DILocation(line: 1475, column: 11, scope: !6351)
!6353 = !DILocalVariable(name: "late_start", scope: !6351, file: !3, line: 1476, type: !1015)
!6354 = !DILocation(line: 1476, column: 11, scope: !6351)
!6355 = !DILocalVariable(name: "count_preds", scope: !6351, file: !3, line: 1477, type: !1015)
!6356 = !DILocation(line: 1477, column: 11, scope: !6351)
!6357 = !DILocalVariable(name: "count_succs", scope: !6351, file: !3, line: 1478, type: !1015)
!6358 = !DILocation(line: 1478, column: 11, scope: !6351)
!6359 = !DILocation(line: 1480, column: 13, scope: !6351)
!6360 = !DILocation(line: 1481, column: 11, scope: !6351)
!6361 = !DILocation(line: 1482, column: 16, scope: !6362)
!6362 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 1482, column: 7)
!6363 = !DILocation(line: 1482, column: 24, scope: !6362)
!6364 = !DILocation(line: 1482, column: 14, scope: !6362)
!6365 = !DILocation(line: 1482, column: 12, scope: !6362)
!6366 = !DILocation(line: 1482, column: 28, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6362, file: !3, line: 1482, column: 7)
!6368 = !DILocation(line: 1482, column: 30, scope: !6367)
!6369 = !DILocation(line: 1482, column: 7, scope: !6362)
!6370 = !DILocalVariable(name: "v_node", scope: !6371, file: !3, line: 1484, type: !2166)
!6371 = distinct !DILexicalBlock(scope: !6367, file: !3, line: 1483, column: 2)
!6372 = !DILocation(line: 1484, column: 17, scope: !6371)
!6373 = !DILocation(line: 1484, column: 26, scope: !6371)
!6374 = !DILocation(line: 1484, column: 29, scope: !6371)
!6375 = !DILocation(line: 1486, column: 8, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !6371, file: !3, line: 1486, column: 8)
!6377 = !DILocation(line: 1486, column: 8, scope: !6371)
!6378 = !DILocation(line: 1488, column: 24, scope: !6379)
!6379 = distinct !DILexicalBlock(scope: !6376, file: !3, line: 1487, column: 6)
!6380 = !DILocation(line: 1488, column: 15, scope: !6379)
!6381 = !DILocation(line: 1489, column: 31, scope: !6379)
!6382 = !DILocation(line: 1489, column: 42, scope: !6379)
!6383 = !DILocation(line: 1489, column: 15, scope: !6379)
!6384 = !DILocation(line: 1490, column: 17, scope: !6379)
!6385 = !DILocation(line: 1492, column: 35, scope: !6379)
!6386 = !DILocation(line: 1492, column: 43, scope: !6379)
!6387 = !DILocation(line: 1492, column: 49, scope: !6379)
!6388 = !DILocation(line: 1493, column: 26, scope: !6379)
!6389 = !DILocation(line: 1493, column: 34, scope: !6379)
!6390 = !DILocation(line: 1493, column: 40, scope: !6379)
!6391 = !DILocation(line: 1490, column: 8, scope: !6379)
!6392 = !DILocation(line: 1495, column: 6, scope: !6379)
!6393 = !DILocation(line: 1497, column: 8, scope: !6394)
!6394 = distinct !DILexicalBlock(scope: !6371, file: !3, line: 1497, column: 8)
!6395 = !DILocation(line: 1497, column: 8, scope: !6371)
!6396 = !DILocalVariable(name: "p_st", scope: !6397, file: !3, line: 1499, type: !1015)
!6397 = distinct !DILexicalBlock(scope: !6394, file: !3, line: 1498, column: 6)
!6398 = !DILocation(line: 1499, column: 19, scope: !6397)
!6399 = !DILocation(line: 1499, column: 26, scope: !6397)
!6400 = !DILocation(line: 1501, column: 22, scope: !6397)
!6401 = !DILocation(line: 1501, column: 20, scope: !6397)
!6402 = !DILocation(line: 1505, column: 19, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 1505, column: 19)
!6404 = !DILocation(line: 1505, column: 19, scope: !6397)
!6405 = !DILocation(line: 1506, column: 26, scope: !6403)
!6406 = !DILocation(line: 1508, column: 26, scope: !6403)
!6407 = !DILocation(line: 1508, column: 32, scope: !6403)
!6408 = !DILocation(line: 1508, column: 45, scope: !6403)
!6409 = !DILocation(line: 1508, column: 48, scope: !6403)
!6410 = !DILocation(line: 1506, column: 17, scope: !6403)
!6411 = !DILocation(line: 1510, column: 19, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 1510, column: 19)
!6413 = !DILocation(line: 1510, column: 22, scope: !6412)
!6414 = !DILocation(line: 1510, column: 27, scope: !6412)
!6415 = !DILocation(line: 1510, column: 39, scope: !6412)
!6416 = !DILocation(line: 1510, column: 42, scope: !6412)
!6417 = !DILocation(line: 1510, column: 45, scope: !6412)
!6418 = !DILocation(line: 1510, column: 55, scope: !6412)
!6419 = !DILocation(line: 1510, column: 19, scope: !6397)
!6420 = !DILocation(line: 1511, column: 28, scope: !6412)
!6421 = !DILocation(line: 1511, column: 17, scope: !6412)
!6422 = !DILocation(line: 1513, column: 12, scope: !6423)
!6423 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 1513, column: 12)
!6424 = !DILocation(line: 1513, column: 15, scope: !6423)
!6425 = !DILocation(line: 1513, column: 25, scope: !6423)
!6426 = !DILocation(line: 1513, column: 12, scope: !6397)
!6427 = !DILocation(line: 1514, column: 9, scope: !6423)
!6428 = !DILocation(line: 1514, column: 7, scope: !6423)
!6429 = !DILocation(line: 1514, column: 3, scope: !6423)
!6430 = !DILocation(line: 1515, column: 6, scope: !6397)
!6431 = !DILocation(line: 1516, column: 20, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6394, file: !3, line: 1516, column: 20)
!6433 = !DILocation(line: 1516, column: 20, scope: !6394)
!6434 = !DILocation(line: 1517, column: 22, scope: !6432)
!6435 = !DILocation(line: 1517, column: 13, scope: !6432)
!6436 = !DILocation(line: 1519, column: 2, scope: !6371)
!6437 = !DILocation(line: 1482, column: 40, scope: !6367)
!6438 = !DILocation(line: 1482, column: 43, scope: !6367)
!6439 = !DILocation(line: 1482, column: 38, scope: !6367)
!6440 = !DILocation(line: 1482, column: 7, scope: !6367)
!6441 = distinct !{!6441, !6369, !6442}
!6442 = !DILocation(line: 1519, column: 2, scope: !6362)
!6443 = !DILocation(line: 1520, column: 16, scope: !6444)
!6444 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 1520, column: 7)
!6445 = !DILocation(line: 1520, column: 24, scope: !6444)
!6446 = !DILocation(line: 1520, column: 14, scope: !6444)
!6447 = !DILocation(line: 1520, column: 12, scope: !6444)
!6448 = !DILocation(line: 1520, column: 29, scope: !6449)
!6449 = distinct !DILexicalBlock(scope: !6444, file: !3, line: 1520, column: 7)
!6450 = !DILocation(line: 1520, column: 31, scope: !6449)
!6451 = !DILocation(line: 1520, column: 7, scope: !6444)
!6452 = !DILocalVariable(name: "v_node", scope: !6453, file: !3, line: 1522, type: !2166)
!6453 = distinct !DILexicalBlock(scope: !6449, file: !3, line: 1521, column: 2)
!6454 = !DILocation(line: 1522, column: 17, scope: !6453)
!6455 = !DILocation(line: 1522, column: 26, scope: !6453)
!6456 = !DILocation(line: 1522, column: 29, scope: !6453)
!6457 = !DILocation(line: 1524, column: 8, scope: !6458)
!6458 = distinct !DILexicalBlock(scope: !6453, file: !3, line: 1524, column: 8)
!6459 = !DILocation(line: 1524, column: 8, scope: !6453)
!6460 = !DILocation(line: 1526, column: 24, scope: !6461)
!6461 = distinct !DILexicalBlock(scope: !6458, file: !3, line: 1525, column: 6)
!6462 = !DILocation(line: 1526, column: 15, scope: !6461)
!6463 = !DILocation(line: 1527, column: 31, scope: !6461)
!6464 = !DILocation(line: 1527, column: 42, scope: !6461)
!6465 = !DILocation(line: 1527, column: 15, scope: !6461)
!6466 = !DILocation(line: 1528, column: 17, scope: !6461)
!6467 = !DILocation(line: 1530, column: 35, scope: !6461)
!6468 = !DILocation(line: 1530, column: 43, scope: !6461)
!6469 = !DILocation(line: 1530, column: 49, scope: !6461)
!6470 = !DILocation(line: 1531, column: 26, scope: !6461)
!6471 = !DILocation(line: 1531, column: 34, scope: !6461)
!6472 = !DILocation(line: 1531, column: 40, scope: !6461)
!6473 = !DILocation(line: 1528, column: 8, scope: !6461)
!6474 = !DILocation(line: 1533, column: 6, scope: !6461)
!6475 = !DILocation(line: 1535, column: 8, scope: !6476)
!6476 = distinct !DILexicalBlock(scope: !6453, file: !3, line: 1535, column: 8)
!6477 = !DILocation(line: 1535, column: 8, scope: !6453)
!6478 = !DILocalVariable(name: "s_st", scope: !6479, file: !3, line: 1537, type: !1015)
!6479 = distinct !DILexicalBlock(scope: !6476, file: !3, line: 1536, column: 6)
!6480 = !DILocation(line: 1537, column: 19, scope: !6479)
!6481 = !DILocation(line: 1537, column: 26, scope: !6479)
!6482 = !DILocation(line: 1539, column: 21, scope: !6479)
!6483 = !DILocation(line: 1539, column: 19, scope: !6479)
!6484 = !DILocation(line: 1543, column: 19, scope: !6485)
!6485 = distinct !DILexicalBlock(scope: !6479, file: !3, line: 1543, column: 19)
!6486 = !DILocation(line: 1543, column: 19, scope: !6479)
!6487 = !DILocation(line: 1544, column: 26, scope: !6485)
!6488 = !DILocation(line: 1546, column: 26, scope: !6485)
!6489 = !DILocation(line: 1546, column: 32, scope: !6485)
!6490 = !DILocation(line: 1546, column: 44, scope: !6485)
!6491 = !DILocation(line: 1546, column: 47, scope: !6485)
!6492 = !DILocation(line: 1544, column: 17, scope: !6485)
!6493 = !DILocation(line: 1548, column: 20, scope: !6494)
!6494 = distinct !DILexicalBlock(scope: !6479, file: !3, line: 1548, column: 20)
!6495 = !DILocation(line: 1548, column: 23, scope: !6494)
!6496 = !DILocation(line: 1548, column: 28, scope: !6494)
!6497 = !DILocation(line: 1548, column: 40, scope: !6494)
!6498 = !DILocation(line: 1548, column: 43, scope: !6494)
!6499 = !DILocation(line: 1548, column: 46, scope: !6494)
!6500 = !DILocation(line: 1548, column: 56, scope: !6494)
!6501 = !DILocation(line: 1548, column: 20, scope: !6479)
!6502 = !DILocation(line: 1549, column: 29, scope: !6494)
!6503 = !DILocation(line: 1549, column: 18, scope: !6494)
!6504 = !DILocation(line: 1551, column: 12, scope: !6505)
!6505 = distinct !DILexicalBlock(scope: !6479, file: !3, line: 1551, column: 12)
!6506 = !DILocation(line: 1551, column: 15, scope: !6505)
!6507 = !DILocation(line: 1551, column: 25, scope: !6505)
!6508 = !DILocation(line: 1551, column: 12, scope: !6479)
!6509 = !DILocation(line: 1552, column: 11, scope: !6505)
!6510 = !DILocation(line: 1552, column: 9, scope: !6505)
!6511 = !DILocation(line: 1552, column: 3, scope: !6505)
!6512 = !DILocation(line: 1553, column: 6, scope: !6479)
!6513 = !DILocation(line: 1554, column: 20, scope: !6514)
!6514 = distinct !DILexicalBlock(scope: !6476, file: !3, line: 1554, column: 20)
!6515 = !DILocation(line: 1554, column: 20, scope: !6476)
!6516 = !DILocation(line: 1555, column: 22, scope: !6514)
!6517 = !DILocation(line: 1555, column: 13, scope: !6514)
!6518 = !DILocation(line: 1557, column: 2, scope: !6453)
!6519 = !DILocation(line: 1520, column: 41, scope: !6449)
!6520 = !DILocation(line: 1520, column: 44, scope: !6449)
!6521 = !DILocation(line: 1520, column: 39, scope: !6449)
!6522 = !DILocation(line: 1520, column: 7, scope: !6449)
!6523 = distinct !{!6523, !6451, !6524}
!6524 = !DILocation(line: 1557, column: 2, scope: !6444)
!6525 = !DILocation(line: 1558, column: 15, scope: !6351)
!6526 = !DILocation(line: 1558, column: 13, scope: !6351)
!6527 = !DILocation(line: 1559, column: 13, scope: !6351)
!6528 = !DILocation(line: 1559, column: 11, scope: !6351)
!6529 = !DILocation(line: 1560, column: 12, scope: !6351)
!6530 = !DILocation(line: 1563, column: 11, scope: !6531)
!6531 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 1563, column: 11)
!6532 = !DILocation(line: 1563, column: 26, scope: !6531)
!6533 = !DILocation(line: 1563, column: 23, scope: !6531)
!6534 = !DILocation(line: 1563, column: 11, scope: !6351)
!6535 = !DILocalVariable(name: "old_start", scope: !6536, file: !3, line: 1565, type: !1015)
!6536 = distinct !DILexicalBlock(scope: !6531, file: !3, line: 1564, column: 9)
!6537 = !DILocation(line: 1565, column: 15, scope: !6536)
!6538 = !DILocation(line: 1565, column: 27, scope: !6536)
!6539 = !DILocation(line: 1567, column: 19, scope: !6536)
!6540 = !DILocation(line: 1567, column: 23, scope: !6536)
!6541 = !DILocation(line: 1567, column: 17, scope: !6536)
!6542 = !DILocation(line: 1568, column: 17, scope: !6536)
!6543 = !DILocation(line: 1568, column: 27, scope: !6536)
!6544 = !DILocation(line: 1568, column: 15, scope: !6536)
!6545 = !DILocation(line: 1569, column: 16, scope: !6536)
!6546 = !DILocation(line: 1570, column: 9, scope: !6536)
!6547 = !DILocation(line: 1571, column: 5, scope: !6351)
!6548 = !DILocation(line: 1574, column: 15, scope: !6549)
!6549 = distinct !DILexicalBlock(scope: !6346, file: !3, line: 1573, column: 5)
!6550 = !DILocation(line: 1574, column: 13, scope: !6549)
!6551 = !DILocation(line: 1575, column: 13, scope: !6549)
!6552 = !DILocation(line: 1575, column: 21, scope: !6549)
!6553 = !DILocation(line: 1575, column: 19, scope: !6549)
!6554 = !DILocation(line: 1575, column: 11, scope: !6549)
!6555 = !DILocation(line: 1576, column: 12, scope: !6549)
!6556 = !DILocation(line: 1579, column: 14, scope: !6072)
!6557 = !DILocation(line: 1579, column: 4, scope: !6072)
!6558 = !DILocation(line: 1579, column: 12, scope: !6072)
!6559 = !DILocation(line: 1580, column: 13, scope: !6072)
!6560 = !DILocation(line: 1580, column: 4, scope: !6072)
!6561 = !DILocation(line: 1580, column: 11, scope: !6072)
!6562 = !DILocation(line: 1581, column: 12, scope: !6072)
!6563 = !DILocation(line: 1581, column: 4, scope: !6072)
!6564 = !DILocation(line: 1581, column: 10, scope: !6072)
!6565 = !DILocation(line: 1582, column: 3, scope: !6072)
!6566 = !DILocation(line: 1583, column: 3, scope: !6072)
!6567 = !DILocation(line: 1585, column: 8, scope: !6568)
!6568 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 1585, column: 7)
!6569 = !DILocation(line: 1585, column: 17, scope: !6568)
!6570 = !DILocation(line: 1585, column: 14, scope: !6568)
!6571 = !DILocation(line: 1585, column: 21, scope: !6568)
!6572 = !DILocation(line: 1585, column: 24, scope: !6568)
!6573 = !DILocation(line: 1585, column: 29, scope: !6568)
!6574 = !DILocation(line: 1585, column: 35, scope: !6568)
!6575 = !DILocation(line: 1585, column: 39, scope: !6568)
!6576 = !DILocation(line: 1585, column: 48, scope: !6568)
!6577 = !DILocation(line: 1585, column: 45, scope: !6568)
!6578 = !DILocation(line: 1585, column: 52, scope: !6568)
!6579 = !DILocation(line: 1585, column: 55, scope: !6568)
!6580 = !DILocation(line: 1585, column: 60, scope: !6568)
!6581 = !DILocation(line: 1585, column: 7, scope: !6072)
!6582 = !DILocation(line: 1587, column: 11, scope: !6583)
!6583 = distinct !DILexicalBlock(scope: !6584, file: !3, line: 1587, column: 11)
!6584 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 1586, column: 5)
!6585 = !DILocation(line: 1587, column: 11, scope: !6584)
!6586 = !DILocation(line: 1588, column: 11, scope: !6583)
!6587 = !DILocation(line: 1589, column: 4, scope: !6583)
!6588 = !DILocation(line: 1589, column: 11, scope: !6583)
!6589 = !DILocation(line: 1589, column: 16, scope: !6583)
!6590 = !DILocation(line: 1588, column: 2, scope: !6583)
!6591 = !DILocation(line: 1590, column: 5, scope: !6584)
!6592 = !DILocation(line: 1593, column: 5, scope: !6072)
!6593 = !DILocation(line: 1594, column: 1, scope: !6072)
!6594 = distinct !DISubprogram(name: "calculate_must_precede_follow", scope: !3, file: !3, line: 1611, type: !6595, scopeLine: 1614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!6595 = !DISubroutineType(types: !6596)
!6596 = !{null, !2166, !1015, !1015, !1015, !1015, !2195, !2195, !2195}
!6597 = !DILocalVariable(name: "u_node", arg: 1, scope: !6594, file: !3, line: 1611, type: !2166)
!6598 = !DILocation(line: 1611, column: 45, scope: !6594)
!6599 = !DILocalVariable(name: "start", arg: 2, scope: !6594, file: !3, line: 1611, type: !1015)
!6600 = !DILocation(line: 1611, column: 57, scope: !6594)
!6601 = !DILocalVariable(name: "end", arg: 3, scope: !6594, file: !3, line: 1611, type: !1015)
!6602 = !DILocation(line: 1611, column: 68, scope: !6594)
!6603 = !DILocalVariable(name: "step", arg: 4, scope: !6594, file: !3, line: 1612, type: !1015)
!6604 = !DILocation(line: 1612, column: 15, scope: !6594)
!6605 = !DILocalVariable(name: "ii", arg: 5, scope: !6594, file: !3, line: 1612, type: !1015)
!6606 = !DILocation(line: 1612, column: 25, scope: !6594)
!6607 = !DILocalVariable(name: "sched_nodes", arg: 6, scope: !6594, file: !3, line: 1612, type: !2195)
!6608 = !DILocation(line: 1612, column: 37, scope: !6594)
!6609 = !DILocalVariable(name: "must_precede", arg: 7, scope: !6594, file: !3, line: 1613, type: !2195)
!6610 = !DILocation(line: 1613, column: 19, scope: !6594)
!6611 = !DILocalVariable(name: "must_follow", arg: 8, scope: !6594, file: !3, line: 1613, type: !2195)
!6612 = !DILocation(line: 1613, column: 41, scope: !6594)
!6613 = !DILocalVariable(name: "e", scope: !6594, file: !3, line: 1615, type: !2174)
!6614 = !DILocation(line: 1615, column: 16, scope: !6594)
!6615 = !DILocalVariable(name: "first_cycle_in_window", scope: !6594, file: !3, line: 1616, type: !1015)
!6616 = !DILocation(line: 1616, column: 7, scope: !6594)
!6617 = !DILocalVariable(name: "last_cycle_in_window", scope: !6594, file: !3, line: 1616, type: !1015)
!6618 = !DILocation(line: 1616, column: 30, scope: !6594)
!6619 = !DILocation(line: 1618, column: 3, scope: !6594)
!6620 = !DILocation(line: 1627, column: 28, scope: !6594)
!6621 = !DILocation(line: 1627, column: 33, scope: !6594)
!6622 = !DILocation(line: 1627, column: 27, scope: !6594)
!6623 = !DILocation(line: 1627, column: 41, scope: !6594)
!6624 = !DILocation(line: 1627, column: 49, scope: !6594)
!6625 = !DILocation(line: 1627, column: 55, scope: !6594)
!6626 = !DILocation(line: 1627, column: 53, scope: !6594)
!6627 = !DILocation(line: 1627, column: 25, scope: !6594)
!6628 = !DILocation(line: 1628, column: 27, scope: !6594)
!6629 = !DILocation(line: 1628, column: 32, scope: !6594)
!6630 = !DILocation(line: 1628, column: 26, scope: !6594)
!6631 = !DILocation(line: 1628, column: 40, scope: !6594)
!6632 = !DILocation(line: 1628, column: 46, scope: !6594)
!6633 = !DILocation(line: 1628, column: 44, scope: !6594)
!6634 = !DILocation(line: 1628, column: 53, scope: !6594)
!6635 = !DILocation(line: 1628, column: 24, scope: !6594)
!6636 = !DILocation(line: 1630, column: 17, scope: !6594)
!6637 = !DILocation(line: 1630, column: 3, scope: !6594)
!6638 = !DILocation(line: 1631, column: 17, scope: !6594)
!6639 = !DILocation(line: 1631, column: 3, scope: !6594)
!6640 = !DILocation(line: 1633, column: 7, scope: !6641)
!6641 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 1633, column: 7)
!6642 = !DILocation(line: 1633, column: 7, scope: !6594)
!6643 = !DILocation(line: 1634, column: 14, scope: !6641)
!6644 = !DILocation(line: 1634, column: 5, scope: !6641)
!6645 = !DILocation(line: 1647, column: 12, scope: !6646)
!6646 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 1647, column: 3)
!6647 = !DILocation(line: 1647, column: 20, scope: !6646)
!6648 = !DILocation(line: 1647, column: 10, scope: !6646)
!6649 = !DILocation(line: 1647, column: 8, scope: !6646)
!6650 = !DILocation(line: 1647, column: 24, scope: !6651)
!6651 = distinct !DILexicalBlock(scope: !6646, file: !3, line: 1647, column: 3)
!6652 = !DILocation(line: 1647, column: 26, scope: !6651)
!6653 = !DILocation(line: 1647, column: 3, scope: !6646)
!6654 = !DILocation(line: 1648, column: 9, scope: !6655)
!6655 = distinct !DILexicalBlock(scope: !6651, file: !3, line: 1648, column: 9)
!6656 = !DILocation(line: 1649, column: 2, scope: !6655)
!6657 = !DILocation(line: 1649, column: 7, scope: !6655)
!6658 = !DILocation(line: 1649, column: 30, scope: !6655)
!6659 = !DILocation(line: 1649, column: 33, scope: !6655)
!6660 = !DILocation(line: 1649, column: 44, scope: !6655)
!6661 = !DILocation(line: 1649, column: 42, scope: !6655)
!6662 = !DILocation(line: 1649, column: 27, scope: !6655)
!6663 = !DILocation(line: 1650, column: 14, scope: !6655)
!6664 = !DILocation(line: 1649, column: 49, scope: !6655)
!6665 = !DILocation(line: 1648, column: 9, scope: !6651)
!6666 = !DILocation(line: 1652, column: 6, scope: !6667)
!6667 = distinct !DILexicalBlock(scope: !6668, file: !3, line: 1652, column: 6)
!6668 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 1651, column: 7)
!6669 = !DILocation(line: 1652, column: 6, scope: !6668)
!6670 = !DILocation(line: 1653, column: 13, scope: !6667)
!6671 = !DILocation(line: 1653, column: 31, scope: !6667)
!6672 = !DILocation(line: 1653, column: 34, scope: !6667)
!6673 = !DILocation(line: 1653, column: 39, scope: !6667)
!6674 = !DILocation(line: 1653, column: 4, scope: !6667)
!6675 = !DILocation(line: 1655, column: 11, scope: !6668)
!6676 = !DILocation(line: 1655, column: 25, scope: !6668)
!6677 = !DILocation(line: 1655, column: 28, scope: !6668)
!6678 = !DILocation(line: 1655, column: 33, scope: !6668)
!6679 = !DILocation(line: 1655, column: 2, scope: !6668)
!6680 = !DILocation(line: 1656, column: 7, scope: !6668)
!6681 = !DILocation(line: 1650, column: 35, scope: !6655)
!6682 = !DILocation(line: 1647, column: 36, scope: !6651)
!6683 = !DILocation(line: 1647, column: 39, scope: !6651)
!6684 = !DILocation(line: 1647, column: 34, scope: !6651)
!6685 = !DILocation(line: 1647, column: 3, scope: !6651)
!6686 = distinct !{!6686, !6653, !6687}
!6687 = !DILocation(line: 1656, column: 7, scope: !6646)
!6688 = !DILocation(line: 1658, column: 7, scope: !6689)
!6689 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 1658, column: 7)
!6690 = !DILocation(line: 1658, column: 7, scope: !6594)
!6691 = !DILocation(line: 1659, column: 14, scope: !6689)
!6692 = !DILocation(line: 1659, column: 5, scope: !6689)
!6693 = !DILocation(line: 1672, column: 12, scope: !6694)
!6694 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 1672, column: 3)
!6695 = !DILocation(line: 1672, column: 20, scope: !6694)
!6696 = !DILocation(line: 1672, column: 10, scope: !6694)
!6697 = !DILocation(line: 1672, column: 8, scope: !6694)
!6698 = !DILocation(line: 1672, column: 25, scope: !6699)
!6699 = distinct !DILexicalBlock(scope: !6694, file: !3, line: 1672, column: 3)
!6700 = !DILocation(line: 1672, column: 27, scope: !6699)
!6701 = !DILocation(line: 1672, column: 3, scope: !6694)
!6702 = !DILocation(line: 1673, column: 9, scope: !6703)
!6703 = distinct !DILexicalBlock(scope: !6699, file: !3, line: 1673, column: 9)
!6704 = !DILocation(line: 1674, column: 2, scope: !6703)
!6705 = !DILocation(line: 1674, column: 7, scope: !6703)
!6706 = !DILocation(line: 1674, column: 31, scope: !6703)
!6707 = !DILocation(line: 1674, column: 34, scope: !6703)
!6708 = !DILocation(line: 1674, column: 45, scope: !6703)
!6709 = !DILocation(line: 1674, column: 43, scope: !6703)
!6710 = !DILocation(line: 1674, column: 28, scope: !6703)
!6711 = !DILocation(line: 1675, column: 14, scope: !6703)
!6712 = !DILocation(line: 1674, column: 50, scope: !6703)
!6713 = !DILocation(line: 1673, column: 9, scope: !6699)
!6714 = !DILocation(line: 1677, column: 6, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6716, file: !3, line: 1677, column: 6)
!6716 = distinct !DILexicalBlock(scope: !6703, file: !3, line: 1676, column: 7)
!6717 = !DILocation(line: 1677, column: 6, scope: !6716)
!6718 = !DILocation(line: 1678, column: 13, scope: !6715)
!6719 = !DILocation(line: 1678, column: 31, scope: !6715)
!6720 = !DILocation(line: 1678, column: 34, scope: !6715)
!6721 = !DILocation(line: 1678, column: 40, scope: !6715)
!6722 = !DILocation(line: 1678, column: 4, scope: !6715)
!6723 = !DILocation(line: 1680, column: 11, scope: !6716)
!6724 = !DILocation(line: 1680, column: 24, scope: !6716)
!6725 = !DILocation(line: 1680, column: 27, scope: !6716)
!6726 = !DILocation(line: 1680, column: 33, scope: !6716)
!6727 = !DILocation(line: 1680, column: 2, scope: !6716)
!6728 = !DILocation(line: 1681, column: 7, scope: !6716)
!6729 = !DILocation(line: 1675, column: 34, scope: !6703)
!6730 = !DILocation(line: 1672, column: 37, scope: !6699)
!6731 = !DILocation(line: 1672, column: 40, scope: !6699)
!6732 = !DILocation(line: 1672, column: 35, scope: !6699)
!6733 = !DILocation(line: 1672, column: 3, scope: !6699)
!6734 = distinct !{!6734, !6701, !6735}
!6735 = !DILocation(line: 1681, column: 7, scope: !6694)
!6736 = !DILocation(line: 1683, column: 7, scope: !6737)
!6737 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 1683, column: 7)
!6738 = !DILocation(line: 1683, column: 7, scope: !6594)
!6739 = !DILocation(line: 1684, column: 14, scope: !6737)
!6740 = !DILocation(line: 1684, column: 5, scope: !6737)
!6741 = !DILocation(line: 1685, column: 1, scope: !6594)
!6742 = distinct !DISubprogram(name: "try_scheduling_node_in_cycle", scope: !3, file: !3, line: 1698, type: !6743, scopeLine: 1702, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!6743 = !DISubroutineType(types: !6744)
!6744 = !{!1226, !2218, !2166, !1015, !1015, !2195, !2217, !2195, !2195}
!6745 = !DILocalVariable(name: "ps", arg: 1, scope: !6742, file: !3, line: 1698, type: !2218)
!6746 = !DILocation(line: 1698, column: 52, scope: !6742)
!6747 = !DILocalVariable(name: "u_node", arg: 2, scope: !6742, file: !3, line: 1698, type: !2166)
!6748 = !DILocation(line: 1698, column: 69, scope: !6742)
!6749 = !DILocalVariable(name: "u", arg: 3, scope: !6742, file: !3, line: 1699, type: !1015)
!6750 = !DILocation(line: 1699, column: 14, scope: !6742)
!6751 = !DILocalVariable(name: "cycle", arg: 4, scope: !6742, file: !3, line: 1699, type: !1015)
!6752 = !DILocation(line: 1699, column: 21, scope: !6742)
!6753 = !DILocalVariable(name: "sched_nodes", arg: 5, scope: !6742, file: !3, line: 1699, type: !2195)
!6754 = !DILocation(line: 1699, column: 36, scope: !6742)
!6755 = !DILocalVariable(name: "num_splits", arg: 6, scope: !6742, file: !3, line: 1700, type: !2217)
!6756 = !DILocation(line: 1700, column: 15, scope: !6742)
!6757 = !DILocalVariable(name: "must_precede", arg: 7, scope: !6742, file: !3, line: 1700, type: !2195)
!6758 = !DILocation(line: 1700, column: 35, scope: !6742)
!6759 = !DILocalVariable(name: "must_follow", arg: 8, scope: !6742, file: !3, line: 1701, type: !2195)
!6760 = !DILocation(line: 1701, column: 18, scope: !6742)
!6761 = !DILocalVariable(name: "psi", scope: !6742, file: !3, line: 1703, type: !2226)
!6762 = !DILocation(line: 1703, column: 15, scope: !6742)
!6763 = !DILocalVariable(name: "success", scope: !6742, file: !3, line: 1704, type: !1226)
!6764 = !DILocation(line: 1704, column: 8, scope: !6742)
!6765 = !DILocation(line: 1706, column: 28, scope: !6742)
!6766 = !DILocation(line: 1706, column: 32, scope: !6742)
!6767 = !DILocation(line: 1706, column: 3, scope: !6742)
!6768 = !DILocation(line: 1707, column: 38, scope: !6742)
!6769 = !DILocation(line: 1707, column: 42, scope: !6742)
!6770 = !DILocation(line: 1707, column: 50, scope: !6742)
!6771 = !DILocation(line: 1708, column: 10, scope: !6742)
!6772 = !DILocation(line: 1708, column: 24, scope: !6742)
!6773 = !DILocation(line: 1707, column: 9, scope: !6742)
!6774 = !DILocation(line: 1707, column: 7, scope: !6742)
!6775 = !DILocation(line: 1709, column: 7, scope: !6776)
!6776 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 1709, column: 7)
!6777 = !DILocation(line: 1709, column: 7, scope: !6742)
!6778 = !DILocation(line: 1711, column: 29, scope: !6779)
!6779 = distinct !DILexicalBlock(scope: !6776, file: !3, line: 1710, column: 5)
!6780 = !DILocation(line: 1711, column: 7, scope: !6779)
!6781 = !DILocation(line: 1711, column: 27, scope: !6779)
!6782 = !DILocation(line: 1712, column: 16, scope: !6779)
!6783 = !DILocation(line: 1712, column: 29, scope: !6779)
!6784 = !DILocation(line: 1712, column: 7, scope: !6779)
!6785 = !DILocation(line: 1713, column: 15, scope: !6779)
!6786 = !DILocation(line: 1714, column: 8, scope: !6779)
!6787 = !DILocation(line: 1714, column: 19, scope: !6779)
!6788 = !DILocation(line: 1715, column: 11, scope: !6789)
!6789 = distinct !DILexicalBlock(scope: !6779, file: !3, line: 1715, column: 11)
!6790 = !DILocation(line: 1715, column: 11, scope: !6779)
!6791 = !DILocation(line: 1716, column: 11, scope: !6789)
!6792 = !DILocation(line: 1716, column: 53, scope: !6789)
!6793 = !DILocation(line: 1716, column: 2, scope: !6789)
!6794 = !DILocation(line: 1718, column: 5, scope: !6779)
!6795 = !DILocation(line: 1720, column: 10, scope: !6742)
!6796 = !DILocation(line: 1720, column: 3, scope: !6742)
!6797 = distinct !DISubprogram(name: "verify_partial_schedule", scope: !3, file: !3, line: 2013, type: !6798, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!6798 = !DISubroutineType(types: !6799)
!6799 = !{null, !2218, !2195}
!6800 = !DILocalVariable(name: "ps", arg: 1, scope: !6797, file: !3, line: 2013, type: !2218)
!6801 = !DILocation(line: 2013, column: 47, scope: !6797)
!6802 = !DILocalVariable(name: "sched_nodes", arg: 2, scope: !6797, file: !3, line: 2013, type: !2195)
!6803 = !DILocation(line: 2013, column: 59, scope: !6797)
!6804 = !DILocalVariable(name: "row", scope: !6797, file: !3, line: 2015, type: !1015)
!6805 = !DILocation(line: 2015, column: 7, scope: !6797)
!6806 = !DILocalVariable(name: "crr_insn", scope: !6797, file: !3, line: 2016, type: !2226)
!6807 = !DILocation(line: 2016, column: 15, scope: !6797)
!6808 = !DILocation(line: 2018, column: 12, scope: !6809)
!6809 = distinct !DILexicalBlock(scope: !6797, file: !3, line: 2018, column: 3)
!6810 = !DILocation(line: 2018, column: 8, scope: !6809)
!6811 = !DILocation(line: 2018, column: 17, scope: !6812)
!6812 = distinct !DILexicalBlock(scope: !6809, file: !3, line: 2018, column: 3)
!6813 = !DILocation(line: 2018, column: 23, scope: !6812)
!6814 = !DILocation(line: 2018, column: 27, scope: !6812)
!6815 = !DILocation(line: 2018, column: 21, scope: !6812)
!6816 = !DILocation(line: 2018, column: 3, scope: !6809)
!6817 = !DILocation(line: 2019, column: 21, scope: !6818)
!6818 = distinct !DILexicalBlock(scope: !6812, file: !3, line: 2019, column: 5)
!6819 = !DILocation(line: 2019, column: 25, scope: !6818)
!6820 = !DILocation(line: 2019, column: 30, scope: !6818)
!6821 = !DILocation(line: 2019, column: 19, scope: !6818)
!6822 = !DILocation(line: 2019, column: 10, scope: !6818)
!6823 = !DILocation(line: 2019, column: 36, scope: !6824)
!6824 = distinct !DILexicalBlock(scope: !6818, file: !3, line: 2019, column: 5)
!6825 = !DILocation(line: 2019, column: 5, scope: !6818)
!6826 = !DILocalVariable(name: "u", scope: !6827, file: !3, line: 2021, type: !2166)
!6827 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 2020, column: 7)
!6828 = !DILocation(line: 2021, column: 15, scope: !6827)
!6829 = !DILocation(line: 2021, column: 19, scope: !6827)
!6830 = !DILocation(line: 2021, column: 29, scope: !6827)
!6831 = !DILocation(line: 2023, column: 2, scope: !6827)
!6832 = !DILocation(line: 2026, column: 2, scope: !6827)
!6833 = !DILocation(line: 2027, column: 2, scope: !6827)
!6834 = !DILocation(line: 2028, column: 7, scope: !6827)
!6835 = !DILocation(line: 2019, column: 57, scope: !6824)
!6836 = !DILocation(line: 2019, column: 67, scope: !6824)
!6837 = !DILocation(line: 2019, column: 55, scope: !6824)
!6838 = !DILocation(line: 2019, column: 5, scope: !6824)
!6839 = distinct !{!6839, !6825, !6840}
!6840 = !DILocation(line: 2028, column: 7, scope: !6818)
!6841 = !DILocation(line: 2018, column: 34, scope: !6812)
!6842 = !DILocation(line: 2018, column: 3, scope: !6812)
!6843 = distinct !{!6843, !6816, !6844}
!6844 = !DILocation(line: 2028, column: 7, scope: !6809)
!6845 = !DILocation(line: 2029, column: 1, scope: !6797)
!6846 = distinct !DISubprogram(name: "reset_partial_schedule", scope: !3, file: !3, line: 2479, type: !4227, scopeLine: 2480, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!6847 = !DILocalVariable(name: "ps", arg: 1, scope: !6846, file: !3, line: 2479, type: !2218)
!6848 = !DILocation(line: 2479, column: 46, scope: !6846)
!6849 = !DILocalVariable(name: "new_ii", arg: 2, scope: !6846, file: !3, line: 2479, type: !1015)
!6850 = !DILocation(line: 2479, column: 54, scope: !6846)
!6851 = !DILocation(line: 2481, column: 8, scope: !6852)
!6852 = distinct !DILexicalBlock(scope: !6846, file: !3, line: 2481, column: 7)
!6853 = !DILocation(line: 2481, column: 7, scope: !6846)
!6854 = !DILocation(line: 2482, column: 5, scope: !6852)
!6855 = !DILocation(line: 2483, column: 18, scope: !6846)
!6856 = !DILocation(line: 2483, column: 3, scope: !6846)
!6857 = !DILocation(line: 2484, column: 7, scope: !6858)
!6858 = distinct !DILexicalBlock(scope: !6846, file: !3, line: 2484, column: 7)
!6859 = !DILocation(line: 2484, column: 17, scope: !6858)
!6860 = !DILocation(line: 2484, column: 21, scope: !6858)
!6861 = !DILocation(line: 2484, column: 14, scope: !6858)
!6862 = !DILocation(line: 2484, column: 7, scope: !6846)
!6863 = !DILocation(line: 2485, column: 5, scope: !6858)
!6864 = !DILocation(line: 2486, column: 40, scope: !6846)
!6865 = !DILocation(line: 2486, column: 44, scope: !6846)
!6866 = !DILocation(line: 2486, column: 50, scope: !6846)
!6867 = !DILocation(line: 2487, column: 8, scope: !6846)
!6868 = !DILocation(line: 2486, column: 30, scope: !6846)
!6869 = !DILocation(line: 2486, column: 14, scope: !6846)
!6870 = !DILocation(line: 2486, column: 3, scope: !6846)
!6871 = !DILocation(line: 2486, column: 7, scope: !6846)
!6872 = !DILocation(line: 2486, column: 12, scope: !6846)
!6873 = !DILocation(line: 2488, column: 11, scope: !6846)
!6874 = !DILocation(line: 2488, column: 15, scope: !6846)
!6875 = !DILocation(line: 2488, column: 3, scope: !6846)
!6876 = !DILocation(line: 2488, column: 24, scope: !6846)
!6877 = !DILocation(line: 2488, column: 31, scope: !6846)
!6878 = !DILocation(line: 2489, column: 12, scope: !6846)
!6879 = !DILocation(line: 2489, column: 3, scope: !6846)
!6880 = !DILocation(line: 2489, column: 7, scope: !6846)
!6881 = !DILocation(line: 2489, column: 10, scope: !6846)
!6882 = !DILocation(line: 2490, column: 3, scope: !6846)
!6883 = !DILocation(line: 2490, column: 7, scope: !6846)
!6884 = !DILocation(line: 2490, column: 17, scope: !6846)
!6885 = !DILocation(line: 2491, column: 3, scope: !6846)
!6886 = !DILocation(line: 2491, column: 7, scope: !6846)
!6887 = !DILocation(line: 2491, column: 17, scope: !6846)
!6888 = !DILocation(line: 2492, column: 1, scope: !6846)
!6889 = distinct !DISubprogram(name: "compute_split_row", scope: !3, file: !3, line: 1960, type: !6890, scopeLine: 1962, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!6890 = !DISubroutineType(types: !6891)
!6891 = !{!1015, !2195, !1015, !1015, !1015, !2166}
!6892 = !DILocalVariable(name: "sched_nodes", arg: 1, scope: !6889, file: !3, line: 1960, type: !2195)
!6893 = !DILocation(line: 1960, column: 28, scope: !6889)
!6894 = !DILocalVariable(name: "low", arg: 2, scope: !6889, file: !3, line: 1960, type: !1015)
!6895 = !DILocation(line: 1960, column: 45, scope: !6889)
!6896 = !DILocalVariable(name: "up", arg: 3, scope: !6889, file: !3, line: 1960, type: !1015)
!6897 = !DILocation(line: 1960, column: 54, scope: !6889)
!6898 = !DILocalVariable(name: "ii", arg: 4, scope: !6889, file: !3, line: 1960, type: !1015)
!6899 = !DILocation(line: 1960, column: 62, scope: !6889)
!6900 = !DILocalVariable(name: "u_node", arg: 5, scope: !6889, file: !3, line: 1961, type: !2166)
!6901 = !DILocation(line: 1961, column: 19, scope: !6889)
!6902 = !DILocalVariable(name: "e", scope: !6889, file: !3, line: 1963, type: !2174)
!6903 = !DILocation(line: 1963, column: 16, scope: !6889)
!6904 = !DILocalVariable(name: "lower", scope: !6889, file: !3, line: 1964, type: !1015)
!6905 = !DILocation(line: 1964, column: 7, scope: !6889)
!6906 = !DILocalVariable(name: "upper", scope: !6889, file: !3, line: 1964, type: !1015)
!6907 = !DILocation(line: 1964, column: 24, scope: !6889)
!6908 = !DILocalVariable(name: "crit_pred", scope: !6889, file: !3, line: 1965, type: !2166)
!6909 = !DILocation(line: 1965, column: 16, scope: !6889)
!6910 = !DILocalVariable(name: "crit_succ", scope: !6889, file: !3, line: 1966, type: !2166)
!6911 = !DILocation(line: 1966, column: 16, scope: !6889)
!6912 = !DILocalVariable(name: "crit_cycle", scope: !6889, file: !3, line: 1967, type: !1015)
!6913 = !DILocation(line: 1967, column: 7, scope: !6889)
!6914 = !DILocation(line: 1969, column: 12, scope: !6915)
!6915 = distinct !DILexicalBlock(scope: !6889, file: !3, line: 1969, column: 3)
!6916 = !DILocation(line: 1969, column: 20, scope: !6915)
!6917 = !DILocation(line: 1969, column: 10, scope: !6915)
!6918 = !DILocation(line: 1969, column: 8, scope: !6915)
!6919 = !DILocation(line: 1969, column: 24, scope: !6920)
!6920 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 1969, column: 3)
!6921 = !DILocation(line: 1969, column: 26, scope: !6920)
!6922 = !DILocation(line: 1969, column: 3, scope: !6915)
!6923 = !DILocalVariable(name: "v_node", scope: !6924, file: !3, line: 1971, type: !2166)
!6924 = distinct !DILexicalBlock(scope: !6920, file: !3, line: 1970, column: 5)
!6925 = !DILocation(line: 1971, column: 20, scope: !6924)
!6926 = !DILocation(line: 1971, column: 29, scope: !6924)
!6927 = !DILocation(line: 1971, column: 32, scope: !6924)
!6928 = !DILocation(line: 1973, column: 11, scope: !6929)
!6929 = distinct !DILexicalBlock(scope: !6924, file: !3, line: 1973, column: 11)
!6930 = !DILocation(line: 1974, column: 4, scope: !6929)
!6931 = !DILocation(line: 1974, column: 8, scope: !6929)
!6932 = !DILocation(line: 1974, column: 15, scope: !6929)
!6933 = !DILocation(line: 1974, column: 37, scope: !6929)
!6934 = !DILocation(line: 1974, column: 40, scope: !6929)
!6935 = !DILocation(line: 1974, column: 35, scope: !6929)
!6936 = !DILocation(line: 1974, column: 51, scope: !6929)
!6937 = !DILocation(line: 1974, column: 54, scope: !6929)
!6938 = !DILocation(line: 1974, column: 65, scope: !6929)
!6939 = !DILocation(line: 1974, column: 63, scope: !6929)
!6940 = !DILocation(line: 1974, column: 48, scope: !6929)
!6941 = !DILocation(line: 1974, column: 12, scope: !6929)
!6942 = !DILocation(line: 1973, column: 11, scope: !6924)
!6943 = !DILocation(line: 1975, column: 6, scope: !6944)
!6944 = distinct !DILexicalBlock(scope: !6929, file: !3, line: 1975, column: 6)
!6945 = !DILocation(line: 1975, column: 28, scope: !6944)
!6946 = !DILocation(line: 1975, column: 26, scope: !6944)
!6947 = !DILocation(line: 1975, column: 6, scope: !6929)
!6948 = !DILocation(line: 1977, column: 18, scope: !6949)
!6949 = distinct !DILexicalBlock(scope: !6944, file: !3, line: 1976, column: 4)
!6950 = !DILocation(line: 1977, column: 16, scope: !6949)
!6951 = !DILocation(line: 1978, column: 14, scope: !6949)
!6952 = !DILocation(line: 1978, column: 12, scope: !6949)
!6953 = !DILocation(line: 1979, column: 4, scope: !6949)
!6954 = !DILocation(line: 1980, column: 5, scope: !6924)
!6955 = !DILocation(line: 1969, column: 36, scope: !6920)
!6956 = !DILocation(line: 1969, column: 39, scope: !6920)
!6957 = !DILocation(line: 1969, column: 34, scope: !6920)
!6958 = !DILocation(line: 1969, column: 3, scope: !6920)
!6959 = distinct !{!6959, !6922, !6960}
!6960 = !DILocation(line: 1980, column: 5, scope: !6915)
!6961 = !DILocation(line: 1982, column: 7, scope: !6962)
!6962 = distinct !DILexicalBlock(scope: !6889, file: !3, line: 1982, column: 7)
!6963 = !DILocation(line: 1982, column: 17, scope: !6962)
!6964 = !DILocation(line: 1982, column: 7, scope: !6889)
!6965 = !DILocation(line: 1984, column: 20, scope: !6966)
!6966 = distinct !DILexicalBlock(scope: !6962, file: !3, line: 1983, column: 5)
!6967 = !DILocation(line: 1984, column: 43, scope: !6966)
!6968 = !DILocation(line: 1984, column: 18, scope: !6966)
!6969 = !DILocation(line: 1985, column: 14, scope: !6966)
!6970 = !DILocation(line: 1985, column: 7, scope: !6966)
!6971 = !DILocation(line: 1988, column: 12, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6889, file: !3, line: 1988, column: 3)
!6973 = !DILocation(line: 1988, column: 20, scope: !6972)
!6974 = !DILocation(line: 1988, column: 10, scope: !6972)
!6975 = !DILocation(line: 1988, column: 8, scope: !6972)
!6976 = !DILocation(line: 1988, column: 25, scope: !6977)
!6977 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 1988, column: 3)
!6978 = !DILocation(line: 1988, column: 27, scope: !6977)
!6979 = !DILocation(line: 1988, column: 3, scope: !6972)
!6980 = !DILocalVariable(name: "v_node", scope: !6981, file: !3, line: 1990, type: !2166)
!6981 = distinct !DILexicalBlock(scope: !6977, file: !3, line: 1989, column: 5)
!6982 = !DILocation(line: 1990, column: 20, scope: !6981)
!6983 = !DILocation(line: 1990, column: 29, scope: !6981)
!6984 = !DILocation(line: 1990, column: 32, scope: !6981)
!6985 = !DILocation(line: 1991, column: 11, scope: !6986)
!6986 = distinct !DILexicalBlock(scope: !6981, file: !3, line: 1991, column: 11)
!6987 = !DILocation(line: 1992, column: 4, scope: !6986)
!6988 = !DILocation(line: 1992, column: 8, scope: !6986)
!6989 = !DILocation(line: 1992, column: 14, scope: !6986)
!6990 = !DILocation(line: 1992, column: 36, scope: !6986)
!6991 = !DILocation(line: 1992, column: 39, scope: !6986)
!6992 = !DILocation(line: 1992, column: 34, scope: !6986)
!6993 = !DILocation(line: 1992, column: 50, scope: !6986)
!6994 = !DILocation(line: 1992, column: 53, scope: !6986)
!6995 = !DILocation(line: 1992, column: 64, scope: !6986)
!6996 = !DILocation(line: 1992, column: 62, scope: !6986)
!6997 = !DILocation(line: 1992, column: 47, scope: !6986)
!6998 = !DILocation(line: 1992, column: 11, scope: !6986)
!6999 = !DILocation(line: 1991, column: 11, scope: !6981)
!7000 = !DILocation(line: 1993, column: 6, scope: !7001)
!7001 = distinct !DILexicalBlock(scope: !6986, file: !3, line: 1993, column: 6)
!7002 = !DILocation(line: 1993, column: 28, scope: !7001)
!7003 = !DILocation(line: 1993, column: 26, scope: !7001)
!7004 = !DILocation(line: 1993, column: 6, scope: !6986)
!7005 = !DILocation(line: 1995, column: 18, scope: !7006)
!7006 = distinct !DILexicalBlock(scope: !7001, file: !3, line: 1994, column: 4)
!7007 = !DILocation(line: 1995, column: 16, scope: !7006)
!7008 = !DILocation(line: 1996, column: 14, scope: !7006)
!7009 = !DILocation(line: 1996, column: 12, scope: !7006)
!7010 = !DILocation(line: 1997, column: 4, scope: !7006)
!7011 = !DILocation(line: 1998, column: 5, scope: !6981)
!7012 = !DILocation(line: 1988, column: 37, scope: !6977)
!7013 = !DILocation(line: 1988, column: 40, scope: !6977)
!7014 = !DILocation(line: 1988, column: 35, scope: !6977)
!7015 = !DILocation(line: 1988, column: 3, scope: !6977)
!7016 = distinct !{!7016, !6979, !7017}
!7017 = !DILocation(line: 1998, column: 5, scope: !6972)
!7018 = !DILocation(line: 2000, column: 7, scope: !7019)
!7019 = distinct !DILexicalBlock(scope: !6889, file: !3, line: 2000, column: 7)
!7020 = !DILocation(line: 2000, column: 17, scope: !7019)
!7021 = !DILocation(line: 2000, column: 7, scope: !6889)
!7022 = !DILocation(line: 2002, column: 20, scope: !7023)
!7023 = distinct !DILexicalBlock(scope: !7019, file: !3, line: 2001, column: 5)
!7024 = !DILocation(line: 2002, column: 18, scope: !7023)
!7025 = !DILocation(line: 2003, column: 14, scope: !7023)
!7026 = !DILocation(line: 2003, column: 7, scope: !7023)
!7027 = !DILocation(line: 2006, column: 7, scope: !7028)
!7028 = distinct !DILexicalBlock(scope: !6889, file: !3, line: 2006, column: 7)
!7029 = !DILocation(line: 2006, column: 7, scope: !6889)
!7030 = !DILocation(line: 2007, column: 14, scope: !7028)
!7031 = !DILocation(line: 2007, column: 5, scope: !7028)
!7032 = !DILocation(line: 2009, column: 10, scope: !6889)
!7033 = !DILocation(line: 2009, column: 3, scope: !6889)
!7034 = !DILocation(line: 2010, column: 1, scope: !6889)
!7035 = distinct !DISubprogram(name: "ps_insert_empty_row", scope: !3, file: !3, line: 1878, type: !7036, scopeLine: 1880, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7036 = !DISubroutineType(types: !7037)
!7037 = !{null, !2218, !1015, !2195}
!7038 = !DILocalVariable(name: "ps", arg: 1, scope: !7035, file: !3, line: 1878, type: !2218)
!7039 = !DILocation(line: 1878, column: 43, scope: !7035)
!7040 = !DILocalVariable(name: "split_row", arg: 2, scope: !7035, file: !3, line: 1878, type: !1015)
!7041 = !DILocation(line: 1878, column: 51, scope: !7035)
!7042 = !DILocalVariable(name: "sched_nodes", arg: 3, scope: !7035, file: !3, line: 1879, type: !2195)
!7043 = !DILocation(line: 1879, column: 16, scope: !7035)
!7044 = !DILocalVariable(name: "crr_insn", scope: !7035, file: !3, line: 1881, type: !2226)
!7045 = !DILocation(line: 1881, column: 15, scope: !7035)
!7046 = !DILocalVariable(name: "rows_new", scope: !7035, file: !3, line: 1882, type: !2225)
!7047 = !DILocation(line: 1882, column: 16, scope: !7035)
!7048 = !DILocalVariable(name: "ii", scope: !7035, file: !3, line: 1883, type: !1015)
!7049 = !DILocation(line: 1883, column: 7, scope: !7035)
!7050 = !DILocation(line: 1883, column: 12, scope: !7035)
!7051 = !DILocation(line: 1883, column: 16, scope: !7035)
!7052 = !DILocalVariable(name: "new_ii", scope: !7035, file: !3, line: 1884, type: !1015)
!7053 = !DILocation(line: 1884, column: 7, scope: !7035)
!7054 = !DILocation(line: 1884, column: 16, scope: !7035)
!7055 = !DILocation(line: 1884, column: 19, scope: !7035)
!7056 = !DILocalVariable(name: "row", scope: !7035, file: !3, line: 1885, type: !1015)
!7057 = !DILocation(line: 1885, column: 7, scope: !7035)
!7058 = !DILocation(line: 1887, column: 28, scope: !7035)
!7059 = !DILocation(line: 1887, column: 32, scope: !7035)
!7060 = !DILocation(line: 1887, column: 3, scope: !7035)
!7061 = !DILocation(line: 1891, column: 16, scope: !7035)
!7062 = !DILocation(line: 1891, column: 20, scope: !7035)
!7063 = !DILocation(line: 1891, column: 13, scope: !7035)
!7064 = !DILocation(line: 1892, column: 15, scope: !7035)
!7065 = !DILocation(line: 1892, column: 13, scope: !7035)
!7066 = !DILocation(line: 1893, column: 7, scope: !7067)
!7067 = distinct !DILexicalBlock(scope: !7035, file: !3, line: 1893, column: 7)
!7068 = !DILocation(line: 1893, column: 7, scope: !7035)
!7069 = !DILocation(line: 1894, column: 14, scope: !7067)
!7070 = !DILocation(line: 1894, column: 43, scope: !7067)
!7071 = !DILocation(line: 1894, column: 5, scope: !7067)
!7072 = !DILocation(line: 1896, column: 26, scope: !7035)
!7073 = !DILocation(line: 1896, column: 3, scope: !7035)
!7074 = !DILocation(line: 1897, column: 28, scope: !7035)
!7075 = !DILocation(line: 1897, column: 32, scope: !7035)
!7076 = !DILocation(line: 1897, column: 36, scope: !7035)
!7077 = !DILocation(line: 1897, column: 3, scope: !7035)
!7078 = !DILocation(line: 1899, column: 39, scope: !7035)
!7079 = !DILocation(line: 1899, column: 30, scope: !7035)
!7080 = !DILocation(line: 1899, column: 14, scope: !7035)
!7081 = !DILocation(line: 1899, column: 12, scope: !7035)
!7082 = !DILocation(line: 1900, column: 12, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !7035, file: !3, line: 1900, column: 3)
!7084 = !DILocation(line: 1900, column: 8, scope: !7083)
!7085 = !DILocation(line: 1900, column: 17, scope: !7086)
!7086 = distinct !DILexicalBlock(scope: !7083, file: !3, line: 1900, column: 3)
!7087 = !DILocation(line: 1900, column: 23, scope: !7086)
!7088 = !DILocation(line: 1900, column: 21, scope: !7086)
!7089 = !DILocation(line: 1900, column: 3, scope: !7083)
!7090 = !DILocation(line: 1902, column: 23, scope: !7091)
!7091 = distinct !DILexicalBlock(scope: !7086, file: !3, line: 1901, column: 5)
!7092 = !DILocation(line: 1902, column: 27, scope: !7091)
!7093 = !DILocation(line: 1902, column: 32, scope: !7091)
!7094 = !DILocation(line: 1902, column: 7, scope: !7091)
!7095 = !DILocation(line: 1902, column: 16, scope: !7091)
!7096 = !DILocation(line: 1902, column: 21, scope: !7091)
!7097 = !DILocation(line: 1903, column: 7, scope: !7091)
!7098 = !DILocation(line: 1903, column: 11, scope: !7091)
!7099 = !DILocation(line: 1903, column: 16, scope: !7091)
!7100 = !DILocation(line: 1903, column: 21, scope: !7091)
!7101 = !DILocation(line: 1904, column: 23, scope: !7102)
!7102 = distinct !DILexicalBlock(scope: !7091, file: !3, line: 1904, column: 7)
!7103 = !DILocation(line: 1904, column: 32, scope: !7102)
!7104 = !DILocation(line: 1904, column: 21, scope: !7102)
!7105 = !DILocation(line: 1904, column: 12, scope: !7102)
!7106 = !DILocation(line: 1905, column: 5, scope: !7107)
!7107 = distinct !DILexicalBlock(scope: !7102, file: !3, line: 1904, column: 7)
!7108 = !DILocation(line: 1904, column: 7, scope: !7102)
!7109 = !DILocalVariable(name: "u", scope: !7110, file: !3, line: 1907, type: !2166)
!7110 = distinct !DILexicalBlock(scope: !7107, file: !3, line: 1906, column: 2)
!7111 = !DILocation(line: 1907, column: 17, scope: !7110)
!7112 = !DILocation(line: 1907, column: 21, scope: !7110)
!7113 = !DILocation(line: 1907, column: 31, scope: !7110)
!7114 = !DILocalVariable(name: "new_time", scope: !7110, file: !3, line: 1908, type: !1015)
!7115 = !DILocation(line: 1908, column: 8, scope: !7110)
!7116 = !DILocation(line: 1908, column: 19, scope: !7110)
!7117 = !DILocation(line: 1908, column: 37, scope: !7110)
!7118 = !DILocation(line: 1908, column: 54, scope: !7110)
!7119 = !DILocation(line: 1908, column: 52, scope: !7110)
!7120 = !DILocation(line: 1908, column: 34, scope: !7110)
!7121 = !DILocation(line: 1910, column: 21, scope: !7110)
!7122 = !DILocation(line: 1910, column: 4, scope: !7110)
!7123 = !DILocation(line: 1910, column: 19, scope: !7110)
!7124 = !DILocation(line: 1911, column: 22, scope: !7110)
!7125 = !DILocation(line: 1911, column: 4, scope: !7110)
!7126 = !DILocation(line: 1911, column: 14, scope: !7110)
!7127 = !DILocation(line: 1911, column: 20, scope: !7110)
!7128 = !DILocation(line: 1912, column: 20, scope: !7110)
!7129 = !DILocation(line: 1912, column: 31, scope: !7110)
!7130 = !DILocation(line: 1912, column: 29, scope: !7110)
!7131 = !DILocation(line: 1912, column: 4, scope: !7110)
!7132 = !DILocation(line: 1912, column: 18, scope: !7110)
!7133 = !DILocation(line: 1913, column: 22, scope: !7110)
!7134 = !DILocation(line: 1913, column: 33, scope: !7110)
!7135 = !DILocation(line: 1913, column: 31, scope: !7110)
!7136 = !DILocation(line: 1913, column: 4, scope: !7110)
!7137 = !DILocation(line: 1913, column: 20, scope: !7110)
!7138 = !DILocation(line: 1914, column: 2, scope: !7110)
!7139 = !DILocation(line: 1905, column: 26, scope: !7107)
!7140 = !DILocation(line: 1905, column: 36, scope: !7107)
!7141 = !DILocation(line: 1905, column: 24, scope: !7107)
!7142 = !DILocation(line: 1904, column: 7, scope: !7107)
!7143 = distinct !{!7143, !7108, !7144}
!7144 = !DILocation(line: 1914, column: 2, scope: !7102)
!7145 = !DILocation(line: 1916, column: 5, scope: !7091)
!7146 = !DILocation(line: 1900, column: 37, scope: !7086)
!7147 = !DILocation(line: 1900, column: 3, scope: !7086)
!7148 = distinct !{!7148, !7089, !7149}
!7149 = !DILocation(line: 1916, column: 5, scope: !7083)
!7150 = !DILocation(line: 1918, column: 3, scope: !7035)
!7151 = !DILocation(line: 1918, column: 12, scope: !7035)
!7152 = !DILocation(line: 1918, column: 23, scope: !7035)
!7153 = !DILocation(line: 1920, column: 14, scope: !7154)
!7154 = distinct !DILexicalBlock(scope: !7035, file: !3, line: 1920, column: 3)
!7155 = !DILocation(line: 1920, column: 12, scope: !7154)
!7156 = !DILocation(line: 1920, column: 8, scope: !7154)
!7157 = !DILocation(line: 1920, column: 25, scope: !7158)
!7158 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 1920, column: 3)
!7159 = !DILocation(line: 1920, column: 31, scope: !7158)
!7160 = !DILocation(line: 1920, column: 29, scope: !7158)
!7161 = !DILocation(line: 1920, column: 3, scope: !7154)
!7162 = !DILocation(line: 1922, column: 27, scope: !7163)
!7163 = distinct !DILexicalBlock(scope: !7158, file: !3, line: 1921, column: 5)
!7164 = !DILocation(line: 1922, column: 31, scope: !7163)
!7165 = !DILocation(line: 1922, column: 36, scope: !7163)
!7166 = !DILocation(line: 1922, column: 7, scope: !7163)
!7167 = !DILocation(line: 1922, column: 16, scope: !7163)
!7168 = !DILocation(line: 1922, column: 20, scope: !7163)
!7169 = !DILocation(line: 1922, column: 25, scope: !7163)
!7170 = !DILocation(line: 1923, column: 7, scope: !7163)
!7171 = !DILocation(line: 1923, column: 11, scope: !7163)
!7172 = !DILocation(line: 1923, column: 16, scope: !7163)
!7173 = !DILocation(line: 1923, column: 21, scope: !7163)
!7174 = !DILocation(line: 1924, column: 23, scope: !7175)
!7175 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 1924, column: 7)
!7176 = !DILocation(line: 1924, column: 32, scope: !7175)
!7177 = !DILocation(line: 1924, column: 36, scope: !7175)
!7178 = !DILocation(line: 1924, column: 21, scope: !7175)
!7179 = !DILocation(line: 1924, column: 12, scope: !7175)
!7180 = !DILocation(line: 1925, column: 5, scope: !7181)
!7181 = distinct !DILexicalBlock(scope: !7175, file: !3, line: 1924, column: 7)
!7182 = !DILocation(line: 1924, column: 7, scope: !7175)
!7183 = !DILocalVariable(name: "u", scope: !7184, file: !3, line: 1927, type: !2166)
!7184 = distinct !DILexicalBlock(scope: !7181, file: !3, line: 1926, column: 2)
!7185 = !DILocation(line: 1927, column: 17, scope: !7184)
!7186 = !DILocation(line: 1927, column: 21, scope: !7184)
!7187 = !DILocation(line: 1927, column: 31, scope: !7184)
!7188 = !DILocalVariable(name: "new_time", scope: !7184, file: !3, line: 1928, type: !1015)
!7189 = !DILocation(line: 1928, column: 8, scope: !7184)
!7190 = !DILocation(line: 1928, column: 19, scope: !7184)
!7191 = !DILocation(line: 1928, column: 37, scope: !7184)
!7192 = !DILocation(line: 1928, column: 54, scope: !7184)
!7193 = !DILocation(line: 1928, column: 52, scope: !7184)
!7194 = !DILocation(line: 1928, column: 34, scope: !7184)
!7195 = !DILocation(line: 1928, column: 58, scope: !7184)
!7196 = !DILocation(line: 1930, column: 21, scope: !7184)
!7197 = !DILocation(line: 1930, column: 4, scope: !7184)
!7198 = !DILocation(line: 1930, column: 19, scope: !7184)
!7199 = !DILocation(line: 1931, column: 22, scope: !7184)
!7200 = !DILocation(line: 1931, column: 4, scope: !7184)
!7201 = !DILocation(line: 1931, column: 14, scope: !7184)
!7202 = !DILocation(line: 1931, column: 20, scope: !7184)
!7203 = !DILocation(line: 1932, column: 20, scope: !7184)
!7204 = !DILocation(line: 1932, column: 31, scope: !7184)
!7205 = !DILocation(line: 1932, column: 29, scope: !7184)
!7206 = !DILocation(line: 1932, column: 4, scope: !7184)
!7207 = !DILocation(line: 1932, column: 18, scope: !7184)
!7208 = !DILocation(line: 1933, column: 22, scope: !7184)
!7209 = !DILocation(line: 1933, column: 33, scope: !7184)
!7210 = !DILocation(line: 1933, column: 31, scope: !7184)
!7211 = !DILocation(line: 1933, column: 4, scope: !7184)
!7212 = !DILocation(line: 1933, column: 20, scope: !7184)
!7213 = !DILocation(line: 1934, column: 2, scope: !7184)
!7214 = !DILocation(line: 1925, column: 26, scope: !7181)
!7215 = !DILocation(line: 1925, column: 36, scope: !7181)
!7216 = !DILocation(line: 1925, column: 24, scope: !7181)
!7217 = !DILocation(line: 1924, column: 7, scope: !7181)
!7218 = distinct !{!7218, !7182, !7219}
!7219 = !DILocation(line: 1934, column: 2, scope: !7175)
!7220 = !DILocation(line: 1935, column: 5, scope: !7163)
!7221 = !DILocation(line: 1920, column: 38, scope: !7158)
!7222 = !DILocation(line: 1920, column: 3, scope: !7158)
!7223 = distinct !{!7223, !7161, !7224}
!7224 = !DILocation(line: 1935, column: 5, scope: !7154)
!7225 = !DILocation(line: 1938, column: 19, scope: !7035)
!7226 = !DILocation(line: 1938, column: 23, scope: !7035)
!7227 = !DILocation(line: 1938, column: 35, scope: !7035)
!7228 = !DILocation(line: 1938, column: 39, scope: !7035)
!7229 = !DILocation(line: 1938, column: 51, scope: !7035)
!7230 = !DILocation(line: 1938, column: 49, scope: !7035)
!7231 = !DILocation(line: 1938, column: 33, scope: !7035)
!7232 = !DILocation(line: 1939, column: 8, scope: !7035)
!7233 = !DILocation(line: 1939, column: 39, scope: !7035)
!7234 = !DILocation(line: 1939, column: 36, scope: !7035)
!7235 = !DILocation(line: 1939, column: 5, scope: !7035)
!7236 = !DILocation(line: 1938, column: 3, scope: !7035)
!7237 = !DILocation(line: 1938, column: 7, scope: !7035)
!7238 = !DILocation(line: 1938, column: 17, scope: !7035)
!7239 = !DILocation(line: 1940, column: 19, scope: !7035)
!7240 = !DILocation(line: 1940, column: 23, scope: !7035)
!7241 = !DILocation(line: 1940, column: 35, scope: !7035)
!7242 = !DILocation(line: 1940, column: 39, scope: !7035)
!7243 = !DILocation(line: 1940, column: 51, scope: !7035)
!7244 = !DILocation(line: 1940, column: 49, scope: !7035)
!7245 = !DILocation(line: 1940, column: 33, scope: !7035)
!7246 = !DILocation(line: 1941, column: 8, scope: !7035)
!7247 = !DILocation(line: 1941, column: 39, scope: !7035)
!7248 = !DILocation(line: 1941, column: 36, scope: !7035)
!7249 = !DILocation(line: 1941, column: 5, scope: !7035)
!7250 = !DILocation(line: 1940, column: 3, scope: !7035)
!7251 = !DILocation(line: 1940, column: 7, scope: !7035)
!7252 = !DILocation(line: 1940, column: 17, scope: !7035)
!7253 = !DILocation(line: 1942, column: 9, scope: !7035)
!7254 = !DILocation(line: 1942, column: 13, scope: !7035)
!7255 = !DILocation(line: 1942, column: 3, scope: !7035)
!7256 = !DILocation(line: 1943, column: 14, scope: !7035)
!7257 = !DILocation(line: 1943, column: 3, scope: !7035)
!7258 = !DILocation(line: 1943, column: 7, scope: !7035)
!7259 = !DILocation(line: 1943, column: 12, scope: !7035)
!7260 = !DILocation(line: 1944, column: 12, scope: !7035)
!7261 = !DILocation(line: 1944, column: 3, scope: !7035)
!7262 = !DILocation(line: 1944, column: 7, scope: !7035)
!7263 = !DILocation(line: 1944, column: 10, scope: !7035)
!7264 = !DILocation(line: 1945, column: 3, scope: !7035)
!7265 = !DILocation(line: 1947, column: 28, scope: !7035)
!7266 = !DILocation(line: 1947, column: 32, scope: !7035)
!7267 = !DILocation(line: 1947, column: 3, scope: !7035)
!7268 = !DILocation(line: 1949, column: 7, scope: !7269)
!7269 = distinct !DILexicalBlock(scope: !7035, file: !3, line: 1949, column: 7)
!7270 = !DILocation(line: 1949, column: 7, scope: !7035)
!7271 = !DILocation(line: 1950, column: 14, scope: !7269)
!7272 = !DILocation(line: 1950, column: 57, scope: !7269)
!7273 = !DILocation(line: 1950, column: 61, scope: !7269)
!7274 = !DILocation(line: 1951, column: 7, scope: !7269)
!7275 = !DILocation(line: 1951, column: 11, scope: !7269)
!7276 = !DILocation(line: 1950, column: 5, scope: !7269)
!7277 = !DILocation(line: 1952, column: 1, scope: !7035)
!7278 = distinct !DISubprogram(name: "ps_add_node_check_conflicts", scope: !3, file: !3, line: 2781, type: !7279, scopeLine: 2784, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7279 = !DISubroutineType(types: !7280)
!7280 = !{!2226, !2218, !2166, !1015, !2195, !2195}
!7281 = !DILocalVariable(name: "ps", arg: 1, scope: !7278, file: !3, line: 2781, type: !2218)
!7282 = !DILocation(line: 2781, column: 51, scope: !7278)
!7283 = !DILocalVariable(name: "n", arg: 2, scope: !7278, file: !3, line: 2781, type: !2166)
!7284 = !DILocation(line: 2781, column: 68, scope: !7278)
!7285 = !DILocalVariable(name: "c", arg: 3, scope: !7278, file: !3, line: 2782, type: !1015)
!7286 = !DILocation(line: 2782, column: 16, scope: !7278)
!7287 = !DILocalVariable(name: "must_precede", arg: 4, scope: !7278, file: !3, line: 2782, type: !2195)
!7288 = !DILocation(line: 2782, column: 27, scope: !7278)
!7289 = !DILocalVariable(name: "must_follow", arg: 5, scope: !7278, file: !3, line: 2783, type: !2195)
!7290 = !DILocation(line: 2783, column: 17, scope: !7278)
!7291 = !DILocalVariable(name: "has_conflicts", scope: !7278, file: !3, line: 2785, type: !1015)
!7292 = !DILocation(line: 2785, column: 7, scope: !7278)
!7293 = !DILocalVariable(name: "ps_i", scope: !7278, file: !3, line: 2786, type: !2226)
!7294 = !DILocation(line: 2786, column: 15, scope: !7278)
!7295 = !DILocation(line: 2790, column: 33, scope: !7296)
!7296 = distinct !DILexicalBlock(scope: !7278, file: !3, line: 2790, column: 7)
!7297 = !DILocation(line: 2790, column: 37, scope: !7296)
!7298 = !DILocation(line: 2790, column: 40, scope: !7296)
!7299 = !DILocation(line: 2790, column: 43, scope: !7296)
!7300 = !DILocation(line: 2790, column: 57, scope: !7296)
!7301 = !DILocation(line: 2790, column: 17, scope: !7296)
!7302 = !DILocation(line: 2790, column: 15, scope: !7296)
!7303 = !DILocation(line: 2790, column: 7, scope: !7278)
!7304 = !DILocation(line: 2791, column: 5, scope: !7296)
!7305 = !DILocation(line: 2793, column: 37, scope: !7278)
!7306 = !DILocation(line: 2793, column: 41, scope: !7278)
!7307 = !DILocation(line: 2793, column: 44, scope: !7278)
!7308 = !DILocation(line: 2793, column: 19, scope: !7278)
!7309 = !DILocation(line: 2794, column: 5, scope: !7278)
!7310 = !DILocation(line: 2794, column: 9, scope: !7278)
!7311 = !DILocation(line: 2794, column: 13, scope: !7278)
!7312 = !DILocation(line: 2794, column: 21, scope: !7278)
!7313 = !DILocation(line: 2795, column: 9, scope: !7278)
!7314 = !DILocation(line: 2795, column: 30, scope: !7278)
!7315 = !DILocation(line: 2796, column: 9, scope: !7278)
!7316 = !DILocation(line: 2796, column: 13, scope: !7278)
!7317 = !DILocation(line: 2796, column: 17, scope: !7278)
!7318 = !DILocation(line: 2796, column: 11, scope: !7278)
!7319 = !DILocation(line: 2797, column: 9, scope: !7278)
!7320 = !DILocation(line: 2797, column: 13, scope: !7278)
!7321 = !DILocation(line: 2797, column: 17, scope: !7278)
!7322 = !DILocation(line: 2797, column: 11, scope: !7278)
!7323 = !DILocation(line: 2795, column: 12, scope: !7278)
!7324 = !DILocation(line: 0, scope: !7278)
!7325 = !DILocation(line: 2793, column: 17, scope: !7278)
!7326 = !DILocation(line: 2801, column: 3, scope: !7278)
!7327 = !DILocation(line: 2801, column: 10, scope: !7278)
!7328 = !DILocation(line: 2803, column: 37, scope: !7329)
!7329 = distinct !DILexicalBlock(scope: !7330, file: !3, line: 2803, column: 11)
!7330 = distinct !DILexicalBlock(scope: !7278, file: !3, line: 2802, column: 5)
!7331 = !DILocation(line: 2803, column: 41, scope: !7329)
!7332 = !DILocation(line: 2803, column: 47, scope: !7329)
!7333 = !DILocation(line: 2803, column: 13, scope: !7329)
!7334 = !DILocation(line: 2803, column: 11, scope: !7330)
!7335 = !DILocation(line: 2804, column: 2, scope: !7329)
!7336 = !DILocation(line: 2805, column: 41, scope: !7330)
!7337 = !DILocation(line: 2805, column: 45, scope: !7330)
!7338 = !DILocation(line: 2805, column: 48, scope: !7330)
!7339 = !DILocation(line: 2805, column: 23, scope: !7330)
!7340 = !DILocation(line: 2806, column: 9, scope: !7330)
!7341 = !DILocation(line: 2806, column: 13, scope: !7330)
!7342 = !DILocation(line: 2806, column: 17, scope: !7330)
!7343 = !DILocation(line: 2806, column: 25, scope: !7330)
!7344 = !DILocation(line: 2807, column: 6, scope: !7330)
!7345 = !DILocation(line: 2807, column: 27, scope: !7330)
!7346 = !DILocation(line: 2808, column: 13, scope: !7330)
!7347 = !DILocation(line: 2808, column: 17, scope: !7330)
!7348 = !DILocation(line: 2808, column: 21, scope: !7330)
!7349 = !DILocation(line: 2808, column: 15, scope: !7330)
!7350 = !DILocation(line: 2809, column: 13, scope: !7330)
!7351 = !DILocation(line: 2809, column: 17, scope: !7330)
!7352 = !DILocation(line: 2809, column: 21, scope: !7330)
!7353 = !DILocation(line: 2809, column: 15, scope: !7330)
!7354 = !DILocation(line: 2807, column: 9, scope: !7330)
!7355 = !DILocation(line: 0, scope: !7330)
!7356 = !DILocation(line: 2805, column: 21, scope: !7330)
!7357 = distinct !{!7357, !7326, !7358}
!7358 = !DILocation(line: 2810, column: 5, scope: !7278)
!7359 = !DILocation(line: 2812, column: 7, scope: !7360)
!7360 = distinct !DILexicalBlock(scope: !7278, file: !3, line: 2812, column: 7)
!7361 = !DILocation(line: 2812, column: 7, scope: !7278)
!7362 = !DILocation(line: 2814, column: 28, scope: !7363)
!7363 = distinct !DILexicalBlock(scope: !7360, file: !3, line: 2813, column: 5)
!7364 = !DILocation(line: 2814, column: 32, scope: !7363)
!7365 = !DILocation(line: 2814, column: 7, scope: !7363)
!7366 = !DILocation(line: 2815, column: 7, scope: !7363)
!7367 = !DILocation(line: 2818, column: 19, scope: !7278)
!7368 = !DILocation(line: 2818, column: 3, scope: !7278)
!7369 = !DILocation(line: 2818, column: 7, scope: !7278)
!7370 = !DILocation(line: 2818, column: 17, scope: !7278)
!7371 = !DILocation(line: 2819, column: 19, scope: !7278)
!7372 = !DILocation(line: 2819, column: 3, scope: !7278)
!7373 = !DILocation(line: 2819, column: 7, scope: !7278)
!7374 = !DILocation(line: 2819, column: 17, scope: !7278)
!7375 = !DILocation(line: 2820, column: 10, scope: !7278)
!7376 = !DILocation(line: 2820, column: 3, scope: !7278)
!7377 = !DILocation(line: 2821, column: 1, scope: !7278)
!7378 = distinct !DISubprogram(name: "add_node_to_ps", scope: !3, file: !3, line: 2679, type: !7279, scopeLine: 2681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7379 = !DILocalVariable(name: "ps", arg: 1, scope: !7378, file: !3, line: 2679, type: !2218)
!7380 = !DILocation(line: 2679, column: 38, scope: !7378)
!7381 = !DILocalVariable(name: "node", arg: 2, scope: !7378, file: !3, line: 2679, type: !2166)
!7382 = !DILocation(line: 2679, column: 55, scope: !7378)
!7383 = !DILocalVariable(name: "cycle", arg: 3, scope: !7378, file: !3, line: 2679, type: !1015)
!7384 = !DILocation(line: 2679, column: 65, scope: !7378)
!7385 = !DILocalVariable(name: "must_precede", arg: 4, scope: !7378, file: !3, line: 2680, type: !2195)
!7386 = !DILocation(line: 2680, column: 11, scope: !7378)
!7387 = !DILocalVariable(name: "must_follow", arg: 5, scope: !7378, file: !3, line: 2680, type: !2195)
!7388 = !DILocation(line: 2680, column: 33, scope: !7378)
!7389 = !DILocalVariable(name: "ps_i", scope: !7378, file: !3, line: 2682, type: !2226)
!7390 = !DILocation(line: 2682, column: 15, scope: !7378)
!7391 = !DILocalVariable(name: "rest_count", scope: !7378, file: !3, line: 2683, type: !1015)
!7392 = !DILocation(line: 2683, column: 7, scope: !7378)
!7393 = !DILocalVariable(name: "row", scope: !7378, file: !3, line: 2684, type: !1015)
!7394 = !DILocation(line: 2684, column: 7, scope: !7378)
!7395 = !DILocation(line: 2684, column: 13, scope: !7378)
!7396 = !DILocation(line: 2686, column: 7, scope: !7397)
!7397 = distinct !DILexicalBlock(scope: !7378, file: !3, line: 2686, column: 7)
!7398 = !DILocation(line: 2686, column: 11, scope: !7397)
!7399 = !DILocation(line: 2686, column: 16, scope: !7397)
!7400 = !DILocation(line: 2687, column: 7, scope: !7397)
!7401 = !DILocation(line: 2687, column: 10, scope: !7397)
!7402 = !DILocation(line: 2687, column: 14, scope: !7397)
!7403 = !DILocation(line: 2687, column: 19, scope: !7397)
!7404 = !DILocation(line: 2687, column: 25, scope: !7397)
!7405 = !DILocation(line: 2687, column: 43, scope: !7397)
!7406 = !DILocation(line: 2687, column: 40, scope: !7397)
!7407 = !DILocation(line: 2686, column: 7, scope: !7378)
!7408 = !DILocation(line: 2688, column: 5, scope: !7397)
!7409 = !DILocation(line: 2690, column: 7, scope: !7410)
!7410 = distinct !DILexicalBlock(scope: !7378, file: !3, line: 2690, column: 7)
!7411 = !DILocation(line: 2690, column: 11, scope: !7410)
!7412 = !DILocation(line: 2690, column: 16, scope: !7410)
!7413 = !DILocation(line: 2690, column: 7, scope: !7378)
!7414 = !DILocation(line: 2691, column: 19, scope: !7410)
!7415 = !DILocation(line: 2691, column: 23, scope: !7410)
!7416 = !DILocation(line: 2691, column: 28, scope: !7410)
!7417 = !DILocation(line: 2691, column: 34, scope: !7410)
!7418 = !DILocation(line: 2691, column: 16, scope: !7410)
!7419 = !DILocation(line: 2691, column: 5, scope: !7410)
!7420 = !DILocation(line: 2693, column: 26, scope: !7378)
!7421 = !DILocation(line: 2693, column: 32, scope: !7378)
!7422 = !DILocation(line: 2693, column: 44, scope: !7378)
!7423 = !DILocation(line: 2693, column: 10, scope: !7378)
!7424 = !DILocation(line: 2693, column: 8, scope: !7378)
!7425 = !DILocation(line: 2697, column: 30, scope: !7426)
!7426 = distinct !DILexicalBlock(scope: !7378, file: !3, line: 2697, column: 7)
!7427 = !DILocation(line: 2697, column: 34, scope: !7426)
!7428 = !DILocation(line: 2697, column: 40, scope: !7426)
!7429 = !DILocation(line: 2697, column: 54, scope: !7426)
!7430 = !DILocation(line: 2697, column: 9, scope: !7426)
!7431 = !DILocation(line: 2697, column: 7, scope: !7378)
!7432 = !DILocation(line: 2699, column: 13, scope: !7433)
!7433 = distinct !DILexicalBlock(scope: !7426, file: !3, line: 2698, column: 5)
!7434 = !DILocation(line: 2699, column: 7, scope: !7433)
!7435 = !DILocation(line: 2700, column: 7, scope: !7433)
!7436 = !DILocation(line: 2703, column: 10, scope: !7378)
!7437 = !DILocation(line: 2703, column: 3, scope: !7378)
!7438 = !DILocation(line: 2704, column: 1, scope: !7378)
!7439 = distinct !DISubprogram(name: "ps_has_conflicts", scope: !3, file: !3, line: 2727, type: !7440, scopeLine: 2728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7440 = !DISubroutineType(types: !7441)
!7441 = !{!1015, !2218, !1015, !1015}
!7442 = !DILocalVariable(name: "ps", arg: 1, scope: !7439, file: !3, line: 2727, type: !2218)
!7443 = !DILocation(line: 2727, column: 40, scope: !7439)
!7444 = !DILocalVariable(name: "from", arg: 2, scope: !7439, file: !3, line: 2727, type: !1015)
!7445 = !DILocation(line: 2727, column: 48, scope: !7439)
!7446 = !DILocalVariable(name: "to", arg: 3, scope: !7439, file: !3, line: 2727, type: !1015)
!7447 = !DILocation(line: 2727, column: 58, scope: !7439)
!7448 = !DILocalVariable(name: "cycle", scope: !7439, file: !3, line: 2729, type: !1015)
!7449 = !DILocation(line: 2729, column: 7, scope: !7439)
!7450 = !DILocation(line: 2731, column: 16, scope: !7439)
!7451 = !DILocation(line: 2731, column: 3, scope: !7439)
!7452 = !DILocation(line: 2733, column: 16, scope: !7453)
!7453 = distinct !DILexicalBlock(scope: !7439, file: !3, line: 2733, column: 3)
!7454 = !DILocation(line: 2733, column: 14, scope: !7453)
!7455 = !DILocation(line: 2733, column: 8, scope: !7453)
!7456 = !DILocation(line: 2733, column: 22, scope: !7457)
!7457 = distinct !DILexicalBlock(scope: !7453, file: !3, line: 2733, column: 3)
!7458 = !DILocation(line: 2733, column: 31, scope: !7457)
!7459 = !DILocation(line: 2733, column: 28, scope: !7457)
!7460 = !DILocation(line: 2733, column: 3, scope: !7453)
!7461 = !DILocalVariable(name: "crr_insn", scope: !7462, file: !3, line: 2735, type: !2226)
!7462 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 2734, column: 5)
!7463 = !DILocation(line: 2735, column: 19, scope: !7462)
!7464 = !DILocalVariable(name: "can_issue_more", scope: !7462, file: !3, line: 2737, type: !1015)
!7465 = !DILocation(line: 2737, column: 11, scope: !7462)
!7466 = !DILocation(line: 2737, column: 28, scope: !7462)
!7467 = !DILocation(line: 2740, column: 23, scope: !7468)
!7468 = distinct !DILexicalBlock(scope: !7462, file: !3, line: 2740, column: 7)
!7469 = !DILocation(line: 2740, column: 27, scope: !7468)
!7470 = !DILocation(line: 2740, column: 32, scope: !7468)
!7471 = !DILocation(line: 2740, column: 21, scope: !7468)
!7472 = !DILocation(line: 2740, column: 12, scope: !7468)
!7473 = !DILocation(line: 2741, column: 5, scope: !7474)
!7474 = distinct !DILexicalBlock(scope: !7468, file: !3, line: 2740, column: 7)
!7475 = !DILocation(line: 2740, column: 7, scope: !7468)
!7476 = !DILocalVariable(name: "insn", scope: !7477, file: !3, line: 2744, type: !992)
!7477 = distinct !DILexicalBlock(scope: !7474, file: !3, line: 2743, column: 2)
!7478 = !DILocation(line: 2744, column: 8, scope: !7477)
!7479 = !DILocation(line: 2744, column: 15, scope: !7477)
!7480 = !DILocation(line: 2744, column: 25, scope: !7477)
!7481 = !DILocation(line: 2744, column: 31, scope: !7477)
!7482 = !DILocation(line: 2746, column: 9, scope: !7483)
!7483 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 2746, column: 8)
!7484 = !DILocation(line: 2746, column: 8, scope: !7477)
!7485 = !DILocation(line: 2747, column: 6, scope: !7483)
!7486 = !DILocation(line: 2750, column: 9, scope: !7487)
!7487 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 2750, column: 8)
!7488 = !DILocation(line: 2750, column: 24, scope: !7487)
!7489 = !DILocation(line: 2750, column: 46, scope: !7487)
!7490 = !DILocation(line: 2750, column: 27, scope: !7487)
!7491 = !DILocation(line: 2750, column: 8, scope: !7477)
!7492 = !DILocation(line: 2751, column: 6, scope: !7487)
!7493 = !DILocation(line: 2755, column: 26, scope: !7494)
!7494 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 2755, column: 8)
!7495 = !DILocation(line: 2755, column: 38, scope: !7494)
!7496 = !DILocation(line: 2755, column: 8, scope: !7494)
!7497 = !DILocation(line: 2755, column: 44, scope: !7494)
!7498 = !DILocation(line: 2755, column: 8, scope: !7477)
!7499 = !DILocation(line: 2756, column: 6, scope: !7494)
!7500 = !DILocation(line: 2758, column: 22, scope: !7501)
!7501 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 2758, column: 8)
!7502 = !DILocation(line: 2758, column: 8, scope: !7501)
!7503 = !DILocation(line: 2758, column: 8, scope: !7477)
!7504 = !DILocation(line: 2760, column: 22, scope: !7501)
!7505 = !DILocation(line: 2760, column: 38, scope: !7501)
!7506 = !DILocation(line: 2760, column: 50, scope: !7501)
!7507 = !DILocation(line: 2761, column: 10, scope: !7501)
!7508 = !DILocation(line: 2761, column: 16, scope: !7501)
!7509 = !DILocation(line: 2760, column: 8, scope: !7501)
!7510 = !DILocation(line: 2759, column: 21, scope: !7501)
!7511 = !DILocation(line: 2759, column: 6, scope: !7501)
!7512 = !DILocation(line: 2764, column: 13, scope: !7513)
!7513 = distinct !DILexicalBlock(scope: !7501, file: !3, line: 2764, column: 13)
!7514 = !DILocation(line: 2764, column: 39, scope: !7513)
!7515 = !DILocation(line: 2765, column: 6, scope: !7513)
!7516 = !DILocation(line: 2765, column: 9, scope: !7513)
!7517 = !DILocation(line: 2765, column: 35, scope: !7513)
!7518 = !DILocation(line: 2764, column: 13, scope: !7501)
!7519 = !DILocation(line: 2766, column: 20, scope: !7513)
!7520 = !DILocation(line: 2766, column: 6, scope: !7513)
!7521 = !DILocation(line: 2767, column: 2, scope: !7477)
!7522 = !DILocation(line: 2742, column: 16, scope: !7474)
!7523 = !DILocation(line: 2742, column: 26, scope: !7474)
!7524 = !DILocation(line: 2742, column: 14, scope: !7474)
!7525 = !DILocation(line: 2740, column: 7, scope: !7474)
!7526 = distinct !{!7526, !7475, !7527}
!7527 = !DILocation(line: 2767, column: 2, scope: !7468)
!7528 = !DILocation(line: 2770, column: 7, scope: !7462)
!7529 = !DILocation(line: 2771, column: 5, scope: !7462)
!7530 = !DILocation(line: 2733, column: 40, scope: !7457)
!7531 = !DILocation(line: 2733, column: 3, scope: !7457)
!7532 = distinct !{!7532, !7460, !7533}
!7533 = !DILocation(line: 2771, column: 5, scope: !7453)
!7534 = !DILocation(line: 2772, column: 3, scope: !7439)
!7535 = !DILocation(line: 2773, column: 1, scope: !7439)
!7536 = distinct !DISubprogram(name: "ps_insn_advance_column", scope: !3, file: !3, line: 2629, type: !7537, scopeLine: 2631, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7537 = !DISubroutineType(types: !7538)
!7538 = !{!1015, !2218, !2226, !2195}
!7539 = !DILocalVariable(name: "ps", arg: 1, scope: !7536, file: !3, line: 2629, type: !2218)
!7540 = !DILocation(line: 2629, column: 46, scope: !7536)
!7541 = !DILocalVariable(name: "ps_i", arg: 2, scope: !7536, file: !3, line: 2629, type: !2226)
!7542 = !DILocation(line: 2629, column: 62, scope: !7536)
!7543 = !DILocalVariable(name: "must_follow", arg: 3, scope: !7536, file: !3, line: 2630, type: !2195)
!7544 = !DILocation(line: 2630, column: 12, scope: !7536)
!7545 = !DILocalVariable(name: "prev", scope: !7536, file: !3, line: 2632, type: !2226)
!7546 = !DILocation(line: 2632, column: 15, scope: !7536)
!7547 = !DILocalVariable(name: "next", scope: !7536, file: !3, line: 2632, type: !2226)
!7548 = !DILocation(line: 2632, column: 21, scope: !7536)
!7549 = !DILocalVariable(name: "row", scope: !7536, file: !3, line: 2633, type: !1015)
!7550 = !DILocation(line: 2633, column: 7, scope: !7536)
!7551 = !DILocalVariable(name: "next_node", scope: !7536, file: !3, line: 2634, type: !2166)
!7552 = !DILocation(line: 2634, column: 16, scope: !7536)
!7553 = !DILocation(line: 2636, column: 8, scope: !7554)
!7554 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 2636, column: 7)
!7555 = !DILocation(line: 2636, column: 11, scope: !7554)
!7556 = !DILocation(line: 2636, column: 15, scope: !7554)
!7557 = !DILocation(line: 2636, column: 7, scope: !7536)
!7558 = !DILocation(line: 2637, column: 5, scope: !7554)
!7559 = !DILocation(line: 2639, column: 9, scope: !7536)
!7560 = !DILocation(line: 2639, column: 7, scope: !7536)
!7561 = !DILocation(line: 2641, column: 9, scope: !7562)
!7562 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 2641, column: 7)
!7563 = !DILocation(line: 2641, column: 15, scope: !7562)
!7564 = !DILocation(line: 2641, column: 7, scope: !7536)
!7565 = !DILocation(line: 2642, column: 5, scope: !7562)
!7566 = !DILocation(line: 2644, column: 15, scope: !7536)
!7567 = !DILocation(line: 2644, column: 21, scope: !7536)
!7568 = !DILocation(line: 2644, column: 34, scope: !7536)
!7569 = !DILocation(line: 2644, column: 13, scope: !7536)
!7570 = !DILocation(line: 2648, column: 7, scope: !7571)
!7571 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 2648, column: 7)
!7572 = !DILocation(line: 2648, column: 19, scope: !7571)
!7573 = !DILocation(line: 2648, column: 22, scope: !7571)
!7574 = !DILocation(line: 2648, column: 7, scope: !7536)
!7575 = !DILocation(line: 2649, column: 5, scope: !7571)
!7576 = !DILocation(line: 2652, column: 10, scope: !7536)
!7577 = !DILocation(line: 2652, column: 16, scope: !7536)
!7578 = !DILocation(line: 2652, column: 8, scope: !7536)
!7579 = !DILocation(line: 2653, column: 10, scope: !7536)
!7580 = !DILocation(line: 2653, column: 16, scope: !7536)
!7581 = !DILocation(line: 2653, column: 8, scope: !7536)
!7582 = !DILocation(line: 2655, column: 7, scope: !7583)
!7583 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 2655, column: 7)
!7584 = !DILocation(line: 2655, column: 15, scope: !7583)
!7585 = !DILocation(line: 2655, column: 19, scope: !7583)
!7586 = !DILocation(line: 2655, column: 24, scope: !7583)
!7587 = !DILocation(line: 2655, column: 12, scope: !7583)
!7588 = !DILocation(line: 2655, column: 7, scope: !7536)
!7589 = !DILocation(line: 2656, column: 21, scope: !7583)
!7590 = !DILocation(line: 2656, column: 5, scope: !7583)
!7591 = !DILocation(line: 2656, column: 9, scope: !7583)
!7592 = !DILocation(line: 2656, column: 14, scope: !7583)
!7593 = !DILocation(line: 2656, column: 19, scope: !7583)
!7594 = !DILocation(line: 2658, column: 23, scope: !7536)
!7595 = !DILocation(line: 2658, column: 29, scope: !7536)
!7596 = !DILocation(line: 2658, column: 3, scope: !7536)
!7597 = !DILocation(line: 2658, column: 9, scope: !7536)
!7598 = !DILocation(line: 2658, column: 21, scope: !7536)
!7599 = !DILocation(line: 2660, column: 7, scope: !7600)
!7600 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 2660, column: 7)
!7601 = !DILocation(line: 2660, column: 13, scope: !7600)
!7602 = !DILocation(line: 2660, column: 7, scope: !7536)
!7603 = !DILocation(line: 2661, column: 38, scope: !7600)
!7604 = !DILocation(line: 2661, column: 5, scope: !7600)
!7605 = !DILocation(line: 2661, column: 11, scope: !7600)
!7606 = !DILocation(line: 2661, column: 24, scope: !7600)
!7607 = !DILocation(line: 2661, column: 36, scope: !7600)
!7608 = !DILocation(line: 2663, column: 23, scope: !7536)
!7609 = !DILocation(line: 2663, column: 3, scope: !7536)
!7610 = !DILocation(line: 2663, column: 9, scope: !7536)
!7611 = !DILocation(line: 2663, column: 21, scope: !7536)
!7612 = !DILocation(line: 2664, column: 23, scope: !7536)
!7613 = !DILocation(line: 2664, column: 3, scope: !7536)
!7614 = !DILocation(line: 2664, column: 9, scope: !7536)
!7615 = !DILocation(line: 2664, column: 21, scope: !7536)
!7616 = !DILocation(line: 2666, column: 23, scope: !7536)
!7617 = !DILocation(line: 2666, column: 3, scope: !7536)
!7618 = !DILocation(line: 2666, column: 9, scope: !7536)
!7619 = !DILocation(line: 2666, column: 21, scope: !7536)
!7620 = !DILocation(line: 2667, column: 7, scope: !7621)
!7621 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 2667, column: 7)
!7622 = !DILocation(line: 2667, column: 7, scope: !7536)
!7623 = !DILocation(line: 2668, column: 25, scope: !7621)
!7624 = !DILocation(line: 2668, column: 5, scope: !7621)
!7625 = !DILocation(line: 2668, column: 11, scope: !7621)
!7626 = !DILocation(line: 2668, column: 23, scope: !7621)
!7627 = !DILocation(line: 2670, column: 3, scope: !7536)
!7628 = !DILocation(line: 2671, column: 1, scope: !7536)
!7629 = distinct !DISubprogram(name: "remove_node_from_ps", scope: !3, file: !3, line: 2534, type: !7630, scopeLine: 2535, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7630 = !DISubroutineType(types: !7631)
!7631 = !{!1226, !2218, !2226}
!7632 = !DILocalVariable(name: "ps", arg: 1, scope: !7629, file: !3, line: 2534, type: !2218)
!7633 = !DILocation(line: 2534, column: 43, scope: !7629)
!7634 = !DILocalVariable(name: "ps_i", arg: 2, scope: !7629, file: !3, line: 2534, type: !2226)
!7635 = !DILocation(line: 2534, column: 59, scope: !7629)
!7636 = !DILocalVariable(name: "row", scope: !7629, file: !3, line: 2536, type: !1015)
!7637 = !DILocation(line: 2536, column: 7, scope: !7629)
!7638 = !DILocation(line: 2538, column: 8, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7629, file: !3, line: 2538, column: 7)
!7640 = !DILocation(line: 2538, column: 11, scope: !7639)
!7641 = !DILocation(line: 2538, column: 15, scope: !7639)
!7642 = !DILocation(line: 2538, column: 7, scope: !7629)
!7643 = !DILocation(line: 2539, column: 5, scope: !7639)
!7644 = !DILocation(line: 2541, column: 9, scope: !7629)
!7645 = !DILocation(line: 2541, column: 7, scope: !7629)
!7646 = !DILocation(line: 2542, column: 9, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7629, file: !3, line: 2542, column: 7)
!7648 = !DILocation(line: 2542, column: 15, scope: !7647)
!7649 = !DILocation(line: 2542, column: 7, scope: !7629)
!7650 = !DILocation(line: 2544, column: 11, scope: !7651)
!7651 = distinct !DILexicalBlock(scope: !7652, file: !3, line: 2544, column: 11)
!7652 = distinct !DILexicalBlock(scope: !7647, file: !3, line: 2543, column: 5)
!7653 = !DILocation(line: 2544, column: 19, scope: !7651)
!7654 = !DILocation(line: 2544, column: 23, scope: !7651)
!7655 = !DILocation(line: 2544, column: 28, scope: !7651)
!7656 = !DILocation(line: 2544, column: 16, scope: !7651)
!7657 = !DILocation(line: 2544, column: 11, scope: !7652)
!7658 = !DILocation(line: 2545, column: 2, scope: !7651)
!7659 = !DILocation(line: 2547, column: 23, scope: !7652)
!7660 = !DILocation(line: 2547, column: 29, scope: !7652)
!7661 = !DILocation(line: 2547, column: 7, scope: !7652)
!7662 = !DILocation(line: 2547, column: 11, scope: !7652)
!7663 = !DILocation(line: 2547, column: 16, scope: !7652)
!7664 = !DILocation(line: 2547, column: 21, scope: !7652)
!7665 = !DILocation(line: 2548, column: 11, scope: !7666)
!7666 = distinct !DILexicalBlock(scope: !7652, file: !3, line: 2548, column: 11)
!7667 = !DILocation(line: 2548, column: 15, scope: !7666)
!7668 = !DILocation(line: 2548, column: 20, scope: !7666)
!7669 = !DILocation(line: 2548, column: 11, scope: !7652)
!7670 = !DILocation(line: 2549, column: 2, scope: !7666)
!7671 = !DILocation(line: 2549, column: 6, scope: !7666)
!7672 = !DILocation(line: 2549, column: 11, scope: !7666)
!7673 = !DILocation(line: 2549, column: 17, scope: !7666)
!7674 = !DILocation(line: 2549, column: 29, scope: !7666)
!7675 = !DILocation(line: 2550, column: 5, scope: !7652)
!7676 = !DILocation(line: 2553, column: 40, scope: !7677)
!7677 = distinct !DILexicalBlock(scope: !7647, file: !3, line: 2552, column: 5)
!7678 = !DILocation(line: 2553, column: 46, scope: !7677)
!7679 = !DILocation(line: 2553, column: 7, scope: !7677)
!7680 = !DILocation(line: 2553, column: 13, scope: !7677)
!7681 = !DILocation(line: 2553, column: 26, scope: !7677)
!7682 = !DILocation(line: 2553, column: 38, scope: !7677)
!7683 = !DILocation(line: 2554, column: 11, scope: !7684)
!7684 = distinct !DILexicalBlock(scope: !7677, file: !3, line: 2554, column: 11)
!7685 = !DILocation(line: 2554, column: 17, scope: !7684)
!7686 = !DILocation(line: 2554, column: 11, scope: !7677)
!7687 = !DILocation(line: 2555, column: 35, scope: !7684)
!7688 = !DILocation(line: 2555, column: 41, scope: !7684)
!7689 = !DILocation(line: 2555, column: 2, scope: !7684)
!7690 = !DILocation(line: 2555, column: 8, scope: !7684)
!7691 = !DILocation(line: 2555, column: 21, scope: !7684)
!7692 = !DILocation(line: 2555, column: 33, scope: !7684)
!7693 = !DILocation(line: 2557, column: 9, scope: !7629)
!7694 = !DILocation(line: 2557, column: 3, scope: !7629)
!7695 = !DILocation(line: 2558, column: 3, scope: !7629)
!7696 = !DILocation(line: 2559, column: 1, scope: !7629)
!7697 = distinct !DISubprogram(name: "create_ps_insn", scope: !3, file: !3, line: 2517, type: !7698, scopeLine: 2518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7698 = !DISubroutineType(types: !7699)
!7699 = !{!2226, !2166, !1015, !1015}
!7700 = !DILocalVariable(name: "node", arg: 1, scope: !7697, file: !3, line: 2517, type: !2166)
!7701 = !DILocation(line: 2517, column: 30, scope: !7697)
!7702 = !DILocalVariable(name: "rest_count", arg: 2, scope: !7697, file: !3, line: 2517, type: !1015)
!7703 = !DILocation(line: 2517, column: 40, scope: !7697)
!7704 = !DILocalVariable(name: "cycle", arg: 3, scope: !7697, file: !3, line: 2517, type: !1015)
!7705 = !DILocation(line: 2517, column: 56, scope: !7697)
!7706 = !DILocalVariable(name: "ps_i", scope: !7697, file: !3, line: 2519, type: !2226)
!7707 = !DILocation(line: 2519, column: 15, scope: !7697)
!7708 = !DILocation(line: 2519, column: 22, scope: !7697)
!7709 = !DILocation(line: 2521, column: 16, scope: !7697)
!7710 = !DILocation(line: 2521, column: 3, scope: !7697)
!7711 = !DILocation(line: 2521, column: 9, scope: !7697)
!7712 = !DILocation(line: 2521, column: 14, scope: !7697)
!7713 = !DILocation(line: 2522, column: 3, scope: !7697)
!7714 = !DILocation(line: 2522, column: 9, scope: !7697)
!7715 = !DILocation(line: 2522, column: 21, scope: !7697)
!7716 = !DILocation(line: 2523, column: 3, scope: !7697)
!7717 = !DILocation(line: 2523, column: 9, scope: !7697)
!7718 = !DILocation(line: 2523, column: 21, scope: !7697)
!7719 = !DILocation(line: 2524, column: 26, scope: !7697)
!7720 = !DILocation(line: 2524, column: 3, scope: !7697)
!7721 = !DILocation(line: 2524, column: 9, scope: !7697)
!7722 = !DILocation(line: 2524, column: 24, scope: !7697)
!7723 = !DILocation(line: 2525, column: 17, scope: !7697)
!7724 = !DILocation(line: 2525, column: 3, scope: !7697)
!7725 = !DILocation(line: 2525, column: 9, scope: !7697)
!7726 = !DILocation(line: 2525, column: 15, scope: !7697)
!7727 = !DILocation(line: 2527, column: 10, scope: !7697)
!7728 = !DILocation(line: 2527, column: 3, scope: !7697)
!7729 = distinct !DISubprogram(name: "ps_insn_find_column", scope: !3, file: !3, line: 2568, type: !7730, scopeLine: 2570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7730 = !DISubroutineType(types: !7731)
!7731 = !{!1226, !2218, !2226, !2195, !2195}
!7732 = !DILocalVariable(name: "ps", arg: 1, scope: !7729, file: !3, line: 2568, type: !2218)
!7733 = !DILocation(line: 2568, column: 43, scope: !7729)
!7734 = !DILocalVariable(name: "ps_i", arg: 2, scope: !7729, file: !3, line: 2568, type: !2226)
!7735 = !DILocation(line: 2568, column: 59, scope: !7729)
!7736 = !DILocalVariable(name: "must_precede", arg: 3, scope: !7729, file: !3, line: 2569, type: !2195)
!7737 = !DILocation(line: 2569, column: 16, scope: !7729)
!7738 = !DILocalVariable(name: "must_follow", arg: 4, scope: !7729, file: !3, line: 2569, type: !2195)
!7739 = !DILocation(line: 2569, column: 38, scope: !7729)
!7740 = !DILocalVariable(name: "next_ps_i", scope: !7729, file: !3, line: 2571, type: !2226)
!7741 = !DILocation(line: 2571, column: 15, scope: !7729)
!7742 = !DILocalVariable(name: "first_must_follow", scope: !7729, file: !3, line: 2572, type: !2226)
!7743 = !DILocation(line: 2572, column: 15, scope: !7729)
!7744 = !DILocalVariable(name: "last_must_precede", scope: !7729, file: !3, line: 2573, type: !2226)
!7745 = !DILocation(line: 2573, column: 15, scope: !7729)
!7746 = !DILocalVariable(name: "row", scope: !7729, file: !3, line: 2574, type: !1015)
!7747 = !DILocation(line: 2574, column: 7, scope: !7729)
!7748 = !DILocation(line: 2576, column: 9, scope: !7749)
!7749 = distinct !DILexicalBlock(scope: !7729, file: !3, line: 2576, column: 7)
!7750 = !DILocation(line: 2576, column: 7, scope: !7729)
!7751 = !DILocation(line: 2577, column: 5, scope: !7749)
!7752 = !DILocation(line: 2579, column: 9, scope: !7729)
!7753 = !DILocation(line: 2579, column: 7, scope: !7729)
!7754 = !DILocation(line: 2584, column: 20, scope: !7755)
!7755 = distinct !DILexicalBlock(scope: !7729, file: !3, line: 2584, column: 3)
!7756 = !DILocation(line: 2584, column: 24, scope: !7755)
!7757 = !DILocation(line: 2584, column: 29, scope: !7755)
!7758 = !DILocation(line: 2584, column: 18, scope: !7755)
!7759 = !DILocation(line: 2584, column: 8, scope: !7755)
!7760 = !DILocation(line: 2585, column: 8, scope: !7761)
!7761 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 2584, column: 3)
!7762 = !DILocation(line: 2584, column: 3, scope: !7755)
!7763 = !DILocation(line: 2588, column: 11, scope: !7764)
!7764 = distinct !DILexicalBlock(scope: !7765, file: !3, line: 2588, column: 11)
!7765 = distinct !DILexicalBlock(scope: !7761, file: !3, line: 2587, column: 5)
!7766 = !DILocation(line: 2588, column: 23, scope: !7764)
!7767 = !DILocation(line: 2588, column: 26, scope: !7764)
!7768 = !DILocation(line: 2589, column: 4, scope: !7764)
!7769 = !DILocation(line: 2589, column: 9, scope: !7764)
!7770 = !DILocation(line: 2588, column: 11, scope: !7765)
!7771 = !DILocation(line: 2590, column: 29, scope: !7764)
!7772 = !DILocation(line: 2590, column: 27, scope: !7764)
!7773 = !DILocation(line: 2590, column: 9, scope: !7764)
!7774 = !DILocation(line: 2591, column: 11, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7765, file: !3, line: 2591, column: 11)
!7776 = !DILocation(line: 2591, column: 24, scope: !7775)
!7777 = !DILocation(line: 2591, column: 27, scope: !7775)
!7778 = !DILocation(line: 2591, column: 11, scope: !7765)
!7779 = !DILocation(line: 2595, column: 10, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7781, file: !3, line: 2595, column: 10)
!7781 = distinct !DILexicalBlock(scope: !7775, file: !3, line: 2592, column: 9)
!7782 = !DILocation(line: 2595, column: 10, scope: !7781)
!7783 = !DILocation(line: 2596, column: 13, scope: !7780)
!7784 = !DILocation(line: 2598, column: 33, scope: !7780)
!7785 = !DILocation(line: 2598, column: 31, scope: !7780)
!7786 = !DILocation(line: 2599, column: 9, scope: !7781)
!7787 = !DILocation(line: 2600, column: 5, scope: !7765)
!7788 = !DILocation(line: 2586, column: 20, scope: !7761)
!7789 = !DILocation(line: 2586, column: 31, scope: !7761)
!7790 = !DILocation(line: 2586, column: 18, scope: !7761)
!7791 = !DILocation(line: 2584, column: 3, scope: !7761)
!7792 = distinct !{!7792, !7762, !7793}
!7793 = !DILocation(line: 2600, column: 5, scope: !7755)
!7794 = !DILocation(line: 2604, column: 9, scope: !7795)
!7795 = distinct !DILexicalBlock(scope: !7729, file: !3, line: 2604, column: 7)
!7796 = !DILocation(line: 2604, column: 7, scope: !7729)
!7797 = !DILocation(line: 2606, column: 27, scope: !7798)
!7798 = distinct !DILexicalBlock(scope: !7795, file: !3, line: 2605, column: 5)
!7799 = !DILocation(line: 2606, column: 31, scope: !7798)
!7800 = !DILocation(line: 2606, column: 36, scope: !7798)
!7801 = !DILocation(line: 2606, column: 7, scope: !7798)
!7802 = !DILocation(line: 2606, column: 13, scope: !7798)
!7803 = !DILocation(line: 2606, column: 25, scope: !7798)
!7804 = !DILocation(line: 2607, column: 7, scope: !7798)
!7805 = !DILocation(line: 2607, column: 13, scope: !7798)
!7806 = !DILocation(line: 2607, column: 25, scope: !7798)
!7807 = !DILocation(line: 2608, column: 11, scope: !7808)
!7808 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 2608, column: 11)
!7809 = !DILocation(line: 2608, column: 17, scope: !7808)
!7810 = !DILocation(line: 2608, column: 11, scope: !7798)
!7811 = !DILocation(line: 2609, column: 39, scope: !7808)
!7812 = !DILocation(line: 2609, column: 6, scope: !7808)
!7813 = !DILocation(line: 2609, column: 12, scope: !7808)
!7814 = !DILocation(line: 2609, column: 25, scope: !7808)
!7815 = !DILocation(line: 2609, column: 37, scope: !7808)
!7816 = !DILocation(line: 2610, column: 23, scope: !7798)
!7817 = !DILocation(line: 2610, column: 7, scope: !7798)
!7818 = !DILocation(line: 2610, column: 11, scope: !7798)
!7819 = !DILocation(line: 2610, column: 16, scope: !7798)
!7820 = !DILocation(line: 2610, column: 21, scope: !7798)
!7821 = !DILocation(line: 2611, column: 5, scope: !7798)
!7822 = !DILocation(line: 2614, column: 27, scope: !7823)
!7823 = distinct !DILexicalBlock(scope: !7795, file: !3, line: 2613, column: 5)
!7824 = !DILocation(line: 2614, column: 46, scope: !7823)
!7825 = !DILocation(line: 2614, column: 7, scope: !7823)
!7826 = !DILocation(line: 2614, column: 13, scope: !7823)
!7827 = !DILocation(line: 2614, column: 25, scope: !7823)
!7828 = !DILocation(line: 2615, column: 40, scope: !7823)
!7829 = !DILocation(line: 2615, column: 7, scope: !7823)
!7830 = !DILocation(line: 2615, column: 26, scope: !7823)
!7831 = !DILocation(line: 2615, column: 38, scope: !7823)
!7832 = !DILocation(line: 2616, column: 27, scope: !7823)
!7833 = !DILocation(line: 2616, column: 7, scope: !7823)
!7834 = !DILocation(line: 2616, column: 13, scope: !7823)
!7835 = !DILocation(line: 2616, column: 25, scope: !7823)
!7836 = !DILocation(line: 2617, column: 11, scope: !7837)
!7837 = distinct !DILexicalBlock(scope: !7823, file: !3, line: 2617, column: 11)
!7838 = !DILocation(line: 2617, column: 17, scope: !7837)
!7839 = !DILocation(line: 2617, column: 11, scope: !7823)
!7840 = !DILocation(line: 2618, column: 42, scope: !7837)
!7841 = !DILocation(line: 2618, column: 9, scope: !7837)
!7842 = !DILocation(line: 2618, column: 15, scope: !7837)
!7843 = !DILocation(line: 2618, column: 28, scope: !7837)
!7844 = !DILocation(line: 2618, column: 40, scope: !7837)
!7845 = !DILocation(line: 2621, column: 3, scope: !7729)
!7846 = !DILocation(line: 2622, column: 1, scope: !7729)
!7847 = distinct !DISubprogram(name: "advance_one_cycle", scope: !3, file: !3, line: 2708, type: !2313, scopeLine: 2709, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7848 = !DILocation(line: 2710, column: 21, scope: !7849)
!7849 = distinct !DILexicalBlock(scope: !7847, file: !3, line: 2710, column: 7)
!7850 = !DILocation(line: 2710, column: 7, scope: !7849)
!7851 = !DILocation(line: 2710, column: 7, scope: !7847)
!7852 = !DILocation(line: 2711, column: 23, scope: !7849)
!7853 = !DILocation(line: 2712, column: 23, scope: !7849)
!7854 = !DILocation(line: 2712, column: 9, scope: !7849)
!7855 = !DILocation(line: 2711, column: 5, scope: !7849)
!7856 = !DILocation(line: 2714, column: 21, scope: !7847)
!7857 = !DILocation(line: 2714, column: 3, scope: !7847)
!7858 = !DILocation(line: 2716, column: 21, scope: !7859)
!7859 = distinct !DILexicalBlock(scope: !7847, file: !3, line: 2716, column: 7)
!7860 = !DILocation(line: 2716, column: 7, scope: !7859)
!7861 = !DILocation(line: 2716, column: 7, scope: !7847)
!7862 = !DILocation(line: 2717, column: 23, scope: !7859)
!7863 = !DILocation(line: 2718, column: 23, scope: !7859)
!7864 = !DILocation(line: 2718, column: 9, scope: !7859)
!7865 = !DILocation(line: 2717, column: 5, scope: !7859)
!7866 = !DILocation(line: 2719, column: 1, scope: !7847)
!7867 = distinct !DISubprogram(name: "free_ps_insns", scope: !3, file: !3, line: 2446, type: !4146, scopeLine: 2447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7868 = !DILocalVariable(name: "ps", arg: 1, scope: !7867, file: !3, line: 2446, type: !2218)
!7869 = !DILocation(line: 2446, column: 37, scope: !7867)
!7870 = !DILocalVariable(name: "i", scope: !7867, file: !3, line: 2448, type: !1015)
!7871 = !DILocation(line: 2448, column: 7, scope: !7867)
!7872 = !DILocation(line: 2450, column: 10, scope: !7873)
!7873 = distinct !DILexicalBlock(scope: !7867, file: !3, line: 2450, column: 3)
!7874 = !DILocation(line: 2450, column: 8, scope: !7873)
!7875 = !DILocation(line: 2450, column: 15, scope: !7876)
!7876 = distinct !DILexicalBlock(scope: !7873, file: !3, line: 2450, column: 3)
!7877 = !DILocation(line: 2450, column: 19, scope: !7876)
!7878 = !DILocation(line: 2450, column: 23, scope: !7876)
!7879 = !DILocation(line: 2450, column: 17, scope: !7876)
!7880 = !DILocation(line: 2450, column: 3, scope: !7873)
!7881 = !DILocation(line: 2452, column: 7, scope: !7882)
!7882 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 2451, column: 5)
!7883 = !DILocation(line: 2452, column: 14, scope: !7882)
!7884 = !DILocation(line: 2452, column: 18, scope: !7882)
!7885 = !DILocation(line: 2452, column: 23, scope: !7882)
!7886 = !DILocalVariable(name: "ps_insn", scope: !7887, file: !3, line: 2454, type: !2226)
!7887 = distinct !DILexicalBlock(scope: !7882, file: !3, line: 2453, column: 2)
!7888 = !DILocation(line: 2454, column: 16, scope: !7887)
!7889 = !DILocation(line: 2454, column: 26, scope: !7887)
!7890 = !DILocation(line: 2454, column: 30, scope: !7887)
!7891 = !DILocation(line: 2454, column: 35, scope: !7887)
!7892 = !DILocation(line: 2454, column: 39, scope: !7887)
!7893 = !DILocation(line: 2456, column: 10, scope: !7887)
!7894 = !DILocation(line: 2456, column: 14, scope: !7887)
!7895 = !DILocation(line: 2456, column: 19, scope: !7887)
!7896 = !DILocation(line: 2456, column: 4, scope: !7887)
!7897 = !DILocation(line: 2457, column: 18, scope: !7887)
!7898 = !DILocation(line: 2457, column: 4, scope: !7887)
!7899 = !DILocation(line: 2457, column: 8, scope: !7887)
!7900 = !DILocation(line: 2457, column: 13, scope: !7887)
!7901 = !DILocation(line: 2457, column: 16, scope: !7887)
!7902 = distinct !{!7902, !7881, !7903}
!7903 = !DILocation(line: 2458, column: 2, scope: !7882)
!7904 = !DILocation(line: 2459, column: 7, scope: !7882)
!7905 = !DILocation(line: 2459, column: 11, scope: !7882)
!7906 = !DILocation(line: 2459, column: 16, scope: !7882)
!7907 = !DILocation(line: 2459, column: 19, scope: !7882)
!7908 = !DILocation(line: 2460, column: 5, scope: !7882)
!7909 = !DILocation(line: 2450, column: 28, scope: !7876)
!7910 = !DILocation(line: 2450, column: 3, scope: !7876)
!7911 = distinct !{!7911, !7880, !7912}
!7912 = !DILocation(line: 2460, column: 5, scope: !7873)
!7913 = !DILocation(line: 2461, column: 1, scope: !7867)
!7914 = distinct !DISubprogram(name: "ei_start_1", scope: !155, file: !155, line: 696, type: !7915, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7915 = !DISubroutineType(types: !7916)
!7916 = !{!4353, !4358}
!7917 = !DILocalVariable(name: "ev", arg: 1, scope: !7914, file: !155, line: 696, type: !4358)
!7918 = !DILocation(line: 696, column: 28, scope: !7914)
!7919 = !DILocalVariable(name: "i", scope: !7914, file: !155, line: 698, type: !4353)
!7920 = !DILocation(line: 698, column: 17, scope: !7914)
!7921 = !DILocation(line: 700, column: 5, scope: !7914)
!7922 = !DILocation(line: 700, column: 11, scope: !7914)
!7923 = !DILocation(line: 701, column: 17, scope: !7914)
!7924 = !DILocation(line: 701, column: 5, scope: !7914)
!7925 = !DILocation(line: 701, column: 15, scope: !7914)
!7926 = !DILocation(line: 703, column: 3, scope: !7914)
!7927 = distinct !DISubprogram(name: "ei_cond", scope: !155, file: !155, line: 771, type: !7928, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7928 = !DISubroutineType(types: !7929)
!7929 = !{!1226, !4353, !7930}
!7930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !978, size: 64)
!7931 = !DILocalVariable(name: "ei", arg: 1, scope: !7927, file: !155, line: 771, type: !4353)
!7932 = !DILocation(line: 771, column: 24, scope: !7927)
!7933 = !DILocalVariable(name: "p", arg: 2, scope: !7927, file: !155, line: 771, type: !7930)
!7934 = !DILocation(line: 771, column: 34, scope: !7927)
!7935 = !DILocation(line: 773, column: 8, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !7927, file: !155, line: 773, column: 7)
!7937 = !DILocation(line: 773, column: 7, scope: !7927)
!7938 = !DILocation(line: 775, column: 12, scope: !7939)
!7939 = distinct !DILexicalBlock(scope: !7936, file: !155, line: 774, column: 5)
!7940 = !DILocation(line: 775, column: 8, scope: !7939)
!7941 = !DILocation(line: 775, column: 10, scope: !7939)
!7942 = !DILocation(line: 776, column: 7, scope: !7939)
!7943 = !DILocation(line: 780, column: 8, scope: !7944)
!7944 = distinct !DILexicalBlock(scope: !7936, file: !155, line: 779, column: 5)
!7945 = !DILocation(line: 780, column: 10, scope: !7944)
!7946 = !DILocation(line: 781, column: 7, scope: !7944)
!7947 = !DILocation(line: 783, column: 1, scope: !7927)
!7948 = distinct !DISubprogram(name: "ei_next", scope: !155, file: !155, line: 736, type: !7949, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7949 = !DISubroutineType(types: !7950)
!7950 = !{null, !7951}
!7951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4353, size: 64)
!7952 = !DILocalVariable(name: "i", arg: 1, scope: !7948, file: !155, line: 736, type: !7951)
!7953 = !DILocation(line: 736, column: 25, scope: !7948)
!7954 = !DILocation(line: 738, column: 3, scope: !7948)
!7955 = !DILocation(line: 739, column: 3, scope: !7948)
!7956 = !DILocation(line: 739, column: 6, scope: !7948)
!7957 = !DILocation(line: 739, column: 11, scope: !7948)
!7958 = !DILocation(line: 740, column: 1, scope: !7948)
!7959 = distinct !DISubprogram(name: "ei_end_p", scope: !155, file: !155, line: 721, type: !7960, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7960 = !DISubroutineType(types: !7961)
!7961 = !{!1226, !4353}
!7962 = !DILocalVariable(name: "i", arg: 1, scope: !7959, file: !155, line: 721, type: !4353)
!7963 = !DILocation(line: 721, column: 25, scope: !7959)
!7964 = !DILocation(line: 723, column: 13, scope: !7959)
!7965 = !DILocation(line: 723, column: 22, scope: !7959)
!7966 = !DILocation(line: 723, column: 19, scope: !7959)
!7967 = !DILocation(line: 723, column: 10, scope: !7959)
!7968 = !DILocation(line: 723, column: 3, scope: !7959)
!7969 = distinct !DISubprogram(name: "ei_edge", scope: !155, file: !155, line: 752, type: !7970, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7970 = !DISubroutineType(types: !7971)
!7971 = !{!978, !4353}
!7972 = !DILocalVariable(name: "i", arg: 1, scope: !7969, file: !155, line: 752, type: !4353)
!7973 = !DILocation(line: 752, column: 24, scope: !7969)
!7974 = !DILocation(line: 754, column: 10, scope: !7969)
!7975 = !DILocation(line: 754, column: 3, scope: !7969)
!7976 = distinct !DISubprogram(name: "ei_container", scope: !155, file: !155, line: 685, type: !7977, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7977 = !DISubroutineType(types: !7978)
!7978 = !{!966, !4353}
!7979 = !DILocalVariable(name: "i", arg: 1, scope: !7976, file: !155, line: 685, type: !4353)
!7980 = !DILocation(line: 685, column: 29, scope: !7976)
!7981 = !DILocation(line: 687, column: 3, scope: !7976)
!7982 = !DILocation(line: 688, column: 13, scope: !7976)
!7983 = !DILocation(line: 688, column: 10, scope: !7976)
!7984 = !DILocation(line: 688, column: 3, scope: !7976)
!7985 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !155, file: !155, line: 150, type: !7986, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7986 = !DISubroutineType(types: !7987)
!7987 = !{!978, !5063, !7}
!7988 = !DILocalVariable(name: "vec_", arg: 1, scope: !7985, file: !155, line: 150, type: !5063)
!7989 = !DILocation(line: 150, column: 1, scope: !7985)
!7990 = !DILocalVariable(name: "ix_", arg: 2, scope: !7985, file: !155, line: 150, type: !7)
!7991 = !DILocation(line: 0, scope: !7985)
!7992 = distinct !DISubprogram(name: "rhs_regno", scope: !772, file: !772, line: 1051, type: !7993, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!7993 = !DISubroutineType(types: !7994)
!7994 = !{!7, !2359}
!7995 = !DILocalVariable(name: "x", arg: 1, scope: !7992, file: !772, line: 1051, type: !2359)
!7996 = !DILocation(line: 1051, column: 22, scope: !7992)
!7997 = !DILocation(line: 1053, column: 10, scope: !7992)
!7998 = !DILocation(line: 1053, column: 3, scope: !7992)
!7999 = distinct !DISubprogram(name: "duplicate_insns_of_cycles", scope: !3, file: !3, line: 634, type: !8000, scopeLine: 636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2389)
!8000 = !DISubroutineType(types: !8001)
!8001 = !{null, !2218, !1015, !1015, !1015, !992}
!8002 = !DILocalVariable(name: "ps", arg: 1, scope: !7999, file: !3, line: 634, type: !2218)
!8003 = !DILocation(line: 634, column: 49, scope: !7999)
!8004 = !DILocalVariable(name: "from_stage", arg: 2, scope: !7999, file: !3, line: 634, type: !1015)
!8005 = !DILocation(line: 634, column: 57, scope: !7999)
!8006 = !DILocalVariable(name: "to_stage", arg: 3, scope: !7999, file: !3, line: 635, type: !1015)
!8007 = !DILocation(line: 635, column: 11, scope: !7999)
!8008 = !DILocalVariable(name: "for_prolog", arg: 4, scope: !7999, file: !3, line: 635, type: !1015)
!8009 = !DILocation(line: 635, column: 25, scope: !7999)
!8010 = !DILocalVariable(name: "count_reg", arg: 5, scope: !7999, file: !3, line: 635, type: !992)
!8011 = !DILocation(line: 635, column: 41, scope: !7999)
!8012 = !DILocalVariable(name: "row", scope: !7999, file: !3, line: 637, type: !1015)
!8013 = !DILocation(line: 637, column: 7, scope: !7999)
!8014 = !DILocalVariable(name: "ps_ij", scope: !7999, file: !3, line: 638, type: !2226)
!8015 = !DILocation(line: 638, column: 15, scope: !7999)
!8016 = !DILocation(line: 640, column: 12, scope: !8017)
!8017 = distinct !DILexicalBlock(scope: !7999, file: !3, line: 640, column: 3)
!8018 = !DILocation(line: 640, column: 8, scope: !8017)
!8019 = !DILocation(line: 640, column: 17, scope: !8020)
!8020 = distinct !DILexicalBlock(scope: !8017, file: !3, line: 640, column: 3)
!8021 = !DILocation(line: 640, column: 23, scope: !8020)
!8022 = !DILocation(line: 640, column: 27, scope: !8020)
!8023 = !DILocation(line: 640, column: 21, scope: !8020)
!8024 = !DILocation(line: 640, column: 3, scope: !8017)
!8025 = !DILocation(line: 641, column: 18, scope: !8026)
!8026 = distinct !DILexicalBlock(scope: !8020, file: !3, line: 641, column: 5)
!8027 = !DILocation(line: 641, column: 22, scope: !8026)
!8028 = !DILocation(line: 641, column: 27, scope: !8026)
!8029 = !DILocation(line: 641, column: 16, scope: !8026)
!8030 = !DILocation(line: 641, column: 10, scope: !8026)
!8031 = !DILocation(line: 641, column: 33, scope: !8032)
!8032 = distinct !DILexicalBlock(scope: !8026, file: !3, line: 641, column: 5)
!8033 = !DILocation(line: 641, column: 5, scope: !8026)
!8034 = !DILocalVariable(name: "u_node", scope: !8035, file: !3, line: 643, type: !2166)
!8035 = distinct !DILexicalBlock(scope: !8032, file: !3, line: 642, column: 7)
!8036 = !DILocation(line: 643, column: 15, scope: !8035)
!8037 = !DILocation(line: 643, column: 24, scope: !8035)
!8038 = !DILocation(line: 643, column: 31, scope: !8035)
!8039 = !DILocalVariable(name: "j", scope: !8035, file: !3, line: 644, type: !1015)
!8040 = !DILocation(line: 644, column: 6, scope: !8035)
!8041 = !DILocalVariable(name: "i_reg_moves", scope: !8035, file: !3, line: 644, type: !1015)
!8042 = !DILocation(line: 644, column: 9, scope: !8035)
!8043 = !DILocalVariable(name: "reg_move", scope: !8035, file: !3, line: 645, type: !992)
!8044 = !DILocation(line: 645, column: 6, scope: !8035)
!8045 = !DILocation(line: 651, column: 30, scope: !8046)
!8046 = distinct !DILexicalBlock(scope: !8035, file: !3, line: 651, column: 13)
!8047 = !DILocation(line: 651, column: 41, scope: !8046)
!8048 = !DILocation(line: 651, column: 49, scope: !8046)
!8049 = !DILocation(line: 651, column: 13, scope: !8046)
!8050 = !DILocation(line: 651, column: 13, scope: !8035)
!8051 = !DILocation(line: 652, column: 11, scope: !8046)
!8052 = !DILocation(line: 654, column: 6, scope: !8053)
!8053 = distinct !DILexicalBlock(scope: !8035, file: !3, line: 654, column: 6)
!8054 = !DILocation(line: 654, column: 6, scope: !8035)
!8055 = !DILocation(line: 659, column: 20, scope: !8056)
!8056 = distinct !DILexicalBlock(scope: !8053, file: !3, line: 655, column: 4)
!8057 = !DILocation(line: 659, column: 31, scope: !8056)
!8058 = !DILocation(line: 659, column: 29, scope: !8056)
!8059 = !DILocation(line: 659, column: 52, scope: !8056)
!8060 = !DILocation(line: 659, column: 18, scope: !8056)
!8061 = !DILocation(line: 660, column: 20, scope: !8056)
!8062 = !DILocation(line: 660, column: 18, scope: !8056)
!8063 = !DILocation(line: 661, column: 20, scope: !8056)
!8064 = !DILocation(line: 661, column: 18, scope: !8056)
!8065 = !DILocation(line: 664, column: 10, scope: !8066)
!8066 = distinct !DILexicalBlock(scope: !8056, file: !3, line: 664, column: 10)
!8067 = !DILocation(line: 664, column: 10, scope: !8056)
!8068 = !DILocation(line: 666, column: 14, scope: !8069)
!8069 = distinct !DILexicalBlock(scope: !8066, file: !3, line: 665, column: 8)
!8070 = !DILocation(line: 666, column: 12, scope: !8069)
!8071 = !DILocation(line: 667, column: 10, scope: !8072)
!8072 = distinct !DILexicalBlock(scope: !8069, file: !3, line: 667, column: 3)
!8073 = !DILocation(line: 667, column: 8, scope: !8072)
!8074 = !DILocation(line: 667, column: 15, scope: !8075)
!8075 = distinct !DILexicalBlock(scope: !8072, file: !3, line: 667, column: 3)
!8076 = !DILocation(line: 667, column: 19, scope: !8075)
!8077 = !DILocation(line: 667, column: 17, scope: !8075)
!8078 = !DILocation(line: 667, column: 3, scope: !8072)
!8079 = !DILocation(line: 668, column: 16, scope: !8075)
!8080 = !DILocation(line: 668, column: 14, scope: !8075)
!8081 = !DILocation(line: 668, column: 5, scope: !8075)
!8082 = !DILocation(line: 667, column: 33, scope: !8075)
!8083 = !DILocation(line: 667, column: 3, scope: !8075)
!8084 = distinct !{!8084, !8078, !8085}
!8085 = !DILocation(line: 668, column: 16, scope: !8072)
!8086 = !DILocation(line: 669, column: 8, scope: !8069)
!8087 = !DILocation(line: 670, column: 4, scope: !8056)
!8088 = !DILocation(line: 677, column: 20, scope: !8089)
!8089 = distinct !DILexicalBlock(scope: !8053, file: !3, line: 672, column: 4)
!8090 = !DILocation(line: 678, column: 17, scope: !8089)
!8091 = !DILocation(line: 678, column: 30, scope: !8089)
!8092 = !DILocation(line: 678, column: 28, scope: !8089)
!8093 = !DILocation(line: 678, column: 51, scope: !8089)
!8094 = !DILocation(line: 678, column: 14, scope: !8089)
!8095 = !DILocation(line: 677, column: 18, scope: !8089)
!8096 = !DILocation(line: 679, column: 20, scope: !8089)
!8097 = !DILocation(line: 679, column: 18, scope: !8089)
!8098 = !DILocation(line: 680, column: 20, scope: !8089)
!8099 = !DILocation(line: 680, column: 18, scope: !8089)
!8100 = !DILocation(line: 683, column: 10, scope: !8101)
!8101 = distinct !DILexicalBlock(scope: !8089, file: !3, line: 683, column: 10)
!8102 = !DILocation(line: 683, column: 10, scope: !8089)
!8103 = !DILocation(line: 685, column: 14, scope: !8104)
!8104 = distinct !DILexicalBlock(scope: !8101, file: !3, line: 684, column: 8)
!8105 = !DILocation(line: 685, column: 12, scope: !8104)
!8106 = !DILocation(line: 686, column: 10, scope: !8107)
!8107 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 686, column: 3)
!8108 = !DILocation(line: 686, column: 8, scope: !8107)
!8109 = !DILocation(line: 686, column: 15, scope: !8110)
!8110 = distinct !DILexicalBlock(scope: !8107, file: !3, line: 686, column: 3)
!8111 = !DILocation(line: 686, column: 19, scope: !8110)
!8112 = !DILocation(line: 686, column: 17, scope: !8110)
!8113 = !DILocation(line: 686, column: 3, scope: !8107)
!8114 = !DILocation(line: 687, column: 16, scope: !8110)
!8115 = !DILocation(line: 687, column: 14, scope: !8110)
!8116 = !DILocation(line: 687, column: 5, scope: !8110)
!8117 = !DILocation(line: 686, column: 47, scope: !8110)
!8118 = !DILocation(line: 686, column: 3, scope: !8110)
!8119 = distinct !{!8119, !8113, !8120}
!8120 = !DILocation(line: 687, column: 16, scope: !8107)
!8121 = !DILocation(line: 688, column: 8, scope: !8104)
!8122 = !DILocation(line: 691, column: 9, scope: !8123)
!8123 = distinct !DILexicalBlock(scope: !8035, file: !3, line: 691, column: 2)
!8124 = !DILocation(line: 691, column: 7, scope: !8123)
!8125 = !DILocation(line: 691, column: 14, scope: !8126)
!8126 = distinct !DILexicalBlock(scope: !8123, file: !3, line: 691, column: 2)
!8127 = !DILocation(line: 691, column: 18, scope: !8126)
!8128 = !DILocation(line: 691, column: 16, scope: !8126)
!8129 = !DILocation(line: 691, column: 2, scope: !8123)
!8130 = !DILocation(line: 692, column: 25, scope: !8126)
!8131 = !DILocation(line: 692, column: 15, scope: !8126)
!8132 = !DILocation(line: 692, column: 4, scope: !8126)
!8133 = !DILocation(line: 691, column: 32, scope: !8126)
!8134 = !DILocation(line: 691, column: 47, scope: !8126)
!8135 = !DILocation(line: 691, column: 45, scope: !8126)
!8136 = !DILocation(line: 691, column: 2, scope: !8126)
!8137 = distinct !{!8137, !8129, !8138}
!8138 = !DILocation(line: 692, column: 44, scope: !8123)
!8139 = !DILocation(line: 693, column: 6, scope: !8140)
!8140 = distinct !DILexicalBlock(scope: !8035, file: !3, line: 693, column: 6)
!8141 = !DILocation(line: 693, column: 30, scope: !8140)
!8142 = !DILocation(line: 693, column: 27, scope: !8140)
!8143 = !DILocation(line: 694, column: 6, scope: !8140)
!8144 = !DILocation(line: 694, column: 9, scope: !8140)
!8145 = !DILocation(line: 694, column: 33, scope: !8140)
!8146 = !DILocation(line: 694, column: 30, scope: !8140)
!8147 = !DILocation(line: 693, column: 6, scope: !8035)
!8148 = !DILocation(line: 695, column: 26, scope: !8140)
!8149 = !DILocation(line: 695, column: 34, scope: !8140)
!8150 = !DILocation(line: 695, column: 46, scope: !8140)
!8151 = !DILocation(line: 695, column: 54, scope: !8140)
!8152 = !DILocation(line: 695, column: 4, scope: !8140)
!8153 = !DILocation(line: 696, column: 7, scope: !8035)
!8154 = !DILocation(line: 641, column: 48, scope: !8032)
!8155 = !DILocation(line: 641, column: 55, scope: !8032)
!8156 = !DILocation(line: 641, column: 46, scope: !8032)
!8157 = !DILocation(line: 641, column: 5, scope: !8032)
!8158 = distinct !{!8158, !8033, !8159}
!8159 = !DILocation(line: 696, column: 7, scope: !8026)
!8160 = !DILocation(line: 640, column: 34, scope: !8020)
!8161 = !DILocation(line: 640, column: 3, scope: !8020)
!8162 = distinct !{!8162, !8024, !8163}
!8163 = !DILocation(line: 696, column: 7, scope: !8017)
!8164 = !DILocation(line: 697, column: 1, scope: !7999)
